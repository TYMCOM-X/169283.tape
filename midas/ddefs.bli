SWITCHES NOLIST;
UNDECLARE $$$;
%
THIS IS THE MIDAS-1 UNIVERSAL FILE DDEFS.BLI
   FOR SYMBOLS USING THE <LETTER>; D.

DEFINITIONS OF STRUCTURES, MACROS, BINDS, ETC
  WHICH ARE USED BY MORE THAN ONE MIDAS MODULE
  ARE DEFINED HERE WITH  NAMES CORRESPONDING 
  TO THE CONVENTIONS OUTLINED IN SECTION
  1.9.4 PART E.

THE MAJORITY OF BLISS MODULES WILL BE COMPILED
  USING ONE OF THESE UNIVERSAL FILES.  THE FIRST EXPRESSION
  IN THE BLOCK HEADING WILL GENERALLY BE A REQUIRE
  STATEMENT:
       REQUIRE (MIDAS)DDEFS.BLI;

THE MACROS IN THIS FILE ARE TERMINATED WITH THE CHARACTER
AMPERSTAND:  &
THE NAMES IN THIS FILE CONTAIN DOLLAR SIGNS:  $
CONSEQUENTLY, THE MODULE HEADER OF ALL MODULES USING THIS
FILE MUST CONTAIN THE "DOLLAR" MODULE-PARAMETER.
%

% DELTA FILE ENTRIES %

STRUCTURE D$[FIELD]  = CASE .FIELD OF
        SET
        (@.D$ )<18,18>;          %LENGTH..18 BITS WORTH%
        (@.D$ )<0,18>;           % D$ID ..IDENTIFIER%
        (@.D$+1)<30,6>;           % D$TYPE..GOOD TYPE INFO%
        (@.D$+1)<24,6>;           % D$LRR ..LEFT REL REG%
        (@.D$+1)<18,6>;           % D$RRR ..RIGHT REL REG %
        (@.D$+1)<0,18>;           % D$OPND .. OPERAND INFO(USUALLY STP)%
        (@.D$+2)<0,36>;           % D$WD2 .. SECOND WORD%
        (@.D$+2)<18,18>;          % D$WD2L..LEFT  HALF%
        (@.D$+2)<0,18>;           % D$WD2R..RIGHT HALF%
        (@.D$+3)<0,36>;           % D$WD3 .. WORD 3%
        (@.D$+3)<18,18>;          % D$WD3L..LEFT HALF%
        (@.D$+3)<0,18>;           % D$WD3R ..RIGHT HALF%
        TES;

 
%NOW THE ALTERNATE STRUCTURE DEFINITION FOR D$%

STRUCTURE D$I[FIELD] = CASE .FIELD OF
        SET
        (.D$I)<18,18>;          %D$LENGTH%
        (.D$I)<0,18>;           %D$ID%
        (.D$I+1)<30,6>;         %D$TYPE%
        (.D$I+1)<24,6>;         %D$LRR%
        (.D$I+1)<18,6>;         %D$RRR%
        (.D$I+1)<0,18>; %D$OPND%
        (.D$I+2)<0,36>;         %D$WD2%
        (.D$I+2)<18,18>;        %D$WD2L%
        (.D$I+2)<0,18>;         %D$WD2R%
        (.D$I+3)<0,36>;         %D$WD3%
        (.D$I+3)<18,18>;        %D$WD3L%
        (.D$I+3)<0,18>;         %D$WD3R%
        TES;

BIND
        D$LENGTH = 0,
        D$ID = 1,
        D$TYPE = 2,
        D$LRR = 3,
        D$RRR = 4,
        D$OPND = 5,
        D$WD2 = 6,
        D$WD2L = 7,
        D$WD2R = 8,
        D$WD3 = 9,
        D$WD3L = 10,
        D$WD3R = 11;


BIND
        DV$MAXDREC = 54,  %SHOULD COVER ALL CASES..2/6/75%
        DV$EOF = 63;

%AND NOW THE VALUES OF D$TYPE%

BIND
        DV$CNST = 1, %STORE A SINGLE CONSTANT%
        DV$DRELB = 2, %RELOCATE BOTH HALVES%
        DV$DRELL = 3, %RELOCATE LEFT HALF%
        DV$DRELR = 4, %RELOCATE RIGHT HALF%
        DV$END = 63, %SOFT END OF FILE%
        DV$II = 5, %IMMEDIATE INSTRUCTION%
        DV$INCR = 6 , %INCREMENT LOCATION COUNTTER%
        DV$IREL = 7, %RELOCATE INSTRUCTION OPERAND FIELD%
        DV$ISTP = 8, %INSTRUCTION OPERAND IS AN STP%
        DV$LIT1 = 9, %ONE WORD LITERAL%
        DV$LIT2 = 10, % TWO WORD LITERAL%
        DV$LIT3 = 11, %THREE WOORD LITERAL%
        DV$LITS =12, %LITERAL STRING OF ASCII CHARACTERS%
        DV$LITN =13, %NAME STRING%
        DV$NOTE = 14, %A COMMENT%
        DV$SET = 15, %SET LOCATIION COUNTER%
        DV$SETL = 16, %SET LIBRARY LOCATION COUNTER..OBS.%
        DV$USE = 17; %USE LOCATION COUNTER%



%NOW THE RELOCATION REGISTER ASSIGNMENTS YOU HAVE
ALL BEEN WAITING FOR%

BIND
        DBV$PROCBASE = 1, %PROCEDURE BASE REGISTER%
        DBV$PROGBASE = 2, %PROGRAM BASE REGISTER%
        DBV$FIBASE = 3, %FIELD INCARNATION BASE%
        DBV$DDBASE = 4, %DD BASE%
        DBV$RSBBASE = 5, %R.S.B. BASE REGISTER%
        DBV$RCBBASE = 6, %R.C.B. BASE REGISTER%
        DBV$RBBASE = 7 , %R.B. BASE REGISTER%
        DBV$SCBBASE = 8, %S.C.B. BASE REGISTER%
        DBV$LITBASE = 9, %LITERAL BASE REGISTER%
        DBV$LNEBASE = 10, %L.N.E. BASE%
        DBV$TEMPBASE = 11, %BASE FOR TEMPORARIES%
        DBV$STEMPBASE = 12; %BASE FOR STRING TEMP%


%THE FOLLOWING IS USED TO STORE INFORMATION ABOUT 
THE ACTIVE TEMPORARIES%

STRUCTURE DL$[FIELD,I] = CASE .FIELD OF
        SET
        (.@DL$+3*.I)<18,18> ;    %DL$CGFP..CURRENT GAMMA FILE POINTER%
        (.@DL$+3*.I)<0,18>;      %DL$LOC..DISPLACEMENT%
        (.@DL$+3*.I+1)<18,18>;  %QUICK PICTURE%
        (.@DL$+3*.I+1)<9,9>;    %DL$UCNT..COUNT%
        (.@DL$+3*.I+1)<0,9>;    %DL$DDTYPE..TYPE%
        (.@DL$+3*.I+2)<0,36>;   %DL$MASK..MAGIC MASK%
        TES;


BIND
        DL$CGFP = 0,
        DL$LOC = 1,
        DL$QP = 2,
        DL$UCNT = 3,
        DL$DDTYPE = 4,
        DL$MASK = 5;
BIND DLV$MAX = 256; %MAX UCNT%




%THE FOLLOWING IS USED TO HOLD OPERANDS BEFORE
CODE EMISSION AND SYMBOLIC RESULTS AFTERWARDS%


STRUCTURE DR$[FIELD,I] = CASE .FIELD OF
        SET 
        (.@DR$+2*.I)<30,6>;     %DR$BASE..BASE REGISTER%
        (.@DR$+2*.I)<21,9>;     %DR$DDTYPE..TYPE%
        (.@DR$+2*.I)<0,18>;     %DR$OFFSET..REL OFFSET FROM BASE%
        (.@DR$+2*.I+1)<18,18>;  %DR$QP..QUICK PICTURE%
        (.@DR$+2*.I+1)<0,18>;   %DR$STP1..OPERAND STP1%
        TES;

BIND
        DR$BASE = 0,
        DR$DDTYPE = 1,
        DR$OFFSET = 2,
        DR$QP = 3,
        DR$STP1 = 4;
STRUCTURE DF$I[FIELD,I] = CASE .FIELD OF
        SET
        (.DF$I)<.I,1>;  %GENERAL CASE%
        (.DF$I)<.I,1>;  %AC FLAGS%
        0;
        (.DF$I)<.I+2,1>;        %OPERAND FLAGS%
        0;
        (.DF$I)<.I+4,1>;        %TRIPLE PRECISION FLAGS%
        0;
        (.DF$I)<.I+6,1>;        %SHORT LITERAL FLAGS%
        0;
        (.DF$I)<.I+8,1>;        %SINGLE PRECISION FLAGS%

        0;
        (.DF$I)<.I+10,1>;       %DOUBLE PRECISION FLAGS%
        0;
        TES;


BIND
        DFV$AC = 1,
        DFV$OPND = 3,
        DFV$TRIPLE = 5,
        DFV$SLIT = 7,
        DFV$SINGLE = 9,
        DFV$DOUBLE = 11;

BIND
        DFV$AC1 = 1,
        DFV$AC2 = 2,
        DFV$OPND1 = 3,
        DFV$OPND2 = 4,
        DFV$TRP1 = 5,
        DFV$TRP2 = 6,
        DFV$SLIT1 = 7,
        DFV$SLIT2 = 8,
        DFV$SING1 = 9,
        DFV$SING2 = 10,
        DFV$DBL1 = 11,
        DFV$DBL2 = 12;



%THE FOLLOWING BINDS ARE USED TO REFERENCE THE DTBLP$
ENTRIES FOR CODE GENERATION..SEE EXTERNALS BELOW%
BIND
        DTPV$BRCHF = 0, %BRANCH ON FALSE%
        DTPV$BRCHT = 1, %BRANCH ON TRUE %
        DTPV$BRNCH = 2, %BRANCH%
        DTPV$CALL1 = 3, %ONE PARAMETER CALL%
        DTPV$POPJ = 4,  %QUICK RETURN VIA AC0%
        DTPV$SEXTT = 5, %SEXIT WITH TRUE%
        DTPV$SEXTF = 6, %SEXIT WITH FALSE%
        DTPV$PENTR = 7, %PROCEDURE ENTRY%
        DTPV$PEXIT = 8, %PROCEDURE EXIT%
        DTPV$MIN1 = 9,  %UNARY MINUS, SINGLE PRECISION%
        DTPV$GTR1 = 10,  %SINGLE PRECISION ">"%
        DTPV$GEQ1 = 11, %SINGLE PRECISION ">="%
        DTPV$EQU1 = 12, %SINGLE PRECISION "="%
        DTPV$NEQ1 = 13, %SINGLE PRECISION "#"%
        DTPV$LSTO = 14, %STORE LOGICAL ACCUMULATOR%
        DTPV$AND = 15,  %LOGICAL AND%
        DTPV$OR = 16,  %LOGICAL OR%
        DTPV$MPSSS = 17,  %SINGLE * SINGLE -> SINGLE%
        DTPV$LOD1 = 18, %SINGLE -> ACC.     NO ROUNDING OR TRUNCATION%
        DTPV$SAVE1 = 19,  %AC17 -> TEMP(USUALLY)%
        DTPV$STO1 = 20,  %SINGLE -> SINGLE, NO ROUNDING%
        DTPV$SAVE2 = 21, %AC16,AC17->TEMP(DOUBLE STORE)%
        DTPV$SAVE3 = 22, %AC15,16,17->TEMP(TRIPLE STORE)%
        DTPV$LET1 = 23, %"LET" OPR2  = OPR1 (SINGLE PRECISION)%
        DTPV$INIT = 24, %INITIALIZE %
        DTPV$NULL = 25, %INITIALIZE NULL VALUE%
        DTPV$JRSTI = 26, %JUMP INDIRECT..USED IN INITIALIZATION%
        DTPV$RBINT = 27, %REPORT BLOCK INITIALIZATION%
        DTPV$RCALL = 28, %CALL A RUN TIME ROUTINE%
        DTPV$SREOF = 29, %TEST FOR SOURC END OF FILE%
        DTPV$SRBAD = 30, %TEST FOR BAD BIT ON SOURCE%
        DTPV$SCOND = 31, %CONVERT $VCOMP COND CODE TO T/F%
        DTPV$CVD = 32, %CONVERT SINGLE TO DOUBLE%
        DTPV$DOFLO = 33, %SQUASH DOUBLE PRECISION OVERFLOW%
        DTPV$DMADJ = 34, %ADJUST DOUBLE FOR SINGLE%
        DTPV$ADDSD = 35, %ADD SINGLE TO DOUBLE (SORT OF)%

        DTPV$SADD = 36, %SINGLE PRECISION ADD%
        DTPV$DADD = 37, %DOUBLE PRECISION ADD%
        DTPV$SUBB = 38,  %SINGLE PRECISION SUBTRACT%
        DTPV$MIN2 = 39, %DOUBLE PRECISION UNARY MINUS%
        DTPV$DSUB1 = 40, %DSUB'S FIRST HELPER%
        DTPV$DSUB2 = 41, %DSUB'S SECOND HELPER%
        DTPV$DSUB = 42,  %DOUBLE PRECISION SUBTRACT%
        DTPV$SDIV = 43, %SINGLE PRECISION DIVIDE%
        DTPV$MPSSD = 44, %MULTIPLY SINGLE BY SINGLE GIVING DOUBLE%
        DTPV$PASSP = 45, %PASS PARAMETER TO TEMPORARY%
        DTPV$CVDS = 46, %CONVERT DOUBLE TO SINGLE%
        DTPV$MOVE = 47, %MOVE SINGLE OR DOUBLE TO SINGLE OR DOUBLE%
        DTPV$GEQ2 = 48, %D.P. >=%
        DTPV$GTR2 = 49, %D.P. >%
        DTPV$LEQ2 = 50 , %D.P. <=%
        DTPV$LSS2 = 51, %D.P. <%
        DTPV$EQU2 = 52, %D.P. =%
        DTPV$NEQ2 = 53, %D.P. #%
        DTPV$RCHK = 54, %RANGE CHECK%
        DTPV$NOT = 55, %PERFORM ON EACH >>NOT<<%
        DTPV$REOF = 56, %RELATION END OF FILE%
        DTPV$SEOF = 57, %SOURCE END OF FILE%
        DTPV$SPARA = 58, %PASS STRING PARAMETER%
        DTPV$RESET = 59, %RESET CHANGED FLAGS%
        DTPV$GETRI = 60, %GET REEPORT ITEM%
        DTPV$SAVE4 = 61, %SAVE REGISTER 4%
        DTPV$SAVE5 = 62, %SAVE REGISTER 5%
        DTPV$GETDD = 63, %GET DATA DESCRIPTOR%
        DTPV$PUTRI = 64, %PUT REPORT ITEM%
        DTPV$RLLIM = 65, %STORE NEW LINE MAX%
        DTPV$SLLIM = 66, %STORE NEW LINE MAX INTO SCB%
        DTPV$RETRY = 67, %RETRY TEMPLATE IN $TERR%
        DTPV$SCOMP = 68, %ONE WORD COMPARE FOR STRINGS%
        DTPV$BYTCP = 69, %COMPARE A BYTE WITH A BYTE POINTER(REALLY!)%
        DTPV$TCHNG = 70, %TEST CHANGED FLAG%
%SEVENTY..70..COUNT THEM..LXX..CODE TEMPLATES%
        DTPV$INHIB = 71, %SET/CLEAR PG HDR/FTR FLAG IN RB%
        DTPV$MTRUE = 72, %MAKE R3 TRUE%
        DTPV$MFALS = 73, %MAKE R3 FALSE%
        DTPV$DRCHK = 74, %POSITIVE RANGE CHECK%
        DTPV$BFILL = 75; %BLANK FILL%




%SORRY ABOUT BREAKING THE NAMING CONVENTION, BUT I NEED
TEN CHARACTERS FOR UNIQUENES..OBVIOUSLY WHOEVER MAINTAINS
DPCODE SHOULD BE TALKING TO WHOEVER MAINTAINS DDEFS
SINCE THE TWO MUST REMAIN SYNCHRONIZED../JS..4/27/74%






%THE FOLLOWING BINDS ARE FOR DEBUGGING PURPOSES
AND REPRESENT WHETHER OR NOT WE WISH CODE EMITTED
FOR CERTAIN CONSTRUCTS...
%

BIND
        DEBUG$LNE = 0;

%SOME INTERESTING CONSTANTS.........%
BIND
        DMEDNUMV$ = 100000,  %MEDIUM SIIZE NUMBER%
        DBIGNUMV$ = 10000000000; %BIG NUMBER..CUT-OFF FOR 1WD%

%STRUCTURES AND BINDS FOR THE FANTASTIC CODE GENERATOR..%
STRUCTURE DHW$I[I] = CASE (.I MOD 2) OF
        SET
        (.DHW$I+(.I/2))<18,18>;    %LEFT HALF WORD%
        (.DHW$I+(.I/2))<0,18>;     %RIGHT HALF WORD%
        TES;

%DHW$I IS USED TO LINEARIZE THE HALF WORD ARRAY
ITEMS IN DTBL$%

STRUCTURE DPCP$I[FIELD] = CASE .FIELD OF
        SET
        (.DPCP$I)<9,9>; %OPCODE%
        (.DPCP$I)<5,4>; %FLAGS OR AC/I/XR SPEC%
        (.DPCP$I)<0,5>; %REG SPECIFIER%
        (.DPCP$I)<0,9>; %DISPLACEMENT FIELD FOR *ENT,ETC%
        TES;

%DPCP$I IS USED TO BREAK UP PCP 18 BIT INSTRUCTIONS%

BIND
        DPCPV$I = 0,    %OPCODE%
        DPCPV$A = 1,    %AC OR FLAG%
        DPCPV$R = 2,    %REGISTER OR OFFSET%
        DPCPV$D = 3;    %DISPLACEMENT..PSEUDO CODE ONLY%


%DAC$ HOLD ASSIGNMENTS FOR AC/I/XR FIELD OF INSTRUCTION
        WHERE LEFTMOST FOUR BITS OF DAC$[.I] SPECIFIES AC,
        NEXT BIT SPECIFIES INDIRECT, AND
        AND RIGHTMOST FOUR BITS SPECIFY INDEX
%
%AND NOW .. HELPFUL MACROS%

MACRO $DIVER(Z) = $UOUTM($USPTR(Z),0)&;
MACRO $DIVOT(Z) = $UAPSZ($USPTR(Z))&; %LIKE DIVER, BUT USES $UAPSZ%
MACRO $DECANT(Z) = ((.Z+4)/5)&; %CONVERT BYTE CT TO WORD CT%
MACRO $DMKQP(Z) = (.Z[S$NID]^9)+.Z[S$NDP]&; %FOR BUILDING QP'S OUT OF STP%


%STORAGE ALLOCATION%

MACRO DXCDP$ = DPOOL$[0]&; %CURRENT DELTA FILE POINTER%
MACRO DXCLNE$ = DPOOL$[1]&; %VALUE OF LNE NUMBER FOR CURRENT LNE%
MACRO DXCLC$ = DPOOL$[2]&; %CURRENT LOCATION COUNTER%
MACRO DXPDBSZ$ = DPOOL$[3]&; %SIZE OF PDB NOT COUNTING RUN TIME RTNS%
MACRO DXRACKCT$ = DPOOL$[4]&; %COUNT OF RUN TIME ROUTINES CALLED FOR%
MACRO DXLASTRB$ = DPOOL$[5] &; %ADDRESS OF MOST RECENTLY
                PROCESSED RB W.R.T. DBV$RBBASE%
MACRO DXLASTRSB$ = DPOOL$[6]&; %ADDRESS OF MOST RECENTLY
                PROCESSED RSB W.R.T. DBV$RSBBASE%
MACRO DXLASTSCB$ = DPOOL$[7] &; %MOST RECENTLY PROCESSED SCB%
MACRO DXDFRCT$ = DPOOL$[8]&; %CURRENT UPPER BOUND OF DEFER$ %
MACRO DXLSTCT$ = DPOOL$[9]&; %CURRENT UPPER BOUND OF DLIST$ %
MACRO DXLOGAC$ = DPOOL$[10]&; %G$ID OF BUSY LOGICAL AC,=0=>NOT BUSY%
MACRO DXLOGCT$ = DPOOL$[11]&; %G$UCNT FOR BUSY LOGICAL AC%
MACRO DXMAPMAX$ = DPOOL$[12]&; %CURRENT SIZE OF DXMAP$()%
MACRO DXMAP$(Z) = DPOOL$[13+Z]&; %BIT MAP FOR TEMPORARIES%
MACRO DXTMPHWM$ = DPOOL$[17]&; %TEMP HIGH WATER MARK%
MACRO DXACID$ = DPOOL$[18]&; %CGFP FOR ARITH ACC(R17)%
MACRO DXACUCNT$ = DPOOL$[19]&; %USE COUNT FOR BUSY ARITH ACC.%
MACRO DXACQP$ = DPOOL$[20]&; %QP FOR ARITH ACC%
MACRO DXACSIZE$ = DPOOL$[21]&; %SIZE OF ARITH ACC...DDV$1WD,ETC%
MACRO DXBACK$ = DPOOL$[22]&; %USED IN JRST,I TO INITIALIZATION CODE%
MACRO DXWHERE$ = DPOOL$[23]&; %LIKEWISE..POINTS TO RETURN%
MACRO DXCOMMA$ = DPOOL$[24]&; %DEFAULT VALUE OF SPARATOR CHAR%
MACRO DXCRETURN$ = DPOOL$[25]&; %DEFAULT VALUE OF TERMINATOR%
MACRO DXSCBSIZE$ = DPOOL$[26]&; %STANDARD SIZE OF SCB%
MACRO DXLEOF$ = DPOOL$[27]&; %STP TO END OF FILE LABEL%
MACRO DXSOURCE$ = DPOOL$[28]&; %STP FOR SOURCE BLOCK%
MACRO DXSINK$ = DPOOL$[29]&; %STP FOR REPORT BLOCK%
MACRO DXRBSIZE$ = DPOOL$[30]&; %REPORT BLOCK SIZE%
MACRO DXSTMPSIZE$ = DPOOL$[31]&; %SIZE OF TEMPORARY STRING%
MACRO DXSUSE$ = DPOOL$[32]&; %NUMBER OF STEMPS IN USE AT ONE TIME%
MACRO DXSBASE$ = DPOOL$[33]&; %STARTING ADDRESS OOF NEXT STEMP%
MACRO DXPDBWD$ = DPOOL$[34]&; %FIRST WORD OF PDB..HAS RB$NEXT%
MACRO DXEXIT$ = DPOOL$[35]&; %ADRESS OF INDIRECT FOR EXIT PURPOSES%
MACRO DXEX$ = DPOOL$[36]&; %FLAG INDICATING EXISTOING DXEXIT$%
MACRO DXSAFE$ = DPOOL$[37]&; %USED IN THE JUMP AROUND FOR SRT'S%
MACRO DXPARAM$ = DPOOL$[38]&; %HOLDS ID OF PARAMETER%
MACRO DXFOUR$ = DPOOL$[39] &; %STATUS OF REGISTER 4%
MACRO DXCRSTP$ = DPOOL$[40]&; %STP TO LIT FOR @TOP%
MACRO DXSINLOC$ = DPOOL$[41]&; %ADDRESS OF $TSEQI%
MACRO DXFP2ZN$ = DPOOL$[42]&; %HARD WIRED '2ZN' FP%
MACRO DXFP4ZN$ = DPOOL$[43]&; %HARD WIRED '4ZN' FP%


%EXTERNALS%

%THE FIRST THREE ITEMS ARE IN THE LIBRARY COURTESY OF DASM
AND THE COMPILATION OF DASM'S OUTPUT, DTBDEF.BLI AND ,OF COURSE,
THE GOOD HEARTEDNESS OF DMQ%

EXTERNAL $D$$;  %DUMMY PROCEDURE THAT MAKES DTB STUFF OPAQUE%
EXTERNAL DTBL$; %THE CODE TEMPLATE TABLE%
EXTERNAL DTBLP$;        %THE TABLE OF POINTERS INTO DTBL$%
EXTERNAL DAC$;          %THE AC ASSIGNMENTS%
EXTERNAL DPOOL$;        %POOLED GLOBAL VARIABLES%
EXTERNAL DBASE$;        %COLLECTION OF BASE REGISTER%
EXTERNAL DLIST$ ;       %DIRECTORY OF TEMPORARIES%
EXTERNAL DGAM$;         %GAMMA FILE BUFFER%
EXTERNAL DREGS$;        %SYMBOLIC REGISTERS%
EXTERNAL DFLAG$;        %FLAG REGISTER FOR PSEUDO CODE PROCESSOR%
EXTERNAL DEFER$;        %DEFERRED ACTION ARRAY OF STP'S%
EXTERNAL DRACK$;        %ARRAY OF ID'S OF REQUIRED RUN TIME ROUTINES%
EXTERNAL $DR$$; %DUMMY%
EXTERNAL RTBL$;         %TABLE OF RUN TIME ROUTINE NAMES%


%EXTERNAL ROUTINES%

%THE FOLLOWING IS IN DEXEC.BLI%
EXTERNAL $DEXEC; %THE DICTATOR%

%THE FOLLOWING ARE IN DEMIT.BLI%

EXTERNAL $DEMIT; %EMIT STANDARD DELTA CODE ITEM%
EXTERNAL $DEM1W; %EMIT A SHORT DELTA CODE ITEM%
EXTERNAL $DEMVW; %EMIT A VARIABLE LENGTH DELTA CODE ITEM%

%THE FOLLOWING ARE FOUND IN DASH.BLI%
EXTERNAL $DELNE; %EMIT A LINE NUMBER ENTRY TO DELTA CODE%
EXTERNAL $DPLBL; %PROCESS AND ALLOCATE ONE EACH LABEL%
EXTERNAL $DGLBL; %GET ONE EACH LABEL TO REGISTER I%
EXTERNAL $DGOTO; %PROCESSES ALL BRANCHES, COND AND UNCOND%
EXTERNAL $DCALL; %PROCESSES SINGLE PARAMETER CALLS WHOSE ONLY
                ARGUMENT IS AN ADDRESS%


%THE FOLLOWING IS IN DTDMP.BLI%
EXTERNAL $DTDMP; %DUMP ONE EACH DELTA ITEM%

%THE FOLLOWING ARE FOUND IN DGET.BLI%
EXTERNAL $DGLIE; %GET A SPECIFIED LITERAL INCARNATION ENTRY
                        TO A SYMBOLIC REGISTER%
EXTERNAL $DGFIE; %GET A SPECIFIED FIELD INCARNATION
                        ENTRY TO A SYMBOLIC REGISTER%
EXTERNAL $DNAME; %RETURN LIE STP GIVEN A NAME ENTRY%
EXTERNAL $DALIT; %ALLOCATE ONE EACH LITERAL%
EXTERNAL $DGOPD; %FETCH THE I-TH OPERAND TO THE J-TH SYMBOLLIC REGISTER%

%THE FOLLOWING IS IN DPCP.BLI%

EXTERNAL $DPCP; %THE CODE GENERATOR%

%THE FOLLOWING ARE TO BE FOUND IN DIME.BLI%
EXTERNAL $DEXIT;  %PROCESS 1 EACH GV$SEXIT%
EXTERNAL $DEPDB; %EMIT A RETURN AND A PROCEDURE DEFINITION BLOCK%
EXTERNAL $DPNTR ; %EMIT A NOTE THAT A GV$PROC HAS BEEN SEEN
                AND THE .ENT.5 CODE TO ALLOW PROCEDURE ENTRY%

%THE FOLLOWING IS IN DOIT.BLI%

EXTERNAL $DMIN; %UNARY MINUS%
EXTERNAL $DTEST; %TEST ROUTINE..WATCH THIS SPACE%
EXTERNAL $DCON; %PROCESSES RELATIONALS (LOGICAL "CON"NECTIVES)%
EXTERNAL $DBOOL; %PROCESSES "AND" AND "OR"%
EXTERNAL $DFRCL; %FORCE LOGICAL ACCUMULATOR%
EXTERNAL $DGLOGOPD; %GET LOGICAL OPERAND%

%THE FOLLOWING CAN BE FOUND IN DTMP.BLI%
EXTERNAL $DMTMP; %MAKE A TEMPORARY OF GIVEN SIZE%
EXTERNAL $DGTMP; %GET A TEMPORARY TO A SPECIFIED SYMBOLLIC REGISTER%
EXTERNAL $DRTMP; %ALLOCATE AND SET SYMBOLLIC REGISTER FOR TEMP%
EXTERNAL $DSETF; %SET FLAGS BASEDD ON CONTENTS OF REG N%

%THE FOLLOWING CAN BE FOUND IN DART.BLI%
EXTERNAL $DSRTIN; %SUBROUTINE ENTRY%
EXTERNAL $DALIGN; %ALIGN ONE EACH OPERAND%

%THE FOLLOWING CAN BE FOUND IN DUST.BLI%
EXTERNAL $DGSYL; %GET A SYSTEM LITERAL%
EXTERNAL $DGSAD; %GET AN ADCON%
EXTERNAL $DFRCA; %FORCE ARITHMETIC ACC%
EXTERNAL $DEXCH; %EXCHANGE TWO SYMBOLIC REGISTERS%
EXTERNAL $DMKL2; % ENTER A DOUBLE PRECISION LITERAL IN THE EYMBOL TABLE%
EXTERNAL $DMKL1; %ENTER SINGLE PRECISION LITERAL IN THE SYMBOL TABLE%
EXTERNAL $DMKST; %ENTER ONE WORD STRING LITERAL IN THE SYMBOL TABLE%

%THE FOLLOWING CAN BE FOUND IN DOOR.BLI%
EXTERNAL $DLET1; %PROCESSES SP -> SP ,ROUNDED UNCATED%
EXTERNAL $DLET; %MASTER LET DISPATCHER%
EXTERNAL $DLETS; %PROCESS STRING-TO-STRING MOVE%
EXTERNAL $DRCNT; %PROCESS A CALL TO $RCNT..COUNT THOSE INSTANCES!!%


%THE FOLLOWING CAN BE FOUND IN DOVE.BLI%
EXTERNAL $DEOF; %PROCESS GV$BREOF OR GV$BRNEOF%
EXTERNAL $DSETK; %GENERATE A CALL TO $RSETK%
EXTERNAL $DFTCH; %SPIN OFF SOME FETCHES("$RFTCH")%
EXTERNAL $DUSTF; %SPIN OFF SOME STUFF USING'S.NORMAL STUFF IS IN $DFTCH%
EXTERNAL $DRSET; %RESET CHANGED FLAGS%
EXTERNAL $DTFLG; %TEST SPECIFIED FLAG%
EXTERNAL $DERR; %PROCESS GV$ERROR%

%THE FOLLOWING CAN BE FOUND IN DOME.BLI
("SILVER DOME IS MY HOME.." CMS/1968)%
EXTERNAL $DTRIM; %TRIM FUNCTION%
EXTERNAL $DGOOSE; %GOOSE LOGICAL ACC%
EXTERNAL $DNOW;  %GET CURRENT DATE OR TIME%

%THE FOLLOWING CAN BE FOUND IN DEAF.BLI%
EXTERNAL $DEFER;  %DEFER PROCESSING..DD'S,SCALAR INIT, RCB'S,ETC%
EXTERNAL $DMKDD;  %MAKE ONE EACH DD%
EXTERNAL $DINIT;  %GENERATE INITIALIZATION CODE FOR SCALARS%
EXTERNAL $DMKRB; %GENERATE ONE EACH RB%
EXTERNAL $DINSC; %PROCESS ONE EACH GV$INIT%

%THE FOLLOWING CAN BE FOUND IN DUCK.BLI%
EXTERNAL $DPRTR; %PROCESS A REQUEST FOR AA RUN TIME ROUTINE%
EXTERNAL $DMSTP; %MAKE A STRING TEMP AND SET IT IN REG I%
EXTERNAL $DPROP; %PROCESS TAB, TABTO, SKIP, AND SKIPTO%

%THE FOLLOWING CAN BE FOUND IN DAZE.BLI%
EXTERNAL $DGRUB; %GET A FI OR LIT TO REGISTER I%
EXTERNAL $DRNCL; %CALL A RUN TIME ROUTINE%
EXTERNAL $DARB;  %ALLOCATE ONE EACH REPORT BLOCK%
EXTERNAL $DCRET; %EMIT A CARRIAGE RETURN%
EXTERNAL $DABRT; %ABORT ONE EACH PROCEDURE%

%THE FOLLOWING CAN BE FOUND IN DOSE.BLI%
EXTERNAL $DGSCB; %GET ONE EACH SOURCE CONTROL BLOCK TO REGISTER I%


%THE FOLLOWING CAN BE FOUND IN DOPE.BLI%
EXTERNAL $DOPEN; %OPEN ONE EACH SCB, RB, OR RCB%
EXTERNAL $DGRCB; %GET ONE EACH RCB(RELATION INCARNATION)%
EXTERNAL $DARSB; %ALLOCATE ONE EACH RSB%

%THE FOLLOWING CAN BE FOUND IN DINE.BLI%
EXTERNAL $DSIN; %START SEQUENTIAL INPUT%
EXTERNAL $DINPT; %INPUT ONE ITEM%
EXTERNAL $DESIN; %END SEQUENTIAL INPUT%

%THE FOLLOWING CAN BE FOUND IN DIRE.BLI%
EXTERNAL $DGRB; %GET ONE EACH REPORT BLOCK%
EXTERNAL $DSOUT; %START SEQUENTIAL OUTPUT%
EXTERNAL $DPRNT; %PRINT ONE EACH ITEM%
EXTERNAL $DTNS; %CONVERT NUMERIC TO STRING%
EXTERNAL $DTERR; %PROCESS GV$INPERR%
EXTERNAL $DCONV; %PROCESS A GV$CONVERT%

%THE FOLLOWING ARE LOCATED IN DEFY.BLI%
EXTERNAL $DADD; %ADD ROUTINE%
EXTERNAL $DSUB; %SUBTRACT ROUTINE%
EXTERNAL $DMUL; %MULTIPLY ROUTINE%
EXTERNAL $DDIV; %DIVIDE ROUTINE%

%THE FOLLOWING CAN BE FOUND IN DOTE.BLI%
EXTERNAL $DGETR; %GET A REPORT BLOCK TO A SYMBOLIC REGISTER%
EXTERNAL $DGRIT; %GET A REPORT ITEM TO A REGISTER%

%THE FOLLOWING CAN BE FOUND IN DATE.BLI%
EXTERNAL $DCVDS; %GENERATE CONVERT DATE TO STRING%
EXTERNAL $DCVSD; %GENERATE CONVERT STRING TO DATE%
EXTERNAL $DDST; %DATE-STRING TEST%

%IHAVE NO IDEA WHERE THE SOURCE OF THE FOLLOWING IS..%
EXTERNAL $DRELD; %ASSEMBLY LISTING ROUTINE%


%THE FOLLOWING MACRO IS USED TO FORCE A "USE" ONLY WHEN NECESSARY%
MACRO $DEUCE(Z) = IF .DXCLC$ NEQ Z THEN
                        BEGIN
                        $DEM1W(DV$USE,Z,0,0);
                        DXCLC$_Z;
                        END &;
MACRO $DINCB(Z) = (DBASE$[Z]_.DBASE$[Z]+1)&; %INCREMENT APPROPRIATE
                        BASE %
MACRO $DSETAC(N,Z) = (DREGS$[DR$BASE,N]_0;
                DREGS$[DR$OFFSET,N]_Z;
                DREGS$[DR$STP1,N]_0;
                DREGS$[DR$DDTYPE,N]_DDV$AC;)&;

               %THE ABOVE FORCES SYMBOLIC REG
                NUMBER N TO HOLD AC Z%
MACRO $DSETLIT(N,Z) = (DREGS$[DR$BASE,N]_0;
                DREGS$[DR$OFFSET,N]_Z;
                DREGS$[DR$STP1,N]_0;
                DREGS$[DR$DDTYPE,N]_DDV$SLIT;)&;
        %THE ABOVE FORCES REGISTER N TO HOLD THE SHORT LITERAL
         WHOSE VALUE IS Z%
MACRO $DSIZE(M,N) = (REGISTER Q; Q_M+N;
                IF .Q LEQ 10 THEN DDV$1WD 
                ELSE IF .Q LEQ 20 THEN DDV$2WD
                ELSE DDV$3WD)&;   %CONVERTS INT,DEC TO SIZE%
MACRO $DSIZEQP(Z) = $DSIZE( (Z / 512), (Z MOD 512))&; %QP TO DDV VALUE%
MACRO $DMARKAC = (DXACID$  _ .DGAM$[G$ID];
                DXACUCNT$ _ .DGAM$[G$UCNT];
                DXACQP$ _ .DGAM$[G$ICNT] ^ 9 + .DGAM$[G$DCNT];
                DXACSIZE$ _ $DSIZE(.DGAM$[G$ICNT],.DGAM$[G$DCNT]);)&;
                %THE ABOVE MARKS THE ARITH ACC AS BUSY AND WITH WHAT%
MACRO $DCOPY(M,N) = (REGISTER Q; INCR Q FROM 0 TO 4 DO
                        DREGS$[.Q,N]_.DREGS$[.Q,M];)&;

%END OF DDEFS%
SWITCHES LIST;
 @j