MODULE DGET(DOLLAR,ENTRIES=($DGLIE,$DNAME,$DALIT,$DGFIE,$DGOPD,$DAFIE),FSAVE,
                TIMING,TIMER=EXTERNAL(SIX12))=
BEGIN
REQUIRE RDEFS.BLI[7,107355];
REQUIRE DDEFS.BLI[7,107355];
REQUIRE DTDEFS.BLI[7,107355];
REQUIRE DVDEFS.BLI[7,107355];
REQUIRE FPDEFS.BLI[7,107355];
REQUIRE SDEFS.BLI[7,107355];
REQUIRE UDEFS.BLI[7,107355];
REQUIRE GDEFS.BLI[7,107355];

MAP G$ DGAM$;
MAP U$DYNARY DBASE$;
MAP DF$I DFLAG$;
MAP DR$ DREGS$;
MAP U$DYNARY DPOOL$;
MAP U$DYNARY DEFER$;

UNDECLARE $DALIT;

GLOBAL ROUTINE $DALIT(P1) =
   BEGIN
   LOCAL P2,T;
   MAP S$ P1; %P1 WILL BE THE SYMBOL TABLE BUFFER%
   MAP DDW$I P2; %P2 WILL HOLD THE FIRST WORD OF THE DATA DESCRIPTOR%
   MAP FP$I T; %T WILL HOLD THE FORMAT PICTURE%
   LOCAL STP,W;
   LOCAL DATETEMP[2];
   LOCAL DT$ DTMP;   %STOLEN FROM GIGO%


        %ALLOCATE THE LITERAL AND ITS DATA DESCRIPTOR
        THIS WILL BE PAINFUL, HOWEVER,..%
        STP_.P1[S$STP1];
        $DEUCE(DBV$LITBASE); %FORCE BASE TO LITERAL%
        $DEMIT(DV$DRELR,0,DBV$DDBASE,.STP,.DBASE$[DBV$DDBASE]);
        %SET WORD TO POINT TO DD%
        $DINCB(DBV$LITBASE);

        %MAKE CHANGES IN SYMBOL TABLE ENTRY%
        P1[S$DBT]_SV$LC;
        P1[S$DB]_DBV$LITBASE;
        P1[S$DFO]_.DBASE$[DBV$LITBASE];
        P1[S$DAL]_1;
        
        P2_T_0;

   IF (.P1[S$DDTYPE] EQL SV$SLIT) THEN
        BEGIN
        %A STRING%
        $DEMVW(DV$LITS,0,0,.STP,(P1[S$NAME])[1],.P1[S$NCHAR]);
        DBASE$[DBV$LITBASE]_.DBASE$[DBV$LITBASE]+$DECANT(P1[S$NCHAR]);
        P2[DD$CLASS]_DDV$CLASS4;
        P2[DD$TYPE]_DDV$STR;
        P2[DD$QP]_.P1[S$NCHAR];
        T[FP$C]_.P1[S$NCHAR];
        T[FP$TYPE]_FPV$STR;
        END
   ELSE IF (.P1[S$DDTYPE] EQL SV$SINGD) THEN
           BEGIN
            %SET UP SINGLE PRECISION LITERAL%
           $DEMIT(DV$LIT1,0,0,.STP,.(P1[S$NAME])[1]);
           $DINCB(DBV$LITBASE);
           P2[DD$CLASS]_DDV$CLASS3;
           P2[DD$TYPE]_DDV$1WD;
           P2[DD$QP]_$DMKQP(P1);
        IF .P1[S$NID] GTR 0 THEN
           BEGIN
           T[FP$XI]_1;
           T[FP$FI]_.P1[S$NID]-1;
           T[FP$FS]_FPV$Z;
           END;

           T[FP$DI]_.P1[S$NDP];
           T[FP$TYPE]_FPV$NUM;
           IF .T[FP$DI] GTR 0 THEN T[FP$SP2]_1; %4/1/75%
           END
   ELSE IF (.P1[S$DDTYPE] EQL SV$DBLD) THEN
        BEGIN
        $DEMVW(DV$LIT2,0,0,.STP,(P1[S$NAME])[1],2);
        $DINCB(DBV$LITBASE);
        $DINCB(DBV$LITBASE);
        P2[DD$CLASS]_DDV$CLASS3;
        P2[DD$TYPE]_DDV$2WD;
        P2[DD$QP]_$DMKQP(P1);
        IF .P1[S$NID] GTR 0 THEN
        BEGIN

        T[FP$XI]_1;
        T[FP$FI]_.P1[S$NID]-1;
        T[FP$FS]_FPV$Z;
        END;

        T[FP$DI]_.P1[S$NDP];
        T[FP$TYPE]_FPV$NUM;
        IF .T[FP$DI] GTR 0 THEN T[FP$SP2]_1; %4/1/75%

        END
   ELSE IF (.P1[S$DDTYPE] EQL SV$DLIT) THEN
        BEGIN
        %PROCESS ONE EACH DATE LITERAL%
        $DEMIT(DV$LIT1,0,0,.STP,.(P1[S$NAME])[1]); %OUT IT GOES%
        $DINCB(DBV$LITBASE);
        P2[DD$CLASS]_DDV$CLASS6; %DATE LITERAL%
        P2[DD$TYPE]_DDV$1WD;     %TRAETED AS SINGLE PRECISION%
        P2[DD$QP]_$DMKQP(P1);    %A QUICK PICTURE AS WELL%
        DATETEMP[0]_DATETEMP[1]_0;
        DTMP_DATETEMP;
        DTMP[DT$COUNT]_3;
        DTMP[DT$PRSIZE]_8;
        DTMP[DT$CODE,0]_DTV$4Y;
        DTMP[DT$CODE,1]_DTV$2M;
        DTMP[DT$CODE,2]_DTV$2D;
        %ABOVE COPIED FROM $GFUNC..THANK YOU GIGO...2/8/75%
        END;


   
    $DEM1W(DV$SET,DBV$DDBASE,0,.DBASE$[DBV$DDBASE]);
    $DEUCE(DBV$DDBASE);
    P1[S$DDBT]_SV$LC;
    P1[S$DDB]_DBV$DDBASE;
    P1[S$DDFO]_.DBASE$[DBV$DDBASE];
    P1[S$DDAL]_1;
   $DEMIT(DV$CNST,0,0,.STP,.P2);
   $DINCB(DBV$DDBASE);
   IF (.P1[S$DDTYPE] EQL SV$DLIT) THEN
        BEGIN
        %EMIT A THREE WORD DD FOR A DATE LITERAL%
        $DEMIT(DV$CNST,0,0,.STP,.DATETEMP[0]);
        $DEMIT(DV$CNST,0,0,.STP,.DATETEMP[1]);
        DBASE$[DBV$DDBASE]_.DBASE$[DBV$DDBASE]+2; %INCR APPROPRIATELY%
        END
   ELSE

   BEGIN    %BAD UNINDENTED CODE DUE TO EPIMETHALIC THINKING%
   $DEMIT(DV$CNST,0,0,.STP,.T);
   $DINCB(DBV$DDBASE);
   END;

   $SFGCH(.P1);
   %WOW..ALL THAT TO JUST SET UP A LITERAL%
    END;


UNDECLARE $DGFIE;
UNDECLARE $DGLIE;

GLOBAL ROUTINE $DGLIE(STP,K)=
   BEGIN
   %$DGLIE FETCHES ONE EACH LITERAL INCARNATION TO THE SYMBOLIC
   REGISTER SPECIFIED BY I; STP POINTS TO THE LITERAL INCARNATION
   ENTRY IIN THE SYMBOL TABLE ; THE GENERAL FLOW IS AS FOLLOWS:
        (1) IF THE LITERAL HAS NOT BEEN ALLOCATED,
        GENERATE ITS DELTA CODE FOR ENTRY INTO LITERAL
        SPACE AND THE ASSOCIATED DATA DESCRIPTOR;
        (2) IF THE LITERAL IS A SHORT LITERAL, DO
        NOT GENERATE ANYTHING, BUT SET UP DREGS$[.I]
        APPROPRIATELY, AND SET UP THE FLAGS IN
        DFLAG$  TO REFLECT THE STATE OF THE WORLD;
        (3) FETCH THE LITERAL'S INFORMATION TO THE SYMBOLIC REGISTER
        AND SET THE APPROPRIATE FLAGS;
        (4) RETURN

   
   THIS ROUTINE USES THE SYMBOL TABLE ROUTINES
                $SGSTE
                $SFGCH
                $FRNCH

    FLAGS SET TO '1' ARE SAID TO BE ON; TO '0' , OFF.

    /JS                 4/24/74
   %
   LOCAL P1,P2,T;
   MAP S$ P1;
   LOCAL I;

   I_ABS(.K);  %K CONTROLS SHORT LITERALS%

   DFLAG$[DFV$AC,.I]_0;   %CANNOT BE IN THE AC%
   P1_$SGSTE(.STP);   %GET LIE%

   IF ( .(P1[S$NAME])[1] GEQ 0 ) AND ( .(P1[S$NAME])[1] LSS 2^18)
        AND (.K GEQ 0) AND ((.P1[S$DDTYPE] EQL SV$SINGD) OR
        (.P1[S$DDTYPE] EQL SV$DLIT)) THEN
        BEGIN
        %A SHORT LITERAL%
        DREGS$[DR$BASE,.I]_0;
        DREGS$[DR$OFFSET,.I]_.(P1[S$NAME])[1];
        DREGS$[DR$DDTYPE,.I]_DDV$SLIT;
        DREGS$[DR$STP1,.I]_0;
        DREGS$[DR$QP,.I]_$DMKQP(P1);

        DFLAG$[DFV$SLIT,.I]_1;
        DFLAG$[DFV$OPND,.I]_0;
        DFLAG$[DFV$AC  ,.I]_0;

        $SFRNCH(.P1);
        RETURN
        END;

   IF .P1[S$DBT] NEQ SV$LC THEN $DALIT(.P1); %ALLOCATE IT IF NEED BE%


DFLAG$[DFV$OPND,.I]_1; %REGULAR LITS ARE TREATED AS OPERANDS%
DFLAG$[DFV$SLIT,.I]_0; %NOT A SHORT LITERAL%
IF (.P1[S$DDTYPE] EQL SV$SINGD) OR (.P1[S$DDTYPE] EQL SV$DLIT) THEN
   BEGIN
   DFLAG$[DFV$SINGLE,.I]_1;
   DFLAG$[DFV$DOUBLE,.I]_0;
   DREGS$[DR$DDTYPE,.I]_DDV$1WD;
   DREGS$[DR$QP,.I]_$DMKQP(P1);
   END
ELSE IF .P1[S$DDTYPE] EQL SV$DBLD THEN
   BEGIN
   DFLAG$[DFV$SINGLE,.I]_0;
   DFLAG$[DFV$DOUBLE,.I]_1;
   DREGS$[DR$DDTYPE,.I]_DDV$2WD;
   DREGS$[DR$QP,.I]_$DMKQP(P1);
   END
ELSE IF .P1[S$DDTYPE] EQL SV$SLIT THEN
   BEGIN
   DFLAG$[DFV$SINGLE,.I]_1;
   DFLAG$[DFV$DOUBLE,.I]_1;
   DREGS$[DR$DDTYPE,.I]_DDV$STR;
   DREGS$[DR$QP,.I]_.P1[S$NCHAR];
   END;
   
%IT IS WORTH NOTING THAT A CHARACTER LITERAL HAS THE FOLLOWING..
     SLIT = 0
     SINGLE = 1
     DOUBLE = 1
%

DREGS$[DR$BASE,.I]_.P1[S$DB];
DREGS$[DR$OFFSET,.I]_.P1[S$DFO];
DREGS$[DR$STP1,.I]_.STP;
$SFRNCH(.P1);
END;



%***%
UNDECLARE $DNAME;

GLOBAL ROUTINE $DNAME(STP)=
   BEGIN
   %$DNAME RETURNS THE STP TO THE LITERAL INCARNATION
   OF A NAME ENTRY IN THE SYMBOL TABLE

   THE SINGLE PARAMETER 'STP' SHOULD POINT TO A NAME ENTRY

   THE RESULT IS A SYMBOL TABLE POINTER

   IF NO LITERAL INCARNATION EXISTS FOR THE SPECIFIED
   NAME ENTRY, ONE IS GENERATED, AND THE STP TO THE NEW 
   LITERAL INCARNATION IS RETURNED

   THE CODE FOR THIS IS STRAIGHTFORWARD , BUT THE USE OF
   TWO SYMBOL TABLE BUFFERS SIMULTANEOUSLY IS SOMETHING NEW FOR ME


   /JS......................5/9/74
   %

   LOCAL P,R,T,V;
   MAP S$ P;
   MAP S$ V;

   P_$SGSTE(.STP); %GET NAME ENTRY%
   
    IF (T_.P[S$LITINCP]) NEQ SV$NULL THEN
        BEGIN
        %PREVIOUSLY ALLOCATED...FREE NAME ENTRY AND RETURN POINTER%
        $SFRNCH(.P);
        V_$SGSTE(.T); %GETIT FOR CHECKING%
        IF .V[S$DBT] EQL SV$NULL THEN
           BEGIN
           V[S$DDTYPE]_SV$SLIT;
           V[S$NCHAR]_.P[S$NCHAR];
           $DALIT(.V); %ALLOCATE IT%
           $SFRCH(.V);
           END 
        ELSE $SFRNCH(.V);

        %THE ABOVE NEW CODE IS ADDED (FROM "V_ ..." ONWARDS)
        BECAUSE IT IS NO LONGER TRUE THAT THE MAGNIFICIENT, INCREDIBLE
        CODE GENERATOR IS THE ONLY ONE TO PLAY WITH THE LITINCP
        FIELD IN A NAME ENTRY...CURSES..
        TODAY IS 4/3/75............/JS
        %

        RETURN .T
        END;

   %NOT PREVIOUSLY ALLOCATED SO DO IT NOW
    (IT FEELS SO GOOD ANYWAY)%
   
    R_$DECANT(P[S$NCHAR]);
    % R IS LENGTH OF NAME IN WORDS%
    V_$SGVSTS(SV$LIE,.R+1); %GET SKELETAL LITERAL INCARNATION ENTRY%
    %GET READY TO TRADE NAMES%
    P[S$LITINCP]_.V[S$STPX]; %NAME SEES LIE%
    V[S$STP1]_.STP; %LIE SEES NAME%

    %TRANSFER THE NAME OVER TO LIE%
    INCR T FROM 1 TO .R DO
        (V[S$NAME])[.T]_.(P[S$NAME])[.T];

     V[S$NCHAR]_.P[S$NCHAR]; %#OF CHARACTERS%

     V[S$DDTYPE]_SV$SLIT;  %MAKE IT A STRING(WHAT ELSE)%

    $SFRCH(.P);  %FREE NAME ENTRY..WITH CHANGE%
   
    $DALIT(.V);  %ALLOCATE THE DAMN STRING NOW%

    T_.V[S$STPX]; %SAVE FOR RETURN%
    $SFRCH(.V);  %FREE LIE ENTRY%

    RETURN .T
    END;


UNDECLARE $DAFIE;

GLOBAL ROUTINE $DAFIE(P1)=
   BEGIN
   %ALLOCATE A FIELD INCARNATION , AND, PERHAPS,
   A DATA DESCRIPTOR AS WELL..

   P1 SHOULD POINT TO A FIELD INCARNATION SYMBOL
   TABLE ENTRY...

   THE RESULTING ACTION IS AS FOLLOWS:

        (1) THE CORRESPONDING ITEM ENTRY SYMBOL TABLE ENTRY
        IS FETCHED AND POINTED TO BY "P";

        (2) IF THE DATA DESCRIPTOR(CONTROLLED BY THE ITEM ENTRY)
        HAS NOT YET BEEN ALLOCATED, THEN DO SO AT ONCE; FURTHERMORE,
        IF IT HAS NOT BEEN ALLOCATED AND IS A "SCALAR" USAGE,
        THEN ADD THE STP TO THE ITEM ENTRY TO THE DEFER LIST("DEFER$");

        (3) COPY THE DD INFORMATION FROM THE ITEM ENTRY TO THE FIELD
        INCARNATION ENTRY, AND THEN FREE THE ITEM ENTRY;

        (4) THE ACTUAL ALLOCATION IS MADE AND THE FIELD INCARNATION
        ENTRY IS UPDATED;

        (5) THE RELOCATIBLE ADDRESS OF THE DD IS EMITTED AND THEN
        AN APPROPRIATE NUMBER OF ZERO WORDS ARE ALLOCATED FOR WEAK
        INITIALIZATION.

    /JS......................5/14/74
    %

   MAP S$ P1;
   LOCAL P;
   LOCAL X,Y;
   MAP S$ P;

   P_$SGSTE(.P1[S$IESTP]); %GET ITEM ENTRY%
   IF .P[S$DDBT] EQL SV$NULL THEN
        BEGIN
        %DD NOT ALLOCATED SO DO IT%
        P[S$DDBT]_SV$LC;
        P[S$DDB]_DBV$DDBASE;
        P[S$DDFO]_.DBASE$[DBV$DDBASE];  %WHERE%
        P[S$DDAL]_1;
        DBASE$[DBV$DDBASE]_.DBASE$[DBV$DDBASE]+4;  %ALLOCATE%
        IF (.P1[S$DTYP] EQL SV$DLIT) THEN %SIX WORD DD%
           DBASE$[DBV$DDBASE]_.DBASE$[DBV$DDBASE]+2;
        %ITEM ENTRY TO DEFER$ FOR LATER PROCESSING%
        DEFER$[.DXDFRCT$]_ (.P1[S$STPX] ^ 18) + .P[S$STPX];
        DXDFRCT$_.DXDFRCT$+1;
 %THE NEXT INSTRUCTION IS TO BYPASS A BUG IN THE BLISS COMPILER%
        X_.DXDFRCT$;

        IF .P[S$RSDSTP] EQL SV$NULL THEN
           BEGIN
           %"SCALAR" SO ADD ITEM ENTRY TO DEFER LIST%
           DEFER$[.X]_.P1[S$STPX];     %FIX..FIX..FIX%
           DXDFRCT$_.DXDFRCT$+1;
           %CHECK HERE FOR DEFER OVERFLOW%
           END;
        $SFGCH(.P); %WE HAVE MUTILATED IT BADLY%
        END;

   %NOW COPY OVER TO THE FIELD INCARNATION%
   P1[S$DDBT]_SV$LC;
   P1[S$DDB]_.P[S$DDB];  %NOTICE HOW MODULAR THIS IS%
   P1[S$DDFO]_.P[S$DDFO];
   P1[S$DDAL]_.P[S$DDAL];

   $SFRNCH(.P);  %FREE THE POOR ITEM ENTTRY FROM FURTHER PAIN%

   P1[S$DBT]_SV$LC;   %NOWW THE LOCAL STUFF%
   P1[S$DB]_DBV$FIBASE;
   P1[S$DAL]_1;

   $DEUCE(DBV$FIBASE);   %OUTTPUT INITIAL CODE%
   $DEMIT(DV$DRELR,0,.P1[S$DDB],.P1[S$STP1],.P1[S$DDFO]);
   $DINCB(DBV$FIBASE);
   P1[S$DFO]_.DBASE$[DBV$FIBASE];

   IF (.P1[S$DTYP] EQL SV$SINGD) OR (.P1[S$DTYP] EQL SV$DLIT) THEN
        BEGIN
        %EMIT A WORD OF ZEROES FOR THIS ONE%
        $DEMIT(DV$CNST,0,0,.P1[S$STP1],0);
        DBASE$[DBV$FIBASE]_.DBASE$[DBV$FIBASE]+1;
        END
   ELSE IF .P1[S$DTYP] EQL SV$DBLD THEN
        BEGIN
        %EMIT TWO WORD OF ZERO%
        $DEMIT(DV$CNST,0,0,.P1[S$STP1],0);
        $DEMIT(DV$CNST,0,0,.P1[S$STP1],0);
        DBASE$[DBV$FIBASE]_.DBASE$[DBV$FIBASE]+2;
        END
   ELSE IF .P1[S$DTYP] EQL SV$TRID THEN
        BEGIN
        %EMIT THREE WORDS OF ZERO%
        INCR I FROM 0 TO 2 DO
           $DEMIT(DV$CNST,0,0,.P1[S$STP1],0);
        DBASE$[DBV$FIBASE]_.DBASE$[DBV$FIBASE]+3;
        END

    ELSE IF .P1[S$DTYP] EQL SV$SLIT THEN
        BEGIN
        %EMIT BLANKS%
           INCR I FROM 1 TO (.P1[S$LCHAR]+4)/5 DO
           $DEMIT(DV$CNST,0,0,.P1[S$STP1],'     ');
        DBASE$[DBV$FIBASE]_.DBASE$[DBV$FIBASE]+(.P1[S$LCHAR]+4)/5;
        END;



   $SFGCH(.P1);  %IT TOO HAS BEEN CHANGED%

   END;


GLOBAL ROUTINE $DGFIE(STP,I)=
   BEGIN
   %GET FIELD INACRANATION TO SPECIFIED REGISTER%
   % STP POINTS TO FIELD INCARNATION ENTRY IN SYMBOL TABLE
   I IS INDEX OF REGISTER TO BE SET

   /JS .................... 5/15/74
   %

   LOCAL P1;
   MAP S$  P1;

   P1_$SGSTE(.STP);  %GET FIELD INCARNATION ENTRY%
   IF .P1[S$DBT] NEQ SV$LC THEN $DAFIE(.P1); %ALLOCATE IT IF NECESSARY%


    DFLAG$[DFV$OPND,.I]_1;
    DFLAG$[DFV$SLIT,.I]_0;

   IF (.P1[S$DTYP] EQL SV$SINGD) OR (.P1[S$DTYP] EQL SV$DLIT) THEN
        BEGIN
        DFLAG$[DFV$SINGLE,.I]_1;
        DFLAG$[DFV$DOUBLE,.I]_0;
        DREGS$[DR$DDTYPE,.I]_DDV$1WD;
        DREGS$[DR$QP,.I]_.P1[S$INTD]^9+.P1[S$DECD];
        END
   ELSE IF .P1[S$DTYP] EQL SV$DBLD  THEN
        BEGIN
        DFLAG$[DFV$SINGLE,.I]_0;
        DFLAG$[DFV$DOUBLE,.I]_1;
        DREGS$[DR$DDTYPE,.I]_DDV$2WD;
        DREGS$[DR$QP,.I]_.P1[S$INTD]^9+.P1[S$DECD];
        END
   ELSE
        IF .P1[S$DTYP] EQL SV$SLIT THEN
        BEGIN
        DFLAG$[DFV$SINGLE,.I]_1;
        DFLAG$[DFV$DOUBLE,.I]_1;
        DREGS$[DR$DDTYPE,.I]_DDV$STR;
        DREGS$[DR$QP,.I]_.P1[S$LCHAR];
        END;

   DREGS$[DR$BASE,.I]_.P1[S$DB];
   DREGS$[DR$OFFSET,.I]_.P1[S$DFO];
   DREGS$[DR$STP1,.I]_.P1[S$STP1];

   $SFRNCH(.P1);
   END;

   
UNDECLARE $DGOPD;

GLOBAL ROUTINE $DGOPD(I,J)=
   BEGIN
   %FETCH THE I-TH OPERAND TO THE J-TH SYMBOLIC REGISTER

   CODE SHOULD BE STRAIGHT FORWARD ENOUGH THAT NO FURTHER
   EXPLANATION IS NECESSARY

   /JS..........................5/14/74
   %

   LOCAL P;
   MAP G$OPND P;
   P_.DGAM$+1;
   DFLAG$[DFV$AC,.J]_0;
   DFLAG$[DFV$OPND,.J]_0;
   DFLAG$[DFV$SLIT,.J]_0;
   DFLAG$[DFV$SINGLE,.J]_DFLAG$[DFV$DOUBLE,.J]_DFLAG$[DFV$TRIPLE,.J]_0;

   IF (.DXACUCNT$ NEQ 0) AND (.P[.I,G$OPTYP] EQL GV$NP)
        AND (.P[.I,G$OPVAL] EQL .DXACID$) THEN
        BEGIN
        DREGS$[DR$BASE,.J]_0;
        DREGS$[DR$QP,.J]_.DXACQP$;
        DREGS$[DR$DDTYPE,.J]_DDV$AC;
        DFLAG$[DFV$AC,.J]_1;
        DXACUCNT$_.DXACUCNT$-1;
        DREGS$[DR$STP1,.J]_0;

        SELECT .DXACSIZE$ OF NSET

DDV$1WD:        BEGIN
        %THE OPERAND POINTS TO A RESULT THAT WAS LEFT IN THE AC%
                DREGS$[DR$OFFSET,.J]_#17;
                DFLAG$[DFV$SINGLE,.J]_1;
                END;

DDV$2WD:        BEGIN
                DREGS$[DR$OFFSET,.J]_#16; 
                DFLAG$[DFV$DOUBLE,.J]_1;
                END;

DDV$3WD:        BEGIN
                DREGS$[DR$OFFSET,.J]_#15;
                DFLAG$[DFV$TRIPLE,.J]_1;
                END;


        TESN

        END

   ELSE IF .P[.I,G$OPTYP] EQL GV$NP THEN
        BEGIN
        %A TEMP REFERENCE, OBVIOUSLY%
        $DGTMP(.P[.I,G$OPVAL],.J);
        DFLAG$[DFV$OPND,.J]_1;
        SELECT .DREGS$[DR$DDTYPE,.J] OF NSET

DDV$1WD:        DFLAG$[DFV$SINGLE,.J]_1;

DDV$2WD:        DFLAG$[DFV$DOUBLE,.J]_1;

DDV$3WD:        DFLAG$[DFV$TRIPLE,.J]_1;

        TESN;
        END
   ELSE IF .P[.I,G$OPTYP] EQL GV$PARAM THEN
        BEGIN
        $DGTMP(.DXPARAM$,.J);
        $DSETF(.J);
        END

   ELSE

   IF .P[.I,G$OPTYP] EQL GV$STP THEN
        $DGFIE(.P[.I,G$OPVAL],.J)  %FIELD INCARNATION%
    ELSE IF .P[.I,G$OPTYP] EQL GV$LIT THEN
        $DGLIE(.P[.I,G$OPVAL],.J)   %LITERAL%
    ELSE IF .P[.I,G$OPTYP] EQL GV$RIP THEN
        $DGRIT(.P[.I,G$OPVAL],.P[.I,G$RITYP],.J); %GET REPORT ITEM%


    END;

END ELUDOM
    