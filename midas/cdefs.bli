SWITCHES NOLIST;
UNDECLARE $$$;
%
THIS IS THE MIDAS-1 UNIVERSAL FILE CDEFS.BLI
   FOR SYMBOLS USING THE <LETTER> C.

DEFINITIONS OF STRUCTURES, MACROS, BINDS, ETC
  WHICH ARE USED BY MORE THAN ONE MIDAS MODULE
  ARE DEFINED HERE WITH  NAMES CORRESPONDING 
  TO THE CONVENTIONS OUTLINED IN SECTION
  1.9.4 PART E.

THE MAJORITY OF BLISS MODULES WILL BE COMPILED
  USING ONE OF THESE UNIVERSAL FILES.  THE FIRST EXPRESSION
  IN THE BLOCK HEADING WILL GENERALLY BE A REQUIRE
  STATEMENT:
       REQUIRE (MIDAS)CDEFS.BLI;

THE MACROS IN THIS FILE ARE TERMINATED WITH THE CHARACTER
AMPERSTAND:  &
THE NAMES IN THIS FILE CONTAIN DOLLAR SIGNS:  $
CONSEQUENTLY, THE MODULE HEADER OF ALL MODULES USING THIS
FILE MUST CONTAIN THE "DOLLAR" MODULE-PARAMETER.
%

EXTERNAL
  $CSRCF,       % SET UP SOURCE FILE NAME FOR THE COMPILER %
  $CLNIX,       % INITIALIZE A LINE CONTROL BLOCK %
  $CLINI,       % INITIALIZE A LINE CONTROL BLOCK TO DEFAULT LENGTH %
   $CEBUF,      % UPDATE THE COMMAND ERROR BUFFER CONTENTS      %
   $CHASH,      % COMPUTE HASH VALUE OF A STRING %
   $CISINIT,    % INITIALIZE INTERRUPT SYSTEM %
   $CISINI,
   $CISIN,
   $CISCLR,     % CLEAR AND DISABLE INTERRUPT SYSTEM %
   $CISCL,
   $CISDIS,     % DISABLE INTERRUPT SYSTEM (BUT DO NOT CLEAR IT) %
   $CISDI,
   $CISREN,     % RE-ENABLE INTERRUPT SYSTEM %
   $CISRE,
   $CTARITH,    % SET TRAP FOR ARITH. OVERFLOW TRUE (JSR) %
   $CTARIT,
   $CTARI,
   $CFARITH,    % SET TRAP FOR ARITH. OVERFLOW FALSE (JFCL)  %
   $CFARIT,
   $CFARI,
   $CILLM,      % MACRO CODE RECV. OF ILL.MEM.REF INTERRUPT %
   $CDILL,      % DEFAULT HANDLER OF  ILL.MEM.REF INTERRUPT %
   $CESCP,      % MACRO CODE RECV. OF ESCAPE INTERRUPT %
   $CDESC,      % DEFAULT HANDLER OF ESCAPE INTERRUPT %
   $CARIT,      % MACRO CODE RECV. OF ARITH. OVERFLOW INTERRUPT %
   $CDARI,      % DEFAULT HANDLER OF  ARITH. OVERFLOW INTERRUPT %
   $CSTKO,      % MACRO CODE RECV. OF STACK OVER/UNDER INTERRUPT %
   $CDSTK,      % DEFAULT HANDLER OF  STACK OVER/UNDER INTERRUPT %
   $CRESET,     % DO A SYSTEM RESET %
   $COLAY,      % PERFORM A RUNSEG TO ANOTHER OVERLAY %
   $CORET,      % RETURN  FROM AN OVERLAY             %
   $CPJOB,      % RETURN JOB NUMBER%
   $CGPPN,      % RETURN USERS PPN %
   $CTRU,       % RETURN CURRENT TRUS %
   $CTIME,      % RETURN TIME OF DAY %
   $CDATE,      % RETURN DATE %
   $COWNR,      % RETURN PROGRAM OWNER %
   $CGLOG,      % RETURN LOGIN INFOR. STORED BY (SYS)START %
   $CUNAME,     % RETURN POINTER TO USERS NAME %
   $CFREE,      % FREE A BLOCK OF MEMORY %
   $CFREEM,     % FREE A BLOCK OF MEMORY %
   $CINIT,      % INITIALIZE MEMORY SYSTEM TABLES %
   $CINITM,
   $CSPCO,      % CHECK FREE SPACE LISTS ROUTINE %
   $CSPCOK,
   $CGTAREA,
   $CGTARE,
   $CGTAR,      % INITIALIZE AND/OR POINT TO MEMORY AREA TABLE %
   $CFRAREA,
   $CFRARE,
   $CFRAR,      % DECOMIT A MEMORY AREA TABLE, RELEASING ALL ATTACHED CORE %
   $CGTAM,      % GET CORE FROM A SPECIFIC MEMORY AREA TABLE %
   $CGZAM,      % GET AND ZERO CORE FROM A SPECIFIED MEMORY AREA TABLE %
   $CSHRINK,
   $CSHRIN,
   $CSHRI,      % SHRINK BACK LOW CORE AREA IF POSSIBLE %
   $CSTART,     % OPEN INTERNAL IO FILE %
   $CSTOP,      % CLOSE INTERNAL IO FILE %
   $CINA,       % ALPHA IN OPERATOR %
   $COUTA,      % ALPHA OUT %
   $CINB,       % BETA IN %
   $COUTB,      % BETA OUT %
   $CING,       % GAMMA IN %
   $COUTG,      % GAMMA OUT %
   $CIND,       % DELTA IN %
   $COUTD,      % DELTA OUT %
   $CINE,       % EPSILON IN %
   $COUTE,      % EPSILON OUT %
   $CINF,       % ERROR IN %
   $COUTF,      % ERROR OUT %
   $CTFS,       % TMPCOR FREE SPACE %
   $CTRF,       % TMPCOR READ FILE %
   $CTDLF,      % TMPCOR DELETE FILE %
   $CTRFD,      % TMPCOR READ FILE DELETE %
   $CTWF,       % TMPCOR WRITE FILE %
   $CTRDD,      % TMPCOR DIRECTORY %
   $CTDAF,      % TMPCOR DELETE ALL FILES %
   $CRESTORE,   % PERFORMS THE "RESTORE" COMMAND FOR MAGNUM %
   $CRESTOR,
   $CRESTO,
   $CREST,
   $CBACKUP,    % PERFORMS THE "BACKUP" COMMAND FOR MAGNUM %
   $CBACKU,
   $CBACK,
   $CDLOBJ,     % PERFORMS THE "DELETE <object>" FOR MAGNUM %
   $CDELRE,
   $CDELR,
   $CRELEASE,   % PERFORMS THE "RELEASE" COMMAND FUNCTION FOR MAGNUM " %
   $CRELEAS,
   $CRELEA,
   $CRELE,
   $CSCAN;      % COMMAND SCANNER               %

EXTERNAL        % GLOBAL VARIABLES %
   $CSTK$,      % GLOBAL HOME STACK DECLARED IN MODULE HEADERS %
   CINTD$,      % MEMORY INIT DONE FLAG %
   CRSTD$,      % RESET DONE FLAG %
   CISDT$,      % MONITOR INTERRUPT DISPATCH TABLE %
   CIHDT$,      % INTERRUPT HANDLER DISPATCH TABLE %
   CINTS$,      % ENABLED/DISABLED INTERRUPT SYST. STATE FLAG %
   CESCC$,      % COUNT OF ESCAPES WHILE DISABLED             %
   CTERM$,      % FILE CONTROL BLOCK FOR TERMINAL %
   CEBUF$,      % Pointer to current (command) error message buffer. %
   CONTF$,      % FCB FOR COMMANDS AND TOUT FILES (CONTROL FCB) %
   CCMAT$,      % POINTER TO CURRENTLY ACTIVE MEMORY AREA TABLE %
   CZMAT$,      % INITIAL/PERMENENT MEMORY AREA=ZERO TABLE %
   CAREA$,      % AREA NUMBER VALUE FOR CURRENT MEMORY AREA TABLE %
   CFRPG$,      % HEAD OF FREE PAGE LIST %
   CJBFF$,      % RETENTION VARIABLE FOR JOBFF VALUE AT $CINIT TIME %
   CDDT$,       % RETENTION VARIABLE FOR JOBDDT VALUE AT $CINIT TIME %
   CCSIZ$,      % NO. OF PAGES EXPANDED MEMORY %
   CMEM$,       % ADDRESS OF FIRST FULL PAGE AFTER LOADING %
   COSTK$,      % POINTER TO OVERLAY INFO BLOCK STACK %
   CPARM$,      % POINTER TO OVERLAY PARAMETER STACK %
   CSCHN$,      % HASHED NAME OF SCHEMA %
   CACTI$,      % ARRAY OF ACTIVITY COUNTERS FOR INTERNAL IO%
   CFLCB$,      % ARRAY OF FCB'S FOR INTERNAL IO %
   CPPN$,       % PPN OF USER %
   CTRU$,       % LAST VALUE OF TRUS %
   CTRUI$,      % VARIABLE FOR ELAPSED TRUS %
   CTIME$,      % LAST VALUE OF TIME OF DAY RETURNED BY $CTIME %
   CDATE$,      % DATE RETURNED BY $CDATE %
   COWNR$,      % PPN OF DIRECTORY FROM WHICH THE PROGRAM IS BEING RUN %
   CLOGI$,      % LOGIN INFORMATION STORED BY (SYS)START, IF USED %
   CUNAM$,      % USERS USER-NAME IN ASCII, 3 WORDS %
   CVER$,       % SYSTEM VERSION NUMBER  %
   CPJOB$,
   CJLST$,      % FLAG FOR CONTROLLING LISTING OF OBJECT CODE %
   CMC$,        % CONTAINS SIXBIT OVERLAY NAME FOR COMMAND OVERLAY %
   CP1$,        % CONTAINS SIXBIT OVERLAY NAME FOR PROC. COMPILER #1 %
   CP2$,        % CONTAINS SIXBIT OVERLAY NAME FOR PROC. COMPILER #2 %
   CP3$,        % CONTAINS SIXBIT OVERLAY NAME FOR PROC. COMPILER #3 %
   CP4$,        % CONTAINS SIXBIT OVERLAY NAME FOR PROC. COMPILER #4 %
   CS1$,        % CONTAINS SIXBIT OVERLAY NAME FOR SCHM. COMPILER #1 %
   CS2$,        % CONTAINS SIXBIT OVERLAY NAME FOR SCHM. COMPILER #1 %
   CDB$,        % DATA BASE CONTROL OVERLAY NAME %
   CEN$,        % CONTAINS SIXBIT OVERLAY NAME FOR ENAME ENTER SCHEMA %
   CSR$,        % CONTAINS SIXBIT OVERLAY NAME FOR SORT OVERLAY      %
   CRN$,        % CONTAINS SIXBIT OVERLAY NAME FOR RUNTIME OVERLAY   %
   CSTK0$,      % CO-ROUTINE STACK ADDRESS FOR MIDASI %
   CSTK1$,      % CO-ROUTINE STACK ADDRESS FOR MIDAS  %
   CSTK2$,      % CO-ROUTINE STACK ADDRESS FOR P1COMP %
   CSTK3$,      % CO-ROUTINE STACK ADDRESS FOR P2COMP %
   CSTK4$,      % CO-ROUTINE STACK ADDRESS FOR P3COMP %
   CSTK5$,      % CO-ROUTINE STACK ADDRESS FOR S1COMP %
   CSTK6$,      % CO-ROUTINE STACK ADDRESS FOR RUNTIM %
   CSTK7$,      % CO-ROUTINE STACK ADDRESS FOR DELREL %
   CSTK8$,      % CO-ROUTINE STACK ADDRESS FOR ENAME  %
   CSTK9$,      % CO-ROUTINE STACK ADDRESS FOR SORT   %
   CDBCF$;      % DATA BASE CONTROL FUNCTION FLAG %




%! Define macro for protecting a body of code from interrupts %

MACRO $CPROTECT( CODEBODY )=
   BEGIN
   LOCAL PREVSTATE;
   PREVSTATE _ .CINTS$;
   CINTS$ _ CV$DISABLED;
   IF .PREVSTATE NEQ CV$DISABLED THEN $CISDIS();
   CODEBODY;
   CINTS$ _ .PREVSTATE;
   IF .PREVSTATE NEQ CV$DISABLED THEN $CISREN()
   END &;


BIND CV$ENABLED = 0;    % Interrupt system enabled/alive %
BIND CV$DISABLED= 1;    % interrupt system disabled/dormant %


%! DEFINE MACROS FOR OBTAINING MEMORY FROM DEFAULT MEMORY AREA TABLE %

MACRO
        $CGTZM(REQUESTSIZE)=$CGZAM(REQUESTSIZE,.CAREA$)&,
        $CGETM(REQUESTSIZE)=$CGTAM(REQUESTSIZE,.CAREA$)&;



%
<FILE/STUFF-STATUS> FROM NOTEBOOK SECTION 3.5-3
THESE VALUES ARE RETURNED ON ERROR CONDITIONS AT
FILE OPEN OR FILE ACCESS TIME.
%

BIND    CV$EOF=-7,      %"HARD" END OF FILE     %
        CV$NOPEN=-11,   %"FILE" NOT OPENED/INIT %
        CV$NCLOSE=-12,  %"FILE" NOT CLOSED/TERM %
        CV$ILMOD=-1,    %ILLEGAL MODE ON OPEN   %
        CV$NOCHN=-2,    %NO CHANNEL AVAIL       %
        CV$LKFAL=-3,    %LOOKUP FAILED          %
        CV$ENTFAL=-4,   %ENTER FAILED           %
        CV$INTFAL=-5,   %INIT FAILED            %
        CV$BDFIDT=-6,   %BAD FIDT               %
        CV$ILIOOP=-13,  %ILLEGAL I/O OPERATION  %
        CV$IOERR=-8,    %IO ERROR               %
        CV$BDCURS=-9,   %ILLEGAL CURSOR POSITION%
        CV$BDCNT=-10;   %BAD COUNT VALUE        %

%  THE FOLLOWING STRUCTURE DEFINES THE CONTROL BLOCK FOR DOING
   IO IN LINE MODE.  NOTE THAT IT ASSUMES IT IS USED WITH A POINTER.
%
%  FIRST A MACRO SPECIFY SIZE IN WORDS OF AN LCB GIVEN CHAR CONTENTS:
%
MACRO $CLCBS(CHARS)=(7+(9+CHARS)/5)&;

BIND
   CV$DCILCB=256,  % DEFAULT NO. OF CHARS IN LINE %
   CV$DWILCB=$CLCBS(CV$DCILCB),   % DEFAULT SIZE OF LCB %
   C$BPTR =0,     % BYTE POINTER TO BEGINNING OF LINE TEXT %
   C$EPTR =1,     % BYTE POINTER TO END OF LINE TEXT %
   C$SEQNO=2,     % SEQUENCE NUMBER WORD %
   C$LCBSIZE=3,   % SIZE IN CHARACTERS FOR OVERFLOW CHECKS %
   C$TEXT =4,     % WORD ADDRESS OF TEXT AREA %
   C$LCBCNT=5,    % CURRENT CHAR COUNT OF LCB CONTENTS %
   C$WPTR=6,      % WORKING POINTER TO LINE %
   C$WCNT=7;      % WORKING COUNT %

STRUCTURE CLINE$[FIELD]=
   CASE .FIELD OF SET
%BPTR %  (@.CLINE$+0)<0,36>;
%EPTR %  (@.CLINE$+1)<0,36>;
%SEQNO%  (@.CLINE$+3)<0,36>;
%LCBSIZE%(@.CLINE$+2)< 0,36>;
%TEXT %  (@.CLINE$+7);
%LCBCNT% (@.CLINE$+4)< 0,36>;
%WPTR %  (@.CLINE$+5)<0,36>;
%WCNT %  (@.CLINE$+6)<0,36>;
   TES;

STRUCTURE CLINE$I[FIELD]= [IF FIELD EQL 1 THEN CV$DWILCB ELSE $CLCBS(FIELD)]
   CASE .FIELD OF SET
%BPTR %  (.CLINE$I+0)<0,36>;
%EPTR %  (.CLINE$I+1)<0,36>;
%SEQNO%  (.CLINE$I+3)<0,36>;
%LCBSIZE%(.CLINE$I+2)< 0,36>;
%TEXT %  (.CLINE$I+7);
%LCBCNT% (.CLINE$I+4)< 0,36>;
%WPTR %  (.CLINE$I+5)<0,36>;
%WCNT %  (.CLINE$I+6)<0,36>;
   TES;

%
THINGS FOR MIDAS INTERNAL I/O ACTIVITIES
%
%
FILE/STUFF DESIGNATORS
%
BIND    CV$ALPHAIN=     0,      %ALPHA TOKEN INPUT  %
        CV$ALPHAOUT=    1,      %ALPHA TOKEN OUTPUT %
        CV$BETAIN=      2,      %BETA  TOKEN INPUT  %
        CV$BETAOUT=     3,      %BETA  TOKEN OUTPUT %
        CV$GAMMAIN=     4,      %GAMMA TOKEN INPUT  %
        CV$GAMMAOUT=    5,      %GAMMA TOKEN OUTPUT %
        CV$DELTAIN=     6,      %DELTA TOKEN INPUT  %
        CV$DELTAOUT=    7,      %DELTA TOKEN OUTPUT %
        CV$EPSLNIN=     8,      %EPSILON TOKEN INPUT%
        CV$EPSLNOUT=    9,      %EPSILON TOKEN OUTPUT%
        CV$ERRORIN=    10,      %ERROR TOKEN INPUT  %
        CV$ERROROUT=   11;      %ERROR TOKEN OUTPUT %

%
I/O DIRECTION INDICATOR FOR DIAGNOSTICS
%
MACRO $CIODIR(X)= CASE X MOD 2 OF
   SET
    PLIT ASCIZ 'IN';
    PLIT ASCIZ 'OUT';
   TES&;

%
FILE/STUFF TYPE INDICATOR FOR DIAGNOSTICS
%
MACRO $CTYPE(X)= (CASE X/2 OF
   SET
    $USPTR('ALPHA');
    $USPTR('BETA');
    $USPTR('GAMMA');
    $USPTR('DELTA');
    $USPTR('EPSILON');
    $USPTR('ERROR')
   TES)&;

%
FILE/STUFF DESIGNATOR VALUES FOR $CSTART
%
MACRO $CSTYPE(X)= CASE X OF 
  SET
    SIXBIT '   ALP';
    SIXBIT '   BET';
    SIXBIT '   GAM';
    SIXBIT '   DEL';
    SIXBIT '   EPS';
    SIXBIT '   ERR';
  TES&;

MACRO $CDDT$RESET=
   BEGIN
   MACHOP SETDDT=#047;
   REGISTER AC;
   AC _ .CDDT$;
   SETDDT(AC,2,0,0)
   END &;

MACRO $CIHDT$ALIGN=
        BEGIN
        CIHDT$[0] _ $CDESC<0,0>;
        CIHDT$[1] _ $CDILL<0,0>;
        CIHDT$[2] _ $CDSTK<0,0>;
        CIHDT$[3] _ $CDARI<0,0>
        END &;


BIND  CV$COSTKSZ = 31,  % SIZE OF COSTK$ OVERLAY CTL STACK %
      CV$PARMSTKSZ=15;  % SIZE OF CPARM$ OVERLAY PARAM STACK %

MACRO $CPUSH(STACK,ITEM)=
   BEGIN
   STACK<0,18> _ .STACK<0,18> +1;
   (.STACK)<0,36,0,0> _ ITEM
   END &;

MACRO $CPOP(STACK,ITEM)=
   BEGIN
   ITEM _ .(.STACK)<0,36,0,0>;
   STACK<0,18> _ .STACK<0,18> - 1;
   END &;



        %                                       %
        %  DECLARATIONS FOR $CSCAN  - THE       %
        %       COMMAND   SCANNER               %
        %                                       %


BIND    %! Assign values to $CSCAN program names to be used with the
           ENTRYPOINT macro to access the PROGRAM plit.  Due to the
           field size for specifying programs within the transition
           matrix, a maximum of  15  programs may be defined.
        %
 CV$BEGID  = 0, % Begin scanning of an ID type token                    %
 CV$CONT   = 1, % Continue building the current token                   %
 CV$BEGPAD = 2, % Begin scanning over pad characters (eg: BLANK)        %
 CV$PADPGM = 3, % Continue scanning over pad characters                 %
 CV$BEGNUM = 4, % Begin scanning of a NUMERIC type token                %
 CV$SPLCHR = 5, % Begin scanning of a SPECIAL CHARACTER type token      %
 CV$BEGDLM = 6, % Begin scanning of a delimited string                  %
 CV$CKDLIM = 7, % Check a delimiter for inclusion in a delimited string %
 CV$INCLDC = 8, % Include a delimiting character in a delimited string  %
 CV$EOLPGM = 9, % Conclude all scanning of the line and return tokens   %
 CV$BOLPGM =10, % Begin all scanning                                    %
 CV$ENDTK  =11, % Change state to CV$LOOK and re-dispatch on CHAR       %
 CV$CKDOT  =12; % Check for a numeric item immed. behind this period    %

BIND    %! Assign values to names of $CSCAN states which are used
             to index the transition matrix.  A maximum of nine states
             may be defined, see the $CTM macro definition below.
        %
  CV$LOOK = 0,  % looking for the beginning of a token          %
  CV$BOL  = 0,  % =CV$LOOK;  for beginning of line              %
  CV$PAD  = 1,  % scanning over pad characters                  %
  CV$ID   = 2,  % building an ID token                          %
  CV$NUM  = 3,  % building a NUMERIC token                     %
  CV$SPLC = 4,  % building a SPECIAL CHARACTER token           %
  CV$DLIM = 5,  % building a DELIMITED STRING token            %
  CV$EOL  = 9;  % at end of line, no more dispatching          %

MACRO   %! Define the structure of the three-word entries in the
             transition matrix.  There are nine SPx fields for specifying
             a program for a character + state combination, followed by
             output buffer injection information.
        %
  $CTM(SP0,SP1,SP2,SP3,SP4,SP5,SP6,SP7,SP8,ICODE,ICNT,IVAL)=
       SP8^32 OR SP7^28 OR SP6^24 OR SP5^20 OR SP4^16
            OR SP3^12 OR SP2^8  OR SP1^4  OR SP0,         % word-0 %
     ICODE^18  OR  ICNT,                                  % word-1 %
     IVAL &;                                              % word-2 %

BIND    %! Assign values to names of $CSCAN injection codes             %
  CV$SUB  =  1, % Substitute the short string stored in IVAL field      %
  CV$DRCT =  2; % Transfer directly from CHAR to output buffer          %

STRUCTURE  %! Define the structure of the $CSCAN created token block. %
   CT$[FIELD] = CASE .FIELD OF
        SET
   % TOKEN  %   (@(@.CT$  )  )< 0,36>;  % M A W T C S D B %
   % TYPE   %   (@(@.CT$  )  )<27, 9>;  % U G I H T T E E %
   % NXTCH  %   (@(@.CT$  )  )<18, 9>;  % S R T E $ R F L %
   % CHPOS  %   (@(@.CT$  )  )< 9, 9>;  % T E H   I U . O %
   % LENGTH %   (@(@.CT$  )  )< 0, 9>;  %   E       C   W %
   % PTR    %   (@(@.CT$  )+1)< 0,36>;  %           T     %
   % VALUE  %   (@(@.CT$  )+2)< 0,36>;  %                 %
   % HEADER %     (@.CT$  )   < 0,36>;
   % CURSOR %     (@.CT$  )   < 0,36>;
   % COUNTR %     (@.CT$+1)   < 0,36>;
   % BAG    %     (@.CT$+2)   < 0,36>;
   % IBUF   %     (@.CT$+3)   < 0,36>;
   % OBUF   %     (@.CT$+4)   < 0,36>;
   % ILEN   %     (@.CT$+5)   <18,18>;
   % OLEN   %     (@.CT$+5)   < 0,18>
        TES;

BIND    %! Assign values to the names of the token block fields,
             note that the token-fields are common to both the CT$ and
             CT$I structures.
        %
  CT$TOKEN  =  0,  % Address of first word of current token %
  CT$TYPE   =  1,  % Token type, corresponds to state in which created  %
  CT$NXTCH  =  2,  % Value of the character following this token        %
  CT$CHPOS  =  3,  % Token position, first characters count in input    %
  CT$LENGTH =  4,  % Token length in characters of orig. input          %
  CT$PTR    =  5,  % Pointer to the output buffer position of this token%
  CT$VALUE  =  6,  % $CHASH macros value for the output buf. representation %
  CT$HEADER =  7,  % Address of header block portion of token block     %
  CT$CURSOR =  8,  % Pointer to current token in token bag              %
  CT$COUNT  =  9,  % Total of tokens now in bag                         %
  CT$BAG    = 10,  % Pointer to first word of token bag         %
  CT$IBUF   = 11,  % Pointer to original input buffer                   %
  CT$OBUF   = 12,  % Pointer to output/injection buffer                 %
  CT$ILEN   = 13,  % Number of characters in original input buffer      %
  CT$OLEN   = 14,  % Number of characters in output/injection buffer    %

  CV$TOKSZ  = 3;        %  TOKEN SIZE IN WORDS  %

STRUCTURE  %! Define the structure of an individual $CSCAN token
             for mapping an immediate buffer without going through the
             token block header.
           %
   CT$I[FIELD] = CASE .FIELD OF
        SET
   % TOKEN  %   (@.CT$  )< 0,36>;  % M A W T C S D A %
   % TYPE   %   (@.CT$  )<27, 9>;  % U G I H T T E B %
   % NXTCH  %   (@.CT$  )<18, 9>;  % S R T E $ R F O %
   % CHPOS  %   (@.CT$  )< 9, 9>;  % T E H     U .
   % LENGTH %   (@.CT$  )< 0, 9>;  %   E       C   E %
   % PTR    %   (@.CT$+1)< 0,36>;  %           T     %
   % VALUE  %   (@.CT$+2)< 0,36>   %                 %
        TES;

%! The macro CTOKFEED increments the token cursor of
        the parameter token-block (assumed mapped with CT$) until
        either the end-of-line or a non-padding token is found.
        -%

MACRO $CTOKFEED(TOKBLK)=
        BEGIN
        LABEL NXTTOK;
    NXTTOK:  UNTIL .TOKBLK[CT$TYPE] EQL CV$EOL DO
                BEGIN
                TOKBLK[CT$CURSOR] _ .TOKBLK[CT$CURSOR] + CV$TOKSZ SEMICOLON
                IF .TOKBLK[CT$TYPE] NEQ CV$PAD THEN
                   LEAVE NXTTOK
                END
        END &;


%
END OF MIDAS-1 UNVERSAL FILE: (MIDAS)CDEFS.BLI
%
SWITCHES LIST;
   fw;?