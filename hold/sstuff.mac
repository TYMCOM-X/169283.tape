TITLE   SSTUFF - COEES S(TRING) STUFF
SUBTTL  GARY GERE & FRIENDS - VERSION 1.00 - JULY 6, 1973

        SALL                    ;TURN OFF MACRO SPEWING

DEFINE EOP(MES)<SUBTTL MES
        PAGE>

DEFINE MUMBLE<COMMENT>

MUMBLE !

MAINTAIN THIS VERSION COMMENT AND UPDATE WITH EVERY RELEASE OF SSTUFF.

6/6/73  VER 1.00        GARY GERE - AUTHOR - FIRST RELEASE

!


        EOP(ASSIGNMENT STATEMENTS)

;CONSTANTS

; REGISTER ASSIGNMENTS
        ; MEANING
R0==0   ;SCR
R1==1
R2==2
R3==3
R4==4
R5==5
R6==6
R7==7
R10==10
R11==11
R12==12
R13==13
R14==14
R15==15
R16==16 ; POINTS TO ARGUMENT LIST ON SFO CALL
R17==17 ; PUSHJ R17, DONE TO CALL SUBROUTINE FROM SFO

        EOP(WORKING STORAGE)

; TABLE FOR CHARACTER ROUTINES
TABLE:  POINT   7,0,6   ; CHARACTER # 0
        POINT   7,0,13  ;  CHARACTER # 1
        POINT   7,0,20  ;   CHARACTER # 2
        POINT   7,0,27  ;    CHARACTER # 3
        POINT   7,0,34  ;     CHARACTER # 4

; REGISTER BLOCK----DONT CONFUSE
SVR0:   BLOCK   1
SVR1:   BLOCK   1
SVR2:   BLOCK   1
SVR3:   BLOCK   1
SVR4:   BLOCK   1
SVR5:   BLOCK   1
SVR6:   BLOCK   1
SVR7:   BLOCK   1
SVR10:  BLOCK   1
SVR11:  BLOCK   1
SVR12:  BLOCK   1
SVR13:  BLOCK   1
SVR14:  BLOCK   1
SVR15:  BLOCK   1
SVR16:  BLOCK   1
SVR17:  BLOCK   1
; END OF REGISTER SAVE BLOCK

; BLOCK FOR ERRPRINT ARGUMENT -- DONT CONFUSE
ERRBLK: ARG     1,ERRNO
ERRNO:  BLOCK   1
;END OF ERR ARG BLOCK

        EOP(WORKING CODE - RT ROUTINE)

; RT - RETURNS
RT:     MOVE    R0,[SVR1,,R1]   ;BLT CODE
        BLT     R0,R17          ;RETURN.....
        MOVE    R0,SVR0         ;GET R0
        POPJ    R17,            ;RETURN * *0*

        EOP(WORKING CODE - STC CODE)

;   S U B R O U T I N E            S T C ( X , S , M )
;
; X ::= CHARACTER, LEFT-JUSTIFIED, 7-BIT
; S ::= VECTOR CONTAINING ASCII CHARACTERS, 5 TO A WORD
; M ::= POSITION

        ENTRY   STC

STC:    MOVEM   R0,SVR0         ;SAVE R0
        MOVE    R0,[R1,,SVR1]   ;BLT CODE: R1>SVR1,,R2>SVR2 ....
        BLT     R0,SVR17        ;DONE BLT......
MUMBLE ! 
REGISTERS SAVED, LET'S CHECK M FOR BOUNDS AND GO TO IT FOLKS!
        MOVE    R0,@2(R16)      ;GET M

        EXTERNAL        ERRPRINT        ;COEES ERROR PRINTER

        JUMPLE  R0,[MOVEI R0,2  ;SET ARGUMENT = 2 FOR ERRPRINT
                MOVEM R0,ERRNO  ;SET UP ERRPRINT ARGUMENT BLOCK
                MOVEI R16,ERRBLK ; SET UP ARGUMENT POINTER
                PUSHJ R17,ERRPRINT ; CALL ERROR PRINTER
                JRST RT]        ;RETURN . . .
MUMBLE !
ALL CHEKS FOR GO-AHEAD
!
        LDB     R1,[POINT 7,@0(R16),6]  ;GET LEFT-JUST CHAR
        ANDI    R1,177          ;MASK IT OUT
        HRRZ    R2,1(R16)       ;BELOW
        MOVE    R3,@2(R16)      ;BELOW
MUMBLE !
R1 = CHARACTER, RIGHT-JUSTIFIED FOR THE DPB
R2 = BASE ADDRESS OF THE ARRAY (MUST BE FIDDLED WITH)
R3 = POSITION TO MOVE INTO
!
        ADD     R2,[POINT 7,0]          ;MAKE ARRAY BYTE POINTER
        SOJL    R3,.+3          ;ADJUST POINTER
        IBP     R2              ;INCREMENT BYTE POINTER
        JRST    .-2             ;CONTINUE LOOP
; WE NOW HAVE ADJUSTED BYTE POINTER IN R2
        DPB     R1,R2           ;DEPOSIT CHARACTER
        JRST    RT              ;RETURN *0* *


        EOP(WORKING CODE - ERRP1 CODE)

; HERE WHEN ERRPRINT(1) SHOULD BE DONE
ERRP1:  MOVEI   R1,1
        MOVEM   R1,ERRNO
        MOVEI   R16,ERRBLK
        PUSHJ   R17,ERRPRINT
        SETZM   SVR0
        SETZM   SVR1
        JRST    RT              ;RETURN

        EOP(WORKING CODE - RTC CODE)

;  S U B R O U T I N E    R T C ( X , S , M )
;
; RETURNS CHARACTER 'M' IN STRING 'S' INTO VARIABLE 'X'
;

        ENTRY   RTC

RTC:    MOVEM   R0,SVR0         ;PREPARE TO SAVE ALL REGS
        MOVE    R0,[R1,,SVR1]   ;BLT CODE
        BLT     R0,SVR17        ;BLT ...
; COMPUTE POINTER
        HRRZ    R2,1(R16)       ;GET BASE OF ARRAY (S)
        MOVE    R3,@2(R16)      ;GET CHARACTER POSITION
MUMBLE !
R2 = BASE OF ARRAY
R3 = CHARACTER POSITION
COMPUTE CHARACTER POINTER AND GET!
        MOVE    R1,[ASCII /     /]; FILL UP R1 WITH SPACES
        LSH     R1,-7           ;FREE UP THE LAST CHARACTRER POS.
        ADD     R2,[POINT 7,0]          ;MAKE ARRAY BYTE POINTER
        SOJL    R3,.+3          ;ADJUST POINTER
        IBP     R2              ;INCREMENT POINTER
        JRST    .-2             ;LOOP
        LDB     R0,R2           ;R0 NOW HAS CHARACTER
; MUST SHIFT TO LEFT
        DPB     R0,[POINT 7,R0,6]       ;MAKE LEFT JUST.
        AND     R0,[774000000000]       ;MASK CHAR OUT
        IOR     R1,R0           ;OR CHARACTER INTO SPACES
        MOVEM   R1,@0(R16)      ;PUT CHARACTER INTO X
        JRST    RT              ;RETURN

        EOP(WORKING CODE - EQ CODE)

;  S U B R O U T I N E    E Q ( S1 , M1 , S2 , M2 , L )
; 
; S1,S2 = STRINGS
; M1,M2 = CHARACTER POSITIONS
; L = # CHARACTERS IN S1 AND S2 TO BE COMPARED

        ENTRY   EQ

EQ:     MOVEM   R0,SVR0         ;PREPARE TO BLT
        MOVE    R0,[R1,,SVR1]   ;BLT CODE
        BLT     R0,SVR17        ;BLT ...
MUMBLE !
FROM HERE, WE WILL COMPUTE TWO CHARACTER POINTS
   PR1  --  POINTS TO STRING 1
   PR2  --  POINTS TO STRING 2
FIRST -- HOWEVERE - CHECK FOR ERROR RETURNS
!
        SKIPGE  @1(R16)         ;IS M1 < 0 ?
        JRST    ERRP1           ;YES BOMB
        SKIPGE  @3(R16)         ;IF M2 < 0 ?
        JRST    ERRP1           ;YES BOMB
        SKIPGE  @4(R16)         ;IF L < 0 ?
        JRST    ERRP1           ;YES - BOMB
        SKIPN   @4(R16)         ;IF L = 0 ?
        JRST    [MOVE R0,[SVR1,,R1]
                BLT R0,R17
                SETOB R0,R1
                POPJ R17,]      ;RETURN
MUMBLE !
WE NOW KNOW THAT ALL IS OKAY AS FAR AS PARAMETERS
SO, LET'S GO TO IT!
        HRRZ    R2,0(R16)       ;R2 = BASE ADR OF ARRAY
        MOVE    R3,@1(R16)      ;R3 = POSITIN TO MOVE FROM
        ADD     R2,[POINT 7,0]          ;MAKE INTO ARRAY BYTE POINTER
        SOJLE   R3,.+3          ;ADJUST POINTER
        IBP     R2              ;INCREMENT POINTER
        JRST    .-2             ;LOOP
        MOVEM   R2,PR1#         ;SAVE POINTER
; PR1 IN, PR2 COMING
        HRRZ    R2,2(R16)       ;R2 = BASE ADR OF ARRAY
        MOVE    R3,@3(R16)      ;R3 = POSITIN TO MOVE FROM
        ADD     R2,[POINT 7,0]          ;MAKE INTO ARRXY POOINTER
        SOJLE   R3,.+3          ;ADJUST POINTER
        IBP     R2              ;INCREMENT POINTER
        JRST    .-2             ;LOOP
        MOVEM   R2,PR2#         ;SAVE POINTER
MUMBLE !
ALL POINTERS PR1 AND PR2 ARE HERE --- LET'S COMPARE
!
        MOVE    R0,@4(R16)      ;CHARACTER COUNTER
LOOPER: ILDB    R1,PR1          ;GET CHAR # 1
        ILDB    R2,PR2          ;GET CHAR # 2
        CAME    R1,R2           ;SKIP IF OKAY COMPARE
        JRST    [SETZM SVR0
                SETZM SVR1
                MOVE R0,[SVR1,,R1]
                BLT R0,R17      ;BLT REG'S BACK
                MOVE R0,SVR0
                POPJ R17,]      ;RETURN
        SOJG    R0,LOOPER       ;LOOP - FALL THRU IF DONE
        SETOM   SVR0
        SETOM   SVR1
        MOVE    R0,[SVR1,,R1]
        BLT     R0,R17          ;BACK THE REG'S COME
        MOVE    R0,SVR0         ;GET R0 BACK
        POPJ    R17,            ;RETURN

        EOP(WORKING CODE - INDEX FUNCTION)

	ENTRY	INDEXC

	ENTRY	INDEXC

INDEXC:	MOVEM	R0,SVR0		; SET UP FOR SAVING AC'S.
	MOVE	R0,[R1,,SVR1]	; FOR BLT.
	BLT	R0,SVR17	; GO, GO, GO!

S1=	R1
M1=	R2	
L1=	R3
S2=	R4
M2=	R5
L2=	R6

	HRRZ	S1,(R16)	; STRING ADDR 1.
	MOVE	M1,@1(R16)	; PICK UP M1.
	MOVE	L1,@2(R16)	; PICK UP LENGTH1.

	HRRZ	S2,3(R16)	; STRING ADDR 2.
	MOVE	M2,@4(R16)
	MOVE	L2,@5(R16)	; PICK UP LENGH2.

; IF L2 > L1  OR  L2 < 0  OR  L1 < 0  CALL ERRPRINT(4) AND RETURN 0.
	CAMLE	L2,L1
	JRST	IXBAD
	JUMPL	L1,IXBAD
	JUMPL	L2,IXBAD


	JUMPN	L2,.+3		; IF L2=0 RETURN INDEX=1.
	MOVEI	0,1
	JRST	XRETURN

; ADJUST BYTE POINTERS TO POINT TO CORRECT BYTES.


	SOS	R10,M1		; BUILD BYTE POINTERS TO THE
	IDIVI	R10,5		; 1-BASED ARRAYS.
	IOR	R10,XTBL(R11)
	ADD	S1,R10

	SOS	R10,M2
	IDIVI	R10,5
	IOR	R10,XTBL(R11)
	ADD	S2,R10

	MOVE	R10,S1		; SAVE BYTE POINTERS.
	MOVE	R11,S2

	MOVE	R7,L1		; DO IXLP0 TO IXLP2,
	SUB	R7,L2		; L2-L1+1 TIMES.

	MOVEI	R0,1		; SET INITIAL FCN VALUE.
IXLP0=	.
	MOVE	S1,R10		; RESTORE BYTE POINTERS.
	MOVE	S2,R11		;

	MOVE	R12,L2		; SEE IF L2 CONTIG. CHRS MATCH.
IXLP1=	.
	ILDB	R13,S1		; CHARACTER FROM ARRAY1.
	ILDB	R14,S2		; CHARACTER FROM ARRAY2.
	CAMN	R13,R14		; FOUND AN INEQUALITY--SKIP.
	SOJG	R12,IXLP1	; EQUAL SO FAR -- TRY AGAIN.
	
	JUMPE	R12,XRETURN	; IF R12=0, ALL CHARS MATCHED.
				; INDEX VALUE IS IN AC0.
	AOS	R0		; INC INDEX VALUE AND TRY AGAIN.
	IBP	R10		; SET FOR INCREMENTING POSITION.
IXLP2:	SOJGE	R7,IXLP0	; CONTINUE THE BIG LOOP.
IXZERO:	MOVEI	R0,0		; FALL THRU MEANS NO MATCH.

XRETURN=	.
	MOVE	R17,[SVR1,,R1]	; SET UP TO
	BLT	R17,R17		; RESTORE AC'S (EXC. R0)
	POPJ	R17,		; RETURN

IXBAD:	MOVEI	R0,4
	MOVEM	R0,ERRNO
	JSP	R17,ERRPRINT
	JRST	IXZERO

XTBL:	POINT 7,0,
	POINT 7,0,6
	POINT 7,0,13
	POINT 7,0,20
	POINT	7,0,27

        END
  