
!**COPYRIGHT 1972,1973, DIGITAL EQUIPMENT CORPORATION MAYNARD MA**
!AUTHOR NORMA ABEL
GLOBAL BIND GOPTV=44;		!VERSION NUMBER 5/2/72
!
!************************************
!
!
!********************************************
!
GLOBAL ROUTINE LOOKUP(VAR)=
BEGIN
EXTERNAL CHOSEN;
MAP PEXPRNODE VAR;
!LOOKUP IS CALLED BY THE DEFINITION ALGORITHM AND GLOBAL REGISTER
!ALLOCATION TO SEARCH A LINEAR LIST (CHOSEN) TO DETERMINE IF
!VAR IS IN THAT LIST
!
	IF .VAR[IDATTRIBUT(INCOM)] THEN VAR_.VAR[IDCOMMON];
	INCR I FROM 0 TO 31 DO
		IF .CHOSEN[.I]<RIGHT> EQL .VAR THEN RETURN(.I);
RETURN(64);
END;
!
!***********************************************
!
GLOBAL ROUTINE LOKCALST(PTR,NUMB,COMPR,SUBSTITUTE)=
BEGIN

	LOCAL BASE ARGG;
	MAP ARGUMENTLIST PTR;
	EXTERNAL LEAFSUBSTITUTE,SPECCASE;
	EXTERNAL TOP;
	MAP BASE TOP;
!LOOK AT A LIST OF ARGUMENTS POINTED TO BY PTR
!LOOK AT NUMB ELEMENTS OF THE LIST.
!COMPARE ELEMENTS OF THE LIST WITH COMPR.
!WHEN COMPR IS FOUND REPLACE IT WITH SUBSTITUTE
!
	INCR K FROM 1 TO .NUMB DO
	BEGIN
		ARGG_.PTR[.K,ARGNPTR];
		IF .ARGG[OPRCLS] EQL DATAOPR THEN
		BEGIN
			IF .ARGG EQL .COMPR THEN
			BEGIN
				!DONT DO IT IF THIS
				!IS A HALF WORD INDUCTION VARIABLE
				IF .TOP NEQ 0 THEN
				IF .TOP[DOSYM] EQL .COMPR THEN
					IF .TOP[FLCWD] AND .SPECCASE EQL 1 THEN
						TOP[NEDSMATRLZ]_1;
				!NOW SUBSTITUTE ANYWAY.
				PTR[.K,ARGNPTR]_.SUBSTITUTE;
				PTR[.K,AVALFLG]_1;
			END;
		END ELSE
		!IT COULD  BE THIS EXPRESSION ITSELF
		IF .ARGG EQL .COMPR THEN
		BEGIN
			PTR[.K,ARGNPTR]_.SUBSTITUTE;
			PTR[.K,AVALFLG]_1;
		END
		ELSE
		!MUST WALK EXPRESSION TREE LOOKING FOR IT
			LEAFSUBSTITUTE(.ARGG);
	END;	!INCR LOOP
END;
!******************************************************
!ROUTINE
!
GLOBAL ROUTINE REPLACARG(STMT,OLDARG,NEWARG)=
BEGIN
EXTERNAL TOP;
MAP BASE TOP;
EXTERNAL OPTERR;
MAP BASE STMT:NEWARG;
EXTERNAL SPECCASE;
!A PARENT THAT POINTS TO A STATEMENT HAS BEEN FOUND
!LIKE UP ARG TO THE CORRECT STAEMENT TYPE
!
	SELECT .STMT[SRCID] OF NSET
ASGNID:			!ASSIGNMENT STATEMENT
	BEGIN
		IF .STMT[LHEXP] EQL .OLDARG THEN
		BEGIN
			 STMT[LHEXP]_.NEWARG;
			IF .NEWARG[OPRCLS] EQL DATAOPR THEN
				STMT[A1VALFLG]_1;
			IF .NEWARG[OPRCLS] EQL REGCONTENTS THEN
			BEGIN
				STMT[A1VALFLG]_1;
				IF .SPECCASE EQL 2 THEN
				STMT[A1IMMEDFLG]_1
				ELSE
				IF .SPECCASE EQL 1 THEN
					IF .TOP[DOSYM] EQL .OLDARG 
					AND .TOP[FLCWD] THEN
				STMT[A1IMMEDFLG]_1;
			END;
		END;
		!IT COULD BE BOTH RIGHT AND LEFT HAND SIDES
		IF .STMT[RHEXP] EQL .OLDARG THEN
		BEGIN
			STMT[RHEXP]_.NEWARG;
			IF .NEWARG[OPRCLS] EQL DATAOPR THEN
				STMT[A2VALFLG]_1;
			IF .NEWARG[OPRCLS] EQL REGCONTENTS THEN
			BEGIN
				STMT[A2VALFLG]_1;
				IF .SPECCASE EQL 2 THEN
				STMT[A2IMMEDFLG]_1
				ELSE
				IF .SPECCASE EQL 1 THEN
					IF .TOP[DOSYM] EQL .OLDARG
					AND .TOP[FLCWD] THEN
				STMT[A2IMMEDFLG]_1;
			END;
		END;
	END;
!
!
CALLID:			!SUBROUTINE CALL
	BEGIN
		LOCAL ARGUMENTLIST AG;
		AG_.STMT[CALLIST];
		IF .AG NEQ 0 THEN
		LOKCALST(.AG,.AG[ARGCOUNT],.OLDARG,.NEWARG);
	END;
!
!
IFAID:
	BEGIN
		IF .STMT[AIFEXPR] EQL .OLDARG THEN
		BEGIN
			STMT[AIFEXPR]_.NEWARG;
			IF .NEWARG[OPRCLS] EQL REGCONTENTS THEN
			BEGIN
				IF .SPECCASE EQL 2 THEN
				STMT[A1IMMEDFLG]_1
				ELSE
				IF .SPECCASE EQL 1 THEN
					IF .TOP[DOSYM] EQL .OLDARG 
					AND .TOP[FLCWD] THEN
				STMT[A1IMMEDFLG]_1;
			END;
		END;
	END;
!
!
IFLID:
	BEGIN
		IF .STMT[LIFEXPR] EQL .OLDARG THEN
		BEGIN
			STMT[LIFEXPR]_.NEWARG;
			IF .NEWARG[OPRCLS] EQL REGCONTENTS THEN
			BEGIN
				IF .SPECCASE EQL 2 THEN
				!P2S, AOBJN WORD. VALUE IS +
				!CUZ WE DONT DO AOBJNS THRU ZERO
				!IT IS FALSE SO THE STATEMENT GOES AWAY
					STMT[SRCID]_CONTID
				ELSE
				IF .SPECCASE EQL 1 THEN
				!GLOBAL CASE, IF AOBJN, INDUCTION VARABLE
				!DO THE SAME THING
					IF .TOP[DOSYM] EQL .OLDARG
						AND .TOP[FLCWD] THEN
						STMT[SRCID]_CONTID;
			END;
		END;
	END;
!

AGOID:
	BEGIN
		IF .STMT[AIFEXPR] EQL .OLDARG THEN
			STMT[AIFEXPR]_.NEWARG;
	END;
!
!
CGOID:
	BEGIN
	!WE SHOULD BE TRYING THIS ONLY FOR GLOBAL REGISTER ALLOCATION
	IF .STMT[CGOTOLBL] EQL .OLDARG THEN
	BEGIN
		STMT[CGOTOLBL]_.NEWARG;
		IF .SPECCASE EQL 1 THEN	!GLOBAL REG ALLOC.
		BEGIN
			IF .TOP[SRCID] EQL DOID AND
			  .TOP[FLCWD] THEN
				STMT[A1IMMEDFLG]_1;
		END;
	END;
	END;
!
!
	TESN;
END;
!MORE WILL BE INCLUDED IN THIS WHEN THE FORMAT OF I/O STATEMENTS IS
!EXPLICIT
GLOBAL ROUTINE NULLOOPTST(LOOPTR)=
BEGIN
	!TEST FOR 
	!DO 10 I=1,ANYTHING
	!10 CONTINUE
	!AND LINK IT OUT OF THE TREE

	OWN BASE PA:PC;
	MAP BASE LOOPTR;
	!TEST FOR NULLOOP
	PA_.LOOPTR[DOLBL];
	IF .LOOPTR[SRCLINK] EQL .PA[SNHDR] THEN
	BEGIN
		PC_.PA[SNHDR];
		IF .PC[SRCID] EQL CONTID THEN
		BEGIN
			LOOPTR[SRCID]_CONTID;
			RETURN(1);
		END;
	END;
	RETURN(0);
END;





GLOBAL ROUTINE DOPARMS(CNODE)=
!ROUTINE CALLED TO COLLECT GLOBAL PARAMETERS USED BY THE 
!OPTIMIZER.
!THE PARAMETER IS A POINTER TO THE DO DEPTH ANALYSIS TREE.
BEGIN


	EXTERNAL TOP,BOTTOM,LEND,LENTRY,PM1,PM3,M1,M3,
		INDVAR,M1FLG,M3FLG;
	EXTERNAL TBLSEARCH;
	EXTERNAL THISLEVL,CORMAN,SORCPTR;
	LOCAL BASE TMP;
	MAP BASE TOP:BOTTOM:LEND:PM1:PM3:LENTRY;
	MAP BASE CNODE;
	!PICK UP INFORMATION ABOUT THIS DO LOOP
	!CNODE POINTS TO THE NODE OF THE DO STRUCTURE TREE
	!FIELDS FROM DO WALK TREE
	TOP_.CNODE[DOSRC];			!PTR TO DO STATEMENT ITSELF
	THISLEVL_.CNODE[LEVL];			!LEVEL OF DO NEXT

!
	!FIELDS FROM DO STATEMENT ITSELF

	LENTRY_.TOP[DOPRED];			!STATEMENT BEFORE DO
						!NEEDED FOR CODE MOTION OUT OF LOOP
	!IT MAY NOT BE EXACT OF A DO LOOP TERMINATOR IS
	!INVOLVED. TO MAKE SURE WE WILL LOOK FOR TOP.
	WHILE .LENTRY[SRCLINK] NEQ .TOP DO
		LENTRY_.LENTRY[SRCLINK];


	TMP_.TOP[DOLBL];
	LEND_.TMP[SNHDR];			!POINT TO SOURCE ENTRY FOR LABELED STATEMENT
	BOTTOM_.LEND[SRCLINK];			!ONE STATEMENT PAST END OF LOOP
						!USED IN WHILE TYPE CONTROL WHERE PTR IS
						!UPDATED BEFORE TESTING
	INDVAR_.TOP[DOSYM];			!THE INDUCTION VARIABLE

	PM1_.TOP[DOM1];				!POINTER TO INITIAL VALUE

	IF .PM1[OPR1] EQL CONSTFL THEN
	BEGIN
		M1FLG_1

		IF .PM1[VALTYPE] EQL INTEGER THEN

		M1_.PM1[CONST2] ELSE M1_.PM1[CONST1];
	END;
	IF  .TOP[SSIZONE] OR  .TOP[FLCWD]  THEN
	BEGIN
		PM3_MAKECNST(INTEGER,0,1);
	END ELSE
		PM3_.TOP[DOSSIZE];
END;
GLOBAL ROUTINE MOVLAB(TLAB,STMT,DEMARK)=
BEGIN
	!ROUTINE TO CHANGE THE TERMINAL LABEL
	!ON ALL DO LOOPS THAT TERMINATE AT
	!TLAB.
	!THIS ROUTINE IS USED BOTH BY REDUCTION IN STRENGTH
	!AND GLOBAL REGISTER ALLOCATION.
	!DEMARK IS THE FIRST LOOP THAT WE WANT TO MOVE. WE
	!MOVE FROM IT OUTWARD.

	EXTERNAL GENLAB;

	OWN BASE NEWLAB:CURDO:CNT:LSTLNK;
	MAP BASE TLAB:STMT;

	!GENERATE THE NEW LABEL
	NEWLAB_GENLAB();

	!DEFINE IT TO BE AT STMT
	NEWLAB[SNHDR]_.STMT;

	!GIVE THIS LABEL TO STMT
	STMT[SRCLBL]_.NEWLAB;

	!UPDATE THE SNEXTND FIELD OF THE NEW LABEL
	NEWLAB[SNEXTND]_.TLAB[SNEXTND];

	!NOW EXAMINE THE LINKED LIST OF DO LOOPS WHICH TERMINATE
	!AT TLAB. MOVE ALL ONES OUTER TO DEMARK (PARAMETER)
	!TO END AT NEWLAB.

	CURDO_.TLAB[SNDOLNK];

	!THE LINKED LIST IS STRUCTURED SO THAT THE
	!THE LEFT HALF OF EACH SINGLE WORD ENTRY
	!POINTS TO A DO STATEMENT AND THE RIGHT HALF IS
	!A POINTER TO THE NEXT ELEMENT IN THE LIST,
	!TERMINATING WITH A ZERO.

	IF .CURDO[LEFTP] EQL .DEMARK THEN	!THIS IS INNERMOST
	BEGIN
		!TRANSFER OLD FIELDS OVER
		NEWLAB[SNDOLNK]_.TLAB[SNDOLNK];
		NEWLAB[SNDOLVL]_.TLAB[SNDOLVL];
		!ZERO FIELDS IN OLD LABEL
		TLAB[SNDOLNK]_0;
		TLAB[SNDOLVL]_0;
		!DECREMENT THE NUMBER OF REFERENCES TO THE OLD LABEL
		TLAB[SNREFNO]_.TLAB[SNREFNO]-1;
	END ELSE
	BEGIN
		!LOOK DOWN LINKED LIST OF THIS LABEL

		CNT_0;
		WHILE .CURDO[LEFTP] NEQ .DEMARK DO
		BEGIN
			LSTLNK_.CURDO;		!SAVE OLD ONE
			CURDO_.CURDO[RIGHTP];	!LOOK AT NEXT ONE
			!INCREMENT CNT
			CNT_.CNT+1;
		END;
		!TERMINATE OLD LIST
		LSTLNK[RIGHTP]_0;
		!USE THE VARIABLE LSTLNK AS A TEMP
		LSTLNK_.TLAB[SNDOLVL]-.CNT;
		!THIS IS THE COUNT FOR THE NEW LIST
		NEWLAB[SNDOLVL]_.LSTLNK;
		!CHANGE THE OLD COUNT
		TLAB[SNDOLVL]_.CNT;
		TLAB[SNREFNO]_.TLAB[SNREFNO]-.CNT;
		NEWLAB[SNDOLNK]_.CURDO;
	END;
	!NOW THAT THE LABEL TABLE ENTRIES ARE STRAIGHT
	!GO THROUGH AND CHANGE THE DO STATEMENTS THEMSELVES
	CURDO_.NEWLAB[SNDOLNK];
	DO
	BEGIN
		!LSTLNK USED A TEMP AGAIN
		LSTLNK_.CURDO[LEFTP];
		LSTLNK[DOLBL]_.NEWLAB;
		CURDO_.CURDO[RIGHTP];
	END UNTIL .CURDO EQL 0;
	!THATS ALL
END;

    