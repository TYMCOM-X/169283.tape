		A CHAIN

FEATURES
	1) AUTOMATIC CORE EXPANSION
	2)I-O CHANNELS MAY BE KET OPEN BETWEEN OVERLAYS
	3)PROGRAM SEGMENTS MAY BE REPLACED(OVERLAYED) BY OTHER
PROGRAMME SEGMENTS.
	4)PROGRAMME SEGMENTS MAY BE APPENDED TO EXISTING CORE IMAGES.
	5)ALL SEGMENTS BELOW THE MAIN LINE REMOVABLE RESIDENT ARE
EITHER FORTRAN 4 SUBROUTINES OR MACRO 10 SUBPROGRAMMES.
	6)A CALL TO CHAIN CAUSES THE REQUESTED SUBROUTINE TO BE 
READ INTO CORE.  EXECUTION CONTINUES FROM THE START OF THE NEWLY
READ IN SUBROUTINE.
	7) ARGUMENTS MAY BE PASSED IN THE STANDARD FORTRAN ARGUMENT
LIST, TO CHAINED SUBROUTINES.
	8)AT THE END OF A CHAINED SUBROUTINE THE NORMAL FORTRAN
"RETURN" STATEMENT CAUSES CONTROL TO BE RETURNED TO THE FORTRAN
STATEMENT FOLLOWING THE CALL TO CHAIN.
	9) MAIN LINE PROGRAMMES MAY BE COMPLETELY REPLACED BY
OTHER MAIN LINE PROGRAMMES.

CHAIN PROGRAMME CREATION

	CHAIN PROGRAMMES ARE CREATED BY THE LINKING LOADER AND
STORED ON THE DISC WITH A "CHN" EXTENSION.
	A CHAIN PROGRAMME COMPRISES TWO DISTINCT CORE AREAS (SEE
FIG. 1).THE PERMANENT RESIDENT AREA OF CORE IS THE AREA IN WHICH
THE CHAIN CONTROL PROGRAMME RESIDES TOGETHER WITH THE FORTRAN

OPERATING SYSTEM AND ALL I-O BUFFERS.  THIS AREA ALSO CONTAINS 
THE FORTRAN PROGRAMME'S COMMON AREA AND ANY DESIRED RESIDENT
MACRO 10 PROGRAMMES.  
	BELOW THE PERMANANT RESIDENT AREA IS THE SO CALLED SEGMENT
READ IN AREA.  IT IS INTO THIS AREA OF CORE THAT ALL CHAINED

SEGMENTS ARE READ.
	EACH SEGMENT OF PROGRAMME TO BE CHAINED MUST BE CREATED

SEPARATELY BY A LOADER COMMAND.
	THE LINKING LOADER ACCEPTS A STRING OF PROGRAMME NAMES
INTERSPERSED WITH SPECIAL COMMANDS IN THE FORM OF SWITCHES. THIS
STRING IS SCANNED FROM LEFT TO RIGHT IN A SINGLE PASS, EACH
PROGRAMME IS LOADED AS IT'S NAME IS ENCOUNTERED, AND EACH SWITCH
COMMAND IS EXECUTED AS IT IS FOUND. (THERE IS NO LOOK AHEAD AT 
THE COMMAND STRING).

	EXAMPLE
SUPPOSE WE HAVE A FORTRAN MAIN PROGRAMME  ON THE DISC IN A
FILE CALLED MAIN,WHICH CHAINS TO A FORTRAN SUBROUTINE CALLED "ONE"
CONTAINED IN A DISC FILE CALLED "ONE"; SUPPOSE FURTHER THAT
THE COMMON AREA IS DEFINED IN A FORTRAN BLOCK DATA PROGRAMME CALLED
BLOCK RESIDING IN A DISC FILE CALLED BLOK.  THEN THE FOLLOWING LOADER
COMMANDS WOULD BE GIVEN TO CREATE THE CHAIN SYSTEM.

. R LOADER
*SYS:CHAIN/FDSK:BLOK,MAIN/FDSK:ONE/F
*DSK:ONE_/R2

CHAIN  13K CORE
13+4K MAX 5348 WORDS FREE

EXIT
^C

.

	THIS COMMAND STRING IS INTERPRETED AS FOLLOWS:-


1)GET THE FILE CALLED CHAIN FROM THE SYSTEM          SYS:CHAIN

2)SEARCH SYSTEM LIBRARIES FOR THE FORTRAN OP SYS     /F

3)GET THE FILE CALLED MAIN FROM THE USER'S DISC      DSK:MAIN

4)SEARCH SYSTEM LIBRARIES FOR FORTRAN ROUTINES       /F

5)GET THE FILE CALLED ONE FROM THE USER'S DISC       DSK:ONE

6)SEARCH THE SYSTEM LIBRARIES FOR FORTRAN ROUTINES   /F

7)WRITE THE FILE CALLED ONE.CHN ON USER'S DISC       DSK:ONE_

8)WRITE OUT BEGINNING WITH 2ND FORTRAN PROGRAMME     /R2

	THE RESULT OF THIS LOADING ACTION IS A DISC FILE CALLED
ONE.CHN.  IT'S CONTENT IS JUST THE ROUTINE CALLED ONE FOLLOWED BY
ANY REQUIRED FORTRAN SYSTEM ROUTINES NOT PREVIOUSLY LOADED
(SIN,IFIX ETC.).

	A SECOND LOADER COMMAND IS USED TO CREATE THE INITIAL CORE
CONTENT AS FOLLOWS:-

.R LOADER
*SYS:CHAIN/FDSK:BLOK,MAIN/F$

LOADER 6K CORE
6+3K MAX 1941 WORDS FREE

EXIT
^C

.SAVE DSK:BEGIN
JOB SAVED
^C

.

THIS STRING IS INTERPRETED AS ABOVE TO THE END OF ITEM 4.THE 
ALTMODE CAUSES THIS FILE TO BE WRITTEN ON THE DISC READY FOR 
EXECUTION.  THE SAVE COMMAND CAUSES THE FILE TO BE PERMANENTLY
SAVED WITH THE GIVEN NAME (BEGIN IN OUR EXAMPLE) ON THE USER'S
DISC.  THE SAVED FILE CONTAINS THE INITIAL CORE IMAGE. 
	NOTICE THAT IN THE FIRST LOADING SEQUENCE A COMPLETE
IMAGE OF THE SECOND LOADING SEQUENCE HAD BEEN BUILT UP WITH
THE ADDITION OF SUBPROGRAMME "ONE".  THUS WE KNOW THAT TO COMPLETE
THE CORE IMAGE AS REQUIRED, WHILST EXECUTING THE SAVED PROGRAMME,
WE HAVE ONLY TO READ IN THE SEGMENT CALLED ONE.CHN AND ATTACH IT
TO THE END OF THE EXISTING CORE IMAGE; THIS IS PRECISELY
WHAT A CALL TO CHAIN DOES.
	AN EXPLANATION OF THE /F COMMANDS IS REQUIRED AT THIS
POINT.  THIS COMMAND CAUSES THE SYSTEM LIBRARIES TO BE 
SEARCHED AND ANY REQUIRED SYSTEM ROUTINES ARE LOADED AT THAT POINT.
IT IS CRITICAL TO DO THIS LIBRARY SEARCH BEFORE EACH CHAIN SEGMENT.

EXAMPLE

	SUPPOSE WE HAD TYPED THE FOLLOWING LOADER COMMAND

*SYS:CHAIN/FDSK:BLOK,MAIN,DSK:ONE/F
*DSK:ONE_/R2

INSTEAD OF

*SYS:CHAIN/FDSK:BLOK,MAIN/FDSK:ONE/F
*DSK:ONE_/R2

THEN ALL THE SYSTEM ROUTINES WOULD BE IN CORE BELOW PROGRAMME
ONE.  BUT THE MAIN LINE AS WRITTEN IN THE INITIAL CORE IMAGE
(AND SAVED) HAS THE SYSTEM ROUTINES FOR THE MAIN LINE IMMEDIATELY
FOLLOWING THE MAIN LINE. THUS WHEN WE READ IN ONE.CHN WE WOULD
WRITE OVER THESE SYSTEM ROUTINES DESTROYING THE DELICATE BUT 
VITAL LINKAGES BETWEEN THE MAIN LINE AND ITS SYSTEM ROUTINES.

	THE TWO IMPORTANT RULES OF LOADING ARE:-

1)BE CONSISTANT.  ALWAYS LOAD YOUR PROGRAMMES IN THE SAME ORDER
IN THE COMMAND STRING,WITH LIBRARY SEARCHES(/F) IN THE SAME
RELATIVE PLACES IN EACH STRING.

2)ALWAYS DO A LIBRARY SEARCH JUST BEFOR THE NAME OF THE FIRST
PROGRAMME OF A CHAIN SEGMENT.
	CONSISTANCY CAN BE ACHEIVED BY THE USE OF LOADER
COMMAND FILES (COMMAND FILES ALSO SAVE A LOT OF TYPING, SO
BE LAZY AND USE THEM!)

	THE SINGLE DIGIT NUMBER FOLLOWING THE /R SPECIFIES THE
POINT FROM WHICH THE CHAIN FILE IS TO BE WRITTEN OUT.  THIS DIGIT
IS THE POSITION OF THE FILE NAME IN
THE STRING OF FORTRAN FILES ALREADY LOADED.  THUS THE MAIN
LINE IS ALWAYS NUMBER ONE,THE FIRST SUBROUTINE NAME IS NUMBER TWO
ETC.  MACRO 10 PROGRAMMES ARE NOT COUNTED AND MAY NOT BE THE
FIRST PROGRAMME IN A NEW OVERLAY.

EXAMPLE

*SYS:CHAIN/FDSK:BLOC,MAIN/FSUB1,MAC1,SUB2/FSUB3,MAC2,SUB4/F
*DSK:FIL_/R4

 WHERE MAIN IS THE MAIN PROGRAMMES,SUB1,SUB2,SUB3,SUB4 ARE 
FORTRAN SUBROUTINES, AND MAC1 AND MAC2 ARE MACRO 10 SUBPROGRAMMES.
CAUSES THE CHAIN FILE FIL.CHN TO START AT SUB3. (IF MAC1 WAS
A DECEPTIVELY NAMED FORTRAN SUBROUTINE THEN THE CHAIN FILE WOULD
HAVE STARTED WITH SUB2; BUT WE WOULD PROBABLY BE IN TROUBLE
LATER SINCE A /F DID NOT FOLLOW MAC1).

	THE HIGHEST SPECIFIABLE F4 PROGRAMME IN THIS IMPLEMENTATION
OF CHAIN IS 9 (ONLY A SINGLE DIGIT IS ALLOWED , A FUTURE
 IMPLEMENTATION WILL ALLOW LARGER NUMBERS WITH A SYNTAX CHANGE).


	PROGRAMME CONTROL

	THE FORTRAN CALL TO CHAIN HAS THE FOLLOWING FORMAT:-

	CALL CHAIN(LEV,NAME,ARG1,ARG2,.....,ARGN)

WHERE:-
LEV= THE POSITION OF THE INCOMING FILE RELATIVE TO THE MAINLINE
     WHICH IS POSITION OR LEVEL ONE, THE FIRST F4 SUBROUTINE
     IS LEV 2 ETC. (LEV IS THE NUMBER FOLLOWING THE /R WHEN THE FILE
     WAS CREATED)

NAME= THE FIVE (OR LESS) CHARACTER NAME OF THE CHAIN FILE ON DISC.

ARG1-ARGN= OPTIONAL ARGUMENTS THAT ARE TO BE PASSED TO THE
SUBROUTINE IN THE CHAIN FILE.  IF THE INCOMING FILE STARTS WITH
A MAINLINE(I.E. IF LEV=1) THESE ARGUMENTS ARE OMITTED.

	A CALL TO CHAIN CAUSES THE NAMED FILE TO BE READ INTO
CORE AT THE POSITION IT OCCUPIED DURING IT'S INITIAL LOADER COMMAND
SEQUENCE.  THUS THE PROGRAMME READ IN MAY OVERLAY SOME EXISTING 
PROGRAMME IN CORE, OR IT MAY BE APPENDED TO THE END OF EXISTING
CORE DEPENDING ON HOW THE USER HAS SET UP HIS CORE AND CHAIN FILES.
HOWEVER A CHAINED PROGRAMME SEGMENT MAY NOT OVERLAY CORE ABOVE THE
LOCATION FROM WHICH CHAIN WAS CALLED, EXCEPT IN THE CASE OF A
CHAIN CALL TO A NEW MAINLINE (LEV=1).  THE REASON FOR THIS
RESTRICTION IS THAT THE RETURN ADDRESS FROM A SUBROUTINE CALL IS 
TO THE LOCATION OF THE ADDRESS FOLLOWING THE CALL.  IF THE CONTENT
OF THIS ADDRESS IS OVERLAYED THE PROGRAMME WILL CAST AROUND
AIMLESSLY AFTER ITS RETURN BEFORE SUFFERING A TERMINAL SEIZURE.

	CORE IS AUTOMATICALLY ADJUSTED TO TO THE MINIMUM SIZE
AS EACH SEGMENT IS READ IN.
	IF DDT IS LOADED THE SYMBOL TABLE IS ALWAYS PRESERVED
AUTOMATICALLY.  TO USE DDT SPECIFY /D AT THE BEGINNING OF EACH LOADING
SEQUENCE.  TO SET BREAK POINTS USE THE FOLLOWING TECHNIQUE:-

.DDT
CHAIN$:     FLY$B

THIS SETS A BREAK AT THE END OF THE CHAINING SEQUENCE,WHEN
THE NEW SYMBOL TABLE HAS BEEN DEFINED FOR THE INCOMING SEGMENT.
BREAKS MAY THEN BE SET IN THE NEW SEGMENT.  IT WILL BE NECESSARY
TO REOPEN THE SYMBOL TABLE AFTER EACH NEW OVERLAY BY TYPING
FOR EXAMPLE "MAIN.$:".


ERROR MESSAGES

1)	LOADER

	IF THE LEVEL NUMBER FOLLOWING THE /R EXCEEDS THE
NUMBER OF F4 PROGRAMMES THE LOADER TYPES THE MESSAGE

NO FILE # N,# OF F4 FILES = M PLEASE RETYPE
*

AT THIS POINT YOU MAY TYPE A NEW DIGIT, OR / TO RESTART THE LOADER.

2)	FATAL CHAIN EXECUTION ERRORS

1)	IF THE SPECIFIED CHAIN FILE CANNOT BE FOUND THE MESSAGE

CANNOT FIND FILE NAME

IS TYPED.

2)	UNDER VERY RARE CIRCUMSTANCES A DISC ERROR MAY OCCUR IN
WHICH CASE THE FOLLOWING ERROR WILL BE TYPED:-

DISC NOT AVAILABLE AT PROGRAMME NAME

3)	IF THE PROGRAMME ATTEMPTS TO READ A FILE INTO CORE ABOVE
THE ADDRESS OF THE CALL THE FOLLOWING MESSAGE IS TYPED:-

ILLEGAL ATTEMPT TO DESTROY CORE ABOVE CALL, AT CALL TO SUB NAME

4)	IF DDT IS LOADED WITH VERY LARGE PROGRAMMES(31K OR MORE)
THERE IS A SMALL POSSIBILITY THAT THERE WILL NOT BE ENOUGH CORE
FOR CHAIN TO READ IN THE FIRST BLOCK OF THE INCOMING SEGMENT. IN
THIS CASE THE FOLLOWING MESSAGE IS TYPED:-
NO CORE AVAILABLE FOR CHAIN AT PROGRAMME NAME

5)	CHAIN REQUIRES ONE DISC CHANNEL TO READ THE NEXT
SEGMENT.  IF THE USER HAS USED 15(DECIMAL) CHANNELS IN FORTRAN
THE MESSAGE

NO CHANNEL AVAILABLE TO CHAIN AT PROGRAMME NAME

IS TYPED.

                      