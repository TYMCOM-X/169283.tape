10 INTEGER OBJ,HISTRY,SPCALC,FLUSH,BRIEF,FRSTSG,EDITL,CURRGO,EXIST,

      

              CMND,CURCMP,ERRCNT,COMPL,ACTVL,PRNTL,FSTITM,CLRITM,HASH,

      

              SONPTR,SONS,TREE,BUFITM,ITMLOC,ITMDIM,PRINT,OVLNO,FMTPTR
20 REAL ITMMIN,ITMMAX
30 STRING INPUT(4),ITMNAM(4)
40 STRING SBSNAM(8),OVL(8),INDOVL(8),DICFIL(8),FMTFIL(8),ATRFIL(8)
50 *    FROM RUNCOMDS
60 STRING MOD5XB(3)(8)
70 INTEGER CPRINT,CURITM,P1,P2,COMAND,CEXEC,GO,SYSTEM,STOP,

      

              CHAR,DIM,VARYNG,CHECK,HLOOK
80 REAL VALUE(100),MINMIN,MAXMAX
90 STRING END(4),OVLS(10)(4),COMMA(4),COLON(4),EQUAL(4),AMPER(4),DICTF(4)
100 STRING DBLANK(8),FTEMP(8),DSDICT(8),DS(8)
110 LOGICAL EQ,TSTBIT
120 COMMON FV(3000)
130 COMMON ITEM,OBJ,SBSNAM,LSBNAM,HISTRY(100),

      

             SPCALC,NOPRNT,FLUSH,ITMCHK,BRIEF,

      

             INPUT(21),LINPUT,FRSTSG,LASTSG,NXSTRT,

      

             EDITL(100),LEDITL,OVL,INDOVL,INDIR
140 COMMON CURRGO,LASTGO,CMND,CURCMP,ERRCNT,

      

             COMPL(100),LCOMPL,ACTVL(100),LACTVL,PRNTL(100),LPRNTL,

      

             NITEMS,MULTRE,EXIST(3),FSTITM,LSTITM,CLRITM,

      

             HASH(199),SONPTR(25),SONS(65),TREE(100)
150 COMMON DICFIL,FMTFIL,ATRFIL,

      

             BUFITM,ITMLOC,ITMMOD,ITMDIM,ITMTYP,ITMIO,ITMOVL,

      

             ITMFMT,ITMMIN,ITMMAX,ITMNAM(7),LITNAM
160 DATA OVLS/4*" ",2*"AUXC","DICT",3*"AUXC"/
170 DATA DBLANK,DSDICT,DS/' ','DSDICT','DS'/
180 DATA MXLSBN,COMAND,CEXEC,GO,SYSTEM,STOP/6,10,102,1,-2,3/
190 DATA LVALUE,CHECK,INT,CHAR/100,103,2,3/
200 DATA NOINPT,MODCON,MODCHK,VARYNG/1,16,8,64/
210 DATA END,LEND/"END",1/
220 DATA COLON,EQUAL,COMMA,AMPER/":","=",",","&"/
230 DATA DICTF/"DF"/,LDICTF/2/
240 DATA MINMIN,MAXMAX,EPS/-1.E35,1.E35,.0001/
250 DATA LHASH/199/
260 DATA N0,N1,N3,N4,N8,N10,N12,N16/0,1,3,4,8,10,12,16/
270 DATA N28,N32,N50,N100,N128/28,32,50,100,128/
280 DATA N1000,N10T6,M4/1000,1000000,-4/
290 DATA ISTAT,MOD5XB/2951,"5XBDF","5XBDATDF","TCOEDF"/
300 *
310 * CHECK FOR RETURN FROM EXECUTING LAST ITEM
320 *
330 IF(LSTITM.LT.N0)GOTO 610
340 *
350 * IF NOT RETURNING FROM BACK END GO GET NEXT STATEMENT
360 *
370 IF(CMND.LE.N100)GOTO 200
380 *
390 * RETURNING FROM GO EXECUTION, COMMAND EXECUTION OR
400 * MODCON OR MODCHECK (CMND=101,102,103 RESPECTIVELY)
410 *
420 CPRINT=CMND-N100
430 GOTO(10,50,150),CPRINT
440 *
450 * RETURNING FROM GO -- CHECK FOR SUSPENDED CALCULATIONS
460 * AND INTERNAL EDIT
470 *
480 10   IF(SPCALC.NE.N0)GOTO 70
490 IF(LEDITL.NE.N0)GOTO 100
500 *
510 * NORMAL RETURN FROM GO -- FLUSH PRINT LIST, RESET ALL NEGATIVE
520 * VALUED HISTRY CELLS TO POSITIVE, AND REINITIALIZE FLAGS
530 *
540 CALL PUBL(PRNTL,LPRNTL)
550 IF(EDITL(100).EQ.N1)GOTO 40
560 20   DO 30 CURITM=N1,NITEMS
570 30   HISTRY(CURITM)=IABS(HISTRY(CURITM))
580 40   LASTGO=CURRGO
590 EDITL(100)=N0
600 CURRGO=N0
610 50   LCOMPL=N0
620 CURITM=N0
630 CMND=N0
640 OBJ=N0
650 GOTO 200
660 *
670 * CALCULATIONS HAVE BEEN SUSPENDED
680 *
690 * FLUSH PRINT LIST IF ASKED (FLUSH.NE.0) AND PRINT
700 * MESSAGE IF ASKED (SPCALC.GT.1)
710 *
720 70   IF(FLUSH.NE.N0)CALL PUBL(PRNTL,LPRNTL)
730 FLUSH=N0
740 IF(SPCALC.GT.N1)GOTO 80
750 PRINT 73
760 73   FORMAT("0CALCULATIONS SUSPENDED")
770 80   SPCALC=N0
780 *
790 * SHORTEN ACTIVE LIST TO CONTAIN NO ITEMS AT OR ABOVE
800 * THE ITEM WHICH CAUSED CALCULATIONS TO BE SUSPENDED
810 *
820 CALL SHLIST(ITEM,ACTVL,LACTVL,N0,HISTRY)
830 GOTO 20
840 *
850 * AN INTERNAL EDIT HAS BEEN MADE
860 *
870 * FLUSH PRINT LIST IF ASKED (FLUSH.NE.0) 
880 *
890 100  IF(FLUSH.NE.N0)CALL PUBL(PRNTL,LPRNTL)
900 FLUSH=N0
910 *
920 * SHORTEN ACTIVE LIST TO CONTAIN NO ITEMS AT OR ABOVE
930 * THE ITEM WHICH CAUSED THE INTERNAL EDIT
940 *
950 CALL SHLIST(ITEM,ACTVL,LACTVL,N0,HISTRY)
960 *
970 * RESET ALL NEGATIVE HISTRY VALUES TO BE POSITIVE
980 *
990 DO 110 CURITM=N1,NITEMS
1000 110  HISTRY(CURITM)=IABS(HISTRY(CURITM))
1010 *
1020 * MAKE ALL EDITS IN THE EDIT LIST AND SET UP FOR ANOTHER
1030 * GO-ANALYSIS WITH THE SAME OBJECT
1040 *
1050 120  DO 130 I=N1,LEDITL
1060 CURITM=EDITL(I)
1070 130  HISTRY(CURITM)=M4
1080 LEDITL=N0
1090 LASTGO=CURRGO
1100 CURRGO=N0
1110 OBJ=N0
1120 CMND=N1
1130 GO TO 550
1140 *
1150 * RETURNING FROM MODCON OR MODCHECK
1160 *
1170 * IF RESULT ACCEPTED (ITMCHK=1) SET HISTRY ACCORDINGLY
1180 * IF RESULT REJECTED (ITMCHK=0) SET HISTRY ACCORDINGLY
1190 *
1200 150  IF(ITMCHK.EQ.N0)GOTO 170
1210 CALL SETHST(ITEM,HISTRY,ERRCNT)
1220 GOTO 180
1230 170  CALL SETERR(ITEM,HISTRY,ERRCNT)
1240 180  ITMCHK=N0
1250 GOTO 50
1260 *
1270 * CONTINUED IN DATA2DS
1280 * CONTINUED FROM DATA1DS
1290 *
1300 * GET NEXT STATEMENT FROM INPUT STRING
1310 * NON-STANDARD RETURN GOES TO GET MORE INPUT
1320 *
1330 200  CALL SCOPE(INPUT,NXSTRT,LINPUT,FRSTSG,LASTSG,

      

             DBLANK,N1,DBLANK,N1,COLON,N1,$5000)
1340 CMND=N0
1350 OBJ=N0
1360 *
1370 * STATEMENT MAY BE OF FORM --
1380 *  1. ITEM NAME = VALUE(S)
1390 *  2. ITEM OR SYSTEM COMMAND NAME BLANK OBJECT
1400 *  3. ITEM OR SYSTEM COMMAND NAME
1410 *  4. NEW MODULE NAME
1420 *
1430 * TRY TO BREAK OUT NAME WITH EQUAL SIGN
1440 *
1450 KF=FRSTSG
1460 CALL SCOPE(INPUT,KF,LASTSG,P1,P2,N0,N0,DBLANK,N1,EQUAL,N1,$210)
1470 CURITM=HLOOK(INPUT,P1,P2,HASH,LHASH)
1480 *
1490 * CURITM = 0 ==> NAME NOT IN HASH TABLE
1500 *   < 0 ==> NAME IS OF SYSTEM COMMAND
1510 *   > 0 ==> NAME IS USER DEFINED ITEM NAME
1520 *
1530 IF(CURITM)205,210,1000
1540 *
1550 * SYSTEM COMMAND -- SET P1 TO POINT TO = AND GO TO COMMAND
1560 * SCANNER
1570 *
1580 205  P1=KF-N1
1590 GOTO 215
1600 *
1610 * SEE IF FIRST WORD IS COMMAND NAME
1620 *
1630 210  P1=FRSTSG
1640 P2=INDEX(INPUT,P1,LASTSG-P1+N1,DBLANK,N1,N1)+P1-N1
1650 IF(P2.LT.P1)GOTO 230
1660 CURITM=HLOOK(INPUT,P1,P2,HASH,LHASH)
1670 IF(CURITM.EQ.N0)GOTO 230
1680 P1=P2
1690 *
1700 * IF COMMAND IS 'SYSTEM' OBJECT NOT IN HASH TABLE BUT
1710 * IS NEW MODULE NAME
1720 *
1730 215  IF(CURITM.EQ.SYSTEM)GOTO 255
1740 *
1750 * TRIM LEADING BLANKS AND LOOK UP OBJECT IN HASH TABLE
1760 *
1770 220  P1=P1+N1
1780 IF(P1.GT.LASTSG)GOTO 9900
1790 IF(EQ(INPUT,P1,DBLANK,N1,N1))GOTO 220
1800 OBJ=HLOOK(INPUT,P1,LASTSG,HASH,LHASH)
1810 IF(OBJ.NE.N0)GOTO 240
1820 *
1830 * OBJECT NOT ITEM NAME -- IS IT NUMBER
1840 *
1850 CALL NUMB(INPUT,P1,LASTSG,VAL,$225)
1860 OBJ=VAL
1870 GOTO 240
1880 *
1890 * OBJECT NOT RECOGNIZABLE -- IS THIS REALLY A MODCON ITEM
1900 *
1910 225  IF(CURITM.LE.N0)GOTO 9900
1920 CALL FILE(CURITM)
1930 IF(TSTBIT(ITMIO,MODCON))GOTO 800
1940 GOTO 9900
1950 *
1960 * TRY TO MATCH WHOLE STATEMENT AS KEY WORD
1970 *
1980 230  CURITM=HLOOK(INPUT,FRSTSG,LASTSG,HASH,LHASH)
1990 240  IF(CURITM)500,250,300
2000 *
2010 * TRY TO MATCH WHOLE STATEMENT AS NEW MODULE NAME
2020 * 
2030 250  P1=FRSTSG-N1
2040 255  FTEMP=DBLANK
2050 DO 270 I=N1,MXLSBN
2060 260  P1=P1+N1
2070 IF(P1.GT.LASTSG)GOTO 280
2080 IF(EQ(INPUT,P1,DBLANK,N1,N1))GOTO 260
2090 270  CALL MOVE(INPUT,P1,FTEMP,I,N1)
2100 I=MXLSBN+N1
2110 280  CALL MOVE(DICTF,N1,FTEMP,I,LDICTF)
2120 *
2130 * IF FILE WHOSE NAME IS IN FTEMP EXISTS IT IS THE DICTIONARY FILE
2140 * OF A MODULE
2150 *
2160 CALL FILE#CHK(FTEMP,INFO,N0,$9900)
2170 *
2180 * WE HAVE A NEW MODULE NAME RESET SBSNAM AND GO TO DICT
2190 * OVERLAY TO READ IN DICTIONARY AND REINITIALIZE
2200 *
2210 IF(((FTEMP.NE.MOD5XB(1)).AND.(FTEMP.NE.MOD5XB(3)).AND.(FTEMP.NE.

      

                  MOD5XB(3))))GO TO 9900
2220 SBSNAM=DBLANK
2230 LSBNAM=I-N1
2240 CALL MOVE(FTEMP,N1,SBSNAM,N1,LSBNAM)
2250 CMND=-SYSTEM
2260 OVL=DSDICT
2270 GOTO 10010
2280 *
2290 * IF ITEM MATCHED IS INDEED A COMMAND SET UP A DUMMY COMP LIST AND
2300 * EXECUTE IT
2310 *
2320 300  CALL FILE(CURITM)
2330 IF(ITMTYP.NE.COMAND)GOTO 9900
2340 310  LCOMPL=N1
2350 COMPL(LCOMPL)=N10T6+N1000*ITMOVL+CURITM
2360 CURCMP=N0
2370 II=IABS(CURITM)
2380  CALL GET#C(II,FV(ISTAT),ICNT)
2390 ICNT=ICNT+1
2400  CALL PUT#C(II,FV(ISTAT),ICNT)
2410 CMND=CEXEC
2420 GOTO 10000
2430 *
2440 * MATCHED A SYSTEM COMMAND
2450 *
2460 500  CMND=-CURITM
2470 510 GOTO(520,9900,600,600,700,700,700,700,700,700),CMND
2480 *
2490 * GO
2500 *
2510 520  IF(OBJ)530,550,540
2520 *
2530 * GO SYSTEM COMMAND -- REPLACE GO WITH OBJECT AND TRY AGAIN
2540 *
2550 530 CMND=IABS(OBJ)
2560 OBJ=N0
2570 IF(CMND.EQ.GO)GOTO 9900
2580 GOTO 510
2590 *
2600 * GO ITEM NAME -- CHECK IF ITEM IS COMMAND
2610 *
2620 540  CALL FILE(OBJ)
2630 IF(ITMTYP.NE.COMAND)GOTO 550
2640 *
2650 * ITEM IS COMMAND -- SET LASTGO TO FORCE NEW GO-ANALYSIS NEXT TIME
2660 * AND GO EXECUTE COMMAND
2670 *
2680 LASTGO=N100
2690 CURITM=OBJ
2700 GOTO 310
2710 *
2720 * NORMAL GO -- CALL GO-ANALYSIS
2730 * NON-STANDARD RETURN TAKEN IF GO-ANALYSIS FAILS
2740 *
2750 550 PRINT 9999
2760 9999 FORMAT("0")
2770 CALL DSGOAN($200)
2780 GOTO 10000
2790 *
2800 * STOP OR RETURN
2810 *
2820 600  OBJ=CMND
2830 IF(LSTITM.EQ.N0)GOTO 610
2840 *
2850 * EXECUTE LAST ITEM
2860 *
2870 CALL FILE(LSTITM)
2880 CURITM=LSTITM
2890 LSTITM=-LSTITM
2900 GOTO 310
2910 *
2920 * RETURNING FROM EXECUTION OF LAST ITEM OR NO LAST ITEM
2930 *
2940 610  IF(OBJ.EQ.STOP)CALL S#EXIT(END,LEND)
2950 CALL SOFT#END
2960 *
2970 * SYSTEM COMMANDS THAT ARE HANDLED IN ANOTHER OVERLAY
2980 *
2990 700  OVL=DS
3000 CALL MOVE(OVLS(CMND),N1,OVL,N3,N4)
3010 GOTO 10010
3020 *
3030 * EXIT FOR MODCON OR MODCHECK
3040 *
3050 800  FRSTSG=P1
3060 810  LCOMPL=N1
3070 COMPL(LCOMPL)=N10T6+N1000*ITMOVL+CURITM
3080 CURCMP=N0
3090 CMND=CHECK
3100 ITMCHK=N1
3110 GOTO 10000
3120 *
3130 * CONTINUED IN DATA3DS
3140 * CONTINUED FROM DATA2DS
3150 *
3160 * CONVERT ITEM'S VALUE(S)
3170 *
3180 1000 P1=KF-N1
3190 *
3200 * TRIM LEADING BLANKS
3210 *
3220 1010 P1=P1+N1
3230 IF(EQ(INPUT,P1,DBLANK,N1,N1))GOTO 1010
3240 CALL FILE(CURITM)
3250 *
3260 * CHECK FOR NOINPUT, AND MODCON
3270 *
3280 IF(TSTBIT(ITMIO,NOINPT))GOTO 9910
3290 IF(TSTBIT(ITMIO,MODCON))GOTO 800
3300 IF(ITMMOD.EQ.CHAR)GOTO 1200
3310 *
3320 * CONVERT NUMERIC VALUE(S)
3330 *
3340 NVALS=N0
3350 LASTSG=LASTSG+N1
3360 CALL MOVE(COMMA,N1,INPUT,LASTSG,N1)
3370 *
3380 * BREAK OUT NEXT VALUE
3390 *
3400 1100 CALL SCOPE(INPUT,P1,LASTSG,KF,KL,DBLANK,N1,DBLANK,N1,

      

             COMMA,N1,$1120)
3410 NVALS=NVALS+N1
3420 IF(NVALS.GT.LVALUE)GOTO 9000
3430 CALL NUMB(INPUT,KF,KL,VALUE(NVALS),$9010)
3440 GOTO 1100
3450 *
3460 * ALL VALUES CONVERTED -- CHECK MIN AND MAX
3470 *
3480 1120 IF(NVALS.EQ.N0)GOTO 9020
3490 XMIN=ITMMIN-EPS
3500 XMAX=ITMMAX+EPS
3510 DO 1130 I=N1,NVALS
3520 VAL=VALUE(I)
3530 IF(VAL.LT.XMIN.OR.VAL.GT.XMAX)GOTO 9030
3540 1130 CONTINUE
3550 *
3560 * CHECK IF NUMBER OF VALUES IS CORRECT FOR FIXED LENGTH ITEMS
3570 * AND CONSISTENT FOR VARIABLE LENGTH ITEMS
3580 *
3590 IF(TSTBIT(ITMIO,VARYNG))GOTO 1140
3600 IF(NVALS.NE.ITMDIM)GOTO 9050
3610 GOTO 1150
3620 1140 IF(NVALS.GT.ITMDIM)GOTO 9060
3630 *
3640 * ADJUST CURRENT LENGTH
3650 *
3660 IS1=ITMLOC+ITMDIM
3670 CALL MOVE(NVALS,N1,FV(IS1),N1,N4)
3680 1150 IF(ITMMOD.NE.INT)GOTO 1170
3690 *
3700 * CHECK THAT ALL VALUES ARE INTEGERS AND FIX THEM
3710 *
3720 DO 1160 I=N1,NVALS
3730 VAL=VALUE(I)
3740 IVAL=VAL+SIGN(EPS,VAL)
3750 FVAL=IVAL
3760 IF(IABS(VAL-FVAL).GT.EPS)GOTO 9070
3770 1160 CALL MOVE(IVAL,N1,VALUE(I),N1,N4)
3780 *
3790 * ALL CHECKS PASSED -- MOVE VALUES INTO PROPER PLACE IN COMMON
3800 *
3810 1170 DO 1180 I=N1,NVALS
3820 IS1=ITMLOC+I-N1
3830 1180 FV(IS1)=VALUE(I)
3840 GOTO 1250
3850 *
3860 * CONVERT CHARACTER VALUE
3870 *
3880 1200 L=LASTSG-P1+N1
3890 IF(L.GT.ITMDIM)GOTO 9080
3900 IF(.NOT.TSTBIT(ITMIO,VARYNG))GOTO 1210
3910 *
3920 * ADJUST CURRENT LENGTH
3930 *
3940 IS1=ITMLOC+(ITMDIM+N3)/N4
3950 CALL MOVE(L,N1,FV(IS1),N1,N4)
3960 *
3970 * PUT VALUE AWAY IN PROPER PLACE IN COMMON
3980 *
3990 1210 CALL MOVE(INPUT,P1,FV(ITMLOC),N1,L)
4000 IF(L.EQ.ITMDIM)GOTO 1250
4010 *
4020 * PAD VALUE WITH BLANKS
4030 *
4040 L=L+N1
4050 CALL MOVE(DBLANK,N1,FV(ITMLOC),L,N1)
4060 CALL MOVE(FV(ITMLOC),L,FV(ITMLOC),L+N1,ITMDIM-L)
4070 *
4080 * CHECK FOR MODCHECK REQUIREMENT
4090 *
4100 1250 IF(TSTBIT(ITMIO,MODCHK))GOTO 810
4110 *
4120 * ALL SUCCESSFUL -- SET HISTRY VALUE ACCORDINGLY
4130 *
4140 CALL SETHST(CURITM,HISTRY,ERRCNT)
4150 GOTO 200
4160 *
4170 * GET NEXT LINE OF INPUT
4180 *
4190 5000 IF(LSBNAM)5020,5010,5020
4200 5010 PRINT 5011
4210 5011 FORMAT(" SYSTEM")
4220 GOTO 5030
4230 5020 PRINT 5021
4240 5021 FORMAT("0REQUEST")
4250 5030 CALL #READ#(INPUT,LINPUT)
4260 LINPUT=LINPUT+N1
4270 CALL MOVE(COLON,N1,INPUT,LINPUT,N1)
4280 NXSTRT=N1
4290 GOTO 200
4300 *
4310 * ERROR DIAGNOSTICS
4320 *
4330 9000 PRINT 9001
4340 9001 FORMAT(" MORE THAN 100 VALUES GIVEN FOR ")
4350 GOTO 9098
4360 9010 PRINT 9011
4370 9011 FORMAT(" '")
4380 CALL STRPRINT(AMPER,INPUT,KF,KL,N12)
4390 PRINT 9012
4400 9012 FORMAT("&' MUST BE NUMERIC IN VALUE OF ")
4410 GOTO 9098
4420 9020 PRINT 9021
4430 9021 FORMAT(" NO VALUE GIVEN FOR ")
4440 GOTO 9098
4450 9030 IF(NVALS-N1)9900,9031,9033
4460 9031 PRINT 9032
4470 9032 FORMAT(" THE VALUE OF ")
4480 GOTO 9035
4490 9033 PRINT 9034
4500 9034 FORMAT(" ALL VALUES OF ")
4510 9035 CALL STRPRINT(AMPER,ITMNAM,N1,LITNAM,N28)
4520 PRINT 9036
4530 9036 FORMAT("& MUST BE ")
4540 IF(ITMMIN.NE.MINMIN)GOTO 9038
4550 PRINT 9037,ITMMAX
4560 9037 FORMAT("&LESS THAN",F12.2//)
4570 GOTO 9099
4580 9038 IF(ITMMAX.NE.MAXMAX)GOTO 9040
4590 PRINT 9039,ITMMIN
4600 9039 FORMAT("&GREATER THAN",F12.2//)
4610 GOTO 9099
4620 9040 PRINT 9041,ITMMIN,ITMMAX
4630 9041 FORMAT("&BETWEEN",F12.2," AND",F12.2//)
4640 GOTO 9099
4650 9050 PRINT 9051,ITMDIM
4660 9051 FORMAT(" THERE MUST BE",I3," NUMBERS IN THE VALUE OF ")
4670 GOTO 9098
4680 9060 PRINT 9061,ITMDIM
4690 9061 FORMAT(" THERE CAN BE AT MOST",I3," NUMBERS IN THE VALUE OF ")
4700 GOTO 9098
4710 9070 IF(NVALS.GT.N1)GOTO 9071
4720 PRINT 9032
4730 GOTO 9072
4740 9071 PRINT 9034
4750 9072 CALL STRPRINT(AMPER,ITMNAM,N1,LITNAM,N28)
4760 IF(NVALS.GT.N1)GOTO 9074
4770 PRINT 9073
4780 9073 FORMAT("& MUST BE A WHOLE NUMBER"//)
4790 GOTO 9099
4800 9074 PRINT 9075
4810 9075 FORMAT("& MUST BE WHOLE NUMBERS"//)
4820 GOTO 9099
4830 9080 PRINT 9081,ITMDIM
4840 9081 FORMAT(" THERE CAN BE AT MOST",I3," CHARACTERS IN THE VALUE OF ")
4850 GOTO 9098
4860 9098 CALL STRPRINT(AMPER,ITMNAM,N1,LITNAM,N28)
4870 PRINT 9097
4880 9097 FORMAT(" ")
4890 9099 CALL SETERR(CURITM,HISTRY,ERRCNT)
4900 GOTO 200
4910 9900 PRINT 9901
4920 9901nRMAT(" '")
4930 CALL STRPRINT(AMPER,INPUT,FRSTSG,LASTSG,N50)
4940 PRINT 9902
4950 9902 FORMAT("&' NOT RECOGNIZED")
4960 GOTO 200
4970 9910 PRINT 9911
4980 9911 FORMAT(" YOU MAY NOT ASSIGN A VALUE TO ")
4990 CALL STRPRINT(AMPER,ITMNAM,N1,LITNAM,N28)
5000 PRINT 9097
5010 GOTO 200
5020 10000 CLOSEFILE ATRFIL
5030  CLOSEFILE FMTFIL
5040 10010 RETURN
5050  END
   