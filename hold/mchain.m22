CHNSPC==10
CHNREL==0

%CHNVR==<CHNSPC,,CHNREL>

SALL

DEFINE TITL(SP,RL)<
TITLE MCHAIN VERSION SP'.'RL - MIKE'S MIGHTY CHAIN>
TITL(\CHNSPC,\CHNREL)
SUBTTL  WHAT THIS WORLD NEEDS IS A GOOD TWO DOLLAR ROOM AND A GOOD TWO DOLLAR BROOM

IFNDEF MAC,<MAC==0>     ;NONZERO SAYS INCLUDE MACHINE LANGUAGE MANUAL OVERLAY STUFF

ENTRY   CHAIN.,CHAIN
IFN MAC,<ENTRY OVRLY>
INTERN  CHNIN.,CHNFX.,%CHNVR
EXTERN  OVTAB.,JOBFF,JOBHCU,JOBJDA,JOBREL,JOBSA,JOB41,JOBREN,JOBSYM,JOBDDT
EXTERN  FORSE.,EXIT.,ALLIO.,NMLST.,TPFCN.
SEXTERN DYNDV.,UUOH.,SAVEAC,DEBCH.,DDTCH.,BUFHD.

;ACCUMULATORS
A=1
B=2
C=3
D=4
E=5
F=6
G=7
H=10
SEG=11  ;TREE TABLE POINTER
P=17

;ENTRIES IN OVERLAY TABLE
OVFLG=OVTAB.    ;LH: FLAGS
SEGCNT=OVTAB.   ;RH: # OF SEGMENTS (NOT COUNTING ROOT)
CHNFIL=OVTAB.+1 ;LOOKUP BLOCK FOR CHAIN FILE
TRETAB=OVTAB.+5 ;BEGINNING OF TREE TABLE

;WORDS IN TREE TABLE ENTRY
SEGNAM==0       ;SIXBIT NAME OF SEGMENT
SEGLOC==1       ;IOWD SEGMENT SIZE,SEGMENT BASE
SEGBLK==2       ;LH: BLOCK NUMBER IN FILE AND A FEW FLAGS
SEGLNK==2       ;RH: BACK LINK IN TREE TABLE
SEGCMP==3       ;RH: # OF WORDS IN COMPRESSED SEG
ENTSIZ==4       ;NUMBER OF WORDS IN A TREE TABLE ENTRY

;FLAGS IN OVFLG
CLSCHN==400000  ;CLOSE CHAIN FILE AFTER EACH OVERLAY (SET BY LOADER)
FILOPN==200000  ;CHAIN FILE IS CURRENTLY OPEN

;FLAGS IN SEGBLK
INCOR==400000   ;SEGMENT IS IN CORE
NEWIN==200000   ;SEGMENT WILL BE IN CORE WHEN WE FINISH
MAINPG==100000  ;SEGMENT CONTAINS A MAIN PROGRAM

;RANDOM SHIT

OPDEF MOVBUF [CALLI -27]

JBTFPN==-25     ;GETTAB TO FIND OUT WHERE PROGRAM CAME FROM

ZAP==0          ;ZAP IS USED WHERE AN INSTRUCTION WILL BE MODIFIED

DEFINE OP(A)<<A>B62>    ;9-BIT OPCODE RIGHT JUSTIFIED

CHNIN.: MOVE    JOBFF
        SUBI    1
        MOVEM   CURTOP          ;INITIALIZE OLD SEGMENT TOP
        POPJ    P,

CHNFX.: 0                       ;SEG # TO INITIALIZE
        0                       ;INST. TO EXECUTE WHEN DONE
        MOVE    SEG,CHNFX.
        JRST    CHN1

CHAIN:  0
        MOVEI   A,0
        MOVEI   B,6
        MOVEI   D,(16)
        LDB     [POINT 9,(D),8]
        CAIN    OP(JUMP)        ;SEARCH FOR LAST ARGUMENT
        AOJA    D,.-2           ;THIS WAY ALLOW NEW CALLING SEQUENCE
        MOVE    C,-1(D)         ;AND DEC'S OLD CALLING SEQUENCE
        HRLI    C,(POINT 7,0)
        MOVE    D,[POINT 6,A]
CVNM:   ILDB    C
        JUMPE   CVNM1
        SUBI    40              ;CONVERT ASCIZ TO SIXBIT
        IDPB    D
        SOJG    B,CVNM          ;NEVER MORE THAN 6
CVNM1:  SETZM   JOBSA           ;FOR ERROR CHECKING
        SETZM   USRLOC          ;FLAG FOR CHAIN CALL
IFN MAC,<
        JRST    FIND

OVRLY:  MOVEM   SEG,SAVE+SEG
        MOVEI   SEG,SAVE
        BLT     SEG,SAVE+SEG-1  ;SAVE ACS
        MOVE    A,(P)           ;GET SEGMENT NAME
        AOS     (P)             ;SET TO SKIP OVER IT
        SETOM   USRLOC          ;FLAG FOR MANUAL CALL
>
FIND:   HRRZ    B,SEGCNT
        MOVEI   SEG,TRETAB+ENTSIZ
FNDNM:  CAMN    A,SEGNAM(SEG)   ;LOOK FOR THE NAME
        JRST    CHN1            ;FOUND IT, GO TO COMMON CODE
        ADDI    SEG,ENTSIZ      ;NO, TRY NEXT
        SOJGE   B,FNDNM
        OUTSTR  [ASCIZ/
NO SUCH SEGMENT: /]
TYPSIX: MOVEI   0
        LSHC    6
        ADDI    40
        OUTCHR  
        JUMPN   A,TYPSIX
        EXIT

CHAIN.: MOVEI   [ASCIZ/BAD CALL/]
        HRRZ    A,UUOH.
        MOVEM   A,USRLOC        ;SAVE UUO LOCATION
        LDB     SEG,[POINT 4,-1(A),12]
        LDB     A,[POINT 4,-1(A),17]
        LSH     SEG,4           ;COMPUTE SEG # WHICH IS IN A AND X FIELDS
        OR      SEG,A
        CAILE   SEG,@SEGCNT     ;SEE IF WITHIN BOUNDS
        JRST    ERR
        IMULI   SEG,ENTSIZ
        MOVEI   SEG,TRETAB(SEG) ;GET POINTER INTO TREE TABLE
CHN1:   SKIPGE  SEGBLK(SEG)     ;IS THE SEGMENT IN CORE?
        JRST    FINISH          ;YES, NOT MUCH TO DO
        MOVE    A,OVFLG
        TLNE    A,FILOPN        ;IS A FILE OPEN?
        JRST    FILDON          ;YES, FINE
        MOVEI   A,17            ;NO, GET THE HIGHEST AVAILABLE CHANNEL
        CAMG    A,JOBHCU        ;IF HIGHER THAN HIGHEST CURRENT ONE
FNDFIL: SKIPN   JOBJDA(A)       ;OR NOT ALREADY BUSY
        JRST    FILOK           ;THEN OK TO USE
        SOJGE   A,FNDFIL
        MOVEI   [ASCIZ/NO CHANNELS AVAILABLE/]
ERR:    OUTSTR  [ASCIZ/
/]
        OUTSTR  @
        OUTSTR  [ASCIZ/ - CHAIN/]
        EXIT

FILOK:  DPB     A,[POINT 4,OPN,12]
        DPB     A,[POINT 4,LOOK,12]
        DPB     A,[POINT 4,SETI,12]
        DPB     A,[POINT 4,READ,12]
        DPB     A,[POINT 4,CLS,12]
        SKIPE   [DYNDV.]
        SKIPE   CHNFX.          ;DON'T TELL FORSE IF NOT FORSE
        JRST    GTPPN           ;OR IF JUST INITIALIZING
        SKIPL   OVFLG           ;SKIP IF NOT KEEPING FILE OPEN
        SETOM   DYNDV.(A)       ;OK, KEEP FORSE FROM GRABBING CHANNEL

GTPPN:  HRROI   A,JBTFPN
        GETTAB  A,              ;GET PPN PROGRAM CAME FROM
        MOVEI   A,0
        MOVEM   A,CHNFIL+3      ;PUT IN LOOKUP BLOCK
        MOVEI   [ASCIZ/CAN'T OPEN FILE/]
OPN:    INIT    ZAP,16
        SIXBIT  /DSK/
        0
        JRST    ERR
LOOK:   LOOKUP  ZAP,CHNFIL
        JRST    ERR
FILDON: MOVEI   [ASCIZ/CAN'T GET CORE/]
        HLRZ    A,SEGLOC(SEG)
        MOVN    A,A
        ADD     A,SEGLOC(SEG)   ;A=NEW PROGRAM TOP
        MOVEI   A,(A)
IFN MAC,<
        SKIPE   [BUFHD.]
>
        SKIPE   CHNFX.
        JRST    ADJCOR          ;NO BUFFER STUFF IF INITIALIZING

;MOVE I/O BUFFERS TO THE TOP OF THE NEW SEGMENT AND FIX THEM UP.
;THE BUFFERS ARE MOVED DOWN INTO A BLOCK, THE LOWEST BUFFERS BEING
;MOVED FIRST.  IF THE NEW SEGMENT IS SHORTER THAN THE OLD ONE, THIS
;BLOCK BEGINS AT THE TOP OF THE NEW SEGMENT.  IF THE NEW SEGMENT IS
;LONGER, THE BLOCK BEGINS AT THE TOP OF THE OLD SEGMENT AND IS THEN
;MOVED UP TO THE TOP OF THE NEW SEGMENT AFTER THE BUFFERS HAVE
;BEEN COMPACTED.  THIS IS DONE TO AVOID PROBLEMS WITH BUFFERS
;GETTING CLOBBERED AS THEY ARE SHUFFLED AROUND.
;THIS CODE ASSUMES THAT ALL BUFFER HEADERS ARE IN THE BUFHD. ARRAY AND
;THAT THE BUFFERS WITHIN A SINGLE RING ARE CONTIGUOUS.
;IT IS ALSO ASSUMED THAT THE FIRST WORD OF INACTIVE HEADERS IS ZERO
;AND THAT BIT 17 OF THE BYTE POINTER IN A HEADER IS ZERO (IT IS USED
;TEMPORARILY AS A FLAG).

        CAMG    A,CURTOP
        SKIPA   B,A             ;B=TOP (AND RIGHT NOW BOTTOM) OF BUFFER BLOCK-1
        MOVE    B,CURTOP        ;(LOWER OF CURRENT AND NEW TOPS)
        MOVNM   B,BUFDIS
        ADDM    A,BUFDIS        ;(FUTURE BUFFER BLOCK LOC)-(CURRENT BLOCK LOC)
ADJLP:  HRREI   C,-1
        MOVSI   D,-40
ADJCK:  HRRZ    E,BUFHD.(D)     ;GET BUFFER PTR FOR THIS HEADER
        MOVE    F,BUFHD.+1(D)
        TLNN    F,1             ;IF NOT ALREADY DONE
        CAMG    E,CURTOP        ;AND IN DYNAMIC AREA, MIGHT BE LOWEST BUFFER
        JRST    ADJNF           ;FAILED ONE TEST
        JUMPL   C,.+2           ;ALSO MUST BE FIRST ONE FOUND
        CAIGE   E,@BUFHD.(C)    ;OR LOWER THAN CURRENT LOWEST ONE
        HRRZ    C,D             ;YUP, C=LOWEST BUFFER SO FAR
ADJNF:  ADDI    D,2
        AOBJN   D,ADJCK         ;CHECK NEXT HEADER
        JUMPL   C,ADJFIX        ;JUMP IF NONE FOUND (ALL DONE)
        HRRZ    D,BUFHD.(C)     ;D WILL BE LOWEST BUFFER IN THIS RING
        HRRZ    E,D             ;E WILL BE HIGHEST
        HRRZ    F,E
ADJBFS: HRRZ    F,(F)           ;POINT F TO NEXT BUFFER IN RING
        CAMLE   D,F
        MOVE    D,F             ;D=LOWER OF TWO
        CAMGE   E,F
        MOVE    E,F             ;E=HIGHER OF TWO
        CAIE    F,@BUFHD.(C)
        JRST    ADJBFS          ;RUN THROUGH WHOLE RING
        MOVE    F,B
        ADD     F,BUFDIS
        SUB     F,D
        MOVEI   F,2(F)          ;(FUTURE RING LOCATION)-(CURRENT LOCATION)
        MOVEI   G,(C)
        IDIVI   G,6             ;CHANNEL #
        MOVSI   G,(G)           ;RIGHT PLACE FOR MOVBUF
        CAIG    H,2
        TLOA    G,20            ;INPUT
        TLO     G,40            ;OUTPUT
        HRRI    G,(F)
        MOVBUF  G,              ;TELL THE MONITOR ABOUT THE MOVE
        MOVEI   G,(D)           ;POINTER INTO RING
ADJBFL: MOVE    H,(G)
        ADDI    H,(F)           ;ADJUST EACH BUFFER IN RING
        HRRM    H,(G)
        SUBI    H,(F)
        MOVEI   G,(H)
        CAIE    G,(D)
        JRST    ADJBFL
        MOVE    G,BUFHD.(C)
        ADDI    G,(F)           ;ADJUST POINTERS IN HEADER
        HRRM    G,BUFHD.(C)
        MOVE    G,BUFHD.+1(C)
        ADDI    G,(F)
        HRRM    G,BUFHD.+1(C)
        MOVSI   G,1
        ORM     G,BUFHD.+1(C)   ;MARK THIS RING AS ALL DONE
        LDB     G,[POINT 17,(E),17]     ;SIZE FIELD FROM HIGHEST BUFFER
        ADD     G,B
        ADD     G,E
        SUB     G,D
        MOVEI   H,2(G)          ;HIGHEST LOC TO BE BLTTED INTO
        CAMG    H,JOBREL
        JRST    .+3
        CORE    H,              ;EXPAND CORE IF NECESSARY
        JRST    ERR
        HRLZI   H,-1(D)
        HRRI    H,1(B)          ;SET UP BLT WORD
        CAIE    D,2(B)          ;SKIP IF ALREADY IN RIGHT PLACE
        BLT     H,2(G)
        MOVEI   B,2(G)          ;NEW TOP
        JRST    ADJLP
ADJFIX: MOVSI   C,-40
        MOVSI   D,1
        ANDCAM  D,BUFHD.+1(C)   ;CLEAN UP HEADERS
        ADDI    C,2
        AOBJN   C,.-2
        MOVE    C,B
        ADD     C,BUFDIS        ;DESIRED TOP OF CORE
        HRRZM   C,JOBFF         ;SAVE AS JOBFF (REALLY ONE TOO SMALL)
        MOVEI   D,(C)
        CORE    D,
        JRST    ERR
        SKIPN   BUFDIS
        JRST    ADJDON          ;DONE IF BUFFERS IN RIGHT PLACE
ADJMOV: MOVE    D,(B)
        MOVEM   D,(C)           ;NO, MOVE THEM UP
        SUBI    C,1
        CAILE   C,(A)
        SOJA    B,ADJMOV
        JRST    ADJDON
ADJCOR: HRRZM   A,JOBFF
        MOVEI   B,(A)
        CORE    B,
        JRST    ERR
ADJDON: MOVEM   A,CURTOP        ;SAVE TOP OF CURRENT SEGMENT
        AOS     JOBFF           ;CORRECT JOBFF

;MARK THIS SEGMENT AS BEING IN CORE AND GET SET TO READ IT IN

MRKSEG: MOVSI   B,NEWIN
        ORB     B,SEGBLK(SEG)   ;SET SEGMENT NEWLY-IN-CORE
        TLNN    B,INCOR
        HRRZ    A,SEGLOC(SEG)   ;AFTER THIS LOOP A WILL BE THE HIGHEST UNCHANGED LOCATION
        HRRZ    SEG,SEGLNK(SEG)
        JUMPN   SEG,MRKSEG      ;AND ALL OF ITS BACKWARD PATH
        MOVEM   A,OVLBEG        ;SAVE POINTER TO CLOBBERED AREA -1
        MOVEI   SEG,TRETAB
        HRRZ    A,SEGCNT        ;NOW RUN THROUGH TABLE SEQUENTIALLY
CKSEG:  HLRZ    B,SEGBLK(SEG)   ;GET FLAGS/BLOCK FOR SEGMENT
        TRZN    B,NEWIN         ;WILL IT BE IN CORE?
        JRST    NOTIN           ;NOPE, IGNORE IT
        TRZE    B,INCOR         ;YES, IS IT ALREADY IN CORE?
        JRST    INNOW           ;YES, FINE
        LDB     C,[POINT 12,B,35]       ;AVOID ANY LEFTOVER FLAGS
SETI:   USETI   ZAP,(C)         ;NOPE, POSITION FILE TO READ IT
        HLRE    C,SEGLOC(SEG)
        MOVN    C,C
        ADD     C,SEGLOC(SEG)
        SUB     C,SEGCMP(SEG)
        MOVN    D,SEGCMP(SEG)   ;MAKE IOWD FOR READING COMPRESSED SEG
        HRL     C,D             ;AT THE TOP OF ITS CORE AREA
        MOVEI   D,0
        MOVEI   [ASCIZ/INPUT ERROR/]
READ:   IN      ZAP,C           ;READ THE SEGMENT
        JRST    EXPAND
        JRST    ERR

;EXPAND THE ZERO-COMPRESSED SEGMENT
;SINCE SEGMENT WAS READ IN AT THE TOP OF ITS CORE AREA, THIS ALWAYS MOVES DOWN

EXPAND: HRRZ    D,SEGCMP(SEG)
        ADDI    D,(C)           ;D=HIGHEST LOC OF SEGMENT
        MOVEI   C,1(C)          ;C=LOC OF CURRENT IOWD
        MOVE    E,SEGLOC(SEG)
        MOVEI   E,1(E)          ;E=CURRENT LOC TO BE MOVED INTO
XPNLP:  MOVE    F,(C)           ;F=CURRENT IOWD
        CAIG    E,(F)
        SETZM   (E)             ;ZERO FIRST WORD IF ANY NEED TO BE ZEROED
        HRLZI   (E)
        HRRI    1(E)
        CAIGE   E,(F)
        BLT     (F)             ;ZERO REST OF BLOCK IF MORE THAN ONE WORD
        HLRE    G,F
        SUBM    F,G             ;G=HIGHEST LOC TO MOVE BLOCK INTO
        HRLZI   1(C)            ;FIRST LOC OF BLOCK TO BE MOVED
        HRRI    1(F)            ;LOC TO MOVE IT TO
        BLT     (G)             ;MOVE THE BLOCK TO ITS RIGHTFUL PLACE
        MOVEI   E,1(G)          ;SET E ONE PAST END OF BLOCK
        HLRE    F,F
        SUB     C,F             ;C=1 BELOW NEXT IOWD
        CAIGE   C,(D)           ;CHECK IF AT TOP
        AOJA    C,XPNLP         ;IF NOT DONE, CORRECT C AND CONTINUE

INNOW:  HRRZ    C,SEGLOC(SEG)
        MOVE    C,1(C)          ;GET SYMBOL PTR FOR SEG (FIRST WORD)
        CAIE    SEG,TRETAB      ;ALREADY SET UP IF ROOT
        TRNN    B,MAINPG        ;CHECK FOR MAIN PROGRAM IN SEGMENT
        JRST    NTMAIN
        MOVE    D,-2(C)         ;YUP, SET UP JOBSA, JOBREN, JOB41
        HLRZM   D,JOBSA
        HRRZM   D,JOBREN
        MOVE    D,-1(C)
        MOVEM   D,JOB41
        MOVE    D,JOBFF
        HRLM    D,JOBSA         ;SET UP RIGHT FREE LOCATION
NTMAIN: SKIPN   JOBDDT
        JRST    SYMDON          ;DONE IF NO SYMBOLS
        SETZM   1(C)            ;ZAP ITS LINK IN CASE LAST ONE
        HLRE    D,C
        SUB     C,D             ;GET PTR TO TOP
        HRRZ    D,SEGLNK(SEG)   ;GET BACK LINK
        JUMPE   D,SYMDON        ;JUMP IF NONE
        HRRZ    D,SEGLOC(D)
        MOVE    D,1(D)          ;GET THAT SEGMENT'S SYMBOL PTR
        HRRZM   C,1(D)          ;AND SET THAT SEGMENT'S LINK TO THE NEW ONE
SYMDON: TROA    B,INCOR         ;FINALLY, SHOW SEGMENT IS IN CORE
NOTIN:  TRZ     B,INCOR
        HRLM    B,SEGBLK(SEG)   ;SAVE FLAGS/BLOCK
        ADDI    SEG,ENTSIZ
        SOJGE   A,CKSEG         ;GO DO NEXT SEG
        MOVE    A,OVLBEG
        MOVE    [POPJ P,]
        PUSHJ   P,DDTCH.        ;TELL DDT WHAT'S GOING ON
        PUSHJ   P,DEBCH.        ;DITTO FOR FDEBUG
        SKIPE   CHNFX.
        JRST    FIXDON          ;ALMOST DONE IF JUST INITIALIZING
        SKIPL   A,OVFLG         ;DONE, SHOULD WE RELEASE CHANNEL?
        TLOA    A,FILOPN        ;NO, SET FILE-OPEN AND SKIP
CLS:    RELEASE ZAP,            ;YES, KILL IT
        MOVEM   A,OVFLG         ;SAVE FLAGS IN CASE CHANGED
FINISH: SKIPE   A,USRLOC
        JRST    NOTCHN
        MOVSI   A,FILOPN        ;MAIN PROGRAM OVERLAY
        ANDCAM  A,OVFLG         ;ZAP FILE-OPEN (MAIN PROGRAM PROBABLY DOES A RESET)
        XCT     CLS
        MOVEI   [ASCIZ/NO MAIN PROGRAM/]
        SKIPN   A,JOBSA
        JRST    ERR
        JRST    (A)

FIXDON: SETZM   CHNFX.          ;TURN FLAG OFF
        RESET                   ;CLOSE ALL DEVICES
        XCT     CHNFX.+1        ;START PROGRAM OR EXIT (INST. FROM LOADER IN 16)
        JRST    .-1             ;IN CASE IT WAS EXIT

NOTCHN:
IFN MAC,<
        AOJN    A,JMPSIM        ;JUMP IF AUTOMATIC OVERLAY
        MOVSI   SEG,SAVE
        BLT     SEG,SEG         ;MACRO-STYLE MANUAL CALL, RESTORE REGISTERS
        POPJ    P,              ;AND RETURN
>
JMPSIM: MOVEI   [ASCIZ/BAD CALL/]
        MOVE    A,USRLOC
        HRRZ    A,-1(A)         ;GET ADDRESS OF REPLACED INSTRUCTION
        CAMLE   A,JOBREL        ;CHECK FOR LEGAL
        JRST    ERR
        HRRZ    B,(A)           ;GET JUMP ADDRESS
        HRRM    B,USRLOC        ;NOW USRLOC= FLAGS,,E FROM INSTRUCTION
        LDB     B,[POINT 4,(A),12]      ;GET AC FIELD
        LDB     C,[POINT 9,(A),8]       ;GET OPCODE
        CAIN    C,OP(JSA)
        JRST    IJSA
        CAIN    C,OP(JSR)
        JRST    IJSR
        LSH     B,5
        MOVEI   A,<(PUSH @)>(B)
        CAIN    C,OP(PUSHJ)
        JRST    IJMP
        MOVEI   A,<(MOVE @)>(B)
        CAIN    C,OP(JSP)
        JRST    IJMP
        MOVEI   A,(JFCL)
        CAIE    C,OP(JRST)
        JRST    ERR
IJMP:   HRLM    A,IJMP1         ;SAVE THEM
        MOVSI   17,SAVEAC
        BLT     17,17           ;RESTORE USER'S ACS
        EXCH    16,SAVEAC+16
        MOVE    17,SAVEAC+17
IJMP1:  ZAP     @UUOH.          ;DO SOMETHING WITH OLD PC
        JRSTF   @USRLOC         ;DO THE JUMP

IJSA:   MOVSI   A,-3
        DPB     B,[POINT 4,IJSA1(A),12] ;SAVE AC IN THREE PLACES
        AOBJN   A,.-1
        MOVSI   17,SAVEAC
        BLT     17,15           ;RESTORE USER'S ACS
        EXCH    16,SAVEAC+16
        MOVE    17,SAVEAC+17
IJSA1:  MOVEM   ZAP,@USRLOC     ;PLACE (AC) IN LOCATION E
        HRLZ    ZAP,USRLOC      ;PLACE E IN AC LEFT
        HRR     ZAP,UUOH.       ;PLACE PC IN AC RIGHT
IJSA2:  AOS     USRLOC
        JRSTF   @USRLOC         ;JUMP TO E+1

IJSR:   MOVE    A,UUOH.
        MOVEM   A,@USRLOC       ;PLACE FLAGS,,PC IN LOCATION E
        MOVSI   17,SAVEAC
        BLT     17,15           ;RESTORE USER'S ACS
        EXCH    16,SAVEAC+16
        MOVE    17,SAVEAC+17
        JRST    IJSA2           ;JUMP TO E+1

IFN MAC,<
SAVE:   BLOCK   SEG+1
>
USRLOC: BLOCK   1               ;SAVE FLAGS,,E HERE
OVLBEG: BLOCK   1               ;POINTER TO HIGHEST UNCHANGED LOC
BUFDIS: BLOCK   1               ;DISPLACEMENT OF BUFFER BLOCK FROM ITS EVENTUAL POSITION
CURTOP: BLOCK   1               ;HIGHEST LOC OF CURRENT TOP OVERLAY SEGMENT

        END
   