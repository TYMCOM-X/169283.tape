NEWUPD - SIMPL VERS 2.00 12-JUL 1973 1:52



     1	00010	!  IOCS DEFS OF INTEREST TO USER
     2	00020	
     3	00030	!  FILE DESCRIPTORS PASSED TO %OPEN
     4	00040	
     5	00050	!MAINTAIN ORDER OF FILE TYPES (SEE %OPEN1)
     6	00060	
     7	00070	DEF INPUT AS 0
     8	00080	DEF UPDATE AS 1
     9	00090	DEF OUTPUT AS 2
    10	00100	DEF OUTMSG AS 3
    11	00110	
    12	00120	!FILE TYPE MODIFIERS
    13	00130	
    14	00140	DEF NEW AS OCT 100
    15	00150	DEF OLD AS OCT 200
    16	00160	
    17	00170	!FILE MODES
    18	00180	
    19	00190	DEF SEQUEN AS 0
    20	00200	DEF DIRECT AS OCT 10
    21	00210	
    22	00220	!FILE ORGANIZATIONS
    23	00230	
    24	00240	DEF WORD AS 0
    25	00250	DEF CHARACTER AS OCT 20
    26	00260	DEF PACK AS OCT 40
    27	00270	
    28	00280	!  FILE NUMBERS  (FNMIN IS MIN CHANNEL WHICH WILL BE USED)
    29	00290	
    30	00300	DEF FNMIN AS 1            !MIN AND MAX FILE NUMBERS
    31	00310	DEF FNMAX AS 15           !AVAILABLE, EXCLUDING TEL
    32	00320	DEF TEL AS (FNMIN-1)        !FILE NO. INDICATING TERMINAL 
    33	00330	
    34	00340	!  ERROR NUMBERS (ERRNUM VALUES)
    35	00350	
    36	00360	DEF TMFERR AS 1     !TOO MANY FILES OPEN (OPEN)
    37	00370	DEF FMDERR AS 2     !BAD FILE MODE OR TYPE FOR ATTEMPTED OPERATION
    38	00380	                    !(OPEN SEQUEN UPDATE, SETCP OR ERASE SEQUEN,
    39	00390	                    !WRITE OR ERASE INPUT, READ SEQUEN OUTPUT)
    40	00400	DEF IFDERR AS 3     !ILLEGAL FILE IDENTIFIER (SETFID, OPEN, DELETE, RENAME)
    41	00410	DEF CNFERR AS 4     !NEW/OLD FILE MESSAGE NOT CONFIRMED (OPEN OUTMSG)
    42	00420	                    !OR TYPE MODIFIER CONFLICT - FILE NOT NEW/OLD (OPEN OUTPUT OR UPDATE)
    43	00430	
    44	00440	!ORDER OF FOLLOWING 5 NOS. SHALL BE MAINTAINED. (ALL BUT LAST MAY
    45	00450	!OCCUR DURING OPEN, DELETE, OR RENAME)
    46	00460	
    47	00470	DEF FNFERR AS 5     !FILE NOT FOUND
    48	00480	DEF IUSERR AS 6     !INVALID USER NAME (BAD PPN)
    49	00490	DEF PRTERR AS 7     !PROTECTION VIOLATION ATTEMPT
    50	00500	DEF FBSERR AS 8     !FILE BUSY
    51	00510	DEF AEFERR AS 9     !NEW NAME BELONGS TO ALREADY EXISTING FILE  (RENAME)
    52	00520	
    53	00530	DEF EOFERR AS 10    !END OF FILE (R, RB, GETLINE)
    54	00540	DEF LNGERR AS 11    !LINE TOO LONG (GETLINE FROM FILE)
    55	00550	DEF TELERR AS 12    !ILLEGAL OPERATION ON TEL (OPEN, DELETE, RENAME,
    56	00560	                    !CP, SIZE)
    57	00570	DEF ARGERR AS 13    !BAD ARGUMENT VALUE - SUCH AS:
    58	00580	                    !NEGATIVE CURSOR POSITION (SETCP, ERASE),
    59	00590	                    !NEG. COUNT (RB, WB)
    60	00600	DEF CORERR AS 14    !OUT OF CORE (OPEN, BLOCK, RELEASE)
    61	00610	
    62	00620	FIND CFN, %SETCFN, %EXU
    63	00630	FIND %IOCS,%OPEN,%SETFID,%WFID,%CLOSE,%BUF.DUMP
    64	00640	FIND %CLOSE.ALL, %PLNCHK, %PLNW, %SET.TAB
    65	00650	FIND %SET.TERM, %SET.PRMPT, %TAB.OFF, %R, %GETLINE
    66	00660	FIND %W, %WX, %ERASE, %SETCP, %CP, %SIZE
    67	00670	FIND %WB, %RB
    68	00680	FIND %BLOCK, %RELEASE
    69	00690	FIND %DELETE,%RENAME
    70	00700	FIND %CLIBUF, %CLOBUF, %TTYLEN, %GET, %PUT, %PUTX, %PUTC
    71	00710	FIND %PRINT, %PRINTC, %MSG, %SETRWE
    72	00720	FIND %OFFALT, %ONALT, %ONALT.C, ALTLOC, ERRNUM
    73	00730	
    74	00740	FIND FIDP()
    75	00750	DEF LOCWPF AS 4
    76	00760	DEF MAXARG AS 27
    77	00770	DEF MINARG AS 5
    78	00780	DEF WPF AS (LOCWPF+1+MINARG)
    79	00790	DEF MAXWPF AS (LOCWPF+1+MAXARG)
    80	00800	! EXTENDED ARGUMENT BLOCK:
    81	00810	DEF ARGCNT(TBL) AS TBL(LOCWPF)
    82	00820	DEF PPNARG(TBL) AS TBL(LOCWPF+1)
    83	00830	DEF NAMARG(TBL) AS TBL(LOCWPF+2)
    84	00840	DEF EXTARG(TBL) AS TBL(LOCWPF+3)
    85	00850	DEF PRVARG(TBL) AS TBL(LOCWPF+4)
    86	00860	DEF FILSIZ(TBL) AS TBL(LOCWPF+5)
    87	00870	DEF EXTQ(TBL) AS TBL(0)
    88	00880	DEF USRNAM(TBL) AS TBL(1)
    89	00890	DEF DEVNAM(TBL) AS TBL(3)
    90	00900	
    91	00910	!  GETLINE 
    92	00920	
    93	00930	DEF LLEN AS 256                !MAX. LINE LENGTH
    94	00940	DEF GLBCMX AS (LLEN+1)         !MAX. CHAR CAPACITY
    95	00950	DEF CPW AS CHARS.PER.WORD
    96	00960	DEF GLBSZ AS (GLBCMX+CPW-1)/CPW   !SIZE IN WORDS
    97	00970	FIND FREE(0:GLBSZ-1)         !GETLINE INTERNAL BUFFER (AVAILABLE
    98	00980	                             !BETWEEN GETLINE CALLS)
    99	00990	FIND IMAGE(0:GLBSZ-1)        !GETLINE IMAGE LINE BUFFER
   100	01000	FIND GLCNT                   !GETLINE CHAR COUNT
   101	BASE 0
   102	GLOBAL %LUDUPD
   103	
   104	%LUDUPD
   105	
   106	
   107	FIND %BYPT
   108	FIND %INITTTY, %GETNUM, %GETTOKEN, %NUMOUT, %OCTOUT, %GETOCT, %QUERY
   109	FIND %IMGIO, %HASH, %MAKE.SIXBIT, %CHR.OUT
   110	FIND TOKEN(0)
   111	
   112	GLOBAL CHK.ERR:, IO.ADR, IOTAB(WPF)
   113	
   114	GLOBAL INDEX, OLD.CODE
   115	GLOBAL OP, CHR	!VARIABLES FOR IMAGE I/O
   116	GLOBAL D.BLK(128), D.INDEX, D.LOC, CH.DUL,  DUL.NAME, D.OV.BLK.N
   117	GLOBAL SIZE.DUL
   118	GLOBAL L.BLK(128), L.INDEX, LOC.HASH, CH.LUD, LUD.NAME, L.OV.BLK.N
   119	GLOBAL L.SAVE(128), SIZE.LUD
   120	GLOBAL SITE.31.NAME, SITE, CODE
   121	GLOBAL CH.OUT, P, NUMBER, P1, TMP, USER(3), FOUND
   122	GLOBAL STRINF(3), NAME.HASH, OLD.NAME(2), PRIV, DIST, RUB
   123	GLOBAL L.OLD.INDEX, LOC.OLD.HASH, O.ENT.SIZE, OLD.HASH
   124	GLOBAL SAV.EXT, UFD, LST.END:, FROMTTY:
   125	
   126	GLOBAL %ERROR, %INITUPD, %LOKUP.LUD, %LUD.SEQ, %LOKUP.DUL
   127	GLOBAL %LUD.LOOK, %DUL.LOOK, %DEL.FILES, %CALL.GETTAB
   128	GLOBAL %FIND.STR, %FIND.L.ROOM, %FIND.D.ROOM, %MAKE.L.OVER
   129	GLOBAL %MAKE.D.OVER, %CHK.IO.ERR, %GET.STR.INF, %SEND.O.WD
   130	
   131	
   132	
   133	!COMMANDS
   134	DEF DEL.USR AS 1
   135	DEF ADD.USR AS 2
   136	DEF CH.NAME AS 3
   137	DEF CH.PRIV AS 4
   138	DEF CH.STR AS 7
   139	DEF CH.RUB AS 9
   140	DEF UP.OTH.LUD AS 12
   141	DEF LST.PRJ AS 16
   142	DEF REVERSE AS 17
   143	DEF LST.USR AS 18
   144	DEF CH.DIST AS 22
   145	
   146	!FLAGS
   147	GLOBAL N.OFFICIAL	!=1 IF CHANGING NON-OFFICIAL LUD/DUL
   148	GLOBAL TTYF	!=1 IF RUN FROM TTY; =0 IF FROM CIRCUITS
   149	   DEF CIR AS 0
   150	
   151	!IMAGE MODE OPERATIONS
   152	DEF SET.UP.TTY AS 1
   153	DEF SEND AS 2
   154	DEF RECEIVE AS 3
   155	DEF CIR.EOF AS OCT 377
   156	
   157	!WORDS IN LUD/DUL ENTRIES
   158	DEF WD.PPN AS 0
   159	DEF WD.S.NAME AS 0
   160	DEF WD.DIST AS 1
   161	DEF WD.NAME AS 1	!DUL ENTRY ONLY
   162	DEF WD.INIT AS 2
   163	DEF WD.SIZE AS 2
   164	DEF WD.RUB AS 2
   165	DEF WD.PRIV AS 3
   166	DEF WD.HASH AS 4
   167	DEF WD.STRN AS 5
   168	DEF WD.QIN AS 6
   169	DEF WD.QOUT AS 7
   170	
   171	
   172	
   173	GLOBAL TABLE ERRTAB(1:17)['ENTRY COMPLETED','NAME ALLREADY THERE',&
   174	'NAME NOT FOUND','STR NOT FOUND','STR ALLREADY THERE','MISC',&
   175	'BAD SITE','MISC','MISC','BILLING FILE ERROR','MISC','FILE BUSY',&
   176	'MISC','FILE DELETION ERROR','USER STILL IN DUL','BAD CODE',&
   177	'SIMPL ERROR']
   178	
   179	
   180	
   181	DEF CHG.ENT(A) AS [L.BLK.UP; A; LUD.CL]
   182	DEF C.IMGIO(A,B) AS [OP _ A; CHR _ B; IMGIO]
   183	DEF CHECK.OK AS [IF TTYF # CIR THEN [IF QUERY('ALL ENTRIES CORRECT')&
   184		= NO THEN GO GETCMD]]
   185	DEF CIR.WD.OUT(A,B) AS REPEAT B C.IMGIO(SEND,NCHV A)
   186	DEF CR AS IF TTYF # CIR THEN MSG('$')
   187	DEF D.BLK.UP AS [LOKUP.DUL(UPDATE); SETCP(CH.DUL,D.LOC);&
   188		RB(CH.DUL,SIZE.BLK,D.BLK); SETCP(CH.DUL,FIXCP(D.LOC))]
   189	DEF DIST.BITS AS BYT(LUD(WD.DIST),8,0)
   190	DEF DUL(A) AS D.BLK(D.INDEX+A)
   191	DEF DUL.OVER AS [D.OV.BLK.N_GET.D.OV.BLK; LOKUP.DUL(READ);SETCP(CH.DUL,FIXCP(D.OV.BLK.N));&
   192		DUL.READ; CLOSE(CH.DUL)]
   193	DEF DUL.READ AS [RB(CH.DUL,SIZE.BLK,D.BLK); D.INDEX _ 0]
   194	DEF DUL.WRIT AS [WB(CH.DUL,SIZE.BLK,D.BLK); CLOSE(CH.DUL)]
   195	DEF ERR.OUT(A) AS [IF TTYF = CIR THEN C.IMGIO(SEND,A) ELSE &
   196		[MSG(ERRTAB(A)); CR]]
   197	DEF FIND.NAME AS [GET.WD('USER NAME: ',USER,12);&
   198	   IF FOUND _ LUD.LOOK = THERE THEN MOVE SIZE.LUD.ENT FROM @LUD(WD.PPN) TO L.SAVE]
   199	DEF FIXCP(A) AS (A-1)*SIZE.BLK
   200	DEF G.CIR.NUM AS [P1 _ BYPT(NUMBER,8,24); NUMBER _ 0;&
   201	   REPEAT 3 C.IMGIO(RECEIVE,NCHV P1)]
   202	DEF G.CIR.WD(A,B) AS [P1 _ CHPT(A,-1); REPEAT B IMGIO(RECEIVE,P1)]
   203	DEF GET.CODE AS [GETNUM.INF('$*'); IF CODE_NUMBER>MAX.CMD OR &
   204		CODE < MIN.CMD THEN ERROR(BAD.CODE)]
   205	DEF GET.DIST AS [GET.NUM.INF('DISTRICT: '); DIST _ NUMBER]
   206	DEF GET.D.OV.BLK AS HW(@DUL(WD.PPN),1)
   207	DEF GET.L.OV.BLK AS HW(@LUD(WD.PPN),1)
   208	DEF GET.NEW AS IF TTYF # CIR THEN MSG('NEW ')
   209	DEF GET.NUM.INF(A) AS [IF TTYF # CIR THEN [MSG(A); GETNUM] &
   210	   ELSE G.CIR.NUM]
   211	DEF GET.O.NUM(A) AS [IF TTYF # CIR THEN [MSG(A); GETOCT] &
   212	   ELSE G.CIR.NUM]
   213	DEF GET.P.BITS AS [GET.O.NUM('PRIV. BITS: '); PRIV _ NUMBER]
   214	DEF GET.WD(A,B,C) AS [IF TTYF # CIR THEN [MSG(A); GETTOKEN(2);&
   215	   MAKE.SIXBIT(TOKEN,B,C)] ELSE G.CIR.WD(B,C)]
   216	DEF HIGH.UFD.INDEX AS 125
   217	DEF INIT.BIT AS BYT(LUD(WD.INIT),1,8)
   218	DEF IN.VAL.LUD AS CHG.ENT(LUD(WD.HASH) _ 0)
   219	DEF L.BLK.UP AS [LOKUP.LUD(UPDATE); SETCP(CH.LUD,FIXCP(LOC.HASH));&
   220	   RB(CH.LUD,SIZE.BLK,L.BLK); SETCP(CH.LUD,FIXCP(LOC.HASH))]
   221	DEF L.OV.BLK AS HW(@LUD(WD.PPN),1)
   222	DEF LUD(A) AS L.BLK(L.INDEX+A)
   223	DEF LUD.CL AS [LUD.WRIT; CLOSE(CH.LUD)]
   224	DEF LUD.OVER AS [L.OV.BLK.N _ GET.L.OV.BLK; LOKUP.LUD(READ);&
   225	   SETCP(CH.LUD,FIXCP(L.OV.BLK.N)); LUD.READ; CLOSE(CH.LUD)]
   226	DEF LUD.READ AS [RB(CH.LUD,SIZE.BLK,L.BLK); L.INDEX _ 0]
   227	DEF LUD.WRIT AS WB(CH.LUD,SIZE.BLK,L.BLK)
   228	DEF MAKE.CHG(A) AS [CHECK.OK; CHG.ENT(A)]
   229	DEF MAKE.VALID AS CHG.ENT(LUD(HASH) _ NAME.HASH)
   230	DEF MIN.CMD AS 1
   231	DEF MIN.SITE AS 31
   232	DEF MAX.CMD AS 26
   233	DEF MAX.SITE AS 34
   234	DEF N.DUL.BLKS AS SIZE(CH.DUL)/SIZE.BLK
   235	DEF NEW.ENT.SIZE AS 10
   236	DEF N.LUD.BLKS AS SIZE(CH.LUD)/SIZE.BLK
   237	DEF NO AS 0
   238	DEF NOT.THERE AS 0
   239	DEF OV.BIT AS OCT 400000
   240	DEF OV.L.BIT AS HW(@LUD(WD.PPN),0)
   241	DEF OV.D.BIT AS HW(@DUL(WD.PPN),0)
   242	DEF READ AS 0
   243	DEF RUB.BIT AS BYT(LUD(WD.RUB),1,33)
   244	DEF S.CIR.NUM(A) AS [P1 _ BYPT(A,8,24); REPEAT 3 C.IMGIO(SEND,NCHV P1)]
   245	DEF SEND.CIR(A) AS IF TTYF = CIR THEN C.IMGIO(SEND,A)
   246	DEF SEND.NUM(A,B) AS [IF TTYF # CIR THEN [MSG(A); NUMOUT(B)]&
   247	   ELSE S.CIR.NUM(B)]
   248	DEF SEND.O.NUM(A,B) AS [IF TTYF # CIR THEN [MSG(A); OCTOUT(B)]&
   249	   ELSE S.CIR.NUM(B)]
   250	DEF SEND.WD(A,B,C) AS [P1 _ B; IF TTYF # CIR THEN [MSG(A);&
   251	   REPEAT C CHR.OUT(NCHV P1 + OCT 40)] ELSE CIR.WD.OUT(P1,C)]
   252	DEF SET.SITE AS [HW(@EXTARG(IOTAB),0) _ SITE.31.NAME;&
   253	   SITBYT _ SITBYT + SITE - 31]
   254	DEF SITBYT AS BYT(EXTARG(IOTAB),6,24)
   255	DEF SIZE.BLK AS 128
   256	DEF SIZE.DUL.ENT AS 3
   257	DEF SIZE.INIT.INF AS 3
   258	DEF SIZE.LUD.ENT AS BYT(LUD(WD.SIZE),7,0)
   259	DEF SIZE.STR.INF AS 3
   260	DEF SIZE.UFD.ENT AS 5
   261	DEF THERE AS 1
   262	DEF UFD.READ AS [RB(CH.UFD,SIZE.BLK,UFD.BLK); INDEX _ 0]
   263	DEF UPDATE AS 1
   264	DEF VERSION AS 23
   265	DEF YES AS 1
   266	
   267	!ERRORS
   268	DEF OK AS 1
   269	DEF NAME.THERE AS 2
   270	DEF NAME.NT.THERE AS 3
   271	DEF STR.NT.THERE AS 4
   272	DEF STR.THERE AS 5
   273	DEF MISC AS 6
   274	DEF BAD.SITE AS 7
   275	DEF BILL.FILE.ERR AS 10
   276	DEF FILE.BUSY AS 12
   277	DEF DEL.ERR AS 14
   278	DEF IN.DUL AS 15
   279	DEF BAD.CODE AS 16
   280	DEF SIMPL.ERR AS 17
   281	
   282	START: GO FROMCIR	!START HERE IF FROM A CIRCUIT
   283	FROMTTY: TTYF _ 1; GO ST1	!HERE IF FROM TTY - SET TTYF
   284	\\->FROMTTY
   285	FROMCIR: TTYF _ CIR
   286	ST1: 	INITUPD
   287	
   288	GETCMD: GET.CODE
   289	SITE _ 0
   290	IF CODE # REVERSE THEN OLD.CODE _ CODE
   291	DISP: DO CODE OF MIN.CMD:MAX.CMD
   292	5: 6: 8: 10: 11: 13: 14: 15: 19: 20: 21: ERROR(BAD.CODE)
   293	
   294	UP.OTH.LUD: GET.NUM.INF('SITE: ')
   295	   IF MIN.SITE <= SITE _ NUMBER <= MAX.SITE THEN DO
   296		GET.CODE
   297		IF CODE = UP.OTH.LUD THEN ERROR(BAD.CODE)
   298		GO DISP
   299	   	INC N.OFFICIAL
   300	   END ELSE ERROR(BAD.SITE)
   301	
   302	LST.PRJ: IO.ADR _ LST.END; GET.O.NUM('GAN: ')
   303	   LOKUP.LUD(READ); LUD.READ
   304	   LOOP DO
   305	      LUD.SEQ
   306	      IF HW(@LUD(WD.PPN),0) = NUMBER THEN DO
   307		IF DUL.LOOK = THERE THEN SEND.WD($$,BYPT(@DUL(WD.NAME),6,0),12)
   308		END
   309	   END
   310	   LST.END: SEND.CIR(CIR.EOF)
   311	
   312	DEL.USR: FIND.NAME
   313	   IF FOUND = THERE THEN DO
   314	   IF LUD(WD.PPN) = OCT 1000001 OR LUD(WD.PPN) = OCT 1000004 THEN ERROR(13)
   315	   CHECK.OK
   316	   IF N.OFFICIAL = 0 THEN DEL.FILES
   317	   L.BLK.UP; LUD(WD.HASH) _ 0; LUD.CL
   318	  END ELSE ERROR(NAME.NT.THERE)
   319	
   320	CH.PRIV: FIND.NAME
   321	   IF FOUND = THERE THEN DO
   322	   GET.NEW
   323	   GET.P.BITS
   324	   MAKE.CHG(LUD(WD.PRIV) _ PRIV)
   325	  END ELSE ERROR(NAME.NT.THERE)
   326	
   327	CH.STR: FIND.NAME
   328	   IF FOUND = THERE THEN DO
   329	   GET.WD('STR: ',STRINF(WD.S.NAME),4)
   330	   IF FIND.STR = THERE THEN DO
   331		GET.NEW
   332		GET.STR.INF
   333		MAKE.CHG(MOVE SIZE.STR.INF FROM STRINF TO @LUD(INDEX))
   334	   END ELSE ERROR(STR.NT.THERE)
   335	  END ELSE ERROR(NAME.NT.THERE)
   336	
   337	ADD.USR: FIND.NAME
   338	   IF FOUND = NOT.THERE THEN DO
   339	   FIND.L.ROOM
   340	   GET.O.NUM('GAN: ')
   341	   HW(@L.SAVE(WD.PPN),0) _ NUMBER
   342	   GET.O.NUM('UUN: '); HW(@L.SAVE(WD.PPN),1) _ NUMBER
   343	   BYT(L.SAVE(WD.SIZE),7,0) _ NEW.ENT.SIZE
   344	   GET.NUM.INF('DISTRICT: '); BYT(L.SAVE(WD.DIST),8,0) _ NUMBER
   345	   GET.O.NUM('PRIV.BITS: '); L.SAVE(WD.PRIV) _ NUMBER
   346	   GET.STR.INF
   347	   MAKE.CHG(MOVE NEW.ENT.SIZE FROM L.SAVE TO @LUD(WD.PPN); &
   348		   MOVE SIZE.STR.INF FROM STRINF TO @LUD(WD.STRN))
   349	   IF DUL.LOOK = THERE THEN [IN.VAL.LUD; ERROR(IN.DUL)]
   350	   FIND.D.ROOM
   351	   D.BLK.UP
   352	   DUL(WD.PPN) _ LUD(WD.PPN)
   353	   MOVE 2 FROM USER TO @DUL(WD.NAME)
   354	   DUL.WRIT
   355	  END ELSE ERROR(NAME.THERE)
   356	
   357	CH.DIST: FIND.NAME
   358	   IF FOUND = THERE THEN DO
   359	   GET.NEW
   360	   GET.DIST
   361	   MAKE.CHG(DIST.BITS _ DIST)
   362	  END ELSE ERROR(NAME.NT.THERE)
   363	
   364	CH.RUB: FIND.NAME
   365	   IF FOUND = THERE THEN DO
   366	   IF TTYF # CIR THEN DO
   367		RUB _ QUERY('$SET RESTRICTED USE BIT')
   368	   END ELSE [C.IMGIO(RECEIVE,0); RUB _ CHR]
   369	   MAKE.CHG(RUB.BIT _ RUB)
   370	  END ELSE ERROR(NAME.NT.THERE)
   371	
   372	
   373	REVERSE: IF MIN.CMD<=OLD.CODE<=MAX.CMD THEN DO
   374		DO OLD.CODE OF MIN.CMD:MAX.CMD
   375	   DEL.USR: MAKE.VALID
   376	   ADD.USR: IN.VAL.LUD
   377		D.BLK.UP; DUL(WD.PPN) _ DUL(WD.NAME) _ DUL(WD.NAME+1) _ 0
   378		DUL.WRIT
   379	   CH.NAME: IN.VAL.LUD
   380	      LOC.HASH _ LOC.OLD.HASH
   381	      NAME.HASH _ OLD.HASH
   382	      L.INDEX _ L.OLD.INDEX
   383	      MAKE.VALID
   384	      D.BLK.UP
   385	      MOVE 2 FROM OLD.NAME TO @DUL(WD.NAME)
   386	      DUL.WRIT
   387	   CH.PRIV: CHG.ENT(LUD(PRIV) _ L.SAVE(PRIV))
   388	   CH.STR: CHG.ENT(MOVE SIZE.STR.INF FROM L.SAVE TO @LUD(INDEX))
   389	   CH.RUB: CHG.ENT(RUB.BIT _ BYT(L.SAVE(WD.RUB),1,33))
   390	   CH.DIST: CHG.ENT(DIST.BITS _ BYT(L.SAVE(WD.DIST),8,0))
   391	   LST.PRJ: REVERSE: LST.USR: UP.OTH.LUD: ERROR(BAD.CODE)
   392	   END
   393	  END ELSE ERROR(BAD.CODE)
   394	   
   395	CH.NAME: FIND.NAME
   396	   IF FOUND = THERE THEN DO
   397	   GET.WD('NEW USER NAME: ',USER(0),12)
   398	   MAKE.CHG(LUD(WD.HASH) _ 0)
   399	   O.ENT.SIZE _ SIZE.LUD.ENT
   400	   L.OLD.INDEX _ L.INDEX
   401	   LOC.OLD.HASH _ LOC.HASH
   402	   OLD.HASH _ NAME.HASH
   403	   IF LUD.LOOK = THERE THEN DO
   404		NAME.HASH _ OLD.HASH
   405		LOC.HASH _ LOC.OLD.HASH
   406		L.INDEX _ L.OLD.INDEX
   407		MAKE.VALID
   408		ERROR(NAME.THERE)
   409	   END
   410	   FIND.L.ROOM
   411	   MOVE O.ENT.SIZE FROM L.SAVE TO @LUD(WD.PPN)
   412	   IF DUL.LOOK = NOT.THERE THEN DO
   413		LOC.HASH _ LOC.OLD.HASH
   414		NAME.HASH _ OLD.HASH
   415		L.INDEX _ L.OLD.INDEX
   416		MAKE.VALID
   417		ERROR(NAME.NT.THERE)
   418	   END
   419	   MOVE 2 FROM @DUL(WD.NAME) TO OLD.NAME
   420	   D.BLK.UP
   421	   MOVE 2 FROM USER TO @DUL(WD.NAME)
   422	   DUL.WRIT
   423	   CHG.ENT(LUD(WD.HASH) _ NAME.HASH)
   424	  END ELSE ERROR(NAME.NT.THERE)
   425	
   426	LST.USR: FIND.NAME
   427	   IF FOUND = THERE THEN DO
   428	   SEND.CIR(OK)
   429	   SEND.O.WD('PPN: ',@LUD(WD.PPN))
   430	   S.CIR.NUM(LUD(WD.DIST))
   431	   SEND.NUM('$DISTRICT: ',LUD(WD.DIST))
   432	   SEND.O.NUM('$PRIV.BITS: ',LUD(WD.PRIV))
   433	   INDEX _ WD.STRN; TMP _ 0
   434	   IF INIT.BIT = 1 THEN [INDEX+_SIZE.INIT.INF; TMP _ SIZE.INIT.INF]
   435	   TMP _ ((SIZE.LUD.ENT-TMP) - WD.STRN)/SIZE.STR.INF
   436	   SEND.CIR(TMP)
   437	   REPEAT TMP DO
   438		SEND.WD('$STRUCTURE: ',BYPT(@LUD(INDEX),6,0),4)
   439		SEND.NUM('$QUOTA IN: ',LUD(INDEX+1))
   440		SEND.NUM('$QUOTA OUT: ',LUD(INDEX+2))
   441		INDEX+_SIZE.STR.INF
   442		END
   443	  END ELSE ERROR(NAME.NT.THERE)
   444	END
   445	GO GETCMD
   446	
   447	
   448	
   449	%INITUPD
   450	LOCAL L.TMP
   451	IOCS(2)
   452	IF TTYF # CIR THEN DO
   453	   INITTTY(CHK.ERR)
   454	   CH.OUT _ OPEN('TEL', SEQUEN+OUTPUT+CHARACTER,0,2)
   455	   MOVE 72/CHARS.PER.WORD FROM ALL 0 TO TOKEN
   456	   MSG('$LUD UPDATER - VERSION '); NUMOUT(VERSION)
   457	END ELSE DO
   458	   C.IMGIO(SET.UP.TTY,0)
   459	   REPEAT 2 C.IMGIO(SEND,1)
   460	   C.IMGIO(SEND,OCT 40)
   461	   L.TMP _ 0
   462	   WHILE L.TMP = 0 THEN DO
   463		C.IMGIO(RECEIVE,0); IF CHR = 1 THEN DO
   464		   C.IMGIO(RECEIVE,0); IF CHR = 1 THEN DO
   465		      C.IMGIO(RECEIVE,0); IF CHR = OCT 40 THEN INC L.TMP
   466		   END
   467		END
   468	   END
   469	END
   470	P1 _ CHPT('(CUD10)LUD.31',-1)
   471	   SETFID(IOTAB,@P1,0,CHK.ERR)
   472	   LUD.NAME _ NAMARG(IOTAB)
   473	   SITE.31.NAME _ HW(@EXTARG(IOTAB),0)
   474	P1 _ CHPT('(CUD10)DUL.UFD',-1)
   475	   SETFID(IOTAB,@P1,0,CHKERR)
   4 DUL.NAME _ NAMARG(IOTAB)
   477	   UFD _ HW(@EXTARG(IOTAB),0)
   478	INDEX _ D.LOC _ D.OV.BLK.N _ TMP _ CODE _ OLD.NAME(0) _ 0
   479	OLD.NAME(1) _ L.OLD.INDEX _ LOC.OLD.HASH _ O.ENT.SIZE _ OLD.HASH _ 0
   480	FOUND _ N.OFFICIAL _ SITE _ OLD.CODE _ 0
   481	RETURN
   482	END INIT.UPD
   483	
   484	
   485	
   486	%LOKUP.LUD(MODE)
   487		!MODE = READ OR UPDATE
   488	IF N.OFFICIAL = 0 THEN DO
   489	   IF MODE = READ THEN CH.LUD _ OPEN('(NICRAM)LUD.SYS',DIRECT+INPUT+WORD,CHK.ERR)&
   490		ELSE CH.LUD _ OPEN('(NICRAM)LUD.SYS',DIRECT+UPDATE+WORD,CHK.ERR)
   491	END ELSE DO
   492	   NAMARG(IOTAB) _ LUD.NAME
   493	   SET.SITE
   494	   IF MODE = READ THEN CH.LUD _ OPEN(-IOTAB,DIRECT+INPUT+WORD,CHK.ERR)&
   495		ELSE CH.LUD _ OPEN(-IOTAB,DIRECT+UPDATE+WORD,CHK.ERR)
   496	END
   497	SIZE.LUD _ N.LUD.BLKS
   498	RETURN
   499	END LOKUP.LUD
   500	
   501	
   502	%LOKUP.DUL(MODE)
   503	IF N.OFFICIAL = 0 THEN DO
   504	IF MODE = READ THEN CH.DUL _ OPEN('(NICRAM)DUL.SYS',DIRECT+INPUT+WORD,CHK.ERR)&
   505		ELSE CH.DUL _ OPEN('(NICRAM)DUL.SYS',DIRECT+UPDATE+WORD,CHK.ERR)
   506	END ELSE DO
   507	   NAMARG(IOTAB) _ DUL.NAME
   508	   SET.SITE
   509	   IF MODE = READ THEN CH.DUL _ OPEN(-IOTAB,DIRECT+INPUT+WORD,CHK.ERR)&
   510		ELSE CH.DUL _ OPEN(-IOTAB,DIRECT+UPDATE+WORD,CHK.ERR)
   511	END
   512	SIZE.DUL _ N.DUL.BLKS
   513	RETURN
   514	END LOKUP.DUL
   515	
   516	
   517	%LUD.LOOK
   518		!LOOKUP USER,USER+1 IN LUD
   519	HASH(USER(0),USER(1)); L.OV.BLK.N _ 0
   520	LOKUP.LUD(READ)
   521	SETCP(CH.LUD,FIXCP(LOC.HASH)); LUD.READ; CLOSE(CH.LUD)
   522	WHILE LUD(WD.HASH) # NAME.HASH THEN DO
   523	   EIF LUD(WD.PPN) = 0 THEN RETURN NOT.THERE
   524	   ORIF LUD(WD.PPN) < 0 THEN LUD.OVER
   525	   ELSE L.INDEX + _ SIZE.LUD.ENT
   526	END
   527	RETURN THERE
   528	END LUD.LOOK
   529	
   530	
   531	
   532	%DUL.LOOK
   533	LOKUP.DUL(READ); D.OV.BLK.N _ 0
   534	SETCP(CH.DUL,FIXCP(D.LOC _ (LUD(WD.PPN) MOD 101) + 1))
   535	DUL.READ; CLOSE(CH.DUL)
   536	WHILE DUL(WD.PPN) # LUD(WD.PPN) THEN DO
   537	   IF DUL(WD.PPN) = 0 THEN RETURN 0
   538	   IF DUL(WD.PPN) < 0 THEN DUL.OVER
   539	   D.INDEX + _ SIZE.DUL.ENT
   540	END
   541	RETURN THERE
   542	END DUL.LOOK
   543	
   544	
   545	%CHK.IO.ERR
   546	CHK.ERR: IF ERRNUM = EOFERR AND IO.ADR # 0 THEN GO ^IO.ADR
   547	   IF TTYF = CIR THEN ERROR(SIMPL.ERR)
   548	   MSG('$ERROR ON '); WFID(FIDP); CR
   549	   DO ERRNUM OF TMFERR:CORERR
   550	TMFERR: MSG('TOO MANY FILES OPEN')
   551	FMDERR: MSG('BAD FILE MODE OR TYPE')
   552	IFDERR: MSG('ILLEGAL FILE ID')
   553	FNFERR: MSG('FILE NOT FOUND')
   554	IUSERR: MSG('INVALID USER NAME')
   555	PRTERR: MSG('PROTECTION FAILURE')
   556	EOFERR: MSG('END OF FILE')
   557	   END
   558	   MSG('.$ ERROR '); NUMOUT(ERRNUM); EXIT
   559	END CHK.IO.ERR
   560	
   561	
   562	%ERROR(NUM)
   563	ERR.OUT(NUM)
   564	IF NUM = BAD.CODE THEN SEND.CIR(CODE)
   565	IF NUM = SIMPL.ERR THEN SEND.CIR(ERRNUM)
   566	IF TTYF = CIR THEN EXIT ELSE GO GETCMD
   567	
   568	END ERROR
   569	
   570	
   571	%LUD.SEQ
   572	LOOP DO
   573	   L.INDEX + _ SIZE.LUD.ENT
   574	   IF LUD(WD.PPN) < 0 THEN LUD.OVER
   575	   WHILE LUD(WD.PPN) <= 0 THEN LUD.READ
   576	   IF LUD(HASH) # 0 THEN RETURN
   577	END
   578	END LUD.SEQ
   579	
   580	
   581	%FIND.STR
   582	!FIND STR IN STRINF IN LUD,
   583	!IF FOUND, LOC IN INDEX UPDON RETURN
   584	INDEX _ WD.STRN
   585	WHILE LUD(INDEX) # STRINF(WD.S.NAME) THEN DO
   586	   INDEX + _ SIZE.STR.INF
   587	   IF INDEX >=SIZE.LUD.ENT THEN RETURN NOT.THERE
   588	END
   589	RETURN THERE
   590	END FIND.STR
   591	
   592	
   593	%FIND.L.ROOM
   594	!MAKE ROOM FOR NEW ENTRY (NEW.ENT.SIZE WDS)
   595	!CREATE OVERFLOW IF NECESSARY
   596	L.INDEX _ 0
   597	LOOP DO
   598	   EIF LUD(WD.PPN) = 0 THEN DO
   599		IF L.INDEX + NEW.ENT.SIZE <= SIZE.BLK-1 THEN RETURN
   600		MAKE.L.OVER; RETURN
   601	     END
   602	   ORIF LUD(WD.PPN) < 0 THEN LUD.OVER
   603	   ORIF LUD(HASH) = 0 THEN DO
   604		IF SIZE.LUD.ENT = NEW.ENT.SIZE THEN RETURN
   605		MOVE SIZE.BLK-(L.INDEX+SIZE.LUD.ENT) FROM @LUD(SIZE.LUD.ENT)&
   606		TO @LUD(SIZE.LUD.ENT-NEW.ENT.SIZE)
   607		RETURN
   608	     END
   609	   ELSE L.INDEX+_SIZE.LUD.ENT
   610	END
   611	END FIND.L.ROOM
   612	
   613	
   614	%FIND.D.ROOM
   615	D.INDEX _ 0
   616	LOOP DO
   617	   EIF DUL(WD.PPN) = 0 THEN DO
   618		IF D.INDEX + SIZE.DUL.ENT < SIZE.BLK THEN RETURN
   619		MAKE.D.OVER; RETURN
   620	   END
   621	   ORIF DUL(WD.PPN) < 0 THEN DUL.OVER
   622	   ELSE D.INDEX + _ SIZE.DUL.ENT
   623	END
   624	END FIND.D.ROOM
   625	
   626	
   627	%MAKE.L.OVER
   628	L.BLK.UP
   629	SIZE.LUD _ GET.L.OV.BLK _ L.OV.BLK.N _ SIZE.LUD + 1
   630	OV.L.BIT _ OV.BIT; LUD.CL
   631	MOVE SIZE.BLK FROM ALL 0 TO @LUD(WD.PPN)
   632	LOKUP.LUD(UPDATE)
   633	SETCP(CH.LUD,FIXCP(SIZE.LUD))
   634	LUD.CL
   635	L.INDEX _ 0
   636	RETURN
   637	END MAKE.L.OVER
   638	
   639	
   640	%MAKE.D.OVER
   641	D.BLK.UP; SIZE.DUL _ GET.D.OV.BLK _ D.OV.BLK.N _ SIZE.DUL + 1
   642	OV.D.BIT _ OV.BIT; DUL.WRIT
   643	MOVE SIZE.BLK FROM ALL 0 TO @DUL(WD.PPN)
   644	LOKUP.DUL(UPDATE); SETCP(CH.DUL,FIXCP(SIZE.DUL))
   645	DUL.WRIT
   646	D.INDEX _ 0
   647	RETURN
   648	END MAKE.D.OVER
   649	
   650	
   651	
   652	%DELFILES
   653	LOCAL CH.UFD, UFDBLK(SIZE.BLK)
   654	LOCAL T.PPN, HIGHJOB, ACC, USR.TAB(WPF)
   655	ERRNUM _ 0
   656	ACC _ OCT 20000012
   657	HIGHJOB _ CALL.GETTAB(ACC)
   658	WHILE DEC HIGH.JOB >= 0 THEN DO
   659	   HW(ACC,0) _ HIGHJOB + 1; HW(ACC,1) _ 2
   660	   IF CALL.GETTAB(ACC) = LUD(WD.PPN) THEN ERR.OUT(DEL.ERR)
   661	END
   662	PPNARG(IOTAB) _ OCT 1000001; NAMARG(IOTAB) _ LUD(WD.PPN)
   663	EXTARG(IOTAB) _ UFD
   664	CH.UFD _ OPEN(-IOTAB,DIRECT+INPUT+WORD,CHK.ERR)
   665	PPNARG(IOTAB) _ LUD(WD.PPN)
   666	UFD.READ
   667	WHILE NAMARG(USR.TAB) _ UFD.BLK(INDEX) # 0 THEN DO
   668	   IF INDEX >= HIGH.UFD.INDEX THEN UFD.READ ELSE DO
   669		HW(@EXTARG(USR.TAB),0) _ HW(@UFD.BLK(INDEX+1),0)
   670		DELETE(-USR.TAB,CHK.ERR)
   671		INDEX + _ SIZE.UFD.ENT
   672	    END
   673	END
   674	END.UFD: DELETE(-IOTAB,CHK.ERR)
   675	IF TTYF = CIR THEN DO
   676	   C.IMGIO(SEND,1)
   677	   SEND.O.WD('$PPN: ',^L.BLK+L.INDEX+WD.PPN)
   678	END
   679	RETURN
   680	END DELFILES
   681	
   682	
   683	%CALL.GETTAB(AC)
   684	LOCAL DIDIT:
   685	TMP _ EXU(OCT 47,AC,OCT 41,DIDIT)
   686	ERROR(MISC)
   687	DIDIT: RETURN TMP
   688	END CALL.GETTAB
   689	
   690	%GET.STR.INF
   691	GET.WD('STRUCTURE: ',STRINF,4)
   692	GET.NUM.INF('QUOTA IN: '); STRINF(1) _ NUMBER
   693	GET.NUM.INF('QUOTA OUT: '); STRINF(2) _ NUMBER
   694	RETURN
   695	END GET.STR.INF
   696	
   697	
   698	%SEND.O.WD(A,B)
   699	IF TTYF # CIR THEN DO
   700	   TMP _ HW(B,0)
   701	   SEND.O.NUM(A,TMP)
   702	   TMP _ HW(B,1)
   703	   SEND.O.NUM(',',TMP)
   704	END ELSE DO
   705	   TMP _ HW(B,0)
   706	   S.CIR.NUM(TMP)
   707	   TMP _ HW(B,1)
   708	   S.CIR.NUM(TMP)
   709	END
   710	RETURN
   711	END SEND.O.WD
   712	
   713	
   714	
   715	END LUDUPD

NEWUPD
SYMBOL CROSS REFERENCE

A	   698#	   698	   701
AC	   683#	   683	   685
ACC	   654#	   656	   657	   659	   660
ADDUSR	   135#	   337	   376
AEFERR	    51#
ALTLOC	    72#
ARGCNT	    81#
ARGERR	    57#
B	   698#	   698	   700	   702	   705	   707
BADCOD	   279#	   288	   292	   296	   297	   391	   393	   564
BADSIT	   274#	   300
BILLFI	   275#
BLOCK	    68
BUFDUM	    63
BYPT	   107	   288	   294	   296	   302	   307	   323	   340	   342	   344	   345	   360	   430	   431
	   432	   438	   439	   440	   692	   693	   701	   703	   706	   708
CALLGE	   127	   657	   660	   683#
CFN	    62#
CHARAC	    25#	   454
CHDIST	   144#	   357	   390
CHDUL	   116#	   351	   354	   377	   378	   384	   386	   420	   422	   504	   509	   512	   534	   535
	   538	   621	   641	   642	   644	   645
CHECKO	   183#	   228	   315
CHGENT	   181#	   218	   228	   229	   387	   388	   389	   390	   423
CHKERR	   112	   453	   471	   475	   489	   494	   504	   509	   546#	   664	   670	   674
CHKIOE	   129	   545#
CHLUD	   118#	   303	   317	   324	   333	   347	   349	   361	   369	   375	   376	   379	   383	   387
	   388	   389	   390	   398	   407	   416	   423	   489	   494	   497	   521	   524	   574	   575
	   602	   628	   630	   633	   634
CHNAME	   136#	   379	   395
CHOUT	   121#	   454
CHPRIV	   137#	   320	   387
CHR	   115#	   288	   294	   296	   302	   307	   310	   323	   340	   342	   344	   345	   360	   368
	   428	   430	   431	   432	   436	   438	   439	   440	   458	   459	   460	   463	   464	   465
	   563	   564	   565	   660	   676	   692	   693	   701	   703	   706	   708
CHROUT	   109	   307	   438
CHRUB	   139#	   364	   389
CHSTR	   138#	   327	   388
CHUFD	   653#	   664	   666	   668
CIMGIO	   182#	   185	   195	   200	   244	   245	   368	   458	   459	   460	   463	   464	   465	   676
CIR	   149#	   183	   186	   195	   208	   209	   211	   214	   245	   246	   248	   250	   285	   366
	   452	   547	   566	   675	   699
CIREOF	   155#	   310
CIRWDO	   185#	   250
CLIBUF	    70
CLOBUF	    70
CLOSE	    63	   317	   324	   333	   347	   349	   354	   361	   369	   375	   376	   378	   379	   383
	   386	   387	   388	   389	   390	   398	   407	   416	   422	   423	   521	   524	   535	   538
	   574	   602	   621	   630	   634	   642	   645
CLOSEA	    64
CNFERR	    41#
CODE	   120#	   288	   290	   291	   296	   297	   478	   564
CORERR	    60#	   549
NEWUPD
SYMBOL CROSS REFERENCE

CP	    66
CPW	    95#	    96
CR	   186#	   195	   548
DBLK	   116#	   307	   351	   352	   353	   354	   377	   378	   384	   385	   386	   419	   420	   421
	   422	   535	   536	   537	   538	   617	   621	   641	   642	   643	   645
DBLKUP	   187#	   351	   377	   384	   420	   641
DELERR	   277#	   660
DELETE	    69	   670	   674
DELFIL	   127	   316	   652#
DELUSR	   134#	   312	   375
DEVNAM	    89#
DIDIT	   684#	   685	   687#
DINDEX	   116#	   307	   352	   353	   377	   385	   419	   421	   535	   536	   537	   538	   539	   615
	   617	   618	   621	   622	   641	   642	   643	   646
DIRECT	    20#	   489	   494	   504	   509	   664
DISP	   291	   291#	   298
DIST	   122#	   360	   361
DISTBI	   189#	   361	   390
DLOC	   116#	   351	   377	   384	   420	   478	   534	   641
DOVBLK	   116#	   478	   533	   538	   621	   641
DUL	   190#	   206	   241	   307	   352	   353	   377	   385	   419	   421	   536	   537	   538	   617
	   621	   643
DULLOO	   127	   307	   349	   412	   532#
DULNAM	   116#	   476	   507
DULOVE	   191#	   538	   621
DULREA	   193#	   535	   538	   621
DULWRI	   194#	   354	   378	   386	   422	   642	   645
ENDUFD	   674	   674#
EOFERR	    53#	   546	   556
ERASE	    66
ERRNUM	    72#	   546	   549	   558	   565	   655
ERROR	   126	   288	   292	   296	   297	   300	   314	   318	   325	   334	   335	   349	   355	   362
	   370	   391	   393	   408	   417	   424	   443	   547	   562#	   686
ERROUT	   195#	   563	   660
ERRTAB	   173#	   563	   660
EXTARG	    84#	   252	   254	   473	   477	   663	   669
EXTQ	    87#
EXU	    62	   685
FBSERR	    50#
FIDP	    74#	   548
FILEBU	   276#
FILSIZ	    86#
FINDDR	   128	   350	   614#
FINDLR	   128	   339	   410	   593#
FINDNA	   197#	   312	   320	   327	   337	   357	   364	   395	   426
FINDST	   128	   330	   581#
FIXCP	   199#	   219	   224	   351	   377	   384	   420	   521	   534	   538	   621	   633	   641	   644
FMDERR	    37#	   551
FNFERR	    47#	   553
FNMAX	    31#
FNMIN	    30#	    32
FOUND	   121#	   312	   313	   320	   321	   327	   328	   337	   338	   357	   358	   364	   365	   395
	   396	   426	   427	   480
NEWUPD
SYMBOL CROSS REFERENCE

FREE	    97#
FROMCI	   282	   285#
FROMTT	   124	   283#
GCIRNU	   200#	   209	   211
GCIRWD	   202#	   214
GET	    70
GETCMD	   288	   288#	   315	   324	   333	   347	   361	   369	   398	   445	   566#	   566
GETCOD	   203#	   288	   296
GETDIS	   205#	   360
GETDOV	   206#	   538	   621	   641
GETLIN	    65
GETLOV	   207#	   224	   629
GETNEW	   208#	   322	   331	   359
GETNUM	   108	   209#	   288	   294	   296	   344	   360	   692	   693
GETOCT	   108	   302	   323	   340	   342	   345
GETONU	   211#	   213	   302	   340	   342	   345
GETPBI	   213#	   323
GETSTR	   129	   332	   346	   690#
GETTOK	   108	   312	   320	   327	   329	   337	   357	   364	   395	   397	   426	   691
GETWD	   214#	   312	   320	   327	   329	   337	   357	   364	   395	   397	   426	   691
GLBCMX	    94#	    96
GLBSZ	    96#	    97	    99
GLCNT	   100#
HASH	   109	   375	   383	   407	   416	   519	   576	   603
HIGHJO	   654#	   657	   658	   659
HIGHUF	   216#	   668
IFDERR	    40#	   552
IMAGE	    99#
IMGIO	   109	   288	   294	   296	   302	   307	   310	   312	   320	   323	   327	   329	   337	   340
	   342	   344	   345	   357	   360	   364	   368	   395	   397	   426	   428	   430	   431	   432
	   436	   438	   439	   440	   458	   459	   460	   463	   464	   465	   563	   564	   565	   660
	   676	   691	   692	   693	   701	   703	   706	   708
INDEX	   114#	   333	   388	   433	   434	   438	   439	   440	   441	   478	   584	   585	   586	   587
	   666	   667	   668	   669	   671
INDUL	   278#	   349
INITBI	   217#	   434
INITTT	   108	   453
INITUP	   126	   286	   449#
INPUT	     7#	   489	   494	   504	   509	   664
INVALL	   218#	   349	   376	   379
IOADR	   112#	   302	   546
IOCS	    63	   451
IOTAB	   112#	   471	   472	   473	   475	   476	   477	   492	   493	   494	   507	   508	   509	   662
	   663	   664	   665	   674
IUSERR	    48#	   554
LBLK	   118#	   303	   306	   312	   314	   317	   320	   324	   327	   333	   337	   347	   349	   352
	   357	   361	   364	   369	   375	   376	   379	   383	   387	   388	   389	   390	   395	   398
	   399	   407	   411	   416	   423	   426	   429	   430	   431	   432	   434	   435	   438	   439
	   440	   521	   522	   523	   524	   525	   534	   536	   573	   574	   575	   576	   585	   587
	   598	   602	   603	   604	   605	   609	   628	   629	   630	   631	   634	   660	   662	   665
	   677
LBLKUP	   219#	   228	   229	   317	   349	   376	   379	   387	   388	   389	   390	   423	   628
LINDEX	   118#	   303	   306	   312	   314	   317	   320	   324	   327	   333	   337	   347	   349	   352
NEWUPD
SYMBOL CROSS REFERENCE

	   357	   361	   364	   369	   375	   376	   379	   382	   383	   387	   388	   389	   390	   395	   398
	   399	   400	   406	   407	   411	   415	   416	   423	   426	   429	   430	   431	   432	   434
	   435	   438	   439	   440	   521	   522	   523	   524	   525	   534	   536	   573	   574	   575
	   576	   585	   587	   596	   598	   599	   602	   603	   604	   605	   609	   629	   630	   631
	   635	   660	   662	   665	   677
LLEN	    93#	    94
LNGERR	    54#
LOCHAS	   118#	   317	   324	   333	   347	   349	   361	   369	   375	   376	   379	   380	   383	   387
	   388	   389	   390	   398	   401	   405	   407	   413	   416	   423	   521	   628
LOCOLD	   123#	   380	   401	   405	   413	   479
LOCWPF	    75#	    78	    79	    81	    82	    83	    84	    85	    86
LOKUPD	   126	   351	   377	   384	   420	   502#	   533	   538	   621	   641	   644
LOKUPL	   126	   303	   317	   324	   333	   347	   349	   361	   369	   375	   376	   379	   383	   387
	   388	   389	   390	   398	   407	   416	   423	   486#	   520	   524	   574	   602	   628	   632
LOLDIN	   123#	   382	   400	   406	   415	   479
LOVBLK	   118#	   221#	   519	   524	   574	   602	   629
LSAVE	   119#	   312	   320	   327	   337	   341	   342	   343	   344	   345	   347	   357	   364	   387
	   388	   389	   390	   395	   411	   426
LSTEND	   124	   302	   310#
LSTPRJ	   141#	   302	   391
LSTUSR	   143#	   391	   426
LTMP	   450#	   461	   462	   465
LUD	   222#	   224	   229	   240	   243	   258	   306	   312	   314	   317	   320	   324	   327	   333
	   337	   347	   349	   352	   357	   361	   364	   376	   379	   387	   388	   390	   395	   398
	   411	   423	   426	   429	   430	   431	   432	   434	   438	   439	   440	   522	   523	   524
	   534	   536	   574	   575	   576	   585	   598	   602	   603	   605	   629	   631	   660	   662
	   665
LUDCL	   223#	   228	   229	   317	   349	   376	   379	   387	   388	   389	   390	   423	   630	   634
LUDLOO	   127	   312	   320	   327	   337	   357	   364	   395	   403	   426	   517#
LUDNAM	   118#	   472	   492
LUDOVE	   224#	   524	   574	   602
LUDREA	   226#	   303	   521	   524	   574	   575	   602
LUDSEQ	   126	   305	   571#
LUDUPD	   102	   104#
LUDWRI	   227#	   228	   229	   317	   349	   376	   379	   387	   388	   389	   390	   423	   630	   634
MAKECH	   228#	   324	   333	   347	   361	   369	   398
MAKEDO	   129	   619	   640#
MAKELO	   128	   600	   627#
MAKESI	   109	   312	   320	   327	   329	   337	   357	   364	   395	   397	   426	   691
MAKEVA	   229#	   375	   383	   407	   416
MAXARG	    76#	    79
MAXCMD	   232#	   288	   291	   296	   373	   374
MAXSIT	   233#	   295
MAXWPF	    79#
MINARG	    77#	    78
MINCMD	   230#	   288	   291	   296	   373	   374
MINSIT	   231#	   295
MISC	   273#	   686
MODE	   486#	   486	   489	   494	   502#	   502	   504	   509
MSG	    71	   288	   294	   296	   302	   307	   312	   320	   322	   323	   327	   329	   331	   337
	   340	   342	   344	   345	   357	   359	   360	   364	   395	   397	   426	   431	   432	   438
	   439	   440	   456	   548	   550	   551	   552	   553	   554	   555	   556	   558	   563	   660
	   691	   692	   693	   701	   703
NEWUPD
SYMBOL CROSS REFERENCE

NAMARG	    83#	   472	   476	   492	   507	   662	   667
NAMEHA	   122#	   375	   381	   383	   402	   404	   407	   414	   416	   423	   522
NAMENT	   270#	   318	   325	   335	   362	   370	   417	   424	   443
NAMETH	   269#	   355	   408
NDULBL	   234#	   512
NEW	    14#
NEWENT	   235#	   343	   347	   599	   604	   605
NLUDBL	   236#	   497
NO	   237#	   315	   324	   333	   347	   361	   369	   398
NOFFIC	   147#	   299	   316	   480	   488	   503
NOTTHE	   238#	   338	   412	   523	   587
NUM	   562#	   562	   563	   564	   565
NUMBER	   121#	   288	   294	   295	   296	   302	   306	   323	   340	   341	   342	   344	   345	   360
	   692	   693
NUMOUT	   108	   431	   439	   440	   456	   558
OCTOUT	   108	   432	   701	   703
OENTSI	   123#	   399	   411	   479
OFFALT	    72
OK	   268#	   428
OLD	    15#
OLDCOD	   114#	   290	   373	   374	   480
OLDHAS	   123#	   381	   402	   404	   414	   479
OLDNAM	   122#	   385	   419	   478	   479
ONALT	    72
ONALTC	    72
OP	   115#	   288	   294	   296	   302	   307	   310	   323	   340	   342	   344	   345	   360	   368
	   428	   430	   431	   432	   436	   438	   439	   440	   458	   459	   460	   463	   464	   465
	   563	   564	   565	   660	   676	   692	   693	   701	   703	   706	   708
OPEN	    63	   454	   489	   494	   504	   509	   664
OUTMSG	    10#
OUTPUT	     9#	   454
OVBIT	   239#	   630	   642
OVDBIT	   241#	   642
OVLBIT	   240#	   630
P	   121#
P1	   121#	   288	   294	   296	   302	   307	   312	   320	   323	   327	   329	   337	   340	   342
	   344	   345	   357	   360	   364	   395	   397	   426	   430	   431	   432	   438	   439	   440
	   470	   471	   474	   475	   691	   692	   693	   701	   703	   706	   708
PACK	    26#
PLNCHK	    64
PLNW	    64
PPNARG	    82#	   662	   665
PRINT	    71
PRINTC	    71
PRIV	   122#	   323	   324	   387
PRTERR	    49#	   555
PRVARG	    85#
PUT	    70
PUTC	    70
PUTX	    70
QUERY	   108	   315	   324	   333	   347	   361	   367	   369	   398
R	    65
RB	    67	   303	   317	   324	   333	   347	   349	   351	   361	   369	   375	   376	   377	   379
NEWUPD
SYMBOL CROSS REFERENCE

	   383	   384	   387	   388	   389	   390	   398	   407	   416	   420	   423	   521	   524	   535	   538
	   574	   575	   602	   621	   628	   641	   666	   668
READ	   242#	   303	   489	   494	   504	   509	   520	   524	   533	   538	   574	   602	   621
RECEIV	   154#	   200	   202	   368	   463	   464	   465
RELEAS	    68
RENAME	    69
REVERS	   142#	   290	   373	   391
RUB	   122#	   367	   368	   369
RUBBIT	   243#	   369	   389
SAVEXT	   124#
SCIRNU	   244#	   246	   248	   430	   706	   708
SEND	   153#	   185	   195	   244	   245	   459	   460	   676
SENDCI	   245#	   310	   428	   436	   564	   565
SENDNU	   246#	   431	   439	   440
SENDON	   248#	   432	   701	   703
SENDOW	   129	   429	   677	   698#
SENDWD	   250#	   307	   438
SEQUEN	    19#	   454
SETCFN	    62
SETCP	    66	   317	   324	   333	   347	   349	   351	   361	   369	   375	   376	   377	   379	   383
	   384	   387	   388	   389	   390	   398	   407	   416	   420	   423	   521	   524	   534	   538
	   574	   602	   621	   628	   633	   641	   644
SETFID	    63	   471	   475
SETPRM	    65
SETRWE	    71
SETSIT	   252#	   493	   508
SETTAB	    64
SETTER	    65
SETUPT	   152#	   458
SIMPLE	   280#	   547	   565
SITBYT	   254#	   493	   508
SITE	   120#	   289	   295	   480	   493	   508
SITE31	   120#	   473	   493	   508
SIZE	    66	   497	   512
SIZEBL	   255#	   262	   303	   317	   324	   333	   347	   349	   351	   354	   361	   369	   375	   376
	   377	   378	   379	   383	   384	   386	   387	   388	   389	   390	   398	   407	   416	   420
	   422	   423	   497	   512	   521	   524	   534	   535	   538	   574	   575	   599	   602	   605
	   618	   621	   628	   630	   631	   633	   634	   641	   642	   643	   644	   645	   653
SIZEDU	   117#	   256#	   512	   539	   618	   622	   641	   644
SIZEIN	   257#	   434
SIZELU	   119#	   258#	   312	   320	   327	   337	   357	   364	   395	   399	   426	   435	   497	   525
	   573	   587	   604	   605	   609	   629	   633
SIZEST	   259#	   333	   347	   388	   435	   441	   586
SIZEUF	   260#	   671
ST1	   283	   286#
START	   282	   282#
STRINF	   122#	   329	   333	   347	   585	   691	   692	   693
STRNTT	   271#	   334
STRTHE	   272#
TABOFF	    65
TEL	    32#
TELERR	    55#
THERE	   261#	   307	   312	   313	   320	   321	   327	   328	   330	   337	   349	   357	   358	   364
NEWUPD
SYMBOL CROSS REFERENCE

	   365	   395	   396	   403	   426	   427	   527	   541	   589
TMFERR	    36#	   549	   550
TMP	   121#	   433	   434	   435	   436	   437	   478	   685	   687	   700	   701	   702	   703	   705
	   706	   707	   708
TOKEN	   110#	   312	   320	   327	   329	   337	   357	   364	   395	   397	   426	   455	   691
TPPN	   654#
TTYF	   148#	   283	   285	   288	   294	   296	   302	   307	   310	   312	   315	   320	   322	   323
	   324	   327	   329	   331	   333	   337	   340	   342	   344	   345	   347	   357	   359	   360
	   361	   364	   366	   369	   395	   397	   398	   426	   428	   431	   432	   436	   438	   439
	   440	   452	   547	   548	   563	   564	   565	   566	   660	   675	   691	   692	   693	   699
	   701	   703
TTYLEN	    70
UFD	   124#	   477	   663
UFDBLK	   653#	   666	   667	   668	   669
UFDREA	   262#	   666	   668
UPDATE	     8#	   187	   219	   263#	   489	   494	   504	   509	   632	   644
UPOTHL	   140#	   294	   297	   391
USER	   121#	   312	   320	   327	   337	   353	   357	   364	   395	   397	   421	   426	   519
USRNAM	    88#
USRTAB	   654#	   667	   669	   670
VERSIO	   264#	   456
W	    66
WB	    67	   317	   324	   333	   347	   349	   354	   361	   369	   375	   376	   378	   379	   383
	   386	   387	   388	   389	   390	   398	   407	   416	   422	   423	   630	   634	   642	   645
WDDIST	   160#	   189	   344	   390	   430	   431
WDHASH	   166#	   218	   317	   398	   423	   522
WDINIT	   162#	   217
WDNAME	   161#	   307	   353	   377	   385	   419	   421
WDPPN	   158#	   197	   206	   207	   221	   240	   241	   306	   314	   341	   342	   347	   352	   377
	   411	   429	   523	   524	   534	   536	   537	   538	   574	   575	   598	   602	   617	   621
	   631	   643	   660	   662	   665	   677
WDPRIV	   165#	   324	   345	   432
WDQIN	   168#
WDQOUT	   169#
WDRUB	   164#	   243	   389
WDSIZE	   163#	   258	   343
WDSNAM	   159#	   329	   585
WDSTRN	   167#	   347	   433	   435	   584
WFID	    63	   548
WORD	    24#	   489	   494	   504	   509	   664
WPF	    78#	   112	   654
WX	    66
YES	   265#   kB~