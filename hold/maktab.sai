BEGIN "MAKTAB"

COMMENT 

MAKTAB GENERATES PARSING TABLES FOR THE LC(K) PARSER TO
OPERATE ON. LC(K) PARSERS ARE TOP DOWN, BOTTOM UP DETERMINISTIC 
LEFT TO RIGHT. THE GRAMMAR IS SPECIFIED IN A SLIGHTLY
MODIFIED BNF. SEE (MARK)MAKTAB.INF FOR DETAILS.

;

DEFINE !="",CRLF="'15&'12",#="COMMENT ",NOCOM="4",
       PRINT(A)="OUTSTR(A&CRLF)",TAG(A)="(A LSH -34)",
       PTR(A)="A LAND '377777",HASHPTR(A)="(A LSH -16) LAND '777777",
       DSK="1",OUT="2",UNDEF="0",NONTERM="1",TERM="2",IFSTMT="3",
       SWITCH="3";

INTEGER COMMAND,BREAK,I,BUCKET,LOC,RINGSTART,PRODPTR,LINENUM;
INTEGER IFSTKPTR,IFPTR;
STRING STR,LP,RP,OP;
BOOLEAN EOF;

COMMENT

THE STRUCTURE OF THE SYMBOL TABLES ARE AS FOLLOWS:

1. THE LEFT MOST 2 BITS ARE TAG BITS. INITALLY, THESE
ARE ALL 0 (UNDEFINED).

2. THE NEXT 18 BITS SERVE AS THE CONFLICT POINTER INTO THE SCATTER
TABLE.

3. LASTLY, THE REMAINING 16 BITS ARE USED AS AN INDEX INTO THE
TABLE OF PRODUCTIONS.

;

INTEGER ARRAY HASH[0:179],PROD[0:250],SCATTER[0:400];
INTEGER ARRAY IFSTACK[0:10],IFBLOCK[0:20];
STRING ARRAY SYMBOL[0:400];

PRELOAD!WITH "SYNTAX","COMMENT","END","GOAL";
STRING ARRAY COMTAB[1:NOCOM];

PRELOAD!WITH "ASG","IFN","IFE","ENDF","ELSE";
STRING ARRAY IFSWITCHES[1:5];

EXTERNAL PROCEDURE EXIT;

PROCEDURE INITIALIZATION;
BEGIN
   STRING FILE;
   EOF_FALSE;
   WHILE NOT EOF DO BEGIN
       OUTSTR("INPUT FILE: "); FILE_INCHWL;
   END;
END;

STRING PROCEDURE GETWORD;
BEGIN
   STRING WORD;
   WHILE LENGTH(STR)>0 AND STR=" " DO WORD_LOP(STR);
   WORD_NULL; "SET WORD BACK TO NULL FOR CHARACTER PACKING"
   WHILE NOT(LENGTH(STR)=0 OR STR=" ") DO WORD_WPRD&LOP(STR);
   RETURN(WORD);
END;

STRING PROCEDURE SUBSTR(STRING REFSTR; INTEGER WHERE,N);
RETURN(IF WHERE+N-1>LENGTH(REFSTR) THEN NULL ELSE REFSTR[WHERE FOR N]);

STRING PROCEDURE RIGHT(STRING REFSTR; INTEGER N);
RETURN(IF N>LENGTH(REFSTR) THEN NULL ELSE 
       SUBSTR(REFSTR,LENGTH(REFSTR)-N,N));

INTEGER PRCOEDURE INDEX(STRING A,B);
BEGIN
   INTEGER I;
   FOR I_1 STEP 1 UNTIL LENGTH(A) DO
       IF EQU(LEFT(A,LENGTH(B)),B) THEN RETURN I);
   RETURN(0); "STRING NOT FOUND"
END;

PROCEDURE ERROR(STRING ERRMSG);
BEGIN
   OUTSTR("ERROR IN LINE "&CVS(LINENUM)&": "&ERRMSG&CRLF);
   EXIT;
END;

INTEGER PROCEDURE HASH(REFERENCE STRING REFSTR);
BEGIN
    INTEGER HASHVAL,COUNT;
    FOR COUNT_1 STEP 1 UNTIL LENGTH(REFSTR) DO
        HASHVAL_(HASHVAL ROT 19) XOR REFSTR[COUNT FOR 1];RETURN(HASHVAL MOD 179);
END;

PROCEDURE IFCALL;

COMMENT

IFCALL IS CALLED WHENEVER A % APPEARS AS THE FIRST CHARACTER OF
A LEFT PART. IF CALLS CAN TAKE SEVERAL FORMS, STOLEN FROM
THE PDP-10 ASSEMBLER AND THE 940 ASSEMBLER. THEY ARE:

1. %ASG VAR VALUE    ASSIGNS VAR THE VALUE
2. %IFN VAR          TRUE IF VAR NOT EQUAL TO ZERO
3. %IFE VAR          TRUE IF VAR EQUAL TO ZERO
4. %ELSE             COMPLEMENTS THE PRESENT IF VALUE
5. %ENDF             TERMINATES AN IF STATEMENT

;

BEGIN "IFCALL"

     INTEGER I;
     I_FINDIT(IFSWITCHES,LEFT(RP,2),5); "SEARCH FOR ARGUMENT"
     CASE I OF BEGIN

         ERROR("ILLEGAL IF STATEMENT.");

         BEGIN "ASG"

             RP_GETWORD; "GET IDENTIFIER"
             OP_CVD(GETWORD); "AND THE VALUE TO BE SET"

             IF NOT(BUCKET_LOOKUP(RP)) THEN BUCKET_NEXTST;
             IF NOT(SCATTER LSH -34=UNDEF OR SCATTER LSH -34=SWITCH)
             THEN ERROR("CAN'T REASSIGN A SYMBOL TO AN IF SWITCH!);
             SCATTER[BUCKET]_(SCATTER[BUCKET] LAND '077777600000)
             LOR SWITCH LSH 34 LOR IFPTR;
             IFBLOCK[IFPTR]_OP; "SET THE VALUE"
             IFPTR_IFPTR+1;

         END "ASG"

         BEGIN "IFN"

             IF BUCKET_LOOKUP(GETWORD) THEN
             IFSTACK[IFSTKPTR_IFSTKPTR+1]_(IF IFBLOCK[SCATTER[BUCKET]]
             THEN TRUE ELSE FALSE) AND IFSTACK[IFSTKPTR-1]
             ELSE ERROR("IF IDENTIFIER DOES NOT EXIST.");
         END "IFN"

         BEGIN "IFE"

             IF BUCKET_LOOKUP(GETWORD) THEN
             IFSTACK[IFSTKPTR_IFSTKPTR+1]_(IF IFBLOCK[SCATTER[BUCKET]]
             THEN FALSE ELSE TRUE) AND IFSTACK[IFSTKPTR-1]
             ELSE ERROR("IFE IDENTIFIER DOES NOT EXIST!");

         END "IFE"

         BEGIN "ENDF"
             IFSTKPTR_IFSTKPTR-1; "BACKUP STACK POINTER"
         END "ENDF"

         BEGIN "ELSE"

         IFSTACK[IFSTKPTR]_NOT IFSTACK[IFSTKPTR]; "COMPLEMENT"

         END "ELSE";

END "IF CALL";

INTEGER PROCEDURE FINDIT(REFERENCE STRING ARRAY ARRY;STRING REF;
INTEGER N);
BEGIN
     INTEGER I;
     FOR I_1 STEP 1 UNTIL N DO
         IF EQU(ARRY[I],REF) THEN RETURN(I);
     RETURN(0); "CAN'T FIND IT"
END;

