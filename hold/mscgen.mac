TITLE	MSCGEN FOR COBOL 5(65)		
SUBTTL	MISCELANEOUS CODE GENERATORS	AL BLACKINGTON/CAM

;COPYRIGHT 1970,1971,1972, DIGITAL EQUIPMENT CORP, MAYNARD, MA.

TWOSEG
RELOC	400000

ENTRY EXAMGN	;"EXAMINE"
ENTRY TRCGEN	;"TRACE"

IFN SERCH,<
ENTRY SRCHGN	;"SEARCH"
ENTRY SINCGN	;"SINCR"
>

MSCGEN::
SUBTTL GENERATE CODE FOR "EXAMINE"

EXAMGN:	SWOFF	FEOFF1		;TURN OFF FLAGS
	MOVEM	EACA,EOPNXT##
	MOVEM	W1,OPLINE##
	HRRZ	TC,EOPLOC##
	ADDI	TC,1
	MOVEM	TC,CUREOP##
	HRLZM	TC,OPERND##

	MOVEI	LN,EBASEA##	;SET UP "A" PARAMETERS
	PUSHJ	PP,SETOPN##
	TSWF	FERROR		;ANY ERRORS YET?
	POPJ	PP,		;YES--QUIT

	HRRZ	TA,EMODEA##
	CAIE	TA,D6MODE##
	CAIN	TA,D7MODE##
	JRST	EXMGN2

;ITEM TO BE EXAMINED IS NOT DISPLAY--ERROR

	MOVEI	DW,^D211
	JRST	OPNFAT##

;ITEM TO BE EXAMINED IS DISPLAY

EXMGN2:	PUSHJ	PP,SUBSCA##	;CALL SUBSCRIPTOR, IF NECESSARY
	TSWF	FASUB		;IS IT SUBSCRIPTED?
	JRST	EXMGN3		;YES

	MOVE	TA,[XWD BYTLIT##,2]
	PUSHJ	PP,STASHL##
	PUSHJ	PP,MBYTEA##
	MOVE	CH,[XWD ASINC+EXAM.##,AS.MSC##]
	PUSHJ	PP,SETUUO##	;SET UUOBIT FLAG
	PUSHJ	PP,PUTASY##
	HRRZ	CH,ELITPC##
	IORI	CH,AS.LIT##
	PUSHJ	PP,PUTASN##
	AOS	ELITPC
	JRST	EXMGN4

EXMGN3:	MOVE	CH,[XWD EXAM.,SXR##]
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASY
;PUT OUT THE XWD WHICH FOLLOWS THE UUO

EXMGN4:	MOVE	CH,[XWD AS.XWD##,1]
	PUSHJ	PP,PUTASY

	HRLZ	CH,ESIZEA##

	TSWF	FANUM		;IS IT NUMERIC?
	TLO	CH,1B18		;YES--SET FLAG
	HRRI	CH,AS.CNB##
	PUSHJ	PP,PUTASN
	LDB	CH,[POINT 4,W1,12]
	ROT	CH,-4
	PUSH	PP,CH		;SAVE PARAMETER

	PUSHJ	PP,EXMGN8

	DPB	TB,[POINT 7,(PP),10]

	TLNN	W1,REPLAC
	JRST	EXMGN6

	PUSHJ	PP,EXMGN8

	DPB	TB,[POINT 7,(PP),17]

EXMGN6:	POP	PP,CH		;GET PARAMETER BACK
	HRRI	CH,AS.CNB
	PUSHJ	PP,PUTASN

	TLNN	W1,TALYNG
	POPJ	PP,

	MOVE	CH,[XWD MOVEM.##,TALLY.##]
	JRST	PUT.EX##
;LOOK AT TALLYING OR REPLACING LITERAL.
;EXIT WITH VALUE OF LITERAL IN 'TB'.

EXMGN8:	PUSHJ	PP,BMPEOP##	;GO TO NEXT OPERAND
	JRST	BADOPN		;THERE WASN'T ONE--ERROR

	MOVE	TA,ETABLA##	;FIND DATAB ENTRY
	PUSHJ	PP,LNKSET##
	HRRZM	TA,CURDAT##

	MOVE	TB,CUREOP
	HRRZ	TD,EMODEA
	MOVE	TC,0(TB)
	TLNN	TC,GNFIGC
	JRST	EXMGN9

	TLNN	TC,GNFCS!GNFCZ!GNFCQ!GNFCHV!GNFCLV
	JRST	BADLIT

	TLNE	TC,GNFCS	;SPACE?
	MOVEI	TB," "
	TLNE	TC,GNFCZ	;ZERO?
	MOVEI	TB,"0"
	TLNE	TC,GNFCQ	;QUOTE?
	MOVEI	TB,42
	TLNE	TC,GNFCLV	;LOW-VALUE?
	MOVEI	TB,0
	TLNE	TC,GNFCHV	;HIGH-VALUE?
	MOVEI	TB,177

	JRST	EXMG9A

EXMGN9:	MOVE	TA,1(TB)	;IS IT A SIZE 1 LITERAL?
	PUSHJ	PP,LNKSET
	LDB	TC,[POINT 7,(TA),6]
	CAIE	TC,1
	JRST	BADLIT		;NO--ERROR

	LDB	TB,[POINT 7,(TA),13]	;YES--PICK UP VALUE OF LITERAL

EXMG9A:	TSWF	FANUM		;IS FIELD NUMERIC?
	JRST	EXGN10		;YES
	MOVE	TA,CURDAT
	LDB	TC,DA.CLA##	;NO--ALPHABETIC?
	CAIN	TC,1
	JRST	EXGN12		;YES

EXMG9B:	SKIPE	TB		;ALLOW LOW VALUES
	CAIE	TD,D6MODE
	POPJ	PP,

	CAIN	TB,177		;ALLOW HIGH-VALUES
	JRST	EXMG9C

	CAIGE	TB,140
	CAIGE	TB,40
	JRST	BADMOD

EXMG9C:	SUBI	TB,40
	POPJ	PP,
EXGN10:	CAIG	TB,"9"		;"A" IS NUMERIC--IS THE LITERAL?
	CAIGE	TB,"0"
	JRST	BADCLS		;NO
	JRST	EXMG9B		;YES

EXGN12:	CAIG	TB,"Z"		;"A" IS ALPHABETIC--IS THE LITERAL?
	CAIGE	TB,"A"
	CAIN	TB," "
	JRST	EXMG9B

;ERROR ROUTINES

BADCLS:	MOVEI	DW,^D211
	JRST	OPNFAT

BADMOD:	MOVEI	DW,^D210
	JRST	OPNFAT

BADLIT:	MOVEI	DW,^D123
	JRST	OPNFAT

BADOPN:	MOVEI	DW,^D214
	JRST	OPFAT##

;MISCELLANEOUS CONSTANTS

REPLAC==1B30
TALYNG==1B31
ASINC==1B19
SUBTTL	GENERATE "TRACE ON/OFF" COMMAND

TRCGEN:	SKIPE	PRODSW##	;IF '/P' TYPED,
	POPJ	PP,		;  NO CODE

	MOVE	CH,[XWD SETOM.##,PTFLG.##]
	TLNN	W1,(<1B9>)
	HRLI	CH,SETZM.##
	JRST	PUT.EX		;WRITE OUT CODE
SUBTTL	GENERATE 'SEARCH' OPERATOR

;THE 'SEARCH' GENERATOR GENERATES THE FOLLOWING CODE.
;IN THE EXAMPLE, THE KEY IS ASSUMED TO BE COMP; APPROPRIATE
;CODE IS GENERATED FOR OTHER USAGES.

;SEARCH ALL:

;	SETZM	INDEX
;	MOVE	0,[POWER OF 2 GREATER THAN TABLE SIZE]
;	MOVEM	0,%PARAM
;
; %I:	MOVE	0,%PARAM
;	IDIVI	0,2
;	JUMPE	0,%AE+1
;	MOVEM	0,%PARAM
;	ADDM	0,INDEX
;	JRST	%T
;
; %D:	MOVE	0,%PARAM
;	IDIVI	0,2
;	JUMPE	0,%AE+1
;	MOVEM	0,%PARAM
;	MOVN	0,0
;	ADDM	0,INDEX
;
; %T:	CAMG	0,DEPENDING-ITEM  ;IF 'DEPENDING' CLAUSE PRESENT
;	CAILE	0,TABLE-SIZE
;	JRST	%D
; %AE:
;	JRST	%X		;PUT OUT BY 'SPIF'
;	<AT-END CODE>		;PUT OUT BY OTHER GENERATORS
;
; %X:	<KEY COMPARISON>	;SEE BELOW
;	     .
;	     .
;	<KEY COMPARISON>


;THE 'KEY COMPARISON' IS AS FOLLOWS:
;
;	MOVE	0,KEY
;	CAMN	0,CONDITION-ITEM
;	JRST	%E
;	CAML	0,CONDITION-ITEM	;'CAMG' IF DESCENDING KEY
;	JRST	%D
;	JRST	%I
; %E:
;SEARCH OTHER THAN 'ALL'
;
; %L:	MOVE	0,INDEX		;IF VARYING ITEM IS
;	MOVEM	0,VARYING-ITEM	;  OTHER THAN THE INDEX
;	MOVE	0,INDEX
;	JUMPLE	0,%AE+1
;	CAIG	0,TABLE-SIZE
; %AE:
;	JRST	%X		;PUT OUT BY 'SPIF'
;	<AT-END CODE>		;PUT OUT BY OTHER GENERATORS
;
; %X:	<'WHEN' CODE>		;PUT OUT BY 'IF'
;	     .
;	     .
;	<'WHEN' CODE>
;
;	AOS	INDEX
;	JRST	%L

;NOTE THAT, IF A 'DEPENDING' CLAUSE IS INVOLVED, THE 'CAIG' CODE ABOVE IS
;	REPLACED BY:
;
;	CAMG	0,DEPENDING-ITEM
;	CAILE	0,TABLE-SIZE
;	SKIPA
IFN SERCH,<

SRCHGN:	MOVEM	W1,OPLINE	;SAVE W1
	SETZM	SRCFST##	;CLEAR
	MOVE	TE,[XWD SRCFST,SRCFST+1];  WORK
	BLT	TE,SRCLST##	;AREA

	CAMN	EACA,EOPLOC	;IF NO OPERANDS,
	POPJ	PP,		;  FORGET IT

	TLO	W2,AS.TAG##	;BE SURE 'W2' HAS TAG
	HRRZ	TC,EOPLOC	;GET TO
	MOVEI	TC,1(TC)	;  FIRST OPERAND
	MOVSM	TC,OPERND
	MOVEM	TC,CUREOP

	MOVE	TA,1(TC)	;SAVE
	HRRZM	TA,SRCIDN##	;  SEARCH IDENTIFIER
	PUSHJ	PP,LNKSET	;CONVERT TO ADDRESS
	LDB	TE,DA.NOC##	;IF THIS HAS
	JUMPE	TE,NOIDX	;  NO 'OCCURS', TROUBLE
	MOVEM	TE,SRCNOC##	;SAVE NUMBER OF OCCURENCES
	LDB	TE,DA.XBY##	;GET 'INDEXED BY' ITEM
	PUSHJ	PP,SRCG60	;FIND THE CORRECT INDEX
	HRRZM	TE,SRCIDX##	;SAVE IT
	JUMPE	TE,NOIDX	;IF ZERO--TROUBLE
	MOVE	TC,CUREOP
	MOVEM	TE,1(TC)	;REPLACE LINK IN FIRST OPERAND

	PUSHJ	PP,GETTAG##	;GET TAG FOR
	HRRZM	CH,SRCAE	;  'AT END' PATH LESS 1

	TLNE	W1,IFALL	;IF 'AL' SEARCH,
	JRST	SRCG01		;  WE DON'T NEED TAG
	PUSHJ	PP,GETTAG	;GET TAG FOR
	HRRZM	CH,SRCLUP##	;  THE LOOP
	PUSHJ	PP,PUTTAG##	;GIVE IT TO ASSEMBLER

SRCG01:	PUSHJ	PP,BMPEOP	;STEP TO NEXT OPERAND
	JRST	SRCG03		;THERE IS NONE--SO NO 'VARYING'

	HRRZ	TC,CUREOP	;REMEMBER
	HRRM	TC,OPERND	;  OPERAND ADDRESS
	HRRZ	TE,1(TC)	;IS IT THE
	CAMN	TE,SRCIDX	;  SEARCH INDEX?
	JRST	SRCG03		;YES--NO CODE NEEDED

	HLRZ	TC,OPERND
	PUSHJ	PP,SETOPA##	;SET UP 'A' TO BE 'INDEXED BY' ITEM
	HRRZ	TC,OPERND
	PUSHJ	PP,SETOPB##	;SET UP 'B' TO BE 'VARYING' ITEM
	TSWT	FBNUM		;IF 'B' IS NOT NUMERIC,
	JRST	NOTNUM##	;  ERROR

	PUSHJ	PP,MXX.##	;MOVE 'A' TO 'B'
;ANY 'VARYING' HAS BEEN DONE

SRCG03:	HLRZ	TC,OPERND	;GET BACK TO
	MOVEM	TC,CUREOP	;  'INDEXED BY' ITEM

	TLNE	W1,IFALL	;IF IT IS 'SEARCH ALL',
	JRST	SRCG10		;  GO A DIFFERENT ROUTE

;IT IS NOT 'SEARCH ALL'

	PUSHJ	PP,SETOPA	;MAKE FISRT OPERAND BE 'A'
	SETZM	EAC##		;USE AC'S 0&1
	PUSHJ	PP,MXAC.##	;PICK UP 'A'
	SWON	FAINAC		;SET FLAG

	MOVSI	CH,ASINC+JMPLE.##	;GENERATE
	HRR	CH,SRCAE##	;  <JUMPLE %AE+1>
	PUSHJ	PP,PUTASN
	HRRZI	CH,1
	PUSHJ	PP,PUTASY

	MOVE	TA,SRCIDN	;GET LINK TO OCCURRENCE ITEM
	PUSHJ	PP,LNKSET
	LDB	CH,DA.DEP##	;ANY 'DEPENDING' VARIABLE?
	JUMPE	CH,SRCG05	;NO, IF JUMP

;OCCURENCE HAS 'DEPENDING' ITEM

	ANDI	CH,TM.DAT##	;CHANGE
	IORI	CH,AS.DAT##	;  CODE

	HRLI	CH,CAMG.##	;GENERATE
	PUSHJ	PP,PUTASY	;  <CAMG 2,DEP-VARIABLE>
	MOVE	CH,[XWD CAILE.##,AS.CNB]	;GENERATE
	PUSHJ	PP,PUTASN	;  <CAILE 0,OCCURS>
	MOVE	TA,SRCIDN
	PUSHJ	PP,LNKSET
	LDB	CH,DA.NOC
	PUSHJ	PP,PUTASY
	MOVSI	CH,SKIPA.##
	PUSHJ	PP,PUTASY
	JRST	SRCG06
;OCCURENCE HAS NO 'DEPENDING' ITEM

SRCG05:	MOVE	CH,[XWD CAIG.##,AS.CNB]	;GENERATE
	PUSHJ	PP,PUTASN	;  <CAIG 2,TABLE-SIZE>
	MOVE	CH,SRCNOC
	PUSHJ	PP,PUTASY

SRCG06:	HRRZ	CH,SRCAE	;DEFINE TAG FOR
	JRST	PUTTAG		;  'AT END' PATH, THEN LEAVE
;SEARCH HAS 'ALL' OPTION

SRCG10:	SETOM	SRCALL##	;SET FLAG FOR 'SINCR'

	HRRZ	TA,SRCIDN	;GET ADDRESS OF DATAB ENTRY FOR
	PUSHJ	PP,LNKSET	;  SEARCHED ITEM
	LDB	TE,DA.KEY##	;GET AND
	MOVEM	TE,SRCKYN##	;  SAVE NUMBER OF KEYS
	JUMPE	TE,NOKEYS	;IF ZERO--ERROR

	HRRZ	CH,SRCIDX	;GENERATE
	ANDI	CH,TM.DAT	;  <SETZM INDEX>
	IORI	CH,AS.DAT
	HRLI	CH,SETZM.
	PUSHJ	PP,PUTASY

	MOVEI	TC,2		;COMPUTE
	SKIPA	TE,SRCNOC	;  POWER
SRCG11:	LSH	TC,1		;  OF TWO
	CAIG	TC,(TE)		;  GREATER THAN
	JRST	SRCG11		;  TABLE SIZE

	SETZM	EAC		;GENERATE
	MOVSI	CH,MOV##	;  <MOVE 0,[POWER OF TWO]>
	PUSHJ	PP,PUT.LA##

	MOVE	CH,[XWD MOVEM.,AS.MSC];GENERATE
	PUSHJ	PP,PUTASN	;  <MOVEM %PARAM>
	HRRZ	CH,EAS1PC##
	IORI	CH,AS.PAR##
	MOVEM	CH,SRCPAR##
	PUSHJ	PP,PUTASY
	AOS	EAS1PC
	MOVE	CH,[XWD AS.OCT##,1]	;PUT OUT <OCT 0> ON AS1FIL
	PUSHJ	PP,PUTAS1##
	MOVEI	CH,0
	PUSHJ	PP,PUTAS1


	PUSHJ	PP,GETTAG	;GET TAG
	HRRZM	CH,SRC%I##	;  FOR 'INCREMENT' CODE
	PUSHJ	PP,PUTTAG

	MOVE	CH,[XWD SKIPA.+AC1+ASINC,AS.MSC]
	PUSHJ	PP,PUTASN
	MOVE	CH,SRCPAR
	PUSHJ	PP,PUTASY

	MOVE	CH,[XWD AC1+ASINC+MOVN.##,AS.MSC]
	PUSHJ	PP,PUTASN
	MOVE	CH,SRCPAR
	PUSHJ	PP,PUTASY
;SEARCH HAS 'ALL' OPTION (CONT'D)

	MOVE	CH,[XWD AC1+IDIVI.##,2]	;<IDIVI 1,2>
	PUSHJ	PP,PUTASY

	HRRZ	CH,SRCAE	;<JUMPE 1,AT-END>
	HRLI	CH,AC1+ASINC+JUMPE.##
	PUSHJ	PP,PUTASN
	HRRZI	CH,1
	PUSHJ	PP,PUTASY

	MOVE	CH,[XWD AC1+ASINC+MOVMM.##,AS.MSC]	;<MOVMM 1,%PARAM>
	PUSHJ	PP,PUTASN
	MOVE	CH,SRCPAR
	PUSHJ	PP,PUTASY

	MOVE	CH,SRCIDX	;<ADDB 1,INDEX>
	ANDI	CH,TM.DAT
	IORI	CH,AS.DAT
	HRLI	CH,AC1+ADDB.##
	PUSHJ	PP,PUTASY

	MOVE	TA,SRCIDN	;GET
	PUSHJ	PP,LNKSET	;  TABLE ADDRESS
	LDB	CH,DA.DEP	;ANY 'DEPENDING' ITEM?
	JUMPE	CH,SRCG13	;NO, IF JUMP

	ANDI	CH,TM.DAT	;YES
	IORI	CH,AS.DAT	;GENERATE
	HRLI	CH,AC1+CAMG.##	;  <CAMG 1,DEPENDING-ITEM>
	JRST	SRCG14

SRCG13:	MOVE	CH,[XWD AC1+CAILE.,AS.CNB]	;GENERATE
	PUSHJ	PP,PUTASN	;  <CAILE 1,TABLE-SIZE>
	MOVE	CH,SRCNOC

SRCG14:	PUSHJ	PP,PUTASY

	MOVE	CH,SRC%I	;GENERATE
	HRLI	CH,ASINC+JRST.##	;  <JRST %I+1>
	PUSHJ	PP,PUTASN
	MOVEI	CH,1
	PUSHJ	PP,PUTASY

	JRST	SRCG06
;THERE WAS NO 'INDEXED BY' OPTION

NOIDX:	MOVEI	DW,^D381
	JRST	NOKYS1

;THERE WERE NO KEYS

NOKEYS:	MOVEI	DW,^D386
	SETZM	SRCIDX
NOKYS1:	SETZM	SRCIDN
	JRST	OPNFAT
;FIND THE CORRECT INDEX.
;ENTER WITH HLDTAB LINK TO FIRST ITEM OF 'INDEXED BY' CLAUSE IN 'TE'.
;EXIT WITH DATAB LINK TO INDEX IN 'TE' (ZERO IF ERROR).

SRCG60:	ANDI	TE,LMASKS##	;THROW AWAY ANY CODE IN LINK
	JUMPE	TE,SRCG67	;IF ZERO, NO LINK
	MOVE	TA,TE		;GET
	ADD	TA,HLDLOC##	;  ADDRESS
	HRRZM	TA,CURHLD##

	LDB	TD,HL.LNK##	;DOES THIS
	CAME	TD,SRCIDN	;  ITEM POINT TO THE TABLE?
	JRST	SRCG66		;NO--TROUBLE

	PUSH	PP,CUREOP	;SAVE CUREOP
	PUSHJ	PP,BMPEOP	;ANY OTHER OPERAND?
	JRST	SRCG63		;NO--THEREFORE NO 'VARYING'

	HRRZ	TC,CUREOP	;YES--SAVE ADDRESS OF THAT OPERAND
	POP	PP,CUREOP	;RESTORE CUREOP
	HRRZ	TC,1(TC)	;GET LINK TO VARYING ITEM

SRCG62:	LDB	TE,HL.NAM##	;IS THIS THE DESIRED INDEX?
	IORI	TE,TC.DAT##
	CAIN	TE,(TC)
	POPJ	PP,		;YES

	ADDI	TA,2		;NO--STEP DOWN TO NEXT HLDTAB ITEM
	HRRZ	TD,HLDNXT##	;ARE WE
	CAIL	TA,(TD)		;  OUT OF HLDTAB?
	JRST	SRCG64		;YES--USE FIRST INDEX

	LDB	TD,HL.COD##	;NO--IS THIS
	CAIE	TD,HL.XBY##	;  'INDEXED BY' ITEM?
	JRST	SRCG64		;NO--USE FIRST INDEX

	LDB	TD,HL.LNK	;IS IT POINTING
	CAMN	TD,SRCIDN	;  TO THE TABLE?
	JRST	SRCG62		;YES--LOOP

	JRST	SRCG64		;NO--USE FIRST INDEX

;THE FIRST INDEX IS TO BE USED

SRCG63:	POP	PP,CUREOP	;RESTORE CUREOP

SRCG64:	MOVE	TA,CURHLD
	LDB	TE,HL.NAM
	IORI	TE,TC.DAT
	POPJ	PP,
;FIND CORRECT INDEX (CONT'D).

;ERROR--RETURN ZERO IN TE

SRCG66:	MOVEI	TE,0
SRCG67:	POPJ	PP,

	>	;END OF 'IFN SERCH'
SUBTTL	GENERATE 'SINCR' OPERATOR

IFN SERCH,<

SINCGN:	MOVEM	W1,OPLINE	;SAVE W1
	SKIPE	SRCALL		;WAS SEARCH AN 'ALL'?
	JRST	SINC10		;YES

	SKIPN	CH,SRCIDX	;GET INDEX-NAME
	POPJ	PP,		;IF ZERO--QUIT
	ANDI	CH,TM.DAT
	IORI	CH,AS.DAT
	HRLI	CH,AOS.##
	PUSHJ	PP,PUTASY

	SKIPN	CH,SRCLUP	;GET TAG FOR LOOP
	POPJ	PP,		;IF NONE, FORGET IT
	HRLI	CH,JRST.	;GENERATE
	JRST	PUTASY		;  <JRST LOOPTAG>

;SEARCH WAS 'ALL'

SINC10:	CAMN	EACA,EOPLOC	;IF NO OPERANDS,
	POPJ	PP,		;  QUIT

	SKIPE	TA,SRCIDN	;IF TROUBLE WITH
	SKIPN	SRCKYN		;  SEARCH
	POPJ	PP,		;  QUIT

	PUSHJ	PP,LNKSET	;SET 'TA'
	ADDI	TA,DA.RKL##	;  TO BE
	HRRZM	TA,SRCKYL##	;  ADDRESS OF FIRST ENTRY
	SETZM	SRCFLG##

;COUNT THE OPERANDS.
;ONE MAY BE IN AC'S.

	MOVE	TC,EOPLOC
	MOVEI	TC,1(TC)
	HRRZM	TC,CUREOP
	MOVEI	TB,1
SINC12:	MOVE	TD,1(TC)
	TLNN	TD,GNNOTD
	JRST	SNC12A
	HRRZ	TD,0(TC)
	CAILE	TD,17
	JRST	SNC12A
	PUSHJ	PP,PUTEMP##
	HRRM	EACC,0(TC)

SNC12A:	PUSHJ	PP,BMPEOP
	JRST	SNC12C
	AOS	TC,CUREOP
	AOJA	TB,SINC12
SNC12C:	MOVEM	TB,SRCOPN##	;SAVE IT
SINC13:	MOVE	TC,EOPLOC	;START AT TOP
	MOVEI	TC,1(TC)	;  OF EOPTAB
	HRRZM	TC,CUREOP
	SWOFF	FEOFF1
	JRST	SINC15

SINC14:	PUSHJ	PP,BMPEOP	;STEP DOWN TO NEXT OPERAND
	JRST	SINC16		;NO MORE--SOME KIND OF ERROR
	AOS	TC,CUREOP
SINC15:	SKIPN	(TC)		;WAS THAT OPERAND DONE BEFORE?
	JRST	SINC14		;YES--TRY NEXT
	MOVSM	TC,OPERND	;NO--SAVE THE LOCATION
	HRRZ	TA,1(TC)	;IS IT
	LDB	TE,LNKCOD##	;  A
	CAIN	TE,TB.CON##	;  CONDITION-NAME?
	JRST	SINC18		;YES

	HRRZ	TE,@SRCKYL	;NO--IS IT
	CAIN	TE,(TA)		;  THE CURRENT KEY?
	JRST	SINC26		;YES

	PUSHJ	PP,BMPEOP	;NO--STEP TO SECOND OF CONDITION PAIR
	JRST	BADEOP##	;NONE--ERROR FROM PHASE D
	AOS	TC,CUREOP	;IS THAT
	HRRZ	TA,1(TC)	;  THE
	HRRZ	TE,@SRCKYL	;  CURRENT
	CAIE	TE,(TA)		;  KEY?
	JRST	SINC14		;NO--STEP TO NEXT OPERAND
	JRST	SINC27		;YES

;WE HAVE LOOKED THROUGH ALL OPERANDS AND HAVEN'T FOUND THE KEY

SINC16:	AOS	SRCFLG		;BUMP ERROR FLAG
SINC17:	SOSG	SRCKYN		;ANY MORE KEYS?
	JRST	SINC20		;NO
	AOS	SRCKYL		;YES--STEP TO NEXT KEY
	JRST	SINC13		;  AND LOOK FOR THAT
;WE FOUND A CONDITION NAME

SINC18:	PUSHJ	PP,LNKSET	;GET ADDRESS
	LDB	TE,CO.DAT##	;GET ASSOCIATED DATA-NAME
	HRRZ	TD,@SRCKYL	;IS IT THE
	CAIE	TE,(TD)		;  CURRENT KEY?
	JRST	SINC14		;NO

	SKIPN	SRCFLG		;YES--ANY HIGHER KEYS NOT MENTIONED?
	JRST	SINC33		;NO--OK
SINC19:	MOVEI	DW,^D382	;YES--PUT OUT DIAG
	PUSHJ	PP,OPNFAT
	JRST	SINC34

;NO MORE KEYS -- PUT OUT DIAG FOR EACH REMAINING CONDITION

SINC20:	MOVE	TC,EOPLOC
	MOVEI	TC,1(TC)
	MOVEM	TC,CUREOP

SINC21:	SETZM	OPERND
	SKIPN	0(TC)		;HAS OPERAND BEEN USED?
	JRST	SINC24		;YES
	MOVE	TA,1(TC)	;NO--
	LDB	TE,LNKCOD	;  IS IT
	CAIE	TE,TB.CON	;  CONDITION-NAME?
	JRST	SINC22		;NO
	MOVEI	DW,^D384	;YES
	PUSHJ	PP,OPNFAT
	JRST	SINC24

SINC22:	TLNN	TA,GNNOTD
	MOVEM	TC,OPERND
	PUSHJ	PP,BMPEOP	;STEP DOWN TO SECOND OPERAND
	JRST	BADEOP		;OOPS!
	AOS	TC,CUREOP
	MOVE	TE,1(TC)
	TLNN	TE,GNNOTD
	MOVEM	TC,OPERND
	MOVEI	DW,^D383
	SKIPN	TC,OPERND
	JRST	SINC23
	PUSH	PP,CUREOP
	MOVEM	TC,CUREOP
	PUSHJ	PP,OPNFAT
	POP	PP,CUREOP
	JRST	SINC24

SINC23:	PUSHJ	PP,OPFAT
SINC24:	PUSHJ	PP,BMPEOP	;IF NO MORE OPERANDS,
	POPJ	PP,		;  WE ARE DONE
	AOS	TC,CUREOP	;LOOP THROUGH
	JRST	SINC21		;  ALL OPERANDS
;FIRST OPERAND OF A PAIR IS CURRENT KEY

SINC26:	PUSHJ	PP,BMPEOP	;GET SECOND ONE
	JRST	BADEOP		;NONE--PHASE D ERROR
	AOS	TC,CUREOP
	HRRM	TC,OPERND
	JRST	SINC28

;SECOND OPERAND OF A PAIR IS CURRENT KEY

SINC27:	HRRM	TC,OPERND
	MOVSS	OPERND

SINC28:	SWOFF	FEOFF1		;CLEAR FLAGS
	HLRZ	TC,OPERND
	MOVEM	TC,CUREOP
	SKIPE	SRCFLG		;IF MORE MAJOR KEYS NOT MENTIONED,
	JRST	SINC31		;  ERROR

	MOVEI	LN,EBASEA
	PUSHJ	PP,SETOPN
	HRRZ	TC,OPERND
	MOVEI	LN,EBASEB##
	PUSHJ	PP,SETOPN

	TSWT	FERROR
	PUSHJ	PP,SINC50	;GENERATE COMPARISONS

SINC30:	HLRZ	TD,OPERND
	SETZM	(TD)
	HRRZ	TD,OPERND
	SETZM	(TD)

	MOVNI	TD,2
	ADDB	TD,SRCOPN
	JUMPG	TD,SINC17
	POPJ	PP,

SINC31:	MOVEI	DW,^D382
	PUSHJ	PP,OPNFAT
	JRST	SINC30
;PRODUCE CODE FOR CONDITION-NAME TEST

SINC33:	HRRM	TD,1(TC)	;PUT DATAB LINK IN OPERAND
	HRRZM	TA,CURCON##	;SAVE ADDRESS OF CONTAB ENTRY

	LDB	TE,CO.NVL##	;GET NUMBER OF VALUES
	JUMPE	TE,SINC34	;IF NONE, FORGET IT
	MOVE	TD,2(TA)	;IF
	TLNN	TD,1B18		;  RANGE
	CAIE	TE,1		;  OR MORE THAN ONE VALUE
	JRST	SINC35		;  ERROR

	MOVEI	LN,EBASEA
	PUSHJ	PP,SETOPN

	MOVE	TA,CURCON	;IS VALUE
	MOVE	TE,2(TA)	;  A FIGURATIVE
	TRNE	TE,1B19		;  CONSTANT?
	JRST	SINC37		;YES

	MOVE	TE,[XWD EBASEA,EBASEB]
	BLT	TE,EBASBX##
	HLRZ	TE,2(TA)
	ANDI	TE,77777
	IORI	TE,AS.TAG
	HRLI	TE,^D36
	MOVEM	TE,EBASEB##
	SETZM	EINCRB##

	TSWF	FANUM		;IF 'A' IS NUMERIC,
	SWONS	FBNUM!FBSIGN	;  THEN 'B' IS SIGNED NUMERIC
	SWOFF	FBSIGN!FBNUM
	SWOFF	FBSUB

SNC33A:	TSWT	FERROR		;IF WE HAVEN'T HAD TROUBLE,
	PUSHJ	PP,SINC50	;  GENERATE COMPARISONS

SINC34:	HLRZ	TE,OPERND
	SETZM	(TE)

	SOS	TD,SRCOPN
	JUMPG	TD,SINC17
	POPJ	PP,

;ONLY ONE VALUE ALLOWED FOR CONDITION NAME

SINC35:	MOVEI	DW,^D385
	PUSHJ	PP,OPNFAT
	JRST	SINC34
;IT IS CONDITION-NAME WITH VALUE OF FIG. CONST.

SINC37:	HLRZ	TC,OPERND	;SET BOTH OPERANDS TO BE
	HRRM	TC,OPERND	;  IN SAME PLACE
	LDB	TE,[POINT 6,2(TA),7];GET FIG. CONST. FLAGS
	LSH	TE,1		;LEAVE ROOM FOR 'ALL' FLAG
	TRZE	TE,1B29		;WAS IT 'ALL'?
	TRO	TE,1		;YES
	TRO	TE,1B20!1B21!1B22
	DPB	TE,[POINT 16,(TC),15]
	MOVEI	LN,EBASEB
	PUSHJ	PP,SETOPN
	JRST	SNC33A
;PUT OUT COMPARISON CODE

SINC50:	MOVE	TE,[XWD EBASEA,ESAVSC##]	;SAVE PARAMETERS
	BLT	TE,ESVSCX##

	TLZ	W1,777774	;CREATE
	TLO	W1,IFNEQ	;  'IF NOT EQUAL'
	PUSHJ	PP,GETTAG	;GET TAG FOR 'EQUAL' PATH
	MOVEM	CH,SRC%E##
	HRL	W2,CH

	PUSH	PP,SW
	PUSH	PP,OPERND
	PUSHJ	PP,IFGNZC##	;GENERATE 'IF NOT EQUAL'
	POP	PP,OPERND
	POP	PP,SW

	MOVS	TE,[XWD EBASEA,ESAVSC];RESTORE
	BLT	TE,EBASBX	;  PARAMETERS

	TLZ	W1,777774	;CREATE
	SKIPGE	@SRCKYL		;  EITHER
	TLOA	W1,IFLESS	;  'IF LESS' OR
	TLO	W1,IFGRT	;  'IF GREATER'
	HRL	W2,SRC%I
	PUSHJ	PP,IFGNZC	;GENERATE 'IF LESS' OR 'IF GREATER'

	MOVE	CH,SRC%I	;GENERATE
	HRLI	CH,JRST.+ASINC	;  <JRST <DECREMENT CODE>>
	PUSHJ	PP,PUTASN
	MOVEI	CH,1
	PUSHJ	PP,PUTASY

	MOVE	CH,SRC%E	;DEFINE
	JRST	PUTTAG		;  'EQUAL' TAG AND LEAVE

	>	;END OF 'IFN SERCH'
AC1==1B30

IFLESS==1B27	;'LESS' FLAG FOR 'IF' OPERATOR
IFGRT==1B28	;'GREATER' FLAG FOR 'IF' OPERATOR
IFNEQ==3B28	;'NOT EQUAL' FLAG FOR 'IF' OPERATOR
IFALL=1B27	;'ALL' FLAG IN SEARCH OPERATOR

	END
    