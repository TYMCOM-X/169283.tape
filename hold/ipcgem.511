TITLE	IPCGEN FOR COBOL 5(105)		
SUBTTL	GENERATORS FOR SUBPROGRAMMING STATEMENTS	CHUCK MCCOMAS

;COPYRIGHT 1972, DIGITAL EQUIPMENT CORP, MAYNARD, MA

TWOSEG
RELOC	400000

ENTRY	ENTRGN		;ENTER AND CALL
ENTRY	ARGGEN		;USING
ENTRY	GOBKGN		;GOBACK AND EXIT PROGRAM
ENTRY	NTRYGN		;ENTRY
ENTRY	CANGEN		;CANCEL

IPCGEN::
SUBTTL	GENERATE AN "ENTER" OR "CALL"

ENTRGN:	TLNE	W1,(CALLF)	;THIS A "CALL" OR AN "ENTER"?
	JRST	CALLGN		;CALL, USE NEW STYLE

	TLNN	W1,(MACRO)	;ENTER MACRO?
	TLNE	W1,(F10)	;OR ENTER FORTRAN?
	JRST	CALLGN		;YES, USE NEW CALLING SEQUENCE

;ENTER FORTRAN-IV -- USE OLD CALLING SEQUENCE

	SWOFF	FEOFF1		;TURN OFF MOST FLAGS
	MOVEM	W1,OPLINE##
	PUSHJ	PP,READEM##
	MOVEM	EACA,EOPNXT##
	EXCH	W1,OPLINE
	HRRZ	TE,W2
	CAIN	TE,ARGOP.
	PUSHJ	PP,SUBARG

	HRRZ	TA,EOPLOC##	;PICK UP OPERAND'S TABLE-LINK
	MOVE	CH,2(TA)
	ANDI	CH,77777	;CLEAR ALL BUT LOW-ORDER 15 BITS
	IORI	CH,AS.EXT##	;SET "EXTERNAL"

	HRLI	CH,AC16+JSA.##	;F40 -- USE JSA WITH IN LINE ARGS
	PUSHJ	PP,PUTASY##

	TSWT	FAS3		;ARE WE IN NON-RESIDENT SEGMENT?
	JRST	ENTR4		;NO--GO TO "USING"

	MOVE	TA,2(TA)	;YES--GET OPERAND LINK
	PUSHJ	PP,LNKSET##	;GET EXTAB ADDRESS
	SETO	TE,		;SET "REFERENCED IN NON-RES"
	DPB	TE,EX.NRS##

ENTR4:	MOVE	W1,OPLINE
	HRRZ	TE,W2
	CAIN	TE,ARGOP.
	JRST	ARGGEN

ENTR5:	MOVE	TD,EOPLOC
	HRLI	TD,2(TD)
	MOVN	EACA,[XWD 2,2]
	ADDB	EACA,EOPNXT
	BLT	TD,0(EACA)
	JRST	@EOPCOD##(TE)
SUBTTL	GENERATE "USING" ARGUMENT LIST FOR ENTER FORTRAN-IV

ARGGEN:	TSWF	FERROR		;IF ERRORS WERE SEEN,
	POPJ	PP,		;  QUIT

	HRRZ	TC,EOPLOC	;AIM CUREOP AT FIRST USING OPERAND
	ADDI	TC,3
	MOVEM	TC,CUREOP##

ARGEN1:	PUSHJ	PP,ARG		;PROCESS CURRENT ARG OPERAND

;GENERATE IN LINE ARG LIST ENTRY FOR THIS OPERAND

	MOVE	TC,CUREOP	;SET PTR TO OPERAND
	MOVE	CH,(TC)		;GET 1ST WORD TO PUT OUT
	JUMPE	CH,ARGN3B	;NONE THERE
	PUSHJ	PP,PUTASY
	MOVE	CH,1(TC)	;SECOND WORD
	JUMPE	CH,ARGN3B	;NONE THERE
	PUSHJ	PP,PUTASN##

ARGN3B:	MOVEI	TC,2		;BUMP UP TO NEXT EOPTAB ENTRY
	ADDB	TC,CUREOP
	MOVE	EACA,EOPNXT	;END OF LIST?
	CAIL	TC,(EACA)
	POPJ	PP,		;YES

	SKIPE	(TC)		;NO, THIS A WIPED OUT SUBSCRIPT?
	JRST	ARGEN1		;NO, PROCESS IT
	JRST	ARGN3B		;YES, TRY NEXT ENTRY
;SCAN THRU ARGUMENT OPERANDS LOOKING FOR SUBSCRIPTED ITEMS

SUBARG:	MOVEM	EACA,EOPNXT
	HRRZ	TC,EOPLOC
	ADDI	TC,3
	CAIL	TC,(EACA)
	JRST	BADEOP##

SARG1:	MOVEM	TC,CUREOP

	PUSHJ	PP,SARG		;SET UP SUBSCRIPTS FOR CURRENT ARG

	MOVE	EACA,EOPNXT
	CAIL	TC,(EACA)
	POPJ	PP,
	JRST	SARG1

SUBTTL	CALL/ENTER ARGUMENT ROUTINES

;PROCESS ONE ARG OPERAND
;  PUT 2-WORD DESCRIPTOR IN LITERALS IF NECESSARY
;  AND SET UP CODE TO PUT OUT TO ASSEMBLY FILE

ARG:	AOS	ARGCTR		;COUNT ARGS

	MOVE	TE,0(TC)	;IS IT A LITERAL?
	TLNE	TE,GNLIT
	JRST	ARGN1B		;YES
	MOVE	TE,1(TC)	;NO--IS IT A DATA-NAME?
	TLNE	TE,GNNOTD	;IS IT A TEMP?
	JRST	ARGN1B		;YES
	LDB	TD,[POINT 3,TE,20]
	CAIN	TD,TB.DAT##
	JRST	ARGN1B		;YES
	TLNN	TE,FLOBIT##	;NO--BETTER BE PROCEDURE-NAME
	CAIN	TE,TB.PRO##
	JRST	ARGEN9		;IT MUST BE
	JRST	ARGN9B		;IT ISN'T

ARGN1B:	MOVEI	LN,EBASEA##
	PUSHJ	PP,SETOPN##
	TSWF	FERROR;
	JRST	ARGN9C

	HRRZ	TE,EMODEA##
	CAIN	TE,LTMODE##
	JRST	ARGEN4

	CAIN	TE,FCMODE##
	JRST	ARGEN8

	MOVSM	TC,OPERND##
	PUSHJ	PP,SUBSCA##
	HLRZ	TC,OPERND

	MOVE	TE,EMODEA
ARGN1A:	MOVE	CH,ARGLST(TE)	;GET ARGUMENT TYPE

	CAILE	TE,DSMODE##	;IS IT DISPLAY?
	JRST	ARGEN2		;NO

	MOVE	TE,1(TC)	;IS IT A TEMP?
	TLNE	TE,GNNOTD
	JRST	ARGN2A		;YES--SUBSCRIPTED
;ARGUMENT IS DISPLAY ITEM

ARGN1C:	MOVE	TA,[XWD BYTLIT##,2]
	PUSHJ	PP,STASHL##
	PUSHJ	PP,MBYTEA##

	PUSHJ	PP,ARSUB2	;ZERO OUT SUBSCRIPTS
	PUSH	PP,CH		;SAVE ARG TYPE FOR LATER
	HRRZ	CH,ELITPC	;SAVE LIT PTR FOR ASY OUTPUT
	IORI	CH,AS.LIT
	PUSH	PP,CH
	AOS	ELITPC##

	MOVE	TA,[XWD XWDLIT##,2]
	PUSHJ	PP,STASHL
	HRLZ	TA,EDPLA##
	JUMPGE	TA,ARGN1D
	MOVMS	TA
	TLO	TA,1B30
ARGN1D:	TSWF	FANUM;
	TLO	TA,1B18
	TSWF	FASIGN;
	TLO	TA,1B19

	MOVE	TE,CUREOP	;IF
	MOVE	TE,0(TE)	;  OPERAND
	TLNE	TE,GNLIT	;  IS LITERAL
	TLOA	TA,(1B3)	; SET
	TLZA	TA,(1B3)	;  BIT 3
	TLNN	TE,GNALL	;  AND IF 'ALL'
	TLZA	TA,(1B2)	;  SET
	TLO	TA,(1B2)	;  BIT 2

	HRRI	TA,AS.CNB##
	PUSHJ	PP,STASHL
	HRL	TA,ESIZEA##
	PUSHJ	PP,STASHL
	AOS	ELITPC

	MOVE	TC,CUREOP	;SET UP ASY FILE OUTPUT
	MOVE	CH,-1(PP)	;GET BACK ARG TYPE
	HRRI	CH,AS.MSC
	TLO	CH,ASINC
	MOVEM	CH,(TC)
	POP	PP,CH		;GET LIT PTR
	MOVEM	CH,1(TC)
	POP	PP,CH		;SCRATCH ARG TYPE FROM PDL

	JRST	ARGEN3
;ARG IS NUMERIC DATA ITEM

;SIMULATE PUT.A## BUT PUT VALUES
;  IN EOPTAB INSTEAD OF ON ASY FILE

ARGEN2:	MOVE	TC,CUREOP	;GET PTR TO OPERAND
	LDB	TB,[POINT 1,(TC),9]	;IS IT IN LINKAGE SECTION?
	SKIPE	TB		;NO
	TLO	CH,20		;YES, SET INDIRECT BIT FOR ARG PTR

ARGN2A:	MOVE	TC,CUREOP
	TSWF	FASUB		;IS IT SUBSCRIPTED?
	JRST	PUT.A2		;YES

PUT.A1:	HRR	CH,EBASEA
	SKIPE	EINCRA
	JRST	PUT.A3
	PUSHJ	PP,ARSUB2	;ZERO SUBSCRIPTS
	MOVEM	CH,(TC)
	SETZM	1(TC)
	JRST	ARGEN3

PUT.A3:	TLO	CH,ASINC
	PUSHJ	PP,ARSUB2	;ZERO SUBSCRIPTS
	MOVEM	CH,(TC)
	HRRZ	CH,EINCRA
	MOVEM	CH,1(TC)
	JRST	ARGEN3

PUT.A2:	LDB	TE,[POINT 3,EBASEA,20]
	CAIE	TE,TB.DAT
	JRST	PUT.A1

	TLO	CH,SXR##
	HRR	CH,EINCRA
	PUSHJ	PP,ARSUB2	;ZERO SUBSCRIPTS
	MOVEM	CH,(TC)
	SETZM	1(TC)

;RETURN

ARGEN3:	POPJ	PP,
;OPERAND IS A LITERAL

ARGEN4:	TSWT	FANUM		;IS IT NUMERIC?
	JRST	ARGEN7		;NO

	PUSHJ	PP,CONVNL##	;YES--CONVERT IT TO BINARY
	JUMPN	TD,ARGEN5	;2-WORD COMP?

	MOVE	CH,[AS.D1##,,1]	;NO--1 WORD
	PUSHJ	PP,PUTAS1
	TSWT	FLNEG		;NEGATIVE?
	SKIPA	CH,TC		;NO
	MOVN	CH,TC		;YES
	PUSHJ	PP,PUTAS1

	MOVSI	CH,ARG.##

	PUSHJ	PP,ARSUB1	;SET UP ASY OUTPUT
	AOS	EAS1PC
	JRST	ARGEN3

ARGEN5:	TSWF	FLNEG		;NEGATIVE?
	PUSHJ	PP,NEGATL##	;YES--NEGATE IT

	MOVE	CH,[AS.D2##,,2]
	PUSHJ	PP,PUTAS1
	MOVE	CH,TD
	PUSHJ	PP,PUTAS1
	MOVE	CH,TC
	PUSHJ	PP,PUTAS1

	MOVSI	CH,ARG.+11B30

	PUSHJ	PP,ARSUB1	;SET UP ASY OUTPUT
	MOVEI	TA,2
	ADDM	TA,EAS1PC
	JRST	ARGEN3
;ARGUMENT IS A NON-NUMERIC LITERAL

ARGEN7:	MOVSI	TA,ASCLIT##
	PUSHJ	PP,STASHL
	HRRZM	TE,CURLIT##

	MOVE	TA,CUREOP
	MOVE	TA,1(TA)
	PUSHJ	PP,LNKSET
	HRLI	TA,350700
	LDB	TD,TA
	MOVEI	TC,D7MODE##
	MOVEM	TC,EMODEB##
	MOVEM	TA,EBYTEA##
	PUSHJ	PP,VALLIT##
	PUSHJ	PP,STASHL
	SUB	TE,CURLIT
	HRRM	TE,@CURLIT

	HRRZ	CH,TE
	EXCH	CH,ELITPC
	ADDM	CH,ELITPC
	IORI	CH,AS.LIT##
	MOVEM	CH,EINCRA##
	MOVE	TE,[XWD ^D36,AS.MSC##]
	MOVEM	TE,EBASEA
	MOVEI	TE,D7MODE
	MOVEM	TE,EMODEA
	MOVE	CH,ARGLST+1
	JRST	ARGN1C
;ARGUMENT IS A FIGURATIVE CONSTANT

ARGEN8:	HRRZ	TE,EFLAGA##	;GET FIG. CONST. TYPE
	CAIN	TE,0		;TODAY?
	JRST	ARGN8F		;YES

	CAILE	TE,5		;IF NOT IN RANGE,
	MOVEI	TE,1		;  USE SPACES
	PUSHJ	PP,@FCLIST-1(TE)	;  OTHERWISE DISPATCH

	MOVE	CH,ARGLST
	MOVE	TC,CUREOP
	MOVEM	CH,(TC)
	JRST	ARGN8G

FCLIST:	EXP	ARGN8H	;SPACES
	EXP	ARGN8D	;ZEROES
	EXP	ARGN8E	;QUOTES
	EXP	ARGN8B	;HIGH-VALUES
	EXP	ARGN8A	;LOW-VALUES

;SUBROUTINE TO SET UP ASY FILE OUTPUT IN THE STYLE OF PUT.LD

ARSUB1:	MOVE	TC,CUREOP	;GET PTR TO CURRENT OPERAND
	HRRI	CH,AS.MSC	;SIMULATE PUT.LD##,
	TLO	CH,ASINC	;  BUT PUT ITEMS IN EOPTAB
	MOVEM	CH,(TC)		;  INSTEAD OF IN ASY FILE
	HRRZ	CH,EAS1PC
	IORI	CH,AS.PAR
	MOVEM	CH,1(TC)
CPOPJ:	POPJ	PP,

;SUBROUTINE TO ZERO OUT SUBSCRIPTS IN EOPTAB ENTRY

ARSUB2:	MOVE	TC,CUREOP	;PTR TO CURRENT OPERAND
	MOVE	TE,2(TC)	;WORD AFTER ENTRY A ZEROED SUBSCRIPT?
	JUMPE	TE,CPOPJ	;YES
	LDB	TE,[POINT 1,(TC),9]	;OPERAND IN LINKAGE SECTION?
	JUMPN	TE,CPOPJ	;YES
	LDB	TE,[POINT 6,1(TC),17]	;GET # OF SUBSCRIPTS
	LSH	TE,1
	ADDI	TC,(TE)		;AIM PTR AT LAST SUBSCRIPT
ARS2A:	CAMN	TC,CUREOP	;ALL SUBSCRIPTS WIPED OUT?
	POPJ	PP,		;YES
	SETZM	(TC)		;NO, ZERO IT
	SUBI	TC,2		;BACK UP ONE ENTRY
	JRST	ARS2A
;ARGUMENT IS "TODAY"

ARGN8F:	MOVE	CH,ARGLST
	MOVE	TC,CUREOP
	MOVEM	CH,(TC)

	HRRZ	TB,1(TC)	;GET TEMP ADDRESS
	MOVEI	TD,^D12		;SIZE OF 'TODAY'
	MOVEI	TC,440600
	JRST	ARGN8C

;ARGUMENT IS 'LOW-VALUES'

ARGN8A:	TDCA	TB,TB

;ARGUMENT IS 'HIGH-VALUES'

ARGN8B:	HRROI	TB,-2

	MOVE	TA,[XWD OCTLIT##,1]
	PUSHJ	PP,STASHL
	MOVE	TA,TB
	PUSHJ	PP,STASHL
	HRRZ	TB,ELITPC
	IORI	TB,AS.LIT
	AOS	ELITPC
	POPJ	PP,

;ARGUMENT IS A FIGURATIVE CONSTANT  (CONT'D)

;ARGUMENT IS 'ZEROES'

ARGN8D:	PUSHJ	PP,AZRJ.##
	HRRZ	TB,EAZRJ##
	POPJ	PP,

;ARGUMENT IS 'QUOTES'

ARGN8E:	PUSHJ	PP,AQRJ.##
	HRRZ	TB,EAQRJ##
	POPJ	PP,

;ARGUMENT IS 'SPACES'

ARGN8H:	PUSHJ	PP,ASRJ.##
	HRRZ	TB,EASRJ##
	POPJ	PP,
;COMMON EXIT FOR FIG CONSTANT ROUTINES

ARGN8G:	MOVE	TD,[EXP 1B2+1]	;SIZE + 'FIG. CONST.'
	MOVEI	TC,440700

ARGN8C:	MOVE	TA,[XWD BYTLIT,2]
	PUSHJ	PP,STASHL
	HRRZI	TA,AS.MSC
	PUSHJ	PP,STASHL
	HRLZ	TA,TC
	HRR	TA,TB
	PUSHJ	PP,STASHL

	HRRZ	CH,ELITPC
	IORI	CH,AS.LIT
	AOS	ELITPC
	MOVE	TC,CUREOP
	MOVEM	CH,1(TC)
	MOVE	TA,[XWD XWDLIT,2]
	PUSHJ	PP,STASHL
	MOVE	TA,TD
	HRRI	TA,AS.CNB
	PUSHJ	PP,STASHL
	MOVS	TA,TD
	HRRI	TA,AS.CNB
	PUSHJ	PP,STASHL
	AOS	ELITPC
	JRST	ARGEN3
;ARGUMENT IS A PROCEDURE NAME

ARGEN9:	TLNN	TE,FLOBIT
	JRST	ARGN9A

	ANDI	TE,77777
	ADD	TE,FLOLOC##
	HRRZ	TE,0(TE)
	LDB	TD,[POINT 3,TE,20]
	CAIE	TD,TB.PRO
	JRST	ARGN9B

ARGN9A:	ANDI	TE,77777
	MOVEI	CH,AS.PRO##(TE)
	HRLI	CH,ARG.+17B30
	MOVE	TC,CUREOP	;GET PTR TO CURRENT OPERAND
	MOVEM	CH,(TC)
	SETZM	1(TC)
	JRST	ARGEN3

ARGN9B:	MOVEI	DW,^D317
	PUSHJ	PP,OPNFAT##
ARGN9C:	MOVE	TC,CUREOP	;GET PTR TO CURRENT OPERAND
	SETZM	(TC)		;SIGNAL NOTHING TO OUTPUT TO ASY FILE
	SOS	ARGCTR		;DON'T COUNT THIS ARG
	JRST	ARGEN3
;SET UP SUBSCRIPTS FOR ARGS THAT REQUIRE THEM
;  ALSO SET UP TODAY IF IT IS USED AS AN ARG

SARG:	MOVSM	TC,OPERND
	LDB	TE,[POINT 3,1(TC),20]	;IS IT DATA-NAME?
	CAIE	TE,TB.DAT
	JRST	SARG3		;NO

	MOVEI	LN,EBASEA	;YES--SET UP PARAMETERS
	PUSHJ	PP,SETOPN
	TSWF	FERROR		;IF ERROR,
	JRST	SARG4		;  FORGET IT

	PUSHJ	PP,SUBSCA	;SEE IF IT IS
	TSWT	FASUB		;  SUBSCRIPTED
	JRST	SARG4		;NO--FORGET THIS ONE

	MOVE	EACC,EAS1PC##	;GET %PARAM ADDRESS
	IORI	EACC,AS.PAR##
	AOS	EAS1PC

	HLRZ	TC,OPERND
	HRRM	EACC,0(TC)
	MOVE	CH,MOVSAC##
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACC
	PUSHJ	PP,PUTASN

	MOVE	CH,[XWD AS.OCT##,1]
	PUSHJ	PP,PUTAS1##
	MOVEI	CH,0
	PUSHJ	PP,PUTAS1

	HRRZ	TE,EMODEA
	CAIG	TE,DSMODE
	PUSHJ	PP,SARG5

	MOVSI	TD,GNNOTD
	MOVE	TE,ESIZEA
	DPB	TE,ACSIZE##
	MOVE	TE,EMODEA
	DPB	TE,ACMODE##
	HRR	TD,EDPLA
	LDB	TE,[POINT 6,1(TC),17]
	MOVEM	TD,1(TC)

SARG2A:	MOVEI	TC,2(TC)
	SOJL	TE,SARG2B
	SETZM	0(TC)
	JRST	SARG2A
SARG2B:	POPJ	PP,

;OPERAND IS NOT A DATA NAME

SARG3:	MOVE	TE,0(TC)	;GET FIRST WORD OF OPERAND
	TLNE	TE,GNLIT	;IS IT EITHER A LITERAL OR FIG. CONST.?
	TLNN	TE,GNFIGC	;YES--FIG. CONST.?
	JRST	SARG4		;NO

	TLNN	TE,GNTODY	;IS IT "TODAY"?
	JRST	SARG4		;NO

	MOVEI	TE,2		;YES--RESERVE
	PUSHJ	PP,GETEMP##	;  2 TEMP WORDS
	HRRM	EACC,1(TC)	;SAVE THE TEMP ADDRESS

	MOVE	CH,[XWD EPJPP##,TODAY.##]	;GENERATE <PUSHJ 17,TODAY.>
	PUSHJ	PP,PUT.EX##
	MOVE	CH,[XWD MOVEM.##,AS.MSC]	;GENERATE <MOVEM 0,%TEMP>
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACC
	PUSHJ	PP,PUTASN

	MOVE	CH,[XWD MOVEM.+AC1,AS.MSC]	;GENERATE <MOVEM 1,%TEMP+1>
	PUSHJ	PP,PUTASY
	MOVEI	CH,1(EACC)
	PUSHJ	PP,PUTASN

;GO TO NEXT OPERAND

SARG4:	PUSH	PP,CUREOP	;SAVE CUREOP (TO MAKE THIS END LIKE SARG2B)
	PUSHJ	PP,BMPEOP##
	JFCL			;IGNORE SKIP RETURNS
	MOVE	TC,CUREOP	;SET TC TO NEW ARG
	POP	PP,CUREOP	;RESET CUREOP TO ARG JUST DONE
	POPJ	PP,
;WRITE OUT PARAMETER WORD FOR SUBSCRIPTED DISPLAY ITEM

SARG5:	AOS	EAS1PC
	MOVE	CH,[XWD AS.XWD##,1]
	PUSHJ	PP,PUTAS1
	HRLZ	CH,EDPLA
	JUMPGE	CH,SARG5A
	MOVMS	CH
	TLO	CH,1B30
SARG5A:	TSWF	FANUM;
	TLO	CH,1B18
	TSWF	FASIGN;
	TLO	CH,1B19
	HRRI	CH,AS.CNB
	PUSHJ	PP,PUTAS1
	HRL	CH,ESIZEA
	JRST	PUTAS1
;TABLE OF ARGUMENT TYPES FOR "USING"

ARGLST:	XWD	ARG.+10B30+ASINC,AS.MSC		;SIXBIT
	XWD	ARG.+10B30+ASINC,AS.MSC		;ASCII
	Z					;NOT USED
	XWD	ARG.,0				;1-WORD COMP
	XWD	ARG.+11B30,0			;2-WORD COMP
	XWD	ARG.+2B30,0			;FL.PT.
	XWD	ARG.,0				;INDEX


;MISCELLANEOUS CONSTANTS

AC16==16B30
AC17==17B30

ASINC==1B19

ARGOP.==46	;OPERATOR CODE FOR "ARG"

AC1==1B30

MACRO==1B9		;MACRO FLAF
F40==1B10		;FORTRAN-IV FLAG
USINGF==1B11		;USING FLAG FOR CALL AND ENTER
CALLF==1B12		;CALL FLAG
F10==1B13		;FORTRAN FLAG (NEW FORTRAN)

PDENTF==1B9		;PROC DIV ENTRY POINT FLAG

GOBAKF==1B9		;GOBACK
EXPGMF==1B10		;EXIT PROGRAM
SUBTTL	GENERATE "CALL"

CALLGN:	SWOFF	FEOFF1		;CLR FLAGS
	SETZM	ARGCTR##	;CLR ARG CTR
	TLNN	W1,(USINGF)	;THIS CALL HAVE ARGS?
	JRST	CALL1		;NO

	MOVEM	W1,OPLINE	;SAVE SRC POSITION AND FLAGS OF CALL
	PUSHJ	PP,READEM	;GET USING OPERATOR
	MOVEM	EACA,EOPNXT
	EXCH	W1,OPLINE	;STASH USING & GET BACK CALL

	MOVEM	EACA,EOPNXT
	HRRZ	TC,EOPLOC
	ADDI	TC,3
	CAIL	TC,(EACA)
	JRST	BADEOP

CALL2:	MOVEM	TC,CUREOP

	TLNN	W1,(CALLF)	;CALL OR ENTER?
	JRST	CALL8		;ENTER, NO SPECIAL CHECK ON ARGS

	HRRZ	TA,1(TC)	;GET PTR TO OPERAND
	LDB	TB,[POINT 3,TA,20]	;DATAB ITEM?
	CAIE	TB,CD.DAT
	JRST	CALL8		;NO, LET LITERALS PASS
	PUSHJ	PP,LNKSET
	LDB	TB,DA.RES##	;IS ITEM LEFT JUSTIFIED IN A WORD?
	CAIN	TB,44
	JRST	CALL8		;YES, IT IS GOOD
	MOVEI	DW,^D396	;NO, ?MUST BE WORD ALIGNED
	PUSHJ	PP,OPNFAT

CALL8:	MOVE	TC,CUREOP	;GET BACK OPERAND PTR
	PUSHJ	PP,SARG		;SET UP SUBSCRIPTS FOR CURRENT ARG
	MOVE	TC,CUREOP
	PUSHJ	PP,ARG		;SET ARG LIST FOR LATER OUTPUT

CALL3:	MOVEI	TC,2		;BUMP UP TO NEXT EOPTAB ENTRY
	ADDB	TC,CUREOP
	MOVE	EACA,EOPNXT	;END OF LIST?
	CAIL	TC,(EACA)
	JRST	CALL1		;YES

	SKIPE	(TC)		;NO, THIS A WIPED OUT SUBSCRIPT?
	JRST	CALL2		;NO, PROCESS IT
	JRST	CALL3		;YES, TRY NEXT ENTRY
CALL1:	HRRZ	TA,EOPLOC	;AIM AT SUBPROG NAME
	MOVEI	TB,1(TA)	;RESET CUREOP
	MOVEM	TB,CUREOP
	MOVE	TA,2(TA)	;GET EXTAB LINK
	PUSHJ	PP,LNKSET
	LDB	TB,EX.ENT##	;ENTRY?
	MOVEI	DW,^D398
	JUMPN	TB,OPNFAT	;IF SO, ?ILLEGAL CALL

	MOVE	TA,[OCTLIT,,1]	;PUT NEGATIVE ARG CNT IN LITERALS
	PUSHJ	PP,STASHL	;  IN LEFT HALF OF -1(16)
	MOVN	TA,ARGCTR
	HRLZI	TA,(TA)
	PUSHJ	PP,STASHL
	AOS	ELITPC

	MOVE	CH,[MOVEI.+ASINC+AC16,,AS.MSC]	;PUT OUT "MOVEI 16,%LIT00+N"
	PUSHJ	PP,PUTASY
	HRRZ	CH,ELITPC
	IORI	CH,AS.LIT
	PUSHJ	PP,PUTASN

	HRRZ	TA,EOPLOC	;GET CALL OPERAND'S LINK
	MOVE	CH,2(TA)	;PUT OUT "PUSHJ 17,ENTRY-ADDR"
	ANDI	CH,77777
	IORI	CH,AS.EXT
	TLO	CH,PUSHJ.+AC17
	PUSHJ	PP,PUTASY

	TSWT	FAS3		;ARE WE IN NON-RESIDENT SEGMENT?
	JRST	CALL7		;NO--GO TO "USING"

	MOVE	TA,2(TA)	;YES--GET OPERAND LINK
	PUSHJ	PP,LNKSET	;GET EXTAB ADDRESS
	SETO	TE,		;SET "REFERENCED IN NON-RES"
	DPB	TE,EX.NRS

CALL7:	TLNN	W1,(USINGF)	;ANY ARGS?
	JRST	CALL6		;NO
;PUT ARG LIST FOR CALL IN LITERALS

	HRRZ	TC,EOPLOC	;RESET CUREOP TO TOP OF LIST
	ADDI	TC,3

CALL4:	MOVEM	TC,CUREOP
	SKIPN	CH,(TC)		;OUTPUT ARG LIST TO LITFIL
	JRST	CALL5
	MOVE	TA,[XWDLIT,,2]
	PUSHJ	PP,STASHL
	HLRZ	TA,CH
	ANDI	TA,740		;GET AC FIELD ONLY
	CAIN	TA,2B30		;CONVERT TO NEW ARG TYPE CODES
	MOVEI	TA,4B30
	CAIN	TA,0B30
	MOVEI	TA,2B30
	CAIN	TA,10B30
	MOVEI	TA,15B30
	CAIN	TA,17B30
	MOVEI	TA,7B30
	TLNE	CH,20		;INDIRECT BIT ON?
	TRO	TA,20		;YES, SET IN TA TOO
	PUSHJ	PP,STASHL
	HRRZ	TA,(TC)
	HRL	TA,1(TC)
	PUSHJ	PP,STASHL
	AOS	ELITPC

CALL5:	ADDI	TC,2		;ON TO NEXT ARG
	MOVE	EACA,EOPNXT	;END OF LIST?
	CAIGE	TC,(EACA)
	JRST	CALL4		;NO
	POPJ	PP,		;YES

;NO ARGS

CALL6:	MOVE	TA,[OCTLIT,,1]	;0 TO 1ST ITEM OF ARGLIST
	PUSHJ	PP,STASHL
	MOVEI	TA,0
	PUSHJ	PP,STASHL
	AOS	ELITPC
	POPJ	PP,
SUBTTL	GENERATE AN "ENTRY"

NTRYGN:	TLNN	W1,(PDENTF)	;THIS THE PROCEDURE DIVISION ENTRY?
	JRST	NTRY1		;NO, PUT OUT JRST OVER ENTRY CODE

	MOVE	CH,EAS1PC	;YES, GET A %PARAM LOC FOR CALL FLAG
	AOS	EAS1PC
	IORI	CH,AS.PAR
	HRRZM	CH,RETPTR##
	PUSHJ	PP,PUTOC0	;OCTAL 0 TO AS1FIL

	MOVE	CH,EAS1PC	;AND A %PARAM LOC FOR THE CALLER'S ARG PTR
	AOS	EAS1PC
	IORI	CH,AS.PAR
	HRRZM	CH,ARGPTR##
	PUSHJ	PP,PUTOC0	;OCTAL 0 TO AS1FIL
	JRST	NTRY2

NTRY1:	PUSHJ	PP,GETTAG##	;GET TAG FOR JUMP OVER ENTRY CODE
	HRRZM	CH,ENTAGS##	;SAVE
	HRLI	CH,JRST.##	;<JRST %TAG>
	PUSHJ	PP,PUTASY

NTRY2:	HRRZ	TA,EOPLOC	;GET EXTAB LINK FOR ENTRY OPERAND
	HRRZ	CH,2(TA)
	ANDI	CH,77777	;SUBSTITUTE AS.EXT FOR CD.EXT
	IORI	CH,AS.EXT
	HRLI	CH,AS.ENT##	;OUTPUT ENTRY, BUT DON'T BUMP PC
	PUSHJ	PP,PUTASN

	TLNN	W1,(PDENTF)	;PRO. DIV. ENTRY?
	JRST	NTRY6		;NO
	MOVE	CH,EAS2PC##	;YES, SAVE PC
	MOVEM	CH,PRGENT##

NTRY6:	HRLZI	CH,SKIPA.##	;OUTPUT "SKIPA" OVER THE ENTRY PARAMETER
	PUSHJ	PP,PUTASY

	MOVE	CH,[AS.XWD,,1]	;OUTPUT "XWD %SUBRLIST,FILES."
	PUSHJ	PP,PUTASN
	HRLZ	CH,SUBLST##
	TLO	CH,AS.LIT
	HRRI	CH,AS.MSC
	PUSHJ	PP,PUTASY
	MOVE	CH,[AS.FLS##,,AS.MSC]
	PUSHJ	PP,PUTASN

	MOVE	CH,[ASINC+SKIPE.##,,AS.MSC]	;OUTPUT "SKIPE %CALLFLAG"
	PUSHJ	PP,PUTASY
	HRRZ	CH,RETPTR
	PUSHJ	PP,PUTASN

	MOVE	CH,[ILLC.##,,0]	;OUTPUT "ILLC.	0"
	PUSHJ	PP,PUTASY

	MOVE	CH,[ASINC+SETOM.##,,AS.MSC]	;"SETOM %CALLFLAG"
	PUSHJ	PP,PUTASY
	HRRZ	CH,RETPTR
	PUSHJ	PP,PUTASN

	MOVE	CH,[ASINC+AC16+MOVEM.,,AS.MSC]	;"MOVEM 16,%ARGPTR"
	PUSHJ	PP,PUTASY
	HRRZ	CH,ARGPTR
	PUSHJ	PP,PUTASN

	MOVE	CH,[ASINC+PUTF.##,,AS.MSC]	;"PUTF. %FILES"
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASN
	MOVEI	CH,AS.FLS
	PUSHJ	PP,PUTASY

	SKIPE	PRODSW##	;/P ON?
	JRST	NTRY4		;YES, NO TRACE CODE

	HRRZ	TA,EOPLOC	;MAKE PTR TO HLDTAB ENTRY CONTAINING
	HRRZ	TA,2(TA)	;  NAME OF ENTRY
	PUSHJ	PP,LNKSET
	LDB	TB,EX.HLD
	HRRZ	TA,HLDLOC
	ADDI	TA,(TB)
	MOVEM	TA,CURHLD##

	MOVE	CH,[PUSHJ.+AC17,,TRACE.##]
	PUSHJ	PP,PUT.EX
	MOVE	CH,[AS.XWD,,1]
	PUSHJ	PP,PUTASN
	HRRZ	TA,CURHLD	;LH = COUNT OF NAME WORDS
	LDB	CH,HL.QAL
	MOVEM	CH,CURNAM	;SAVE COUNTER
	ADDI	CH,1001		;PLUS ENTRY FLAG AND COUNT OF XWD ARG
	TLNE	W1,(PDENTF)	;IS PROGRAM-ENTRY FLAG?
	ADDI	CH,1000		;YES, MAKE PROGRAM-ENTRY FLAG
	PUSHJ	PP,PUTASN
	MOVEI	CH,0		;RIGHT HALF = 0
	PUSHJ	PP,PUTASY

	HRLZI	CH,AS.SIX##	;PUT OUT SIXBIT NAME OF ENTRY
	HRR	CH,CURNAM
	PUSHJ	PP,PUTASN

	AOS	CURHLD		;AIM AT LAST BASIC HLDTAB WORD
	MOVN	TC,CURNAM	;MAKE CTR
	HRLM	TC,CURHLD

NTRY7:	SKIPL	TA,CURHLD	;GET CTR-PTR
	JRST	NTRY4		;ALL DONE
	AOBJP	TA,.+1		;BUMP CTR-PTR
	MOVEM	TA,CURHLD	;SAVE NEW COPY
	MOVE	CH,(TA)		;GET NAME WORD
	PUSHJ	PP,PUTASY	;TO ASY FILE
	JRST	NTRY7

NTRY4:	TLNN	W1,(USINGF)	;ANY ARGS?
	JRST	NTRY5

;CODE TO PICK UP ARGS

	MOVEM	W1,OPLINE	;SAVE ENTRY OP
	PUSHJ	PP,READEM	;READ IN ARG LIST
	MOVEM	EACA,EOPNXT
	EXCH	W1,OPLINE

	MOVE	CH,[ASINC+ARGS.##,,AS.MSC]	;OUTPUT "ARGS. 0,%LIT"
	PUSHJ	PP,SETUUO##
	PUSHJ	PP,PUTASN
	HRRZ	CH,ELITPC
	AOJ	CH,		;AIM AT LIT LOC AFTER ARG COUNT WORD
	IORI	CH,AS.LIT
	PUSHJ	PP,PUTASY

	PUSHJ	PARG	;SET UP ARG LIST PTRS

NTRY5:	TLNE	W1,(PDENTF)	;PROC DIV ENTRY POINT?
	JRST	NTRY3		;YES, NO NEED FOR EXTRA TAG

	HRRZ	CH,ENTAGS	;OUTPUT "%TAG:"
	PUSHJ	PP,PUTTAG##

NTRY3:	POPJ	PP,
;SET UP DUMMY ARG INDEX LOCS

DUMARG:	HRRZ	TC,EOPLOC	;MAKE PTR TO FIRST ARG
	ADDI	TC,3
	MOVEM	TC,CUREOP

;COUNT ARGS

	MOVEI	TB,1		;INIT ARG COUNT,
	MOVEM	TB,ARGCTR	;  PLUS 1 FOR CALLER'S ARG PTR LOC
	HRRZ	EACA,EOPNXT

DUM1:	AOS	ARGCTR		;BUMP CTR
	LDB	TB,[POINT 6,1(TC),17]	;SKIP OVER SUBSCRIPTS
	ADDI	TC,2(TB)
	CAIG	TC,(EACA)	;END OF LIST?
	JRST	DUM1		;NO

	MOVE	TA,[OCTLIT,,1]	;PUT ARG COUNT IN LIST
	PUSHJ	PP,STASHL
	MOVN	TA,ARGCTR
	HRLZI	TA,(TA)
	PUSHJ	PP,STASHL
	AOS	ELITPC

;PUT ADDRESSES OF DUMMY ARG INDEX LOCS IN LIST

	HRRZ	TA,ARGCTR	;SET UP XWD LIST IN LITTAB
	LSH	TA,1
	HRLI	TA,XWDLIT
	PUSHJ	PP,STASHL

	MOVEI	TA,0		;OUTPUT CALLER'S ARG PTR ADDR
	PUSHJ	PP,STASHL
	HRLZ	TA,ARGPTR
	HRRI	TA,AS.MSC
	PUSHJ	PP,STASHL
	AOS	ELITPC

	SKIPA	TC,CUREOP	;RESET ARG PTR
DUM2:	MOVEM	TC,CUREOP
	HRRZ	TA,1(TC)	;GET DATAB LINK
	CAIL	TA,<CD.DAT>B20	;BE SURE IT IS A DATAB LINK
	CAILE	TA,<CD.DAT>B20+77777
	JRST	BADONE		;ERROR

	PUSHJ	PP,LNKSET	;GET ABS PTR
	MOVEM	TA,CURDAT##
	LDB	TB,DA.LKS##	;MAKE SURE IT IS IN LINKAGE SECTION
	JUMPE	TB,BADONE	;ERROR
	LDB	TB,DA.LVL	;MUST BE 01 OR 77 LEVEL
	CAIE	TB,77
	CAIN	TB,01
	SKIPA			;IT IS
	JRST	BADONE		;?ILLEGAL DUMMY ARG

	MOVEI	TA,0		;PUT OUT LEFT HALF OF XWD
	PUSHJ	PP,STASHL
	AOS	ELITPC

	MOVE	TA,CURDAT	;GET BACK DATAB PTR
DUM5:	LDB	TB,DA.LVL##	;LEVEL 01 OR 77?
	CAIE	TB,01
	CAIN	TB,77
	JRST	DUM6		;YES
	LDB	TA,DA.BRO##	;NO, GET FATHER/BROTHER LINK
	PUSHJ	PP,LNKSET
	JRST	DUM5		;KEEP LOOKING FOR THE 01 ITEM

DUM6:	LDB	TB,DA.ARG##	;GET ASSIGNED INDEX LOC, IF ANY
	JUMPN	TB,DUM3		;OK
	MOVE	TB,EAS1PC	;HAVE TO ASSIGN ONE
	AOS	EAS1PC
	DPB	TB,DA.ARG
	PUSHJ	PP,PUTOC0	;OCTAL 0 TO AS1FIL

DUM3:	IORI	TB,AS.PAR	;MAKE IT A %PARAM LOC
	HRLZI	TA,(TB)
	HRRI	TA,AS.MSC
	PUSHJ	PP,STASHL

DUM4:	MOVE	TC,CUREOP	;UP TO NEXT ENTRY
	LDB	TB,[POINT 6,1(TC),17]
	ADDI	TC,2(TB)
	CAIG	TC,(EACA)
	JRST	DUM2

	POPJ	PP,

;BAD DUMMY ARG

BADONE:	MOVEI	DW,^D93		;?MUST BE IN LINKAGE SECTION
	PUSHJ	PP,OPNFAT
	MOVEI	TA,0		;PUT A 0 IN THE LIST
	PUSHJ	PP,STASHL
	JRST	DUM3		;GO ON WITH LIST

;PUT AN OCTAL 0 INTO AS1FIL

PUTOC0:	MOVE	CH,[AS.OCT,,1]
	PUSHJ	PP,PUTAS1
	MOVEI	CH,0
	JRST	PUTAS1
SUBTTL	GENERATE A "GOBACK" OR "EXIT PROGRAM"

GOBKGN:	HRLZI	CH,ASINC+SKIPL.##	;"SKIPL %CALLFLAG"
	HRRI	CH,AS.MSC
	PUSHJ	PP,PUTASN
	HRRZ	CH,RETPTR
	PUSHJ	PP,PUTASY

	TLNE	W1,(GOBAKF)	;GOBACK?
	JRST	GOBGN1		;YES, DO STOPR.

	PUSHJ	PP,GETTAG	;NO, "JRST %TAG"
	ANDI	CH,77777
	HRRZM	CH,ENTAGS
	IORI	CH,AS.TAG##
	HRLI	CH,JRST.
	PUSHJ	PP,PUTASY
	JRST	GOBGN2

GOBGN1:	MOVE	CH,[AC17+PUSHJ.,,STOPR.##]	;"PUSHJ 17,STOPR."
	PUSHJ	PP,PUTASY

GOBGN2:	HRLZI	CH,ASINC+SETZM.##	;"SETZM %RETPTR"
	HRRI	CH,AS.MSC
	PUSHJ	PP,PUTASN
	HRRZ	CH,RETPTR
	PUSHJ	PP,PUTASY

	MOVE	CH,[ASINC+RESF.##,,AS.MSC]	;"RESF. %FILES"
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASN
	MOVEI	CH,AS.FLS
	PUSHJ	PP,PUTASY

	SKIPE	PRODSW		;/P ON?
	JRST	GOBGN3		;YES, NO TRACE CODE

	MOVE	CH,[PUSHJ.+AC17,,TRACE.]
	PUSHJ	PP,PUT.EX
	MOVE	CH,[AS.XWD,,1]
	PUSHJ	PP,PUTASN
	MOVEI	CH,10001	;GOBACK FLAG + ARG COUNT
	TLNN	W1,(GOBAKF)	;GOBACK OR EXIT PGM?
	ADDI	CH,10000	;EXIT PROG
	PUSHJ	PP,PUTASN
	MOVEI	CH,0
	PUSHJ	PP,PUTASY

GOBGN3:	HRLZI	CH,AC17+POPJ.##	;"POPJ 17,"
	PUSHJ	PP,PUTASY

	TLNE	W1,(GOBAKF)	;GOBACK?
	POPJ	PP,		;YES

	HRRZ	CH,ENTAGS		;"%TAG:" AFTER EXIT PROGRAM
	PUSHJ	PP,PUTTAG

	POPJ	PP,
SUBTTL	GENERATE A "CANCEL"

CANGEN:	SWOFF	FEOFF1		;RESET FLAGS
	MOVEM	W1,OPLINE	;SAVE POSITION OF OPERATOR

CANGN1:	CAMN	EACA,EOPLOC	;MORE OPERANDS?
	POPJ	PP,		;NO, THATS ALL

	MOVE	CH,[AC16+ASINC+MOVEI.##,,AS.MSC]	;<MOVEI 16,LITERAL ADDR>
	PUSHJ	PP,PUTASY
	HRRZ	CH,ELITPC
	IORI	CH,AS.LIT
	PUSHJ	PP,PUTASN

	HRRZI	CH,CANCL.##	;GET EXTAB LINK TO CANCEL
	HRLI	CH,AC17+PUSHJ.##	;<PUSHJ 17,CANCL.>
	PUSHJ	PP,PUTASY

	HRRZ	TC,EOPLOC	;GET NEXT OPERAND
	MOVEI	TC,1(TC)
	MOVSM	TC,CUREOP
	MOVE	TA,1(TC)	;GET EXTAB ADDR
	PUSHJ	PP,LNKSET
	HRRM	TA,CUREOP

	SETO	TE,		;SET "REFD IN NON-RES"
	TSWF	FAS3		;CK NON-RES FLAG
	DPB	TE,EX.NRS

	MOVE	TA,[OCTLIT##,,1]
	PUSHJ	PP,STASHL

	MOVE	TA,CUREOP
	HRRZ	TB,HLDLOC##	;GET HLDTAB PTR TO NAME OF PROGRAM CANCELLED
	LDB	TA,EX.HLD##
	ADDI	TA,(TB)
	HRRM	TA,CUREOP	;SAVE IT
	LDB	TA,HL.QAL##	;WORD COUNT TO LITERAL TABLE
	HRRZM	TA,CURNAM##	;SAVE
	PUSHJ	PP,STASHL
	AOS	ELITPC

	HRRZ	TA,CURNAM	;MOVE SIXBIT NAME TO LITERALS
	HRLI	TA,SIXLIT##
	PUSHJ	PP,STASHL

	AOS	CUREOP		;AIM AT LAST BASIC HLDTAB WORD
	MOVN	TC,CURNAM	;GET WORD CNT AGAIN
	HRLM	TC,CUREOP	;SET UP CTR
CANGN3:	SKIPL	TA,CUREOP	;GET CTR-PTR
	JRST	CANGN4		;DONE ALL
	AOBJP	TA,.+1		;BUMP CTR-PTR
	MOVEM	TA,CUREOP	;RESAVE CTR,,PTR
	MOVE	TA,(TA)		;GET SIXBIT WORD
	PUSHJ	PP,STASHL
	AOS	ELITPC
	JRST	CANGN3

CANGN4:	MOVE	TA,[2,,2]	;GO TO NEXT OPERAND
	ADDM	TA,EOPLOC
	JRST	CANGN1

	END
  ZB5f