TITLE	SELOTS	VERSION 1
SUBTTL	SELECT HI-SEGMENT OBJECT-TIME SYSTEM		CHUCK MCCOMAS

;COPYRIGHT 1972, DIGITAL EQUIPMENT CORP, MAYNARD, MA

EDIT==015001            ;DEC-EDT=015,TYM-REL=001
VERSION==001001         ;DEC-VER=001,TYM-VER=001

;A CALL TO SELOTS IS GENERATED BY COMPILERS FOR PROGRAMS
;  THAT NEED A HIGH SEGMENT OBJECT-TIME SYSTEM.  SELOTS PERFORMS THE
;  GETSEG TO THE DESIRED OBJECT-TIME SYSTEM.

;CALLING SEQUENCE:
;	MOVEI	AC,[SIXBIT "SYS"
;		    SIXBIT "SELOTS"
;		    SIXBIT "SHR"
;		    Z
;		    Z
;		    Z ]
;	CALLI	AC,40
;	JRST	4,.
;	MOVEI	16,[SIXBIT /COMPILER-NAME/	;ONE TO SIX CHARS
;		    EXP COMPILER-VERSION-NUM]	;AS STORED IN LOC 137
;	JSP	17,400010

;SELOTS DESTROYS ALL AC'S
;SELOTS ALLOCATES ITS TEMPORARY STORAGE AT .JBFF, EXPANDING CORE IF NECESSARY

;THE GETSEG OF THE DESIRED OBJECT-TIME SYSTEM IS DONE BY MATCHING THE
;  SUPPLIED COMPILER-NAME AND VERSION-NUMBER WITH A TABLE ENTRY IN
;  THIS ROUTINE.  THESE TABLE ENTRIES MAY BE MODIFIED BY USER SYSTEMS
;  TO AGREE WITH OBJECT-TIME SYSTEM NAMING CONVENTIONS OF THEIR OWN
;  CHOICE.

;IF AN ERROR IS ENCOUNTERED, SELOTS ISSUES A WARNING MESSAGE AND THEN
;  SELECTS A DEFAULT OTS (SEE COMMENTS WITH TABLES).

;A NEW VERSION OF SELOTS IS RELEASED WITH EVERY NEW RELEASE OF ANY
;  LANGUAGE SYSTEM THAT USES SELOTS

;SELOTS IS A SHARABLE HIGH-SEGMENT PROGRAM

	TWOSEG
RELOC	400000

LOC	137
	XWD	VERSION,EDIT
RELOC
;ACCUMULATORS

FF=	0		;FLAGS
TA=	1		;TEMP
TB=	2		;TEMP
TC=	3		;TEMP
TD=	4		;TEMP
TE=	5		;TEMP
LO=	15		;LOW CORE INDEX
PA=	16		;RETURN PTR
PP=	17		;PDL PTR

;FLAGS

BADCMP==1B0		;COMPILER NOT FOUND IN COMTAB
BADVER==1B1		;VERSION NOT FOUND IN COMPILER'S VERSION TABLE
BADARG==BADCMP!BADVER

;MONITOR COMMUNICATION

$GETSG==40		;GETSEG
$EXIT== 12		;EXIT
$RESET==0		;RESET
$CORE==	11		;CORE

;MISCELLANEOUS CONSTANTS

PDLEN==7		;LENGTH OF PUSH DOWN LIST (MINIMUM OF 7 LOCATIONS)

;LOCATIONS IN LOW SEGMENT

DEFINE	ST (X,N)
<
X==STORE
STORE==STORE+N
>

STORE==0
ST(NOTUSE,100)	;DON'T USE CUZ RERUN USES A FEW LOCS ABOVE JOBFF
ST(PDL,PDLEN)	;PUSH DOWN LIST
PASAV==PDL	;1 LOCATION STORE FOR PA
GSGARG==PDL+1	;6 LOCATION GETSEG ARG BLOCK

ST(LOSAV,1)	;STORE FOR LO (MUST IMMEDIATELY PRECEDE LOCOR)
ST(LOCOR,LOCOD);PLACE FOR GETSEG CODE
SELOTS:	;THIS MUST RESIDE AT 400010 AT RUN-TIME

	JRST	1,.+1		;IN CASE KI-10 EXECUTE ONLY
	CALLI	$RESET
	SETZ	FF,		;CLR FLAGS
	HRRZ	TA,.JBFF##	;GET FIRST FREE LOC
	HRRZ	TB,.JBREL##	;SEE IF ENOUGH FREE SPACE
	SUBI	TB,(TA)
	CAIL	TB,STORE
	JRST	SETLOW		;YES

	HRRZI	TB,STORE(TA)	;ASK FOR NEEDED CORE
	CALLI	TB,$CORE
	JRST	NOCORE		;NOT AVAILABLE

SETLOW:	MOVE	LO,.JBFF	;INIT LOW CORE INDEX
	MOVEM	LO,LOSAV(LO)	;SAVE JOBFF
	ADDI	TA,STORE	;RESET JOBFF ABOVE LOW-SEG AREA
	MOVEM	TA,.JBFF

	HRLI	PA,(PP)		;SAVE RETURN ADDRESS
	MOVEI	PP,PDL-1(LO)	;INIT PDL PTR
	HRLI	PP,-PDLEN
;MATCH COMPILER NAME

	MOVE	TB,@(PA)		;GET COMPILER NAME
	MOVE	TA,[-CTLEN,,COMTAB]	;SET CTR-PTR TO COMPILER TABLE

GETCOM:	MOVE	TC,(TA)		;GET COMPILER NAME FROM TABLE
	CAMN	TC,TB		;MATCH?
	JRST	GETOPS		;YES
	AOJ	TA,		;SKIP OVER OPS TABLE ADDRESS
	AOBJN	TA,GETCOM	;CONTINUE THRU COMPILER TABLE
	TLO	FF,(BADCMP)	;NO SUCH COMPILER KNOWN
	SUBI	TA,2		;DEFAULT TO LAST ENTRY IN TABLE

;MATCH COMPILER VERSION NUMBER

GETOPS:	HRRZ	TA,1(TA)	;GET ADDR OF COMPILER'S VERSION TABLE
	HRL	TA,(TA)		;GET NEG OF VER TABLE LENGTH
	MOVE	TB,@1(PA)	;GET COMPILER'S VERSION NUMBER

GETVER:	MOVE	TC,1(TA)	;GET A VERSION NUMBER FROM TABLE
	CAMN	TC,TB		;MATCH?
	JRST	GETOTS		;YES
	AOJ	TA,		;SKIP OVER OTS NAME
	AOBJN	TA,GETVER	;CONTINUE THRU VERSION NUMBER TABLE
	TLO	FF,(BADVER)	;UNKNOWN VERSION NUMBER
	SUBI	TA,2		;DEFAULT TO LAST ENTRY IN TABLE

;GET THE OBJECT-TIME SYSTEM

GETOTS:	HRLZ	TA,2(TA)	;GET ADDR OF OTS SPECIFIER
	TLNE	FF,(BADARG)	;ANY ERRORS?
	JRST	BADCOM		;YES

GETOT1:	HRRI	TA,GSGARG(LO)	;MOVE OTS DESCRIPTOR TO LOW SEG
	BLT	TA,GSGARG+5(LO)

	HRLZI	TA,GETCOD	;MOVE GETSEG CODE TO LOW SEG
	HRRI	TA,LOCOR(LO)
	BLT	TA,LOCOR+LOCOD-1(LO)
	MOVEI	TA,LOCOR(LO)	;PATCH UP GETCOD ADDRESSES IN LOCOR
	ADDM	TA,LOCOR+GETCO2-GETCOD(LO)
	ADDM	TA,LOCOR+GETCO3-GETCOD(LO)
	ADDM	TA,LOCOR+GETCO4-GETCOD(LO)

	HLRZM	PA,PASAV(LO)	;SAVE RETURN PTR
	MOVSI	TA,1		;SET UP FOR CORE UUO
	MOVEI	TB,GSGARG(LO)	;SET UP FOR GETSEG UUO
	JRST	LOCOR(LO)	;DO THE GETSEG
;GETSEG CODE FOR LOW SEGMENT

GETCOD:	CALLI	TA,$CORE	;THROW AWAY SELOTS HI-SEG
GETCO2:	JRST	4,.-GETCOD	;MONITOR PROBLEM

	CALLI	TB,$GETSG	;GETSEG DESIRED OTS
GETCO3:	JRST	4,.-GETCOD	;FAILED - LET MONITOR GIVE ERROR MESSAGE

GETCO4:	JSP	LO,.+1-GETCOD	;RESTORE LOW CORE INDEX
	SUBI	LO,.-GETCOD+1
	HRRZ	LO,(LO)

	MOVE	PA,PASAV(LO)	;RESTORE RETURN PTR
	MOVE	TA,LOSAV(LO)	;RESTORE JOBFF BELOW SELOTS STUFF
	MOVEM	TA,.JBFF

	JRST	(PA)		;RETURN

LOCOD==.-GETCOD		;LENGTH OF LOW SEG CODE
;ERROR MESSAGES

BADCOM:	PUSH	PP,TA		;SAVE PTR TO DEFAULT OTS
	TTCALL	3,[ASCIZ /%SELOTS CALLED BY UNKNOWN COMPILER "/]
	MOVE	TB,@(PA)		;DISPLAY COMPILER NAME
	PUSHJ	PP,SIXSIX
	TTCALL	1,[" "]
	LDB	TB,[POINT 9,@1(PA),11]	;TYPE MAJOR VERSION #
	PUSHJ	PP,OCTAL
	LDB	TB,[POINT 6,@1(PA),17]	;GET MINOR VERSION #
	JUMPE	TB,BADV2	;NONE THERE
	SUBI	TB,1		;SEPARATE 2 LETTERS
	IDIVI	TB,^D26
	JUMPE	TB,BADV1	;NO HIGH ORDER LETTER
	ADDI	TB,100		;CONVERT HIGH ORDER TO ASCII LETTER
	TTCALL	1,TB		;TYPE IT
BADV1:	ADDI	TC,101		;CONVERT LOW ORDER TO ASCII LETTER
	TTCALL	1,TC		;TYPE IT
BADV2:	TTCALL	1,["("]
	HRRZ	TB,@1(PA)		;TYPE EDIT #
	PUSHJ	PP,OCTAL
	TTCALL	1,[")"]
	LDB	TB,[POINT 3,@1(PA),2]	;TYPE USER CODE
	JUMPE	TB,BADV3	;NO USER CODE
	TTCALL	1,["-"]
	PUSHJ	PP,OCTAL
BADV3:	TTCALL	3,[ASCIZ /"
%USING "/]
	HLRZ	TB,(PP)		;TYPE "DEV:"
	MOVE	TB,(TB)
	PUSHJ	PP,SIXSIX
	TTCALL	1,[":"]
	HLRZ	TB,(PP)		;TYPE "FILNAM"
	MOVE	TB,1(TB)
	PUSHJ	PP,SIXSIX
	TTCALL	1,["."]		;TYPE ".EXT"
	HLRZ	TB,(PP)
	MOVE	TB,2(TB)
	PUSHJ	PP,SIXSIX
	TTCALL	3,[ASCIZ /" AS DEFAULT OTS
/]
	POP	PP,TA		;AIM AT LAST ENTRY OF VERSION TABLE
	JRST	GETOT1

NOCORE:	TTCALL	3,[ASCIZ /?SELOTS UNABLE TO GET NEEDED CORE
/]
	CALLI	$RESET		;RELEASE ALL CHANNELS
	CALLI	1,$EXIT		;RETURN TO MONITOR
	JRST	.-1		;DON'T LET HIM CONTINUE
;SUBROUTINES

;PRINT SIXBIT WORD IN TB INCLUDING LEADING SPACES

SIXSIX:	MOVEI	TA,0		;GET SIXBIT CHAR
	LSHC	TA,6
	ADDI	TA,40		;CONVERT TO ASCII
	TTCALL	1,TA		;TYPE IT
	JUMPN	TB,SIXSIX	;IF MORE NON-SPACES, CONTINUE
	POPJ	PP,

;PRINT AN OCTAL VALUE FROM TB (RH) SUPPRESSING LEADING ZEROS

OCTAL:	MOVE	TA,[POINT 3,TB,17]	;SET PTR
	HRRZI	TC,6		;CTR
	SETZ	TD,		;CLR NON-ZERO DIGIT FLAG
OCTAL2:	ILDB	TE,TA		;GET AN OCTAL DIGIT
	ADDI	TE,60		;MAKE ASCII
	CAIE	TE,"0"		;ZERO?
	AOJA	TD,OCTAL3	;NO, SET FLAG
	CAIE	TC,1		;SKIP 0 CHK FOR LAST DIGIT
	JUMPE	TD,OCTAL4	;OMIT LEADING ZEORS
OCTAL3:	TTCALL	1,TE		;TYPE THE DIGIT
OCTAL4:	SOJG	TC,OCTAL2	;CONTINUE THRU ALL DIGITS
	POPJ	PP,
;COMPILER TABLE

;THERE IS ONE TWO WORD ENTRY FOR EACH LANGUAGE SYSTEM USING GETOTS
;IF NO MATCH IS FOUND,
;  THE DEFAULT IS THE LAST ENTRY IN THE TABLE

;ENTRY FORMAT:
;	WORD1:	SIXBIT	/COMPILER-NAME/	;TO MATCH NAMES SUPPLIED BY CALLING PROGRAMS
;	WORD2:	EXP	ADDR OF VERSION # TABLE FOR THIS COMPILER

COMTAB:	SIXBIT	/COBOL /	;COBOL
	EXP	VERCOB		;ADDR OF COBOL VERSION TABLE

CTLEN==<.-COMTAB>/2		;ENTRY CTR
;VERSION NUMBER MACRO

;USED TO SET UP A VERSION # WORD IN THE STANDARD LOC 137 FORMAT
;AS USED AT TYMSHARE.

DEFINE   VER(DECVER,TYMVER,DECEDT,TYMREL)
<       <DECVER>B8+<TYMVER>B17+<DECEDT>B26+TYMREL
>
;VERSION NUMBER TABLES
;THERE IS ONE TABLE FOR EACH ENTRY IN COMTAB
;IF NO MATCH IS FOUND,
;  THE DEFAULT IS THE LAST ENTRY IN THE TABLE

;TABLE FORMAT:
;	ADDR:	EXP	-NUMBER OF ENTRIES
;		<TWO-WORD ENTRY>
;		<TWO-WORD ENTRY>
;		...
;	NUMBER OF ENTRIES = <.-ADDR>/2

;ENTRY FORMAT:
;	WORD1:	VERSION # IN STANDARD FORM (SEE VER MACRO)
;	WORD2:	ADDRESS OF OTS DESCRIPTOR CORRESPONDING TO THIS VERSION NUMBER

;COBOL

VERCOB:	EXP	-COBLEN		;1ST WORD OF TABLE IN -LENGTH
        VER     5,1,107,1;      ;DECVER=005,TYMVER=001,DECEDT=107,TYMREL=001
	EXP	COBOL5		;ADDR OF OTS FOR COBOL 5(107)

COBLEN==<.-VERCOB>/2		;ENTRY CTR FOR COBOL VERSION # TABLE
;COBOL OBJECT-TIME SYSTEMS

;THERE SHOULD BE ONE OBJECT-TIME SYSTEM DESCRIPTOR FOR EACH ENTRY OF EACH VERSION TABLE

;THE ENTRY FORMAT IS A SIX-WORD ARGUMENT AS REQUIRED BY THE GETSEG UUO

COBOL5:	SIXBIT	/SYS   /	;DEVICE
	SIXBIT	/LIBOL6/	;OTS
	SIXBIT	/SHR   /	;EXT
	Z			;ALWAYS ZERO
	Z			;PPN
	Z			;CORE OPTION

	END
 