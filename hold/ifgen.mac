TITLE	IFGEN FOR COBOL 5(107)		
SUBTTL	CODE GENERATORS FOR ALL "IF" OPERATORS	AL BLACKINGTON/CAM

;COPYRIGHT 1970,1971,1972, DIGITAL EQUIPMENT CORP, MAYNARD,MA

TWOSEG
RELOC	400000

	ENTRY ENDIFG	;"ENDIF" OPERATOR
	ENTRY SPIFGN	;"SPIF" OPERATOR
	ENTRY IFCGEN	;"IFC" OPERATOR
	ENTRY IFTGEN	;"IFT" OPERATOR
	ENTRY IFGEN	;"IF" OPERATOR
	ENTRY ELSEGN	;"ELSE" OPERATOR
	ENTRY IFGNZC	;ENTRY POINT FOR RPWGEN & SEARCH
	ENTRY IFPOS	;ENTRY POINT FOR SEARCH


EXTERNAL CMNGEN	;COMMON GENERATOR ROUTINES
EXTERNAL COMEBK,MOVGN.,PUTASN,PUTASY,SETOPN,SETUUO,STASHL,B1PAR,B2PAR,SUBSCA
EXTERNAL LNKSET,GETTAG,KILLF,WARN,FATAL,PUTEMP,CCXFP.,MSFP%L,PUSEOP
EXTERNAL BMPEOP,PUTTAG,CONVNL,NEGATL,MAKEL,MAKEL2,GETEMP
EXTERNAL FORCX0,CC1C2.,MBYTEA,BADEOP,OPNFAT,JOUT,NOTNUM,NOTDAT
EXTERNAL PUT.A,PUT.AA,PUT.B,PUT.BA,PUT.L,PUT.LA,PUT.LB,PUT.LC,PUT.LD
EXTERNAL PUT.P,PUT.PA,PUT.PC,PUT.XA,PUT.XB
EXTERNAL M1CAC.,M2CAC.,MDAC.,CC1C2.,CCXFP.,ADJDP.,ADJSL.,SWAPAB
EXTERNAL M.IA,M.IB,MXAC.,MXFPA.,LITD.,LITN.,LITN.A,SCANL
EXTERNAL FPLOV.
EXTERNAL SUBSCR,SUBSCA,SUBSCB,SUBSCC,SUBSCD
;"IF" GENERATOR


IFGEN:	CAMN	EACA,EOPLOC	;ANYTHING IN EOPTAB?
	POPJ	PP,		;NO--WE MUST HAVE HAD A YECCH

	MOVEM	W1,OPLINE
	PUSHJ	PP,IFGENZ

IFDONE:	HRRZ	TC,EOPLOC	;RESET EACA SUCH THAT THERE IS ONE OPERAND
	ADDI	TC,1
	MOVEM	TC,CUREOP
	PUSHJ	PP,BMPEOP
	JFCL

	MOVE	EACA,CUREOP
	SUB	EACA,EOPLOC
	HRLS	EACA
	ADD	EACA,EOPLOC

	MOVEM	EACA,EOPNXT
	JRST	COMEBK
;"IFT" GENERATOR
IFTGEN:	SETZM	TAGTRU
	CAMN	EACA,EOPLOC	;ANY OPERANDS?
	POPJ	PP,		;NO--MUST HAVE HAD A YECCH

	MOVEM	W1,OPLINE	;SAVE LN&CP OF OPERATOR
	PUSHJ	PP,IFTGNZ	;GENERATE CODE
	JRST	IFDONE		;GO HOME


IFTGNZ:	SWOFF	FEOFF1		;TURN OFF MOST FLAGS
	PUSHJ	PP,MAK1OP	;INSURE THAT THERE IS ONLY ONE OPERAND
	TSWF	FERROR;
	JRST	BADEOP

	MOVE	TC,CUREOP
	MOVSM	TC,OPERND

	MOVE	TE,1(TC)	;IS OPERAND %TEMP OR AC'S?
	TLNN	TE,GNNOTD
	JRST	IFTGNY
	HRRZ	TE,0(TC)	;YES--IS IT AC'S?
	CAIG	TE,17
	SWON	FAINAC		;YES--SET FLAG
	JRST	IFTGNX

IFTGNY:	LDB	TE,[POINT 3,1(TC),20]
	CAIE	TE,TB.DAT
	JRST	NOTDAT

IFTGNX:	MOVEI	LN,EBASEA
	PUSHJ	PP,SETED

	MOVEI	TA,BADIFT
	TLNE	W1,1B27
	MOVEI	TA,IFNUM
	TLNE	W1,1B28
	MOVEI	TA,IFALF
	TLNE	W1,1B29
	MOVEI	TA,IFPOS
	TLNE	W1,1B30
	MOVEI	TA,IFNEG
	TLNE	W1,1B31
	MOVEI	TA,IFZERO

	TLZ	W1,CONCMP
	TLO	W1,EQUALF
	TLON	W1,GOFALS
	TLC	W1,NOTF

	JRST	@TA
;"IFC" GENERATOR

IFCGEN:	MOVEM	W1,OPLINE
	CAMN	EACA,EOPLOC	;ANY OPERANDS?
	JRST	IFCSW7		;NO--MUST BE "IF SWITCH"

	MOVEM	EACA,EOPNXT	;SAVE EACA
	MOVE	CH,[XWD 2,2]	;MAKE THIS LOOK LIKE EXPRESSION
	PUSHJ	PP,PUSEOP
	SETZM	TAGTRU
	PUSHJ	PP,MAK1OP
	TSWF	FERROR;
	JRST	BADEOP

	LDB	TE,[POINT 3,-1(EACA),20]
	CAIN	TE,TB.MNE
	JRST	IFCSW

	TLON	W1,GOFALS	;GO IF FALSE?
	TLC	W1,NOTF		;NO--COMPLEMENT "NOT"
	TLNN	W1,NOTF		;"NOT"?
	JRST	IFCGNF		;NO
	HLRZM	W2,ECTRUE	;YES--SET "TRUE" TAG
	SETZM	ECFALS		;CLEAR "FALSE" TAG
	JRST	IFCGNA

IFCGNF:	HLRZM	W2,ECFALS	;SET UP TAG FOR "FALSE"
	SETZM	ECTRUE

IFCGNA:	SETZM	ECXTRA		;TURN OFF "EXTRA TAG NEEDED"
	SETZM	ECEQUL		;TURN OFF "SPECIAL EQUAL JUMP"
	TLZ	W1,CONCMP	;CLEAR CONDITION FLAGS
	MOVEM	W1,OPLINE

	MOVEI	TC,ECNAME
	MOVEM	TC,OPERND

	SWOFF	FEOFF1		;CLEAR MOST FLAGS

	MOVE	TC,EOPLOC	;CONVERT COND. NAME LINK TO TABLE ADDRESS
	ADDI	TC,1

	MOVE	TA,TC		;SET UP DUMMY "B"
	TLZ	TA,-4
	TLO	TA,1B18
	MOVEM	TA,ECNAME

	MOVE	TA,1(TC)
	PUSHJ	PP,LNKSET

	MOVE	TE,1(TA)	;GET LITERAL COUNT
	HRRZM	TE,CONCTR
	SKIPN	CONCTR		;ANY THERE?
	POPJ	PP,		;NO--MUST HAVE HAD TROUBLE--QUIT

	HLRM	TE,1(TC)	;RESET "A" TO BE DATA-NAME

	MOVEM	TC,CUREOP
	ROT	TE,3
	ANDI	TE,7
	CAIE	TE,TB.DAT
	JRST	NOTDAT

	MOVEI	TE,2(TA)	;CREATE A BYTE POINTER TO CONTAB ENTRIES
	HRLI	TE,442200
	MOVEM	TE,ECNBP

	HRRZ	CH,CUREOP	;GET PTR TO DATA OPERAND
	HRRZ	TA,1(CH)
	PUSHJ	PP,LNKSET
	LDB	TB,DA.LKS##	;IS IT IN LINKAGE SECTION?
	SKIPE	TB		;NO
	MOVSI	TB,(LKSFLG)	;YES, SET GENFIL FLAG
	IORM	TB,(CH)
;"IFC" GENERATOR  (CONT'D).

;THIS IS THE START OF THE MAIN LOOP

IFCGN1:	SWOFF	FAINAC		;CLEAR "A IN AC'S" FLAG
	HRRZ	TC,EOPLOC
	ADDI	TC,1
	MOVEM	TC,CUREOP
	HRLM	TC,OPERND

	MOVEI	LN,EBASEA	;SET UP "A" PARAMETERS
	PUSHJ	PP,SETED

	ILDB	TA,ECNBP	;IS IT A RANGE?
	TRNE	TA,CRANGE
	JRST	IFCG10		;YES
;"IFC" GENERATOR  (CONT'D)

;NOT A RANGE

	SETZM	ECEQUL		;TURN OFF "SPECIAL EQUAL PATH"
	PUSHJ	PP,SETUPB
	MOVE	W1,OPLINE

	IBP	ECNBP		;BUMP BYTE POINTER

	SOSG	CONCTR		;IS THIS THE LAST VALUE?
	JRST	IFCGN4		;YES

	TLZ	W1,NOTF		;YES--SHUT OFF "NOT"
	TLO	W1,LESSF!GREATF	;SET "NOT EQUAL"
	PUSHJ	PP,GETTRU	;TRUE IF EQUAL
	JRST	IFCGN6

IFCGN4:	TLZE	W1,NOTF		;"NOT"?
	JRST	IFCGN5		;YES

	TLO	W1,EQUALF	;SET "EQUAL"
	PUSHJ	PP,GETFLS	;FALSE IF NOT EQUAL
	JRST	IFCGN6

IFCGN5:	TLO	W1,LESSF!GREATF	;SET "NOT EQUAL"
	PUSHJ	PP,GETTRU	;TRUE IF EQUAL

IFCGN6:	PUSHJ	PP,GOTOIF
	SKIPE	CONCTR
	JRST	IFCGN1

	SKIPE	CH,ECXTRA
	PUSHJ	PP,PUTTAG
	POPJ	PP,
;"IFC" GENERATOR  (CONT'D).

;A RANGE

IFCG10:	PUSHJ	PP,SETUPB
	MOVE	W1,OPLINE
	TLZ	W1,NOTF		;TURN OFF "NOT" FOR NOW

	SOSLE	CONCTR##
	JRST	IFCG20

;THE LAST RANGE IN THE VALUE CLAUSE

;FIRST COMPARISON
;  <	FALSE
;  >	FALL THRU
;  =	FALL THRU

	PUSHJ	PP,GETFLS
	TLO	W1,GREATF!EQUALF
	PUSHJ	PP,GOTOIF

;SECOND COMPARISON

;	NOTF OFF	NOTF ON

;  <	FALL THRU	TRUE
;  >	FALSE		FALL THRU
;  =	FALL THRU	TRUE

	SWOFF	FAINAC		;CLEAR "A IN AC'S" FLAG
	HRRZ	TC,EOPLOC
	ADDI	TC,1
	MOVEI	LN,EBASEA
	PUSHJ	PP,SETED
	SETZM	ECEQUL

	ILDB	TA,ECNBP
	PUSHJ	PP,SETUPB

	MOVE	TC,CUREOP	;SET LEFT HALF OF OPERAND PTR
	HRLM	TC,OPERND	;  FOR SUBSCR SO LINKAGE FLAG HANDLED RIGHT

	MOVE	W1,OPLINE
	TLZN	W1,NOTF
	JRST	IFCG13

	PUSHJ	PP,GETTRU
	TLO	W1,GREATF
	JRST	IFCGN6

IFCG13:	TLO	W1,LESSF!EQUALF
	PUSHJ	PP,GETFLS
	JRST	IFCGN6
;"IFC" GENERATOR  (CONT'D).

;A RANGE (CONT'D)

;ALL RANGE COMPARISONS EXCEPT THE LAST IN VALUE CLAUSE

;FIRST COMPARISON
;  <	NEXT COND'N
;  >	FALL THRU
;  =	FALL THRU

IFCG20:	TLO	W1,GREATF!EQUALF
	PUSHJ	PP,GETTAG
	MOVEM	CH,ECSTEP
	PUSHJ	PP,GOTOIF

;SECOND COMPARISON
;  <	TRUE
;  >	FALL THRU
;  =	TRUE

	SWOFF	FAINAC		;CLEAR "A IN AC'S" FLAG
	PUSHJ	PP,GETTRU

	HRRZ	TC,EOPLOC
	ADDI	TC,1
	MOVEI	LN,EBASEA
	PUSHJ	PP,SETED
	SETZM	ECEQUL
	ILDB	TA,ECNBP
	PUSHJ	PP,SETUPB

	MOVE	W1,OPLINE
	PUSHJ	PP,GETTRU
	TLZ	W1,NOTF
	TLO	W1,GREATF
	PUSHJ	PP,GOTOIF

	MOVE	CH,ECSTEP
	PUSHJ	PP,PUTTAG

	JRST	IFCGN1
;"IFC" GENERATOR  (CONT'D).

;CALL THE "IF" ROUTINE FROM "IFC"

GOTOIF:	MOVS	W2,CH		;SET UP FALSE PATH
	TSWT	FAINAC		;IS "A" IN THE AC'S?
	JRST	IFGNZC		;NO
	JRST	IFGN0		;YES

;GET A TAG FOR THE TRUE PATH

GETTRU:	SKIPN	CH,ECTRUE
	PUSHJ	PP,IFCTAG
	MOVEM	CH,ECTRUE
	POPJ	PP,

;GET A TAG FOR THE FALSE PATH

GETFLS:	SKIPN	CH,ECFALS
	PUSHJ	PP,IFCTAG
	MOVEM	CH,ECFALS
	POPJ	PP,

;GET A TAG FOR EITHER THE TRUE OR THE FALSE PATH

IFCTAG:	SKIPN	CH,ECXTRA
	PUSHJ	PP,GETTAG
	MOVEM	CH,ECXTRA
	POPJ	PP,
;"IFC" GENERATOR  (CONT'D).

;SET UP "B" OPERAND

SETUPB:	TRNN	TA,CNFIGC	;FIG. CONST.?
	JRST	SETUB1		;NO

	LDB	TE,[POINT 5,TA,25]	;PICK UP FLAGS FOR FIG. CONST.
	DPB	TE,[POINT 5,ECNAME,14]	;STASH THEM AWAY

	MOVSI	TE,GNLIT!GNFIGC!1B18
	IORM	TE,ECNAME
	SETZM	ECNAME+1
	MOVEI	TC,ECNAME
	MOVEI	LN,EBASEB
	JRST	SETOPN

SETUB1:	MOVE	TE,[XWD EBASEA,EBASEB]
	BLT	TE,EBASBX

	TSWF	FASIGN;
	SWONS	FBSIGN;
	SWOFF	FBSIGN;

	TSWF	FANUM;
	SWONS	FBNUM;
	SWOFF	FBNUM;

	SWOFF	FBSUB;


	ANDI	TA,77777
	IORI	TA,AS.TAG
	HRLI	TA,^D36
	MOVEM	TA,EBASEB
	SETZM	EINCRB

	POPJ	PP,
;"IFC" GENERATOR  (CONT'D).

;GENERATE A CONDITIONAL FOR HARDWARE SWITCHES

IFCSW:	HRRZ	TA,-1(EACA)	;GET "ON" OR "OFF"
	PUSHJ	PP,LNKSET
	MOVE	TE,1(TA)
	JUMPL	TE,IFCSW0
	LDB	TE,MNESF
	DPB	TE,W1SF
	TLNN	W1,SWITCH
	JRST	NOTSWC

IFCSW0:	LDB	TC,SWNUM	;PICK UP SWITCH NUMBER FROM MNETAB

IFCSWA:	TLNN	W1,SWCHON	;"ON" TEST?
	TLC	W1,NOTF		;NO--COMPLEMENT "NOT"
	TLNN	W1,GOFALS	;"GO IF FALSE"?
	TLC	W1,NOTF		;NO--COMPLEMENT "NOT"

	MOVE	CH,CALLSW	;GENERATE <CALLI 0,20>
	PUSHJ	PP,PUTASY

	MOVNS	TC		;SET
	MOVSI	TD,1B18		;	APPROPRIATE
	LSH	TD,0(TC)	;	BIT

	TLNN	TD,-1		;LEFT-HALF?
	JRST	IFCSW1
	HLRZS	TD		;YES--PUT IT IN RIGHT HALF
	TDCA	TC,TC		;USE "TLNX"
IFCSW1:	MOVEI	TC,1		;USE "TRNX"

	TLNN	W1,NOTF		;IS IT "NOT"
	SKIPA	CH,IFCSWT(TC)	;NO--USE TXNN"
	MOVS	CH,IFCSWT(TC)	;YES--USE "TXNE"

	HRRI	CH,AS.CNB
	PUSHJ	PP,PUTASY
	MOVE	CH,TD
	PUSHJ	PP,PUTASN

	JRST	JFALSE		;PUT OUT <JRST FALSE> AND RETURN


IFCSWT:	XWD	TLNN.+ASINC,TLNE.+ASINC
	XWD	TRNN.+ASINC,TRNE.+ASINC

NOTSWC:	MOVEI	DW,^D290
	JRST	OPNFAT
;GENERATE CODE FOR "IF SWITCH (N)"

IFCSW7:	TLNN	W1,SWITCH		;IS EITHER SWITCH FLAG ON?
	JRST	BADEOP		;NO-TROUBLE

	LDB	TC,[POINT 6,W1,35]	;GET SWITCH NUMBER
	JRST	IFCSWA
;GENERATE CODE FOR "IF".

IFGENZ:	SETZM	ECEQUL		;TURN OFF "SPECIAL PATH FOR EQUAL"
	SETZM	TAGTRU
	LDB	TE,CONDIT	;INSURE VALIDITY OF FLAGS
	JUMPE	TE,BADIF
	CAIN	TE,7
	JRST	BADIF

	SWOFF	FEOFF1		;TURN OFF MOST FLAGS
	PUSHJ	PP,MAK2OP	;INSURE RIGHT NUMBER OF OPERANDS
	TSWF	FERROR		;ANY ERROR?
	JRST	BADEOP		;YES

	TLZE	W1,NOTF		;"NOT"?
	TLC	W1,CONCMP	;YES--COMPLEMENT CONDITION
	TLNN	W1,GOFALS	;IS TAG FOR "FALSE"?
	TLC	W1,CONCMP	;NO--COMPLEMENT CONDITION

	MOVE	TC,CUREOP	;SET UP FIRST OPERAND
	MOVSM	TC,OPERND
	MOVEI	LN,EBASEA
	PUSHJ	PP,SETED
	TSWF	FERROR		;ANY ERRORS YET?
	POPJ	PP,		;YES--QUIT

	PUSHJ	PP,BMPEOP	;SET UP SECOND OPERAND
	JRST	BADEOP		;NO MORE-- WE LOSE
	AOS	TC,CUREOP
	HRRM	TC,OPERND
	MOVEI	LN,EBASEB
	PUSHJ	PP,SETED

	HRRZ	TE,OPERND	;IS "B" THE AC'S?
	MOVE	TD,1(TE)
	HRRZ	TE,0(TE)
	TLNE	TD,GNNOTD
	CAILE	TE,17
	JRST	IFGNZA		;NO
	PUSHJ	PP,SWAPIT	;YES--SWAP OPERANDS
	JRST	IFGNZB

IFGNZA:	HLRZ	TE,OPERND	;IS "A" THE AC'S?
	MOVE	TD,1(TE)
	HRRZ	TE,0(TE)
	TLNE	TD,GNNOTD
	CAILE	TE,17
	JRST	IFGNZC		;NO
IFGNZB:	SWON	FAINAC!FASIGN	;YES--SET "'A' IS AC'S"
	SWOFF	FASUB;
	JRST	IFGNZD
;"IF" GENERATOR (CONT'D).

IFGNZC:	SETZM	EAC		;SET AC'S TO BE 0&1

	HRRZ	TA,EMODEA	;IS "A" A LITERAL?
	CAIN	TA,LTMODE
	JRST	IFGN1		;YES
	CAIN	TA,FCMODE	;FIG. CONST.?
	JRST	IFGN3		;YES

IFGNZD:	HRRZ	TB,EMODEB	;IS "B" A LITERAL?
	CAIN	TB,LTMODE
	JRST	IFGN2		;YES
	CAIN	TB,FCMODE	;FIG. CONST.?
	JRST	IFGN3E		;YES

;NEITHER OPERAND IS A LITERAL NOR A FIG. CONST.

	TSWT	FAINAC		;IS "A" IN THE AC'S?
	JRST	IFGN0A		;NO

;"A" IS IN THE AC'S

IFGN0:	HRRZ	TA,EMODEA
	HRRZ	TB,EMODEB

	TSWT	FBNUM		;IS "B" NUMERIC?
	JRST	NOTNMB		;NO--TROUBLE

	CAIE	TA,FPMODE	;IS EITHER "A" OR "B" COMP-1?
	CAIN	TB,FPMODE
	JRST	IFGN0N		;YES

	MOVE	TE,EDPLA	;YES--DOES "A" HAVE MORE DECIMAL PLACES THAN "B"?
	CAMG	TE,EDPLB
	JRST	IFGN0N		;NO

	PUSHJ	PP,SETBCX
	JRST	IFGN0E
;"IF" GENERATOR (CONT'D)

;"A" IS NOT THE AC'S

IFGN0A:	TSWF	FANUM		;IS "A" NUMERIC?
	JRST	IFGN0B		;YES
	CAILE	TB,DSMODE	;NO--IS "B" DISPLAY?
	JRST	NOTNMA		;NO--ERROR
	JRST	IFDD		;YES

;"A" ISN'T IN THE AC'S, BUT IS NUMERIC

IFGN0B:	CAIN	TB,FPMODE	;IS "B" COMP-1?
	JRST	IFGN0E		;YES
	CAIN	TA,FPMODE	;NO--IS "A" COMP-1?
	JRST	IFGN0G		;YES

	TSWF	FBNUM		;IS "B" NUMERIC?
	JRST	IFGN0C		;YES
	CAILE	TA,DSMODE	;NO--IS "A" DISPLAY?
	JRST	NOTNMB		;NO--ERROR
	JRST	IFDD		;YES

;BOTH "A" AND "B" ARE NUMERIC

IFGN0C:	MOVE	TE,EDPLA	;COMPARE DECIMAL PLACES
	CAMN	TE,EDPLB	;THE SAME?
	JRST	IFGN0F		;YES
	CAML	TE,EDPLB	;NO--"A" HAVE MORE THAN "B"?
	JRST	IFGN0G		;YES--SWAP OPERANDS
	JRST	IFGN0E		;NO--NO POINT IN SWAPPING

;"A" AND "B" HAVE THE SAME NUMBER OF DECIMAL PLACES

IFGN0F:	CAIG	TA,DSMODE	;IS "A" DISPLAY?
	JRST	IFGN0E		;YES--NO POINT IN SWAPPING
	TSWT	FBSIGN		;NO--IS "B" SIGNED?

IFGN0G:	PUSHJ	PP,SWAPIT	;SWAP OPERANDS

IFGN0E:	PUSHJ	PP,MXAC.	;GET "A" INTO THE AC'S
	SWON	FAINAC;
	PUSHJ	PP,ADJDP.
;"A" IS NOW IN THE AC'S -- DISPATCH TO CORRECT ROUTINE

IFGN0N:	HRRZ	TE,EMODEA	;IS MODE OF "A" LEGAL?
	CAIL	TE,D1MODE
	CAILE	TE,FPMODE
	JRST	IFCONA		;NO--SOMEBODY IS CONFUZED
	SUBI	TE,D1MODE	;YES--REDUCE IT

	HRRZ	TD,EMODEB	;IS MODE OF "B" LEGAL?
	CAILE	TD,FPMODE
	JRST	IFCONB		;NO

	LSH	TE,2		;YES--DISPATCH THRU TABLE
	ROT	TD,-1
	ADDI	TE,(TD)
	TLNE	TD,1B18
	SKIPA	TE,IFACT(TE)
	MOVS	TE,IFACT(TE)
	JRST	(TE)

;DISPATCH TABLE

IFACT:	XWD	IFC1D,IFC1D	;1C-S,1C-A
	XWD	IFCONB,IFC1C1	;-,1C-1C
	XWD	IFC1C2,IFCXFP	;1C-2C,1C-FP
	XWD	IFCONB,IFCONB	;-,-

	XWD	IFC2D,IFC2D	;2C-S,2C-A
	XWD	IFCONB,IFC2C1	;-,2C-1C
	XWD	IFC2C2,IFCXFP	;2C-2C,2C-FP
	XWD	IFCONB,IFCONB	;-,-

	XWD	IFPAC.,IFPAC.	;FP-S,FP-A
	XWD	IFCONB,IFPAC.	;-,FP-1C
	XWD	IFPAC.,IC1C1A	;FP-2C,FP-FP
	XWD	IFCONB,IFCONB	;-,-
;"A" IS A LITERAL

IFGN1:	HRRZ	TE,EMODEB
	CAIE	TE,LTMODE
	CAIN	TE,FCMODE
	JRST	TWOLIT

;"A" IS A LITERAL, "B" ISN'T

	TSWT	FBNUM		;IS "B" NUMERIC?
	JRST	IFGN2C		;NO

	PUSHJ	PP,SWAPIT	;YES--SWAP OPERANDS
	PUSHJ	PP,MXAC.
	SWON	FAINAC;
	JRST	IFGN9

;"B" IS A LITERAL, "A" ISN'T

IFGN2:	TSWT	FANUM!FAINAC	;IS "A" NUMERIC?
	JRST	IFGN2A		;NO
	TSWTS	FAINAC		;GET IT INTO AC'S UNLESS
	PUSHJ	PP,MXAC.	; IT'S THERE ALREADY
	JRST	IFGN9

IFGN2A:	PUSHJ	PP,SWAPIT	;"A" ISN'T NUMERIC--SWAP OPERANDS

;"A" IS A LITERAL, "B" IS NON-NUMERIC DISPLAY

IFGN2C:	TSWT	FANUM		;IS IT A NUMERIC LITERAL?
	JRST	IFDD2		;NO

;"A" IS A NUMERIC LITERAL,"B" IS NON-NUMERIC DISPLAY

	MOVE	TA,ETABLB	;IS
	PUSHJ	PP,LNKSET	;  'B'
	LDB	TE,DA.EDT	;  EDITED?
	JUMPN	TE,NOTNMA	;IF SO, ERROR

	PUSH	PP,EBYTEA	;NO--SEE IF ANY DECIMAL PLACES IN LITERAL
	PUSHJ	PP,SCANL
	POP	PP,EBYTEA
	TSWF	FERROR		;ANY ERRORS OF ANY KIND?
	POPJ	PP,		;YES--FORGET IT

	PUSHJ	PP,LITN.A	;NO--CREATE A NUMERIC DISPLAY LITERAL
	JRST	IFDD2		;DO COMPARISON
;"A" IS A FIGURATIVE CONSTANT

IFGN3:	HRRZ	TE,EMODEB
	CAIE	TE,LTMODE
	CAIN	TE,FCMODE
	JRST	TWOLIT

;"A" IS A FIG. CONST., "B" ISN'T

	PUSHJ	PP,SWAPIT	;SWAP OPERANDS

;NOW "B" IS THE FIG. CONST.

IFGN3A:	HRRZ	TE,EMODEA	;IS 'A' DISPLAY?
	CAIG	TE,DSMODE
	JRST	IFGN3C		;YES

	PUSHJ	PP,MXAC.	;NO--GET IT INTO AC'S
	SWON	FAINAC;

IFGN3B:	HRRZ	TE,EFLAGB	;DISPATCH
	CAILE	TE,5		;  TO APPROPRIATE ROUTINE
	MOVEI	TE,1
	JRST	@IFFCTA(TE)

IFGN3C:	HRRZ	TE,EFLAGB
	CAILE	TE,5
	MOVEI	TE,1
	JRST	@IFFCT(TE)


;"B" IS A FIG. CONST., "A" ISN'T

IFGN3E:	TSWF	FAINAC		;IS "A" IN THE AC'S?
	JRST	IFGN3B		;YES
	JRST	IFGN3A		;NO
;THE "A" OPERAND IS IN THE AC'S, "B" IS A LITERAL

IFGN9:	MOVEI	LN,EBASEB
	HRRZ	TE,EMODEA
	CAIE	TE,FPMODE
	JRST	IFGN9A

	PUSHJ	PP,MSFP%L
	MOVEI	TA,FPMODE
	MOVEM	TA,EMODEB
	MOVEM	TC,EINCRB

	MOVEI	TE,AS.MSC
	MOVEM	TE,EBASEB
	JRST	IC1C1B

IFGN9A:	PUSHJ	PP,CONVNL
	TSWF	FERROR		;ANY ERRORS?
	POPJ	PP,		;YES--FORGET THE WHOLE THING

	MOVE	TE,EDPLA
	SUB	TE,EDPLB
	PUSHJ	PP,ADJSL.

	MOVEM	TC,ELITLO
	MOVEM	TD,ELITHI
	PUSHJ	PP,ADJDP.
	MOVE	TC,ELITLO
	MOVE	TD,ELITHI

	HRRZ	TE,EMODEA
	CAIE	TE,D2MODE	;IF "A" IS NOT A 2-WORD COMP, AND
	JUMPE	TD,IC1C1E	;	LITERAL ONLY 1-WORD, JUMP

	PUSHJ	PP,MAKEL2
	JRST	IC2C2E
;GENERATE CODE TO COMPARE 1-WORD COMP VERSUS 1-WORD COMP

IFC1C1:	TSWF	FBSIGN		;IS "B" SIGNED?
	JRST	IC1C1A		;YES

	PUSHJ	PP,SETBCX	;SAVE LOCATION OF "A" & MAKE IT "B"
	PUSHJ	PP,M1CAC.	;GET NEW "A" INTO AC'S
	JRST	IC1C1B

IC1C1A:	PUSHJ	PP,SUBSCB

IC1C1B:	MOVSI	CH,CAM.		;GENERATE THE COMPARE
	LDB	TE,CONDIT
	ROT	TE,-^D8
	ADD	CH,TE
	PUSHJ	PP,PUT.BA
	JRST	JFALSE

;"B" IS A LITERAL.

IC1C1E:	MOVSI	CH,CAM.
	LDB	TE,CONDIT
	ROT	TE,-^D8
	ADD	CH,TE

	TSWT	FLNEG		;IS LITERAL NEGATIVE?
	SKIPA	TC,ELITLO	;NO
	MOVN	TC,ELITLO	;YES

	PUSHJ	PP,PUT.LA	;GENERATE <CAMX AC,[LITERAL]>
	JRST	JFALSE		;GENERATE JRST TO FALSE, AND RETURN

;GENERATE CODE TO COMPARE A 1-WORD COMP OR INDEX VS. A 2-WORD COMP

IFC1C2:	MOVE	TC,EDPLB	;COMPUTE DIFFERENCE IN DECIMAL PLACES
	SUB	TC,EDPLA
	ADDM	TC,EDPLA	;ADJUST DECIMAL PLACES OF "A"
	ADDM	TC,ESIZEA	;ALSO SIZE

	MOVSI	CH,MUL.		;GENERATE <MUL. AC,[POWER OF 10]>
	PUSHJ	PP,PUT.PA
	MOVEI	TE,D2MODE	;"A" IS NOW A 2-WORD COMP
	MOVEM	TE,EMODEA
	JRST	IFC2C2		;DO DOUBLE-PRECISION COMPARE


;GENERATE CODE TO COMPARE A 2-WORD COMP VS. A 1-WORD COMP OR INDEX

IFC2C1:	PUSHJ	PP,SETBCX	;SWAP OPERANDS
	HRRZ	TE,EBASEA	;IF NEW 'A' IS
	CAILE	TE,17		;  NOT YET IN AC'S
	PUSHJ	PP,M1CAC.	;  GET IT THERE
	JRST	IFC1C2
;GENERATE CODE TO COMPARE 2-WORD COMPS.

IFC2C2:	TSWF	FBSIGN		;IS "B" SIGNED?
	JRST	IC2C2D		;YES
	PUSHJ	PP,SETBCX	;SWAP OPERANDS
	PUSHJ	PP,M2CAC.	;GET NEW "A" INTO AC'S
	JRST	IC2C2E

IC2C2D:	PUSHJ	PP,SUBSCB
IC2C2E:	MOVSI	CH,COMP.D
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUT.B
	JRST	ADDRS3
;AC'S ARE FLOATING POINT, "B" IS NOT

IFPAC.:	PUSHJ	PP,PUTEMP
	SETZM	EAC

IFFPCX:	PUSHJ	PP,SWAPIT
	PUSHJ	PP,MXFPA.

	JRST	IC1C1B


;AC'S CONTAIN 1- OR 2-WORD COMP, "B" IS FLOATING POINT

IFCXFP:	PUSHJ	PP,CCXFP.
	JRST	IC1C1A
;"A" IS A 1-WORD COMP IN AC'S, "B" IS DISPLAY

IFC1D:	MOVE	TE,ESIZEB
	CAIG	TE,^D10
	JRST	IFC1DA

;"B" WILL BE 2 WORDS

	PUSHJ	PP,CC1C2.
	PUSHJ	PP,SETBCX

	PUSHJ	PP,MXAC.
	PUSHJ	PP,SETBCX
	JRST	IC2C2E

;"B" WILL BE 1 WORD

IFC1DA:	PUSHJ	PP,SETBCX
	PUSHJ	PP,MXAC.
	JRST	IC1C1B
;"A" IS A 2-WORD COMP IN AC'S, "B" IS DISPLAY

IFC2D:	PUSHJ	PP,SETBCX
	PUSHJ	PP,MXAC.

	HRRZ	TE,EMODEA
	CAIN	TE,D1MODE
	PUSHJ	PP,CC1C2.

IFC2DA:	PUSHJ	PP,SETBCX
	JRST	IC2C2E
;GENERATE CODE FOR NON-NUMERIC DISPLAY COMPARISON

IFDD:	HRRZ	TE,EMODEA	;IS "A" SIXBIT?
	CAIE	TE,D6MODE
	JRST	IFDD2		;NO
	HRRZ	TE,EMODEB	;YES--IS "B" ASCII?
	CAIN	TE,D7MODE
	PUSHJ	PP,SWAPIT	;YES--SWAP OPERANDS

IFDD2:	MOVE	TE,ESIZEA	;COMPARE SIZES
	MOVEM	TE,ESIZEZ
	CAME	TE,ESIZEB
	JRST	IFDD4

;PRETEND 'A' AND 'B' ARE THE SAME SIZE

IFDD3E:	MOVE	TE,ESIZEA
	CAMLE	TE,ESIZEB
	MOVE	TE,ESIZEB
	MOVEM	TE,ESIZEA
	MOVEM	TE,ESIZEB

;'A' IS SAME SIZE AS 'B'

IFDD3:	HRRZ	TE,EMODEA	;IS 'A' A
	CAIN	TE,LTMODE	;  LITERAL?
	JRST	IFDD30		;YES

	HRRZ	TD,EMODEB	;NO--IS MODE OF 'A'
	CAME	TD,TE		;  SAME AS MODE OF 'B'?
	JRST	IFDD3A		;NO

	MOVEI	LN,EBASEB	;YES--IS 'B'
	TSWT	FBSUB		;  NON-SUBSCRIPTED AND
	PUSHJ	PP,IFDD50	;  WORD-CONTAINED?
	JRST	IFDD3A		;IT IS SUBSCRIPTED OR NOT WORD-CONTAINED
	MOVEI	LN,EBASEA	;YES--IS 'A'
	TSWT	FASUB		;  NON-SUBSCRIPTED AND
	PUSHJ	PP,IFDD50	;  WORD-CONTAINED?
	JRST	IFDD3A		;IT IS SUBSCRIPTED OR NOT WORD-CONTAINED
	JRST	IFDD40		;YES--SPECIAL CODE

IFDD3A:	PUSHJ	PP,IFDD20
	HRRZ	TE,EMODEB	;IF SAME
	CAMN	TE,EMODEA	;  MODE,
	JRST	JFALSE		;  ONLY ONE JRST REQUIRED
	JRST	ADDRS3		;PUT OUT 3 JRSTS
;BOTH 'A' AND 'B' ARE NON-NUMERIC (C)

;'A' HAS DIFFERENT SIZE THAN 'B'

IFDD4:	CAML	TE,ESIZEB
	JRST	IFDD16		;"A" LARGER THAN "B"

;"A" SMALLER THAN "B"

	HRRZ	TE,EMODEA
	CAIN	TE,LTMODE
	JRST	IFDD30

	LDB	TE,CONDIT	;IS IT ">" OR "NOT >"?
	CAIE	TE,NOTGR
	CAIN	TE,GR
	JRST	IFDD3E		;YES

	PUSHJ	PP,IFDD17
	MOVE	TE,ESIZEA
	MOVN	TD,TE
	ADDM	TD,ESIZEB
	MOVE	TD,[XWD EBASEB,EBASEA]
	BLT	TD,EBASAX

	JRST	IFD16A

;"A" LARGER THAN "B"

IFDD16:	HRRZ	TE,EMODEA
	CAIN	TE,LTMODE
	PUSHJ	PP,IFDD51

	MOVE	TE,ESIZEB
	MOVEM	TE,ESIZEZ

	LDB	TE,CONDIT	;IS IT "<" OR "NOT <"?
	CAIE	TE,LS
	CAIN	TE,NOTLS
	JRST	IFDD3E		;YES

	MOVE	TE,ESIZEB
	MOVEM	TE,ESIZEZ
	PUSHJ	PP,IFDD17
	MOVE	TE,ESIZEB
	MOVN	TD,ESIZEB
	ADDM	TD,ESIZEA

IFD16A:	PUSHJ	PP,M.IA
	PUSHJ	PP,IFSPAC
	HRRZ	CH,TAGTRU
	SETZM	TAGTRU
	JRST	PUTTAG
;GENERATE CODE FOR NON-NUMERIC DISPLAY COMPARISON (CONT'D).
;ONE FIELD IS SMALLER THAN THE OTHER.  GENERATE COMPARISON FOR SMALLER SIZE.

IFDD17:	PUSHJ	PP,GETTAG	;GET A TAG FOR TRUE PATH
	HRLI	CH,JRST.
	MOVEM	CH,TAGTRU

	PUSHJ	PP,B2PAR
	HRRZ	TE,EMODEB
	CAME	TE,EMODEA
	SKIPA	CH,[XWD CMP.76+ASINC,AS.MSC]
	MOVE	CH,[XWD ASINC+COMP##,AS.MSC]
	PUSHJ	PP,IFDD22

	MOVEI	TC,5
	TLNE	W1,LESSF
	PUSHJ	PP,JTRUES
	PUSHJ	PP,JFALSE

	MOVEI	TC,4
	TLNE	W1,GREATF
	JRST	JTRUE
	JRST	JFALSE


;GENERATE THE ACTUAL COMPARISON INSTRUCTION

IFDD20:	PUSH	PP,EREMAN	;SAVE UNTIL PARAMETERS BUILT
	PUSHJ	PP,B2PAR	;BUILD PARAMETERS
	POP	PP,EREMAN
	HRRZ	TE,EMODEB	;SAME MODE?
	CAME	TE,EMODEA
	JRST	IFDD21

	MOVE	CH,[XWD CMP.+ASINC,AS.MSC]  ;YES--USE "COMP."
	LDB	TE,CONDIT
	ROT	TE,-^D13
	ADD	CH,TE
	JRST	IFDD22

IFDD21:	MOVE	CH,[XWD CMP.76+ASINC,AS.MSC]

IFDD22:	PUSHJ	PP,SETUUO	;SET UUOTAB FLAGS
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACC
	JRST	PUTASN
;'A' IS A LITERAL WITH SIZE NOT GREATER THAN 'B', AND 'B' IS NON-NUMERIC

IFDD30:	MOVE	TE,ESIZEB	;IS 'B'
	CAIN	TE,1		;  A SINGLE CHARACTER?
	TSWF	FBSUB		;YES--SUBSCRIPTED?
	JRST	IFDD36		;SUBSCRIPTED, OR NOT SINGLE CHARACTER

	PUSHJ	PP,IFDD42	;YES--GENERATE <LDB 0,B>
	PUSHJ	PP,SWAPIT	;SWAP OPERANDS AND CONDITION

	ILDB	CH,EBYTEB	;GET LITERAL VALUE INTO 'CH'
	HRRZ	TE,EMODEA	;IS 'A'
	CAIE	TE,D6MODE	;  SIXBIT?
	JRST	IFDD32		;NO
	CAIG	CH,137		;YES-- IS LITERAL
	CAIGE	CH,40		;  REASONABLE?
	JRST	IFDD39		;NO
	SUBI	CH,40		;YES--CONVERT TO SIXBIT

IFDD32:	HRLI	CH,CAI.		;GET DUMMY CAI OPERATOR
	LDB	TE,CONDIT	;CONVERT
	ROT	TE,-^D8		;  OPERATOR TO
	ADD	CH,TE		;  SOMETHING VALID
	PUSHJ	PP,PUTASY	;GENERATE <CAIX 0,LITERAL>
	JRST	JFALSE		;PUT OUT FALSE JUMP AND LEAVE

;CANNOT USE SPECIAL CODE

IFDD36:	PUSHJ	PP,IFDD51	;PUT LITERAL IN LITAB
	JRST	IFDD2		;TRY AGAIN

;LITERAL HAS NON-SIXBIT VALUE

IFDD39:	HRRZ	TE,OPERND
	MOVEM	TE,CUREOP
	MOVEI	DW,^D392
	PUSHJ	PP,OPNFAT
	MOVEI	CH,0
	JRST	IFDD32
;BOTH 'A' AND 'B' ARE WORD-CONTAINED, AND HAVE SAME MODE

IFDD40:	CAIN	TE,^D36		;ARE THEY FULL WORDS?
	JRST	IFDD44		;YES, SPECIAL TREATMENT
	PUSHJ	PP,IFDD41	;GENERATE <LDB 1,A>
	PUSHJ	PP,IFDD42	;GENERATE <LDB 0,B>
	MOVSI	CH,CAM.+AC1	;GET DUMMY CAM OPERATOR
	LDB	TE,CONDIT	;CONVERT
	ROT	TE,-^D8		;  OPERATOR TO
	ADD	CH,TE		;  SOMETHING REASONABLE
	PUSHJ	PP,PUTASY	;GENERATE <CAMX 1,0>
	JRST	JFALSE		;PUT OUT FALSE PATH AND QUIT

;GENERATE <LDB 1,A>

IFDD41:	MOVSI	CH,LDB.+AC1
	MOVEI	LN,EBASEA
	JRST	IFDD43

;GENERATE <LDB 0,B>

IFDD42:	MOVSI	CH,LDB.
	MOVEI	LN,EBASEB

IFDD43:	PUSHJ	PP,PUT.LD	;GENERATE <LDB [CURRENT LITERAL]>
	AOS	ELITPC

	MOVE	TA,[XWD BYTLIT,2]
	PUSHJ	PP,STASHL
	HRRZ	TA,EBASEX(LN)
	PUSHJ	PP,STASHL
	MOVE	TA,ESIZEX(LN)
	HRRZ	TD,EMODEX(LN)
	IMUL	TA,BYTE.S(TD)
	HLR	TD,ERESX(LN)
	SUB	TD,TA
	ROT	TA,-6
	HRRI	TA,(TD)
	ROT	TA,-6
	HRR	TA,EINCRX(LN)
	JRST	STASHL

;BOTH 'A' AND 'B' ARE WORD-CONTAINED, HAVE SAME MODE, AND ARE 36 BITS

IFDD44:	LDB	TE,CONDIT	;IF CONDITION IS
	CAIE	TE,EQ		;  EQUAL OR
	CAIN	TE,NOTEQ	;  NOT EQUAL, GENERATE
	JRST	.+2		;  SPECIAL CODE, ELSE
	JRST	IFDD3A		;  RETURN TO NORMAL
	MOVSI	CH,MOV+AC1	;WE CAN USE MOVE RATHER THAN LDB
	PUSHJ	PP,PUT.A	;GENERATE <MOVE 1,A>
	MOVSI	CH,CAM.+AC1	;NO NEED TO LOAD B
	LDB	TE,CONDIT	;CONVERT
	ROT	TE,-^D8		;  CONDITION TO
	ADD	CH,TE		;  CAMX
	PUSHJ	PP,PUT.B	;GENERATE <CAMX 1,B>
	JRST	JFALSE		;PUT OUT FALSE AND QUIT
;CHECK TO SEE IF FIELD IS WORD-CONTAINED.
;IF SO, RETURN TO CALL+2; IF NOT RETURN TO CALL+1.

IFDD50:	MOVE	TE,ESIZEX(LN)
	HRRZ	TD,EMODEX(LN)
	IMUL	TE,BYTE.S(TD)
	HLRZ	TD,ERESX(LN)
	CAML	TD,TE
	AOS	(PP)
	POPJ	PP,

;PUT VALUE OF THE LITERAL 'A' INTO LITAB

IFDD51:	PUSH	PP,ESIZEB
	HLRZ	TE,OPERND
	MOVE	TE,0(TE)
	TLNE	TE,GNALL
	JRST	IFDD52

	MOVE	TE,ESIZEA
	CAMLE	TE,ESIZEB
	MOVEM	TE,ESIZEB
IFDD52:	PUSHJ	PP,LITD.
	POP	PP,ESIZEB
	POPJ	PP,
;TABLE OF FIG. CONST. ENTRY POINTS, WHEN "A" IS NOT AC'S

IFFCT:	EXP	IFTODY	;TODAY
	EXP	IFSPAC	;SPACE
	EXP	IFZERO	;ZERO
	EXP	IFQUOT	;QUOTE
	EXP	IFHIV	;HIGH-VALUES
	EXP	IFLOV	;LOW-VALUES

;TABLE OF FIG. CONST. ENTRY POINTS, WHEN "A" IS AC'S

IFFCTA:	EXP	IFATDY	;TODAY
	EXP	BADCLS	;SPACE
	EXP	IFZERO	;ZERO
	EXP	BADCLS	;QUOTE
	EXP	IFHIV	;HIGH-VALUES
	EXP	IFLOV	;LOW-VALUES
;ERROR ROUTINES

;TWO LITERALS BEING COMPARED

TWOLIT:	MOVEI	DW,^D331
	JRST	OPNFAT


;AC'S BEING COMPARED WITH SOMETHING NOT NUMERIC

BADCLS:	MOVEI	DW,^D211
	JRST	OPNFAT

;INTERMEDIATE RESULT > 19 DIGITS

TOOBIG:	MOVEI	DW,^D88
	JRST	OPNFAT

;CONFUSION -- "B" AT FAULT

IFCONB:	SKIPA	TC,OPERND

;CONFUSION -- "A" AT FAULT

IFCONA:	MOVS	TC,OPERND
	HRRZM	TC,CUREOP
	MOVEI	DW,^D276
	JRST	OPNFAT

;"B" MUST BE NUMERIC

NOTNMB:	SKIPA	TC,OPERND

;"A" MUST BE NUMERIC

NOTNMA:	MOVS	TC,OPERND
	HRRZM	TC,CUREOP
	MOVEI	DW,^D211
	JRST	OPNFAT
;GENERATE CODE FOR "ENDIF"

ENDIFG:	TLNE	W1,GNENDS	;IS THIS AN "END SPIF"?
	SKIPN	TB,EINTO	;ANY "INTO" FOR A READ?
	POPJ	PP,		;NO--QUIT

	HRRZI	TA,EINTO
	HRRZI	TC,EINTO+2
	MOVEM	TC,CUREOP
	PUSHJ	PP,MOVGN.	;GENERATE THE MOVE
	SETZM	EINTO
	POPJ	PP,
;GENERATE CODE FOR "SPIF" OPERATOR

SPIFGN:	TLNN	W1,ATINVK
	JRST	SPIF5

SPIF3:	HLRZ	CH,W2

SPIF4:	ANDI	CH,LMASKS
	IORI	CH,AS.TAG
	HRLI	CH,JRST.
	JRST	PUTASY

;NEITHER INVALID KEY NOR AT END--MUST BE SIZE ERROR

SPIF5:	MOVE	CH,[XWD SKIPN.,SZERA.]
	SKIPE	EMULSZ
	PUSHJ	PP,PUT.EX##
	SETZM	EMULSZ
	PUSHJ	PP,SPIF3	;PUT OUT THE JRST
	SKIPN	CH,ESZERA	;ANY TAG TO GO?
	POPJ	PP,		;NO--QUIT

	SETZM	ESZERA		;YES--CLEAR INDICATOR
	JRST	PUTTAG		;PUT OUT THE TAG--THEN QUIT
;GENERATE CODE FOR "ELSE"

ELSEGN:	HLRZ	CH,CPOPJ
	JUMPE	CH,CPOPJ
	JRST	SPIF4
;GENERATE CODE TO COMPARE A FIELD TO ZEROES.

IFZERO:	TSWF	FAINAC		;IS 'A' IN AC'S?
	JRST	IFZ20		;YES

	MOVE	TE,ESIZEA
	MOVEM	TE,ESIZEZ

	HRRZ	TE,EMODEA
	CAILE	TE,DSMODE
	JRST	IFZ2
	TSWF	FANUM		;IS 'A' NUMERIC?
	JRST	IFZ19		;YES

	CAIN	TE,D6MODE
	JRST	IFZ1
	MOVSI	CH,ZERO.7
	MOVEI	TD,"0"
	JRST	IFZ1C

IFZ1:	MOVSI	CH,ZERO.6
	MOVEI	TD,"0"-40
IFZ1C:	MOVEM	TD,ESAVAC
	PUSHJ	PP,SPECIL
	POPJ	PP,		;"CAM" GENERATED--EXIT

	LDB	TE,CONDIT	;IF CONDITION IS
	CAIE	TE,EQ		;  EQUAL OR
	CAIN	TE,NOTEQ	;  NOT EQUAL,
	JRST	IFNM2		;  SPECIAL PROCESSING
	JRST	IFQHV2		;  ELSE NORMAL

;NOT DISPLAY

IFZ2:	TLZE	W1,NOTF
	TLC	W1,CONCMP
	PUSHJ	PP,SUBSCD
	HRRZ	TE,EMODEA
	CAIN	TE,D2MODE
	JRST	IFZ5

IFZ3:	MOVSI	CH,SKIP.
	LDB	TE,CONDIT
	ROT	TE,-^D9
	ADD	CH,TE
	PUSHJ	PP,PUT.A
	JRST	JFALSE
IFZ5:	LDB	TE,CONDIT
	JRST	@.(TE)
	EXP	IFZ6		;=
	EXP	IFZ3		;>
	EXP	IFZ9		;NOT <
	EXP	IFZ3		;<
	EXP	IFZ10		;NOT >
	EXP	IFZ8		;NOT =

IFZ6:	MOVSI	CH,SKIPN.
	PUSHJ	PP,PUT.A
	MOVSI	CH,SKIPE.
	AOS	EINCRA
	PUSHJ	PP,PUT.A

IFZ7:	SOS	EINCRA

	JRST	JFALSE


IFZ8:	MOVSI	CH,SKIPN.
	PUSHJ	PP,PUT.A
	AOS	EINCRA
	MOVSI	CH,SKIPE.
	PUSHJ	PP,PUT.A
	MOVSI	CH,SKIPA.
	PUSHJ	PP,PUTASY
	JRST	IFZ7

IFZ9:	MOVSI	CH,SKIPL.
	JRST	IFZ11

IFZ10:	MOVSI	CH,SKIPG.

IFZ11:	PUSHJ	PP,PUT.A
	MOVE	CH,[XWD JRST.+ASINC,AS.MSC]
	PUSHJ	PP,PUTASY
	HRRZI	CH,AS.DOT+4
	PUSHJ	PP,PUTASN
	JRST	IFZ6
;COMPARE A FIELD AGAINST ZEROES  (CONT'D).

;"A" IS NUMERIC DISPLAY

IFZ19:	PUSHJ	PP,MXAC.	;GET IT INTO AC'S


;"A" IS IN THE AC'S.

IFZ20:	HRRZ	TE,EMODEA
	CAIN	TE,D2MODE
	JRST	IFZ22

	MOVSI	CH,JUMP.
	LDB	TE,CONDIT
	TLNN	W1,NOTF
	TRC	TE,CONCMP/100
	ROT	TE,-^D9
	ADD	CH,TE

	MOVE	TE,EAC
	DPB	TE,CHAC
	JRST	JFLSEA

IFZ22:	LDB	TE,CONDIT
	TLNE	W1,NOTF
	TRC	TE,CONCMP/100
	JRST	@.(TE)
	EXP	IFZ26		;=
	EXP	IFZ23		;>
	EXP	IFZ24		;NOT <
	EXP	IFZ23		;<
	EXP	IFZ25		;NOT >
	EXP	IFZ27		;NOT =

IFZ23:	TRC	TE,CONCMP/100
	ROT	TE,-^D9
	MOVSI	CH,JUMP.
	ADD	CH,TE
	MOVE	TE,EAC
	DPB	TE,CHAC
	JRST	JFLSEA

IFZ24:	SKIPA	CH,[XWD JUMPG.+ASINC,AS.MSC]

IFZ25:	MOVE	CH,[XWD JUMPL.+ASINC,AS.MSC]
	MOVE	TE,EAC
	DPB	TE,CHAC

	PUSHJ	PP,PUTASY
	HRRZI	CH,AS.DOT+3
	PUSHJ	PP,PUTASN

IFZ26:	MOVSI	CH,JUMPN.
	MOVE	TE,EAC
	DPB	TE,CHAC
	PUSHJ	PP,JFLSEA

IFZ261:	MOVE	TE,EAC
	ADDI	TE,1
	DPB	TE,CHAC
	JRST	JFLSEA

IFZ27:	MOVE	CH,[XWD JUMPN.+ASINC,AS.MSC]
	PUSHJ	PP,PUT.XA
	HRRZI	CH,AS.DOT+2	; .+2
	PUSHJ	PP,PUTASN
	MOVSI	CH,JUMPE.
	JRST	IFZ261

;GENERATE CODE TO COMPARE AN ALPHANUMERIC FIELD TO SPACES.

IFSPAC:	MOVE	TE,ESIZEA
	MOVEM	TE,ESIZEZ
	SWOFF	FASIGN;

	MOVE	TE,EMODEA
	CAIN	TE,D6MODE
	JRST	IFSP2
	CAIE	TE,D7MODE
	JRST	BADFIG
	MOVSI	CH,SPAC.7
	MOVEI	TD," "
	JRST	IFSP2A

IFSP2:	MOVSI	CH,SPAC.6
	MOVEI	TD," "-40
IFSP2A:	MOVEM	TD,ESAVAC
	PUSHJ	PP,SPECIL
	POPJ	PP,		;"CAM" GENERATED--EXIT
	LDB	TE,CONDIT
	CAIE	TE,EQ
	CAIN	TE,NOTEQ
	JRST	IFSP3
	JRST	IFQHV2

IFSP3:	TLZE	W1,NOTF
	TLC	W1,CONCMP
	PUSH	PP,CH		;COULDN'T USE "CAM"
	PUSHJ	PP,B1PAR
	POP	PP,CH

	PUSHJ	PP,SETUUO
	TSWF	FASUB;
	JRST	IFSP5

	HRRI	CH,AS.MSC
	TLO	CH,ASINC
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACC
	PUSHJ	PP,PUTASN
	JRST	IFSP6

IFSP5:	HRRI	CH,SXR
	PUSHJ	PP,PUTASY

IFSP6:	MOVSI	CH,SKIPA.
	TLNN	W1,EQUALF
	PUSHJ	PP,PUTASY
	JRST	JFALSE

BADFIG:	MOVEI	DW,^D211

IFERA:	MOVE	TC,OPERND
	MOVE	TC,0(TC)
	LDB	LN,TCLN
	LDB	CP,TCCP
	JRST	FATAL
;GENERATE CODE TO COMPARE A FIELD AGAINST QUOTES

IFQUOT:	TSWF	FANUM		;IS "A" NUMERIC?
	JRST	BADFIG		;YES--ERROR

	MOVEI	TD,42		;NO--PUT A QUOTE INTO TD
	JRST	IFQHLV


;GENERATE CODE TO COMPARE A FIELD AGAINST HIGH-VALUES

IFHIV:	HRRZ	TE,EMODEA
	MOVEI	TD,77
	CAIN	TE,D6MODE
	JRST	IFQHV0

	MOVEI	TD,177
	CAIN	TE,D7MODE
	JRST	IFQHV0

	PUSHJ	PP,HIVAL##
	MOVE	EACC,EHIVAL

IFHIV2:	TSWT	FAINAC		;IS "A" IN THE AC'S?
	PUSHJ	PP,MXAC.	;NO--GET IT THERE

	HRRZ	TE,EMODEA
	CAIN	TE,D2MODE
	JRST	IFHIV3

	MOVE	CH,[XWD CAM.+ASINC,AS.MSC]
	LDB	TE,CONDIT
	ROT	TE,-^D8
	ADD	CH,TE
	PUSHJ	PP,PUT.XA
	HRRZ	CH,EACC
	PUSHJ	PP,PUTASN

	JRST	JFALSE

IFHIV3:	MOVE	CH,[XWD COMP.D+ASINC,AS.MSC]
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACC
	PUSHJ	PP,PUTASN

	JRST	ADDRS3
;GENERATE CODE TO COMPARE A FIELD AGAINST LOW-VALUES

IFLOV:	HRRZ	TE,EMODEA
	SETZM	ESAVAC
	CAIE	TE,D6MODE
	CAIN	TE,D7MODE
	JRST	IFQHV1

	CAIN	TE,FPMODE
	JRST	IFLOV2

	PUSHJ	PP,LOVAL##
	MOVE	EACC,ELOVAL
	JRST	IFHIV2

IFLOV2:	PUSHJ	PP,FPLOV.
	MOVE	EACC,EFPLOV
	JRST	IFHIV2
;GENERATE CODE TO COMPARE A DISPLAY FIELD AGAINST QUOTES OR HIGH-VALUES.
;EITHER A QUOTE OR A HI-VALUE IS IN TD, IN ASCII.

IFQHLV:	HRRZ	TE,EMODEA
	CAIE	TE,D7MODE
	SUBI	TD,40
IFQHV0:	MOVEM	TD,ESAVAC

;GENERATE CODE TO COMPARE A DISPLAY FIELD AGAINST QUOTES, HIGH-VALUES, OR
;LOW-VALUES.
;CHARACTER TO COMPARE AGAINST IS IN ESAVAC.

IFQHV1:	PUSHJ	PP,SPECIL
	POPJ	PP,		;"CAM" GENERATED--EXIT

IFQHV2:	PUSHJ	PP,SUBSCA
	TSWF	FASUB;
	JRST	IFQHV3

	MOVE	TA,[XWD BYTLIT,2]
	PUSHJ	PP,STASHL
	PUSHJ	PP,MBYTEA

	MOVE	CH,[XWD MOV+ASINC+SAC,AS.MSC]
	PUSHJ	PP,PUTASY
	HRRZ	CH,ELITPC
	IORI	CH,AS.LIT
	PUSHJ	PP,PUTASN
	AOS	ELITPC

IFQHV3:	SETZM	EAC
	MOVSI	CH,MOV##	;GENERATE <MOVEI 0,SIZE>
	HRRZ	TC,ESIZEA
	PUSHJ	PP,PUT.LA

	PUSHJ	PP,GETTAG
	MOVEM	CH,ESAVAC+1
	PUSHJ	PP,PUTTAG

	MOVE	CH,[XWD ILDB.+AC2,SXR]
	PUSHJ	PP,PUTASY

	LDB	TE,CONDIT
	CAIE	TE,EQ
	JRST	IFQHV5

	MOVSI	CH,CAIE.+AC2
	HRR	CH,ESAVAC
	PUSHJ	PP,PUTASY
	PUSHJ	PP,JFALSE

	MOVSI	CH,SOJG.
	HRR	CH,ESAVAC+1
	JRST	PUTASY
;GENERATE CODE TO COMPARE A DISPLAY FIELD AGAINST QUOTES, ETC.  (CONT'D)

;A "CAM" WOULDN'T DO, AND IT IS NOT "EQUALS".

IFQHV5:	MOVSI	CH,CAIN.+AC2	;GENERATE: CAIN 2,<VALUE>
	HRR	CH,ESAVAC
	PUSHJ	PP,PUTASY
	MOVSI	CH,SOJG.	;		SOJG 0,%X
	HRR	CH,ESAVAC+1
	PUSHJ	PP,PUTASY

	LDB	TE,CONDIT	;IS IT
	CAIE	TE,NOTEQ	;  'NOT EQUAL'?
	JRST	IFQHV6		;NO
	MOVSI	CH,JMPLE.	;		JUMPLE 0,<FALSE>
	JRST	JFLSEA

;A "CAM" WOULDN'T DO, AND IT NEITHER "EQUALS" NOR "NOT EQUALS".

IFQHV6:	MOVSI	CH,CAI.+AC2
	ROT	TE,-^D8
	ADD	CH,TE
	HRR	CH,ESAVAC
	PUSHJ	PP,PUTASY
	JRST	JFALSE
;COMPARE AC'S AGAINST "TODAY"

IFATDY:	PUSHJ	PP,PUTEMP

;COMPARE A FIELD AGAINST "TODAY"

IFTODY:	MOVE	CH,[XWD EPJPP,TODAY.##]
	PUSHJ	PP,PUTASY

	MOVSI	TE,^D36
	MOVEM	TE,EBASEB
	SETZM	TE,EINCRB
	MOVEI	TE,^D12
	MOVEM	TE,ESIZEB
	SETZM	EDPLB
	MOVEI	TE,D6MODE
	MOVEM	TE,EMODEB

	SWON	FBNUM;
	TSWT	FANUM;
	JRST	IFDD

	PUSHJ	PP,SWAPIT
	PUSHJ	PP,MXAC.

	SWON	FAINAC;
	JRST	IFGN0

;GENERATE CODE TO SEE IF A FIELD IS ALPHABETIC

IFALF:  MOVE    TE,EMODEA
        CAIN    TE,D6MODE
        JRST    IFALF1
        CAIE    TE,D7MODE
        JRST    IFNM3
	MOVSI	CH,ALF.7
	JRST	IFALF2

IFALF1:	MOVSI	CH,ALF.6

IFALF2:	TSWT	FANUM		;IS IT NUMERIC?
	JRST	IFNM2		;NO
	JRST	IFNM3		;YES--ERROR

;GENERATE CODE TO SEE IF A FIELD IS NUMERIC

IFNUM:	MOVE	TE,EMODEA
	CAIN	TE,D6MODE
	JRST	IFNM1
	CAIE	TE,D7MODE
	JRST	IFNM4
	MOVSI	CH,NUM.7
	SKIPA

IFNM1:	MOVSI	CH,NUM.6

	MOVE	TA,ETABLA
	PUSHJ	PP,LNKSET
	LDB	TE,DA.CLA
	CAIN	TE,ALPHAB
	JRST	IFNM3

IFNM2:	MOVE	TE,ESIZEA
	MOVEM	TE,ESIZEZ
	JRST	IFSP3

IFNM3:	MOVEI	DW,^D211
	LDB	LN,W1LN
	LDB	CP,W1CP
	JRST	FATAL

IFNM4:	MOVEI	DW,^D212
	TLNE	W1,NOTF
	MOVEI	DW,^D213
	LDB	LN,W1LN
	LDB	CP,W1CP
	PUSHJ	PP,WARN
	TLNE	W1,NOTF
	JRST	JFALSE
	POPJ	PP,
;GENERATE CODE TO SEE IF A FIELD IS POSITIVE

IFPOS:	MOVE	TE,EMODEA
	CAIN	TE,D6MODE
	JRST	IFPOS1
	CAIE	TE,D7MODE
	JRST	IFPOS3
	MOVSI	CH,POS.7
	JRST	IFPOS2

IFPOS1:	MOVSI	CH,POS.6

IFPOS2:	MOVE	TA,ETABLA
	PUSHJ	PP,LNKSET
	LDB	TE,DA.CLA
	CAIE	TE,NUMERC
	JRST	IFNM3
	JRST	IFNM2

IFPOS3:	TSWF	FAINAC		;IS OPERAND IN AC'S?
	JRST	IFPOS4		;YES

	HRRZ	TE,EMODEA
	CAIN	TE,D2MODE	;TWO-WORD?
	JRST	IFPO31		;YES

	PUSHJ	PP,SUBSCA
	MOVSI	CH,SKIPG.
	TLNE	W1,NOTF
	MOVSI	CH,SKPLE.
	PUSHJ	PP,PUT.A
	JRST	JFALSE
	; TWO-WORD COMP, TEST FOR POSITIVE OR NOT POSITIVE

	; GENERATE	SKIPL <DATA-NAME>
	;		SKIPG <DATA-NAME>+1
	; FOR POSITIVE

	; GENERATE	SKIPG <DATA-NAME>
	;		SKIPLE <DATA-NAME>+1
	; FOR NOT POSITIVE


IFPO31:	PUSHJ	PP,SUBSCD
	MOVSI	CH,SKIPL.
	TLNE	W1,NOTF
	MOVSI	CH,SKIPG.
	PUSHJ	PP,PUT.A
	MOVSI	CH,SKIPG.
	TLNE	W1,NOTF
	MOVSI	CH,SKPLE.
	AOS	EINCRA
	PUSHJ	PP,PUT.A
	SOS	EINCRA
	JRST	JFALSE

IFPOS4:	HRRZ	TE,EMODEA
	CAIE	TE,D2MODE
	JRST	IFPO41		;ONE-WORD
	MOVE	CH,[XWD JUMPG.+ASINC,AS.MSC]
	TLNE	W1,NOTF
	MOVE	CH,[XWD JMPLE.+ASINC,AS.MSC]
	PUSHJ	PP,PUT.XB
	HRRZI	CH,AS.DOT+2
	PUSHJ	PP,PUTASN
IFPO41:	MOVSI	CH,JMPLE.
	TLNE	W1,NOTF
	MOVSI	CH,JUMPG.

IFPOS5:	MOVE	TE,EAC
	DPB	TE,CHAC
	JRST	JFLSEA

;GENERATE CODE TO SEE IT A FIELD IS NEGATIVE

IFNEG:	MOVE	TE,EMODEA
	CAIN	TE,D6MODE
	JRST	IFNEG1
	CAIE	TE,D7MODE
	JRST	IFNEG2
	MOVSI	CH,NEG.7
	JRST	IFPOS2

IFNEG1:	MOVSI	CH,NEG.6
	JRST	IFPOS2

IFNEG2:	TSWF	FAINAC;
	JRST	IFNEG4

	PUSHJ	PP,SUBSCA
	MOVSI	CH,SKIPL.
	TLNE	W1,NOTF
	MOVSI	CH,SKPGE.
	PUSHJ	PP,PUT.A
	JRST	JFALSE

IFNEG4:	MOVSI	CH,JMPGE.
	TLNE	W1,NOTF
	MOVSI	CH,JUMPL.
	JRST	IFPOS5
;CHECK TO SEE IF A DISPLAY COMPARISON COULD BE A "CAM" COMPARE.

;TRUE IF FIELD IS WORD-CONTAINED.
;ENTER WITH COMPARISON CONSTANT IN "ESAVAC"

;IF FALSE - EXIT TO CALL+2.

;IF TRUE - GENERATE A "CAM" TYPE COMPARISON AN EXIT TO CALL+1.

SPECIL:	TSWF	FASUB;
	JRST	SPECL9
	HLRZ	TC,ERESA	;GET RESIDUE OF "A"
	MOVE	TB,ESIZEA	;AND IT'S SIZE
	HRRZ	TD,EMODEA	;AND IT'S USAGE

	IMUL	TB,BYTE.S(TD)	;COMPUTE SIZE IN BITS
	SUB	TC,TB		;SUBTRACT THAT FROM RESIDUE
	JUMPL	TC,SPECL9	;IS "A" WORD-CONTAINED?

	CAIN	TB,^D36		;YES--IS IT A FULL WORD?
	JRST	SPECL1		;YES

	LSH	TC,6		;NO--NEW RESIDUE IS IN "TC"
	ADD	TB,TC		;NOW RESIDUE AND FIELD SIZE ARE IN "TB"

	MOVE	TA,[XWD BYTLIT,2];CREATE BYTE POINTER IN LITAB
	PUSHJ	PP,STASHL
	HRRZ	TA,EBASEA
	PUSHJ	PP,STASHL
	LSHC	TB,-14
	HRR	TA,EINCRA
	PUSHJ	PP,STASHL

	MOVSI	CH,LDB.
	PUSHJ	PP,PUT.LC

	AOS	ELITPC
	JRST	SPECL2

SPECL1:	PUSHJ	PP,SUBSCA
	MOVSI	CH,MOV
	PUSHJ	PP,PUT.AA
;TRY FOR "CAM" COMPARISON FOR DISPLAY FIELD  (CONT'D).

;ITEM IS IN AC'S NOW.

SPECL2:	MOVE	TA,ESIZEA	;CREATE NEW CONSTANT
	MOVE	TB,ESAVAC
	HRRZ	TC,EMODEA
	MOVE	TC,BYTE.S(TC)

	SOJLE	TA,SPECL4

SPECL3:	LSH	TB,0(TC)
	IORM	TB,ESAVAC
	SOJG	TA,SPECL3

SPECL4:	MOVE	TC,ESAVAC
	TLNE	TC,-1
	JRST	SPECL5

	MOVSI	CH,CAM.
	LDB	TE,CONDIT
	ROT	TE,-^D8
	ADD	CH,TE
	PUSHJ	PP,PUT.LA

	JRST	JFALSE

SPECL5:	MOVE	TA,[XWD OCTLIT,1]
	PUSHJ	PP,STASHL
	MOVE	TA,TC
	PUSHJ	PP,STASHL
	MOVSI	CH,CAM.
	LDB	TE,CONDIT
	ROT	TE,-^D8
	ADD	CH,TE
	PUSHJ	PP,PUT.LC
	AOS	ELITPC
	JRST	JFALSE

SPECL9:	AOS	(PP)
	POPJ	PP,
;PUT OUT <JRST %NNNNN> ;WHERE %NNNNN IS "ELSE" PATH.

JFALSE:	MOVSI	CH,JRST.
JFLSEA:	HLR	CH,W2
JFLSEB:	ANDCMI	CH,7B20
	IORI	CH,AS.TAG
	JRST	PUTASY

;PUT OUT <JRST .+N> IF "EQUAL" FLAG OFF, <JRST .+N-1> IF "EQUAL"
;FLAG IS ON. ENTER WITH "N" IN ACCUMULATOR "TC".
;SKIP ONE INSTRUCTION UPON RETURN FROM JTRUES, BUT NOT FROM JTRUE.

JTRUES:	AOS	(PP)

JTRUE:	SKIPE	CH,TAGTRU	;ANY TAG FOR TRUE PATH?
	JRST	PUTASY		;YES--PUT OUT <JRST %TAG>

	HRRZI	TC,AS.DOT(TC)
	SKIPN	ECEQUL		;SPECIAL EQUAL PATH?
	TLNN	W1,EQUALF	;NO--TRUE IF EQUAL?
	JRST	JOUT		;SPECIAL EQUAL PATH, OR NO EQUAL
	SOJA	TC,JOUT		;NO SPECIAL EQUAL PATH, AND TRUE IF EQUAL
;PUT OUT THE THREE INSTRUCTION FOR LESS,GREATER,EQUAL

ADDRS3:	MOVEI	TC,3
	TLNE	W1,LESSF
	PUSHJ	PP,JTRUES
	PUSHJ	PP,JFALSE

	MOVEI	TC,2
	TLNE	W1,GREATF
	PUSHJ	PP,JTRUES
	PUSHJ	PP,JFALSE

	SKIPE	CH,ECEQUL	;SPECIAL EQUAL PATH?
	JRST	ADRS3A		;YES

	TLNN	W1,EQUALF
	PUSHJ	PP,JFALSE
	POPJ	PP,

ADRS3A:	HRLI	CH,JRST.
	JRST	JFLSEB
;COUNT THE NUMBER OF OPERANDS FOR "IF".
;IF < 2 OR > 3, ERROR.
;IF 2, RETURN.
;IF 3, THROW AWAY ALL BUT SECOND AND THIRD AND THEN RETURN.


MAK2OP:	MOVEM	EACA,EOPNXT
	HRRZ	TA,EOPLOC
	ADDI	TA,1
	MOVEM	TA,CUREOP

	PUSHJ	PP,BMPEOP	;IS THERE AT LEAST 2?
	JRST	OPCHK1		;NO--ERROR

	AOS	TB,CUREOP	;YES--TB_LOCATION OF SECOND ONE

	PUSHJ	PP,BMPEOP	;MORE THAN 2?
	JRST	OPCHK3		;NO--GO HOME

	AOS	CUREOP


OPCHK2:	PUSHJ	PP,BMPEOP
	AOSA	TC,CUREOP
	JRST	OPCHK1

OPCHK4:	SUBI	TC,0(TB)
	ADDI	TC,-1(TA)
	MOVSS	TB
	HRRI	TB,0(TA)
	BLT	TB,0(TC)

	SUB	TC,EOPLOC
	HRLS	TC
	ADD	TC,EOPLOC
	MOVE	EACA,TC

OPCHK3:	MOVEM	EACA,EOPNXT
	MOVEM	TA,CUREOP

	POPJ	PP,

OPCHK1:	SWON	FERROR;
	POPJ	PP,
;COUNT NUMBER OF OPERANDS FOR "IFT".
;IF 1, RETURN.
;IF >1, THROW AWAY ALL BUT LAST ONE.

MAK1OP:	MOVEM	EACA,EOPNXT
	HRRZ	TA,EOPLOC
	ADDI	TA,1
	MOVEM	TA,CUREOP
	CAIL	TA,(EACA)	;IF NO OPERANDS,
	SWONS	FERROR		;  TROUBLE

	PUSHJ	PP,BMPEOP	;ONLY 1?
	JRST	OPCHK3		;YES--WE'RE DONE

MAK1A:	AOS	TB,CUREOP
	PUSHJ	PP,BMPEOP	;ANY MORE?
	AOSA	TC,CUREOP	;NO
	JRST	MAK1A		;LOOP

	JRST	OPCHK4
;SET "A" PARAMETERS TO SHOW THAT IT IS IN AC'S

SETBCX:	MOVE	TE,EAC
	MOVEM	TE,EBASEA
	SETZM	EINCRA
	
	PUSHJ	PP,SWAPIT
	SWOFF	FBSUB;
	SWON	FBSIGN;

	SKIPE	EAC
	TDCA	TE,TE
	MOVEI	TE,2
	MOVEM	TE,EAC

	POPJ	PP,

;SWAP OPERANDS

SWAPIT:	PUSHJ	PP,SWAPAB

	LDB	TE,CONDIT	;IS CONDITION "EQUAL"?
	CAIE	TE,EQ
	CAIN	TE,NOTEQ	;NO--"UNEQUAL"?
	SKIPA
	TLC	W1,GLCMP	;NO--COMPLEMENT THE CONDITION

CPOPJ:	POPJ	PP,
;CHECK TO SEE IF AN ITEM IS EDITED.
;IF SO, USE EXTERNAL SIZE.

SETED:	PUSHJ	PP,SETOPN	;SET UP PARAMETERS
	HRRZ	TE,EMODEX(LN)	;IS IT DISPLAY?
	CAILE	TE,DSMODE
	POPJ	PP,		;NO--RETURN

	MOVE	TC,CUREOP	;YES--GET DATAB FLAG WORD
	HRRZ	TA,1(TC)
	PUSHJ	PP,LNKSET
	LDB	TE,DA.EDT	;IS IT
	SKIPN	TE		;  EDITED?
	POPJ	PP,		;NO

	LDB	TE,DA.EXS	;YES--GET EXTERNAL SIZE
	MOVEM	TE,ESIZEX(LN)
	POPJ	PP,
;IMPROPER CONDITIONS

BADIF:	TTCALL	3,[ASCIZ /BAD "IF" FLAGS
/]
	JRST	KILLF

BADCOD:	TTCALL	3,[ASCIZ /BAD "IF" USAGE
/]
	POPJ	PP,


BADIFT:	TTCALL	3,[ASCIZ /BAD "IFT" FLAGS
/]
	JRST	KILLFAC1==1B30
AC2==2B30
AC3==3B30
SAC==12B30	;SUBSCRIPT AC

NUMERC==2	;NUMERIC USAGE
ALPHAB==1	;ALPHABETIC USAGE

ASINC==1B19	;"INCREMENT FOLLOWS" FLAG IN ASYFIL OPERATOR

GNENDS==1B27	;"END SPIF" FLAG IN OPERATOR

LESSF==1B27	;"LESS" FLAG IN CONDITIONAL OPERATOR
GREATF==1B28	;"GREATER" FLAG IN CONDITIONAL OPERATOR
EQUALF==1B29	;"EQUAL" FLAG IN CONDITIONAL OPERATOR
CONCMP==EQUALF!LESSF!GREATF
GLCMP==LESSF!GREATF
GOFALS==1B32	;"FALSE" OR "TRUE" FLAG IN "IF" OPERATOR
NOTF==1B33	;"NOT" FLAG IN CONDITIONAL

SWITCH==3B<^D18+^D10>	;"THIS IS FOR HARDWARE-SWITCH" FLAGS IN W1
SWCHON==1B<^D18+^D9>	;"TEST FOR HARDWARE SWITCH ON" FLAG IN W1

CRANGE==1B18		;"RANGE" FLAG IN CONTAB ENTRY
CNFIGC==1B19		;"FIG. CONST." FLAG IN CONTAB

EQ==EQUALF/1B29
NOTEQ==<LESSF!GREATF>/1B29
GR==GREATF/1B29
NOTGR==<LESSF!EQUALF>/1B29
LS==LESSF/1B29
NOTLS==<EQUALF!GREATF>/1B29

CONDIT:	POINT 3,W1,11	;CONDITIONAL FLAGS
CALLSW:	XWD CALLI.,20	;INSTRUCTION WHICH READ HARDWARE SWITCHES
SWNUM:	POINT 6,1(TA),35	;LOCATION OF SWITCH NUMBER IN MNETAB ENTRY
MNESF:	POINT 2,1(TA),2	;LOCATION OF "ON" & "OFF" FLAGS IN MNETAB
W1SF:	POINT 2,W1,10	;LIKEWISE FOR OPERATOR
EXTERNAL LMASKB,LMASKS,LNKCOD,TB.DAT,TB.MNE,ATINVK
EXTERNAL XWDLIT,BYTLIT,D1LIT,D2LIT,OCTLIT
EXTERNAL EINTO,ENDIFT,W1LN,W1CP,TCLN,TCCP
EXTERNAL ECTRUE,ECFALS,ECNAME,ECNBP,ECXTRA,ECSTEP,ECEQUL,EREMAN,TAGTRU
EXTERNAL EOPLOC,EOPNXT,CUREOP,OPLINE,EHIVAL,ELOVAL,EFPLOV,EMULSZ
EXTERNAL AS.MSC,AS.TAG,AS.CNB,AS.DOT,AS.LIT,SZERA.,EPJPP
EXTERNAL EBASEA,EINCRA,ESIZEA,EDPLA,EMODEA,ERESA,EBYTEA,EFLAGA,ETABLA
EXTERNAL EBASEB,EINCRB,ESIZEB,EDPLB,EMODEB,ERESB,EBYTEB,EFLAGB,ETABLB
EXTERNAL EBASEX,EINCRX,ESIZEX,EDPLX,EMODEX,ERESX,EBYTEX,EFLAGX,ETABLX
EXTERNAL ESAVEA,ESAVEB,ESAVAX,ESAVBX,EBASAX,EBASBX
EXTERNAL ESIZEZ,EAC,BYTE.W,ELITPC,OPERND,BYTE.S,ESAVAC,ESZERA
EXTERNAL ELITLO,ELITHI,POWR10,DPWR10,EWORDB,CHAC
EXTERNAL D1MODE,D2MODE,D6MODE,D7MODE,DSMODE,FPMODE,FCMODE,LTMODE,SXR
EXTERNAL ZERO.7,SPAC.7,ALF.7,NUM.7,POS.7,NEG.7
EXTERNAL ZERO.6,SPAC.6,ALF.6,NUM.6,POS.6,NEG.6
EXTERNAL SKIP.,SKIPE.,SKIPN.,SKIPA.,SKIPG.,SKIPL.,SKPGE.,SKPLE.,JRST.
EXTERNAL JUMP.,JUMPE.,JUMPL.,JUMPN.,JUMPG.,JMPLE.,JMPGE.
EXTERNAL MOVM.,MOVEM.,MUL.,MULI.,IMUL.,HRRZI.,SETZB.,EXCH.
EXTERNAL CMP.,COMP.D,CMP.76
EXTERNAL HRLOI.,LDB.,ILDB.,CAI.,CAM.,MOVEI.,CAIE.,CAIN.,SOJG.
EXTERNAL TLNN.,TRNN.,TLNE.,TRNE.,CALLI.

EXTERNAL DA.CLA,DA.EDT,DA.EXS

	END
! %t