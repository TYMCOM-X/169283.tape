TITLE	XFRGEN FOR COBOL 5(107)		
SUBTTL	TRANSFER-OF-CONTROL GENERATORS		SERG POLEVITSKY/ALB/CAM

;COPYRIGHT 1970,1971,1972, DIGITAL EQUIPMENT CORP., MAYNARD, MA

TWOSEG
RELOC	400000

ENTRY XFRGEN
XFRGEN:

INTERNAL PARGEN,GOGOGN,SECGEN,ALTGEN,PERFGN,STOPGN,GODPGN,PRFYGN
INTERNAL  EWARN, RESOLV, SOLVER
INTERNAL TAGGEN, JUMPTO, SEGBRK, SEGCLN

EXTERNAL AQRJ.,ASRJ.,AZRJ.,EBADOP,BADEOP,FATAL,WARN,LNKSET,DEVDED
EXTERNAL PUTAS1,PUTAS2,PUTAS3,PUTASY,PUTASN,DISPGN,PUTTAG,KILL,KILLF
EXTERNAL XPNALT,XPNLIT,XPNSEC,SETSEG,SETUUO,OPFAT,OPNFAT,STASHL,PUT.EX
EXTERNAL COMEBK


DEFINE RETURN,<
	POPJ	PP,>

;GO TO WARNING PUTTER-OUTTER

DEFINE GOWARN (NUMBER),<
	MOVEI	DW,^D'NUMBER
	JRST	EWARN>

;PUSHJ TO WARNING PUTTER-OUTTER

DEFINE PJWARN (NUMBER),<
	MOVEI	DW,^D'NUMBER
	PUSHJ	PP,EWARN>

;GO TO FATAL PUTTER-OUTTER

DEFINE GOFATL (NUMBER),<
	MOVEI	DW,^D'NUMBER
	JRST	EFATAL>

;CHECK PROTAB ENTRY FOR VALIDITY

DEFINE ISOPOK (ACSYM),<
	TRNE	ACSYM,PTDEF	;IS OPERAND DEFINED?
	TRNE	ACSYM,PTMULD	;BUT NOT MULTIPLY DEFINED?
	POPJ	PP,		;BAD OPERAND
	>
	SUBTTL MISCELLANEOUS GENERATORS

TAGGEN:	HLRZ	CH,W2		;GET TAG NUMBER
	PUSHJ	PP,PUTTAG	;PUT TAG INTO TAG TABLE
	JRST	COMEBK		;RETURN WITHOUT DISTURBING EOPTAB

JUMPTO:	HLRZ	CH,W2			;GET TAG FROM LEFT HALF OF W2.
	ANDI	CH,TM.TAG
	IOR	CH,[XWD	JRST.,AS.TAG]	;CH _ JRST TAG [TAG CONVERTED TO F-G NOTATION].
	PUSHJ	PP,PUTASY	;WRITE IT OUT
	JRST	COMEBK		;RETURN WITHOUT DISTURBING EOPTAB


SEGBRK:	SKIPE	TA,EPSECT	;CHECK TO SEE IF ANY SECTIONS PRIOR
				;TO THIS ONE [IF NOT, HOW COME THERE IS
				;A PRIORITY # FLOATING AROUND?]


	JRST	SETSEG		;PULL THE SCATTERED SEGMENT TOGETHER
	TTCALL	3,[ASCIZ "INTERNAL ERROR: SEGMENT # FOUND BUT NO SECTIONS DETECTED
"]
	JRST	KILL
	SUBTTL SECTION GENERATOR



				SEENIT=1B35



SECGEN:	HRRZ	TA,EOPLOC	;IS THERE ONE AND ONLY ONE OPERAND?
	CAIE	TA,-2(EACA)
	JRST	BADEOP		;NO--TROUBLE

	HRRZ	TA,(EACA)	;GET PROTAB POINTER.
	PUSHJ	PP,LNKSET	;CONVERT LINK TO REAL ADDRESS

	HRRZ	EACD,2(TA)	;GET PRIORITY # FROM PROTAB

	TROE	EACD,SEENIT	;CHECK TO SEE IF
				;YOU HAVE SEEN THIS SECTION BEFORE
				;AND MARK IT AS "SEEN".
				;IF YOU HAVE SEEN A SECTION BEFORE &
				;BECAUSE OF SEGMENTATION
				;YOU ARE DOING RANDOM READING, THE COMPILER
				;COULD ENDLESSLY LOOP IF YOU DIDN'T DO THIS
				;CHECK

	JRST	PREVLP		;PREVENT ENDLESS RE-READING OF THE SOURCE.
	HRRM	EACD,2(TA)	;UPDATE PROTAB ENTRY.



	LDB	EACC,FLAGPS	;GET PREVIOUSLY-SEEN SECTION'S FLAGS & PRIORITY #
	ANDI	EACC,ENREZE	;STRIP OFF ALL BUT PRIORITY BITS FOR LAST-SEEN OPERATOR
	ANDI	EACD,ENREZE	;STRIP OFF SECTION PRIORITY BITS FOR ITEM HELD IN HAND
	CAIE	EACC,(EACD)	;EQUAL ?
	PUSHJ	PP,SEGCLN	;NOPE! CHECK TO SEE IF CLEAN UP NECESSARY
				;THEN PROCESS THE OPERATOR HELD IN HAND


				;
				;
	SKIPGE	W2,EPPARA	;IF 1ST PARAGRAPH NOT SEEN YET, OR LAST
				;PARAGRAPH DOES NOT REQUIRE AN EXIT,
				;DO NOT CHECK LAST
				;PARAGRAPH7S STATUS.
				;BIT 0 WILL BE UP IN EPPARA IF EXIT REQUIRED
				;
	PUSHJ	PP,ESETUP	;SET POINTERS UP FOR CALL TO PARGEN
				;
				;
				;
EPARRT:	MOVEI	EACC,EPSECT	;POINTER NOW REFLECTS FLAGS AND LINK
				;FOR THE SECTION OPERATOR.
				;
				;
	SKIPL	W2,EPSECT	;IF PREVIOUS SECTION NEEDS EXIT, OR
	TLNE	W2,PTDECL*2	;  IT IS IN DECLARATIVES,
	PUSHJ	PP,EXITRP	;  PUT OUT EXIT.
	JRST	EGETPR		;LEAVE FROM HERE FOR PARGEN.  

ESETUP:	MOVEI	EACC,EPPARA		;TELL PARGEN THAT PREVIOUS
					;PROCEDURE NAME WAS A PARAGRAPH
					;NAME.
	JRST	EXITRP			;GO TO PARGEN


PREVLP:	TTCALL	3,[ASCIZ "INTERNAL ERROR: INCORRECT SOURCE LINKAGE
"]
	JRST	KILL
	SUBTTL THE PARAGRAPH GENERATOR

	EPAREX=1B18		;THE ALERT FLAG TO SIGNAL THE
				;GENERATING OF AN EXIT AT THE END OF
				;THE LAST-SEEN PROCEDURE NAME OF TYPE
				;SPECIFIED BY (EACC).

				;
	ECPFLG=6B20		;CHANGE THE PROTAB FLAG FROM
				;PHASE E NOMANCLATURE TO PHASE F-G
				;NOMANCLATURE.
				;
				;
				;
PARGEN:	HRRZ	TA,EOPLOC	;IS THERE ONE AND ONLY ONE OPERAND?
	CAIE	TA,-2(EACA)
	JRST	BADEOP		;NO--TROUBLE

	MOVEI	EACC,EPPARA	;ADDRESS FOR WHICH "PREVIOUS"
				;PROCEDURE NAME WILL APPLY.
				;
				;
	SKIPGE	W2,EPPARA	;AS YOU COME TO THE PARAGRAPH
				;GENERATOR, EPPARA CAN BE EITHER
				;> 0 , OR = 0, THEN NO CHECKING NEEDED
				;< 0 THEN   CHECKS NEED TO BE MADE
	PUSHJ	PP,EXITRP	;AN EXIT IS REQUIRED!
;IF YOU COME FROM SCANNER ROUTINE,I.E., PARGEN CALLED DIRECTLY, YOU WILL
;BE INTERESTED IN THE PREVIOUS AND CURRENT PARAGRAPH OPERATORS.

;IF YOU COME FROM SECGEN, THEN YOU WILL BE INTERESTED IN THE PREVIOUS SECTION
;AND CURRENT SECTION OPERATORS

;IF YOU CAME TO THE PARAGRAPH GENERATOR AS PART OF THE CLEAN UP ACTIVITY AT
;A SEGMENT BREAK OR THE END OF PHASE E, THEN ALL THAT YOU
;ARE INTERESTED IN DOING IS GENERATING AN EXIT IF IT IS REQUIRED.

EGETPR:	MOVE	CH,EPGFIX	;"I AM A SECTION OR PARAGRAPH" TO CH.
				;RIGHT HALF LOADED WITH MASK WHICH WILL
				;CHANGE TABLE LINK TYPE FROM 4 TO 2.


	HRRZ	TA,(EACA)	;GET PROTAB LINK AS POINTED TO BY EACA.
	XORI	CH,(TA)		;CHANGE D-E NOTATION TO F-G NOTATION
				;FOR PROTAB ENTRY.

	HRRM	TA,(EACC)	;UPDATE EPSECT OR EPPARA WITH CURRENT PROTAB ENTRY.

	PUSHJ	PP,LNKSET	;GET REAL ADDRESS

	HRLZ	EACD,2(TA)	;EACD _ FLAG BITS FROM PROTAB
				;SEE COBOL MEMO 100-350-011.1
				;PAGES 15 - 16.
				;UNDER PROTAB FLAGS.

	TLNN	EACD,PTDEF	;IF ITEM IS NOT DEFINED,
	POPJ	PP,		;  FORGET IT

	HRRZM	TA,CURPRO	;SAVE ADDRESS OF THIS ENTRY
EGTPR2:	LSH	EACD,-^D1	; !.... SHIFT EACD RIGHT SO AS TO BE
				;ABLE TO FIT IN A FLAG IN THE SIGN BIT DENODING
				;WHETHER OR NOT AN EXIT IS REQUIRED.
				;IF EITHER EPPARA OR EPSECT NEEDS EXIT

				;FOR CURRENT PROCEDURE NAME, CELL IS LESS THAN 0.

	TLNE	EACD,1B27	;BIT 26 (BEFORE THE LSH EACD,-1), NOW BIT 27
				;EQUIVALENT IN THE LEFT HALF OF EACD.
				;SAYS WHETHER OR NOT ITEM REQUIRES EXIT GENERATED
				;IF AN EXIT IS NEEDED, THEN
				;BIT 27'S LEFT HALF EQUIVALENT IS ON.  IF NO EXIT,
				;THEN BIT 27'S EQUIVALENT IN LEFT HALF IS OFF.
				;SKIP IF OFF.

	TLO	EACD,EPAREX	;EXIT REQUIRED FLAG GOES UP

				;PROTAB FLAGS +
	HLLM	EACD,(EACC)	;FLAG FOR EXIT <IF NEEDED> IN LEFT HALF
				;<LINK TO PROTAB IN RIGHT HALF>
				;RESULT ALSO LEFT IN EACD.
	TLNE	EACD,ENREZF	;IF ITEM IS RESIDENT (PRIORITY # FROM PROTAB ENTRY
				;IS ZERO IN BITS 19-25 (AFTER LSH -1))
				;PUT CH OUT ONTO AS2.
				;IF NON-RESIDENT, PUT ONTO AS3.
				;SKIP IF RESIDENT.

	SKIPA	TC,EAS3PC	;PRIORITY NOT = 0--->GET NON-RES PPC\
	MOVE	TC,EAS2PC	;PRIORITY = 0 ---> GET RES-PPC.

	MOVE	TA,CURPRO
	HRRM	TC,1(TA)	;PROTAB ENTRY UPDATED!

	PUSHJ	PP,PUTASN	;SECTION  OR PARAGRAPH OPERATOR GOES OUT
				;AND PPC IS NOT! BUMPED.
	SKIPE	PRODSW		;IF '/P' TYPED,
	POPJ	PP,		;  NO TRACE CODE

	MOVE	CH,[XWD EPJPP,TRACE.]
	PUSHJ	PP,PUT.EX
	MOVE	CH,[XWD AS.XWD,1]
	PUSHJ	PP,PUTASN
	HRRZI	CH,1		;ARG COUNT
	PUSHJ	PP,PUTASN
	HRRZ	CH,0(EACC)
	TRZ	CH,700000	;GRNTEE ADRCON
	JRST	PUTASY		;PUT OUT CODE

				;THE RETURN IS EITHER TO ENTERS IN THE
				;SCANNER ROUTINE
				;TO A CLEAN UP ROUTINE ,
				;OR TO THE SECTION GENERATOR
EPGFIX:	OCT	740000000000!ECPFLG
				; THE XOR OPERATION WITH THIS MASK
				;WILL SET UP THE PARAGRAPH OPERATOR USED
				;IN THIS PHASE (PHASE E) SO AS TO BE INTELLIGIBLE
				;TO THE ASSEMBLY PHASE.


EXITRP:	MOVSI	CH,1B18		;RESET EXIT REQ'D FLAG FOR THIS PROCEDURE NAME
	ANDCAM	CH,(EACC)	;STORE BACK INTO EITHER EPPARA OR EPSECT

	MOVE	CH,[XWD ASINC+XIT##,AS.MSC];CH _ WORD SAYING:
				;I AM A EXIT UUO.
				;I HAVE AN ADDRESS FOLLOWING ME
				;<THESE TWO WORDS WILL BE "BOILED DOWN"
				;TO 1 WORD BY THE ASSEMBLER.

	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASN	;<DON'T BUMP PPC WITH 1ST WORD OUT>
				;DO IT ON 2ND OF TWO-WORD OUTS.

	MOVE	TA,(EACC)		;GET PROCEDURE NAME'S PROTAB LINK
				;...LINK POINT BACK TO LAST-SEEN PROCEEDURE
	PUSHJ	PP,LNKSET	;CONVERT LINK TO REAL ADDRESS


	HLRZ	CH,3(TA)	;GET EXIT WORD <IF ONE IN PROTAB>

	CAIN	CH,0		;NO LINK?  THEN GO ALLOCATE ONE...
				;TA IS EXPECTED TO HOLD POINTER TO
				;PROPER PROTAB ENTRY, ABSOLUTE ADDRESS TYPE.

	PUSHJ	PP,EALLOC	;ALLOCATE AN EXIT WORD [0CT 0]
				;EALLOC SUBROUTINE IS EXPECTED
				;TO RETURN LINK IN CH, IF
				;EXIT WORD NEEDS TO BE CREATED ON THE SPOT.
				;PROTAB UP-DATED BY EALLOC SUBROUTINE.

GOTONE:	JRST	PUTASY		;NOW BUMP THE PPC.
	SUBTTL THE PERFORM GENERATOR

PERFGN:	MOVEM	W1,OPLINE	;SAVE LN&CP OF OPERATOR
	CAMN	EACA,EOPLOC	;ANY OPERANDS?
	JRST	BADEOP		;NO--TROUBLE
	MOVEM	EACA,EOPNXT	;SAVE "END-OF-EOPTAB"

	HRRZ	TC,EOPLOC	;GET ADDRESS OF FIRST OPERAND
	ADDI	TC,1
	MOVSM	TC,OPERND

	MOVEI	TE,-1(EACA)	;ALSO ADDRESS OF SECOND OPERAND
	HRRM	TE,OPERND

	CAIN	TC,0(TE)	;IS THERE ONLY ONE OPERAND?
	JRST	PERF1		;YES
	CAIE	TC,-2(TE)	;NO--IS THERE ONLY TWO OPERANDS?
	JRST	BADEOP		;NO--ERROR
	PUSHJ	PP,SOLVER	;CONVERT FLOTAB TO PROTAB FOR "A"
	MOVEM	TA,-2(EACA)

PERF1:	PUSHJ	PP,RESOLV	;CONVERT FLOTAB TO PROTAB FOR "B" (OR ONLY)
	MOVEM	TA,0(EACA)

	HRRZ	TA,(EACA)	;GET
	PUSHJ	PP,LNKSET	;  FLAGS FOR
	HRRZ	EACB,PTFLAG(TA)	;  "B"
	MOVS	TA,OPERND	;GET
	MOVE	TA,1(TA)	;  FLAGS
	PUSHJ	PP,LNKSET	;  FOR
	MOVE	EACD,PTFLAG(TA)	;  "A"

	ISOPOK	EACB;		CHECK TO SEE THAT "B" LEGAL
	ISOPOK	EACD;		ALSO "A"

	TRNE	EACB,PTXFER	;DOES "B" HAVE UNCONDITIONAL TRANSFER?
	JRST	NOEXIT		;YES--ERROR

	LDB	EACC,FLAGPP	;GET FLAGS FOR CURRENT PARAGRAPH
	TRNN	EACC,PTDECL	;ARE WE IN DECLARATIVES?
	JRST	PERF3		;NO
;WE ARE IN DECLARATIVES--"A" AND "B" BETTER BE THERE TOO

	TRNE	EACB,PTDECL	;IS "B"?
	TRNN	EACD,PTDECL	;YES--IS "A"?
	JRST	BADECL		;AT LEAST ONE OF THEM OUTSIDE--ERROR
	JRST	PERF7		;OK

;WE ARE NOT IN DECLARATIVES

PERF3:	TRNN	EACB,PTDECL	;IS "A" IN DECLARATIVES?
	JRST	PERF5		;NO
	TRNN	EACD,PTDECL	;YES--"B" HAD BETTER BE, THEN
	JRST	BADECL		;IT WASN'T--ERROR

PERF5:	CAIGE	EACC,1B24	;ARE WE IN RESIDENT SEGMENT?
	JRST	PERF7		;YES--ALL LEGAL
	LDB	TE,[POINT 7,EACB,24]	;EXIT AND CURRENT SEGMENT HAVE TO BE SAME
	LDB	TD,[POINT 7,EACC,24]
	CAME	TE,TD
	JRST	PERF9		;THEY ARE NOT--ERROR

;EVERYTHING OK--GENERATE THE PERFORM

PERF7:	MOVE	CH,[XWD PERF.+ASINC,AS.MSC]	;GET FIRST WORD OF <PERF. 0,>
PERF8:	PUSHJ	PP,SETUUO	;SET UUOBIT FLAG
	PUSHJ	PP,PUTASY	;WRITE FIRST WORD

	MOVE	TA,OPERND	;DO WE
	MOVE	TA,1(TA)	;  HAVE AN
	PUSHJ	PP,LNKSET	;  EXIT WORD
	HLRZ	CH,3(TA)	;  FOR THIS
	SKIPN	CH		;  PARAGRAPH OR SECTION?
	PUSHJ	PP,EALLOC	;NO--GET ONE
	PUSHJ	PP,PUTASN	;WRITE SECOND WORD OF <PERF.>

	MOVS	TA,OPERND	;GET SET FOR THE "GO"
	HRRZ	CH,1(TA)
	MOVEI	CH,ECPFLG(CH)
	JRST	GOENTR

;EXIT IS NOT IN SAME SEGMENT AS PERFORM

PERF9:	MOVE	CH,[XWD PERF.+ASINC+1B30,AS.MSC]
	JUMPN	TE,BADRNG	;IF EXIT NOT IN RESIDENT--TROUBLE
	LDB	TC,[POINT 7,EACD,24]	;GET PRIORITY OF "A"
	JUMPE	TC,PERF8	;IF ZERO--OK
	CAMN	TC,TD		;IF SAME AS PERFORM--OK
	JRST	PERF8
;ERROR ROUTINES FOR PERFORM

;IMPROPER RANGE
BADRNG:	MOVEI	DW,^D219
	JRST	OPFAT

;IMPROPER USE OF DECLARATIVES
BADECL:	MOVEI	DW,^D185
	JRST	OPFAT

;EXIT PROCEDURE-NAME ENDS WITH AN UNCONDITIONAL "GO"
NOEXIT:	MOVE	TC,OPERND
	HRRZM	TC,CUREOP
	MOVEI	DW,^D232
	JRST	OPNFAT
	SUBTTL THE "PERFORM TIMES" GENERATOR

EXTERNAL	TRACE.,PRODSW
EXTERNAL 	SETOPN, PUT.B, PUT.LA, GETEMP, GETTAG, PUTTAG, CONVNL
EXTERNAL 	MXAC., MACX., PUTAS1, PUTASY, PUTASN, OPNFAT

PRFYGN:	SWOFF	FEOFF1		;TURN OFF MOST FLAGS
	MOVEM	W1,OPLINE	;SAVE LN&CP OF OPERATOR
	MOVE	EACC,[XWD 2,2]	;ASSUME ONLY ONE PROCEDURE NAME
	HRRZ	TC,EOPLOC	;SET "TC" TO SECOND OPERAND
	ADDI	TC,3
	CAIL	TC,(EACA)	;IS THERE A SECOND ONE?
	JRST	BADEOP		;NO--TROUBLE

	MOVE	TE,0(TC)	;GET FIRST WORD OF SECOND OPERAND
	TLNE	TE,GNLIT	;IS IT A LITERAL OR FIG. CONST.?
	JRST	PRFYG1		;YES

	LDB	TE,[POINT 3,1(TC),20]	;NO--DATA-NAME?
	CAIN	TE,TB.DAT
	JRST	PRFYG1		;YES

	ADD	EACC,[XWD 2,2]	;NO--MUST HAVE TWO PROCEDURE-NAMES

	ADDI	TC,2		;STEP UP TO NEXT OPERAND
	CAIL	TC,(EACA)	;IS THERE ANOTHER?
	JRST	BADEOP		;NO--TROUBLE

;"TC" POINTS TO "TIMES" COUNT

PRFYG1:	ADD	EACC,EOPLOC
	MOVEM	EACC,EOPNXT
	MOVEM	TC,CUREOP
	MOVEI	LN,EBASEA	;SET UP PARAMETERS
	PUSHJ	PP,SETOPN

	HRRZ	TE,EMODEA	;IS ITEM A LITERAL
	CAIN	TE,LTMODE	
	JRST	PRFYG3		;YES

	CAIN	TE,FCMODE	;NO--FIG. CONST.?
	JRST	BADINT		;YES--ERROR
;"TIMES" COUNT IS A DATA-NAME

	CAIN	TE,FPMODE	;IS IT COMP-1?
	JRST	BADFP		;YES--ERROR

	TSWF	FANUM		;IS ITEM NUMERIC?
	SKIPE	EDPLA		;YES--ANY DECIMAL PLACES?
	JRST	BADDP		;NO--ERROR
	HRRZ	TE,ESIZEA	;IS IT ONE WORD?
	CAILE	TE,^D10
	JRST	BADSIZ		;NO--ERROR
	JRST	PRFYG6		;YES

;"TIMES" COUNT IS A LITERAL

PRFYG3:	PUSHJ	PP,CONVNL	;GET VALUE OF LITERAL INTO TD & TC

	SKIPN	EDPLA		;ANY DECIMAL PLACES?
	TSWF	FLNEG		;NO--POSITIVE LITERAL?
	JRST	BADINT		;NO--ERROR

	JUMPN	TD,BADSIZ	;IS IT TWO WORDS?
	JUMPE	TC,BADINT	;NO--ZERO?

	MOVSI	CH,MOV##	;GET LITERAL INTO AC'S
	PUSHJ	PP,PUT.LA
	MOVEI	TE,D1MODE
	MOVEM	TE,EMODEA
	JRST	PRFYG7

PRFYG6:	HRLZM	TC,OPERND	;SAVE PTR TO OPERAND IN CASE SUBSCRIPTED
	PUSHJ	PP,MXAC.	;GET ITEM INTO AC'S

PRFYG7:	MOVE	CH,[XWD AS.OCT,1]	;ALLOCATE A %PARAM WORD

	PUSHJ	PP,PUTAS1
	MOVEI	CH,0
	PUSHJ	PP,PUTAS1
	HRRZ	EACC,EAS1PC
	IORI	EACC,AS.PAR
	AOS	EAS1PC

	MOVE	TE,[XWD EBASEA,EBASEB]
	BLT	TE,EBASBX
	MOVEI	TE,D1MODE
	MOVEM	TE,EMODEB
	MOVE	TE,[XWD ^D36,AS.MSC]
	MOVEM	TE,EBASEB
	SWON	FBSIGN;
	HRRZM	EACC,EINCRB

	PUSHJ	PP,MACX.	;STASH AC'S INTO %PARAM WORD

	PUSHJ	PP,GETTAG	;GET A TAG NUMBER
	HRRZM	CH,ESAVER+1	;SAVE IT 
	PUSHJ	PP,PUTTAG	;WRITE IT OUT
;ITEM HAS BEEN PUT INTO %PARAM

	MOVE	TE,@CUREOP	;WAS IT A LITERAL?
	TLNN	TE,GNLIT
	JRST	PRFY10		;NO--MUST HAVE BEEN A DATA NAME

	PUSHJ	PP,PRFY20	;YES--GENERATE THE PERFORM

	MOVSI	CH,SOSLE.	;YES--GENERATE <SOSLE B>
	PUSHJ	PP,PUT.B

	MOVSI	CH,JRST.	;GENERATE <JRST %TAG1>
	HRR	CH,ESAVER+1
	JRST	PUTASY		;	AND RETURN

;ITEM IS A DATA-NAME--TEST HAS TO BE BEFORE THE PERFORM

PRFY10:	MOVSI	CH,SOSGE.	;GENERATE <SOSGE>
	PUSHJ	PP,PUT.B

	PUSHJ	PP,GETTAG	;GENERATE <JRST %TAG2>
	MOVEM	CH,ESAVER+2
	HRLI	CH,JRST.
	PUSHJ	PP,PUTASY

	PUSHJ	PP,PRFY20	;GENERATE THE PERFORM

	MOVSI	CH,JRST.	;GENERATE <JRST %TAG1>
	HRR	CH,ESAVER+1
	PUSHJ	PP,PUTASY

	HRRZ	CH,ESAVER+2	;PUT OUT %TAG2
	JRST	PUTTAG		;	AND RETURN


;SET UP EACA AS IF PERFORM WERE BEING CALLED, THE CALL IT

PRFY20:	MOVE	EACA,EOPNXT
	JRST	PERFGN		;GO DO THE PERFORM
;ERROR ROUTINES

;LITERAL IS NEGATIVE OR HAS DECIMAL PLACES

BADINT:	MOVEI	DW,^D25
	JRST	OPNFAT

;IMPROPER SIZE OF DATA NAME

BADSIZ:	MOVEI	DW,^D278
	JRST	OPNFAT

;DATA-NAME HAS DECIMAL PLACES

BADDP:	MOVEI	DW,^D264
	JRST	OPNFAT

;DATA-NAME IA A COMP-1 ITEM

BADFP:	MOVEI	DW,^D321
	JRST	OPNFAT

EXTERNAL	BADEOP		;NOT ENOUGH OPERANDS

EXTERNAL	TB.DAT,ESAVER,CUREOP,EOPLOC
EXTERNAL	EBASEA,EMODEA,EDPLA,ESIZEA,EINCRA
EXTERNAL	EBASEB,EMODEB,EDPLB,ESIZEB,EBASBX,EINCRB

EXTERNAL	SOSLE.,SOSGE.,JRST.
EXTERNAL	EAS1PC,AS.PAR,D1MODE,LTMODE,FCMODE,AS.OCT
EXTERNAL	OPLINE
	SUBTTL THE STOP GENERATOR

;SEE COBOL MEMO 100-350-007
;"THE STOP GENERATOR"

				;IF THERE ARE NO OPERANDS
				;IN EOPTAB (EACC) = 0, THEN STOP RUN
				;IF MORE THAN 1 OPERAND <A LITERAL>
				;FOR THE STOP < LIEREAL>
				;CONDITION IS DISCOVERED, WE ARE IN TROUBLE.
				;
STOPGN:	CAMN	EACA,EOPLOC	;ANY OPERANDS?
	JRST	ESTRUN		;NO--BETTER BE "STOP RUN"

	MOVE	EACB,-1(EACA)	;NOW CHECK TO SEE IF THE OPERAND TYPE IS A.O.K.

	TLNN	EACB,1B19	;IS THE LITERAL OR FIGURATIVE CONSTANT
				;FLAG UP?
	JRST	EBLTFC		;NOPE! IT WASN'T, BAD SHOW, BAD OPERAND TYPE.
				;EITHER (A): BIT UP SAYING "I AM A LITERAL"
				;OR     (B): BIT FROM (A) AND BIT SAYING "I AM
				;            I AM ALSO A FIGURATIVE CONSTANT"
				;**THESE ARE THE ONLY TWO COODITIONS!!**



	HRRZI	TA,STOP.	;IF IN NON-RESIDENT SEGMENT,
	ANDI	TA,77777	;  SET REFERENCE FLAG IN EXTAB
	ADDI	TA,<CD.EXT>B20
	PUSHJ	PP,LNKSET
	MOVSI	TB,EXTFLG
	TSWF	FAS3;
	IORM	TB,(TA)

	PUSHJ	PP,DISPGN	;GENERATE THE DISPLAY
	MOVE	CH,[XWD EPJPP,STOP.##]	;GENERATE <PUSHJ PP,STOP.>
	JRST	PUTASY


;OPERAND FOR "STOP" WASN'T A LITERAL

EBLTFC:	TTCALL	3,[ASCIZ /"STOP" OPERAND NOT LITERAL
/]
	JRST	KILLF
;GENERATE "STOP RUN"

ESTRUN:	HRRZI	TA,STOPR.	;IF IN NON-RESIDENT SEGMENT,
	ANDI	TA,77777	;  SET REFERENCE FLAG IN EXTAB
	ADDI	TA,<CD.EXT>B20
	PUSHJ	PP,LNKSET
	MOVSI	TB,EXTFLG
	TSWF	FAS3;
	IORM	TB,(TA)

	MOVE	CH,[XWD EPJPP,STOPR.##]	;GENERATE <PUSHJ PP,STOPR.>
	JRST	PUTASY
	SUBTTL THE ALTER GENERATOR

				;SOURCE EXAMPLE:
				;  C.  ALTER A TO PROCEED TO B.
				;NOMANCLATURE:
				;C. SHALL BE THE POINT OF ORIGIN
				;B. SHALL BE THE OBJECT OF THE ALTER
				;A. SHALL BE THE SUBJECT OF THE ALTER.

				;STRATEGY(?)
				;
				;(A) CHECK FOR TWO OPERANDS
				;(B) CHECK TO SEE IF A IS ALTERABLE.
				;(C) CHECK FOR A NOT BEING IN DECLARATIVES
				;(D) CHECK FOR B NOT BEING IN DECLARATIVES.
				; <A AND B AND C MUST BE TOTALLY WITHIN DECLARATIVES
				; OR TOTALLY EXCLUDED FROM DECLARATIVES.>

				;(E) SEE WHETHER OR NOT A'S PRIORITY # < 50.
				;(F) IF A < 50, THEN A AND B CAN BEIN
				;IN ANY SEGEMENTS <NO PRIORITY PROBLEMS>

				;(G) GOT A LINK TO AN ALTER WORD IN LEFT HAND
				;HALF OF
				;THE 2ND WORD IN A'S PROTAB ENTRY ?.  IF SO
				;ALTER WORD HAS BEEN GENERATED & ALLOCATED.
				;IF NOT, ALLOCATE ONE.

				;(H) AS LONG AS TRANS-SEGEMENT GO DOES NOT
				;CAUSE OVERLAY, GENERATE:
				;	MOVEI	0,<PHASE F-G TYPE CODE
				;		  FOR B'S PROTAB LINK>


				;	MOVEM	0,<ALLOCATED ALTER WORD ADDRESS>

				;(I) EXIT BACK TO SCANNER ROUTINE.




			;(1) NOT TWO OPERANDS ? DIE...
			;(2) B IN DECLARATIVES?  THEN A HAD BETTER
			;LIKEWISE BE WITHIN DECLARATIVES
			;IF A AND B NOT COMPATIBLE, PUT
			;OUT DIAGNOSTIC AND CONTINUE
			;(3) SAME AS FOR (2); A AND B HAD BETTER MATCH.
			;(4) IF A > 50, THEN THE GO TO
			;< C.'S PRIORITY> HAS TO BE = A.'S.

			;(5) OVERLAY CODING:
ALTGEN:	HRRZ	TA,EOPLOC	;IS THERE TWO AND ONLY TWO OPERANDS?
	CAIE	TA,-4(EACA)
	JRST	BADEOP		;OOPS! BAD SHOW _ 

	PUSHJ	PP,RESOLV	;EACA IS LOOKING AT LAST OPERAND, B.
	HRRM	TA,(EACA)	;UPDATE EOPTAB.

	PUSHJ	PP,SOLVER	;RESOLV GETS B OPERNAD, SOLVER GETS
				;A OPERAND.
	HRRM	TA,-2(EACA)	;UPDATE EOPTAB.


	PUSHJ	PP,LNKSET	;CONVERT TO REAL ADDRESS.
	MOVEI	EACB,(TA)	;SAVE POINTER TO 1ST WORD IN PROTAB FOR A.
				;YOU MAY USE IT LATER
	HRRZ	W2,2(TA)	;GET A'S FLAGS & STUFF
	TRN1B28		;IS A ALTERABLE ?
	POPJ	PP,		;NO--FORGET IT (PHASE D PUT OUT DIAG)



	ISOPOK	W2;

	HRRZ	TA,(EACA)	;GET B OPERAND






	MOVEI	CH,ECPFLG(TA)	;& SAVE IT!
				;CH _ PHASE F-G PROTAB CODE FOR B.
	PUSHJ	PP,LNKSET	;CONVERT LINK TO ENTRY ADDRESS
	HRRZ	EACD,2(TA)	;SAVE WORD 3 OF B'S PROTAB ENTRY IN EACD
	


	ISOPOK	EACD;
				;BEGIN LADDER TEST:
				;RUN DOWN NON-DECLARATIVE PATH/ IT WILL
				;BE MOST FREQUENT BY FAR.


				;THE OVERLAY GENERATOR EXPECTS TO FIND
				;CH WITH THE PHASE F-G ADDRESS TO WHICH
				;CONTROL IS TO BE TRANSFERRED
				;EACC WITH THE CURRENT PRIORITY # OF CURRENT PARAGRAPH
				;EACD WITH PRIORITY # OF (CH) ..OF WHERE YOU ARE GOING
				;SEE GO GENERATOR ALSO...



	LDB	EACC,FLAGPP	;GET WHERE YOU ARE PRESENTLY....
	TRNE	EACC,1B32	;IS C IN DECLARATIVES <SKIP IF NOT>?
	JRST	EBDECL		;C IS IN DECLARATIVES/ IF SO, A & B BOTH MUST
				;BE IN DECLARATIVES.!.


				;C WASN'T IN DECLARATIVES:
	TRNN	W2,1B32		;OK, IS A IN DECLARATIVES [BETTER NOT BE]
	TRNE	EACD,1B32	;IS B ?
	JRST	CWASNT		;BAD SHOW _ !! ALL NOT IN DECLARATIVES!



EABCOK:	CAIL	W2,^D50B24	;CHECK TO SEE IF GO TO IS LESS THAN 50 
	JRST	CKAEQB		;IF SEGMENT # > OR = 50, C AND A MUST BE =

EALTOK:	TRNE	W2,40		;ARE ALL ALTERS WITHIN CURRENT SEGMENT

	JRST	ALTOLA		;OVERLAY REQUIRED? SURE IS!
ALLDEC:	HRLI	CH,MOVEI.	;CH NOW CONTAINS:
				;MOVEI 0, B


QUICKY:	PUSHJ	PP,PUTASY	;PUT OUT & BUMP PPC.


				;NOW PUT OUT
				;MOVEM	0,<ALTER WORD>
ALTFIN:	MOVE	CH,[XWD	ASINC+MOVEM.,AS.MSC]	;MOVEM 0,<IMPURE ADDRESS
					;HOLDING ADDRESS OF DESTINATION>

	PUSHJ	PP,PUTASN	;1ST WORD DOESN'T BUMP PPC
				;BECAUSE THIS IS A TWO-WORD ENTRY
	HLRZ	CH,2(EACB)	;GET A'S ALTER WORD [IF PRESENT]

	JUMPN	CH,PUTASY	;IF NO ALTER WORD, GO GENERATE ONE.
				;IF ALTER WORD JUMP OFF AND WRITE IT OUT.
	JRST	ALTWDN		;ALTER WORD NEEDED, GO CREATE XWD NOW.








ALTOLA:	CAIGE	W2,^D1B24		;DO WE REALLY NEED A MOVE?
					;IF BOTH SEG PRIORITY # ARE = 0,
					;A MOVSI 0,<PROTAB LINK> WILL DO THE TRICK!

	CAIL	EACD,^D1B24		;SEE IF BOTH ARE 0

	JRST	NEEDMV			; _ SHORT-CUT LOST, AT LEST 1
					;PRIORITY # > RES => 0.


	HRLI	CH,MOVSI.		;SHORT-CUT PAYS OFF
	JRST	QUICKY
NEEDMV:	HRLM	CH,CURPRO	;SAVE PROTAB LINK
				;FOR OVLHDR ROUTINE.
				;START GENERATING:	MOVE 0,LIT
	MOVE	CH,[XWD	ASINC+MOV,AS.MSC]
	PUSHJ	PP,PUTASN	;1ST HALF OF INSTRUCTION OUT

	PUSH	PP,EACC		;SAVE ADDRESS OF CURRENT PARAGRAPH
	MOVE	EACC,W2		;SET IT TO "A".
	PUSHJ	PP,OVLHDR	;NOW CREATE AN XWD WITH THE ADDRESS
				;IN LEFT HALF, PRIORITY #'S IN RIGHT HALF
	POP	PP,EACC		;RESTORE ADDRESS OF CURRENT PARAGRAPH

	PUSHJ	PP,PUTASY	;FINISH UP SECOND HALF OF
				;INSTRUCTION BEGUN ABOVE
				;NOW YOU HAVE:

				;MOVE 0,LIT
				;LIT: XWD ADDRESS,PRI # PRI #
				;NOW GO BACK AND GENERATE MOVEM 0,ALTER WORD
				;MOVEM 0, PARAM





	JRST	ALTFIN







EBDECL:	TRNE	W2,1B32		;C IN DECLARATIVES. A MUST BE TOO.
	TRNN	EACD,1B32	;AS WELL AS "B".
				;TEST WHERE YOU ARE FOR BEING IN DECLARATIVES.

	JRST	CWASIN		;ONE OF A OR C WAS NOT IN DECLARATIVES
	JRST	ALLDEC		;ALL IN DECLARATIVES, WHICH MUST BE IN SEGMENT 0
				;NO NEED TO CHECK FOR OVERLAY REQUIRED
CWASNT:	TRNE	W2,1B32		;C WASN'T IN DECLARATIVES, BUT
				;EITHER A OR B OR BOTH WERE. FIND OUT WHICH ONES.

	PUSHJ	PP,AWASIT
	TRNE	EACD,1B32	;OK, WAS "B" IN DECLARATIVES
	JRST	BWASIT
	RETURN

CWASIN:	TRNN	W2,1B32		;C WAS IN DECLARATIVES, BUT EITHER A OR B OR BOTH
				;WERE OUTSIDE.
	PUSHJ	PP,AWASIT	;A WAS OUTSIDE
	TRNN	EACD,1B32	;TRY B
	JRST	BWASIT

	RETURN





AWASIT:	MOVEI	EACA,-2(EACA)	;POSITION POINTER TO LOOK AT A.
	PUSHJ	PP,BWASIT		;GIVE HIM THE DIAG.
	MOVEI	EACA,+2(EACA)		;REPOSITION POINTER TO LOOK AT B.
	RETURN

BWASIT:	GOFATL	185;		;TRYING TO CROSS DECLARATIVES DIAGNOSTIC
CKAEQB:	MOVEI	TB,(W2)			;SAVE THE ORIGINAL (W2).
	ANDI	TB,ENREZE		;STRIP ALL BUT PRIORITY BITS
	MOVEI	TC,(EACC)		;PRESERVE EACC
	ANDI	TC,ENREZE
	CAIN	TC,(TB)			;SEE STANDARDS, P-2-81, FOR RESTRICTIONS ON ALTER VERB.


	JRST	EALTOK		;GREAT! THEY ARE =
	GOFATL	90;		;ALTERING A PROCEEDURE NAME OUTSIDE
				;YOUR OWN SEG WHEN YOU ARE IN A 50 OR GREATER SEGMENT.
					;N*O*T*E	ALTDWN REQUIRES
					;THAT PROTAB BE UPDATED WITH THE ADDRESS LINK
					;FOR THE ALTER WORD.





ALTWDN:	CAIL	EACC,^D50B24			;ARE WE IN A 50 OR > SEG.
					;IN OTHER WORDS, DO WE HAVE TO SAVE
					;THE ALTERS?
	JRST	SAVALT			;YEP!!!


	MOVE	CH,[XWD	AS.XWD,1]	;XWD HEADER 
	PUSHJ	PP,PUTAS1		;ONTO AS1 FILE
	TRNE	W2,40			;OK, HEADER OUT, NOW WHAT'S IT GONNA BE,
					;ADDRESS, PRIORITY BITS <FOR OVLAY>
					;OR
					;0,ADDRESS <FOR NON-OVERLAYED GOES.


	JRST	ADDPR1			;OK, ADDRESS, PRIORITY BITS NEEDED


	MOVEI	CH,0			;LEFT HALF OF XWD _ 0
	PUSHJ	PP,PUTAS1
	PUSHJ	PP,GETADR		;GET THE ADDRESS
FINXWD:	PUSHJ	PP,PUTAS1		;WRITE THAT ADDRESS OUT
	AOS	CH,EAS1PC		;BUMP THE PPC
	MOVEI	CH,100000-1(CH)		;ADD IN TABLE TYPE AND READJUST PPC
					;TO WHAT XWD IS.
	HRLM	CH,2(EACB)		;UPDATE PROTAB ENTRY.
	JRST	PUTASY			;FINISH UP THE INSTRUCTION WITH ITS ADDRESS 
GETADR:	HRRZ	TB,3(EACB)		;GET THE FLOTAB LINK FROM PROTAB ENTRY
	ANDI	TB,77777		;STRIP OFF ALL BUT OFFSET
	JUMPE	TB,NOFLOK		;NO  FLOTAB LINK?
					;TSK! TSK?


	ADD	TB,FLOLOC			;ADD BASE ADDRESS
	HRRZ	TD,FLONXT		;TB NOW HOLDS POINTER TO FLOTAB
					;CHECK POINTER AGAINST HIGHEST LEGAL
						;FLOTAB ENTRY <(FLONXT)>
	CAIGE	TD,3(TB)		;MAKE SURE THAT THE NEXT ENTRY
					;WHICH IS THE ONE YOU WANT, HAS BEEN
					;COMPLETED, I.E., TWO WORDS ENTERED
	JRST	NOFLOK			;TSK, TSK NO CHAINING THRU FLOTAB.
	MOVE	TA,2(TB)		;GET NEXT ENTRY
	LDB	CH,[POINT 3,TA,20]	;IS THE ITEM A PROTAB LINK?
	CAIE	CH,TB.PRO
	JRST	NOFLOK			;NO--ERROR
	TLNN	TA,1B23			;IS THAT SOMETHING AN OBJECT OF
	JRST	NOFLOK			;
					;GO OR GO DEPENDING?

	MOVEI	CH,ECPFLG(TA)		;LINK  CONVERTED TO F-G NOTATION.
	RETURN
						;GOTO. DEFAULT ADDRESS SINCE
						;WE CANNOT CHAIN THRU FLOTAB.
NOFLOK:	MOVE	CH,EGOTO			;
	RETURN




ADDPR1:	PUSHJ	PP,GETADR		;XWD ADDRESS, PRIORITY BITS REQUIRED.
	PUSHJ	PP,PUTAS1			;WRITE IT OUT
	CAMN	CH,EGOTO			;SEE IF GOTO. IS ADDRESS,
						;THERE IS NO PROTAB ENTRY FOR HIM
	PUSHJ	PP,GOTOSG			;EVADE GOING TO LNKSET WITH
						;GOTO. AS A LINK.
						;LOAD UP WITH CURRENT PARA'S
						;PRIORITY BITS IN CH.
						;GOTO. IN TA.

						;WITH GOTO. AS LINK.
	PUSHJ	PP,GETBIT			;SHIFT BITS INTO CORRECT POSITIONS.
	JRST	FINXWD
SAVALT:	TRNE	W2,40				;ALL ALTERS WITHIN THE CURRENT SEG?
	JRST	ADDPR0				;NOPE! _


	MOVEI	TB,0

	PUSHJ	PP,PUTALT			;XWD 0,ADDRESS
						;ALL ENTRIES IN ALTAB ARE
						;XWD'S, SO HEADER DOESN'T NEED TO BE
						;SUPPLIED UNTIL YOU ARE BEGINNING
						;TO DUMP THE TABLE.

	PUSHJ	PP,GETADR
						;RESOLVE ADDRESS BY CHAINING THRU FLOTAB.
WRPALT:	MOVE	TB,CH
	PUSHJ	PP,INCALT			;INTO ALTAB + BUMP PPC.



	MOVEI	CH,700000-1(CH)
	HRLM	CH,2(EACB)		;UPDATE PROTAB
	JRST	PUTASY





ADDPR0:	PUSHJ	PP,GETADR
	MOVE	TB,CH
	PUSHJ	PP,PUTALT		;GET ADDRESS AND PUT IT IN LEFT HALF OF XWD
	CAMN	CH,EGOTO	;AVOID GIVING GOTO. TO A SUBROUTINE AS A VIABLE LINK
	PUSHJ	PP,GOTOSG			;GOTO. IS IN THE RES SEG.
				;EACD = DESTINATION PRIORITY BITS = RES
	PUSHJ	PP,GETBIT				;RIGHT HALF HASPRI #S IN IT.



	JRST	WRPALT				;FINISH UP////
GOTOSG:	MOVEI	CH,AS.CNB
	MOVEI	TC,(W2)				;SAVE (W2) PLEASE!!
	ANDI	TC,ENREZE			;STRIP OFF ALL BUT PRIORITY BITS
	LSH	TC,-^D2			;ALIGN POINT ORIGIN  PRIORITY < BITS>
	TLO	CH,(TC)

	POP	PP,TE		;PREPARE TO TAKE THE SKIP EXIT BACK
	JRST	1(TE)		;BACK + 1 WE GOT
	SUBTTL THE GO GENERATOR

GOGOGN:	CAMN	EACA,EOPLOC	;IF NO OPERANDS,
	JRST	EXTGO		;  MUST BE 'GO TO.'
	HRRZ	TE,EOPLOC	;THERE ARE OPERANDS, THERE MUST
	CAIE	TE,-2(EACA)	;  BE ONLY ONE
	JRST	BADEOP		;SOMETHING IS WRONG

GOGO1:	PUSHJ	PP,RESOLV	;RESOLVE (IF NECESSARY, PROTAB-FLOTAB ENTRY).
	HRRM	TA,(EACA)	;UPDATE EOPTAB

IGOTIT:	TLNE	W1,1B27		;IS THIS A SPECIAL GO; ONE CREATED BY
				;THE SYNTAX SCANNER TO CONNECT THE
				;SEGMENTS TOGETHER

	JRST	GOCKIT		;"SPECIAL" GO FOUND

RESUME:	MOVEI	CH,(TA)		;CHANGE
	ANDI	CH,TM.PRO	;  ADDRESS CODE TO
	IORI	CH,AS.PRO	;  ASSEMBLY NOTATION
	PUSHJ	PP,LNKSET	;CONVERT LINK TO REAL ADDRESS
	MOVE	EACD,2(TA)	;GET FLAGS FOR OBJECT OF GO



				;CHECK FOR BONA FIDE OPERAND.
	ISOPOK	EACD;

	LDB	EACC,FLAGPP	;GET FLAGS FROM EPPARA

	TRNE	EACD,1B32	;CHECK TO SEE IF DESTINATION IS IN DECLARATIVES.
	JRST	GODDEC		;GO HAS DESINATION IN DECLARATIVES, ALL
				;IS NOT LOST YET FOR THE GUY. HE MAY BE
				;O.K. IF SOURCE IS IN DECLARATIVES.

	TRNE	EACC,1B32	;O.K., NOW CHECK FOR SOURCE IN DECLARATIVES
				;COME HERE ONLY IF 1ST TEST SHOWS DESTINATION OUT OF
				;DECLARATIVES.

	JRST	DECWRN		;YEP, SOURCE IN DECLARATIVES. THIS IS O.K.
				;ONLY IF DESTINATION IN DECLARATIVES.
DECOK:	TRNE	EACC,140	;CHECK FOR PRESENT PP'S BEING ALTERED:
				;AN ALTERED GO.


	JRST	GOALTD

				;GET EXPRESSION SET UP
GOENTR:	HRLI	CH,JRST.	;ADD IN A <JRST> TO CONVERTED LINK TO PROTAB

	ANDI	EACC,ENREZE	;STRIP OFF ALL BUT SOURCE'S PRIORITY BITS.
	ANDI	EACD,ENREZE	;STRIP OFF ALL BUT DESTINATION'S  PRIORITY BITS

	CAIN	EACD,(EACC)	;DESTINATION & SOURCE OF = PRIORITY ?
				;
	JRST	PUTASY		;DESTINATION & SOURCE =, JRST IS OK.

	HRLM	CH,CURPRO	;SAVE CH, WHICH CONTAIN PROTAB
				;POINTER, WHICH WILL BE RESOLVED TO ADDRESS
	MOVE	CH,[XWD OVLAY.+ASINC,AS.MSC]
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASN	;PUT OUT ON AS2 OR AS3 <PUTAS2/PUTAS3>
				;AND DON'T BUMP THE PPC YET.

	PUSHJ	PP,OVLHDR	;GO OFF TO OVERLAY HEADER MAKER ROUTINE.
				;CH WILL (!) <?> RETURN WITH CH LOADED
				;WITH ADDRESS REQUIRED TO FINISH OVLAY INSTRUCTION.

	JRST	PUTASY		;PUT OUT ON 2 OR 3 & BUMP PPC.
EXTGO:	TLNE	W1,1B28			;IS HE GONNA FALL OF THE EDGE OF THE WORLD?
	JRST	EDGE			; _ YEP, SURE IS!


					; _ GO TO. IN HAND
	LDB	EACC,FLAGPP		;GET CURRENT PARAGRAPH'S PROTAB LINK
	TRNN	EACC,140		;LET'S SEE IF HE REALLY EVER DOES ALTER THIS GO.
	JRST	GOWRN			; _ HMMM! GO TO. THAT'S NEVER ALTERED!???


					;<GOTO.. REQUIRED>


	MOVEI	EACD,0		;_ SOME NON-RESIDENT
					; MUST BE ASSUMED FOR A GOTO. THAT'S NOT
					;RESOLVED. OTHERWISE, CHAINNING OF
					;THE DAMN GLOBAL WILL KILL YOU
					;SINCE THE ASSEMBLER WON'T BE ABLE TO 
					;TELL THE LOADER ABOUT THE CHAIN THAT
					;VANISHES.

	SKIPA	EACB,EGOTO		;TO SEGMENT 0/
					; ^ NOTE THAT SKIP WILL ALWAYS TAKE
					;YOU OVER THE SAVING OF THE OPERNAD
					;IF THERE WAS NOT AN OPERAND
GOALTD:	MOVEI	EACB,(CH)		;IF YOU ARE COMING FROM THE OPERNAD SIDE,
					;SAVE THE OPERNAD!!



	TRNN	EACC,40			;OK, CHECK  ALL PLACES THAT WE MIGHT BE GOING
					;ALL PLACES IN THE SAME SEGMENT?


	SKIPA	CH,[XWD	ASINC+JRST.+1B31,AS.MSC]
					; ^ YEP. ALL OBJECTS IN SAME SEGMENT.

	MOVE	CH,[XWD OVLAY.+ASINC,AS.MSC]	;OVERLAY REQUIRED, MAKE ONE & UPDATE
	PUSHJ	PP,SETUUO		;THE UUO TABLE TOO.
					;1ST PART OF JRST @ OR OVLAY. OUT
					;ADDRESS PORTION COMING UP!!!
	PUSHJ	PP,PUTASN

	HRRZ	TA,EPPARA		;GET PROTAB LINK FOR THIS PARAGRAPH
					;<THE 1 THAT'S GOT THE GO WE'RE TALKING ABOUT>.
	PUSHJ	PP,LNKSET		;CONVERT TO REAL ADDRESS
	HLRZ	CH,2(TA)		;GET THE ALTER WORD <IF ONE IS THERE>
	JUMPN	CH,PUTASY		;IF NON-ZERO, WORD ALLOCATED, SO
					;PUT IT ON ASSEMBLER INPUT FILE &
					;BUMP PPC.


					; _ NO WORD ALLOCATED
					;ALLOCATE ONE, BUT MAKE ADDRESS
					;GOTO. IN THE EVENT THAT HE DOES NOT
					;FILL IN THE BLANK AT OBJECT TIME.


					;FINISH  UP  JRST @ WITH ADDRESS
					;OF XWD JUST PUT OUT.
					;OR... PUT OUT LAST HALF OF OVLAY. UUO
					;WITH ADDRESS OF XWD JUST PUT OUT.

	CAIL	EACC,^D50B24		;ARE WE IN A 50 OR GREATER SEG?
					;IF SO, WE HAVE TO  SAVE THE ALTERS
					;FOR THE BLT RESTORATION.
	JRST	SAVBLT			;YEP! IN 50 OR GT. SAVE ALTS/

	PUSHJ	PP,MAKXWD			;MAKE AN XWD
					;EITHER A) XWD 0,ADDRESS FOR JRST @
					;OR B) XWD ADDRESS, PRIORITY BITS
					;FOR OVERLAY.




	HRRZ	TA,EPPARA		;GET ADDRESS OF
	PUSHJ	PP,LNKSET		;  CURRENT PARAGRAPH
	HRLM	CH,2(TA)		;UPDATE PROTAB WITH ALTER-WORD ADDRESS.
	JRST	PUTASY			;FINISH UP INSTRUCTION WITH ADDRESS OF XWD
					;SINCE WE ARE NOT IN A 50 OR GREATER SEG,
					;ALL ALTER WORDS GO ON AS1.
EDGE:	PUSHJ	PP,CKEXIT	;CLEAN UP EXITS

	MOVE	CH,[XWD	EPJPP,KPROG.##]		;HE'S GONNA TRY TO FALL OFF
						;THE EDGE OF THE WORLD
						;INTO HIS LITERAL POOL.

	HLLZ	TA,EPPARA		;SEE IF YOU ARE IN RES/SEG
	TLNE	TA,ENREZF


	PUSHJ	PP,FXPROG		;SET FLAG IN EXTAB SHOWING REFERENCE
					;TO EXTERNAL NAME MADE FROM NON-RES


	JRST	PUTASY			;WRITE IT ON APPROPRIATE FILE AND BUMP PPC.
GOCKIT:	PUSHJ	PP,CKEXIT	;IN ANY EVENT, GENERATE EXITS AS REQUIRED.

	SKIPE	TA,EPSECT		;IF NO LAST SECTION, THEN WE CANNOT
				;BE IN THE DECLARATIVES
	TLNN	TA,1B33		;THERE WAS A LAST SECTION, SKIP IF IT WAS IN THE DECLARATIVES
				;REMEMBER, THAT EPSECT'S FLAGS SHIFTED RIGHT 1

	JRST	RESTOR		;PUSHJ TO OBJECT TIME ERROR ROUTINE NOT NEEDED.
				;THERE MUST HAVE BEEN A LAST SECTION
				;AND IT MUST HAVE BEEN IN THE DECLARATIVES, AND


				;PLACE WHERE SYNTAX ROUTINE IS SENDING
				;YOU MUST BE OUTSIDE THE DECLARATIVES.



	HRRZ	TA,(EACA)	;GET WHERE SYNTAX IS SENDING YOU
	PUSHJ	PP,LNKSET
	MOVE	TB,2(TA)

	TRNE	TB,1B32		;ITEM OUTSIDE DECLARATIVES ?

	JRST	RESTOR		;NO, YOU CAN GO BACK


	MOVE	CH,[XWD	EPJPP,KDECL.##]		;OOOPS, HE MIGHT FALL INTO LITERALS

	HLLZ	TA,EPPARA		;SEE WHETHER OR NOT WE IN RESIDENT SECTION.
	TLNE	TA,ENREZF

	PUSHJ	PP,FXDECL			;FIXUP OF USER TO DIE WHEN
						;FALLING OUT OF DECLARATIVES
						;REQUIRED, BUT PUSHJ 17
						;MUST BE INDIRECT BECAUSE
						;EXTERNALS CANNOT BE CHAINED
						;INTO/OUT OF NON-RES SEGS.


	JRST	PUTASY
				;THE CATCHER GENERATED <NO FALLING OUT OF
				;THE DECLARATIVES>
				;RETURN
FXDECL:	HRRZI	TA,STOPR.	;PREPARE TO UPDATE EXTAB'S NON-RES REFERENCE FLAG
	ANDI	TA,77777
	ADDI	TA,<CD.EXT>B20
	PUSHJ	PP,LNKSET
	MOVSI	TB,EXTFLG
	IORM	TB,(TA)

	POPJ	PP,




FXPROG:	HRRZI	TA,KPROG.
	ANDI	TA,77777
	ADDI	TA,<CD.EXT>B20
	PUSHJ	PP,LNKSET
	MOVSI	TB,EXTFLG
	IORM	TB,(TA)

	POPJ	PP,





RESTOR:	HRRZ	TA,(EACA)	;RESTORE TA FOR MAIN LINE PROGRAM
	JRST	RESUME



GODDEC:	TRNE	EACC,1B32		;SEE IF SOURCE IS IN THE DECLARATIVES.
	JRST	DECOK				;EVERYTHING'S OK
DECWRN:	GOFATL	185;				;VIOLATION OF DECLARATIVES BOUNDARY



GOWRN:	HRRZ	TA,EPPARA		;GET THIS PP'S PROTAB LINK
	PUSHJ	PP,LNKSET			;GET REAL ADDRESS
	HRRZ	TB,3(TA)			;GET FLOTAB NTRY
	ANDI	TB,77777			;STRIP OFF ALL BUT OFFSET
	ADD	TB,FLOLOC			;NOW YOU HAVE FLOTAB ENTRY.!
	MOVEI	EACA,2(TB)			;POINT EACA SO THAT -1(EACA)
						;WILL LOOK AT LN & CP




	GOWARN	94;				;GO TO. NOT ALTERED.
SAVBLT:	MOVEI	W2,(TA)		;COME HERE WHEN NO
				;ALTER WORD HAS BEEN ALLOCATED FOR AN
				;ALTERED GO.

				;START BY SAVING THE ADDRESS
				;OF THE PROTAB ENTRY THAT WILL BE
				;UPDATED, SHOWING
				;THAT AN ALTER WORD HAS BEEN ALLOCATED.

	TRNE	EACC,40		;ALL ALTERS IN  THIS SEG?
	JRST	ADDPR2		;NOPE!

	MOVEI	TB,0
	PUSHJ	PP,PUTALT
	MOVE	TB,EACB		;GET SAVED ADDRESS.
FINBLT:	PUSHJ	PP,INCALT	;THE ADDRESS GOES IN RIGHT HAND
				;HALF OF XWD. INCALT BUMPS ALTAB'S PPC

	MOVEI	CH,700000-1(CH)	;RESTORE ALTAB'S PPC TO
				;WHAT IT SHOULD BE TO POINT TO
				;XWD JUST CREATED, AND ADD IN TABLE TYPE CODE.


	HRLM	CH,2(W2)	;UPDATE THAT OLD PROTAB ENTRY
				;THIS WILL ALLOW YOU TO GET
				;A HANDLE ON ALTERED GOES


	JRST	PUTASY

ADDPR2:	MOVE	TB,EACB		;RETRIEVE SAVED ADDRESS.
	PUSHJ	PP,PUTALT	;ADDRESS IN LEFT HALF OF XWD
	HRRZ	TA,EPPARA	;HAVE TO HAVE THE PROTAB ADDRESS
	PUSHJ	PP,GTBIT1

	MOVE	TB,CH		;GET PRI BITS INTO TB FROM CH   &
	JRST	FINBLT
				;FINISH UP
EGOTO:	XWD	AS.GO,AS.MSC	;POINTS TO JRST GOTO.
	SUBTTL THE "GO DEPENDING" GENERATOR

EXTERNAL SETOPN,PUTASY,PUTASN,MXAC.

GODPGN:	CAMN	EACA,EOPLOC	;ANY OPERANDS?
	JRST	BADEOP		;NO--TROUBLE
	MOVEM	EACA,EOPNXT	;SET END-OF-TABLE

;SCAN THRU EOPTAB FROM TOP, LOOKING FOR VARIABLE

	MOVE	EACA,EOPLOC

GODPG1:	MOVE	TE,1(EACA)	;GET FIRST WORD OF AN OPERAND
	TLNE	TE,GNLIT	;IS IT A LITERAL OR FIG. CONST.?
	JRST	GODPG2		;YES

	MOVE	TA,2(EACA)	;NO--IS IT
	LDB	TE,LNKCOD	;  A DATA-NAME?
	CAIN	TE,TB.DAT
	JRST	GODPG3		;YES

	ADD	EACA,[XWD 2,2]	;NO--KEEP LOOKING
	CAME	EACA,EOPNXT
	JRST	GODPG1
	JRST	BADEP6

;LITERAL OR FIG. CONST. FOUND

GODPG2:	TLNE	TE,GNFIGC	;FIG. CONST.?
	TLNN	TE,GNTALY	;YES--TALLY?
	JRST	BADEP4		;NO--ERROR

;VARIABLE FOUND

GODPG3:	MOVEM	EACA,EOPNXT

	MOVEI	TC,1(EACA)
	MOVEM	TC,CUREOP
	MOVSM	TC,OPERND

	MOVEI	LN,EBASEA	;SET UP PARAMETERS FOR VARIABLE
	PUSHJ	PP,SETOPN

	HRRZ	TE,EMODEA	;IS IT COMP-1?
	CAIN	TE,FPMODE
	JRST	BADEP7		;YES--ERROR
	TSWF	FANUM		;IS IT NUMERIC?
	SKIPE	EDPLA		;YES--DECIMAL PLACES?
	JRST	BADEP1		;BAD VARIABLE
	MOVE	TE,ESIZEA	;IS IT ONLY ONE WORD?
	CAILE	TE,^D10
	JRST	BADEP2		;NO--BAD VARIABLE
;MOVE 'DEPENDING' ITEM INTO AC3

	MOVEI	TE,3
	MOVEM	TE,EAC
	PUSHJ	PP,MXAC.

;HOW MANY NAMES?

GODPG5:	MOVE	EACA,EOPNXT
	CAMN	EACA,EOPLOC	;ANY PROCEDURE NAMES?
	JRST	BADEOP		;NO--TROUBLE

	HRRZ	TC,EACA		;COMPUTE NUMBER OF NAMES
	MOVE	TD,EOPLOC
	SUBI	TC,0(TD)
	LSH	TC,-1

	CAILE	TC,77777	;IN-BOUNDS?
	JRST	BADEOP		;NO--TROUBLE

;GENERATE:	CAIG	3,N
;		JUMPG	3,.+1(3)
;		JRST	.+N+1
;WHERE "N" IS THE NUMBER OF PROCEDURE NAMES

	MOVSI	CH,CAIG.+AC3
	HRR	CH,TC
	PUSHJ	PP,PUTASY

	MOVE	CH,[XWD JUMPG.+AC3+ASINC+3,AS.MSC]
	PUSHJ	PP,PUTASY
	HRRZI	CH,AS.DOT+1
	PUSHJ	PP,PUTASN

	MOVE	CH,[XWD JRST.+ASINC,AS.MSC]
	PUSHJ	PP,PUTASY
	MOVEI	CH,AS.DOT+1(TC)
	PUSHJ	PP,PUTASN

;NOW PUT OUT ALL THE GO'S

	MOVE	EACA,EOPLOC

GODPG7:	ADD	EACA,[XWD 2,2]	;BUMP TO NEXT ENTRY
	PUSHJ	PP,GOGO1

	CAME	EACA,EOPNXT	;DONE?
	JRST	GODPG7		;NO--LOOP

	POPJ	PP,		;YES--QUIT
;ERRORS
;VARIABLE ISN'T NUMERIC, OR HAS DECIMAL PLACES

BADEP1:	PUSHJ	PP,BADDP
	JRST	BADEP3

;VARIABLE IS TOO LARGE

BADEP2:	PUSHJ	PP,BADSIZ

BADEP3:	MOVSI	CH,MOVEI.+AC3	;GENERATE <MOVEI 3,0> SO WE CAN GO ON
	PUSHJ	PP,PUTASY
	JRST	GODPG5

;A FIGURATIVE CONSTANT, BUT NOT TALLY.

BADEP4:	MOVEI	DW,
	PUSHJ	PP,OPNFAT

BADEP5:	MOVEM	EACA,EOPNXT
	JRST	BADEP3

;COULDN'T FIND A LITERAL NOR A DATA NAME

BADEP6:	TTCALL	3,[ASCIZ "NO VARIABLE FOR GODEP
"]
	JRST	BADEP5

;COMP-1 WHEN IT SHOULDN'T BE

BADEP7:	PUSHJ	PP,BADFP
	JRST	BADEP3

AC3==3B30	;AC USED BY GODEP

EXTERNAL ESIZEA,EBASEA,EDPLA
EXTERNAL EOPLOC,EOPNXT,CUREOP,OPERND,AS.DOT,EAC,TB.DAT
EXTERNAL CAIG.,MOVEI.,JUMPG.,JRST.
	SUBTTL GENERATOR SERVICE ROUTINES






				;THE VALTAB TO LITAB XFER SUBROUTINE:
				;TRANSFERS ASCII FROM VALTAB TO LITAB
				;AND SUPPLIES LITAB WITH A HEADER WORD
				;ENTRY.

				;ONLY GOOD FOR ASCII!

				;EACA IS EXPECTED TO CONTAIN A POINTER
				;TO A WORD WHICH, IN TURN, POINTS TO A
				;RELATIVE ADDRESS IN VALTAB. THE ENTRY IN
				;VALTAB CONTAINS IN BITS 0-5 [OF THE 1ST WORD]
				;THE NUMBER OF CHARACTERS IN THE ASCII STRING.
				;REFER TO COBOL MEMO 100-350-11.01, PAGE
				;20 FOR FURTHER DESCRIPTION OF WORD LAYOUT
				;IN VALTAB AND BIT ASSIGNMENTS.



				;CALL:
				;[PUSHJ	PP,EVALIT]
				;TA IS EXPECTED TO POINT TO THE ORIGIN'S
				;[REAL ! ADDRESS!!] 1ST ENTRY.
				;THIS ENTRY IS EXPECTED TO HAVE A CHARACTQR
				;COUNT IN THE 1ST ASCII CHARACTER!
				;
				;
				;THE SUBROUTINE CAN BE EXPECTED TO CLOBBER:
				;EACA _ WHICH RETURNS WITH THE # OF WORDS PUT IN AS.LIT
				;EACB
				;EACC
				;EACD
				;
				;TA - TE
				;EACC AND EACD ARE EXPECTED TO BE CONTIGUOUS,
				;I.E., EACC MUST BE 1 LESS THAN EACD,
				;MODULO 20 OCTAL.
EPDAOK:	MOVEM	TA,LITNXT	;THERE IS ENOUGH ROOM NOW IN LITAB TO TAKE
				;THE FOLLOWING ENTRIES:

				;
				;
				;
				;NOW BEGIN MOVING THE SRTING:

	MOVE	TE,(EACB)	;GET 1ST WORD OF ORIGIN.

	LSH	TE,-1		;RIGHT JUSTIFY THE WORD
EBGLOP:	MOVE	TD,1(EACB)	;GET THE NEXT WORD DEEPER IN ORIGIN.
				;ON THE 1ST LOOP,
				;ON SUBSEQUENT LOOPS, TC WILL LOOK AT
				;LAST USED (!) HOLE

	LSHC	TE,^D7		;SHIFT THE 1ST CHARACTER OF THE N+1
				;WORD INTO THE PREVIOUS WORD

	LSH	TE,1		;LEFT JUSTIFY THE COMBINED 
				;4 CHARACTERS OF THE NTH WORD +
				;LEADING CHARACTER OF THE N+1TH WORD.


	SOJLE	EACC,ELTCHR	;ARE YOU THROUGH? IS WORD COUNT EXHAUSTED ?
	PUSH	TC,TE		;STORE WORD IN LITAB & BUMP COUNTER


				;MORE TO DO! PUT N+1TH WORD INTO NTH WORD'S
				;SLOT, AND

	LSHC	TE,^D28		;RIGHT JUSTIFY THE NOW NTH WORD.
	AOJA	EACB,EBGLOP	;BUMP DEPTH POINTER IN VALTAB BY 1.

				;LOOP!

ELTCHR:	CAIE	EACD,0		;IF EVEN MULTIPLE OF 5, DON'T BASH LAST CHARACTER.

	TRZ	TE,377		;LAST CHARACTER BROUGH IN IS BOGUS
				;SET LAST CHARACTER TO 0.
	MOVEM	TE,1(TC)

				;0 IN LAST CHARACTER OF STRING.

EFNLIT: POPJ	PP,		;---------------> RETURN!
				;PUT A WORD FROM TB
				;INTO LITAB
				;AND KEEP LITNXT & TA
				;CORRECTLY POINTING TO
				;WHERE THEY SHOULD
				;
				;TA WILL BE = LITNXT UPON EXITING.
				;CALL IS [PUSHJ	PP,PUTLIT]
				;




INCALT:	AOSA	CH,EALTPC			;BUMP PPC
	PUSHJ	PP,XPNALT			;EXPAND THE ALTER TABLE
PUTALT:	MOVE	TA,ALTNXT
	AOBJP	TA,.-2
	MOVEM	TB,(TA)
	MOVEM	TA,ALTNXT
	RETURN



LINUM:	POINT	13,-1(EACA),28	;13 BITS LONG STOPPING AT BIT #28


				;DW IS EXPECTED TO CONTAIN THE APPROPRIATE
				;DECIMAL DIAGNOSTIC NUMBER UPON ARRIVING HERE.
EWARN:	LDB	LN,LINUM	;ALSO, W1 IS EXPECTED TO
					;CONTAIN THE OPERAND'S LN & CP.
	HRRZ	CP,-1(EACA)		;GET CHARACTER POSITION
	JRST	WARN			;PUT OUT DIAG & RETURN


EFATAL:	LDB	LN,LINUM		;LIKEWISE FOR FATAL DIAGNOSTIC
	HRRZ	CP,-1(EACA)
	JRST	FATAL			;PUT OUT DIAG & RETURN
				;ALLOCATE A WORD FOR EXIT ROUTINE.
				;
				;USES ACCUMULATORS
				;TC
				;TD
				;TE

				;TA IS EXPECTED TO PAOINT AT APPLICABLE PROTAB
				;ENTRY UPON ENTERING SUBROUTINE

				;CH IS EXPECTED TO RETURN WITH THE
				;PHASE F EAS1PC + TYPE CODE LINK IN IT.


EOCT1:	XWD	6B20!ASCOCT,000001
EALLOC:	MOVE	CH,EOCT1	;ASSEMBLER OCTAL INFORMATION
	PUSHJ	PP,PUTAS1
	MOVEI	CH,0			;THE 1 WORD OF OCTAL RADIX = 0.
	PUSHJ	PP,PUTAS1
	AOS	CH,EAS1PC		;BUMP PPC
	MOVEI	CH,100000-1(CH)		;LEAVE TYPE CODE + PPC BEFORE BUMPING
					;IN CH
	HRLM	CH,3(TA)		;UP-DATE PROTAB.


	POPJ	PP,			;---------------> RETURN
;WRITE LITAB ONTO CURRENT ASYFIL

EBURPL:	SKIPG	LITBLK		;ANYTHING ON LITFIL?
	JRST	EBRP10		;NO

	HRRZ	TE,LITNXT	;YES--COMPUTE HOW
	HRRZ	TD,LITLOC	;  MANY WORDS
	SUB	TD,TE		;  STILL IN LITAB
	JUMPE	TD,EBRPL1	;IF NONE--NO NEED TO WRITE

	MOVM	TE,TD		;INCREMENT LITBLK
	ADDM	TE,LITBLK
	MOVSS	TD		;BUILD
	HRR	TD,LITLOC	;  IOWD LIST FOR
	SETZ	TC,		;  OUTPUT
	OUT	LIT,TD		;WRITE OUT REST OF TABLE
	JRST	EBRPL1		;OK
	MOVEI	CH,LITDEV	;ERROR--KILL
	JRST	DEVDED

EBRPL1:	CLOSE	LIT,

	MOVE	TE,LITHDR	;CREATE
	HLLZ	TD,LITHDR+1	;  LOOKUP
	SETZB	TC,TB		;  PARAMETERS
	LOOKUP	LIT,TE		;OPEN FOR INPUT
	JRST	EBRP11		;CANNOT FIND IT--MONITOR TROUBLE

	SETZM	EWORDB		;CLEAR COUNT OF WORDS IN TABLE
	MOVE	TE,LITLOC	;RESET LITNXT
	MOVEM	TE,LITNXT

EBRPL2:	MOVE	TE,LITBLK	;GET NUMBER OF WORDS IN FILE
	CAILE	TE,1600		;IF MORE THAN ^D768,
	MOVEI	TE,1600		;  USE ^D768
	ADDM	TE,EWORDB	;INCREMENT TABLE COUNT

EBRP12:	HLRE	TD,LITNXT	;WILL LITFIL READ IN OVER TAGTAB?
	ADDI	TD,(TE)		;  (THE TABLE AFTER LITTAB)
	JUMPLE	TD,EBRP13	;NO
	PUSHJ	PP,XPNLIT	;YES, EXPAND LITTAB
	JRST	EBRP12

EBRP13:	MOVNS	TE		;DECREMENT
	ADDM	TE,LITBLK	;  FILE WORD COUNT

	MOVSS	TE		;CREATE
	HRR	TE,LITNXT	;  IOWD LIST
	SETZ	TD,		;  FOR INPUT

	IN	LIT,TE		;READ SOME WORDS
	JRST	EBRPL3		;OK
	MOVEI	CH,LITDEV	;ERROR--KILL
	JRST	DEVDED
;WRITE LITAB ONTO ASYFIL (CONT'D)

EBRPL3:	HRRZ	EACC,LITLOC	;START AT TOP OF TABLE

EBRPL4:	SKIPN	TE,EWORDB	;IF NOTHING LEFT IN TABLE,
	JRST	EBRPL5		;  GET SOME MORE

	HLRZ	TE,1(EACC)	;GET LITAB CODE
	CAILE	TE,10		;IF ILLEGAL,
	JRST	EBRPLX		;  TROUBLE

	HRRZ	EACB,1(EACC)	;GET GROUP SIZE

	MOVE	TE,EWORDB	;IS ENTIRE GROUP IN CORE?
	CAIL	TE,1(EACB)
	JRST	EBRPL6		;YES

EBRPL5:	HRRZ	TD,LITLOC	;NO--
	ADDI	TD,1		;MOVE UP
	HRLI	TD,1(EACC)	;  UNUSED
	ADD	TE,LITLOC	;  WORDS
	CAME	TE,LITLOC
	BLT	TD,1(TE)

	HRRM	TE,LITNXT	;RESET LITNXT
	SKIPG	LITBLK		;ANYTHING LEFT IN FILE?
	JRST	EBRPL9		;NO--QUIT
	JRST	EBRPL2		;YES--GO READ SOME MORE

EBRPL6:	MOVNI	TE,1(EACB)	;DECREMENT
	ADDM	TE,EWORDB	;  WORDS LEFT IN CORE
	HLRZ	TE,1(EACC)	;GET CODE BACK
	XCT	BRPTAB(TE)	;EXECUTE SOME ROUTINE
	HRRI	CH,(EACB)	;IT WASN'T BYTE OR XWD--GET SIZE
	PUSHJ	PP,PUTASN	;WRITE OUT HEADER WORD

EBRPL7:	MOVE	CH,2(EACC)	;WRITE OUT DATA WORD
	PUSHJ	PP,PUTASY
	MOVEI	EACC,1(EACC)	;BUMP LOCATION
	SOJG	EACB,EBRPL7	;LOOP UNTIL DONE
	AOJA	EACC,EBRPL4	;BUMP LOCATION AND LOOP

EBRPL9:	MOVE	TE,LITLOC	;RESET LITNXT
	MOVEM	TE,LITNXT
EBRPLE:	POPJ	PP,
;WRITE LITAB ONTO ASYFIL (CONT'D)

EBRPLX:	TTCALL	3,[ASCIZ "?BAD LITAB CODE--COMPILER ERROR
"]
	SKIPL	LITBLK
	SETZM	LITBLK
	JRST	EBRPL9

;NOTHING WAS WRITTEN ON LITFIL

EBRP10:	MOVE	TE,LITNXT
	SUB	TE,LITLOC
	JUMPE	TE,EBRPLE
	HRRZM	TE,EWORDB
	JRST	EBRPL3

;CANNOT FIND LITFIL

EBRP11:	TTCALL	3,[ASCIZ "?CANNOT FIND LITFIL--COMPILER ERROR
"]
	JRST	KILL
;WRITE LITAB ONTO ASYFIL (CONT'D)

BRPTAB:	JRST	EBRPLX		;0 --ERROR
	JRST	BRPXWD		;1 --XWD
	JRST	BRPBYT		;2 --BYTE POINTER
	MOVSI	CH,6B20!ASCASC	;3 --ASCII
	MOVSI	CH,6B20!ASCSIX	;4 --SIXBIT
	MOVSI	CH,6B20!ASCD1	;5 --ONE-WORD DECIMAL
	MOVSI	CH,6B20!ASCD2	;6 --TWO-WORD DECIMAL
	MOVSI	CH,6B20!ASCFLT	;7 --FLOATING POINT
	MOVSI	CH,6B20!ASCOCT	;10--OCTAL

;ITEM IS AN XWD

BRPXWD:	LSH	EACB,-1		;HALVE THE COUNT
	MOVEI	CH,(EACB)	;BUILD A HEADER WORD
	HRLI	CH,5B20
	PUSHJ	PP,PUTASN	;WRITE IT OUT

BRPX1:	MOVE	CH,2(EACC)	;GET LEFT-HALF INFO
	PUSHJ	PP,PUTASN	;WRITE IT OUT
	MOVE	CH,3(EACC)	;GET RIGHT-HALF INFO
	PUSHJ	PP,PUTASY	;WRITE IT OUT

	MOVEI	EACC,2(EACC)		;BUMP TO NEXT DATUM
	SOJG	EACB,BRPX1	;LOOP IF MORE DATA FOR THIS ITEM

	AOJA	EACC,EBRPL4	;LOOP BACK TO GET NEXT ITEM


;ITEM IS A BYTE POINTER.

BRPBYT:	LSH	EACB,-1		;HALVE THE COUNT

BRPB1:	MOVSI	CH,4B20		;BUILD HEADER WORD
	HRR	CH,2(EACC)
	PUSHJ	PP,PUTASY	;WRITE THAT OUT

	MOVE	CH,3(EACC)	;GET INCREMENT WORD
	PUSHJ	PP,PUTASN	;WRITE THAT OUT

	MOVEI	EACC,2(EACC)		;BUMP TO NEXT DATUM
	SOJG	EACB,BRPB1	;LOOP IF MORE DATA FOR THIS ITEM

	AOJA	EACC,EBRPL4	;LOOP TO GET NEXT ITEM
;PUT AN ENTRY INTO SECTAB

	PUSHJ	PP,XPNSEC
PUTSEC:	MOVE	TA,SECNXT
	AOBJP	TA,.-2
	MOVEM	TB,(TA)
	MOVEM	TA,SECNXT
	POPJ	PP,


;UPDATE SECTAB, BURP OUT LITAB AND ALTAB

SEGCLN:	PUSHJ	PP,CKEXIT	;CHECK FOR EXITS REQUIRING GENERATION
EBURP:	TSWF	FAS3		;ARE WE IN A NON-RESIDENT SEGMENT?
	SKIPA	TB,EAS3PC	;YES--USE EAS3PC
	MOVE	TB,EAS2PC	;NO--USE EAS2PC
	MOVSI	TB,(TB)		;LH _ RH
	PUSHJ	PP,PUTSEC	;STASH THAT IN SECTAB

	MOVEI	TB,0
	PUSHJ	PP,PUTSEC		; ****  *****
					;MAKE ROOM FOR 2ND ENTRY
					;IF REQUIRED. IF NOT NEEDED, 2ND
					;ENTRY WILL BE 0'S.///



				;PUT OUT A RELOC OPERATOR & DUMP LITAB (IF NECESSARY)
	SKIPN	W2,ELITPC	;ANYTHING IN LITAB?
	JRST	ETSTAL		;NOTHING IN LITAB, CHECK ALTERS.

	MOVE	CH,[XWD	AS.REL+1,AS.MSC]	;RELOC OPERATOR OUT
	PUSHJ	PP,PUTASN		;WRITE IT OUT
	MOVEI	CH,AS.LIT	;ADD TO BASE OF LITERALS FLAG + 0.




	PUSHJ	PP,PUTASN	;WRITE IT OUT
;SPILL CONTENTS OF LITAB TO ASYFIL

	PUSHJ	PP,EBURPL

ETSTAL:	SKIPE	W2,EALTPC	;IF PPC IS 0, NO DUMPING
	PUSHJ	PP,EBPALT	;BURP OUT ALTER FOR > 50.

	TSWT	FAS3		;ARE WE IN A NON-RESIDENT SEGMENT?
	JRST	ETSTA1		;NO
	MOVE	TA,EAS3PC	;YES--IF BIGGER
	CAMLE	TA,HILOC	;	THAN LAST ONE,
	MOVEM	TA,HILOC	;	RESET PROGRAM BREAK

ETSTA1:	JUMPE	EACA,EBURPX	;IF END OF PROG--NO CHECKS
	HRRZ	TA,(EACA)	;GET OPERAND'S FLAGS
				;IN THE CASE OF THE CALL FROM ERAPUP,
				;THIS MAY BE A DUMMY CREATED BY SELF.
	PUSHJ	PP,LNKSET
	HRRZ	TA,2(TA)	;THERE, GOT THE PRIORITY # FOR NEXT GUY <OR DUMMY>
	CAIL	TA,^D1B24	;GOING TO RES ?
	SWON	FAS3		; _ NOPE, SET "IN NON-RES FLAG.
				; _ YEP, INITIAL CASE = SET TO
				;RESIDENT, SO CONTINUE THINKING YOU ARE
				;IN RESIDENT UNTIL YOU SEE NON-RES.
				;FROM THE 1ST TIME YOU SEE NON-RES,
				;ALL SUBSEQUENT SEGS WILL BE NON-RES.
	TSWF	FAS3		;ANY NON-RESIDENTS SEEN?
	SETOM	SEGFLG		;YES--SET INDICATOR FOR PHASE G

;CLEAR SOME WORK AREA

EBURPX:	SETZB	TB,EZEROL
	MOVEM	TB,ELITPC			;CLEAR LIT'S PPC.
	MOVEM	TB,EALTPC			;AND ALT'S PPC.
	MOVE	TE,[XWD EZEROL,EZEROL+1]
	BLT	TE,EZEROH

	POPJ	PP,		;---------------> RETURN
EBPALT:	HRRZ	EACB,EAS3PC		;SAVE EAS3 PC
	HRLI	EACB,(W2)		;SAVE EALT PC TOO.

	MOVSI	CH,5B20			;XWD HEADER
	HRRI	CH,(W2)			;WITH TYPE  CODE  AND # 2-WORD ENTRIES.
	PUSHJ	PP,PUTASN		;ONTO WRITE-LOCKED AS2 OR AS3.
	SKIPA	TA,ALTLOC		;ENTER DUMP
MORALT:	MOVEI	TA,2(TA)		;GET NEXT GUY & CONTINUE

	MOVE	CH,1(TA)		;1ST WORD
	PUSHJ	PP,PUTASN		;= LEFT HALF OF XWD
	MOVE	CH,2(TA)		;
	PUSHJ	PP,PUTASY		;2ND WORD = RIGHT HALF OF XWD
	SOJG	W2,MORALT		;MORE?  YES ^; NO FALLS THRU


					;NOPE _
					;UPDATE 2ND WORD IN SECTAB NOW!
					;SECNXT POINTS TO WORD YOU ARE GOING
					;TO UPDATE:
	HRRZ	TA,SECNXT		;GET POINTER

	MOVEM	EACB,(TA)		;SECTAB ENTRY FOR THIS SEG COMPLETED!
					;NOW SEE WHO IS LARGER,
	HLRZ	EACB,EACB		;EALTPC FOR THIS SEG?
	CAMLE	EACB,EALTMX		;OR BIGGEST SEEN TO DATE?
	HRRZM	EACB,EALTMX		;PRESENT ONE BECOMES CONTENDER.
	RETURN				;EVERTYTHING TAKEN CARE OF, RETURN.
					;ALTERS WERE BURPED OUT
CKEXIT:	SKIPGE	W2,EPPARA	;CLEAN UP PRESENT PARAGRAPH
				;FIRST: CHECK FOR PREVIOUS PARAGRAPH'S REQUIRING EXIT.
	PUSHJ	PP,SETUPP	;SET UP FOR GENERATING PARAGRAPH'S EXIT
ERETN1:	SKIPGE	W2,EPSECT	;SECOND: DO SAME FOR SECTION LAST SEEN
	PUSHJ	PP,SETUPS	;SET UP FOR GENERATING SECTION'S EXIT


ERETN2:	POPJ	PP,		;---------------> RETURN






SETUPP:	MOVEI	EACC,EPPARA	;SET POINTER TO INFORMATION ABOUT PREVIOUS PARAGRAPH
	JRST	EXITRP		;GO GENERATE THE EXIT


SETUPS:	MOVEI	EACC,EPSECT
	JRST	EXITRP
MAKXWD:	MOVE	CH,[XWD	AS.XWD,1]		;BUILD UP 1ST 3 WORDS OF AN XWD
	PUSHJ	PP,PUTAS1
	TRNE	EACC,40			;ARE ALL ALTERS IN THIS SEG?
	JRST	ADDBIT			;NOPE! <NOT ALL OF DESTINATIONS IN THIS SEG>.

	MOVEI	CH,0
	PUSHJ	PP,PUTAS1		;AND WRITE OUT THE LEFT HALF
	MOVE	CH,EACB			;ADDRESS FOR JRST @ ALTERED GO
					;GOES IN RIGHT HALF OF XWD
ENDXWD:	PUSHJ	PP,PUTAS1		;XWD & THERE IS 1 OF ME
					;LEFT HALD IS 0

	AOS	CH,EAS1PC
	MOVEI	CH,100000-1(CH)		;BUMP PPC FOR THE WHOLE WORD TO BE PUT OUT
					;RESTORE PPC COUNT TO PRIOR SETTING & GET F-G
					;TABLE INTO CH

	POPJ	PP,			;--------------- RETURN


ADDBIT:	MOVE	CH,EACB			;ADDRESS FOR THIS GUY GOES IN LEFT HALF
	PUSHJ	PP,PUTAS1
	CAMN	CH,EGOTO		;WHETHER IT'S EGOTO

	PUSHJ	PP,GOTOSG
	PUSHJ	PP,GETBIT		;PRIORITY BITS INTO RIGHT HALF
	JRST	ENDXWD			;FINISH UP THE OVLAY. XWD
SOLVER:	SKIPA	TA,-2(EACA)	;GET PROCEEDING LINK [NEXT EARLIER ONE ENTERED]
RESOLV:	MOVE	TA,(EACA)	;GET LINK AS POINTED TO BY EACA IN EOPTAB.
	TLNN	TA,EUNREZ	;IS THIS A FLOTAB ENTRY WHICH NEEDS TO BE RESOLVED
				;INTO A PROTAB ENTRY ?
	JRST	ITISOK		;IT'S OK, THAT IS, IT'S ALREADY A PROTAB ENTRY.
	ANDI	TA,77777		;GET JUST THE OFFSET BITS
	ADD	TA,FLOLOC	;ADD TO RELATIVE OFFSET, THE STARTING TABLE ADDRESS
				;HELD IN FLOLOC.
	HRRZ	TA,(TA)		;GET WHERE YOU ARE POINTED.
ITISOK:	MOVEI	TA,(TA)		;INSURE LEFT HALF OF TA CLEAR
	CAIL	TA,400001	;NOW THAT YOU HAVE RESOLVED ENTRY, IS IT
				;REALLY A PROTAB ENTRY /
				;BETWEEN 400001 AND 500000 IS IT ?
	CAIL	TA,500000
	POP	PP,TE
	RETURN			;THE POP IS THE ERROR CONDITION, WHICH
				;WILL THEN POPJ YOU TO CALLING ROUTINE.
OVLHDR:	MOVE	TA,[XWD XWDLIT,2];HEADER FOR XWD
	PUSHJ	PP,STASHL	;OUT ON FILE AS2, OR 3

	HLRZ	TA,CURPRO	;ADDRESS INTO LEFT HALF OF
				;THE XWD YOU ARE BUILDING.

	PUSHJ	PP,STASHL
				;INTO THE RIGHT HALF OF XWD YOU ARE BUILDING:
	MOVEI	TA,ENREZE	;MASK FOR ALL BUT PRIORITY BITS
	ANDI	TA,(EACD)	;NOW THE PRIORITY BITS FOR   THE DESTINATION.
				; PRI BITS/ PRI BITS,AS.CNB
				;= WORD OUT
	LSH	TA,^D7		;MAKING ROOM FOR THE
	MOVEI	TC,(EACC)	;SAVE OLD EACC 1ST THOUGH!!!!
	ANDI	TC,ENREZE	;STRIP OFF ALL BUT PRITOITY BITS
	LSH	TC,-^D2		;SHIFTED
	TLO	TA,(TC)		;SOURCE PRIORITY BITS INTO TB, RIGHT[TEST] HALF.
	HRRI	TA,AS.CNB	;CONSTANT INCREMENT TYPE CODE

	PUSHJ	PP,STASHL	;PUT OUT LAST WORD
	AOS	CH,ELITPC	;BUMP PC
	MOVEI	CH,AS.LIT-1(CH)	;ADD IN TYPE CODE & READJUST PPC COUNT TO LOOK
				;AT WORD JUST OUTPUT, NOT NEXT WORD.
	RETURN
GETBIT:	MOVEI	TA,-ECPFLG(CH)		;RESTORE LINK TO E NOTATION.

GTBIT1:	PUSHJ	PP,LNKSET
	HRRZ	CH,2(TA)			;GET PRIORITY BITS


	ANDI	CH,ENREZE
	LSH	CH,^D7			;POSITION SEG # BITS.
	MOVEI	TC,(EACC)		;SAVE OLD EACC!!
	ANDI	TC,ENREZE		;INSURE THAT NO MORE BITS THAN
					;THE PRIORITY BITS GET INTO XWD.
	LSH	TC,-^D2
	TLO	CH,(TC)				;SEG PRIORITY BITS IN LEFT
						;HALF, AS.CNB INTO RIGHT HALF.
	HRRI	CH,AS.CNB
	RETURN
	ENREZF=774B27		;THE NON-RESIDENT MASK USED
				;TO DISCERN A RESIDENT PROCEDURE NAME
				;[ENREZF = ALL 0] FROM A NON-RESIDENT ONE.
				;THE CODE KEY KEPT IN EPPARA AND EPSECT
				;IS SLIGHTLY DIFFERENT FROM THE FORMAT
				;AS IT IS STORED IN PROTAB...
				;THE PRIORITY # IS SHIFTED RIGHT 1.
				;... SEE PARGEN FOR FURTHER DESCRIPTION.
				;
				;
	ENREZE=774B26		;MASK FOR PRIORITY # [AS ABOVE] BUT SHIFTED 1
				;TO THE LEFT. PRIORITY # & FLAGS 
				;LINE UP WITH PROTAB ENTRY..
				;
				;
				;
	EUNREZ=1B20
		;UNRESOLVED 1ST PASS OPERAND FLAG
		;

FLAGPP:	POINT 18,EPPARA,18	;ALL OF EPPARA'S FLAGS SHIFTED LEFT 1 BIT
				;SO THAT THEY ARE IN SYNC WITH FLAGS IN PROTAB.
FLAGPS:	POINT 18,EPSECT,18	;DITTI FOR SECTION FLAGS
E1AC==1B30
E2AC==2B30
E3AC==3B30
E11AC==11B30
EPPAC==17B30

EXTFLG==400000	;FLAG TO DENOTE EXTERNAL REFERENCED IN NON-RESIDENT SEGMENT

EXTERNAL FPMODE,PTFLAG,CURPRO,EWORDB,LNKCOD,TM.TAG
EXTERNAL ALTLOC,ALTNXT,EALTMX,EALTPC,EAQRJ,EASRJ,EAZRJ
EXTERNAL EAS1PC,EAS2PC,EAS3PC,EZEROH,EZEROL
EXTERNAL LITLOC,LITNXT,SECLOC,SECNXT,TAGCNT,UUOBIT,FLOLOC,FLONXT,EXTLOC
EXTERNAL DSPLY.,OVLAY.,PERF.
EXTERNAL MOVSI.,JRST.,MOVEI.,MOVEM.,PUSHJ.,EPJPP
EXTERNAL ELITPC,EPPARA,EPSECT,XWDLIT,AS.XWD,TB.PRO,HILOC,SEGFLG,SAVEAC
EXTERNAL LITDEV,LITHDR,LITBLK
EXTERNAL AS.CNB,AS.GO,AS.MSC,AS.TAG,AS.LIT,AS.REL,AS.PRO
EXTERNAL TM.PRO

	END
    toSdE