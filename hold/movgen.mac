TITLE	MOVGEN FOR COBOL 5(61)	
SUBTTL	GENERATORS FOR "MOVE" VERB	AL BLACKINGTON/CAM

;COPYRIGHT 1970,1971,1972, DIGITAL EQUIPMENT CORP, MAYNARD, MA

TWOSEG
RELOC	400000


	ENTRY MOVGEN	;ENTERED WHEN MOVE VERB SEEN BY PHASE E

	INTERNAL MOVGN.	;GENERATE A MOVE FOR A SINGLE PAIR OF OPERANDS
	INTERNAL MXX.	;MOVE AFTER OPERANDS SET UP

	INTERNAL MDD.	;MOVE DISPLAY TO DISPLAY
	INTERNAL MDC.	;MOVE DISPLAY TO COMP
	INTERNAL M1C1C.	;MOVE 1-WORD COMP TO 1-WORD COMP
	INTERNAL M1C2C.	;MOVE 1-WORD COMP TO 2-WORD COMP
	INTERNAL M1CD.	;MOVE 1-WORD COMP TO DISPLAY
	INTERNAL M2C1C.	;MOVE 2-WORD COMP TO 1-WORD COMP
	INTERNAL M2C2C.	;MOVE 2-WORD COMP TO 2-WORD COMP
	INTERNAL M2CD.	;MOVE 2-WORD COMP TO DISPLAY


	INTERNAL MXTMP.	;MOVE AN ITEM TO A TEMP FOR "DISPLAY"
	INTERNAL MXAC.	;MOVE SOMETHING TO AC'S
	INTERNAL MNXAC.	;MOVE NEGATIVE OF SOMETHING TO AC'S

	INTERNAL MDAC.	;MOVE DISPLAY ITEM TO AC'S
	INTERNAL M1CAC.	;MOVE 1-WORD COMP ITEM TO AC'S
	INTERNAL M2CAC.	;MOVE 2-WORD COMP ITEM TO AC'S
	INTERNAL MFPAC.	;MOVE FLOATING POINT ITEM TO AC'S
	INTERNAL MXFPA.	;MOVE SOMETHING TO AC'S & CONVERT TO COMP-1

	INTERNAL MACX.	;MOVE SOMETHING FROM THE AC'S

	INTERNAL ADJDP.	;ADJUST DECIMAL PLACES OF A COMP ITEM
	INTERNAL ADJ1C.	;ADJUST DECIMAL PLACES OF 1-WORD COMP
	INTERNAL ADJ2C.	;ADJUST DECIMAL PLACES OF 2-WORD COMP
	INTERNAL CC1C2.	;CONVERT A 1-WORD COMP (IN AC'S) TO 2-WORD COMP
	INTERNAL CCXFP.	;CONVERT COMP TO FLOATING-POINT
	INTERNAL CFPCX.	;CONVERT FLOATING POINT TO 2-WORD COMP
	INTERNAL ADJLIT	;ADJUST LITERAL TO MATCH DECIMAL PLACES IN "B"
	INTERNAL MSFP%L	;CREATE A COMP-1 LITERAL, PUT IT INTO %LIT

	INTERNAL LITD.	;CREATE A NON-NUMERIC DISPLAY LITERAL
	INTERNAL LITN.	;CREATE A NUMERIC DISPLAY LITERAL
	INTERNAL LITN.A	;CREATE A NUMERIC DISPLAY LITERAL AFTER SCANL EXECUTED

	INTERNAL MSX.	;MOVE SPACES TO SOMETHING
	INTERNAL MZC1.	;MOVE ZEROES TO 1-WORD COMP
	INTERNAL MZC2.	;MOVE ZEROES TO 2-WORD COMP
EXTERNAL CMNGEN	;COMMON ROUTINES

EXTERNAL KILL,BADEOP
EXTERNAL PUTASY,PUTASN,PUTAS1
EXTERNAL SETOPA,SETOPB,SETOPN,GETEMP,SETEMP,STASHL,CONVNL,CONVFP,VALLIT,VLIT2,SETUUO
EXTERNAL AZRJ.,ASRJ.,AQRJ.,SZERO.,SQUOT.,FPLOV.
EXTERNAL M.IA,M.IB,MBYTEA,MBYTEB,SCANL,GENFPL,BMPEOP,DPDIV.,ADJSL.,SWAPAB
EXTERNAL LNKSET,XPNLIT,WARN,FATAL,WARNAD,OPNFAT,OPNWRN,OPFAT,NOTNUM
EXTERNAL FORCX0,NEGATL,CREATL,SUBSCR,BYTE.A,BYTE.B,BYTE.C
EXTERNAL SUBSCA,SUBSCB,SUBSCC,SUBSCD,SUBSCE,GETTAG,PUTTAG,B1PAR,B2PAR
EXTERNAL PUTEMP,SWAPEM
EXTERNAL PUT.A,PUT.AA,PUT.B,PUT.BA,PUT.L,PUT.LA,PUT.LB,PUT.LC,PUT.LD
EXTERNAL PUT.P,PUT.PA,PUT.PC,PUT.XA,PUT.XB
;ENTRY POINT FROM COBOLE FOR "MOVE" VERB.
;SET UP THE OPERAND PARAMETERS, AND CALL "MOVGN." UNTIL ALL OPERANDS ARE USED UP.

MOVGEN:	CAMN	EACA,EOPLOC	;ANY OPERANDS?
	JRST	BADEOP		;NO--ERROR

	MOVEM	W1,OPLINE	;SAVE OPERATOR'S LN&CP
	MOVEM	EACA,EOPNXT	;RESTORE END OF LIST POINTER

	HRRZ	TA,EOPLOC	;SET "CUREOP" TO FIRST OPERAND
	ADDI	TA,1
	MOVEM	TA,CUREOP

MOVGN0:	PUSHJ	PP,BMPEOP	;GET NEXT "B" OPERAND
	POPJ	PP,		;NO MORE--QUIT

	HRRZ	TA,EOPLOC	;RESET "TA" TO "A" OPERAND
	ADDI	TA,1
	HRRZ	TC,CUREOP	;SET "TC" TO "B" OPERAND
	PUSHJ	PP,MOVGN.	;DO A SINGLE MOVE

	HRRZ	TE,OPERND	;MAKE SURE CUREOP IS RIGHT
	MOVEM	TE,CUREOP

	JRST	MOVGN0		;LOOP UNTIL DONE
;SET UP THE NEXT MOVE

MOVGN.:	SWOFF	FEOFF1		;TURN OFF SOME FLAGS
	HRL	TA,TC		;SET "OPERND" AS <XWD A-OP,B-OP>
	MOVSM	TA,OPERND

;SET UP "B" OPERAND

	PUSHJ	PP,SETOPB

	HRRZ	TE,EMODEB	;IS IT
	CAIE	TE,FCMODE	;  FIG. CONST.
	CAIN	TE,LTMODE	;  OR LITERAL?
	JRST	MOVGN2		;YES--OOPS

	MOVE	TA,ETABLB
	LDB	TE,LNKCOD
	CAIE	TE,TB.DAT
	JRST	MOVGN4


	PUSHJ	PP,LNKSET
	LDB	TE,DA.JST	;IS IT
	SKIPN	TE		;  JUSTIFIED RIGHT?
	TDCA	TD,TD		;NO--BIT 0 _ 0
	HRLZI	TD,1B18		;YES--BIT 0 _ 1
	IORM	TD,EMODEB
	LDB	TE,DA.EDT	;IS IT EDITED
	LDB	TD,DA.BWZ	;  OR 'BLANK
	IORI	TE,(TD)		;  WHEN ZERO'?
	JUMPE	TE,MOVGN4

	MOVEI	TD,EDMODE	;YES--SET NEW MODE
	HRRM	TD,EMODEB
	LDB	TE,DA.CLA	;IS IT
	CAIN	TE,2		;  NUMERIC?
	SWON	FBNUM		;YES
	JRST	MOVGN4


MOVGN2:	TTCALL	3,[ASCIZ "LITERAL B-OP IN MOVE
"]
	POPJ	PP,
;SET UP NEXT MOVE  (CONT'D).

;SET UP "A" OPERAND PARAMETERS

MOVGN4:	HLRZ	TC,OPERND	;GET ADDRESS OF "A"
	PUSHJ	PP,SETOPA

	MOVE	TA,ETABLA	;IS IT A DATA-ITEM?
	LDB	TE,LNKCOD
	CAIE	TE,TB.DAT
	JRST	MOVGN5		;NO

	PUSHJ	PP,LNKSET
	LDB	TE,DA.EDT	;IS IT
	JUMPE	TE,MOVGN5	;  EDITED?

	LDB	TE,DA.EXS	;YES--USE EXTERNAL SIZE
	MOVEM	TE,ESIZEA

	SETZM	EDPLA		;IGNORE DECIMAL PLACES
;MOVE ANYTHING TO ANYTHING
;"A" AND "B" PARAMETERS HAVE BEEN SET UP

MOVGN5:	SETZM	EAC
	SWOFF	FEOFF2		;TURN OFF SOME FLAGS
	HRRZ	TA,EMODEA	;IS "A" A LITERAL?
	CAIN	TA,LTMODE
	JRST	MXX.		;YES
	CAIN	TA,FCMODE	;NO--FIG. CONST?
	JRST	MXX.6		;YES

;CHECK FOR VALIDITY OF MOVE

	MOVEI	LN,EBASEB
	PUSHJ	PP,MOVG5A
	MOVEI	TB,1
	LSH	TB,0(TC)

	MOVEI	LN,EBASEA
	PUSHJ	PP,MOVG5A
	TDNE	TB,CLASST(TC)
	JRST	NOTNUM

	CAIE	TB,4		;WAS 'B' NUMERIC?
	SKIPG	EDPLA		;NO--DOES 'A' HAVE DECIMAL PLACES?
	JRST	MOVGN7		;NO--ALL IS WELL
	CAIN	TB,100		;WAS 'B' NUMERIC-EDITED?
	JRST	MOVGN7		;YES--THAT'S OK TOO
	JRST	NODPL		;DECIMAL PLACES TO NON-NUMERIC--ERROR

MOVG5A:	HRRZ	TA,EBASEX(LN)
	CAIN	TA,TALLY.##
	JRST	MOVG5B

	MOVE	TA,ETABLX(LN)
	PUSHJ	PP,LNKSET
	LDB	TC,DA.CLA
	LDB	TE,DA.EDT
	SKIPE	TE
	IORI	TC,4
	POPJ	PP,

MOVG5B:	MOVEI	TC,2
	POPJ	PP,
;SET UP NEXT MOVE (CONT'D).

;SEE IF A ZERO WILL RESULT

MOVGN7:	HRRZ	TE,EMODEA	;IS EITHER "A" OR "B" COMP-1?
	HRRZ	TD,EMODEB
	CAIE	TE,FPMODE
	CAIN	TD,FPMODE
	JRST	MXX.		;YES--NO CHECK

	SKIPN	EDPLA		;DOES "A" HAVE ANY DECIMAL PLACES?
	JRST	MOVGN8		;NO
	SKIPE	EDPLB		;YES--DOES "B"?
	JRST	MXX.		;YES

	MOVE	TE,ESIZEA	;NO--DOES "A" HAVE ANY INTEGRAL PLACES?
	CAMLE	TE,EDPLA
	JRST	MXX.		;YES
	JRST	MOVGN9		;NO--RESULT HAS TO BE ZERO

MOVGN8:	MOVE	TE,ESIZEB	;DOES "B" HAVE ANY INTEGRAL PLACES?
	CAMLE	TE,EDPLB
	JRST	MXX.		;YES--OK

;RESULT WILL ALWAYS BE ZERO

MOVGN9:	HRRZ	TA,EMODEB
	ROT	TA,-1
	TLNE	TA,1B18
	SKIPA	TA,MZTAB(TA)
	MOVS	TA,MZTAB(TA)
	MOVE	TE,ESIZEB
	MOVEM	TE,ESIZEZ
	PUSHJ	PP,(TA)
	JRST	NOSIZ.
;MOVE ANYTHING TO ANYTHING

;DISPATCH TO SOME ROUTINE

MXX.:	HRRZ	TA,EMODEA
	CAIN	TA,FCMODE
	JRST	MXX.6

	HRRZ	TB,EMODEB
	CAIGE	TB,LTMODE
	CAILE	TA,LTMODE
	JRST	BADCOD

	LSH	TA,2		;ENTRANCE ADDRESS IS MOVT.(4*EMODEA+EMODEB/2)
	ROT	TB,-1
	ADDI	TA,(TB)
	TLNE	TB,1B18
	SKIPA	TC,MOVT.(TA)
	MOVS	TC,MOVT.(TA)

	JRST	(TC)


;A-OPERAND IS A FIGURATIVE CONSTANT.

MXX.6:	HRRZ	TA,EMODEB
	CAILE	TA,7		;LEGAL MODE?
	JRST	BADCOD		;NO--TROUBLE

	ROT	TA,-1

	MOVE	TE,EFLAGA
	ADD	TA,FCTAB(TE)

MXX.6A:	TLZE	TA,1B18		;WAS MODE ODD?
	SKIPA	TC,0(TA)	;YES--USE RIGHT-HALF
	MOVS	TC,0(TA)	;NO--USE LEFT-HALF

	MOVE	TA,ESIZEB
	MOVEM	TA,ESIZEZ
	JRST	(TC)
;TABLE OF ENTRANCE POINTS TO "MOVE" ROUTINES.

MOVT.:	XWD	MDD.,MDD.	;S-S,S-A
	XWD	BADCOD,MDC.	;-,S-1C
	XWD	MDC.,MDC.1	;S-2C,S-F
	XWD	BADCOD,MDED.	;-,S-EDIT

	XWD	MDD.,MDD.	;A-S,A-A
	XWD	BADCOD,MDC.	;-,A-1C
	XWD	MDC.,MDC.1	;A-2C,A-FP
	XWD	BADCOD,MDED.	;-,A-EDIT

	XWD	BADCOD,BADCOD
	XWD	BADCOD,BADCOD
	XWD	BADCOD,BADCOD
	XWD	BADCOD,BADCOD

	XWD	M1CD.,M1CD.	;1C-S,1C-A
	XWD	BADCOD,M1C1C.	;-,1C-1C
	XWD	M1C2C.,M1CFP.	;1C-2C,1C-FP
	XWD	BADCOD,MCED.	;-,1C-EDIT

	XWD	M2CD.,M2CD.	;2C-S,2C-A
	XWD	BADCOD,M2C1C.	;-,2C-1C
	XWD	M2C2C.,M2CFP.	;2C-2C,2C-FP
	XWD	BADCOD,MCED.	;-,2C-EDIT


	XWD	MFPD.,MFPD.	;F-S,F-A
	XWD	BADCOD,MFP1C.	;-,FP-1C
	XWD	MFP2C.,MFPFP.	;FP-2C,FP-FP
	XWD	BADCOD,MCED.	;-,F-EDIT

	XWD	BADCOD,BADCOD
	XWD	BADCOD,BADCOD
	XWD	BADCOD,BADCOD
	XWD	BADCOD,BADCOD

	XWD	BADCOD,BADCOD	;CAN'T MOVE FROM EDITED (CHANGED TO SIXBIT OR ASCII)
	XWD	BADCOD,BADCOD
	XWD	BADCOD,BADCOD
	XWD	BADCOD,BADCOD

	XWD	MLD.,MLD.	;LIT-S,LIT-A
	XWD	BADCOD,ML1C.	;-,LIT-1C
	XWD	ML2C.,MLFP.	;LIT-2C,LIT-FP
	XWD	BADCOD,MLED.	;-,LIT-EDIT
;MOVE SOMETHING TO THE AC'S.
;PARAMETERS HAVE ALREADY BEEN SET UP.

MXAC.:	HRRZ	TE,EBASEA	;IS IT ALREADY
	CAIG	TE,17		;  IN AC'S?
	JRST	MXAC.0		;YES

	HRRZ	TE,EMODEA	;NO--IS TYPE
	CAILE	TE,FCMODE	;  IN RANGE?
	JRST	BADCOD		;NO

	PUSHJ	PP,@MXAC.1(TE)
MXAC.0:	SWON	FASIGN;
	SWOFF	FASUB;
	POPJ	PP,

MXAC.1:	EXP	MDAC.		;SIXBIT
	EXP	MDAC.		;ASCII
	EXP	BADCOD
	EXP	M1CAC.		;1-WORD COMP
	EXP	M2CAC.		;2-WORD COMP
	EXP	MFPAC.		;FLOATING POINT
	EXP	BADCOD
	EXP	BADCOD
	EXP	MLTAC.		;LITERAL
	EXP	.+1


;"A" IS A FIGURATIVE CONSTANT.

	HRRZ	TE,EFLAGA
	CAIN	TE,ZERO
	JRST	BADCOD

MXAC.3:	SWON	FALWY0		;AC'S ARE ZERO
	MOVSI	CH,SETZB.	;GENERATE
	HRR	CH,EAC		;  <SETZB AC,AC+1>
	DPB	CH,CHAC
	AOS	CH
	JRST	PUTASY
;MOVE SOMETHING FROM AC'S.
;PARAMETERS HAVE ALREADY BEEN SET UP.

MACX.:	TSWF	FALWY0		;ARE AC'S ZERO?
	JRST	MACX.1		;YES
	HRRZ	TE,EMODEA
	SUBI	TE,D1MODE
	LSH	TE,3
	ADD	TE,EMODEB
	CAIGE	TE,^D24
	JUMPGE	TE,@MACX.T(TE)
	JRST	BADCOD

MACX.T:	EXP	MACD.	;1C-S
	EXP	MACD.	;1C-A
	EXP	BADCOD
	EXP	MAC1C.	;1C-1C
	EXP	M1C2CA	;1C-2C
	EXP	MACFP.	;1C-FP
	EXP	BADCOD
	EXP	MACE.	;1C-ED

	EXP	MACD.	;2C-S
	EXP	MACD.	;2C-A
	EXP	BADCOD
	EXP	M2C1CC	;2C-1C
	EXP	MAC2C.	;2C-2C
	EXP	MACFP.	;2C-FP
	EXP	BADCOD
	EXP	MACE.	;2C-ED

	EXP	MACFD.	;FP-S
	EXP	MACFD.	;FP-A
	EXP	BADCOD
	EXP	MFP1CA	;FP-1C
	EXP	MFP2CA	;FP-2C
	EXP	MAC1C2	;FP-FP
	EXP	BADCOD
	EXP	MACE.	;FP-ED

MACX.1:	HRRZ	TA,EMODEB
	CAILE	TA,7
	JRST	BADCOD
	ROT	TA,-1
	ADDI	TA,MZTAB
	JRST	MXX.6A
;GET NEGATIVE OF "A" INTO THE AC'S

MNXAC.:	HRRZ	TE,EMODEA
	CAIG	TE,LTMODE	;IS MODE WITHIN RANGE?
	JUMPGE	TE,@MNXACT(TE)
	JRST	BADCOD

MNXACT:	EXP	MNXAC1	;SIXBIT
	EXP	MNXAC1	;ASCII
	EXP	BADCOD	;-
	EXP	MN1CAC	;1-WORD COMP
	EXP	MN2CAC	;2-WORD COMP
	EXP	MNFPAC	;COMP-1
	EXP	BADCOD	;-
	EXP	BADCOD	;-
	EXP	MNLTAC	;LITERAL

MNXAC1:	PUSHJ	PP,MXAC.
	HRRZ	TE,EMODEA
	CAIE	TE,D1MODE
	CAIN	TE,FPMODE
	JRST	MNXAC2

	MOVSI	CH,NEG.
	PUSHJ	PP,SETUUO
	JRST	MNXAC3

MNXAC2:	MOVSI	CH,MOVN.

MNXAC3:	HRR	CH,EAC
	DPB	CH,CHAC
	PUSHJ	PP,PUTASY
	JRST	MNXAC9

MNFPAC:
MN1CAC:	TSWT	FASIGN;
	JRST	MNXAC1

	PUSHJ	PP,SUBSCA
	MOVSI	CH,MOVN.
	PUSHJ	PP,PUT.AA
	JRST	MNXAC9

MN2CAC:	TSWT	FASIGN;
	JRST	MNXAC1

	PUSHJ	PP,SUBSCA
	MOVSI	CH,NEG.
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUT.A
MNXAC9:	SWON	FASIGN;
	SWOFF	FASUB;
	POPJ	PP,


BADCOD:	MOVEI	DW,^D276
	JRST	OPFAT
;MOVE A LITERAL TO AC'S.
;IF LITERAL HAS FEWER DECIMAL PLACES THAN "B", ADJUST LITERAL.

MLTAC.:	HRRZ	TE,EMODEB
	CAIN	TE,FPMODE
	JRST	MLTAC7

	MOVEI	LN,EBASEA
	PUSHJ	PP,CONVNL
	TSWF	FERROR;
	POPJ	PP,

	JUMPN	TD,MLTAC1	;IF LITERAL IS
	JUMPN	TC,MLTAC1	;  ZERO,
	SWON	FALWY0		;NO CODE GENERATED
	POPJ	PP,

MLTAC1:	HRRZ	TE,EMODEB
	CAIE	TE,LTMODE
	CAIN	TE,FCMODE
	JRST	MLTAC4

	MOVE	TE,EDPLB
	SUB	TE,EDPLA
	MOVEI	LN,EBASEA
	PUSHJ	PP,ADJSL.

	MOVE	TE,ESIZEB
MLTAC5:	CAILE	TE,^D10
	JRST	MLTAC2

	JUMPN	TD,MLTAC2

	MOVEI	TE,D1MODE
	MOVEM	TE,EMODEA

	MOVSI	CH,MOV##
	TSWF	FLNEG;
	MOVSI	CH,MOVN.
	JRST	PUT.LA
;MOVE LITERAL TO AC'S (CONT'D).

;LITERAL HAS A SIZE GREATER THAN 10 DIGITS

MLTAC2:	TSWF	FLNEG;
	PUSHJ	PP,NEGATL

MLTAC3:	SKIPN	TD
	JUMPE	TC,MXAC.3

	MOVE	TA,[XWD D2LIT,2]
	PUSHJ	PP,STASHL
	MOVE	TA,TD
	PUSHJ	PP,STASHL
	MOVE	TA,TC
	PUSHJ	PP,STASHL

	MOVEI	TE,2
	EXCH	TE,ELITPC
	ADDM	TE,ELITPC

	IORI	TE,AS.LIT
	MOVEM	TE,EINCRA
	HRRZI	TE,AS.MSC
	MOVEM	TE,EBASEA
	MOVEI	TE,D2MODE
	MOVEM	TE,EMODEA

	JRST	M2CAC.

MLTAC4:	MOVE	TE,ESIZEA
	JRST	MLTAC5


MLTAC7:	PUSHJ	PP,MSFP%L
MLTAC8:	MOVEI	TE,FPMODE
	MOVEM	TE,EMODEA
	MOVE	CH,[XWD MOV+ASINC,AS.MSC]
	PUSHJ	PP,PUT.XA
	MOVEI	CH,(TC)
	JRST	PUTASN
;MOVE NEGATIVE OF A LITERAL TO THE AC'S.

MNLTAC:	HRRZ	TE,EMODEB
	CAIN	TE,FPMODE
	JRST	MNLAC3

	MOVEI	LN,EBASEA
	PUSHJ	PP,CONVNL
	TSWF	FERROR;
	POPJ	PP,


	MOVE	TE,EDPLA
	SUB	TE,EDPLB
	MOVEI	LN,EBASEA
	PUSHJ	PP,ADJSL.

	JUMPN	TD,MNLAC2

	MOVEI	TE,D1MODE
	MOVEM	TE,EMODEA

	MOVSI	CH,MOVN.
	TSWF	FLNEG;
	MOVSI	CH,MOV
	JRST	PUT.LA

MNLAC2:	TSWTZ	FLNEG;
	PUSHJ	PP,NEGATL
	JRST	MLTAC3

MNLAC3:	PUSHJ	PP,CONVFP
	TSWF	FLNEG;
	TLO	TC,17B21
	PUSHJ	PP,MFP%L1
	JRST	MLTAC8
;MOVE AN ITEM TO TEMPORARY FOR USE BY "DISPLAY".
;ENTER WITH "TC" POINTING TO OPERAND.
;EXIT WITH "TA" CONTAINING ADDRESS OF RESULT IN RH, INCREMENT IN LH.
;	TB HAS RESIDUE IN BITS 0-5, SIZE IN BITS 6-17, "AS.CNB" IN RH.

MXTMP.:	SETZM	EAC
	SWOFF	FEOFF1		;TURN OFF MOST FLAGS
	PUSHJ	PP,SETOPA

	TLNE	TB,GNLIT	;LITERAL?
	JRST	MXTM25		;YES

	MOVE	TE,[XWD EBASEA,EBASEB];SET "B" = "A"
	BLT	TE,EBASBX
	MOVEI	TE,D7MODE
	MOVEM	TE,EMODEB


	TSWF	FANUM		;IS "A" NUMERIC?
	JRST	MXTMP4		;YES

	MOVE	TA,ETABLA	;IF
	PUSHJ	PP,LNKSET	;  ITEM
	LDB	TE,DA.EDT	;  IS
	JUMPE	TE,MXTMP1	;  EDITED,
	LDB	TE,DA.EXS	;  USE
	MOVEM	TE,ESIZEA	;  EXTERNAL
	MOVEM	TE,ESIZEB	;  SIZE

MXTMP1:	MOVE	TE,ESIZEA
	MOVEM	TE,ELITLO
	HRRZ	TE,EMODEA	;IS IT ASCII?
	CAIE	TE,D7MODE
	JRST	MXTMP2		;NO

	MOVE	TA,EBASEA	;YES--EXIT
	HRL	TA,EINCRA
	MOVE	TB,ESIZEA
	ROT	TB,-^D10
	LSH	TB,-2
	HLR	TB,ERESA
	ROT	TB,-6
	HRRI	TB,AS.CNB
	POPJ	PP,
;MOVE ITEM TO TEMP FOR DISPLAY (CONT'D).

;INPUT FIELD IS NON-ASCII, NON-NUMERIC

MXTMP2:	MOVE	TE,ESIZEB	;GET SIZE OF "B" IN WORDS
	ADDI	TE,4
	IDIVI	TE,5

	PUSHJ	PP,GETEMP	;GET SOME %TEMP LOCATIONS

	MOVEM	EACC,EINCRB	;SET "B" INCREMENT

	MOVE	TA,[XWD ^D36,AS.MSC];SET "B" BASE AND RESIDUE
	MOVEM	TA,EBASEB
	HRL	TA,EACC		;SET UP RETURNED DATA
	MOVEM	TA,ELITHI

	PUSHJ	PP,MXX. 	;GENERATE MOVE
	SWOFF	FASUB		;NEW 'A' IS NOT SUBSCRIPTED

	MOVE	TA,ELITHI	;GET BASE AND INCREMENT
	HRLZ	TB,ELITLO	;GET SIZE
	TLO	TB,^D36B<^D18+5>
	HRRI	TB,AS.CNB

	POPJ	PP,
;MOVE SOMETHING TO TEMPORARY FOR DISPLAY  (CONT'D).

;ITEM IS NUMERIC, AND THEREFORE MUST BE EDITED.

MXTMP4:	SWON	FBSIGN!FBNUM	;"B" IS ALWAYS SIGNED AND NUMERIC
	SKIPL	EDPLA		;NEGATIVE DECIMAL PLACES?
	JRST	MXTMP5		;NO
	MOVM	TE,EDPLA	;YES--NEW "B" SIZE IS OLD SIZE - DEC. PL.
	ADD	TE,ESIZEA
	MOVEM	TE,ESIZEB
	SETZM	TE,EDPLB
	JRST	MXTMP9

MXTMP5:	MOVE	TE,ESIZEA	;NEGATIVE INTEGRAL PLACES?
	SUB	TE,EDPLA
	JUMPGE	TE,MXTMP9
	MOVE	TE,EDPLA	;YES--NEW SIZE IS NUMBER OF DECIMAL PLACES
	MOVEM	TE,ESIZEB

MXTMP9:	MOVEI	TE,D6MODE	;NO
	MOVEM	TE,EMODEB

	MOVE	TE,ESIZEB
	ADDI	TE,5
	IDIVI	TE,6
	PUSHJ	PP,GETEMP

	MOVEM	EACC,EINCRB
	MOVE	TE,[XWD ^D36,AS.MSC]
	MOVEM	TE,EBASEB

	MOVE	TE,[XWD EBASEB,ESAVEA]	;SAVE "B" PARAMETERS
	BLT	TE,ESAVAX
	PUSHJ	PP,MXX. 	;MOVE ITEM TO A TEMP
	MOVE	TE,[XWD ESAVEA,EBASEA]
	BLT	TE,EBASAX
	MOVE	TE,[XWD ESAVEA,EBASEB]
	BLT	TE,EBASBX
	SWOFF	FASUB		;NEW 'A' IN TEMP IS NOT SUBSCRIPTED
;MOVE SOMETHING TO TEMP FOR DISPLAY  (CONT'D).

;IT IS (OR HAS BEEN CONVERTED TO) DISPLAY USAGE.

MXTM10:	MOVSI	TA,OCTLIT
	PUSHJ	PP,STASHL
	HRRZM	TE,CURLIT
	SETZM	EBASEB
	MOVE	TE,[XWD 440000,AS.CNB]
	MOVEM	TE,EDITW1		;LEAVE LH OF MASK WORD FOR EDIT GENERATOR

	MOVEI	TA,0
	MOVE	TB,[POINT 4,TA]

	MOVE	TC,ESIZEB
	SUB	TC,EDPLB
	JUMPE	TC,MXT11B

	MOVEI	CH,CODES	;PRETEND THERE IS ONLY ONE INTEGER
	CAIE	TC,1		;IS THAT TRUE?
	AOSA	EBASEB		;NO--LEAVE ROOM FOR SIGN
	PUSHJ	PP,MXTM20	;YES--JAM "INSERT SIGN"

	MOVEI	CH,CODEM	;SET UP FOR "FLOAT SIGN"

MXTM11:	SOJLE	TC,MXT11A	;ONLY ONE LEFT?
	PUSHJ	PP,MXTM20	;NO--PUT OUT "-"
	MOVE	TE,TC
	IDIVI	TE,3
	JUMPN	TD,MXTM11
	MOVEI	CH,CODEC
	PUSHJ	PP,MXTM20
	MOVEI	CH,CODEM
	JRST	MXTM11

MXT11A:	MOVEI	CH,CODE9	;USE "9" FOR LAST INTEGRAL PLACE
	PUSHJ	PP,MXTM20
	JRST	MXTM12

MXT11B:	MOVEI	CH,CODES	;NO INTEGRAL PLACES--USE "INSERT SIGN"
	PUSHJ	PP,MXTM20

MXTM12:	SKIPN	TC,EDPLB
	JRST	MXTM13
	MOVEI	CH,CODEP
	PUSHJ	PP,MXTM20
	MOVEI	CH,CODE9
	PUSHJ	PP,MXTM20
	SOJG	TC,.-1
;MOVE SOMETHING TO TEMP FOR DISPLAY  (CONT'D).

;MASK HAS BEEN CREATED FOR NUMERIC ITEM--FINISH UP.

MXTM13:	MOVEI	CH,17
	IDPB	CH,TB
	PUSHJ	PP,BMASK3

	MOVE	TE,[XWD AS.CNB,^D36B23+1B24]
	ADD	TE,EBASEB
	MOVSM	TE,ELITLO

	MOVE	TE,EBASEB	;GET NEW SIZE
	ADDI	TE,4
	IDIVI	TE,5
	PUSHJ	PP,GETEMP

	MOVEM	EACC,EINCRB
	HRLI	EACC,AS.MSC

	PUSH	PP,EACC

	HRRI	EACC,^D36
	MOVSM	EACC,EBASEB
	MOVEI	TE,D7MODE
	MOVEM	TE,EMODEB
	MOVEI	TE,MDES.	;ASSUME IT IS SIGNED
	TSWT	FASIGN		;IS IT REALLY?
	MOVEI	TE,MDEU.	;NO--USE UNSIGNED ROUTINE
	PUSHJ	PP,(TE)

	POP	PP,TA
	MOVSS	TA
	MOVE	TB,ELITLO
	LDB	TE,[POINT 10,TB,17]
	MOVEM	TE,ESIZEA
	POPJ	PP,

MXTM20:	IDPB	CH,TB
	AOS	EBASEB
	TLNE	TB,770000
	POPJ	PP,
	PUSHJ	PP,STASHL
	MOVEI	TA,0
	MOVE	TB,[POINT 4,TA]
	POPJ	PP,
;MOVE SOMETHING TO TEMP FOR DISPLAY  (CONT'D).

;ITEM IS A LITERAL. IT HAD BETTER BE "TODAY".

MXTM25:	TLNE	TB,GNFIGC
	TLNN	TB,GNTODY
	JRST	MXTM27

	MOVE	TE,[XWD TODAYB,EBASEB]
	BLT	TE,EBASBX
	SWOFF	FBNUM!FBSIGN!FBSUB
	MOVEI	TE,3
	PUSHJ	PP,GETEMP
	HRRZM	EACC,EINCRB

	PUSH	PP,EACC
	PUSHJ	PP,MTD.
	POP	PP,TA

	MOVSS	TA
	HRRI	TA,AS.MSC
	MOVE	TB,[XWD 440014,AS.CNB]
	MOVEI	TE,^D12
	MOVEM	TE,ESIZEA
	POPJ	PP,

;TROUBLE WITH OPERAND. IT WAS A LITERAL.

MXTM27:	TTCALL	3,[ASCIZ /LITERAL OPERAND FOR "MXTMP."
/]
	JRST	KILL


;"B" PARAMETERS FOR "TODAY"

TODAYB:	XWD	^D36,AS.MSC
	Z
	DEC	12
	EXP	D7MODE
	Z
	Z
;GENERATE CODE TO MOVE FROM ASCII/SIXBIT TO ASCII/SIXBIT FOR UNEDITED FIELDS

MDD.:	TSWF	FBNUM		;IS RECEIVING FIELD NUMERIC?
	JRST	MNN.		;YES

	MOVE	TE,ESIZEB	;ARE OPERANDS THE SAME SIZE?
	CAMN	TE,ESIZEA
	JRST	MDD.3		;YES

	CAML	TE,ESIZEA	;NO--"A" < "B"?
	JRST	MDD.5		;YES

;SIZE OF "A" OPERAND IS GREATER THAN SIZE OF "B" OPERAND

	SKIPGE	EMODEB		;IS "B" RIGHT JUSTIFIED?
	JRST	MDD.1		;YES

	PUSHJ	PP,RTERA.	;NO--WRITE "RIGHT TRUNCATION" DIAG
	JRST	MDD.3

MDD.1:	PUSHJ	PP,LTERA.	;YES--WRITE "LEFT TRUNCATION" DIAG

	MOVE	TE,ESIZEA	;PUT DIFFERENCE IN SIZES INTO "TE"
	SUB	TE,ESIZEB
	PUSHJ	PP,M.IA		;RESET "A" TO DROP HIGH-ORDER BYTES

;SIZE OF THE TWO OPERANDS ARE EQUAL

MDD.3:	MOVE	TE,ESIZEB
	MOVEM	TE,ESIZEZ

	JRST	GMOVE.		;GENERATE CODE AND RETURN

;SIZE OF "A" OPERAND IS LESS THAN SIZE OF "B" OPERAND.

MDD.5:	SKIPGE	EMODEB		;IS ITEM RIGHT JUSTIFIED?
	JRST	MDD.7		;YES

	MOVE	TE,ESIZEA	;NO
	MOVEM	TE,ESIZEZ
	PUSHJ	PP,GMOVE.	;GENERATE CODE TO MOVE "A" TO FIRST PART OF "B"

	MOVE	TE,ESIZEB	;PUT DIFFERENCE IN SIZES INTO "ESIZEZ"
	SUB	TE,ESIZEA
	MOVEM	TE,ESIZEZ

	MOVE	TC,EMODEB	;GENERATE CODE TO MOVE SPACES TO THE REST OF "B"
	JRST	@MSX.(TC)	;	AND RETURN
;GENERATE CODE TO MOVE FROM ASCII/SIXBIT TO ASCII/SIXBIT FOR
;	UNEDITED FIELDS  (CONT'D).

;SIZE OF "A" IS LESS THAN SIZE OF "B", AND "B" IS JUSTIFIED RIGHT.

MDD.7:	MOVE	TE,ESIZEB	;DIFFERENCSIZES IS PUT INTO "ESIZEZ"
	SUB	TE,ESIZEA
	MOVEM	TE,ESIZEZ

	MOVE	TC,EMODEB	;GENERATE CODE TO MOVE SPACES TO FIRST PART OF "B"
	PUSHJ	PP,@MSX.(TC)

	MOVE	TE,ESIZEB	;RESET "B" TO START AFTER THE SPACES
	SUB	TE,ESIZEA
	PUSHJ	PP,M.IB

	MOVE	TE,ESIZEA	;GENERATE CODE FOR
	MOVEM	TE,ESIZEZ	;	THE REST OF THE MOVE
	JRST	GMOVE.		;	AND RETURN
;GENERATE CODE TO MOVE A NUMERIC DISPLAY TO A NUMERIC DISPLAY

MNN.:	PUSHJ	PP,MDAC.	;CONVERT TO BINARY
	JRST	MACD.		;CONVERT BACK TO DISPLAY
;GENERATE CODE TO MOVE A DISPLAY FIELD TO A COMP OR COMP-1 FIELD

MDC.:	HRRZ	TE,EMODEB	;IS "B" COMP-1?
	CAIN	TE,FPMODE
	JRST	MDC.1		;YES

	MOVE	TE,ESIZEB	;DO WE HAVE TO TRUNCATE HIGH PLACES?
	SUB	TE,EDPLB
	SUB	TE,ESIZEA
	ADD	TE,EDPLA
	JUMPGE	TE,MDC.1	;NO IF JUMP

	ADDM	TE,ESIZEA	;YES--RESET SIZE OF "A"
	MOVNS	TE		;RESET OTHER PARAMETERS OF "A"
	PUSHJ	PP,M.IA

	PUSHJ	PP,MSERA.	;PUT OUT WARNING DIAG

	MOVE	TE,ESIZEA	;ANYTHING LEFT IN "A"?
	JUMPLE	TE,MDC.2	;NO IF JUMP
MDC.1:	TSWT	FBSIGN;		;IS "B" SIGNED?
	SWOFF	FASIGN;		;NO--PRETEND "A" ISN'T

	PUSHJ	PP,MDAC.	;GENERATE CODE TO GET "A" INTO AC'S
	HRRZ	TE,EMODEB	;IS "B" A 2-WORD COMP?
	CAIN	TE,D2MODE
	JRST	MAC2C.		;YES--STASH AC'S INTO 2-WORD COMP AND RETURN
	CAIE	TE,D1MODE	;NO--A 1-WORD COMP?
	JRST	MACFP.		;NO--MUST BE COMP-1
	JRST	MAC1C.		;YES--STASH AC'S INTO 1-WORD COMP AND RETURN


;"A" WAS CUT TO ZERO SIZE

MDC.2:	PUSHJ	PP,GENM16	;GENERATE <SETZM EBASEB+EINCRB>
	AOS	EINCRB		;KICK UP INCREMENT
	HRRZ	TE,EMODEB	;IS "B" A 2-WORD COMP?
	CAIE	TE,D1MODE
	PUSHJ	PP,GENM16	;YES--GENERATE <SETZM EBASEB+EINCRB>
	JRST	NOSIZ.		;WRITE DIAG AND LEAVE
;GENERATE CODE TO MOVE TO AN EDITED FIELD.

MCED.:
MDED.:	PUSHJ	PP,SETED	;MOVE TO TEMP IF NECESSARY
MDED.1:	MOVE	TA,ETABLB
	PUSHJ	PP,LNKSET
	LDB	TA,DA.USG
	SUBI	TA,1
	MOVEM	TA,EMODEB

	PUSHJ	PP,BMASK
	TSWF	FASIGN;
	TSWT	FBSIGN;
	JRST	MDEU.


;IF BOTH ARE SIGNED, FALL INTO MDES.
;GENERATE CODE TO MOVE DISPLAY FIELD TO EDITED FIELD  (CONT'D).

;BOTH RECEIVING AND SENDING FIELDS ARE SIGNED

MDES.:	PUSH	PP,SW		;SAVE PRESENT SETTING OF SWITCHES
	MOVE	TE,[XWD EBASEA,ESAVMA]	;SAVE "A" PARAMETERS
	BLT	TE,ESVMAX
	MOVE	TE,ESIZEA	;KICK PARAMATERS UP TO SIGN
	SUBI	TE,1
	PUSHJ	PP,M.IA
	HRRZ	TE,EMODEA
	HRLZ	TE,BYTE.S(TE)
	MOVNS	TE
	ADDM	TE,ERESA

	TSWT	FASUB		;IS "A" SUBSCRIPTED?
	TSWF	FBSUB		;NO--IS "B"?
	JRST	MDES.2		;ONE OR THE OTHER IS SUBSCRIPTED

	MOVE	TA,[XWD BYTLIT,6]
	PUSHJ	PP,STASHL

	MOVEI	EACC,3
	PUSHJ	PP,MDEU10
	PUSHJ	PP,MBYTEA

MDES.1:	MOVE	TE,[XWD ESAVMA,EBASEA]	;RESTORE ORIGINAL "A"
	BLT	TE,EBASAX
	MOVSI	CH,EDIT.S+ASINC
	POP	PP,SW		;RESTORE ORIGINAL SWITCHES
	JRST	MDEU.2

MDES.2:	HRRZI	EACC,3
	PUSHJ	PP,MDEU11
	MOVEI	EACD,1(EACC)

	PUSHJ	PP,SUBSCA
	TSWF	FASUB;
	JRST	MDES.3
	PUSHJ	PP,BYTE.A
	PUSHJ	PP,MDEU.9
	JRST	MDES.1

MDES.3:	MOVE	CH,MOVSAC
	PUSHJ	PP,PUTASY
	HRRZ	CH,EDITW3
	PUSHJ	PP,PUTASN
	MOVSI	CH,AS.BYT
	PUSHJ	PP,PUTAS1
	MOVEI	CH,0
	PUSHJ	PP,PUTAS1
	JRST	MDES.1
;GENERATE CODE TO MOVE A DISPLAY FIELD TO AN UNSIGNED EDITED FIELD

MDEU.:	TSWT	FASUB;
	TSWF	FBSUB;
	JRST	MDEU.0

	MOVE	TA,[XWD	BYTLIT,4]
	PUSHJ	PP,STASHL

	MOVEI	EACC,2
	PUSHJ	PP,MDEU10
	JRST	MDEU.1

MDEU.0:	MOVEI	EACC,2
	PUSHJ	PP,MDEU11
	MOVEI	EACD,(EACC)

MDEU.1:	MOVSI	CH,EDIT.U+ASINC

MDEU.2:	PUSHJ	PP,SETUUO	;SET UUOBIT FLAG
	HLLM	CH,EDITW3

	HRRZ	EACC,EDITW3
	ANDI	EACC,700000	;ARE PARAMETERS IN IMPPAR?
	CAIN	EACC,AS.PAR
	JRST	MDEU.4		;YES

	PUSHJ	PP,MBYTEA	;PUT POINTER TO "A" IN LITAB

	HRRZ	TA,EBASEB
	PUSHJ	PP,STASHL
	PUSHJ	PP,MDEU12
	MOVE	TA,SUBCON
	ROT	TA,-14
	HLR	TA,ERESB
	ROT	TA,-6
	HRR	TA,EINCRB
	PUSHJ	PP,STASHL

MDEU.3:	MOVE	CH,EDITW3	;PUT OUT UUO CALL
	HRRI	CH,AS.MSC
	PUSHJ	PP,PUTASY
	HRRZ	CH,EDITW3
	PUSHJ	PP,PUTASN

	MOVE	CH,[XWD AS.XWD,1]	;PUT OUT THE XWD FOLLOWING THE UUO
	PUSHJ	PP,PUTASY

	MOVE	CH,EDITW1
	PUSHJ	PP,PUTASN
	MOVE	CH,EDITW2
	JRST	PUTASN
;GENERATE CODE TO MOVE DISPLAY TO EDITED (CONT'D).

;EITHER "A" OR "B" IS SUBSCRIPTED -- IMPPAR BEING USED

MDEU.4:	PUSHJ	PP,SUBSCA
	TSWF	FASUB;
	JRST	MDEU.5

	PUSHJ	PP,BYTE.A
	PUSHJ	PP,MDEU.9
	JRST	MDEU.6

MDEU.5:	PUSHJ	PP,MDEU.8

MDEU.6:	ADDI	EACD,1
	PUSHJ	PP,MDEU12
	PUSHJ	PP,SUBSCE
	TSWF	FBSUB;
	JRST	MDEU.7

	HRRZ	CH,EBASEB
	HRLI	CH,AS.BYT
	PUSHJ	PP,PUTAS1
	MOVE	CH,SUBCON
	ANDI	CH,7777
	ROT	CH,-14
	HLR	CH,ERESB
	ROT	CH,-6
	HRR	CH,EINCRB
	PUSHJ	PP,PUTAS1
	JRST	MDEU.3

MDEU.7:	PUSHJ	PP,MDEU.8
	JRST	MDEU.3

MDEU.8:	MOVE	CH,MOVSAC
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACD
	PUSHJ	PP,PUTASN
	MOVE	CH,[XWD AS.OCT,1]
	PUSHJ	PP,PUTAS1
	MOVEI	CH,0
	JRST	PUTAS1

MDEU.9:	HRRZ	CH,TB
	HRLI	CH,AS.BYT
	PUSHJ	PP,PUTAS1
	MOVS	CH,TB
	HLL	CH,TA
	JRST	PUTAS1
MDEU10:	EXCH	EACC,ELITPC
	ADDM	EACC,ELITPC
	IORI	EACC,AS.LIT
	MOVEM	EACC,EDITW3
	POPJ	PP,

MDEU11:	EXCH	EACC,EAS1PC
	ADDM	EACC,EAS1PC
	IORI	EACC,AS.PAR
	MOVEM	EACC,EDITW3
	POPJ	PP,

MDEU12:	HRRZ	TE,EMODEB
	MOVEI	TB,600
	CAIN	TE,D7MODE
	MOVEI	TB,700

	MOVE	TA,ETABLB
	LDB	TE,LNKCOD
	CAIE	TE,TB.DAT
	JRST	MDEU13

	PUSHJ	PP,LNKSET
	LDB	TE,DA.BWZ
	SKIPE	TE
	IORI	TB,40

MDEU13:	MOVEM	TB,SUBCON
	POPJ	PP,
;MOVE A 1-WORD COMP OR INDEX TO A 1-WORD COMP OR INDEX

M1C1C.:	PUSHJ	PP,M1CAC.	;GENERATE CODE TO MOVE FROM "A" TO AC'S
	JRST	MAC1C.		;GENERATE CODE TO MOVE FROM AC'S TO "B", AND RETURN



;MOVE A 1-WORD COMP OR INDEX TO A 2-WORD COMP

M1C2C.:	TSWT	FBSIGN		;IS "B" SIGNED?
	SWOFF	FASIGN		;NO--PRETEND "A" ISN'T, EITHER
	PUSHJ	PP,M1CAC.	;GENERATE MOVE TO AC'S
M1C2CA:	PUSHJ	PP,CUTC1	;CUT DOWN SIZE, IF NECESSARY
	JFCL			;DON'T CARE IF CODE GENERATED
	PUSHJ	PP,ADJ1C.	;ADJUST DECIMAL PLACES
	HRRZ	TE,EMODEA.	;STILL ONE WORD?
	CAIN	TE,D1MODE
	PUSHJ	PP,CC1C2.	;YES--CONVERT TO TWO WORDS
	JRST	MAC2C.		;GENERATE MOVE FROM AC'S AND RETURN



;MOVE A 1-WORD COMP TO A DISPLAY FIELD

M1CD.:	TSWT	FBSIGN;		;IS "B" SIGNED?
	SWOFF	FASIGN;		;NO--PRETEND "A" ISN'T

	PUSHJ	PP,M1CAC.	;YES--GENERATE CODE TO MOVE TO AC'S
	JRST	MACD.		;GENERATE CODE TO CONVERT, AND RETURN



;MOVE A 1-WORD COMP TO COMP-1

M1CFP.:	PUSHJ	PP,MXFPA.
	JRST	MACFP.

;MOVE 2-WORD COMP TO A 1-WORD COMP OR INDEX.

M2C1C.:	TSWT	FBSIGN		;IS "B" SIGNED?
	SWOFF	FASIGN		;NO--PRETEND "A" ISN'T EITHER

	PUSHJ	PP,M2CAC.	;GENERATE MOVE TO AC'S

M2C1CC:	PUSHJ	PP,CUTC2	;CUT DOWN INTEGRAL PLACES
	JFCL			;DON'T CARE IF CODE GENERATED

	PUSHJ	PP,ADJDP.	;ADJUST DECIMAL PLACES
	MOVEI	TE,D1MODE
	EXCH	TE,EMODEA
	HRRZS	TE
	CAIE	TE,D1MODE
	AOS	EAC
	JRST	MAC1C2


;MOVE 2-WORD COMP TO A 2-WORD COMP.

M2C2C.:	TSWT	FBSIGN		;IS "B" SIGNED?
	SWOFF	FASIGN		;NO--PRETEND "A" ISN'T EITHER

	PUSHJ	PP,M2CAC.	;GENERATE MOVE TO AC'S
	JRST	MAC2C.		;GENERATE MOVE FROM AC'S AND RETURN

;MOVE A 2-WORD COMP TO A DISPLAY FIELD

M2CD.:	TSWT	FBSIGN;		;IS "B" SIGNED?
	SWOFF	FASIGN;		;NO--PRETEND "A" ISN'T
	PUSHJ	PP,M2CAC.	;GENERATE MOVE TO AC'S
	JRST	MACD.		;CONVERT AND RETURN


;MOVE A 2-WORD COMP TO COMP-1

M2CFP.:	PUSHJ	PP,MXFPA.
	JRST	MACFP.
;MOVE A FLOATING POINT FIELD TO A 1-WORD COMP

MFP1C.:	PUSHJ	PP,MFPAC.
MFP1CA:	PUSHJ	PP,CFPCX.
	MOVE	TC,ESIZEB	;GENERATE
	MOVSI	CH,DIV.21	;  <DIV.21 AC,SIZE-OF-B>
	MOVEI	TE,2
	EXCH	TE,EAC
	ADDM	TE,EAC
	DPB	TE,CHAC
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUT.PC
	JRST	MAC1C2


;MOVE A FLOATING POINT FIELD TO A 2-WORD COMP

MFP2C.:	PUSHJ	PP,MFPAC.
MFP2CA:	PUSHJ	PP,CFPCX.
	JRST	MAC2C1


;MOVE A FLOATING POINT FIELD TO A FLOATING POINT FIELD

MFPFP.:	PUSHJ	PP,MFPAC.
	JRST	MAC1C2


;MOVE A FLOATING POINT FIELD TO A DISPLAY FIELD

MFPD.:	PUSHJ	PP,MFPAC.
	JRST	MACFD.
;GENERATE CODE TO MOVE ZEROES TO SIXBIT FIELD

MZS.:	PUSHJ	PP,SZERO.	;CREATE ZERO LITERAL
	MOVE	EACD,ESZERO	;ADDRESS LITERAL PUT INTO EACD
	JRST	MZS.0


;GENERATE CODE TO MOVE QUOTES TO SIXBIT FIELD.

MQS.:	PUSHJ	PP,SQUOT.	;CREATE QUOTE LITERAL
	MOVE	EACD,ESQUOT	;ADDRESS OF LITERAL PUT INTO EACD


;FOR BOTH ZERO AND QUOTE

MZS.0:	SETZM	ECONLJ		;CLEAR "CONSTANT IN AC" INDICATOR
	PUSHJ	PP,GENM05	;GENERATE CODE TO PICK UP CONSTANT

	TSWF	FBSUB		;IS THE FIELD SUBSCRIPTED?
	JRST	MZS.7		;YES

	PUSH	PP,EINCRB
	HLRZ	TE,ERESB	;NO--START IN BIT 0?
	CAIE	TE,^D36
	JRST	MZS.5		;NO

	MOVE	TE,ESIZEZ	;YES

MZS.2:	IDIVI	TE,6		;"TE"_LUMBER OF WORDS, "TD"_REMAINDER
	MOVEM	TE,EWORDB
	MOVEM	TD,EREMAN

MZS.3:	JUMPLE	TE,MZS.4	;AT LEAST ONE FULL WORD LEFT?
	MOVE	CH,ECONLJ
	TLZ	CH,177037+ASINC	;CLEAR ALL BUT AC
	TLO	CH,MOVEM.
	PUSHJ	PP,PUT.B

	AOS	EINCRB		;INCREMENT THE INCREMENT
	SOS	TE,EWORDB	;DECREMENT WORD COUNT
	CAIG	TE,2		;AT LEAST 2 FULL WORDS LEFT?
	JRST	MZS.3		;NO--LOOP

	PUSHJ	PP,GENM01	;GENERATE <MOVE 4,[XWD EBASEB+EINCRB-1,EBASEB+EINCRB]
				;	BLT 4,EBASEB+EINCRB+EWORDB-1>
	MOVE	TE,EWORDB
	ADDM	TE,EINCRB
MZS.4:	SKIPN	TC,EREMAN	;ANYTHING LEFT?
	JRST	MLVD.9

	MOVEI	TB,^D36		;YES--GENERATE A BYTE POINTER TO REMAINING CHARACTERS
	IMULI	TC,6
MZS.4A:	PUSHJ	PP,GENM06
	PUSHJ	PP,GENM07	;GENERATE "DPB"
	JRST	MLVD.9		;RETURN
;GENERATE CODE TO MOVE ZEROES OR QUOTES TO SIXBIT FIELD  (CONT'D).



;FIELD DOES NOT START IN BIT 0.
MZS.5:	HLRZ	TB,ERESB
	MOVE	TC,ESIZEZ	;NUMBER OF BITS GOES INTO
	IMULI	TC,6		;	"TC"
	SUB	TE,TC		;DOES FIELD GO THRU WORD BOUNDARY?
	JUMPGE	TE,MZS.4A

MZS.6:	MOVE	TC,TB		;YES
	PUSHJ	PP,GENM06	;GENERATE BYTE POINTER
	PUSHJ	PP,GENM07	;GENERATE "DPB"

	AOS	EINCRB		;INCREMENT THE INCREMENT
	HLRZ	TE,ERESB	;DECREMENT THE SIZE
	IDIV	TE,BYTEN6
	ADD	TE,ESIZEZ
	JRST	MZS.2		;LOOP
;MOVE FIG. CONST. TO SUBSCRIPTED DISPLAY FIELD

MZS.7:	MOVEI	TE,600		;FOR SIXBIT FIELDS

MZS.8:	MOVEM	TE,SUBCON	;SET CONSTANT FOR "SUBSCR"
	MOVEI	DT,ESAVSB	;TELL "SUBSCR" WE ARE PLAYING WITH "B"
	HRRZ	TE,OPERND
	MOVEM	TE,CUREOP
	PUSHJ	PP,SUBSCR
	JRST	MZS.10		;LITERAL SUBSCRIPT

MZS.8A:	MOVE	TE,ESIZEZ	;AT LEAST 4 CHARACTERS?
	CAIG	TE,3
	JRST	MZS.9		;NO

	MOVSI	CH,MOVEI.+AC1	;YES--GENERATE <MOVEI 1,<SIZE>>
	HRR	CH,ESIZEZ
	PUSHJ	PP,PUTASY

	PUSHJ	PP,GETTAG	;GET A TAG
	MOVEM	CH,EWORDB
	PUSHJ	PP,PUTTAG	;WRITE IT OUT

MZS.9:	MOVE	CH,[XWD IDPB.+KAC,SXR]
	PUSHJ	PP,PUTASY

	SOSG	TE,ESIZEZ	;AT LEAST 1 CHARACTER LEFT?
	POPJ	PP,		;NO--RETURN

	CAIG	TE,2		;YES--MORE THAN 2?
	JRST	MZS.9		;NO--LOOP

	MOVSI	CH,SOJG.+AC1	;YES--GENERATE <SOJG 1,.-1>
	HRR	CH,EWORDB
	JRST	PUTASY

;SUBSCRIPT WAS LITERAL

MZS.10:	MOVE	TB,TE
	MOVE	TA,[XWD XWDLIT,2]
	PUSHJ	PP,STASHL
	MOVE	TA,TB
	HRRI	TA,AS.CNB
	PUSHJ	PP,STASHL
	MOVE	TA,EBASEB
	HRL	TA,TB
	PUSHJ	PP,STASHL
	MOVSI	CH,MOV+SAC
	PUSHJ	PP,PUT.LD
	AOS	ELITPC
	JRST	MZS.8A
;GENERATE CODE TO MOVE HIGH-VALUES TO ASCII OR SIXBIT FIELD

MHVD.:	MOVSI	TE,ORCAM.+AC4	;SET "WE'RE DOING HIGH-VALUE"
	TSWT	FBSUB		;IS FIELD SUBSCRIPTED?
	JRST	MLVD.0		;NO

	SKIPA	CH,[XWD HRRZI.+KAC,177]	;YES

MHVD.1:	MOVSI	CH,HRRZI.+KAC
	PUSHJ	PP,PUTASY
	HRRZ	TC,EMODEB
	MOVE	TE,BYTE.S(TC)
	LSH	TE,6
	JRST	MZS.8
;GENERATE CODE TO MOVE SPACES TO SIXBIT, OR
;	LOW-VALUES TO A SIXBIT OR ASCII FIELD.

MLVD.:	MOVSI	TE,ANDM.+AC4	;SET "WE'RE DOING LOW-VALUE"
	TSWF	FBSUB		;IS FIELD SUBSCRIPTED?
	JRST	MHVD.1		;YES

MLVD.0:	PUSH	PP,EINCRB
	MOVEM	TE,EMOVHL
	MOVE	TC,EMODEB	;SAVE MOVE IN "TC"
	HLRZ	TE,ERESB	;START IN BIT 0?
	CAIE	TE,^D36
	JRST	MLVD.5		;NO

	MOVE	TE,ESIZEZ	;YES

MLVD.1:	IDIV	TE,BYTE.W(TC)	;"TE"_NUMBER OF WORDS, "TD"_REMAINDER
	MOVEM	TE,EWORDB
	MOVEM	TD,EREMAN

MLVD.2:	JUMPLE	TE,MLVD.3	;AT LEAST ONE FULL WORD?
	MOVS	TD,EMOVHL	;YES--GENERATING HIGH-VALUES?
	CAIN	TD,ORCAM.+AC4
	JRST	.+3
	PUSHJ	PP,GENM16	;NO--GENERATE <SETZM EBASEB+EINCRB>
	SKIPA
	PUSHJ	PP,GENM17	;YES--GENERATE <SETOM EBASEB+EINCRB>

	AOS	EINCRB		;INCREMENT THE INCREMENT
	SOS	TE,EWORDB	;DECREMENT WORD COUNT
	CAIG	TE,2		;AT LEAST TWO FULL WORDS LEFT?
	JRST	MLVD.2		;NO--LOOP

	PUSHJ	PP,GENM01	;GENERATE <MOVE 4,[XWD EBASEB+EINCRB-1,EBASEB+EINCRB]
				;	   BLT  4,EBASEB+EINCRB+EWORDB-1>
	MOVE	TE,EWORDB
	ADDM	TE,EINCRB

MLVD.3:	SKIPN	TD,EREMAN	;ANYTHING LEFT?
	JRST	MLVD.9		;NO--RETURN

	MOVEI	TE,^D36		;YES--RESIDUE MUST BE 36
	IMUL	TD,BYTE.S(TC)	;GET NUMBER OF BITS TO RIGHT OF FIELD
	SUB	TE,TD
	PUSHJ	PP,BITSR.	;GENERATE MASK OF ONES IN RIGHT
	MOVE	TB,EMASK

MLVD.4:	MOVSI	TA,OCTLIT	;GENERATE <MOVE 4,[EMASK]>
	PUSHJ	PP,GENM09
	MOVE	CH,EMOVHL	;GENERATE THE INSTRUCTION
	PUSHJ	PP,PUT.B
	JRST	MLVD.9		;RETURN
;GENERATE CODE TO MOVE HIGH/LOW-VALUES TO ASCII/SIXBIT  (CONT'D).

;FIELD DOESN'T START IN BIT0.

MLVD.5:	PUSHJ	PP,BITSL.	;GENERATE MASK OF BITS TO LEFT OF FIELD
	MOVE	TD,ESIZEZ	;DOES FIELD GO UP TO/THRU RIGHT-HAND WORD BOUNDARY?
	IMUL	TD,BYTE.S(TC)
	HLRZ	TE,ERESB
	SUB	TE,TD
	CAIG	TE,1
	JRST	MLVD.6		;YES

	PUSH	PP,EMASK	;SAVE THE MASK GENERATED SO FAR
	PUSHJ	PP,BITSR.	;GENERATE MASK OF BITS IN RIGHT
	POP	PP,TB		;CREATE THE
	IOR	TB,EMASK	;	TOTAL MASK
	JRST	MLVD.4		;GO BACK

MLVD.6:	MOVE	TB,EMASK	;GENERATE <MOVE 4,[EMASK]>
	MOVSI	TA,10
	PUSHJ	PP,GENM09
	MOVE	CH,EMOVHL	;GENERATE "ANDM" OR "ORCAM"
	PUSHJ	PP,PUT.B

	HLRZ	TE,ERESB	;GET NEW SIZE INTO "TE"
	IDIV	TE,BYTE.S+2(TC)
	ADD	TE,ESIZEZ
	AOS	EINCRB		;INCREMENT THE INCREMENT
	JUMPG	TE,MLVD.1	;ANYTHING LEFT? IF SO, GO BACK

MLVD.9:	POP	PP,EINCRB	;RESTORE ORIGINAL INCREMENT
	POPJ	PP,		;NO--RETURN
;GENERATE CODING TO MOVE ZEROES TO 1-WORD COMP, FLOATING POINT, OR INDEX

MZC1.:	PUSHJ	PP,SUBSCB	;DO ANY SUBSCRIPTING
	JRST	GENM16		;GENERATE <SETZM B> AND LEAVE

;GENERATE CODING TO MOVE ZEROES TO 2-WORD COMP.

MZC2.:	PUSHJ	PP,SUBSCB	;DO ANY SUBSCRIPTING
	PUSHJ	PP,GENM16	;GENERATE <SETZM B>
	AOS	EINCRB
	JRST	GENM16		;GENERATE <SETZM B+1> AND RETURN

;GENERATE CODE TO MOVE HIGH-VALUES TO 1-WORD COMP, INDEX OR FLOATING-POINT.

MHVC1.:	PUSHJ	PP,SUBSCB	;DO ANY SUBSCRIPTING
	PUSHJ	PP,GENM19	;GENERATE <HRLOI 4,377777>
	JRST	GENM08		;GENERATE <MOVEM 4,B> AND RETURN

;GENERATE CODING TO MOVE HIGH-VALUES TO 2-WORD COMP.

MHVC2.:	PUSHJ	PP,MHVC1.	;GENERATE <HRLOI 4,377777
				;	   MOVEM 4,B>
	AOS	EINCRB
	JRST	GENM08		;GENERATE <MOVEM 4,B+1> AND RETURN

;GENERATE CODE TO MOVE LOW-VALUES TO 1-WORD COMP

MLVC1.:	PUSHJ	PP,SUBSCB	;DO ANY SUBSCRIPTING
	MOVSI	TB,1B18		;GENERATE <HRLZI 4,400000>
	PUSHJ	PP,GENM10
	JRST	GENM08		;GENERATE <MOVEM 4,B>

;GENERATE CODE TO MOVE LOW-VALUES TO 2-WORD COMP.

MLVC2.:	PUSHJ	PP,MLVC1.	;MOVE LOW-VALUES TO HI-ORDER WORD
	AOS	EINCRB
	JRST	GENM08		;MOVE LOW-VALUES TO LOW-ORDER WORD, AND RETURN

;GENERATE CODE TO MOVE LOW-VALUES TO A FLOATING POINT FIELD

MLVFP.:	PUSHJ	PP,SUBSCB	;DO ANY SUBSCRIPTING
	PUSHJ	PP,FPLOV.
	MOVE	CH,[XWD MOV+ASINC,AS.MSC]
	PUSHJ	PP,PUT.XA
	HRRZ	CH,EFPLOV
	PUSHJ	PP,PUTASN
	MOVSI	CH,MOVEM.
	JRST	PUT.BA
;GENERATE CODE TO MOVE QUOTES TO ASCII FIELD

MQA.:	TSWF	FBSUB		;IS IT SUBSCRIPTED?
	JRST	MQA.1		;YES

	PUSHJ	PP,AQRJ.	;CREATE THE QUOTE LITERAL
	MOVE	EACD,EAQRJ	;EACD_ADDRESS OF LITERAL
	JRST	MSZA.

MQA.1:	MOVE	CH,[XWD HRRZI.+KAC,42]

MQA.2:	PUSHJ	PP,PUTASY
	MOVEI	TE,700
	JRST	MZS.8

;GENERATE CODE TO MOVE ZEROES TO AN ASCII FIELD

MZA.:	TSWF	FBSUB		;IS IT SUBSCRIPTED?
	JRST	MZA.1		;YES

	PUSHJ	PP,AZRJ.	;CREATE THE ZERO LITERAL
	MOVE	EACD,EAZRJ	;EACD_ADDRESS OF LITERAL
	JRST	MSZA.

MZA.1:	MOVE	CH,[XWD HRRZI.+KAC,"0"]
	JRST	MQA.2

;GENERATE CODE TO MOVE SPACES TO AN ASCII FIELD

MSA.:	TSWF	FBSUB;
	JRST	MSA.1

	PUSHJ	PP,ASRJ.	;CREATE THE SPACE LITERAL
	MOVE	EACD,EASRJ	;EACD_ADDRESS OF LITERAL
	JRST	MSZA.

MSA.1:	MOVE	CH,[XWD HRRZI.+KAC," "]
	JRST	MQA.2
;GENERATE CODE TO MOVE SOME FIG. CONST. TO ASCII FIELD

MSZA.:	PUSH	PP,EINCRB
	SETZM	ECONRJ
	SETZM	ECONLJ
	HLRZ	TE,ERESB	;START IN BIT 0?
	CAIE	TE,^D36
	JRST	MSZA.4		;NO

	MOVE	TE,ESIZEZ	;YES

MSZA.1:	IDIVI	TE,5		;"TE"_NUMBER OF WORDS, "TD"_REMAINDER
	MOVEM	TE,EWORDB
	MOVEM	TD,EREMAN

	JUMPE	TE,MSZA.3	;AT LEAST ONE FULL WORD?
	PUSHJ	PP,GENM05	;YES--GENERATE CODE TO PICK UP CONSTANT

MSZA.2:	MOVSI	CH,MOVEM.+AC2
	PUSHJ	PP,PUT.B

	AOS	EINCRB		;INCREMENT THE INCREMENT
	SOS	TE,EWORDB	;DECREMENT NUMBER OF WORDS
	CAIG	TE,2		;AT LEAST 2 FULL WORDS LEFT
	JRST	MSZA.6		;NO

	PUSHJ	PP,GENM01	;YES--GENERATE <MOVE 4,[XWD B,B+1]
				;		BLT 4,B+EWORDB>
	MOVE	TE,EWORDB
	ADDM	TE,EINCRB

MSZA.3:	SKIPN	EREMAN		;ANYTHING LEFT?
	JRST	MLVD.9

	PUSHJ	PP,GENM04	;YES--GENERATE CODE TO PICK UP CONSTANT
	MOVE	TC,EREMAN	;GENERATE A BYTE POINTER
	IMULI	TC,7
	MOVEI	TB,^D36
	PUSHJ	PP,GENM06
	PUSHJ	PP,GENM7A	;GENERATE THE "DPB"
	JRST	MLVD.9		;RETURN
;GENERATE CODE TO MOVE ZEROES, SPACES, OR QUOTES
;	TO AN ASCII FIELD  (CONT'D).

;"B" DOES NOT START AT BIT 0.

MSZA.4:	MOVE	TD,ESIZEZ	;DOES "B" GO UP TO OR THROUGH WORD BOUNDARY?
	IMULI	TD,7
	SUB	TE,TD
	CAILE	TE,1
	JRST	MSZA.5		;NO

	MOVEM	TE,EWORDB
	PUSHJ	PP,GENM05	;GENERATE CODE TO PICK UP CONSTANT
	HLRZ	TB,ERESB	;GENERATE BYTE POINTER
	MOVE	TC,TB
	PUSHJ	PP,GENM06

	AOS	EINCRB		;INCREMENT THE INCREMENT

	PUSHJ	PP,GENM07	;GENERATE "DPB"

	SKIPL	TE,EWORDB	;ANYTHING AFTER THIS?
	JRST	MLVD.9		;NO--RETURN

	HLRZ	TE,ERESB	;YES--UPDATE SIZE
	IDIV	TE,BYTEN7
	ADD	TE,ESIZEZ
	JRST	MSZA.1		;LOOP BACK


;FIELD IS WORD CONTAINED

MSZA.5:	PUSHJ	PP,GENM04	;GENERATE CODE TO PICK UP CONSTANT
	MOVE	TC,ESIZEZ	;GENERATE BYTE POINTER
	IMULI	TC,7
	HLRZ	TB,ERESB
	PUSHJ	PP,GENM06
	PUSHJ	PP,GENM7A	;GENERATE THE "DPB"
	JRST	MLVD.9		;RETURN

MSZA.6:	SKIPN	TE,EWORDB	;ANY FULL WORDS LEFT?
	JRST	MSZA.3		;NO
	JRST	MSZA.2		;YES
;MOVE ZEROES TO AN EDITED FIELD

MZED.:	PUSHJ	PP,MCHED.
	MOVEI	TE,MZS.

MZED.1:	PUSH	PP,SW
	SWOFF	FBSUB;
	PUSHJ	PP,(TE)
	POP	PP,SW

MFCED.:	MOVE	TE,[XWD ESAVMA,EBASEA]
	BLT	TE,EBASBX
	SWOFF	FASIGN!FASUB;
	JRST	MDED.1

;MOVE SPACES TO AN EDITED FIELD

MSED.:	PUSHJ	PP,MCHED.
	MOVEI	TE,MLVD.
	JRST	MZED.1

;MOVE QUOTES TO AN EDITED FIELD

MQED.:	PUSHJ	PP,MCHED.
	MOVEI	TE,MQS.
	JRST	MZED.1
;MOVE LOW-VALUES TO AN EDITED FIELD

MLVED.:	MOVE	TA,ETABLB
	PUSHJ	PP,LNKSET
	LDB	TE,DA.USG
	CAIE	TE,D6MODE+1
	JRST	MLVED2

;MOVE HIGH-VALUES TO AN EDITED FIELD

MHVED.:	PUSHJ	PP,MCHED.

MLVED1:	MOVEI	TE,MHVD.
	JRST	MZED.1

MLVED2:	MOVE	TE,[XWD EBASEB,ESAVMB]
	BLT	TE,ESVMBX
	MOVEI	TE,D7MODE
	MOVEM	TE,EMODEB
	MOVE	TE,[XWD ^D36,AS.MSC]
	MOVEM	TE,EBASEB

	MOVE	TE,ESIZEB
	ADDI	TE,4
	IDIVI	TE,5
	PUSHJ	PP,MCHED1

	JRST	MLVED1
;CHANGE "B" PARAMETERS FROM EDITED TO DISPLAY, IN %TEMP.

MCHED.:	MOVE	TE,[XWD EBASEB,ESAVMB]
	BLT	TE,ESVMBX

	MOVEI	TE,D6MODE
	MOVEM	TE,EMODEB
	MOVE	TE,[XWD ^D36,AS.MSC]
	MOVEM	TE,EBASEB

	MOVE	TE,ESIZEB
	ADDI	TE,5
	IDIVI	TE,6

MCHED1:	PUSHJ	PP,GETEMP
	HRRM	EACC,EINCRB

	MOVE	TE,[XWD EBASEB,ESAVMA]
	BLT	TE,ESVMAX

	POPJ	PP,
;MOVE "TODAY" TO AN EDITED FIELD

MTED.:	MOVEI	TB,MDED.
	JRST	MTD.0

;MOVE "TODAY TO A DISPLAY FIELD

MTD.:	MOVEI	TB,MDD.
MTD.0:	MOVE	CH,[XWD EPJPP,TODAY.##]
	PUSHJ	PP,PUTASY

	MOVSI	TA,^D36
	MOVEM	TA,EBASEA
	SETZM	EINCRA

MTD.1:	TSWT	FAS3		;ARE WE IN NON-RESIDENT SEGMENT?
	JRST	MTD.2		;NO

	MOVEI	TA,TODAY.	;YES--SET EXTAB FLAG FOR "TODAY."
	ANDI	TA,77777
	ADD	TA,EXTLOC
	MOVSI	TE,1B18
	IORM	TE,1(TA)

MTD.2:	SETZM	EDPLA
	MOVEI	TA,^D12
	MOVEM	TA,ESIZEA
	MOVEI	TA,D6MODE
	MOVEM	TA,EMODEA
	SWON	FANUM;
	SWOFF	FASUB!FASIGN;

	JRST	(TB)

;MOVE "TODAY" TO A NON-DISPLAY FIELD

MTC.:	MOVEI	TB,MDC.
	JRST	MTD.0
;GENERATE CODE TO MOVE A LITERAL TO A DISPLAY FIELD

MLD.:	MOVEI	TE,MDD.
	PUSH	PP,TE

MLD.A:	TSWT	FANUM		;IS LITERAL NUMERIC?
	TSWF	FBNUM		;NO--IS RECEIVING FIELD NUMERIC?
	JRST	MLD.1		;YES

	HLRZ	TA,OPERND	;IS "ALL" SPECIFIED?
	MOVE	TD,0(TA)
	TLNE	TD,GNALL
	JRST	MLD.2		;YES

MLD.0:	PUSHJ	PP,LITD.	;NO--PUT LITERAL IN LITAB
	POPJ	PP,		;THIS WILL TAKE US TO "MDD." OR "MDED."


MLD.1:	PUSHJ	PP,LITN.	;GET A NUMERIC LITERAL
	TSWF	FERROR		;ANY ERRORS?
	POP	PP,TE		;YES--DON'T GENERATE CODE
	POPJ	PP,


;MOVE "ALL" LITERAL

MLD.2:	MOVE	TE,ESIZEA	;IS LITERAL SMALLER THAN "B"?
	CAML	TE,ESIZEB
	JRST	MLD.0		;NO--GO NORMAL ROUTE

	POP	PP,TE	;GET RID OF RETURN PUT ON AT MLD.

	MOVE	TE,[XWD EBASEB,ESAVEB]	;SAVE "B" PARAMETERS
	BLT	TE,ESAVBX

	SKIPGE	EMODEB		;IS "B" JUSTIFIED RIGHT?
	JRST	MLD.4		;YES

	MOVE	TE,ESIZEA	;RESET SIZE OF "B" TO MATCH LITERAL
	MOVEM	TE,ESIZEB
	PUSHJ	PP,LITD.	;CREATE LITERAL
	PUSHJ	PP,MDD.3	;CREATE MOVE FOR FIRST PART

	MOVE	TE,[XWD ESAVEB,EBASEA]
	BLT	TE,EBASAX
	MOVN	TB,ESIZEB
	ADDM	TB,ESIZEA
	MOVE	TE,[XWD EBASEA,EBASEB]
	BLT	TE,EBASBX

	JRST	MLD.6
;GENERATE CODE TO MOVE "ALL LITERAL"  (CONT'D).

;"B" IS JUSTIFIED RIGHT

MLD.4:	MOVE	TE,ESIZEB
	IDIV	TE,ESIZEA
	PUSH	PP,TD
	ADD	TD,ESIZEA
	MOVEM	TD,ESIZEB

	PUSHJ	PP,LITD.
	PUSHJ	PP,MDD.3

	MOVE	TE,[XWD ESAVEB,EBASEA]
	BLT	TE,EBASAX

	MOVN	TB,ESIZEB
	ADDM	TB,ESIZEA
	MOVE	TE,[XWD EBASEA,EBASEB]
	BLT	TE,EBASBX

	POP	PP,TE
	PUSHJ	PP,M.IA

MLD.6:	TSWF	FBSUB		;IF 'B' SUBSCRIPTED,
	SWON	FASUB		;  SO IS NEW 'A'
	HRLS	OPERND

	MOVM	TE,TB
	PUSHJ	PP,M.IB

	MOVE	TE,ESIZEB
	MOVEM	TE,ESIZEZ
	JRST	GMOVE7


;MOVE LITERAL TO EDITED FIELD

MLED.:	MOVE	TA,ETABLB	;RESET MODE
	PUSHJ	PP,LNKSET
	LDB	TA,DA.USG
	SUBI	TA,1
	HRRM	TA,EMODEB

	MOVEI	TE,MDED.
	PUSH	PP,TE
	JRST	MLD.A
;GENERATE CODE TO MOVE A LITERAL TO A 1-WORD COMP

ML1C.:	PUSHJ	PP,MLAC1.
	JUMPN	TC,MAC1C.
	JRST	MZC1.

MLAC1.:	MOVEI	LN,EBASEA
	PUSHJ	PP,CONVNL
	TSWF	FERROR;
	POPJ	PP,
	PUSHJ	PP,ADJLIT
	TSWF	FERROR		;ANY ERRORS SO FAR?
	POPJ	PP,		;YES--QUIT

	SKIPG	ESIZEA		;ANYTHING LEFT IN LITERAL?
	JRST	MLAC1A		;NO

	JUMPE	TC,CPOPJ	;YES--IS VALUE ZERO?

	TSWF	FBSIGN		;IS "B" SIGNED?
	TSWT	FLNEG		;YES--IS LITERAL NEGATIVE?
	SKIPA	TB,TC		;NO
	MOVN	TB,TC		;YES--NEGATE THE LITERAL

	MOVSI	TA,D1LIT
	JRST	GENM39		;GENERATE CODE TO GET LITERAL INTO AC AND RETURN

MLAC1A:	PUSHJ	PP,NOSIZ.
	MOVEI	TC,0
	POPJ	PP,


;GENERATE CODE TO MOVE A LITERAL TO A 2-WORD COMP

ML2C.:	PUSHJ	PP,MLAC2.
	MOVE	TE,ESIZEB
	MOVEM	TE,ESIZEA
	MOVE	TE,EDPLB
	MOVEM	TE,EDPLA
	JUMPN	TD,MAC2C.
	JUMPE	TC,MZC2.
	PUSHJ	PP,GENM16
	JRST	MAC2C4

;GENERATE CODE TO MOVE A LITERAL TO COMP-1

MLFP.:	PUSHJ	PP,MLTAC7
	JRST	MAC1C2
;GENERATE CODE TO MOVE A LITERAL TO 2-WORD AC'S.

MLAC2.:	MOVEI	LN,EBASEA	;GET LITERAL INTO TD&TC
	PUSHJ	PP,CONVNL
	TSWF	FERROR		;ANY ERRORS?
	POPJ	PP,		;YES--QUIT
	PUSHJ	PP,ADJLIT	;NO--ADJUST LITERAL TO MATCH "B"
	TSWF	FERROR		;ANY ERRORS SO FAR?
	POPJ	PP,		;YES--QUIT

	SKIPG	ESIZEA		;ANY SIZE LEFT?
	JRST	ML2C.3

	TSWF	FBSIGN		;IS "B" SIGNED?
	TSWT	FLNEG		;YES--IS LITERAL NEGATIVE?
	SKIPA			;NO
	PUSHJ	PP,NEGATL	;YES--NEGATE THE LITERAL


ML2C.1:	JUMPN	TD,ML2C.4	;IS LITERAL ZERO?
	JUMPE	TC,CPOPJ	;YES IF JUMP
	MOVEM	TC,ELITLO	;NO--BUT LEFT HALF IS ZERO
	MOVEM	TD,ELITHI
	MOVE	TB,TC		;GENERATE <MOVE AC+1,[LOW ORDER PART]>
	PUSHJ	PP,GENM38
	MOVE	TC,ELITLO
	MOVE	TD,ELITHI
	POPJ	PP,

ML2C.3:	PUSHJ	PP,NOSIZ.	;LITERAL ENDED UP WITH NO SIZE
	SETZB	TC,TD
	POPJ	PP,

ML2C.4:	MOVE	TA,[XWD D2LIT,2]	;STASH AWAY A 2-WORD LITERAL
	PUSHJ	PP,STASHL
	MOVE	TA,TD
	PUSHJ	PP,STASHL
	MOVE	TA,TC
	PUSHJ	PP,STASHL

	MOVEI	TE,2		;SET "A" TO POINT TO THE LITERAL
	EXCH	TE,ELITPC
	ADDM	TE,ELITPC
	IORI	TE,AS.LIT
	MOVEM	TE,EINCRA
	MOVEI	TE,AS.MSC
	HRRM	TE,EBASEA
	JRST	M2CAC2
;GENERATE CODE TO MOVE A 1-WORD COMPUTATIONAL, COMP-1 OR INDEX ITEM TO
;ACCUMULATOR SPECIFIED IN "EAC", PLUS 1.

MFPAC.:
M1CAC.:	PUSHJ	PP,SUBSCA	;DO ANY SUBSCRIPTING
	MOVSI	CH,MOV		;ASSUME "A" IS SIGNED
	TSWT	FASIGN;		;IS "A" SIGNED?
	MOVSI	CH,MOVM.	;NO--USE "MOVM"
	JRST	PUT.AA		;GENERATE CODE AND RETURN


;GENERATE CODE TO MOVE A 2-WORD COMPUTATIONAL ITEM TO
;ACCUMULATORS SPECIFIED IN "EAC"

M2CAC.:	PUSHJ	PP,SUBSCA	;DO ANY SUBSCRIPTING
	TSWT	FASIGN;		;IS "A" SIGNED?
	JRST	M2CAC1		;NO

M2CAC2:	MOVSI	CH,MOV		;YES--GENERATE <MOVE AC,EBASEA>
	PUSHJ	PP,PUT.AA
	MOVSI	CH,MOV		;GENERATE <MOVE AC+1,EBASEA+1> AND RETURN
	MOVE	TE,EAC
	ADDI	TE,1
	DPB	TE,CHAC
	AOS	EINCRA
	JRST	PUT.A

M2CAC1:	MOVSI	CH,MAG.		;"A" UNSIGNED--GENERATE <MAG. AC,EBASEA> AND RETURN
	PUSHJ	PP,SETUUO
	JRST	PUT.AA
;MOVE A FIELD TO AC'S AND CONVERT TO FLOATING POINT

MXFPA.:	HRRZ	TE,EMODEA
	CAIN	TE,FPMODE
	JRST	MFPAC.

	CAILE	TE,DSMODE
	TSWT	FASIGN;
	JRST	MXFPA4

	PUSHJ	PP,SUBSCA

MXFPA2:	HRRZ	TE,EMODEA

	MOVEI	TD,FPMODE
	MOVEM	TD,EMODEA
	SWON	FASIGN!FANUM;

	MOVSI	CH,FLOT.1
	CAIN	TE,D2MODE
	MOVSI	CH,FLOT.2
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUT.AA
	SWOFF	FASUB;
	MOVN	TD,EDPLA
	JRST	GENFPL

MXFPA4:	PUSHJ	PP,MXAC.

	MOVE	TE,EAC
	MOVEM	TE,EBASEA
	SETZM	EINCRA

	JRST	MXFPA2
;GENERATE CODE TO MOVE A DISPLAY FIELD TO AC'S

;GENERATE PARAMETER

MDAC.:	MOVE	TE,ESIZEA
	MOVEM	TE,ESIZEZ
	PUSHJ	PP,B1PAR

;PUT OUT UUO CALL

MDAC.3:	MOVSI	CH,GD6.+ASINC	;ASSUME "A" IS SIXBIT
	HRRZ	TE,EMODEA	;IS "A" SIXBIT?
	CAIE	TE,D6MODE
	MOVSI	CH,GD7.+ASINC	;NO

	MOVE	TD,EAC
	MOVEI	TA,D1MODE
	MOVE	TE,ESIZEA	;IS SIZE OF "A" LESS THAN 11?
	CAILE	TE,^D10
	MOVEI	TA,D2MODE	;NO--IT IS TO BE 2-WORD COMP
	DPB	TD,CHAC		;SET AC-FIELD

MDAC.4:	MOVEM	TA,EMODEA
	PUSHJ	PP,SETUUO	;SET FLAG IN UUOBIT
	TSWF	FASUB;
	JRST	MDAC.6

MDAC.5:	HRRI	CH,AS.MSC
	PUSHJ	PP,PUTASY	;WRITE OUT FIRST OF TWO WORD
	HRRZ	CH,EACC
	JRST	PUTASN		;WRITE OUT INCREMENT AND RETURN

MDAC.6:	TLZ	CH,ASINC
	HRRI	CH,SXR
	JRST	PUTASY
;GENERATE CODE TO MOVE AC'S TO A 1-WORD COMP OR INDEX.

MAC1C.:	PUSHJ	PP,CUTC1	;CUT DOWN INTEGER PLACES IF NECESSARY
	JFCL			;DON'T CARE IF IT DID

MAC1C1:	PUSHJ	PP,ADJ1C.	;ADJUST DECIMAL PLACES TO MATCH

MAC1C2:	PUSHJ	PP,SUBSCB	;DO ANY SUBSCRIPTING
	MOVSI	CH,MOVEM.	;ASSUME "B" IS SIGNED.
	TSWT	FBSIGN;		;IS "B" SIGNED?
	MOVSI	CH,MOVMM.	;NO--USE "MOVMM"
	JRST	PUT.BA		;GENERATE INSTRUCTION AND RETURN



;GENERATE CODE TO MOVE AC'S TO A 2-WORD COMP.

MAC2C.:	PUSHJ	PP,CUTC2	;CUT DOWN INTEGER PLACES, IF NECESSARY
	JFCL			;DON'T CARE IF IT DID.
	PUSHJ	PP,ADJ2C.	;ADJUST DECIMAL PLACES
	HRRZ	TE,EMODEA	;IS "A" NOW
	CAIN	TE,D1MODE	;  ONE WORD?
	PUSHJ	PP,CC1C2.	;YES--CONVERT TO TWO WORDS

MAC2C1:	PUSHJ	PP,SUBSCB	;DO ANY SUBSCRIPTING
	TSWT	FBSIGN;		;IS "B" SIGNED?
	JRST	MAC2C3

MAC2C2:	MOVSI	CH,MOVEM.	;YES--GENERATE <MOVEM AC,EBASEB>
	PUSHJ	PP,PUT.BA
MAC2C4:	MOVSI	CH,MOVEM.	;GENERATE <MOVEM AC+1,EBASEB+1> AND RETURN
	MOVE	TE,EAC
	ADDI	TE,1
	DPB	TE,CHAC
	AOS	EINCRB
	JRST	PUT.B

MAC2C3:	TSWT	FASIGN		;IS "A" SIGNED?
	JRST	MAC2C2		;NO
	MOVSI	CH,MAG.		;YES--GENERATE <MAG. AC,EAC>
	HRR	CH,EAC
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUT.XA
	JRST	MAC2C2

;GENERATE CODE TO MOVE AC'S TO COMP-1

MACFP.:	HRRZ	TE,EMODEA	;ARE AC'S ALREADY COMP-1?
	CAIE	TE,FPMODE
	PUSHJ	PP,CCXFP.	;NO--CONVERT THEM
	JRST	MAC1C2
;GENERATE CODE TO MOVE ACCUMULATORS TO A DISPLAY FIELD

MACD.:	LDB	TE,[POINT 3,EBASEB,20]	;IS ITEM 'BLANK WHEN ZERO'?
	CAIE	TE,AC.DAT
	JRST	MACD.1
	MOVE	TA,ETABLB
	PUSHJ	PP,LNKSET
	LDB	TE,DA.BWZ
	JUMPN	TE,MACE.

;'B' IS NEITHER EDITED NOR 'BLANK WHEN ZERO'

MACD.1:	HRRZ	TE,EMODEA	;IF 'A' IS
	CAIN	TE,FPMODE	;  COMP-1,
	PUSHJ	PP,CFPCX.	;  CONVERT TO FIXED POINT

	PUSHJ	PP,CUTCX	;CUT DOWN "A" IF NECESSARY
	JFCL			;DON'T CARE IF CODE GENERATED
	PUSHJ	PP,ADJDP.	;ADJUST DECIMAL PLACES
	PUSHJ	PP,SWAPAB	;SWAP OPERANDS
	MOVE	TE,ESIZEA
	MOVEM	TE,ESIZEZ
	PUSHJ	PP,B1PAR	;BUILD PARAMETER
	PUSHJ	PP,SWAPAB	;SWAP OPERANDS BACK

	MOVE	TE,ESIZEB	;IS 'B'
	CAILE	TE,^D10		;  TWO WORDS?
	JRST	MACD.2		;YES
	MOVEI	TE,D1MODE	;NO
	EXCH	TE,EMODEA	;IF 'A'
	HRRZS	TE		;  IS
	CAIE	TE,D1MODE	;  ONE WORD, OK
	AOS	EAC		;  ELSE BUMP AC
	JRST	MACD.3

MACD.2:	HRRZ	TE,EMODEA
	CAIE	TE,D1MODE
	JRST	MACD.3
	MOVE	CH,[XWD MULI.,1];YES--CONVERT "A" TO BE 2 WORDS
	PUSHJ	PP,PUT.XA

MACD.3:	MOVSI	CH,PD6.+ASINC	;ASSUME SIXBIT OUTPUT
	HRRZ	TE,EMODEB	;IS IT
	CAIE	TE,D6MODE	;  REALLY?
	MOVSI	CH,PD7.+ASINC	;NO--MUST BE ASCII

	MOVE	TD,EAC
	DPB	TD,CHAC

	PUSHJ	PP,SETUUO

	TSWT	FBSUB		;IS "B" SUBSCRIPTED?
	JRST	MDAC.5		;NO
	JRST	MDAC.6		;YES

;AC'S CONTAIN FLOATING-POINT

MACFD.:	PUSHJ	PP,CFPCX.
	JRST	MACD.
;GENERATE CODE TO MOVE AC'S TO EDITED FIELD.

MACE.:	MOVE	TE,[XWD EBASEB,ESAVMB]	;SAVE "B" PARAMETERS
	BLT	TE,ESVMBX

	MOVEI	TE,D6MODE	;SET MODE TO SIXBIT
	HRRM	TE,EMODEB

	MOVE	TE,ESIZEB	;FIND OUT HOW MUCH TEMP NEEDED
	ADDI	TE,5
	IDIVI	TE,6

	PUSHJ	PP,GETEMP	;ALLOCATE SOME TEMP WORDS
	MOVEM	EACC,EINCRB	;RESET "B" TO BE TEMP
	MOVE	TE,[XWD ^D36,AS.MSC]
	MOVEM	TE,EBASEB

	MOVE	TE,[XWD EBASEB,ESAVMA]	;SAVE THE NEW "B" PARAMETERS
	BLT	TE,ESVMAX

	PUSH	PP,SW		;SAVE SWITCHES
	SWOFF	FBSUB		;CLEAR 'B IS SUBSCRIPTED'
	PUSHJ	PP,MACD.1
	POP	PP,SW		;RESTORE SWITCHES
	SWOFF	FASUB		;TEMP IS NOT SUBSCRIPTED

	MOVE	TE,[XWD ESAVMA,EBASEA]	;GET BACK "B" AND "A"
	BLT	TE,EBASBX

	JRST	MDED.1		;GENERATE MOVE TO EDITED FIELD AND RETURN
;GENERATE CODE TO ADJUST DECIMAL PLACES OF AC TO MATCH B-FIELD,

ADJDP.:	HRRZ	TE,EMODEB
	CAIN	TE,FPMODE
	POPJ	PP,

	HRRZ	TE,EMODEA
	CAIN	TE,D1MODE
	JRST	ADJ1C.
	CAIN	TE,D2MODE
	JRST	ADJ2C.

	POPJ	PP,
;ADJUST DECIMAL PLACES FOR 1-WORD COMP.

ADJ1C.:	TSWF	FALWY0;
	POPJ	PP,
	MOVE	TC,EDPLA	;DOES "A" HAVE SAME DECIMAL PLACES AS "B"?
	SUB	TC,EDPLB
	JUMPE	TC,ADJ1CX	;YES IF JUMP

	MOVN	TD,TC		;NO--ADJUST SIZE AND DECIMAL PLACES OF "A"
	ADDB	TD,ESIZEA
	CAILE	TD,MAXSIZ	;SIZE NOW GREATER THAN MAX ALLOWED?
	JRST	IRERA.		;YES--YOU LOSE

	MOVN	TE,TC
	ADDM	TE,EDPLA

	JUMPL	TC,ADJ1C1	;D.P. OF A > D.P. OF B?

	MOVSI	CH,IDIV.	;YES--GENERATE DIVIDE
	PUSHJ	PP,PUT.PA
	JRST	LSERA.

;D.P. OF A < D.P. OF B
ADJ1C1:	MOVMS	TC

	CAIG	TD,^D10		;NO--NEW SIZE > 10?
	JRST	ADJ1C3		;NO

ADJ1C2:	AOS	EMODEA		;YES--CHANGE MODE
	CAILE	TC,^D10		;IS DIFFERENCE > 10?
	JRST	ADJ1C4		;YES

	MOVSI	CH,MUL.
	PUSHJ	PP,PUT.PA
ADJ1CX:	POPJ	PP,
;ADJUST DECIMAL PLACES OF 1-WORD COMP  (CONT'D).

;NEW SIZE IS STILL < 10 -- USE "IMUL"

ADJ1C3:	MOVSI	CH,IMUL.
	JRST	PUT.PA



;DIFFERENCE IN SIZE IS GREATER THAN 10
ADJ1C4:	MOVSI	CH,MUL.12	;GENERATE <MUL.12 AC,[LIT]>
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUT.PA
	MOVEI	TE,D2MODE
	MOVEM	TE,EMODEA
	POPJ	PP,
;GENERATE CODE TO ADJUST DECIMAL PLACES OF 2-WORD COMP FIELD TO MATCH B-FIELD.

ADJ2C.:	TSWF	FALWY0		;AC'S CONTAIN ZEROES?
	POPJ	PP,		;YES--RETURN

	MOVE	TE,EDPLA	;ANY ADJUSTMENT NEEDED?
	SUB	TE,EDPLB
	JUMPE	TE,ADJ1CX	;NO IF JUMP

	MOVN	TD,TE
	ADDB	TD,ESIZEA	;ADJUST SIZE

	CAILE	TD,MAXSIZ	;NEW SIZE GREATER THAN 19?
	JRST	IRERA.		;YES--YOU LOSE

	MOVN	TC,TE		;ADJUST DECIMAL PLACES
	ADDM	TC,EDPLA

	MOVEM	TE,EWORDB	;SAVE SIZE DIFFERENCE

	JUMPL	TE,ADJ2C1	;D.P. OF A > D.P. OF B?

	PUSHJ	PP,LSERA.	;YES--PUT OUT WARNING DIAG

	PUSHJ	PP,FORCX0	;INSURE AC'S ARE 0&1

	MOVE	TC,EWORDB	;GET SIZE DIFFERENCE BACK

	HRRZ	TE,EMODEA	;IS "A" 1 WORD?
	CAIE	TE,D2MODE
	JRST	ADJ2C4		;YES--SPECIAL PROCESSING

	MOVSI	CH,DIV.22
	CAIG	TC,^D10
	MOVSI	CH,DIV.21
	JRST	CUTC2D

;D.P. OF A < D.P. OF B -- MULTIPLY
ADJ2C1:	HRRZ	TE,EMODEA	;IS "A" ONE WORD?
	CAIE	TE,D2MODE
	JRST	ADJ1C2		;YES

	MOVM	TC,EWORDB
	MOVSI	CH,MUL.21
	CAILE	TC,^D10
	MOVSI	CH,MUL.22
	PUSHJ	PP,SETUUO
	MOVE	TE,EAC
	DPB	TE,CHAC
	JRST	PUT.PC
;GENERATE CODE TO ADJUST DEC. PL. OF 2-WORD COMP (CONT'D)


;"A" IS ACTUALLY 1 WORD, NOT 2

ADJ2C4:	MOVSI	CH,IDIV.
	JRST	PUT.PA
;CHECK TO SEE IF "A" HAS TOO MANY INTEGER PLACES

CUTCX:	HRRZ	TE,EMODEA
	CAIE	TE,D1MODE
	JRST	CUTC2

;"A" IS 1-WORD COMP

CUTC1:	TSWT	FSZERA		;ANY SIZE ERROR CODING?
	TSWF	FALWY0		;ARE AC'S ZERO?
	POPJ	PP,		;YES

	MOVE	TE,ESIZEB
	SUB	TE,EDPLB
	ADD	TE,EDPLA
	SUB	TE,ESIZEA
	JUMPGE	TE,CUTC1E

	ADDM	TE,ESIZEA	;IT HAS--CUT DOWN "A"
	PUSHJ	PP,MSERA.	;PUT OUT WARNING DIAG

CUTC1A:	SKIPG	TC,ESIZEA	;IF SIZE OF 'A' IS
	MOVEI	TC,1		;  NON-POSITIVE, USE 1
	MOVSI	CH,IDIV.	;NO--GENERATE A DIVIDE.
	CAILE	TC,^D10		;IF MORE THAN 10 DIGITS TO SCALE,
	MOVSI	CH,DIV.12	;  SWITCH TO DIV.12
	PUSH	PP,CH		;KEEP REMINDER OF WHAT WE ARE DOING
	PUSHJ	PP,PUT.PA
	POP	PP,TA		;NOW, WHAT WAS THAT AGAIN?
	MOVEI	TB,2		;PREPARE TO ADD 2 TO EAC
	CAMN	TA,[DIV.12,,0]	;1-WORD OR 2-WORD DIVISOR?
	ADDM	TB,EAC		;TWO
	AOSA	EAC		;AC_AC+1

CUTC1B:	AOS	(PP)		;SKIP RETURN IF NO DIVIDE GENERATED
CUTC1C:	POPJ	PP,

;CUT DOWN ONLY IF AC'S ARE 2-WORD COMP

CUTC1E:	HRRZ	TE,EMODEA
	CAIE	TE,D2MODE
	JRST	CUTC1B
	MOVE	TC,ESIZEA
	JRST	CUTC2A
;CHECK TO SEE IF "A" HAS TOO MANY INTEGER PLACES (CONT'D).

;"A" IS TWO-WORD COMP

CUTC2:	TSWT	FSZERA		;ANY SIZE ERROR CODING?
	TSWF	FALWY0		;DO AC'S CONTAIN ZERO?
	POPJ	PP,		;YES

	MOVE	TE,ESIZEB
	SUB	TE,EDPLB
	ADD	TE,EDPLA
	SUB	TE,ESIZEA
	JUMPGE	TE,CUTC1B

	ADDM	TE,ESIZEA	;IT HAS--CUT DOWN "A"
	PUSHJ	PP,MSERA.	;PUT OUT WARNING DIAG

	SKIPG	TC,ESIZEA	;ANY SIZE LEFT TO "A"?
	MOVEI	TC,1

CUTC2A:	PUSHJ	PP,FORCX0	;INSURE AC'S ARE 0&1
	MOVEI	TE,2		;NOW SET AC'S TO 2&3
	ADDM	TE,EAC
	MOVSI	CH,DIV.22
	CAILE	TC,^D10
	JRST	CUTC2D
	MOVEI	CH,D1MODE
	MOVEM	CH,EMODEA
	MOVSI	CH,DIV.21
CUTC2D:	PUSHJ	PP,SETUUO
	JRST	PUT.PC		;GENERATE <DPD.21 [10**SIZE OF "A"]> AND
				;RETURN
;CREATE AN ALPHANUMERIC LITERAL

LITD.:	HRRZ	TC,EMODEB	;GET MODE OF "B"
	MOVSI	TA,SIXLIT	;ASSUME SIXBIT
	CAIE	TC,D6MODE	;IS IT REALLY?
	MOVSI	TA,ASCLIT	;NO--ASCII
	PUSHJ	PP,STASHL	;STASH LITAB HEADER WORD
	HRRZM	TE,CURLIT	;SAVE LOCATION OF THAT HEADER

	MOVE	TE,ESIZEA	;IS LITERAL THE SAME SIZE AS "B"?
	CAMN	TE,ESIZEB
	JRST	LITD.2		;YES

	CAMG	TE,ESIZEB	;NO--IS LITERAL LARGER THAN "B"?
	JRST	LITD.5		;NO--SMALLER

;LITERAL IS LARGER THAN "B"
	SKIPGE	EMODEB		;IS "B" JUSTIFIED RIGHT?
	JRST	LITD.1		;YES
	PUSHJ	PP,RTERA.	;NO--PUT OUT DIAG
	JRST	LITD.2

LITD.1:	SUB	TE,ESIZEB	;YES--UPDATE BYTE POINTER
	IDIVI	TE,5
	ADDM	TE,EBYTEA
	JUMPE	TD,LITD.2
	IBP	EBYTEA
	SOJG	TD,.-1

	PUSHJ	PP,LTERA.	;PUT OUT DIAG
;CREATE AN ALPHANUMERIC LITERAL  (CONT'D).

;LITERAL IS THE SAME SIZE AS "B"
LITD.2:	HRRZ	TC,EMODEB
	MOVE	TD,ESIZEB
	PUSHJ	PP,VALLIT

LITD.3:	SETZM	EDPLA		;NO DECIMAL PLACES

LITD3A:	TLNN	TB,1B18		;IS "TA" EMPTY?
	PUSHJ	PP,STASHL	;NO--PUT IT INTO LITAB
	HRRZ	TE,LITNXT
	SUB	TE,CURLIT
	JUMPN	TE,LITD3B	;IF NO LENGTH,
	MOVEI	TA,0		;  PUT OUT
	PUSHJ	PP,STASHL	;  A WORD OF
	MOVEI	TE,1		;  NULLS

LITD3B:	HRRM	TE,@CURLIT
	EXCH	TE,ELITPC
	ADDM	TE,ELITPC
	IORI	TE,AS.LIT
	MOVEM	TE,EINCRA
	MOVE	TE,ESIZEB
	MOVEM	TE,ESIZEA
	MOVSI	TE,^D36
	HLLM	TE,ERESA
	HRRZM	TC,EMODEA
	MOVEI	TE,AS.MSC
	HRRM	TE,EBASEA

CPOPJ:	POPJ	PP,
;CREATE AN ALPHANUMERIC LITERAL (CONT'D).

;LITERAL IS SMALLER THAN "B".

LITD.5:	HLRZ	TA,OPERND	;IS IT "ALL"?
	MOVE	TE,0(TA)
	TLNE	TE,GNALL
	JRST	LITD.7		;YES

	SKIPGE	EMODEB		;IS "B" JUSTIFIED RIGHT?
	JRST	LITD.6		;YES

	MOVE	TD,ESIZEA	;NO
	PUSHJ	PP,VALLIT

	MOVE	TD,ESIZEB
	SUB	TD,ESIZEA
	PUSHJ	PP,SLIT1
	JRST	LITD.3

LITD.6:	MOVE	TD,ESIZEB
	SUB	TD,ESIZEA
	PUSHJ	PP,SPCLIT
	MOVE	TD,ESIZEA
	PUSHJ	PP,VLIT2
	JRST	LITD.3
;CREATE AN ALPHANUMERIC LITERAL (CONT'D).

;"ALL" SPECIFIED, AND LITERAL IS SMALLER THAN "B"

LITD.7:	MOVE	TE,EBYTEA	;SAVE BYTE POINTER TO VALUE
	MOVEM	TE,ELITLO
	MOVE	DT,ESIZEB	;GET SIZE OF "B"

	SKIPGE	EMODEB		;IS "B" JUSTIFIED RIGHT?
	JRST	LITD10		;YES

;"B" IS JUSTIFIED LEFT

LITD7A:	MOVE	TD,ESIZEA	;GET ONE OCCURENCE INTO
	PUSHJ	PP,VALLIT	;	LITAB

LITD.8:	SUB	DT,ESIZEA	;DECREMENT AMOUNT LEFT
LITD.9:	JUMPLE	DT,LITD.3	;DONE?

	MOVE	TD,ESIZEA	;NO--GET LITERAL SIZE
	CAMLE	TD,DT		;IS IT LESS THAN AMOUNT LEFT?
	MOVE	TD,DT		;NO--USE AMOUNT LEFT
	MOVE	TE,ELITLO	;RESET BYTE POINTER TO VALUE
	MOVEM	TE,EBYTEA
	PUSHJ	PP,VLIT2	;GET MORE VALUE INTO LITAB

	JRST	LITD.8		;LOOP

;"B" IS JUSTIFIED RIGHT

LITD10:	MOVE	TE,ESIZEB	;GET LEFT RESIDUE INTO
	IDIV	TE,ESIZEA	;	TD
	JUMPE	TD,LITD7A	;IF ZERO--SAME AS JUSTIFIED LEFT

	SUB	DT,TD		;DECREMENT AMOUNT LEFT
	MOVE	TE,DT		;INCREMENT
	SUB	TE,TD		;  BYTE POINTER
	IBP	EBYTEA		;  TO
	SOJG	TE,.-1		;	VALUE

	PUSHJ	PP,VALLIT	;GET SOME CHARACTERS

	JRST	LITD.9	;NOW PRETEND IT'S LEFT JUSTIFIED
;CREATE A NUMERIC DISPLAY LITERAL

LITN.:	PUSHJ	PP,SCANL	;SCAN THE VALUE IN VALTAB
	TSWF	FERROR		;ANY ERRORS?
	POPJ	PP,		;YES--QUIT

LITN.A:	MOVE	TE,[POINT 6,LITHLD]	;SET EBYTEA TO POINT TO LITHLD
	MOVEM	TE,EBYTEA

	MOVSI	TA,SIXLIT	;CREATE LITERAL HEADER
	HRRZ	TC,EMODEB	;IS "B" SIXBIT?
	CAIE	TC,D6MODE
	MOVSI	TA,ASCLIT	;NO--MUST BE ASCII
	PUSHJ	PP,STASHL	;PUT LITERAL HEADER INTO LITAB
	HRRZM	TE,CURLIT	;SAVE THAT LOCATION

	MOVE	TD,ESIZEB	;DOES LITERAL HAVE MORE INTEGRAL PLACES THAN "B"?
	SUB	TD,EDPLB
	SUB	TD,ESIZEA
	ADD	TD,EDPLA
	JUMPE	TD,LITN.3	;IF JUMP--INTEGER SIZES ARE EQUAL

	JUMPG	TD,LITN.2

;LITERAL HAS MORE INTEGER PLACES THAN RECEIVING FIELD

	ADDM	TD,ESIZEA	;DECREMENT SIZE OF LITERAL
	MOVMS	TD
	IDIVI	TD,6		;BUMP EBYTEA
	ADDM	TD,EBYTEA
	JUMPE	TC,LITN.2
	IBP	EBYTEA
	SOJG	TC,.-1

LITN.1:	SKIPN	ESIZEA
	JRST	LITN10
	PUSHJ	PP,MSERA.
	JRST	LITN.3

;LITERAL HAS FEWER INTEGER PLACES THAN "B" FIELD

LITN.2:	PUSHJ	PP,ZERLIT	;GENERATE ZEROES AT FRONT
	JRST	LITN.4

;INTEGER PLACES OF LITERAL AND "B" ARE EQUAL

LITN.3:	MOVEI	TA,0		;CLEAR TA
	HRRZ	TC,EMODEB
	CAIE	TC,D7MODE
	SKIPA	TB,[POINT 6,TA]
	MOVE	TB,[POINT 7,TA]

LITN.4:	MOVE	TE,EDPLB	;COMPARE DECIMAL PLACES
	SUB	TE,EDPLA
	JUMPGE	TE,LITN.5	;JUMP IF "A" IS NOT GREATER THAN "B"

	ADDM	TE,EDPLA	;DECREMENT DECIMAL PLACES OF LITERAL
	ADDB	TE,ESIZEA	;DECREMENT SIZE OF LITERAL
	JUMPLE	TE,LITN10
	PUSHJ	PP,LSERA.	;PUT OUT DIAG
;GENERATE A NUMERIC DISPLAY LITERAL  (CONT'D)

LITN.5:	MOVE	TD,ESIZEA	;GET SIZE OF LITERAL
	JUMPLE	TD,LITN10	;IF NOTHING LEFT--WARN HIM

	MOVE	TC,EMODEB

LITN.6:	ILDB	TE,EBYTEA
	TLNE	TB,100
	ADDI	TE,40
	IDPB	TE,TB
	TLNN	TB,760000	;IS "TA" FULL?
	PUSHJ	PP,SLIT3	;YES--WRITE IT OUT

	SOJG	TD,LITN.6	;LOOP UNTIL DONE

	MOVE	TD,EDPLB
	SUB	TD,EDPLA
	SKIPLE	TD
	PUSHJ	PP,ZLIT2

	TSWF	FLNEG		;IS LITERAL NEGATIVE?
	TSWT	FBSIGN		;YES--IS "B" SIGNED?
	JRST	LITN.9		;NO

	JUMPN	TA,LITN.8	;IS "TA" EMPTY?
	MOVE	TD,LITNXT	;YES--GET BACK ONE %LIT WORD
	POP	TD,TA
	MOVEM	TD,LITNXT

	CAIE	TC,D6MODE
	SKIPA	TB,[POINT 7,TA,34]
	MOVE	TB,[POINT 6,TA,35]

LITN.8:	LDB	TE,TB		;GET THE LAST DIGIT
	TRNN	TE,17		;WAS LAST DIGIT ZERO?
	TROA	TE,12		;YES--CONVERT TO -0
	ADDI	TE,31		;NO--CONVERT TO NEGATIVE DIGIT
	DPB	TE,TB		;REPLACE LAST DIGIT

LITN.9:	MOVE	TE,EDPLB
	MOVEM	TE,EDPLA
	JRST	LITD3A


;NOTHING LEFT TO LITERAL AFTER TRUNCATION

LITN10:	PUSHJ	PP,NOSIZ.	;PUT OUT WARNING
	MOVE	TD,ESIZEB
	PUSHJ	PP,ZERLIT
	JRST	LITD3A
;GENERATE A MOVE BETWEEN TWO DISPLAY FIELDS OF EQUAL LENGTH.

GMOVE.:	TSWT	FASUB		;IS EITHER FIELD SUBSCRIPTED?
	TSWF	FBSUB;
	JRST	GMOVE7		;YES

	HRRZ	TC,EMODEA	;SAME USAGE?
	HRRZ	TB,EMODEB
	CAME	TC,TB
	JRST	GMOVE7		;NO

	HLRZ	TB,ERESA	;YES--SAME STARTING BIT?
	HLRZ	TA,ERESB
	CAMN	TB,TA
	JRST	GMOVE2		;YES


;IF BOTH OPERANDS ARE WORD CONTAINED, TREAT THEM IN A SPECIAL WAY

GMOVE1:	HLRZ	TB,ERESA	;GET CORRECT RESIDUE
	MOVE	TC,EMODEA	;IS "A" OPERAND WORD-CONTAINED?
	MOVE	TD,BYTE.S(TC)
	IMUL	TD,ESIZEZ
	SUB	TB,TD
	JUMPL	TB,GMOVE7	;NO IF JUMP

	LSH	TB,6		;YES--CREATE LEFT-HALF OF PARAMETER
	ADD	TB,TD
	MOVEM	TB,EWORDB	;SAVE IT

	HLRZ	TB,ERESB	;IS "B" OPERAND WORD-CONTAINED?
	SUB	TB,TD
	JUMPL	TB,GMOVE7	;NO IF JUMP
;GENERATE A MOVE BETWEEN TWO DISPLAY FIELDS OF EQUAL LENGTH  (CONT'D).

;BOTH OPERANDS ARE WORD-CONTAINED.
;THEY MAY OR MAY NOT HAVE THE SAME STARTING BIT.

	LSH	TB,6		;"TB" HAS RESIDUE OF "B"
	ADD	TB,TD		;"TD" HAS SIZE, IN BITS
	EXCH	TB,EWORDB	;SAVE THAT, AND GET "A" INFO BACK
	LSH	TB,6		;CREATE BYTE POINTER TO "A"
	MOVE	TA,[XWD BYTLIT,4]
	PUSHJ	PP,STASHL
	HRRZ	TA,EBASEA
	PUSHJ	PP,STASHL
	MOVE	TA,EINCRA
	HRL	TA,TB
	PUSHJ	PP,STASHL
	HRRZ	TA,EBASEB	;CREATE BYTE POINTER TO "B"
	PUSHJ	PP,STASHL
	MOVE	TB,EWORDB
	LSH	TB,6
	MOVE	TA,EINCRB
	HRL	TA,TB
	PUSHJ	PP,STASHL

	MOVE	CH,[XWD LDB.+AC5+ASINC,AS.MSC];	GENERATE <LDB 5,BYTE-POINTER-TO-A>
	PUSHJ	PP,PUTASY
	HRRZ	CH,ELITPC
	IORI	CH,AS.LIT
	PUSHJ	PP,PUTASN
	AOS	EACC,ELITPC
	AOS	ELITPC
	PUSHJ	PP,GENM7B	;GENERATE <DPB 5,BYTE-POINTER-TO-B>

	MOVE	TE,ESIZEZ	;BUMP "A" INFO
	PUSHJ	PP,M.IA
	MOVE	TE,ESIZEZ	;BUMP "B" INFO
	JRST	M.IB		;	AND RETURN
;GENERATE A MOVE BETWEEN TWO DISPLAY FIELDS OF EQUAL LENGHT  (CONT'D).

;ITEMS HAVE THE SAME USAGE, AND THE SAME STARTING POSITION

GMOVE2:	CAIE	TB,^D36		;START IN BIT 0?
	JRST	GMOVE6		;NO

GMOVE3:	MOVE	TE,BYTE.W(TC)	;YES--EXTEND UP TO OR PAST WORD BOUNDARY?
	CAMLE	TE,ESIZEZ
	JRST	GMOVE1		;NO

	LSH	TE,1		;YES--AT LEAST 2 FULL WORDS?
	CAMLE	TE,ESIZEZ
	JRST	GMOVE5		;NO

	MOVE	TA,[XWD XWDLIT,2]	;YES--CREATE [XWD A,B]
	PUSHJ	PP,STASHL
	MOVE	TA,EBASEA
	HRL	TA,EINCRA
	PUSHJ	PP,STASHL
	MOVE	TA,EBASEB
	HRL	TA,EINCRB
	PUSHJ	PP,STASHL

	AOS	ELITPC

	MOVE	TE,ESIZEZ	;GENERATE <MOVE 4,[XWD]
	IDIV	TE,BYTE.W(TC)	;	BLT 4,EBASEB+EINCRB-1>
	ADDM	TE,EINCRB	;INCREMENT THE INCREMENTS
	ADDM	TE,EINCRA

	SETZM	EWORDB
	PUSHJ	PP,GENM1A

GMOVE4:	MOVEM	TD,ESIZEZ	;STASH SIZE OF ANY REMAINING FIELD
	JUMPN	TD,GMOVE1	;ANY MORE?
	POPJ	PP,		;NO

;ITEMS DO NOT HAVE MORE THAN ONE FULL WORD.

GMOVE5:	MOVSI	CH,MOV+AC5
	PUSHJ	PP,PUT.A
	MOVSI	CH,MOVEM.+AC5
	PUSHJ	PP,PUT.B
	MOVE	TE,ESIZEZ	;UPDATE SIZES AND INCREMENTS
	IDIV	TE,BYTE.W(TC)
	AOS	EINCRA
	AOS	EINCRB
	JRST	GMOVE4		;LOOP BACK
;GENERATE A MOVE BETWEEN TWO DISPLAY FIELDS OF EQUAL LENGTH  (CONT'D).

;ITEMS HAVE SAME USAGE AND STARTING POSITION, BUT THAT STARTING POSITION
;	IS NOT BIT 0.

GMOVE6:	MOVE	TC,BYTE.S(TC)	;UP TO OR THRU WORD BOUNDARY?
	IMUL	TC,ESIZEZ
	SUB	TB,TC
	CAILE	TB,1
	JRST	GMOVE1		;NO

	MOVSI	CH,MOV+AC5
	PUSHJ	PP,PUT.A
	HLRZ	TB,ERESB
	MOVE	TC,TB
	PUSHJ	PP,GENM06	;GENERATE BYTE POINTER TO "B" OPERAND
	PUSHJ	PP,GENM7B	;GENERATE THE DPB
	MOVE	TD,EMODEA	;UPDATE THE SIZE OF REMAINING FIELD
	IDIV	TC,BYTE.S(TD)
	MOVN	TD,TC
	ADDB	TD,ESIZEZ

	MOVEI	TE,^D36		;SET RESIDUES TO 36
	HRLM	TE,ERESA
	HRLM	TE,ERESB
	AOS	EINCRA		;INCREMENT THE INCREMENTS
	AOS	EINCRB
	MOVE	TC,EMODEA
	JUMPN	TD,GMOVE3	;ANYTHING LEFT?

	POPJ	PP,		;NO--RETURN
;GENERATE A CALL TO SOME CONVERSION ROUTINE.
;THE SPECIFIC ROUTINE IS DETERMINED BY THE MODES OF THE "A" & "B" OPERANDS.

;BUILD THE PARAMETERS

GMOVE7:	SKIPG	TC,ESIZEZ	;POSITIVE SIZE?
	POPJ	PP,		;NO--FORGET IT
	CAILE	TC,3777		;GREATER THAN 2047?
	JRST	GMOVE9		;YES

	PUSHJ	PP,B2PAR	;NO--BUILD PARAMETER WORDS

;BUILD UP AND WRITE THE UUO CALL
GMOVE8:	MOVE	TC,EMODEA
	HRRZ	TE,EMODEB
	CAIN	TE,D6MODE	;IS "B" SIXBIT?
	SKIPA	CH,GMOVET(TC)	;YES--USE LEFT HALF
	MOVS	CH,GMOVET(TC)	;NO--USE RIGHT HALF
	PUSHJ	PP,SETUUO	;SET FLAG ON UUO BIT

	HRRI	CH,AS.MSC
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACC
	PUSHJ	PP,PUTASN

GMOV8A:	MOVE	TE,ESIZEZ	;INCREMENT "B" PARAMETERS
	PUSHJ	PP,M.IB
	MOVE	TE,ESIZEZ	;INCREMENT "A" PARAMETERS
	JRST	M.IA		;	AND RETURN
;GENERAL MOVE WITH SIZE GREATER THAN 2047

GMOVE9:	MOVSI	CH,MOV		;PUT
	SETZM	EAC		;  OUT
	PUSHJ	PP,PUT.LA	;  <MOVEI 0,ESIZEZ>

	MOVE	TA,[XWD BYTLIT,4]; PUT OUT
	PUSHJ	PP,STASHL	;  'BYTE-POINTER' HEADER ON LITAB

	PUSHJ	PP,MBYTEA	;PUT
	MOVSI	CH,MOV+AC1	;  OUT
	PUSHJ	PP,PUT.LD	;  <MOVE 1, BYTE-POINTER-TO-A>
	AOS	ELITPC		;BUMP LITERAL COUNTER

	PUSHJ	PP,MBYTEB	;PUT
	MOVSI	CH,MOV+AC2	;  OUT
	PUSHJ	PP,PUT.LD	;  <MOVE 2, BYTE-POINTER-TO-A>
	AOS	ELITPC		;BUMP LITERAL COUNTER

	PUSHJ	PP,GETTAG	;GET A TAG
	MOVEM	CH,EWORDB	;SAVE IT
	PUSHJ	PP,PUTTAG	;WRITE IT OUT

	MOVE	CH,[XWD ILDB.+AC3,1]; PUT OUT
	PUSHJ	PP,PUTASY	;  <ILDB 3,1>

	HRRZ	TC,EMODEA	;IS MODE OF A = MODE OF B?
	HRRZ	TE,EMODEB
	CAMN	TC,TE
	JRST	GMOV9C		;YES

	CAIE	TC,D6MODE	;NO--IS 'A' SIXBIT?
	SKIPA	CH,[XWD SUBI.+AC3,40]; NO
	MOVE	CH,[XWD ADDI.+AC3,40]; YES
	PUSHJ	PP,PUTASY	;PUT OUT <ADDI 3,40> OR <SUBI 3,40>

GMOV9C:	MOVE	CH,[XWD IDPB.+AC3,2]; PUT OUT
	PUSHJ	PP,PUTASY	;  <IDPB 3,2>

	MOVSI	CH,SOJG.	;PUT
	HRR	CH,EWORDB	;  OUT
	IORI	CH,AS.TAG	;  <SOJG 0,%TAG>
	PUSHJ	PP,PUTASY
	JRST	GMOV8A
;GENERATE CODE TO CONVERT 1-WORD COMP TO 2-WORD COMP IN AC'S

CC1C2.:	MOVEI	TE,D2MODE
	HRRM	TE,EMODEA
	MOVE	CH,[XWD MULI.,1]
	JRST	PUT.XA
;CONVERT FLOATING POINT TO COMPUTATIONAL

CFPCX.:	SKIPE	TD,EDPLB
	PUSHJ	PP,GENFPL

	MOVSI	CH,FIX.
	HRR	CH,EAC
	DPB	CH,CHAC
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASY

	MOVE	TE,[XWD ESIZEB,ESIZEA]
	BLT	TE,EBASAX

	MOVEI	TE,D2MODE
	MOVEM	TE,EMODEA

	POPJ	PP,
;CONVERT AC'S TO FLOATING POINT

CCXFP.:	HRRZ	TE,EMODEA
	MOVSI	CH,FLOT.1
	CAIE	TE,D1MODE
	MOVSI	CH,FLOT.2

	HRR	CH,EAC
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASY

	MOVEI	TE,FPMODE
	MOVEM	TE,EMODEA

	MOVN	TD,EDPLA

	JRST	GENFPL
;GET A FLOATING POINT LITERAL TO %LIT.
;EXIT WITH %LIT RELATIVE ADDRESS IN "TC".

MSFP%L:	PUSHJ	PP,CONVFP
	CAIE	LN,EBASEA
	SKIPA	TE,OPERND
	MOVS	TE,OPERND
	MOVE	TE,1(TE)
	TLNE	TE,NEGEOP
	TSWC	FLNEG;

	TSWF	FLNEG;
	TLO	TC,17B21

MFP%L1:	MOVE	TA,[XWD FLTLIT,2]
	PUSHJ	PP,STASHL
	MOVE	TA,TD
	PUSHJ	PP,STASHL
	MOVE	TA,TC
	PUSHJ	PP,STASHL

	MOVE	TC,ELITPC
	IORI	TC,AS.LIT
	AOS	ELITPC
	POPJ	PP,
;CREATE A MASK OF 1-BITS AT LEFT SIDE OF WORD.
;ENTER WITH # ZERO BITS IN "TE".

BITSL.:	MOVEI	TD,1
	ROT	TD,(TE)
	MOVNM	TD,EMASK
	POPJ	PP,

;CREATE A MASK OF 1-BITS AT RIGHT SIDE OF WORD.
;ENTER WITH # BITS IN "TE".

BITSR.:	MOVEI	TD,1
	ROT	TD,(TE)
	MOVNS	TD
	SETCAM	TD,EMASK
	POPJ	PP,
;GENERATE:	MOVE 4,[XWD EBASEB+EINCRB-1,EBASEB+EINCRB]
;		BLT  4,EBASEB+EWORDB+EINCRB-1

GENM01:	MOVE	TA,[XWD XWDLIT,2]	;CREATE XWD HEADER FOR LITAB
	PUSHJ	PP,STASHL
	MOVE	TA,EINCRB	;CREATE LH OF XWD
	SUBI	TA,1
	MOVSS	TA
	HRR	TA,EBASEB
	PUSHJ	PP,STASHL
	MOVS	TA,EINCRB	;CREATE RH OF XWD
	HRR	TA,EBASEB
	PUSHJ	PP,STASHL
	AOS	ELITPC

GENM1A:	MOVE	CH,[XWD MOV+AC4+ASINC,AS.MSC]	;CREATE THE MOVE
	PUSHJ	PP,PUTASY
	HRRZ	CH,ELITPC
	IORI	CH,AS.LIT
	SUBI	CH,1
	PUSHJ	PP,PUTASN

	MOVSI	CH,BLT.+AC4+ASINC	;CREATE THE BLT
	HRR	CH,EBASEB
	PUSHJ	PP,PUTASY
	HRRZ	CH,EWORDB
	ADD	CH,EINCRB
	SUBI	CH,1
	JRST	PUTASN		;WRITE THE BLT AND RETURN
;GENERATE <MOVE 3,[(@EACD)+1]>

GENM04:	SKIPE	ECONRJ		;HAS MOVE BEEN GENERATED YET?
	POPJ	PP,		;YES--QUIT

	MOVE	CH,[XWD MOV+AC3+ASINC,AS.MSC]
	MOVEM	CH,ECONRJ
	PUSHJ	PP,PUTASY	;WRITE IT OUT
	HRRZ	CH,EACD		;CREATE INCREMENT
	ADDI	CH,1
	JRST	PUTASN		;WRITE IT AND RETURN


;GENERATE <MOVE 2,[@EACD]>

GENM05:	SKIPE	ECONLJ		;HAS MOVE BEEN GENERATE YET?
	POPJ	PP,		;YES--QUIT

	MOVE	CH,[XWD MOV+KAC+ASINC,AS.MSC]
	MOVEM	CH,ECONLJ
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACD
	JRST	PUTASN
;GENERATE A BYTE POINTER TO B-FIELD.
;ENTER WITH RESIDUE OF PREVIOUS BYTE IN TB, SIZE IN TC.
;EXIT WITH RELATIVE RUN-TIME ADDRESS OF BYTE-POINTER IN EACC.

GENM06:	MOVE	EACC,ELITPC
	AOS	ELITPC
	MOVE	TA,[XWD BYTLIT,2]
	PUSHJ	PP,STASHL
	MOVE	TA,EBASEB
	PUSHJ	PP,STASHL
	MOVE	TA,EINCRB
	SUB	TB,TC
	LSH	TB,6
	ADD	TB,TC
	LSH	TB,6
	HRL	TA,TB
	JRST	STASHL


;GENERATE <DPB X,BYTE-POINTER>.
;ENTER WITH OBJECT ADDRESS OF BYTE POINTER IN EACC.
GENM07:	SKIPA	CH,ECONLJ

GENM7A:	MOVE	CH,ECONRJ
	TLZ	CH,177000
	TLOA	CH,DPB.

GENM7B:	MOVE	CH,[XWD DPB.+AC5+ASINC,AS.MSC]
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACC
	IORI	CH,AS.LIT
	JRST	PUTASN


;GENERATE <MOVEM 4,EBASEB+EINCRB>

GENM08:	MOVSI	CH,MOVEM.+AC4
	JRST	PUT.B
;GENERATE <MOVE 4,[LITERAL]>.
;ENTER WITH LITERAL VALUE IN TB,CONSTANT TYPE IN LH OF TA.

GENM09:	TLNN	TB,-1		;IS LEFT HALF OF LITERAL EQUAL TO ZERO?
	JRST	GENM11		;YES

	TRNN	TB,-1		;NO--IS RIGHT HALF OF LITERAL EQUAL TO ZERO?
	JRST	GENM10		;YES

	SETCM	TE,TB		;NO--IS LEFT HALF OF LITERAL EQUAL TO ALL ONES?
	TLNN	TE,-1
	JRST	GENM14		;YES

	TRNN	TE,-1		;NO--IS RIGHT HALF OF LITERAL EQUAL TO ALL ONES?
	JRST	GNM14A		;YES

	HRRI	TA,1		;NO--CREATE THE LITERAL
	PUSHJ	PP,STASHL
	MOVE	TA,TB
	PUSHJ	PP,STASHL
	MOVE	CH,[XWD MOV+AC4+ASINC,AS.MSC]	;CREATE THE MOVE
	PUSHJ	PP,PUTASY	;WRITE FIRST OF TWO WORDS
	HRRZ	CH,ELITPC
	IORI	CH,AS.LIT
	AOS	ELITPC
	JRST	PUTASN		;WRITE SECOND WORD AND RETURN

GENM10:	MOVSS	TB
	SKIPA	CH,[XWD HRLZI.+AC4,0]	;USE "HRLZI"

GENM11:	MOVSI	CH, HRRZI.+AC4	;USE "HRRZI"
	JRST	GNM25A

GNM14A:	MOVSS	TB
	SKIPA	CH,[XWD HRLOI.+AC4,0]	;USE "HRLOI"

GENM14:	MOVSI	CH,HRROI.+AC4	;USE "HRROI"
	JRST	GNM25A
;GENERATE <SETZM EBASEB+EINCRB>

GENM16:	MOVSI	CH,SETZM.
	JRST	PUT.B


;GENERATE <SETOM EBASEB+EINCRB>

GENM17:	MOVSI	CH,SETOM.
	JRST	PUT.B

;GENERATE <HRLOI 4,377777>

GENM19:	MOVE	CH,[XWD HRLOI.+AC4+ASINC,AS.CNB]
	PUSHJ	PP,PUTASY
	HRRZI	CH,377777
	JRST	PUTASN
;GENERATE <OP X,[LITERAL]>, OR <OPI X,LITERAL>.

GENM24:	TLNN	TB,-1		;CAN WE USE IMMEDIATE MODE?
	JRST	GENM25		;YES

GNM24A:	HRRI	TA,1		;NO--STASH THE LITERAL
	PUSHJ	PP,STASHL
	MOVE	TA,TB
	PUSHJ	PP,STASHL

	HRRI	CH,AS.MSC	;CREAT THE INSTRUCTION
	TLO	CH,ASINC
	PUSHJ	PP,PUTASY	;WRITE OUT FIRST OF TWO WORDS
	HRRZ	CH,ELITPC
	IORI	CH,AS.LIT
	AOS	ELITPC
	JRST	PUTASN		;WRITE OUT INCREMENT AND RETURN

GENM25:	ADD	CH,[EXP 1B8]	;USE IMMEDIATE MODE
GNM25A:	TRNE	TB,700000	;IS CONSTANT > 77777?
	JRST	GENM26
	HRR	CH,TB		;NO--PUT CONSTANT IN RIGHT HALF
	JRST	PUTASY		;WRITE AND RETURN

GENM26:	TLO	CH,ASINC	;YES--SET "INCREMENT FOLLOWS"
	HRRI	CH,AS.CNB
	PUSHJ	PP,PUTASY	;WRITE OUT FIRST OF TWO WORDS
	HRRZ	CH,TB
	JRST	PUTASN		;WRITE OUT INCREMENT AND RETURN
;GENERATE <MOVE AC+1,[LITERAL]>
;ENTER WITH LITERAL IN TB, TYPE OF LITERAL IN LH OF TA.

GENM38:	MOVE	TE,EAC
	AOSA	TE

;GENERATE <MOVE AC,[LITERAL]>
;ENTER WITH LITERAL IN TB, TYPE OF LITERAL IN LH OF TA.

GENM39:	MOVE	TE,EAC
	HRRZI	CH,0
	DPB	TE,CHAC
	MOVN	TD,TB
	TLNN	TD,-1
	TLOA	CH,MOVN.
	TLOA	CH,MOV
	MOVE	TB,TD
	MOVSI	TA,D1LIT
	JRST	GENM24
;PUT OUT THE "MOST SIGNIFICANT DIGITS" DIAGNOSTIC.
MSERA.:	TSWF	FSZERA		;SIZE ERROR WANTED?
	POPJ	PP,		;YES--NO ERROR

	MOVEI	TA,MSDIAG
	JRST	TERA.

;PUT OUT THE "LEAST SIGNIFICANT DIGITS" DIAGNOSTIC.
LSERA.:	TSWF	FROUND		;ARE WE ROUNDING?
	POPJ	PP,		;YES--NO ERROR
	MOVEI	TA,LSDIAG
	JRST	TERA.

;PUT OUT THE "RIGHT TRUNCATION" DIAGNOSTIC.
RTERA.:	MOVEI	TA,RTDIAG
	JRST	TERA.

;WRITE OUT THE "LEFT TRUNCATION" DIAGNOSTIC.
LTERA.:	MOVEI	TA,LTDIAG


TERA.:	HRRZ	TC,CUREOP
	CAIN	TC,EOPHLD
	JRST	TERA.1

	HRL	TA,1(TC)
	MOVE	TC,0(TC)
	LDB	LN,TCLN
	LDB	CP,TCCP
	JRST	WARNAD

TERA.1:	MOVEI	DW,-4(TA)
	JRST	OPNWRN
;PUT OUT THE "BAD FIGURATIVE CONSTANT" DIAGNOSTIC
BADFIG:	MOVEI	DW,^D184
	JRST	OPNFAT


;PUT OUT THE "INTERMEDIATE RESULT TOO LARGE" DIAGNOSTIC
IRERA.:	TSWF	FBIGCV		;SHOULD WE CONVERT TO COMP-1?
	JRST	CNVFP		;YES

	MOVEI	DW,^D88
	SWON	FERROR;
	JRST	OPNFAT

;PUT OUT THE "NO SIZE" DIAGNOSTIC
NOSIZ.:	MOVEI	TA,NSDIAG
	JRST	TERA.

;"B" NON-NUMERIC, "A" HAS DECIMAL PLACES

NODPL:	SWON	FERROR;
	MOVEI	DW,^D96
	JRST	OPNFAT

;WE ARE IN AN ARITHMETIC EXPRESSION, AND "A" IS TOO LARGE.
;CONVERT IT TO COMP-1.

CNVFP:	HRRZ	TE,EBASEB
	CAILE	TE,17
	JRST	CCXFP.		;"B" ISN'T IN AC'S--CONVERT "A"

	PUSHJ	PP,SWAPEM	;"B" IS ALSO IN AC'S--SWAP OPERANDS
	PUSHJ	PP,PUTEMP	;PUT "B" INTO A TEMP
	PUSHJ	PP,SWAPAB	;RE-SWAP OPERANDS
	HRRZ	TD,EBASEA
	MOVEM	TD,EAC
	JRST	CCXFP.
;SET UP A FIELD FOR EDITING

SETED:	TSWF	FANUM		;IS 'A' NUMERIC?
	JRST	SETED1		;YES--WE WILL MOVE TO TEMP
	MOVE	TE,ESIZEB	;ARE "A" & "B" THE SAME SIZE?
	CAMN	TE,ESIZEA
	POPJ	PP,		;YES--NO NEED FOR MORE WORK

;GENERATE CODE TO MOVE "A" TO A TEMPORARY LOCATION
SETED1:	MOVE	TD,[XWD EBASEB,ESAVMB]	;SAVE "B" PARAMETERS
	BLT	TD,ESVMBX

	HRRZ	TE,EMODEA	;IS "A" COMP-1?
	CAIE	TE,FPMODE
	TSWF	FBNUM		;NO--IS "B" NUMERIC?
	JRST	SETED2		;YES

	MOVE	TE,ESIZEB	;SAVE SIZE OF "B"
	MOVE	TD,[XWD EBASEA,EBASEB]	;SET B = A
	BLT	TD,EBASBX
	CAMLE	TE,ESIZEB	;IS OLD "B" LARGER THAN NEW "B"?
	MOVEM	TE,ESIZEB	;YES--JAM OLD SIZE

SETED2:	MOVE	TD,[XWD ^D36,AS.MSC]	;RESET "B" TO BE A TEMP
	MOVEM	TD,EBASEB
	MOVEI	TD,D7MODE
	MOVEM	TD,EMODEB

	MOVE	TE,ESIZEB
	ADDI	TE,4
	IDIVI	TE,5
	PUSHJ	PP,GETEMP
	MOVEM	EACC,EINCRB

	MOVE	TD,[XWD EBASEB,ESAVMA]	;SAVE NEW "B" PARAMETERS
	BLT	TD,ESVMAX

	PUSH	PP,SW
	SWOFF	FBSUB;
	TSWT	FANUM		;IS "A" NUMERIC?
	SWOFFS	FBNUM		;NO--SET "B" NON-NUMERIC
	SWON	FBNUM		;YES--SET "B" NUMERIC
	PUSHJ	PP,MXX.		;MOVE 'A' TO TEMP
	POP	PP,SW
	SWOFF	FASUB;

	MOVE	TD,[XWD ESAVMA,EBASEA]	;RESTORE BOTH "A" & "B"
	BLT	TD,EBASBX

	POPJ	PP,
;PUT ZEROES BEFORE OR AFTER A DISPLAY LITERAL.
;SIZE IS IN "TD", HEADER FOR LITAB HAS BEEN PUT OUT.

ZERLIT:	HRRZ	TC,EMODEB
	PUSHJ	PP,SLIT4

ZLIT2:	MOVEI	TE,"0"-40
	TLNE	TB,100
	MOVEI	TE,"0"
	IDPB	TE,TB
	SOJLE	TD,SLIT2

	TLNN	TB,760000
	PUSHJ	PP,SLIT3
	JRST	ZLIT2


;MOVE SPACES TO LITAB TO FILL OUT A LITERAL.
;HEADER HAS BEEN PUT OUT, SIZE IS IN "TD".

SPCLIT:	HRRZ	TC,EMODEB
	PUSHJ	PP,SLIT4

SLIT1:	MOVEI	TE," "-40	;GET A SIXBIT SPACE
	TLNE	TB,100		;DO WE NEED ASCII?
	MOVEI	TE," "		;YES
	IDPB	TE,TB		;STASH IT INTO "TA"
	SOJLE	TD,SLIT2

;QUIT IF ENOUGH HAVE BEEN DONE

	TLNN	TB,760000	;IS "TA" FULL?
	PUSHJ	PP,SLIT3
	JRST	SLIT1

SLIT2:	TLNE	TB,760000
	POPJ	PP,

SLIT3:	PUSHJ	PP,STASHL

SLIT4:	MOVEI	TA,0
	CAIN	TC,D6MODE
	SKIPA	TB,[POINT 6,TA]
	MOVE	TB,[POINT 7,TA]

	POPJ	PP,
;CREATE THE MASK FOR THE "B" FIELD

BMASK:	MOVE	TE,[EXP ^D36B5+AS.CNB]
	MOVEM	TE,EDITW1
	MOVSI	TA,OCTLIT
	PUSHJ	PP,STASHL
	HRRZM	TE,CURLIT

	MOVE	TA,ETABLB
	PUSHJ	PP,LNKSET

	LDB	TC,DA.EDT
	JUMPE	TC,BMASK4

	MOVEI	TC,0(TA)
	ADD	TC,[POINT 4,DA.EDW,11]

	LDB	TD,[POINT 12,DA.EDW(TA),11]
	DPB	TD,[POINT 12,EDITW1,17]

BMASK1:	MOVEI	TA,0
	MOVE	TB,[POINT 4,TA]

BMASK2:	ILDB	TE,TC
	IDPB	TE,TB
	CAIN	TE,17
	JRST	BMASK3
	TLNE	TB,770000
	JRST	BMASK2
	PUSHJ	PP,STASHL
	JRST	BMASK1

BMASK3:	PUSHJ	PP,STASHL
	HRRZS	TE
	SUB	TE,CURLIT
	HRRM	TE,@CURLIT
	EXCH	TE,ELITPC
	ADDM	TE,ELITPC
	IORI	TE,AS.LIT
	HRLI	TE,AS.MSC
	MOVSM	TE,EDITW2

	POPJ	PP,
;CREATE MASK FOR 'B' FIELD (CONT'D)

;ITEM IS NOT EDITED, SO IT MUST BE "BLANK WHEN ZERO"

BMASK4:	MOVE	TB,ESIZEB
BMASK5:	CAIGE	TB,^D9
	JRST	BMASK6
	MOVEI	TA,0
	PUSHJ	PP,STASHL
	SUBI	TB,^D9
	JUMPG	TB,BMASK5

BMASK6:	MOVEI	TA,0
	MOVE	TC,[POINT 4,TA]
	JUMPE	TB,BMASK7
	IBP	TC
	SOJG	TB,.-1

BMASK7:	MOVEI	TB,17
	IDPB	TB,TC
	JRST	BMASK3
;ADJUST A POSITIVE LITERAL (IN TD&TC) TO MATCH THE "B" FIELD.

ADJLIT:	MOVE	TE,ESIZEB	;COMPARE INTEGRAL PLACES
	SUB	TE,ESIZEA
	SUB	TE,EDPLB
	ADD	TE,EDPLA
	JUMPGE	TE,ADJLT1

;MORE INTEGER PLACES IN LITERAL THAN "B"--DIVIDE LITERAL

	ADDB	TE,ESIZEA
	JUMPLE	TE,CPOPJ
	PUSHJ	PP,DPDIV.
	MOVEM	TB,EWORDB
	MOVEM	TA,EREMAN
	SKIPN	TD
	SKIPE	TC
	PUSHJ	PP,MSERA.
	MOVE	TD,EWORDB
	MOVE	TC,EREMAN

ADJLT1:	MOVE	TE,EDPLB	;COMPARE DECIMAL PLACES
	SUB	TE,EDPLA
	JUMPE	TE,CPOPJ
	ADDM	TE,EDPLA
	ADDM	TE,ESIZEA
	JUMPL	TE,ADJLT3

;MORE DECIMAL PLACES IN "B" THAN IN LITERAL--MULTIPLY

	CAILE	TE,^D10		;DIFFERENCE > 10?
	JRST	ADJLT2

	IMUL	TD,POWR10(TE)	;NO
	MUL	TC,POWR10(TE)
	ADD	TD,TC
	MOVE	TC,TB
	POPJ	PP,
;ADJUST LITERAL TO MATCH "B"  (CONT'D).

;MORE DECIMAL PLACES IN "B" THAN LITERAL, AND DIFFERENCE > 10.

ADJLT2:	SUBI	TE,^D11
	LSH	TE,1
	MOVEM	TC,EWORDB

	IMUL	TD,DPWR10+1(TE)
	MUL	TC,DPWR10(TE)
	ADD	TD,TB

	MOVE	TC,EWORDB
	MUL	TC,DPWR10+1(TE)
	ADD	TD,TC
	MOVE	TC,TB
	POPJ	PP,

;MORE DECIMAL PLACES IN LITERAL THAN "B"--DIVIDE

ADJLT3:	MOVMS	TE
	PUSHJ	PP,DPDIV.

	SKIPN	TB		;ANY REMAINDER?
	JUMPE	TA,CPOPJ	;NOT IF JUMP

	MOVEM	TD,EWORDB	;YES--SAVE RESULT
	MOVEM	TC,EREMAN
	PUSHJ	PP,LSERA.	;PUT OUT DIAG
	MOVE	TD,EWORDB	;RESTORE RESULT
	MOVE	TC,EREMAN
	POPJ	PP,
;DEFINITION OF AC FIELDS IN ASYFIL OPERATORS

AC1==1B30
AC2==2B30
AC3==3B30
AC4==4B30
AC5==5B30
AC17==17B30

SAC==12B30	;ACCUMULATOR USED BY SUBSCRIPT GENERATOR
KAC==AC2	;ACCUMULATOR USED TO HOLD A FIG. CONST.



;SOME CONSTANTS.

CODE9==1	;PICTURE CODE FOR "9"
CODEM==3	;FOR FLOATING "-"
CODES==10	;FOR INSERTED "-"
CODEC==4	;FOR ","
CODEP==11	;FOR "."

NEGEOP==1B<^D18+6>	;"UNARY MINUS" FLAG IN OPERAND
BYTEN6:	OCT	-6	;NEGATIVE OF SIXBIT BYTE SIZE
BYTEN7:	OCT	-7	;LIKEWISE FOR ASCII


;DIAGNOSTIC NUMBERS

LTDIAG==^D500	;LEFT-MOST TRUNCATION
RTDIAG==^D501	;RIGHT-MOST TRUNCATION
MSDIAG==^D502	;MOST SIGNIFICANT DIGIT TRUNCATION
LSDIAG==^D503	;LEAST SIGNIFICANT DIGIT TRUNCATION
NSDIAG==^D504	;NO SIZE
;ENTRANCE POINTS FOR MOVING ZEROES TO DISPLAY FIELD
MZX.:	EXP MZS.	;SIXBIT
	EXP MZA.	;ASCII

;ENTRANCE POINTS FOR MOVING SPACES TO DISPLAY FIELDS
MSX.:	EXP MLVD.	;SIXBIT
	EXP MSA.	;ASCII

;OP-CODE & AC FIELDS FOR CONVERSION UUO CALLS
GMOVET:	XWD C.DD,C.D6D7		;SIXBIT-SIXBIT, SIXBIT-ASCII
	XWD C.D7D6,C.DD		;ASCII-SIXBIT, ASCII-ASCII


;ENTRANCE TO"MOVE ZERO" ROUTINES
MZTAB:	XWD	MZS.,MZA.	;SIXBIT, ASCII
	XWD	BADCOD,MZC1.	;-,1-WORD COMP
	XWD	MZC2.,MZC1.	;2-WORD COMP, FLOAT
	XWD	BADCOD,MZED.	;-,EDITED

;ENTRANCES TO "MOVE HIGH-VALUES" ROUTINES
MHVTAB:	XWD	MHVD.,MHVD.
	XWD	BADCOD,MHVC1.
	XWD	MHVC2.,MHVC1.
	XWD	BADCOD,MHVED.

;ENTRANCES TO "MOVE LOW-VALUES" ROUTINES
MLVTAB:	XWD	MLVD.,MLVD.
	XWD	BADCOD,MLVC1.
	XWD	MLVC2.,MLVFP.
	XWD	BADCOD,MLVED.

;ENTRANCES TO "MOVE SPACES" ROUTINES
MSTAB:	XWD	MLVD.,MSA.
	XWD	BADCOD,BADFIG
	XWD	BADFIG,BADFIG
	XWD	BADCOD,MSED.

;ENTRANCES TO "MOVE QUOTES" ROUTINES
MQTAB:	XWD	MQS.,MQA.
	XWD	BADCOD,BADFIG
	XWD	BADFIG,BADFIG
	XWD	BADCOD,MQED.

;ENTRANCES TO "MOVE TODAY" ROUTINES
MTTAB:	XWD	MTD.,MTD.
	XWD	BADCOD,MTC.
	XWD	MTC.,MTC.
	XWD	BADCOD,MTED.
;TABLE OF FIGURATIVE CONSTANT TABLES

FCTAB:	EXP	MTTAB	;TODAY
	EXP	MSTAB	;SPACES
	EXP	MZTAB	;ZEROES
	EXP	MQTAB	;QUOTES
	EXP	MHVTAB	;HIGH-VALUES
	EXP	MLVTAB	;LOW-VALUES


;TABLE OF ILLEGAL MOVES

;ENTRIES IN TABLE ARE FOR CLASSES OF "A".
;BITS IN TABLE ARE FOR CLASSES OF "B".

UNDEF==1B28!1B32-400	;UNDEFINED
NE==1B29		;NUMERIC EDITED
ABE==1B30		;ALPHABETIC EDITED
ANE==1B31		;ALPHANUMERIC EDITED
NN==1B33		;NUMERIC
ABN==1B34		;ALPHABETIC
ANN==1B35		;ALPHANUMERIC

CLASST:	EXP	UNDEF		;ALPHANUMERIC
	EXP	UNDEF!NE!NN	;ALPHABETIC
	EXP	UNDEF!ABN!ABE	;NUMERIC
	EXP	-1		;UNDEFINED
	EXP	UNDEF!NE!NN	;ALPHANUMERIC EDITED
	EXP	UNDEF!NE!NN	;ALPHABETIC EDITED
	EXP	UNDEF!ABN!ABE!NN!NE ;NUMERIC EDITED
	EXP	-1		;UNDEFINED
EXTERNAL EXTLOC,EOPLOC,EOPNXT,CUREOP,OPERND,LITNXT,UUOBIT,DATLOC,ETEMAX,ETEMPC,TEMBAS
EXTERNAL EAS1PC,SUBCON,CURLIT

EXTERNAL DA.BWZ,DA.CLA,DA.EDT,DA.EDW,DA.EXS,DA.INS,DA.JST,DA.USG

EXTERNAL TB.DAT,LNKCOD

EXTERNAL EBASEX,ERESX,EINCRX,ESIZEX,EMODEX,EDPLX,EFLAGX,EBYTEX,ETABLX
EXTERNAL EBASEA,ERESA,EINCRA,ESIZEA,EMODEA,EDPLA,EFLAGA,EBYTEA,ETABLA
EXTERNAL EBASEB,ERESB,EINCRB,ESIZEB,EMODEB,EDPLB,EFLAGB,EBYTEB,ETABLB
EXTERNAL ESAVEB,ESAVBX,ESAVEA,ESAVAX,EBASAX,EBASBX,ESAVMA,ESVMAX,ESAVMB,ESVMBX
EXTERNAL ESAVAD,ESAVES,ESAVSB
EXTERNAL ESIZEZ,EWORDB,EREMAN,EMASK,OPLINE
EXTERNAL EASRJ,EAZRJ,EAQRJ,ESZERO,ESQUOT,EPWR10,ESMASK,EFPLOV
EXTERNAL ELITPC,EAS2PC,EAS3PC,EAC,LITHLD,ELITHI,ELITLO,EMOVHL,ECONRJ,ECONLJ

EXTERNAL MOVEI.,MOVEM.,MOVM.,MOVMM.,MOVN.,MOVNI.,MOVSI.,MAG.,NEG.
EXTERNAL MUL.,MULI.,IMUL.,IDIV.,DIV.11
EXTERNAL DPB.,LDB.,IDPB.,ILDB.,PUSHJ.,SKIPL.,BLT.,SETZM.,SETOM.,TDCA.,ANDM.,ORCAM.
EXTERNAL HRLOI.,HRROI.,HRLZI.,HRRZI.,SETZB.,SOJG.

EXTERNAL SUBI.,ADDI.
EXTERNAL MUL.12,MUL.21,MUL.22,DIV.22,DIV.21,DIV.12
EXTERNAL C.DD,FIX.,FLOT.1,FLOT.2
EXTERNAL C.D6D7,C.D7D6
EXTERNAL EDIT.S,EDIT.U
EXTERNAL GD6.,GD7.,PD6.,PD7.

EXTERNAL D6MODE,D7MODE,D1MODE,D2MODE,FPMODE,EDMODE,FCMODE,LTMODE,DSMODE,ZERO

EXTERNAL EPJPP,SXR,MOVSAC
EXTERNAL XWDLIT,BYTLIT,ASCLIT,SIXLIT,D1LIT,D2LIT,FLTLIT,OCTLIT
EXTERNAL AS.XWD,AS.BYT,AS.OCT,AC.DAT
EXTERNAL BYTE.S,BYTE.W,CHOP,CHAC,MAXSIZ,EOPHLD
EXTERNAL AS.EXT,AS.CNB,AS.MSC,AS.TAG,AS.LIT,AS.TMP,AS.PAR
EXTERNAL W1LN,W1CP,TCLN,TCCP,POWR10,DPWR10,EDITW1,EDITW2,EDITW3



	END
    `@  W