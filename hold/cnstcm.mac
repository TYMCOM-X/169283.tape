;COPYRIGHT 1972, DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS
;AUTHOR: S. MURPHY
	INTERN	CNSTCV
	CNSTCV=42		;VERSION DATE: APRIL 26,1973
	HISEG
;TO COMBINE CONSTANTS AT RUN TIME
;CALLED WITH THE GLOBALS
;	C1H - HIGH ORDER WD OF 1ST CONSTANT
;	C1L - LOW ORDER WD OF 1ST CONSTANTS
;	C2H - HIGH ORDER WD OF 2ND CONSTNT (HIGH ORDER WD OF RESULT
;		IS LEFT HERE)
;	C2L - LOW ORDER WD OF 2ND CONSTANT (LOW ORDER WD OF RESULT IS 
;		LEFT HERE)
;	COPRIX - TABLE INDEX FOR OPERATION TO BE PERFORMED
;		FOR ARITH OPERATIONS - 2 BITS FOR OP FOLLOWED
;			BY 2 BITS FOR VALUE-TYPE
;		FOR TYPE CONVERSIONS - "KTYPCB" (BASE IN TABLE FOR TYPE
;			CONV) PLUS 2 BITS FOR SOURCE TYPE FOLLOWED
;			BY 2 BITS FOR DESTINATION TYPE
;		FOR BOOLEAN OPERATIONS - "KBOOLB" (BASE IN TABLE FOR
;			BOOLEANS) PLUS 2 BITS  SPECIFYING
;			THE OPERATION
;
	ENTRY	CNSTCM
	EXTERN	SKERR,C1H,C1L,C2H,C2L,COPRIX

	INTERN	KARIAB		;BASE FOR ARITH OPERATIONS FOR KA10
	INTERN	KARIIB		;BASE FOR ARITH OPERATIONS FOR KI10
	INTERN	KBOOLB,KTYPCB,KDNEGB,KSPECB,KILFBA,KILFBR

	INTERN	KDPRL	;TO ROUND A DOUBLE-WD REAL DOWN TO A
			; SINGLE WD OF PRECISION. USED ONLY WITH THE
			; OPTIMIZER
	INTERN	KADPRN	;TO ROUND ^A DOUBLE PRECISION FROM KI TO KA
			; PRECISION - LEAVING IT IN KI10 FORMAT

	SREG=17		;STACK REG
	FLGREG=0	;FLAGS REGISTER
	KA10FL=4000	;FLAG FOR "COMPILING CODE FOR KA10" IS BIT 24
			; OF FLGREG - USE THIS MASK TO TEST IT
	RH=4		;HIGH ORDER WD OF RESULT DEVELOPED
			; INTO THIS REG
	RL=5		;LOW ORDER WD OF RESULT DEVELOPED
			; INTO THIS REG
	RGDSP=6		;INDEX INTO TABLE OF OPERATIONS
			; INDICATING  OPERATION TO BE PERFORMED
	T=7		;REGISTER USED AS A TEMPORARY


CNSTCM:	JFCL	17,.+1		;CLEAR FLAGS FOR OVERFLOW AND UNDERFLOW
	MOVE	RH,C1H
	MOVE	RL,C1L
	MOVE	RGDSP,COPRIX
	XCT	0(RGDSP)		;PERFORM DESIRED OPERATION
	JSP	T,.+1		;LOAD FLAGS INTO T
	TLNE	T,440140	;IF OVERFLOW,UNDERFLOW,OR DIVIDE CHECK IS
	PUSHJ	17,OVFLW	; SET, GO HANDLE THE OVERFLOW
	MOVEM	RH,C2H		;RETURN RESULTS IN GLOBALS
	MOVEM	RL,C2L		; C2H AND C2L
	POPJ	SREG,
;TABLE OF OPERATIONS TO BE PERFORMED
;CODE FOR EACH OPERATION IS IDENTICAL TO THE CODE THAT WOULD BE
;EXECUTED AT RUN-TIME.
;
;
;ARITH OPERATIONS 
; KI10
KARIIB:	ADD	RL,C2L
	DFAD	RH,C2H
	DFAD	RH,C2H
	PUSHJ	17,CMPADD
	SUB	RL,C2L
	DFSB	RH,C2H
	DFSB	RH,C2H
	PUSHJ	17,CMPSUB
	IMUL	RL,C2L
	DFMP	RH,C2H
	DFMP	RH,C2H
	PUSHJ	17,CMPMUL
	IDIV	RL,C2L
	DFDV	RH,C2H
	DFDV	RH,C2H
	PUSHJ	17,CMPDIV
;
; KA10
; ( DOUBLE-PREC CONSTANTS ARE ALL STORED IN KI10 FORMAT INSIDE THE COMPILER,
; HENCE FOR DOUBLE-PREC OPS MUST SIMULATE KI10 ARITHMETIC)
KARIAB:	ADD	RL,C2L
	PUSHJ	17,KADPAD
	PUSHJ	17,KADPAD
	PUSHJ	17,CMPADD
	SUB	RL,C2L
	PUSHJ	17,KADPSB
	PUSHJ	17,KADPSB
	PUSHJ	17,CMPSUB
	IMUL	RL,C2L
	PUSHJ	17,KADPML
	PUSHJ	17,KADPML
	PUSHJ	17,CMPMUL
	IDIV	RL,C2L
	PUSHJ	17,KADPDV
	PUSHJ	17,KADPDV
	PUSHJ	17,CMPDIV
;FOR TYPE CONVERSIONS
KTYPCB=.
;	FROM OCTAL/LOGICAL
	JFCL			;TO OCTAL/LOGICAL
	PUSHJ	17,SKERR	;TO CONTROL (SHOULD NEVER OCCUR)
	PUSHJ	17,OCTRL	;TO DOUBLE-OCTAL - THIS WD BECOMES HIGH WD
	PUSHJ	17,OCTRL	;TO LITERAL - THIS WD IS HIGH WD
	JFCL			;TO INTEGER
	PUSHJ	17,OCTRL		;TO REAL
	PUSHJ	17,OCTRL		;TO DOUBLE-PREC
	PUSHJ	17,OCTRL		;TO COMPLEX
;	FROM CONTROL
	JFCL			;TO OCTAL
	JFCL			;TO CONTROL
	PUSHJ	17,OCTRL	;TO DOUBLE-OCTAL
	PUSHJ	17,OCTRL	;TO LITERAL
	JFCL		;TO INTEGER
	PUSHJ	17,OCTRL	;TO REAL - MUST MOVE CONST2 TO CONST1
	PUSHJ	17,OCTRL	;TO DOUBLE-PREC
	PUSHJ	17,OCTRL	;TO COMPLEX
;	FROM DOUBLE-OCTAL
	PUSHJ	17,DOCTIN	;TO LOGICAL - USE HIGH WD ONLY,SET OVFLW
	PUSHJ	17,DOCTIN	;TO CONTROL
	JFCL			;TO DOUBLE-OCTAL
	JFCL			;TO LITERAL
	PUSHJ	17,DOCTIN		;TO INTEGER
	JFCL			;TO REAL
	JFCL			;TO DOUBLE-PREC
	JFCL			;TO COMPLEX
;	FROM LITERAL
	PUSHJ	17,LITINT	;TO LOGICAL - USE HIGH WD ONLY
	PUSHJ	17,LITINT	;TO CONTROL
	JFCL			;TO DOUBLE-OCTAL
	JFCL			;TO LITERAL
	PUSHJ	17,LITINT		; TO INTEGER
	JFCL			; TO REAL
	JFCL			; TO DOUBLE PREC
	JFCL			; TO COMPLEX
;	FROM INTEGER
	JFCL		;TO LOGICAL
	JFCL		;TO CONTROL
	PUSHJ	17,SKERR	;TO DOUBLE-OCTAL - SHOULD NEVER OCCUR
	PUSHJ	17,SKERR	;TO LITERAL - SHOULD NEVER OCCUR
	JFCL
	PUSHJ	17,INTDP	;TO REAL
	PUSHJ	17,INTDP	;TO DOUBLE PRECISION
	PUSHJ	17,INTCM	;TO COMPLEX
;	FROM REAL
	PUSHJ	17,RLLOG	;TO LOGICAL
	PUSHJ	17,RLLOG	;TO CONTROL
	PUSHJ	17,SKERR	;TO DOUBLE-OCTAL (SHOULD NEVER OCCUR)
	PUSHJ	17,SKERR	;TO LITERAL (SHOULD NEVER OCCUR)
	PUSHJ	17,DPINT	;TO INTEGER (SAME AS FROM DOUBLE-PREC)
	JFCL
	JFCL			;TO DOUBLE PREC (SINCE REAL KEPT 2 WDS OF PREC)
	PUSHJ	17,DPCM		;TO COMPLEX - ROUND AND USE HIGH WD
;	FROM DOUBLE PREC
	PUSHJ	17,RLLOG	;TO LOGICAL - USE HIGH WD ONLY
	PUSHJ	17,RLLOG	;TO CONTROL
	PUSHJ	17,SKERR	;TO DOUBLE-OCTAL (SHOULD NEVER OCCUR)
	PUSHJ	17,SKERR	;TO LITERAL (SHOULD NEVER OCCUR)
	PUSHJ	17,DPINT
	JFCL			;TO REAL - KEEP SAME 2 WDS OF PREC
	JFCL			;DOUBLE-PREC TO DOUBLE-PREC
	PUSHJ	17,DPCM		;DOUBLE-PREC TO COMPLEX-USE HIGH ORDER WD
;	FROM COMPLEX
	PUSHJ	17,RLLOG	;TO LOGICAL - USE REAL PART ONLY
	PUSHJ	17,RLLOG	;TO CONTROL
	PUSHJ	17,SKERR	;TO DOUBLE-OCTAL (SHOULD NEVER OCCUR)
	PUSHJ	17,SKERR	;TO LITERAL (SHOULD NEVER OCCUR)
	PUSHJ	17,CMINT	;TO INTEGER - CONVERT REAL PART
	MOVEI	RL,0		;TO REAL - USE HIGH WD ONLY
	MOVEI	RL,0		;COMPLEX TO DOUBLE-PREC- USE HIGH ORDER WD
	JFCL			;COMPLEX TO COMPLEX
;
;TO ROUND A DOUBLE-WD REAL TO A SINGLE WORD. USED WITH THE OPTIMIZER
; FOR THE CASE:
;	R=5.4
;	DP=R
; SO THAT WHEN THE CONSTANT 5.4 IS PROPAGATED, ONLY ONE WORD OF
; PRECISION WILL BE PROPAGATED
KDPRL:	PUSHJ	17,DPCM		;USE SAME ROUTINE AS IS USED FOR
				; CONVERTING DOUBLE-WD REAL TO COMPLEX
;
;
;
;TO ROUND A DOUBLE PRECISIOM FROM KI10 TO KA10 PRECISION - LEAVING IT
; IN KI10 FORMAT. USED BY ROUTINES IN P2SKEL WHICH TEST PROPERTIES
; OF CONSTANTS
KADPRN:	PUSHJ	17,RNKADP

;
;
;FOR BOOLEAN OPS - ALWAYS PERFORMED ON ONE WD ONLY
KBOOLB=.
	AND	RL,C2L
	OR	RL,C2L
	EQV	RL,C2L
	XOR	RL,C2L
;
;
;FOR NEGATION OF DOUBLE-PREC CONSTANTS (NOTE THAT ALL CONSTANTS ARE 
; STORED IN KI10 FORMAT
KDNEGB=.
	DMOVN	RH,RH		;FOR COMPILATION ON KI10
	PUSHJ	17,KADPNG		;FOR COMPILATION ON KA10
;OPERATIONS THAT TAKE MORE THAN 1 INSTR
;
;DOUBLE PREC OPS  FOR KA10
; MAINTAIN CONSTANTS IN KI10 FORMAT, SO MUST SIMULATE KI10
; DOUBLE PREC OPS
;
	EXTERN	DFA4
	EXTERN	DFS4
	EXTERN	DFM4
	EXTERN	DFD4
	EXTERN	SAVACS
;
; DOUBLE-PREC ADD
KADPAD:	MOVE	T, [10,,SAVACS]		;PRESERVE REGISTERS 10-16
	BLT	T,SAVACS+6
	MOVEI	16,C2H			;PTR TO 2ND ARG
	PUSHJ	SREG,DFA4		;DOUBLE-PREC ADD ROUTINE
					; WHEN ARG1 IS IN REG 4
	MOVE	T, [SAVACS,,10]		;RESTORE ACS 10-16
	BLT	T,16
	POPJ	17,
;
;DOUBLE PREC SUBTRACT
KADPSB:	MOVE	T, [10,,SAVACS]		;PRESERVE REGISTERS 10-16
	BLT	T,SAVACS+6
	MOVEI	16,C2H			;PTR TO 2ND ARG
	PUSHJ	SREG,DFS4		;DOUBLE-PREC SUB ROUTINE
					; WHEN ARG1 IS IN REG 4
	MOVE	T, [SAVACS,,10]		;RESTORE ACS 10-16
	BLT	T,16
	POPJ	17,
;
;DOUBLE-PREC MULTIPLY
KADPML:	MOVE	T, [10,,SAVACS]		;PRESERVE REGS 10-16
	BLT	T,SAVACS+6
	MOVEI	16,C2H			;PTR TO 2ND ARG
	PUSHJ	SREG,DFM4		;DOUBLE-PREC MUL ROUTINE
					; WHEN ARG1 IS IN REG 4
	MOVE	T, [SAVACS,,10]		;RESTORE ACS 10-16
	BLT	T,16
	POPJ	17,
;
; DOUBLE-PREC DIVIDE
KADPDV:	MOVE	T,[10,,SAVACS]		;PRESERVE REGS 10-16
	BLT	T,SAVACS+6
	MOVEI	16,C2H			;PTR TO 2ND ARG
	PUSHJ	SREG,DFD4		;DOUBLE-PREC DIV ROUTINE
					; WHEN ARG1 IS IN REG 4
	MOVE	T, [SAVACS,,10]		;RESTORE ACS 10-16
	BLT	T,16
	POPJ	17,
;COMPLEX ARITHMETIC
;
;COMPLEX ADD
CMPADD:	FADR	RH,C2H
	FADR	RL,C2L
	POPJ	17,
;
;COMPLEX SUBTRACT
CMPSUB:	FSBR	RH,C2H
	FSBR	RL,C2L
	POPJ	17,
;
;COMPLEX MULTIPLY
CMPMUL:	PUSHJ	17,SKERR	;DO NOT FOLD COMPLEX MULTIPLICATION
;
;COMPLEX DIVIDE
CMPDIV:	PUSHJ	17,SKERR		;DO NOT FOLD COMPLEX DIVISION
;

;
;NEGATION OF A DOUBLE-PREC CONSTANT ON THE KA10 (CONSTANT IS IN KI10
; FORMAT)
KADPNG:	SETCM	RH,RH
	MOVNS	RL
	TLZ	RL,(1B0)
	SKIPN	RL
	AOS	RH
	POPJ	17,
;FOR FOLDING OF SPECIAL-OPS (P2MUL,P2DIV,PLPL1MUL,SQR,CUBE,P4) - USED ONLY BY
; THE OPTIMIZER WHEN CONSTANTS ARE PROPAGATED
KSPECB:	PUSHJ	17,P2MI
	PUSHJ	17,P2MR
	PUSHJ	17,P2MR		;DOUBLE-PREC P2MUL OF KI10 FORMAT NOS
					; IS SAME AS FOR REAL

	PUSHJ	17,P2MC
;
	PUSHJ	17,P2DI
	PUSHJ	17,P2DR
	PUSHJ	17,P2DR		;P2DIV OF DOUBLE-PREC KI10 NOS IS SAME
				; AS FOR REAL NOS

	PUSHJ	17,P2DC
;
	PUSHJ	17,P21MI
	PUSHJ	17,P21MD	;FOR REALS - PERFORM DOUBLE-PREC OPERATIONS
	PUSHJ	17,P21MD
	PUSHJ	17,P21MC
;
;	FOR SQUARE
	IMUL	RL,RL
	PUSHJ	17,SQRRL
	PUSHJ	17,SKERR	;HAVE NOT IMPLEMENTED OPTIMS FOR DOUBLE-PREC
	PUSHJ	17,SKERR	; OR COMPLEX
;
;	FOR CUBE
	PUSHJ	17,CUBINT
	PUSHJ	17,CUBRL
	PUSHJ	17,SKERR
	PUSHJ	17,SKERR
;
;	FOR POWER OF 4
	PUSHJ	17,P4INT
	PUSHJ	17,P4REAL
	PUSHJ	17,SKERR
	PUSHJ	17,SKERR
P2MI:	MOVE	T,C2L
	ASH	RL,0(T)
	POPJ	17,
;
P2MR:	MOVE	T,C2L
	FSC	RH,0(T)
	POPJ	17,
;
P2MC:	MOVE	T,C2L
	FSC	RH,0(T)
	FSC	RL,0(T)
	POPJ	17,
;
P2DI:	MOVE	T,C2L
	SKIPGE	RL
	ADDI	RL,0(T)
	ASH	RL,0(T)
	POPJ	17,
;
P2DR:	MOVN	T,C2L
	FSC	RH,0(T)
	POPJ	17,
;
P2DC:	MOVN	T,C2L
	FSC	RH,0(T)
	FSC	RL,0(T)
	POPJ	17,
;
P21MI:	MOVE	T,C2L
	ASH	RL,0(T)
	ADD	RL,C1L
	POPJ	17,
;
P21MR:	MOVE	T,C2L
	FSC	RH,0(T)
	FADR	RH,C1H
	POPJ	17,
;
P21MD:	MOVE	T,C2L
	FSC	RH,0(T)
;TO ADD DOUBLE-PREC NOS THAT ARE KI10 FORMAT ON A KA10, MUST
; USE SIMULATION ROUTINES
	MOVE	T, [10,,SAVACS]	;PRESERVE REGS 10-16
	BLT	T,SAVACS+6
	MOVEI	16,C1H
	PUSHJ	SREG,DFA4
	MOVE	T, [SAVACS,,10]		;RESTORE ACS 10-16
	BLT	T,16
	POPJ	17,
;
P21MC:	MOVE	T,C2L
	FSC	RH,0(T)
	FADR	RH,C1H
	FSC	RL,0(T)
	FADR	RL,C1L
	POPJ	17,
;
;
;FOR SQUARE OF  A REAL - KEEP 2 WDS OF PRECISION
SQRRL:	MOVEM	RH,C2H	;SET C2H-C2L TO A COPY OF THE NUMBER TO BE 
	MOVEM	RL,C2L	;SQUARED (SO CAN USE THE DOUBL-PREC MUL ROUTINE)
	PUSHJ	17,KADPML	;MULTIPLY THE CONSTANT BY ITSELF
	POPJ	17,
;
;
;	FOR CUBE
CUBINT:	IMUL	RL,RL
	IMUL	RL,C1L
	POPJ	17,
;
;TO CUBE A REAL - KEEP 2 WDS OF PRECISION
CUBRL:	MOVEM	RH,C2H	;SET C2H-C2L TO A COPY OF THE NUMBER TO BE 
	MOVEM	RL,C2L	; CUBED
	PUSHJ	17,KADPML	;MULTIPLY THE NUMBER BY ITSELF
	PUSHJ	17,KADPML	; MULTIPLY THE RESULT BY THE ORIGINAL NUMB
	POPJ	17,
;
;RAISE TO POWER OF 4
P4INT:	IMUL	RL,RL
	IMUL	RL,RL
	POPJ	17,
;
P4REAL:	PUSHJ	17,SQRRL	;SQUARE THE NUMBER
	PUSHJ	17,SQRRL	;SQUARE THE RESULT
	POPJ	17,

;FOR THE FOLDING OF IN-LINE-FNS
;
KILFBA:	MOVM	RH,RH
	PUSHJ	17,SKERR		;SHOULD NEVER GET HERE IN RELEASE 1 (IABS)
	PUSHJ	17,ISIGN
	PUSHJ	17,DIM
	PUSHJ	17,MOD
	PUSHJ	17,MAX
	PUSHJ	17,MIN
;FOR ARGS REAL
KILFBR:	MOVM	RH,RH
	PUSHJ	17,SKERR
	PUSHJ	17,SIGN
	PUSHJ	17,DIM
	PUSHJ	17,SKERR	;PUSHJ	17,MOD
	PUSHJ	17,AMAX
	PUSHJ	17,AMIN
;
;
SIGN:	MOVM	RH,RH
	SKIPGE	C2H
	MOVNS	RH,RH
	POPJ	17,
;
DIM:	CAMG	RH,C2H
	TDZA	RH,RH
	FSBR	RH,C2H
	POPJ	17,
;
MOD:	MOVE	RH,RL
	IDIV	RH,C2L
	POPJ	17,
;
MAX:	CAMGE	RL,C2L
	MOVE	RL,C2L
	POPJ	17,
;
MIN:	CAMLE	RL,C2L
	MOVE	RL,C2L
	POPJ	17,

AMAX:	CAMGE	RH,C2H
	MOVE	RH,C2H
	POPJ	17,
;
AMIN:	CAMLE	RH,C2H
	MOVE	RH,C2H
	POPJ	17,
;
ISIGN:	MOVM	RL,RL
	SKIPGE	C2L
	MOVNS	RL,RL
	POPJ	17,



;
;
;
;TYPE CONVERSION
;
;FROM LOGICAL/OCTAL TO REAL,DOUBLE-PREC,COMPLEX
OCTRL:	MOVE	RH,RL
	MOVEI	RL,0
	POPJ	17,
;FROM DOUBLE-OCTAL TO INTEGER
; OR LITERAL TO INTEGER
LITINT:	MOVE	RL,RH
	MOVEI	RH,0
	POPJ	17,
DOCTIN:	EXCH	RL,RH
	JUMPE	RH,CPOPJ
	MOVEI	RH,0		;CLEAR UNUSED HALF
	JRSTF	@[XWD 400000,CPOPJ]	;SET AROV
;
;FROM REAL (DOUBLE-PREC OR COMPLEX) TO LOGICAL. USE HIGH ORDER OR
; REAL PART ONLY
RLLOG:	MOVE	RL,RH
	MOVEI	RH,0
	POPJ	17,
;
;FROM INTEGER TO  COMPLEX
INTCM:	MOVE	RH, RL		;MOVE INTEGER INTO WD WHER REAL PART IS TO
				; BE LEFT
	IDIVI	RH,400		;DIVIDE INTEGER INTO 2 PIECES
	SKIPE	RH		;IMPLIES INTEGER LESS THAN 18 BITS
	TLC	RH, 243000	;SET EXP TO 254 (27+17 DECIMAL)
	TLC	RL, 233000	;SET EXP OF 2ND PART TO 233 (27 DECIMAL)
	FADR	RH,RL		;NORMALIZE AND ADD
	MOVEI	RL,0
	POPJ	17,
;FROM INTEGER TO DOUBLE-PREC OR REAL (SINCE WE KEEP 2 WDS)
INTDP:	MOVE	RH, RL		;PUT INTEGER INTO REG IN WHICH HIGH ORDER
				; PART WILL BE RETURNED
	IDIVI	RH, 400		;DIVIDE INTO 2 PIECES
	SKIPE 	RH		;IMPLIES INTEGER LESS THAN 18 BITS
	TLC	RH, 243000	;SET EXP TO 254 (27 DECIMAL)
	TLC	RL, 233000	;SET EXP OF LOW PART TO 233 (27 DECIMAL)
	FADL	RH, RL		;NORMALIZE AND ADD
	LSH	RL,10		;GET RID OF LOW EXPONENT
	POPJ	17,
;FROM  COMPLEX TO INTEGER
CMINT:	MOVM	RH, RH		;USE  MAGNITUDE ONLY
	MULI	RH,400		;SEPARATE FRACTION AND EXPONENT
				;(EXPONENT IN RH, FRACTION IN RL)
	ASH	RL, -243(RH)	;USE THE EXPONENT AS AN INDEX REGISTER
	SKIPGE	C1H		;SET THE CORRECT SIGN
	MOVNS	RL,RL
	MOVEI	RH,0		;ZERO 1ST WD
	POPJ	17,
;FROM DOUBLE PREC OR REAL (SINCE WE KEEP 2 WDS OF ACCURACY) TO INTEGER
DPINT:
	;TAKE THE ABSOLUTE VALUE - IF THE NUMBER IS NEGATIVE, MUST
	; NEGATE A KI10 FORMAT NUMBER (THIS CODE RUNS ON KA OR KI)
	SKIPGE	RH
	PUSHJ	17,KADPNG	;NEGATIVE, MAKE POSITIVE

	;IF ARE COMPILING FOR THE KA10, THIS DOUBLE-PREC NUMBER WILL
	; BE UNROUNDED. IF SO, ROUND IT.
	TRNE	FLGREG,KA10FL
	PUSHJ	17,ROUNKA

	HLRZ	T,RH		;GET EXPONENT INTO RIGHT
	ASH	T,-9		; 8 BITS OF REGISTER "T"
	TLZ	RH,777000	;WIPE OUT EXPONENT IN ARG
	ASHC	RH,-201-^D26(T)	;CHANGE FRACTION BITS TO INTEGER
	SKIPGE	C1H		;IF ORIGINAL VAL WAS NEGATIVE
	MOVNS	RH		; NEGATE THE INTEGER RESULT
;
	MOVE	RL,RH		;ALWAYS LEAVE INTEGER RESULTS IN RL
	MOVEI	RH,0		; WITH RH EQL TO 0
;
	POPJ	17,
;
;FROM  DOUBLE PREC TO COMPLEX - ROUND HIGH WD, ZERO IMAGINARY PART
DPCM:	
	JUMPE	RH,CPOPJ	;FOR ZERO - DO NOTHING
	;MUST FIRST TAKE ABSOLUTE VALUE - IF THE NUMBER IS NEG, MUST
	; NEGATE A KI10 FORMAT NUMBER (THIS CODE RUNS ON KA OR KI)
	SKIPGE	RH
	PUSHJ	17,KADPNG	;NEGATIVE, MAKE POSITIVE
	TLNN	RL,200000	;IS ROUNDING NECESSARY
	JRST	DPRL2
	AOS	RH		;YES, ROUND INTO HIGH WORD
	TLO	RH,400		;TURN ON HI FRAC BIT IN CASE CARRY
				;  ADDED 1 TO EXPONENT
	JUMPGE	RH,DPRL2
	HRLOI	RH,377777	;OVERFLOW, MAKE LARGEST NUMBER AND
	JRSTF	@[XWD 440000,DPRL2]	;  SET AROV AND FOV
DPRL2:	SKIPGE	C1H		;IF ORIGINAL NUMBER WAS NEG
	MOVNS	RH		; THEN NEGATE THE RESULT
	MOVEI	RL,0		;CLEAR LOW WORD
	POPJ	17,



;TO ROUND A KI10 FORMAT POSITIVE DOUBLE PREC NUMBER TO KA10 PRECISION,
; BUT LEAVING IT IN KI10 FORMAT
; DO NOT WANT TO FALSELY SET OVERFLOW FLAG
ROUNKA:
	JUMPE	RH,CPOPJ	;FOR ZERO - DO NOTHING

	TLO	RL,(1B0)	;MAKE LOW WD NEGATIVE TO PREVENT OVFLW
	ADDI	RL,200		;ADD ROUNDING CONSTANT
	TRZ	RL,377		;GET RID OF INSIGNIFICANT BITS
	TLZN	RL,(1B0)	;TEST FOR CRY TO HI
	ADDI	RH,1
	TLO	RH,(1B9)	;ALWAYS SET HIGH BIT OF MANTISSA
	POPJ	17,

;
;
;
;TO ROUND A KI10 FORMAT NUMBER (EITHER POS OR NEG) TO KA10 PRECISION
; BUT LEAVE IT IN KI10 FORMAT
RNKADP:	SKIPGE	RH		;IF THIS NUMBER IS NEGATIVE
	PUSHJ	17,KADPNG	; COMPLEMENT IT

	PUSHJ	17,ROUNKA	;ROUND THIS POSITIVE NUMBER TO KA10 PREC

	SKIPGE	C1H		;IF THE ORIGINAL NUMBER WAS NEGATIVE
	PUSHJ	17,KADPNG	; THEN TAKE THE COMPLEMENT OF THE ROUNDED NUM

	POPJ	17,

;
;WHEN AN OVERFLOW/UNDERFLOW WAS DETECTED
;
;
OVFLW:
	; FIRST TYPE OUT A MESSAGE
	MOVE	T,ISN##
	MOVEM	T,ENTRY##	;SET ARG FOR THE OUTPUT ROUTINE TO STMNT NUMB
	PUSH	17,[^D64]	;ERROR NUMBER 64(DEC) TO BE PRINTED
	PUSHJ	17,WARNOUT##
	SUB	17,[1,,1]


	;DETERMINE THE TYPE OF THE RESULT BEING GENERATED
	; LEAVE THE REGISTER "RGDSP" SET TO 0 FOR INTEGER, 1 FOR REAL,
	; 2 FOR DOUBLE-PREC, 3 FOR COMPLEX
	;
	;THE FIRST ENTRIES IN THE DISPATCH TABLE ARE ARITH FOLLOWED BY TYPE
	; CONVERSION. IN BOTH THESE CASES, THE INDEX INTO THE TABLE WAS BUILT
	; BY ADDING THE BASE FOR THE GIVEN OPERATION TO A 2 BIT TYPE CODE.
	CAIL	RGDSP,KBOOLB	
	JRST	OVFLW1
	; IF DISPATCH-INDEX WAS FOR A TYPE-CNV OR ARITH OP, CAN GET TYPE
	; OF RES BY SUBTRACTING BASE OF TABLE AND THEN USING LAST 2 BITS
	SUBI	RGDSP,KARIIB
	ANDI	RGDSP,3
	JRST	HAVTYP
OVFLW1:	

	; IF THE VAL OF COPRIX IS BETWEEN THE BASE FOR BOOLEANS AND THE 
	; THE BASE FOR SPECIAL-OPS, THEN THE OVERFLOW WAS CAUSED IN
	;  DOUBLE-PREC NEGATION. VALUE TYPE IS ALWAYS DOUBLE-PREC
	CAIL	RGDSP,KSPECB
	JRST	OVFLW2
	MOVEI	RGDSP,2
	JRST	HAVTYP
OVFLW2:

	;IF COPRIX IS IN THE RANGE USED FOR SPECIAL-OPS - USE THE LAST 2 BITS
	CAIL	RGDSP,KILFBA
	JRST	OVFLW3
	SUBI	RGDSP,KSPECB
	ANDI	RGDSP,3
	JRST	HAVTYP
OVFLW3:

	;FOR IN-LINE-FNS ARGS ARE INTEGER BETWEEN "KILFBA" AND "KILFBR"
	; REAL IF GREATER THAN "KILFBR"
	CAIL	RGDSP,KILFBR
	JRST	OVFLW4
	MOVEI	RGDSP,0
	JRST	HAVTYP
OVFLW4:	MOVEI	RGDSP,1



;	AFTER HAVE SET THE REGISTER "RGDSP" TO CONTAIN THE VALTYPE OF
;        THE RESULT
HAVTYP:
	JUMPE	RGDSP,CPOPJ	;IF THE TYPE IS INTEGER, DO NOT ALTER THE
				; RESULT

	JSP	T,.+1		;
	TLNE	T,040040	;LOOK AT THE FLAGS AGAIN
	JRST	OVERFL		; IF EITHER OVERFLOW OR DIVIDE-CHECK,
				; TREAT AS AN OVERFLOW

	;
	; FOR UNDERFLOW - SET THE RESULT TO 0
	SETZB	RH,RL
CPOPJ:	POPJ	17,		;GO STORE THE RESULT AND RETURN

	;
	;FOR OVERFLOW (OR DIVIDE CHECK) - SET THE RESULT TO THE HIGHEST
	; NUMBER (NEG OR POS) AND RETURN
OVERFL:	JUMPL	RH,NEGNUM
	HRLOI	RH,377777
	CAIE	RGDSP,1
	HRLOI	RL,377777		;IF THE VALTYPE WAS DOUBLE-PREC
					; OR COMPLEX
	POPJ	17,
;
;      IF THE VAL WAS NEG - USE THE LARGEST NEG NUMBER
NEGNUM:
	CAIN	RGDSP,2
	JRST	DPNEGN
	MOVE	RH,[400000000001]
	CAIN	RGDSP,3
	MOVE	RL,[400000000001]	;IF THE TYPE WAS COMPLEX, SET THE IMAGIN
					; PART AS WELL AS THE REAL PART
	POPJ	17,
;
;	FOR A DOUBLE-PREC, WHEN WANT THE LARGEST NEGATIVE DP NUMBER
DPNEGN:	HRLZI	RH,400000
	MOVEI	RL,1
	POPJ	17,

	END
	
    