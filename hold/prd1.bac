! 07 JUN 73    PRODUCT/STATUS REPORTS   MH

GLOBAL START:
GLOBAL %PROD

DEF D(X) AS 
DEF TRUE AS 1
DEF FALSE AS 0
DEF QTY AS 1
DEF COST AS 2
DEF REV AS 3
DEF PROFIT AS 4
DEF LINF AS CR;LC(1)
DEF TOT(A,B) BY
 ADD(A,B)
 PR.TOTALS(B);CR
 LC(1); ZERO(B)
ENDM TOT
DEF TOT1(A) BY
 PR.TOTALS(A); CR
 LC(1); ZERO(A)
ENDM TOT1
DEF INDENT AS SP(5)
DEF INDENT.PROD AS SP(6)
DEF INDENT.MOD AS SP(16)
DEF INDENT.TRANS AS SP(26)
DEF INDENT.BILL AS SP(36)
DEF INDENT.STAT AS SP(45)
DEF S.INDENT.TRANS AS SP(6)
DEF S.INDENT.PROD AS SP(16)
DEF S.INDENT.MOD AS SP(26)
DEF S.T.TRANS AS T.PROD
DEF S.T.PROD AS T.MOD
DEF S.T.MOD AS T.TRANS
DEF T.PROD AS INDENT.PROD;OUTTT;SP(43)
DEF T.MOD  AS INDENT.MOD ;OUTTT;SP(33)
DEF T.TRANS AS INDENT.TRANS;OUTTT;SP(23)
DEF T.BILL  AS INDENT.BILL ;OUTTT;SP(13)
DEF PRE.PROD AS SP(6)
DEF PRE.MOD  AS SP(6)
DEF PRE.TRANS AS SP(6)
DEF PRE.BILL AS SP(6)
DEF PRE.STAT AS SP(5)
DEF S.PRE.TRANS AS SP(6)
DEF S.PRE.PROD AS SP(6)
DEF S.PRE.MOD AS SP(6)
DEF OUTTT AS OUT('TOTAL')
DEF PAGE.SIZE AS 57
DEF EJECT AS W(OUT.FN, CARRET-1)
DEF OUTNS(N,S) AS PN(OUT.FN,N,10,S)
DEF OUTN(N,W) AS PN(OUT.FN,N,W,0)
DEF OUT(X) AS FMSG(OUT.FN,X)
DEF CR AS W(OUT.FN, CARRET)
DEF SP(N) AS SPC(OUT.FN, N)

DEF PROD.REP AS 1
DEF STATUS.REP AS 2
DEF DIST.PROD.REP AS 3
DEF DIST.STATUS.REP AS 4


!
%PROD

LOCAL IN.FN, OUT.FN, LINE, PAGE.NUM, LINE.CNT, DISTRICT, PRODUCT
LOCAL DATE.STR(1:2), LEVEL, BILL.SW
LOCAL NBILL,NDIST,NPROD,NMODEL,NTRANS,NQCRP(1:4)
LOCAL  BILL, DIST, PROD, MODEL, TRANS, QCRP(1:4)
LOCAL NSTATUS(1:3), STATUS(1:3)
LOCAL BILL.TOT(1:4), TRANS.TOT(1:4), MODEL.TOT(1:4), STATUS.TOT(1:4)
LOCAL PROD.TOT(1:4), DIST.TOT(1:4), GRAND.TOT(1:4)
LOCAL EOF.PROD:, EOF.D.PROD:, EOF.STAT:, EOF.D.STAT:

LOCAL %ADD, %CDTS
LOCAL %CNTSC, %CSTN, %FMSG, %FILL.CHAR, %FPRINT
LOCAL %GET.REC, %GET.VALUES, %MOV.VALUES, %MV.FLD, %INITIT
LOCAL %LC
LOCAL %PN, %PS, %PAGE
LOCAL %PR.DIST, %PR.PROD, %PR.MODEL, %PR.TRANS, %PR.BILL
LOCAL %PR.TOTALS, %PR.GRAND
LOCAL %SPR.DIST, %SPR.PROD, %SPR.MODEL, %SPR.TRANS
LOCAL %SPC, %STR.COMP
LOCAL %TERM.PROD, %TERM.MODEL, %TERM.TRANS, %TERM.BILL, %TERM.DIST
LOCAL %TERM.STATUS
LOCAL %STERM.PROD, %STERM.MODEL, %STERM.TRANS, %STERM.BILL
LOCAL %STERM.DIST
LOCAL %TOT.DIST, %TOT.PROD, %TOT.MODEL, %TOT.TRANS, %TOT.BILL
LOCAL %TOT.STATUS
LOCAL %STOT.DIST, %STOT.TRANS, %STOT.PROD, %STOT.MODEL, %STOT.BILL
LOCAL %ZERO

!
START: NULL
\\->START

INITIT(0)
INITIT(PROD.REP)
PAGE
LINE _ GET.REC(IN.FN)
GET.VALUES(LINE)
MOV.VALUES
PR.PROD

LOOP DO
 LEVEL _ FALSE
ADD(STATUS.TOT,QCRP)
GET.VALUES(GET.REC(IN.FN))
EIF NPROD#PROD THEN TERM.PROD
ORIF NMODEL#MODEL THEN TERM.MODEL
ORIF NTRANS#TRANS THEN TERM.TRANS
ORIF NBILL#BILL THEN TERM.BILL
ORIF NSTATUS(1)#STATUS(1) THEN TERM.STATUS
ELSE MOV.VALUES
END     !END LOOP

EOF.PROD: NULL
 CLOSE(IN.FN)
 MOV.VALUES
 TOT.PROD
 PR.GRAND
 MSG('PRODUCT REPORT FINISHED.$')

!
INITIT(DIST.PROD.REP)
LINE _ GET.REC(IN.FN)
GET.VALUES(LINE)
MOV.VALUES
PR.DIST

LOOP DO
 LEVEL _ FALSE
 ADD(STATUS.TOT,QCRP)
 GET.VALUES(GET.REC(IN.FN))
 EIF NDIST#DIST THEN TERM.DIST
 ORIF NPROD#PROD THEN TERM.PROD
 ORIF NMODEL#MODEL THEN TERM.MODEL
 ORIF NTRANS#TRANS THEN TERM.TRANS
 ORIF NBILL#BILL THEN TERM.BILL
 ORIF NSTATUS(1)#STATUS(1) THEN TERM.STATUS
 ELSE MOV.VALUES
 MOV.VALUES
END     !END LOOP

EOF.D.PROD: NULL
 CLOSE(IN.FN)
 MOV.VALUES
 TOT.DIST
 PR.GRAND
 MSG('DISTRICT PRODUCT REPORT FINISHED.$')
!
INITIT(STATUS.REP)
PAGE
LINE _ GET.REC(IN.FN)
GET.VALUES(LINE)
MOV.VALUES
SPR.TRANS

LOOP DO
 LEVEL _ FALSE
 ADD(STATUS.TOT,QCRP)
 GET.VALUES(GET.REC(IN.FN))
 EIF NTRANS#TRANS THEN STERM.TRANS
 ORIF NPROD#PROD THEN STERM.PROD
 ORIF NMODEL#MODEL THEN STERM.MODEL
 ORIF NBILL#BILL THEN STERM.BILL
 ORIF NSTATUS(1)#STATUS(1) THEN TERM.STATUS
 ELSE MOV.VALUES
 MOV.VALUES
END     !END LOOP
EOF.STAT: NULL
 CLOSE(IN.FN)
 MOV.VALUES
 STOT.TRANS
 PR.GRAND
 MSG('STATUS REPORT FINISHED.$')
!
INITIT(DIST.STATUS.REP)
LINE _ GET.REC(IN.FN)
GET.VALUES(LINE)
MOV.VALUES
SPR.DIST

LOOP DO
 LEVEL _ FALSE
 ADD(STATUS.TOT,QCRP)
 GET.VALUES(GET.REC(IN.FN))
 EIF NDIST#DIST THEN STERM.DIST
 ORIF NTRANS#TRANS THEN STERM.TRANS
 ORIF NPROD#PROD THEN STERM.PROD
 ORIF NMODEL#MODEL THEN STERM.MODEL
 ORIF NBILL#BILL THEN STERM.BILL
 ORIF NSTATUS(1)#STATUS(1) THEN TERM.STATUS
 ELSE MOV.VALUES
 MOV.VALUES
END     !END LOOP

EOF.D.STAT: NULL
 CLOSE(IN.FN)
 MOV.VALUES
 STOT.DIST
 PR.GRAND
 MSG('DISTRICT STATUS REPORT FINISHED.$JOB COMPLETE.$')
 MSG('THESE REPORTS CAN BE PRINTED FROM FILE "PITREP".$')
 CLOSE(OUT.FN)
 EXIT
!
%PAGE
LOCAL TITL,S
EJECT
IF PRODUCT THEN TITL_'PRODUCT' ELSE TITL_'STATUS'
IF DISTRICT THEN S_0 ELSE S_12
OUT(@DATE.STR(1)); SP(5)
OUT(TITL);OUT(' REPORT')
IF DISTRICT THEN OUT(' BY DISTRICT')
SP(47+S); OUT('PAGE '); OUTN((INC PAGE.NUM),3); CR;CR
IF PRODUCT THEN OUT("     PRODUCT    MODEL  TRANSACT'N") &
           ELSE OUT("   TRANSACT'N  PRODUCT    MODEL  ")
OUT(' BILLABLE   BILLING ')
OUT('       QTY      COST       REV    PROFIT');CR
SP(6); IF PRODUCT THEN SP(20)
OUT('TYPE')
SP(15); IF NOT PRODUCT THEN SP(20)
OUT('STATUS');CR;CR
LINE.CNT _ 6            !RESET LINE COUNTER
RETURN
END PAGE





%GET.VALUES(LINE)
LOCAL TRM,CHAR
DEF N(START,WIDTH) AS CSTN(MV.FLD(LINE,START-1,WIDTH),@TRM,10)

D(MSG('GET.VALUES$'))
NSTATUS(1) _ CH(LINE,7)         !C OR D
NSTATUS(2) _ CH(LINE,8)         !I, T OR BLANK
NSTATUS(3) _ CH(LINE,9)        !T OR BLANK

IF CHAR _ CH(LINE,11) = $Y THEN NBILL _ 1 ELSE NBILL _ 0
NDIST _ N(19,2)
FILL.CHAR(LINE,48-1,4,@NPROD)     !FILLS FIELD INTO NPROD
FILL.CHAR(LINE,53-1,4,@NMODEL)
FILL.CHAR(LINE,69-1,4,@NTRANS)
NQCRP(QTY) _ N(85,4)
NQCRP(COST)_N(90,13)
NQCRP(REV)_N(104,13)
NQCRP(PROFIT) _ NQCRP(REV)-NQCRP(COST)

RETURN
END GET.VALUES
!




%FILL.CHAR(LINE,START,LEN,@WD)
!GIVEN BUFFER ADDRESS, START COLUMN, LENGTH AND WORDS TO STORE INTO
!RETURNS CHPT PTR TO 1 CHAR BEFORE STRING. EOLIT TERMINATES STRING.

LOCAL P1, P2, P3, I

P1 _ CHPT(LINE, START-1)
P2 _ P3 _ CHPT(@WD, -1)
FOR I_0 TO LEN-1  NCHV P2 _ NCHV P1
NCHV P2 _ E.O.LIT

RETURN (P3)

END FILL.CHAR


%CNTSC(N,PTR,@I,S)
   LOCAL A(0:9),APTR,Q1,Q2
   I_0; APTR_CHPT(A,-1); NCHV APTR_EOLIT

   IF N<0 THEN [N_-N; INC I; NCHV PTR_$-]

   IF S#0 THEN [N;Q2]_N DIVMOD S

   LOOP DO
      [N;Q1]_N DIVMOD 10
      NCHV APTR_Q1+$0
      WHILE N#0
   END

   NCHV APTR

   WHILE Q1_PCHV APTR#EOLIT THEN [INC I; NCHV PTR_Q1]

   IF S#0 THEN DO
      NCHV PTR_$.
      INC I
      LOOP DO
         WHILE S>1
         S_S/10
         [Q1;Q2]_Q2 DIVMOD S
         INC I
         NCHV PTR_Q1+$0
      END
   END

   NCHV PTR_EOLIT
   RETURN
END CNTSC


%FMSG(FN,STR)
   LOCAL PTR
   PTR_CHPT(STR,-1)
   WHILE NCHV PTR#EOLIT THEN W(FN,IF CHV PTR=$$ THEN CARRET ELSE CHV PTR)
   RETURN

   %%FPRINT(FN,STR)
      PTR_CHPT(STR,-1)
      WHILE NCHV PTR#EOLIT THEN W(FN,CHV PTR)
      RETURN
END FMSG

%SPC(FN,N)
 REPEAT N W(FN,$ )
 RETURN
END SPC

%PN(FN,N,F,S)
 LOCAL STR(0:9),PTR,L
 PTR_CHPT(STR,-1)
 CNTSC(N,PTR,@L,S)
 SPC(FN,F-L)
 FPRINT(FN,STR)
 RETURN
END PN

%PS(FN,PTR,N)
 W(FN,$ )
 PTR_CHPT(PTR,-1)
 REPEAT N W(FN,IF NCHV PTR=EOLIT THEN $  ELSE CHV PTR)
 RETURN
END PS

%CSTN(PTR,@TCH,B)
 LOCAL N,MFLG,CNT,%PST
 N_MFLG_CNT_0
 LOOP WHILE NCHV PTR=$ 
 IF CHV PTR=$- THEN INC MFLG ELSE PCHV PTR
 PST; CNT_0
 IF CHV PTR=$. THEN PST
 TCH_CHV PTR
 IF MFLG#0 THEN N_-N
 RETURN [N;CNT]
 %PST
  WHILE $0<=NCHV PTR<=B+$0 THEN [INC CNT; N_N*B+(CHV PTR)-$0]
  RETURN
 END PST
END CSTN


%MOV.VALUES
LOCAL I

D(MSG('MOV.VALUES$'))
FOR I_1 TO 3 STATUS(I)_NSTATUS(I)
BILL _ NBILL
DIST _ NDIST
PROD _ NPROD
MODEL _ NMODEL
TRANS _ NTRANS
FOR I_1 TO 4 QCRP(I)_NQCRP(I)           !QTY,COST,REV,PROFIT

RETURN 
END MOV.VALUES

%GET.REC(FN)
D(MSG('GET.REC$'))
GETLINE(FN)
RETURN(FREE)
END GET.REC

%MV.FLD(LINE,START,LEN)
!GIVEN BUFFER ADDRESS, START COLUMN, LENGTH
!RETURNS CHPT PTR TO 1 CHAR BEFORE STRING. EOLIT TERMINATES STRING.

LOCAL P1, P2, P3, I, TEMP(1:10)

P1 _ CHPT(LINE, START-1)
P2 _ P3 _ CHPT(@TEMP(1), -1)
FOR I_0 TO LEN-1  NCHV P2 _ NCHV P1
NCHV P2 _ E.O.LIT

RETURN (P3)

END MV.FLD



%LC(N)
IF (LINE.CNT+_N)>=PAGE.SIZE THEN PAGE
RETURN
END LC


%STR.COMP(S1,S2)
LOCAL P1,P2,A,B

P1 _ CHPT(S1,-1)
P2 _ CHPT(S2,-1)
WHILE (A_NCHV(P1))=(B_NCHV(P2))#E.O.LIT THEN NULL
RETURN IF A=B THEN 1 ELSE 0
END STR.COMP
!
%TERM.DIST
D(MSG('TERM.DIST$'))
TOT.DIST
MOV.VALUES
PR.DIST
RETURN
END TERM.DIST


%TERM.PROD
D(MSG('TERM.PROD$'))
TOT.PROD
MOV.VALUES
PR.PROD
RETURN
END TERM.PROD


%TERM.MODEL
D(MSG('TERM.MODEL$'))
TOT.MODEL
MOV.VALUES
PR.MODEL
RETURN
END TERM.MODEL


%TERM.TRANS
D(MSG('TERM.TRANS$'))
TOT.TRANS
MOV.VALUES
PR.TRANS
RETURN
END TERM.TRANS


%TERM.BILL
D(MSG('TERM.BILL$'))
TOT.BILL
MOV.VALUES
PR.BILL
RETURN
END TERM.BILL


%TERM.STATUS
TOT.STATUS
MOV.VALUES
RETURN
END TERM.STATUS
!
%PR.DIST
D(MSG('PR.DIST$'))
PAGE
OUT('DISTRICT '); OUTN(DIST,2); CR;CR
LC(2)
PR.PROD
RETURN
END PR.DIST


%PR.PROD
D(MSG('PR.PROD$'))
IF LEVEL THEN PRE.PROD ELSE [LINF;LINF;INDENT.PROD;LEVEL_TRUE]
OUT(@PROD)
PR.MODEL
RETURN
END PR.PROD


%PR.MODEL
!LOCAL MAN, EQPT
D(MSG('PR.MODEL$'))
!MAN _ EQPT _ 0
!IF STR.COMP(@PROD,' MAN') THEN MAN _ 1
!IF STR.COMP(@PROD,'EQPT') THEN EQPT _ 1
IF LEVEL THEN PRE.MOD ELSE [LINF;LINF;INDENT.MOD;LEVEL_TRUE]
OUT(@MODEL)
PR.TRANS
RETURN
END PR.MODEL


%PR.TRANS
D(MSG('PR.TRANS$'))
IF LEVEL THEN PRE.TRANS ELSE [LINF;LINF;INDENT.TRANS;LEVEL_TRUE]
OUT(@TRANS)
PR.BILL
RETURN
END PR.TRANS


%PR.BILL
D(MSG('PR.BILL$'))
IF LEVEL THEN PRE.BILL ELSE [LINF;LINF;INDENT.BILL;LEVEL_TRUE]
IF BILL THEN OUT(' YES') ELSE OUT(' NO ')
BILL.SW _ TRUE                  !KLUDGE FOR SPACING
RETURN
END PR.BILL



%PR.TOTALS(A())
OUTN(A(1),10)
OUTNS(A(2),100)
OUTNS(A(3),100)
OUTNS(A(4),100)
RETURN
END PR.TOTALS


%PR.GRAND
PAGE; CR;CR;CR
INDENT; OUT('GRAND TOTALS')
SP(36); PR.TOTALS(GRAND.TOT)
EJECT
RETURN
END PR.GRAND
!
%ADD(A(),B())
LOCAL I
FOR I_1 TO 4  A(I)+_B(I)
RETURN
END ADD


%ZERO(A())
LOCAL I
FOR I_1 TO 4  A(I)_0
RETURN
END ZERO



%CDTS(DATE,CHPTR)       !CONVERT DATE TO STRING
!INPUT: DATE IN 730430 FORMAT 
!       CHPT TYPE PTR TO OUTPUT STRING
!OUTPUT: THE DATE STRING IN 04/30/73 FORMAT WITH E.O.LIT 
  LOCAL MO,DA,YR,%CDTSP
 [YR;DA]_DATE DIVMOD 10000
 [MO;DA]_DATE DIVMOD 100
 CDTSP(MO)
 NCHV(CHPTR)_$/
 CDTSP(DA)
 NCHV(CHPTR)_$/
 CDTSP(YR)
 NCHV(CHPTR)_E.O.LIT
 RETURN

 %CDTSP(N)
  LOCAL N1,N2
  [N1;N2]_N DIVMOD 10
  NCHV(CHPTR)_N1+$0
  NCHV(CHPTR)_N2+$0
  RETURN
 END CDTSP
END CDTS
!
%TOT.STATUS
IF NOT BILL.SW THEN INDENT.STAT ELSE [PRE.STAT;BILL.SW_FALSE]
IF STATUS(1)=$C THEN OUT('CREDITS  ') ELSE OUT('DEBITS   ')
ADD(BILL.TOT,STATUS.TOT)
PR.TOTALS(STATUS.TOT); CR
LC(1); ZERO(STATUS.TOT)
RETURN
END TOT.STATUS


%TOT.BILL
TOT.STATUS
LINF
T.BILL
TOT(TRANS.TOT,BILL.TOT)
RETURN
END TOT.BILL


%TOT.TRANS
TOT.BILL
T.TRANS
TOT(MODEL.TOT,TRANS.TOT)
RETURN
END TOT.TRANS


%TOT.MODEL
TOT.TRANS
T.MOD
TOT(PROD.TOT,MODEL.TOT)
RETURN
END TOT.MODEL


%TOT.PROD
TOT.MODEL
T.PROD
IF DISTRICT THEN ADD(DIST.TOT,PROD.TOT) ELSE ADD(GRAND.TOT,PROD.TOT)
TOT1(PROD.TOT)
RETURN
END TOT.PROD


%TOT.DIST
TOT.PROD
LINF;LINF;LINF
INDENT; OUT('DISTRICT TOTALS'); SP(34)
TOT(GRAND.TOT,DIST.TOT)
RETURN
END TOT.DIST

!
%INITIT(N)
LOCAL I, OUT.ERR:, T.B.ERR:, FN, DATE, OPEN.ERR:
BILL _ TRANS _ MODEL _ PROD _ DIST _ 0
FOR I_1 TO 3  STATUS(I)_0
ZERO( BILL.TOT)
ZERO(TRANS.TOT)
ZERO(MODEL.TOT)
ZERO( PROD.TOT)
ZERO( DIST.TOT)
ZERO(GRAND.TOT)
ZERO( QCRP)
DISTRICT _ PRODUCT _ 0
PAGE.NUM _ 0

DO N OF 0:DIST.STATUS.REP
0: NULL
  IOCS(3)
  FN _ OPEN('TRANS.BIL',WORD+DIRECT+UPDATE,T.B.ERR)
  DATE _ R(FN); CLOSE(FN)
  CDTS(DATE,CHPT(@DATE.STR(1),-1))
  LINE.CNT _ 0
  BILL _ DIST _ PROD _ MODEL _ TRANS _ 0
! OUT.FN _ TEL
  OUT.FN _ OPEN('PITREP',UPDATE+CHARACTER+DIRECT,OUT.ERR)
PROD.REP: NULL
  IN.FN _ OPEN('PROD',INPUT+CHARACTER+DIRECT,OPEN.ERR)
  SETRWE(IN.FN,EOF.PROD)
  PRODUCT _ 1
DIST.PROD.REP: NULL
  IN.FN _ OPEN('DPROD',INPUT+CHARACTER+DIRECT,OPEN.ERR)
  SETRWE(IN.FN,EOF.D.PROD)
  DISTRICT _ PRODUCT _ 1
STATUS.REP: NULL
  IN.FN _ OPEN('STAT',INPUT+CHARACTER+DIRECT,OPEN.ERR)
  SETRWE(IN.FN,EOF.STAT)
DIST.STATUS.REP: NULL
  IN.FN _ OPEN('DSTAT',INPUT+CHARACTER+DIRECT,OPEN.ERR)
  SETRWE(IN.FN,EOF.D.STAT)
  DISTRICT _ 1
END             !END OF DO CASE

RETURN
OUT.ERR: MSG('ERROR ON OUTPUT FILE "PITREP".$'); GO TERM
T.B.ERR: MSG('ERROR ON INPUT FILE "TRANS.BIL".$'); GO TERM
OPEN.ERR: MSG('OPEN ERROR ON INPUT FILE ')
          DO N OF PROD.REP:DIST.STATUS.REP
           DIST.STATUS.REP: MSG('"DSTAT".$')
                STATUS.REP: MSG('" STAT".$')
             DIST.PROD.REP: MSG('"DPROD".$')
                  PROD.REP: MSG('" PROD".$')
          END   !END DO CASE

TERM: MSG('PROGRAM TERMINATED.$')
      EXIT
END INITIT
!
%STERM.DIST
STOT.DIST
MOV.VALUES
SPR.DIST
RETURN
END STERM.DIST


%STERM.PROD
STOT.PROD
MOV.VALUES
SPR.PROD
RETURN
END STERM.PROD


%STERM.MODEL
STOT.MODEL
MOV.VALUES
SPR.MODEL
RETURN
END STERM.MODEL


%STERM.TRANS
STOT.TRANS
MOV.VALUES
SPR.TRANS
RETURN
END STERM.TRANS


%STERM.BILL
STOT.BILL
MOV.VALUES
PR.BILL
RETURN
END STERM.BILL
!
%STOT.BILL
TOT.STATUS
T.BILL
TOT(MODEL.TOT,BILL.TOT)
RETURN
END STOT.BILL


%STOT.TRANS
STOT.PROD
S.T.TRANS
IF DISTRICT THEN ADD(DIST.TOT,TRANS.TOT) ELSE ADD(GRAND.TOT,TRANS.TOT)
TOT1(TRANS.TOT)
RETURN
END STOT.TRANS


%STOT.MODEL
STOT.BILL
S.T.MOD
TOT(PROD.TOT,MODEL.TOT)
RETURN
END STOT.MODEL


%STOT.PROD
STOT.MODEL
S.T.PROD
TOT(TRANS.TOT,PROD.TOT)
RETURN
END STOT.PROD


%STOT.DIST
STOT.TRANS
LINF;LINF;LINF
INDENT ; OUT('DISTRICT TOTALS'); SP(34)
TOT(GRAND.TOT,DIST.TOT)
RETURN
END STOT.DIST
!
%SPR.DIST
D(MSG('PR.DIST$'))
PAGE
OUT('DISTRICT '); OUTN(DIST,2); CR;CR
LC(2)
SPR.TRANS
RETURN
END SPR.DIST


%SPR.PROD
D(MSG('PR.PROD$'))
IF LEVEL THEN S.PRE.PROD ELSE [LINF;LINF;S.INDENT.PROD;LEVEL_TRUE]
OUT(@PROD)
SPR.MODEL
RETURN
END SPR.PROD


%SPR.MODEL
D(MSG('PR.MODEL$'))
IF LEVEL THEN S.PRE.MOD ELSE [LINF;LINF;S.INDENT.MOD;LEVEL_TRUE]
OUT(@MODEL)
PR.BILL
RETURN
END SPR.MODEL


%SPR.TRANS
D(MSG('PR.TRANS$'))
IF LEVEL THEN S.PRE.TRANS ELSE [LINF;LINF;S.INDENT.TRANS;LEVEL_TRUE]
OUT(@TRANS)
SPR.PROD
RETURN
END SPR.TRANS
END PROD
    