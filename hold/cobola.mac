TITLE	COBOLA FOR COBOL 5(107)	
SUBTTL	COBOL INITIALIZATION		AL BLACKINGTON/CAM

;COPYRIGHT 1970,1971,1972, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.
;TYMSHARE MODIFICATIONS AT/NEAR THE LABELS
;       START:
;       COMDSK:


TWOSEG
RELOC	400000

COBOLA:	JRST	1,START		;COMMANDS FROM TTY
	JRST	1,COMDSK	;COMMANDS FROM DISK
	JRST	1,COBLAR	;RESTART


START:  HRROI   7,-25           ;TYM   POINT TO JBTFPN IN USER GETTAB
        GETTAB  7,              ;TYM   IN THE MONITOR, FETCH IT.
        HALT                    ;TYM   ERROR RETURN, SHOULD NOT HAPPEN
        MOVEM   7,RUNPPN##      ;TYM   SAVE PPN OF RUN COMMAND
        MOVSI   11,(SIXBIT "DSK")       ;TYM   DEC VERSION ASSUMED THAT
                                        ;TYM   AC 11 CONTAINED THE DEVICE
                                        ;TYM   FROM WHICH COBOL WAS BEING
                                        ;TYM   RUN.  WITH  RPG  THIS IS NOT
                                        ;TYM   TRUE.  THEREFORE FORCE  
                                        ;TYM   "DSK".
        MOVEM   11,RUNDEV##             ;TYM   SAVE DEV OF RUN COMMAND

	MOVEI	SW,0		;CLEAR FLAGS

;START A NEW COMPILATION

COBLAR: TSWF    FDSKC           ;INPUT COMMAND FROM TTY??

	JRST	COBLAS		;NO

	CALLI	$RESET		;YES
IFN DEBUG,<PUSHJ PP,MOVSYM>	;FOR DEBUGGING, MOVE SYMBOLS BELOW JOBFF

	INIT	COM,1		;GET TTY FOR COMMAND CHANNEL
	SIXBIT	"TTY"
	XWD	0,COMBH
	HALT	.-3		;NO TTY??

	INBUF	COM,2		;GET 2 COMMAND BUFFERS
	SETZM	SAVJFF		;IF RESTART, FORCE SAVING JOBFF

COBLAS:
	SETZM	SUBPRG##	;ASSUME MAIN PROGRAM UNTIL FURTHER NOTICE
	SETZM	SLASHJ##	;CLR /J SWITCH
	SKIPN	TA,SAVJFF	;SAVE JOBFF IF IT WASN'T DONE ALREADY
	MOVE	TA,JOBFF
	MOVEM	TA,SAVJFF
	MOVEM	TA,JOBFF	;RESTORE JOBFF

	MOVE	TA,RUNDEV	;IS RUN DEVICE REALLY A DISK?
	CALLI	TA,$DEVCH
	TLNN	TA,$DSK
	JRST	NOTDSK		;NO--ERROR
;SET UP IMPURE AREA.
;GET RID OF LEADING CARRIAGE-RETURNS IN COMMAND STRING.

	SETFAZ	A;

	TSWT	FDSKC;
	TTCALL	3,[ASCIZ "
*"]
	PUSHJ	PP,SETIMP	;SET UP IMPURE AREA
	PUSHJ	PP,GETDT	;SET UP DATE AND TIME
	PUSHJ	PP,GETVER	;SET UP VERSION NUMBER
	JRST	TESTCR

TYPEST:	TSWT	FDSKC;
	TTCALL	3,[ASCIZ "
*"]

TESTCR:	PUSHJ	PP,COMKAR	;GET FIRST CHARACTER FROM COMMAND
	TSWF	FECOM;		;END OF COMMAND FILE?
	CALLI	$EXIT		;YES--QUIT
	JUMPE	CH,TYPEST	;NO--NULL?
	CAIN	CH,15		;NO--CARRIAGE-RETURN?
	JRST	TYPEST		;YES--LOOP


	SWON	FCOMCH;		;NO--SET "REGET CHARACTER"
	SWON	FTERA		;SET 'WE ARE TYPING ERRORS'
	SETZM	CREFSW		;CLEAR '/C'
;SET UP BINARY DEVICE

SETBIN:	MOVEI	DA,BINDEV
	PUSHJ	PP,GETFIL	;GET FIRST FILE

	TSWF	FDSKC		;INPUT FROM TTY?
	TTCALL	3,[ASCIZ "COBOL:	"]; NO

	CAIE	CH,"-"		;IS IT "NULL FILE"?
	JRST	SETBNB		;NO
	SETZM	BINDEV		;YES
	PUSHJ	PP,COMKAR
	CAIE	CH,","
	CAIN	CH,"="
	JRST	SETLST
	JRST	TUMANY

SETBNA:	MOVSI	TA,'DSK'	;USE DEVICE "DSK"
	MOVEM	TA,BINDEV
	JRST	SETLST

SETBNB:	JUMPE	TA,SETBNA
	TRNE	TA,$BIN		;BINARY LEGAL?
	TLNN	TA,$OUT		;YES--OUTPUT DEVICE?
	JRST	BADBIN		;NO--ERROR
;SET UP LISTING DEVICE

SETLST:	CAIN	CH,"="		;ANY FILE THERE?
	JRST	SETLSA		;NO

	CAIN	CH,15		;END OF STRING?
	JRST	NOSRC		;YES--ERROR

	MOVEI	DA,LSTDEV
	PUSHJ	PP,GETFIL	;GET SECOND FILE

	CAIE	CH,"-"		;IS IT A "NULL FILE"?
	JRST	SETLSB		;NO

	SWON	FNOLST		;YES
	PUSHJ	PP,COMKAR
	CAIE	CH,"="
	JRST	TUMANY

SETLSA:	MOVSI	TA,'DSK'	;NO DEVICE--USE "DSK"
	MOVEM	TA,LSTDEV	;SET LIST DEVICE
	JRST	SETSRC		;IT MUST BE LEGAL

SETLSB:	JUMPE	TA,SETLSA
	TLNN	TA,$OUT		;OUTPUT DEVICE?
	JRST	BADOUT		;NO--ERROR
;SET UP SOURCE DEVICE

SETSRC:	CAIN	CH,15		;END OF STRING?
	JRST	NOSRC		;YES--ERROR
	CAIE	CH,"="		;ANY MORE OUTPUT FILES?
	JRST	TUMANY		;YES--ERROR


	PUSHJ	PP,SCNCOM	;SCAN ALL SOURCE FILES
	PUSHJ	PP,STINFL##	;SET UP FIRST SOURCE FILE
	TSWTZ	FHELP		;/H?
	JRST	SETSR1		;NO
HELP:	MOVE	1,[SIXBIT "COBOL"]	;YES, PRINT COBOL.HLP
;	PUSHJ	17,.HELPR##
                                ;TYM  THE ABOVE LINE HAS BEEN
                                ;TYM  REPLACED SINCE DEC DID NOT 
                                ;TYM  INCLUDE THE  HELPER.MAC 
                                ;TYM  FILE WITH THIS VERSION.
                                ;TYM  THE FOLLOWING TTCALL HAS
                                ;TYM  BEEN ADDED.
        TTCALL  3,[ASCIZ /TYPE (SYS)COBOL.HLP/]
	JRST	BADC2		;IGNORE ALL ELSE IN COMMAND STRING

SETSR1:	SKIPN	SRCDEV		;ANY FILE THERE?
	JRST	NOSRC		;NO--ERROR

;FILE NAMES HAVE BEEN READ--FINALIZE

	MOVE	TA,SRCDEV+1
	SKIPN	LSTDEV+1	;ANY LIST FILE-NAME?
	MOVEM	TA,LSTDEV+1	;NO--JAM SOURCE NAME
	SKIPN	BINDEV+1	;ANY BINARY FILE-NAME?
	MOVEM	TA,BINDEV+1	;NO--JAM SOURCE NAME

	MOVSI	TA,'REL'
	SKIPN	BINDEV+2	;ANY BINARY EXTENSION?
	MOVEM	TA,BINDEV+2	;NO--USE "REL"

	MOVSI	TA,'LST'
	SKIPN	LSTDEV+2	;ANY LISTING EXTENSION?
	MOVEM	TA,LSTDEV+2	;NO--USE "LST"

	SKIPE	LIBSWS		;ANY LIBRARY?
	JRST	INITB		;YES

	MOVE	TA,[XWD LIBSET,LIBDEV]	;NO--TRY "DSK:LIBARY.LIB"
	BLT	TA,LIBDEV+3
	MOVEI	DA,LIBDEV
	MOVEI	I1,0
	MOVEI	I3,DEVBH(DA)
	MOVEI	DC,LIB
	PUSHJ	PP,OPENIT##

	HRRZ	TA,JOBFF
	MOVEM	TA,LIBBUF
	INBUF	LIB,1

	MOVEI	I4,0
	MOVE	I0,LOOKOP
	DPB	DC,I0CHAN
	XCT	I0
	SETZM	LIBDEV
;INITIALIZE BINARY DEVICE

INITB:	MOVEI	I1,14
	MOVEI	DA,BINDEV
	MOVEI	DC,BIN
	SKIPN	BINDEV		;ANY BINARY FILE?
	JRST	INITL		;NO

	PUSHJ	PP,OPNOUT

	MOVE	TA,BINSWS	;REWIND?
	TRNE	TA,2
	MTAPE	BIN,$REW
	TRNE	TA,4		;CLEAR DIRECTORY?
	CALLI	BIN,$CLEAR
	SETOM	BINBLK

;INITIALIZE LISTING DEVICE

INITL:	MOVEI	I1,0
	MOVEI	DA,LSTDEV
	MOVEI	DC,LST
	TSWF	FNOLST;		;ANY LISTING DEVICE?
	JRST	INITS		;NO

	MOVE	TA,LSTDEV	;YES--TTY?
	CALLI	TA,$DEVCH
	TLNE	TA,$AVAIL
	TLNN	TA,$CONSL
	JRST	INITL1		;NO

	SWON	FLTTY;		;YES

INITL1:	PUSHJ	PP,OPNOUT

	MOVE	TA,JOBFF
	MOVEM	TA,LSTBUF
	OUTBUF	LST,2

	MOVE	TA,LSTSWS	;REWIND?
	TRNE	TA,2
	MTAPE	LST,$REW
	TRNE	TA,4		;CLEAR DIRECTORY?
	CALLI	LST,$CLEAR
	SETOM	LSTBLK
;INITIALIZE SCRATCH FILES

INITS:	TSWF	FNOLST		;IF NO LISTING,
	SETZM	CREFSW		;  CLEAR '/C'

	CALLI	TC,$PJOB	;GET JOB NUMBER INTO LH OF TA, DECIMAL
	MOVEI	TD,3
	IDIVI	TC,^D10
	ADDI	TB,"0"-40
	LSHC	TB,-6
	SOJG	TD,.-3

	MOVE	TB,DEVXWD
OPNSCR:	MOVE	DA,DEVTAB(TB)
	MOVSI	TC,'DSK'	;SCRATCH DEVICE
	MOVEM	TC,DEVDEV(DA)
	HLR	TA,DEVTAB(TB)		;CREATE FILE NAME
	MOVEM	TA,DEVFIL(DA)
	MOVSI	TC,'TMP'	;SCRATCH FILES EXTENSION
	MOVEM	TC,DEVEXT(DA)
	MOVEI	DC,FSC(TB)	;SET CHANNEL NUMBER

	CAIE	DC,CRF		;IF THIS IS
	JRST	OPNSC0		;  CREF FILE
	SKIPN	CREFSW		;  AND THERE IS NO '/C',
	JRST	OPNSC1		;  DON'T OPEN THE CREF FILE

OPNSC0:	MOVEI	I3,DEVBHI(DA)
	HRLI	I3,3(I3)
	MOVEI	I4,0

	MOVEI	I1,14		;USUALLY BINARY MODE
	CAIN	DC,CPY		;CPYFIL?
	MOVEI	I1,0		;YES--ASCII MODE
	CAIE	DC,NAM		;NAMFIL
	CAIN	DC,LIT		;  OR LITFIL?
	MOVEI	I1,17		;YES--DUMP MODE
	PUSHJ	PP,OPNTMP
	SETOM	DEVBLK(DA)	;SET BLOCK COUNT TO -1

	CAIE	DC,LIT		;"LIT"?
	CAIN	DC,AS3		;"AS3"?
	JRST	OPNSC1		;YES--NO BUFFER NOW
	CAIN	DC,NAM		;LIKEWISE FOR
	JRST	OPNSC1		;  NAMFIL

	HRRZ	I0,JOBFF	;NO--SET BUFFER ADDRESS
	MOVEM	I0,DEVBUF(DA)

	MOVE	I0,OUTBOP
	DPB	DC,I0CHAN
	XCT	I0		;DO AN OUTBUF

OPNSC1:	AOBJN	TB,OPNSCR

	MOVE	TA,SRCBUF	;AS3FIL OVERLAYS SRCFIL
	MOVEM	TA,AS3BUF
	MOVE	TA,GENBUF	;BINFIL OVERLAYS GENFIL
	MOVEM	TA,BINBUF
;SET UP LISTING IF WE ARE DEBUGGING

IFN DEBUG,<
	PUSHJ	PP,HDROUT##
	>


;SET UP ALL WORK AREAS EXCEPT NAMTAB

SETWRK:	HRRZ	TA,JOBFF
	MOVEM	TA,FREESP
	MOVE	TA,WRKXWD

STWRK1:	MOVE	TB,(TA)
	MOVE	TC,TB
	HRR	TC,FREESP
	MOVEM	TC,(TB)
	MOVEM	TC,1(TB)
	HLRE	TC,TB
	MOVMS	TC
	ADDI	TC,1
	ADDB	TC,FREESP

STWRK3:	CAMG	TC,TOPLOC
	JRST	STWRK2
	PUSHJ	PP,ADDCOR##
	MOVE	TC,FREESP
	JRST	STWRK3

STWRK2:	AOBJN	TA,STWRK1
	JRST	SETNAM
;SET UP INITIAL ENTRIES IN NAMTAB.
;ENTER AT "SETNAM".


	PUSHJ	PP,ADDCOR	;GRAB ANOTHER 1K OF CORE
SETNAM:	MOVE	TA,TOPLOC	;ROOM FOR
	SUBI	TA,NAMPSZ+1	;  NAMTAB
	SUB	TA,NTSIZE	;  + NM1TAB
	SUB	TA,NTSIZE	;  + NM2TAB?
	CAMGE	TA,FREESP
	JRST	SETNAM-1	;NO--GRAB ROOM

	MOVE	TE,[XWD NTSIZE,SIZTAB]
	MOVNI	TD,NTNSIZ
	BLT	TE,SIZTAB-1(TD)

	MOVE	TE,NTSIZE
	MOVEM	TE,NM12SZ
	MOVE	TE,[XWD NTNSIZ,SIZTAB]
	MOVEM	TE,NSZPTR

	HRLI	TA,TC
	MOVEM	TA,NM1LOC
	MOVSI	TE,(TA)
	HRRI	TE,1(TA)
	SETOM	(TA)
	ADD	TA,NM12SZ
	BLT	TE,-1(TA)

	MOVEM	TA,NM2LOC
	MOVSI	TE,(TA)
	HRRI	TE,1(TA)
	SETZM	(TA)
	ADD	TA,NM12SZ
	BLT	TE,-1(TA)

	HRLI	TA,NAMNSZ-1
	MOVEM	TA,NAMLOC
	MOVEM	TA,NAMNXT

	MOVEI	LN,NAMDAT	;BEGINNING OF TABLE IN "RESVWD"
;SET UP NAMTAB (CONT'D)

SETN1:	SETZM	NAMWRD		;CLEAR NAMWRD
	MOVE	TB,[XWD NAMWRD,NAMWRD+1]
	BLT	TB,NAMWRD+4

	HLRZ	TB,(LN)		;GET <SIZE OF ENTRY> + 1
	MOVEI	TC,NAMWRD	;SET UP <XWD 1(LN),NAMWRD>
	HRLI	TC,1(LN)
	BLT	TC,NAMWRD-2(TB)	;MOVE ENTRY TO NAMWRD

	PUSHJ	PP,TRYNAM##	;SEE IF IT IS THERE
	JRST	SETN2		;NO--OK

	JRST	DBLNAM		;YES--ERROR

SETN2:	PUSHJ	PP,BLDNAM##	;CREATE AN ENTRY IN NAMTAB
	HRLZ	TB,(LN)
	TLO	TB,NAMRSV/1B17
	MOVEM	TB,(TA)

	HLRZ	TA,(LN)		;STEP TO NEXT NAMDAT ENTRY
	ADD	LN,TA
	SKIPE	(LN)		;DONE?
	JRST	SETN1		;NO--LOOP

	HRRZ	TA,NM1LOC	;YES--RESET LEFT HALF OF FREESP
	SUB	TA,FREESP
	HRLM	TA,FREESP
;SET UP INITIAL ENTRIES IN EXTAB

SETEXT:	SETZM	NAMWRD+1		;CLEAR NAMWRD'S LAST 4 LOCS
	MOVE	TA,[XWD NAMWRD+1,NAMWRD+2]
	BLT	TA,NAMWRD+4

	MOVS	TE,EXTLOC	;CLEAR EXTAB
	HRR	TE,EXTLOC+3
	SUBI	TE,1
	PUSHJ	PP,CLRSOM

	MOVE	LN,EXTPTR	;GET TABLE POINTER

SETEX1:	MOVE	TA,[POINT 6,(LN)]
	MOVE	TB,[POINT 6,NAMWRD]

SETX1A:	ILDB	CH,TA
	CAIN	CH,"."-40
	MOVEI	CH,";"-40
	IDPB	CH,TB
	TLNE	TA,770000
	JRST	SETX1A

	PUSHJ	PP,TRYNAM
	JRST	SETEX2
	JRST	DBLNAM		;YES--ERROR

SETEX2:	PUSHJ	PP,BLDNAM	;NO--ADD IT TO NAMTAB
SETEX3:	MOVE	TB,EXTNXT
	AOBJP	TB,SETEX4	;ROOM FOR FIRST WORD?
	TLO	TA,500000	;YES--PUT NAMTAB CHAIN IN EXTAB
	HLLZM	TA,(TB)
	HRRZI	TD,(TB)		;SET UP EXTAB LINK
	HRRZ	TE,EXTLOC
	SUBI	TD,(TE)
	IORI	TD,<CD.EXT>B20
	AOBJP	TB,SETEX4	;ROOM FOR SECOND WORD?
	SETZM	(TB)		;YES--CLEAR IT

	MOVEM	TB,EXTNXT	;YES--RESTORE EXTNXT

	AOBJN	LN,SETEX1	;ANY MORE ENTRIES?
	JRST	FINISH		;NO

SETEX4:	PUSH	PP,TA		;EXPAND EXTAB
	PUSHJ	PP,XPNEXT##
	POP	PP,TA
	JRST	SETEX3
;FINISH UP PHASE A

FINISH:	HLLZS	SW		;CLEAR RH OF SWITCHES
	PUSHJ	PP,GETFCH##	;SET UP SRCFIL
	SWON	FREGCH;
	SETZM	WASERC		;LAST WORD WAS NOT 'SEARCH', OBVIOUSLY

	MOVEI	TA,"."		;SET "DECIMAL POINT IS PERIOD"
	MOVEM	TA,DCPNT.##
	MOVEI	TA,","
	MOVEM	TA,COMA.##

	MOVEI	TA,100
	MOVEM	TA,GENWRD

IFN DEBUG,<TSWC FOBJEC>
	TSWF	FNOLST		;IF NO LISTING,
	SWOFF	FOBJEC!FMAP	;  THEN NO MAPS NOR ASSEMBLY LISTING

	TSWF	FNOLST		;IF NO LISTING,
	SETZM	LSTDEV		;  CLEAR DEVICE NAME
	TSWF	FLTTY		;IF LISTING ON TTY,
	SWOFF	FTERA		;  WE DON'T TYPE ERRORS TWICE

	ENDFAZ	A;
;SCAN REMAINDER OF SOURCE FILES IN COMMAND STRING

SCNCOM:	MOVSI	DA,(SIXBIT "DSK")
	MOVEM	DA,LASTDV
	MOVEI	DA,IOSRCS	;SET SRCEND & DA
	MOVEM	DA,SRCEND

SCNCM1:	TSWF	FESRC		;ANY MORE SOURCE FILES?
	JRST	SCNCM5		;NO

	PUSHJ	PP,GETFIL	;YES--GET NEXT ONE
	JUMPN	TA,SCNCM3	;JUMP IF DEVICE FOUND

	SKIPN	DEVFIL(DA)	;NO DEVICE--ANY FILE?
	SKIPE	DEVEXT(DA)
	JRST	SCNCM2		;YES
	MOVE	TB,DEVSW(DA)	;NO--IS THIS A LIBRARY?
	TRNN	TB,1
	JRST	SCNCM6		;NO--ERROR

SCNCM2:	MOVE	TA,LASTDV
	MOVEM	TA,DEVDEV(DA)
	CALLI	TA,$DEVCH

SCNCM3:	PUSHJ	PP,CHEKIN	;CHECK VALIDITY OF FILE

	ADDI	DA,DEVSIZ	;KICK UP TO NEXT ENTRY
	MOVEM	DA,SRCEND
	CAIE	DA,SRCEND	;TABLES FULL?
	JRST	SCNCM1		;NO--LOOP

	TSWT	FESRC		;YES--ANY MORE SOURCES?
	JRST	NOROOM		;YES--ERROR

SCNCM5:	MOVEI	TA,IOSRCS	;RESET SRCEND
	MOVEM	TA,SRCEND

	POPJ	PP,

SCNCM6:	CAIN	CH,15		;END OF LINE?
	CAIE	DA,IOSRCS	;YES--ANY SOURCE FILES?
	JRST	SCNCM2		;YES
	JRST	NOSRC		;NO--ERROR
;OPEN UP OUTPUT DEVICE
;ENTER WITH DA POINTING TO A FILE ENTRY SET UP BY GETFIL.

OPNOUT:	MOVSI	I3,DEVBH(DA)	;ENTRY FOR BIN, LST
	MOVE	I4,DEVPP(DA)

OPNTMP:	PUSHJ	PP,OPENIT	;OPEN AND SET UP ENTER

	CAIN	DC,LIT		;DON'T ENTER IF
	POPJ	PP,		;  LITFIL

	MOVE	I0,ENTROP	;CREATE AN ENTER
	DPB	DC,I0CHAN
	XCT	I0		;ENTER
	JRST	NOENTR		;CANNOT
	POPJ	PP,


;CHECK VALIDITY OF SOURCE FILE.
;ENTER WITH CHARACTERISTICS IN TA.

CHEKIN:	TLNN	TA,$IN		;INPUT DEVICE?
	JRST	NOTIN		;NO--ERROR

	TLNE	TA,$DIREC	;DIRECTORY DEVICE?
	SKIPE	DEVFIL(DA)	;YES--ANY FILE NAME?
	SKIPA
	JRST	NOFILE		;NO--ERROR

	MOVE	TB,DEVSW(DA)	;LIBRARY FILE?
	TRNE	TB,1
	TLNE	TA,$DSK		;YES--IS IT DSK?
	POPJ	PP,		;YES
	JRST	BADLIB		;NO--ERROR
;SET UP TO GET COMMANDS FROM DISK

COMDSK: HRROI   7,-25           ;TYM  POINT TO JBTFPN IN USER GETTAB
        GETTAB  7,              ;TYM  IN MONITOR, FETCH IT.
        HALT                    ;TYM  ERROR RETURN, SHOULD NOT
        MOVEM   7,RUNPPN        ;TYM  SAVE PPN OF RUN COMMMAND
        MOVSI   11,(SIXBIT "DSK")       ;TYM  DEC VERSION ASSUMES
                                        ;TYM  AC 11 CONTAINS DEVICE
        MOVEM   11,RUNDEV               ;TYM  SAVE DEV OF RUN COMMAND

	MOVSI	SW,FDSKC/1000000	;CLEAR FLAGS--SET "COMMANDS FROM DISK"
	CALLI	$RESET
IFN DEBUG,<PUSHJ PP,MOVSYM>

	MOVSI	TA,(SIXBIT "COB")	;SET UP FIRST
	MOVEM	TA,COMBH+1		;  WORD FOR TMPCOR UUO
	MOVE	TA,JOBFF		;SET UP
	SUBI	TA,1			;  SECOND
	HRLI	TA,-200			;  WORD
	MOVEM	TA,COMBH+2		;  FOR TMPCOR UUO

	MOVE	TA,[XWD 1,COMBH+1]	;GET FILE IN
	CALLI	TA,$TMPCR		;  CORE
	JRST	CMDSK5			;WAS NONE--TRY DISK

	MOVE	TB,JOBFF		;SET UP
	HRLI	TB,(POINT 7,0)		;  BYTE-POINTER TO
	MOVEM	TB,COMBH+1		;  COMMAND
	ADDM	TA,JOBFF		;UPDATE JOBFF WITH SIZE OF INPUT
	IMULI	TA,5			;CALCULATE
	ADDI	TA,1			;  NUMBER OF CHARACTERS + 1
	MOVEM	TA,COMBH+2		;STASH THAT
	SETZM	COMBH			;CLEAR COMBH TO INDICATE "TMPCOR"
	JRST	CMDSK9			;RETURN

CMDSK5:	INIT	COM,0
	SIXBIT	/DSK/
	XWD	0,COMBH
	JRST	COBOLA		;NO DSK -- USE TTY

	MOVEI	I1,(SIXBIT "COB")	;SET UP LOOKUP PARAMETERS
	MOVSI	I2,(SIXBIT "TMP")
	SETZB	I3,I4
	HLRZM	I2,COMEXT

	CALLI	TC,$PJOB	;PUT IN JOB NUMBER
	MOVEI	I0,3
	IDIVI	TC,^D10
	ADDI	TB,"0"-40
	LSHC	TB,-6
	SOJG	I0,.-3
	HLL	I1,TA

	INBUF	COM,1		;GET A SINGLE BUFFER
	MOVE	I0,LOOKOP	;LOOKUP "JJJCOB.TMP"
	MOVEI	DC,COM
	DPB	DC,I0CHAN
	XCT	I0
	JRST	COBOLA		;NOT FOUND--USE TTY
CMDSK9:	MOVE	TE,JOBFF##
	MOVEM	TE,SAVJFF##
	JRST	COBLAS
;SET UP IMPURE AREA

SETIMP:	MOVE	TA,[XWD %WEDID,WEDIED##]	;MOVE "GETSEG" ROUTINE TO LOW-SEGMENT
IFN DEBUG,<
	BLT	TA,-1+DDTSTP##
	MOVE	TA,[XWD %GTFNM,GETFNM]
	>
	BLT	TA,GETEND##

	MOVE	TA,RUNPPN	;GETSEG WILL USE DEV AND PPN
	MOVEM	TA,GETFNM+4	;  OF RUN COMMAND
	MOVE	TA,RUNDEV
	MOVEM	TA,GETFNM##

SETI2:	MOVE	TB,[XWD FSTCLR,FSTCLR+1]
	SETZM	FSTCLR
	HLRZ	TE,JOBSA##
IFN DEBUG,<
	MOVEI	TD,(TB)
	CAIG	TD,DDT
	MOVEI	TE,DDT
	>
	BLT	TB,-1(TE)

IFE DEBUG,<
	MOVEI	TE,-1+WRKSIZ##
	JRST	SETCOR##
	>

IFN DEBUG,<
	HRRZ	TE,JOBSYM##	;IF SYMBOLS
	TRNE	TE,1B18		;  ARE IN HI-SEG,
	TDCA	TE,TE		;  USE ZERO LENGTH,
	HLRE	TE,JOBSYM	;ELSE USE LENGTH OF SYMBOL TABLE
	MOVMS	TE
	ADDI	TE,^D50+DDTEND##	;LEAVE ROOM FOR DDT
	SUBI	TE,DDT
	ADDI	TE,-1+WRKSIZ##
	JRST	SETCOR##
	>
;CLEAR SOME CORE
;ENTER WITH FIRST ADDRESS IN LH OF "TE", LAST ADDRESS IN RH OF "TE"

CLRSOM:	HLRZ	TD,TE
	SETZM	(TD)
	HLL	TD,TE
	ADDI	TD,1
	BLT	TD,(TE)
	POPJ	PP,

;MOVE SYMBOLS DOWN BELOW JOBFF

IFN DEBUG,<
MOVSYM:	HLRE	TC,JOBSYM
	JUMPGE	TC,MOVSY2
	MOVMS	TC

	HRRZ	TE,JOBSYM	;IF SYMBOLS ARE
	TRNE	TE,1B18		;  IN HI-SEG,
	POPJ	PP,		;  FORGET IT

	HRRZ	TD,JOBFF	;SYMBOLS WILL BE
	ADDI	TD,^D50		;  MOVED TO THIS LOC
	CAIL	TD,(TE)		;  UNLESS THAT MOVES
	JRST	MOVSY1		;  THEM UP INSTEAD OF DOWN

	HRRM	TD,JOBSYM	;RESET JOBSYM
	HRLI	TD,(TE)		;TD _ <XWD JOBSYM,JOBFF>
	ADDI	TC,(TD)		;SET TC TO FIRST LOC AFTER SYMBOLS
	BLT	TD,-1(TC)	;MOVE THE SYMBOLS

MOVSY1:	HLRE	TE,JOBSYM	;RESET
	MOVMS	TE		;  JOBFF
	ADD	TE,JOBSYM	;  TO BE
	HRRM	TE,JOBFF	;  AFTER SYMBOLS
MOVSY2:	POPJ	PP,
	>
;GET CURRENT DATE AND TIME

GETDT:	CALLI	TC,$DATE	;GET DATE
	IDIVI	TC,^D31		;TB_(DAY-1)
	PUSHJ	PP,DECONV	;CONVERT TO TWO DECIMAL DIGITS
	DPB	TB,[POINT 14,STDATE,13]

	IDIVI	TC,^D12		;TB_(MONTH-1)
	MOVE	TB,MOTABL(TB)
	LSHC	TB,-16
	IORM	TB,STDATE
	LSHC	TB,-1
	MOVEM	TA,STDATE+1

	MOVEI	TB,^D63(TC)	;TB_(YEAR-1)
	PUSHJ	PP,DECONV
	DPB	TB,[POINT 14,STDATE+1,27]
	CALLI	TC,$TIME	;GET TIME
	IDIVI	TC,^D1000*^D60	;CONVERT TO MINUTES
	IDIVI	TC,^D60		;TB_MINUTES, TC_HOURS
	PUSHJ	PP,DECONV+1
	LSH	TB,1
	IOR	TB,[ASCII "  :"]
	MOVEM	TB,STTIME

	MOVE	TB,TC
	PUSHJ	PP,DECONV+1
	DPB	TB,[POINT 14,STTIME,13]

	POPJ	PP,


;CONVERT A NUMBER TO DECIMAL

DECONV:	ADDI	TB,1		;ADD 1 TO IT
	IDIVI	TB,^D10		;TA_UNITS, TB_TENS
	LSH	TB,7
	ADDI	TB,14060(TA)	;CONVERT TO ASCII
	POPJ	PP,
;SET UP VERSION NUMBER

GETVER: SETZM   VERZUN##        ;TYM INITIALIZE DESTINATION
        SETZM   VERZUN+1        ;TYM   THREE WORDS
        SETZM   VERZUN+2        ;TYM

        MOVE    TC,  [POINT 6,VERZUN]   ;TYM  POINT TO DESTINATION
                                        ;TYM  WHERE WILL DEPOSIT
                                        ;TYM  SIXBIT CHARACTERS
        MOVE    TD,  [POINT 3,JOBVER##] ;TYM  POINT TO SOURCE OF
                                        ;TYM  VERSION & RELEASE
                                        ;TYM  WHICH IS OCTAL

;BUILD .LST FILE DISPLAY FORM OF VERSION & RELEASE
;NUMBER IN THE FORM   (111222,333444)
;WHERE   111=DEC-VERSION
;        222=TYM-VERSION
;        333=DEC-EDIT
;        444=TYM-RELEASE

        MOVEI   CH,  "("-40             ;TYM  BUILD SIXBIT LEFT-(
        IDPB    CH,  TC                 ;TYM  DEPOSIT IN VERZUN
        PUSHJ   PP,  GTVER1             ;TYM  BUILD AND DEPOSIT 6
                                        ;TYM  CHARS =111222
                                        ;TYM  PART OF VERZUN
        MOVEI   CH,  ","-40             ;TYM  BUILD SIXBIT COMMA
        IDPB    CH,  TC                 ;TYM  DEPOSIT IN VERZUN
        PUSHJ   PP,  GTVER1             ;TYM  BUILD AND DEPOSIT
                                        ;TYM  6 CHARS =333444
                                        ;TYM  PART OF VERZUN
        MOVEI   CH,  ")"-40             ;TYM  BUILD SIXBIT RIGHT-)
        IDPB    CH,  TC                 ;TYM  DEPOSIT IN VERZUN

        POPJ    PP,                     ;TYM  RETURN TO SETFAZ A + 20

GTVER1: MOVEI   TE,  6          ;TYM  COUNT OUT 6 CHARACTERS
GTVER2: ILDB    CH,  TD         ;TYM  GET 3 BITS=1 OCTAL CHAR
                                ;TYM  FROM JOBVER
   ADDI    CH,  "0"-40     ;TYM  CONVERT TO SIXBIT NUMBER
        IDPB    CH,  TC         ;TYM  DEPOSIT IN VERZUN
        SOJG    TE,  GTVER2     ;TYM  CHECK CHAR COUNT
        POPJ    PP,             ;TYM  DONE WITH 6 CHARACTERS
                                ;TYM  RETURN TO EITHER GETVER:+7
                                ;TYM  OR  GETVER:+10
;GET IN "DEV:FILE.EXT[PROJ,PROG]/X"

GETFIL:	MOVEI	TA,1(DA)
	HRLI	TA,(DA)
	SETZM	(DA)
	BLT	TA,DEVSIZ-1(DA)

	TSWFZ	FCOMWD;		;DEVICE WAITING?
	JRST	GETFL6		;YES

GETFL1:	PUSHJ	PP,GETSIX	;NO--GET ONE
	CAIN	CH,":"		;":"?
	JRST	GETFL7		;YES

GETFL2:	CAIE	CH,"="		;"="?
	CAIN	CH,","		;","?
	JRST	GTFL4A		;YES

	CAIN	CH,"."		;"."?
	JRST	GETFL5		;YES

	CAIN	CH,"["		;"["?
	JRST	GETFL8		;YES

	CAIN	CH,15		;END OF COMMAND?
	JRST	GETFL4		;YES

	CAIN	CH,"/"		;SWITCH?
	JRST	GETFL9		;

	CAIN	CH,"-"
	JRST	GTFL8C

	CAIN	CH,"("
	JRST	GTFL13

	CAIN	CH,"@"
	JRST	GTFL12

	CAIN	CH,"!"
	JRST	GTFL14

	CAIE	CH," "		;SPACE?
	JRST	BADKAR		;NO--BAD CHARACTER

	PUSHJ	PP,COMKAR	;YES--GET NEXT CHARACTER

GTFL2A:	CAIN	CH," "		;ANOTHER SPACE?
	JRST	.-2		;YES--LOOP

	CAIG	CH,"Z"		;NO--LETTER?
	CAIGE	CH,"A"
	SKIPA			;NO
	JRST	GETFL3		;TREAT IT LIKE COMMA

	CAIG	CH,"9"		;NOT LETTER--DIGIT?
	CAIGE	CH,"0"
	JRST	GETFL2		;NO--TRY PUNCTUATION
GETFL3:	MOVEI	CH,","		;LETTER OR DIGIT--TREAT LIKE COMMA
	SWON	FCOMCH;		;SET "REGET CHARACTER"
	JRST	GTFL4A
;STASH FILE-NAME AND LEAVE

GETFL4:	SWON	FESRC;		;END OF COMMAND STRING

GTFL4A:	PUSHJ	PP,GTFL4B
	SKIPN	TA,DEVDEV(DA)	;ANY DEVICE?
	POPJ	PP,		;NO--RETURN

	CALLI	TA,$DEVCH	;YES--GET CHARACTERISTICS
	JUMPE	TA,NOTDEV	;IS IT A LEGAL DEVICE?
	POPJ	PP,

GTFL4B:	JUMPE	TA,GTFL4C
	SKIPE	DEVFIL(DA)
	JRST	BADSTR
	MOVEM	TA,DEVFIL(DA)
GTFL4C:	POPJ	PP,

;DOT--STASH FILE-NAME, GET EXTENSION

GETFL5:	SKIPE	DEVEXT(DA)
	JRST	BADSTR
	PUSHJ	PP,GTFL4B
	PUSHJ	PP,GETSIX
	HLLZM	TA,DEVEXT(DA)
	MOVEI	TA,0
	JRST	GETFL2

;GET PREVIOUS DEVICE

GETFL6:	SKIPA	TA,LASTDV	;GET PREVIOUS DEVICE

;COLON--STASH DEVICE NAME

GETFL7:	MOVEM	TA,LASTDV	;STASH AS LAST DEVICE

	SKIPE	DEVDEV(DA)	;IS THERE ONE ALREADY?
	JRST	GTFL7A
	MOVEM	TA,DEVDEV(DA)	;NO--STASH IN DEVICE ENTRY
	JRST	GETFL1

GTFL7A:	SWON	FCOMWD;		;YES--SET "REGET WORD"
	POPJ	PP,
;BRACKET--GET PROJ,PROG

GETFL8:	PUSHJ	PP,GTFL4B
	PUSHJ	PP,GETNUM	;GET PROJ
	CAIE	CH,","		;COMMA SEPERATOR?
	JRST	BADPPN		;NO--ERROR

	MOVSM	TA,DEVPP(DA)	;YES--STASH

	PUSHJ	PP,GETNUM	;GET PROG
	HRRM	TA,DEVPP(DA)	;STASH
	CAIE	CH,"]"		;"]"?
	JRST	BADPPN		;NO--ERROR
	JRST	GETFL1


;HYPHEN -- IT SHOULD BE ALONE

GTFL8C:	JUMPN	TA,BADKAR
	SKIPN	DEVDEV(DA)
	SKIPE	DEVFIL(DA)
	JRST	BADKAR

	SKIPN	DEVPP(DA)
	SKIPE	DEVEXT(DA)
	JRST	BADKAR

	POPJ	PP,
;SWITCH	(/ TYPE)

GETFL9:	PUSHJ	PP,GTFL4B
	PUSHJ	PP,COMKAR
	PUSHJ	PP,SWICH

GTFL10:	MOVEI	TA,0
	SKIPE	DEVDEV(DA)
	JRST	GTFL11

	SKIPN	DEVFIL(DA)	;IS THERE ANY FILE?
	SKIPE	DEVEXT(DA)
	SKIPA
	JRST	GETFL1		;NO--LOOP

GTFL11:	PUSHJ	PP,COMKAR	;YES--GET NEXT CHARACTER
	JRST	GTFL2A
;"@" SEEN -- SET UP INDIRECT COMMAND FILE

GTFL12:	PUSHJ	PP,GTFL4B	;STASH FILE NAME
	SKIPN	DEVDEV(DA)	;ANY ENTRY?
	SKIPE	DEVFIL(DA)
	JRST	GTF12A		;YES
	SKIPN	DEVPP(DA)	;NOT YET--TRY SOME MORE
	SKIPE	DEVEXT(DA)
	JRST	GTF12A		;YES

	PUSHJ	PP,GETFIL	;NO--SCAN SOME MORE
	JRST	GTF12B

GTF12A:	PUSHJ	PP,COMKAR

GTF12B:	CAIE	CH,15
	JRST	BADSTR

	CALLI	$RESET

	SKIPN	I2,DEVDEV(DA)
	MOVSI	I2,(SIXBIT "DSK")
	MOVEI	I1,0
	MOVEI	I3,COMBH
	OPEN	COM,I1
	JRST	NOCOMD

	SKIPE	I1,DEVFIL(DA)
	JRST	GTF12D
	MOVEI	I2,3
	CALLI	I3,$PJOB
	IDIVI	I3,^D10
	MOVEI	I0,"0"-40(I4)
	LSHC	I0,-6
	SOJG	I2,.-3
	HRRI	I1,(SIXBIT "COB")

GTF12D:	HLLZ	I2,DEVEXT(DA)

GTF12E:	MOVEI	I3,0
	MOVE	I4,DEVPP(DA)
	JUMPE	I2,GTF12H
GTF12F:	LOOKUP	COM,I1
	JRST	NOCOMF

GTF12G:	HLRZM	I2,COMEXT
	INBUF	COM,1
	MOVE	TE,JOBFF
	MOVEM	TE,SAVJFF
	MOVSI	SW,FDSKC/1000000
	JRST	GETFIL

GTF12H:	MOVSI	I2,(SIXBIT "CCL")
	LOOKUP	COM,I1
	SKIPA
	JRST	GTF12G
	MOVEI	I2,0
	MOVE	I4,DEVPP(DA)
	JRST	GTF12F
;SWITCH [( TYPE]

GTFL13:	PUSHJ	PP,GTFL4B
	PUSHJ	PP,COMKAR

GTF13A:	PUSHJ	PP,SWICH
	PUSHJ	PP,COMKAR
	CAIE	CH,")"
	JRST	GTF13A
	JRST	GTFL10


;"!" SEEN -- CALL CUSP

GTFL14:	MOVSI	TE,(SIXBIT "SYS")
	MOVE	TD,TA
	SETZB	TC,TB
	SETZB	TA,PP
	MOVE	CH,[XWD 1,TE]
	CALLI	CH,$RUN
	JRST	4.,

	TTCALL	3,[ASCIZ "?MONITOR ERROR -- RUN UUO RETURNED TO COBOL
"]
	CALLI	$EXIT
;DETERMINE TYPE OF SWITCH

SWICH:	CAIN	CH,"S"
	JRST	SWICHS
	CAIN	CH,"M"
	JRST	SWICHM
	CAIN	CH,"L"
	JRST	SWICHL
	CAIN	CH,"A"
	JRST	SWICHA
	CAIN	CH,"E"
	JRST	SWICHE
	CAIN	CH,"H"
	JRST	SWICHH
	CAIN	CH,"C"
	JRST	SWICHC
	CAIN	CH,"Z"
	JRST	SWICHZ
	CAIN	CH,"W"
	JRST	SWICHW
	CAIN	CH,"R"
	JRST	SWICHR
	CAIN	CH,"N"
	JRST	SWICHN
	CAIN	CH,"P"
	JRST	SWICHP
	CAIN	CH,"I"
	JRST	SWICHI
	CAIN	CH,"J"
	JRST	SWICHJ

IFN DEBUG,<
	CAIN	CH,"T"
	JRST	SWICHT
	CAIN	CH,"K"
	JRST	SWICHK
	CAIN	CH,"F"
	JRST	SWICHF
	>

	JRST	BADCSW		;NO--BAD SWITCH
SWICHP:	SETOM	PRODSW		;SET '/P'
	POPJ	PP,

SWICHC:	SETOM	CREFSW		;SET '/C'
	POPJ	PP,

SWICHE:	SWON	FFATAL;		;TURN ON "/E"
	POPJ	PP,

SWICHH:	SWON	FHELP		;TURN ON /H
	POPJ	PP,

SWICHS:	SWON	FSEQ;		;TURN ON "/S"
	POPJ	PP,

SWICHM:	SWON	FMAP;		;TURN ON "/M"
	POPJ	PP,

SWICHL:	MOVEI	TA,1		;SET "L" FLAG IN TABLE
	JRST	SWZWL

SWICHA:	SWON	FOBJEC;		;TURN ON "/A"
	POPJ	PP,

SWICHZ:	MOVEI	TA,4		;SET "Z" FLAG IN TABLE
	JRST	SWZWL

SWICHR:	SWON	FREENT	;TURN ON "/R"
	POPJ	PP,

SWICHN:	SWOFF	FTERA		;TURN OFF 'WE'R TYPING ERRORS'
	POPJ	PP,

SWICHW:	MOVEI	TA,2	;SET "W" FLAG IN TABLE

SWZWL:	IORM	TA,DEVSW(DA)
	POPJ	PP,

SWICHI:	SETOM	SUBPRG		;DO NOT GENERATE START ADDRESS
	POPJ	PP,

SWICHJ:	SETOM	SLASHJ		;GENERATE START ADDRESS NO MATTER WHAT
	POPJ	PP,
;TO HANDLE "T" SWITCHES WHEN DEBUGGING

IFN DEBUG,<
SWICHT:	PUSHJ	PP,COMKAR
	MOVEI	TA,0
	CAIN	CH,"I"
	HRRZI	TA,TRACEI##
	CAIN	CH,"E"
	HRRZI	TA,TRACEE##
	CAIN	CH,"D"
	HRRZI	TA,TRACED##
	CAIN	CH,"P"
	HRRZI	TA,TRACEP##

	IORM	TA,CORESW##
	JUMPN	TA,SWCHKC

	MOVEI	TB,[ASCIZ /?BAD "T" SWITCH/]
	JRST	BADCOM
	>

;TO HANDLE "K" SWITCH WHEN DEBUGGING

IFN DEBUG,<
SWICHK:	PUSHJ	PP,COMKAR
	CAIG	CH,"G"
	CAIGE	CH,"A"
	JRST	SWCHKA

	HRLZI	TA,%KILLA##
SWCHKB:	LSH	TA,-"A"(CH)
	IORM	TA,CORESW
SWCHKC:	POPJ	PP,

SWCHKA:	MOVEI	TB,[ASCIZ /?BAD "K" SWITCH/]
	JRST	BADCOM
	>

;TO HANDLE "F" SWITCH WHEN DEBUGGING

IFN DEBUG,<
SWICHF:	PUSHJ	PP,COMKAR
	CAIG	CH,"G"
	CAIGE	CH,"A"
	JRST	SWCHFA

	HRLZI	TA,%KILFA##
	JRST	SWCHKB

SWCHFA:	MOVEI	TB,[ASCIZ /?BAD "F" SWITCH/]
	JRST	BADCOM
	>

;PICK UP A SIXBIT WORD FROM COMMAND STRING

GETSIX:	MOVEI	TA,0
	MOVE	TB,[POINT 6,TA]

GETSX1:	PUSHJ	PP,COMKAR	;NO--GET NEXT
GETSX2:	CAIG	CH,"Z"		;LETTER?
	CAIGE	CH,"A"
	JRST	GETSX4		;NO
GETSX3:	TLNN	TB,770000
	JRST	BADNAM

	SUBI	CH,40		;YES--STASH IT
	IDPB	CH,TB
	JRST	GETSX1

GETSX4:	CAIG	CH,"9"		;NOT LETTER--DIGIT?
	CAIGE	CH,"0"
	POPJ	PP,		;NO--RETURN
	JRST	GETSX3		;YES--STASH IT


;PICK UP AN OCTAL NUMBER

GETNUM:	MOVEI	TA,0		;CLEAR THE SUM
	PUSHJ	PP,COMKAR	;GET FIRST CHARACTER
	CAIN	CH," "		;SPACE?
	JRST	.-2		;YES--IGNORE IT

GETNM1:	CAIG	CH,"7"		;OCTAL DIGIT?
	CAIGE	CH,"0"
	JRST	GETNM2		;NO

	LSH	TA,3		;YES--ADD TO SUM
	IORI	TA,-"0"(CH)

	TLNE	TA,-1		;SUM > 777777?
	JRST	BADPPN		;YES--ERROR

	PUSHJ	PP,COMKAR	;NO--GET NEXT DIGIT
	JRST	GETNM1		;LOOP

GETNM2:	JUMPE	TA,BADPPN	;SUM = 0?
	POPJ	PP,		;NO--RETURN
;GET A CHARACTER FROM COMMAND STRING

COMKAR:	TSWFZ	FCOMCH;		;REGET SAME CHARACTER?
	JRST	COMKR6		;YES

COMKR0:	SOSG	COMBH+2		;GET CHARACTER FROM DISK OR TMPCOR
	JRST	COMKR2
COMKR1:	ILDB	CH,COMBH+1

	JUMPE	CH,COMKAR	;IGNORE NULLS

	CAIN	CH,15		;IGNORE CARRIAGE-RETURNS
	JRST	COMKAR

	CAIG	CH,"z"		;BETWEEN LC Z AND LC A?
	CAIGE	CH,"a"
	CAIA			;NOT LC
	SUBI	CH,40		;YES, CONVERT TO UC

	CAIE	CH,175		;SOME KIND OF ALT-MODE?
	CAIN	CH,176
	JRST	COMKR9		;YES
	CAIE	CH,32		;END-FILE?
	CAIN	CH,33		;NO--ANOTHER FLAVOR OF ALT-MODE?

	JRST	COMKR9		;YES

	CAIE	CH,12
	CAIN	CH,14
	JRST	COMK99

	CAIE	CH,"_"		;IS IT '_'?
	POPJ	PP,		;NO--RETURN

	MOVEI	CH,"="		;YES--CHANGE TO '='
	DPB	CH,COMBH+1	;STASH BACK INTO BUFFER FOR POSSIBLE NEXT TIME
	POPJ	PP,
;GET NEXT BUFFER FULL OF COMMANDS

COMKR2:	SKIPN	COMBH		;FROM TMPCOR?
	JRST	COMK2B		;YES--NO MORE

	IN	COM,		;GET NEXT BUFFER
	JRST	COMKR1		;NO ERRORS--RETURN

	GETSTS	COM,CH		;ERROR--GET DEVICE STATUS
	TRNE	CH,$ERAS	;ANY ERROR FLAGS UP?
	JRST	COMKR8		;YES--WE LOSE

	CLOSE	COM,		;CLOSE COMMAND FILE

	MOVE	CH,COMEXT	;IS EXTENSION
	CAIE	CH,(SIXBIT "TMP");  "TMP"?
	JRST	COMK2A		;NO--DON'T DELETE

	MOVEI	CH,0		;DELETE
	RENAME	COM,CH		;  COMMAND
	JFCL			;  FILE
COMK2A:	RELEASE	COM,		;RELEASE IT
	JRST	COMKR3

;GET RID OF TMPCOR AREA

COMK2B:	MOVSI	CH,(SIXBIT "COB")
	MOVEM	CH,COMBH+1
	MOVS	CH,JOBSA
	SUBI	CH,1
	HRLI	CH,-200
	MOVEM	CH,COMBH+2

	MOVE	CH,[XWD 2,COMBH+1]
	CALLI	CH,$TMPCR
	JFCL

;END OF COMMAND FILE

COMKR3:	SWON	FECOM	;TURN ON "END OF COMMAND"
COMKR4:	MOVEI	CH,15		;RETURN A CARRIAGE-RETURN
	POPJ	PP,
;REGET SAME CHARACTER

COMKR6:	LDB	CH,COMBH+1	;FROM DISK OR TMPCOR
	POPJ	PP,


;READ ERROR--WE LOSE

COMKR8:	TTCALL	3,[ASCIZ "?TRANSMISSION ERROR ON COMMAND FILE"]
	CALLI	$EXIT


;AN ALT-MODE WAS SEEN

COMKR9:	PUSHJ	PP,COMK99
	JRST	COMKR3


;TYPE OUT <C.R.>, <L.F.> IF INPUT FROM TTY

COMK99:	TSWT	FDSKC;
	TTCALL	3,[ASCIZ "
"]
	JRST	COMKR4
;ERROR ROUTINES

;"DSK" IS NOT THE DISK

NOTDSK:	TTCALL	3,[ASCIZ /? "DSK" IS NOT THE DISK
/]
	CALLI	$EXIT

;TOO MANY OUTPUT FILES

TUMANY:	MOVEI	TB,[ASCIZ "?IMPROPER COBOL COMMAND"]
	JRST	BADCOM

;BINARY DEVICE CANNOT DO BINARY

BADBIN:	MOVEI	TB,[ASCIZ ": CANNOT WRITE IN BINARY"]
	JRST	TYPEIT

;OUTPUT DEVICE CANNOT DO OUTPUT

BADOUT:	MOVEI	TB,[ASCIZ ": CANNOT DO OUTPUT"]
	JRST	TYPEIT

;SOURCE FILE IS NOT AN INPUT DEVICE

NOTIN:	MOVEI	TB,[ASCIZ ": CANNOT DO INPUT"]

TYPEIT:	MOVEI	CH,"?"
	TTCALL	1,CH
	MOVE	TA,DEVDEV(DA)
	PUSHJ	PP,SIXOUT##
	JRST	BADCOM
;ERROR ROUTINES (CONT'D)

;SOMETHING STRANGE ABOUT STRING
BADSTR:	MOVEI	TB,[ASCIZ "?IMPROPER COBOL COMMAND"]
	JRST	BADCOM

;COMMAND DEVICE UNAVAILABLE
NOCOMD:	MOVEI	TB,[ASCIZ "?INDIRECT COMMAND DEVICE UNAVAILABLE"]
	JRST	BADCOM

;COMMAND FILE CANNOT BE FOUND
NOCOMF:	MOVEI	TB,[ASCIZ "?CANNOT FIND COMMAND FILE"]
	JRST	BADCOM

;NAME TOO LONG

BADNAM:	MOVEI	TB,[ASCIZ "?NAME OF MORE THAN 6 CHARACTERS"]
	JRST	BADCOM

;BAD PROJECT-PROGRAMMER NUMBER
BADPPN:	MOVEI	TB,[ASCIZ "?IMPROPER PROJECT-PROGRAMMER NUMBER"]
	JRST	BADCOM

;IMPROPER CHARACTER IN STRING
BADKAR:	MOVEI	TB,[ASCIZ "?IMPROPER CHARACTER IN COMMAND"]
	JRST	BADCOM

;BAD SWITCH
BADCSW:	MOVEI	TB,"?"
	TTCALL	1,TB
	TTCALL	1,CH
	MOVEI	TB,[ASCIZ " IS NOT A LEGAL SWITCH"]
	JRST	BADCOM

;ERRORS WHILE INITIALIZING THE DEVICE

;NOT A LEGAL DEVICE
NOTDEV:	MOVEI	TB,[ASCIZ ": IS NOT A LEGAL DEVICE"]

	MOVEI	CH,"?"
	TTCALL	1,CH
	MOVE	TA,DEVDEV(DA)
	PUSHJ	PP,SIXOUT
	JRST	BADCOM
;ERROR ROUTINES  (CONT'D).

;NO FILE FOR DIRECTORY DEVICE
NOFILE:	TTCALL	3,[ASCIZ "?NO FILE NAME FOR "]
	JRST	BADC0

;TOO MANY SOURCE FILES
NOROOM:	MOVEI	TB,[ASCIZ "?TOO MANY SOURCE FILES"]
	JRST	BADCOM

;NO SOURCE FILES AT ALL
NOSRC:	TSWFZ	FHELP		;IS /H ON?
	JRST	HELP		;YES, OK
	MOVEI	TB,[ASCIZ "?NO SOURCE FILES SPECIFIED"]

;TYPE OUT MESSAGE AND RESTART COMPILATION

BADCOM::TTCALL	3,(TB)
BADC0:	TTCALL	3,[ASCIZ "
"]

BADC1:	TSWF	FESRC!FECOM	;END OF COMMAND STRING?
	JRST	BADC2		;YES
	PUSHJ	PP,COMKAR	;NO--GET CHARACTER
	CAIE	CH,15		;CARRIAGE-RETURN?
	JRST	BADC1		;NO--LOOP

BADC2:	TSWT	FDSKC		;COMMANDS FROM TTY?
	JRST	COBOLA		;YES
	AND	SW,[EXP FDSKC]	;NO--CLEAR ALL SWITCHES EXCEPT FDSKC
	JRST	COBLAS
;ERROR ROUTINES  (CONT'D).
;LIBRARY DEVICE IMPROPER
BADLIB:	MOVEI	TB,[ASCIZ "?LIBRARY DEVICE MUST BE DSK"]
	JRST	BADCOM


;DOUBLE NAMTAB ENTRY

DBLNAM:	TTCALL	3,[ASCIZ "NAMTAB ENTRY DUPLICATED
"]
	JRST	KILL

;CANNOT ENTER A FILE

NOENTR:	TTCALL	3,[ASCIZ "?CANNOT ENTER "]
	JRST	ERATYP##
;THIS ROUTINE IS MOVED TO THE LOW-SEGMENT

%WEDID:	JRST	@WEDIED+1	;GO TO "KILL" ROUTINE
	Z

%GETLD:	MOVEM	17,SAVEAC+17	;SAVE
	MOVEI	17,SAVEAC##	;  ALL
	BLT	17,SAVEAC+16	;  AC'S

	MOVEI	1,WEDIED+%CANT-%WEDID	;SET UP "REENTR" TO GO TO ERROR
	HRRM	1,JOBREN##
	HRRM	1,JOBSA

	MOVSI	1,1		;THROW AWAY
	CALLI	1,11		;  THE HI-SEGMENT
	JRST	4,WEDIED+.-%WEDID	;COULDN'T--MONITOR PROBLEM

	MOVEI	1,GETFNM	;CALL
	CALLI	1,$GTSEG	;  GETSEG
	JRST	4,WEDIED+.-%WEDID	;ERROR

	MOVSI	17,SAVEAC	;RESTORE AC'S
	BLT	17,16
	MOVE	17,SAVEAC+17

%DDTST:	JRST	@GETFST		;GO TO HI-SEGMENT

%GTFNM:	Z
	Z
	SIXBIT	"SHR"
	Z
	Z
	Z

%GTFST:	Z

%CANT:	TTCALL	3,WEDIED+%CANT+2-%WEDID
	CALLI	$EXIT
	ASCIZ	"?CANNOT RESTART"
;TABLE OF SCRATCH DEVICES
;LH IS NAME OF A FILE, IN SIXBIT
;RH IS THE ADDRESS OF AN ENTRY TO CONTAIN DEVICE NAME, ETC.

DEVTAB:	XWD	'NAM',NAMDEV
	XWD	'ERA',ERADEV
	XWD	'GEN',GENDEV
	XWD	'CPY',CPYDEV
	XWD	'AS1',AS1DEV
	XWD	'AS2',AS2DEV
	XWD	'AS3',AS3DEV
	XWD	'LIT',LITDEV
	XWD	'CRF',CRFDEV
DEVXWD:	XWD	DEVTAB-.,0

;TABLE OF MONTHS

MOTABL:	ASCII "-JAN-"
	ASCII "-FEB-"
	ASCII "-MAR-"
	ASCII "-APR-"
	ASCII "-MAY-"
	ASCII "-JUN-"
	ASCII "-JUL-"
	ASCII "-AUG-"
	ASCII "-SEP-"
	ASCII "-OCT-"
	ASCII "-NOV-"
	ASCII "-DEC-"

;TABLE OF WORK TABLES

	DEFINE TABSET (A,B,C,E,F,G),<
	IFDIF <NAM>,<A>,<IFN ^D'B,<
	XWD -^D'B-1,A'LOC
	EXTERNAL A'LOC
	>>>


	XALL

WRKTAB:	TABLES
WRKXWD:	XWD	WRKTAB-.,WRKTAB
SUBTTL TABLE OF RESERVED WORDS

;VERBS

;001 ACCEPT				020 MOVE
;002 ADD				021 MULTIPLY
;003 ALTER				022 NOTE
;004 CLOSE				023 OPEN
;005 COMPUTE				024 PERFORM
;006 COPY 				025 READ
;007 DISPLAY				026 RELEASE
;010 DIVIDE				027 RETURN
;011 ELSE 				030 SEARCH
;012					031 SEEK
;013 ENTER				032 SET
;014 EXAMINE				033 SORT
;015 EXIT 				034 STOP
;016 GO					035 SUBTRACT
;017 IF					036 USE
;					037 WRITE

;040 INITIATE
;041 GENERATE
;042 TERMINATE
;043 DELETE
;044 REWRITE
;WORDS USED ONLY BY ID & ED SCANS

;100 ACCESS				126 PROGRAM-ID
;101 ACTUAL				127 RANDOM
;102 ALTERNATE				130 REMARKS
;103 AREA,AREAS				131 RERUN
;104 ASSIGN				132 RESERVE
;105 AUTHOR				133 SAME
;106 CONFIGURATION			134 SECURITY
;107 CURRENCY				135 SEGMENT-LIMIT
;110 DATE-COMPILED			136 SELECT
;111 ENVIRONMENT			137 SEQUENTIAL
;					140 SIGN
;112 FILE-CONTROL 			141 SOURCE-COMPUTER
;113 FILE-LIMIT,FILE-LIMITS		142 SPECIAL-NAMES
;114 I-O-CONTROL			143 STATUS
;115 INSTALLATION 			144 TAPE
;116 MEMORY				145 WORDS
;117 MODULES				146 SYMBOLIC
;120 MULTIPLE				147 COMMA
;121 OBJECT-COMPUTER			150 DECIMAL-POINT
;122					151 MODE
;123 OPTIONAL				152 RELATIVE
;124 POSITION				153 DEFERRED
;125 PROCESSING				154 CHANNEL
;					155
;					156 PDP-6
;					157 PDP-10
;					160 RECORDING
;					161 DENSITY
;					162 PARITY
;					163 ASCII
;					164 SIXBIT
;					165 BINARY
;					166 EBCDIC
;					167 ODD
;					170 EVEN
;WORDS WHICH CAN GO AWAY AFTER DD SCAN

;201 ALPHANUMERIC 			222 LIMIT[S] 
;202 BLANK				223 LEFT
;203 BLOCK				224 OCCURS
;204 COMP,COMPUTATIONAL			225 OMITTED
;205 COMP-1,COMPUTATIONAL-1		226 PIC,PICTURE
;206 CONTAINS				227 RD 
;207 DATA 				230 REDEFINES
;210 DATE-WRITTEN 			231 RENAMES
;211
;212 DISPLAY-6				232 RIGHT
;213 DISPLAY-7				233 SD
;214 FD					234 
;215					235 SYNC,SYNCHRONIZED
;216 IDENTIFICATION,ID			236 USAGE
;217 INDEX				237 VALUE,VALUES
;220 INDEXED
;221 JUST,JUSTIFIED

;240 WORKING-STORAGE			260 CONTROL[S]
;241 CHARACTERS				261
;242 USER-AREA				262 FINAL
;243 LINKAGE				263 FOOTING
;244					264 GROUP
;245					265 HEADING
;246					266 INDICATE
;247 TYPE				267 LAST

;250 RH					270 NUMBER
;251 PH					271 PAGE
;252 CH					272 PLUS
;253 DE,DETAIL				273 REPORT[S]
;254 CF					274 RESET
;255 PF					275 SOURCE
;256 RF					276 SUM
;257 COLUMN				277 CODE
;WORDS USED BY ALL PHASES

;300 ADVANCING				341 LEADING
;301 AFTER				342 LESS,"<"
;302 CONSOLE
;303 ALPHABETIC				343 LINE,LINES
;304 AND				344 LOCK
;305 ARE (SEE IS) 			345 NEGATIVE
;305 IS (SEE ARE) 			346 NEXT
;306 ASCENDING				347 NO
;307 AT					350 NOT
;310 BEFORE				351 NUMERIC
;311 BEGINNING				352 ON
;312 BY					353 OR
;313 COBOL				354 OUTPUT
;314 CORR,CORRESPONDING			355 POSITIVE
;315 DECLARATIVES 			356 PROCEED
;316 DEPENDING				357 RECORD,RECORDS
;317 DESCENDING				360 REEL (SEE UNIT)
;320 DOWN 				360 UNIT (SEE REEL)
;321 ENDING				361 REPLACING
;322 EQUAL,EQUALS,"="			362 REVERSED
;323 ERROR				363 REWIND
;324 EVERY				364 ROUNDED
;325 FILE 				365 RUN
;326 FIRST				366 SECTION
;327 FOR				367 SENTENCE
;330 FROM 				370 TALLYING
;331 GIVING				371 THAN
;332 GREATER,">"			372 THRU,THROUGH
;333 INPUT-OUTPUT,I-O			373 TIMES
;334 IN (SEE OF)			374 TO
;334 OF (SEE IN)			375 UNTIL
;335 INPUT				376 UP
;336 INTO 				377 UPON
;337 INVALID
;340 KEY,KEYS


;400 USING				405 DIVISION
;401 VARYING				406 END
;402 WHEN				407 STANDARD
;403 WITH				410 LABEL
;404 SIZE				411 PROCEDURE
;					412 OFF
;					413 REMAINDER
;					414 MACRO
;					415 FORTRAN-IV
;					416 SWITCH
;					417 REPORTING
;					420 TRACE
;					421 FILLER
;422 CALL
;423 FORTRAN
;424 CANCEL
;425 ENTRY
;426 GOBACK
;427 PROGRAM
;430 OVERFLOW
;700 HIGH-VALUE,HIGH-VALUES		704 TALLY
;701 LOW-VALUE,LOW-VALUES		705 ZERO,ZEROS,ZEROES
;702 QUOTE,QUOTES			706 ALL
;703 SPACE,SPACES			707 TODAY

;765 ,					772 +
;766 ;					773 -
;767 (					774 /
;770 )					775 *
;771 .					776 **

;777 END OF SOURCE
;RESERVED WORDS BY NAME

	DEFINE TABLE, <XLIST

	NTVAL 001,ACCEPT
	NTVAL 100,ACCESS
	NTVAL 101,ACTUAL
	NTVAL 002,ADD
	NTVAL 300,ADVANCING
	NTVAL 301,AFTER
	NTVAL 706,ALL
	NTVAL 303,ALPHABETIC
	NTVAL 003,ALTER
	NTVAL 102,ALTERNATE
	NTVAL 304,AND
	NTVAL 305,ARE
	NTVAL 103,AREA
	NTVAL 103,AREAS
	NTVAL 306,ASCENDING
	NTVAL 163,ASCII
	NTVAL 104,ASSIGN
	NTVAL 307,AT
	NTVAL 105,AUTHOR
	NTVAL 310,BEFORE
	NTVAL 311,BEGINNING
	NTVAL 165,BINARY
	NTVAL 202,BLANK
	NTVAL 203,BLOCK
	NTVAL 312,BY
	NTVAL 422,CALL
	NTVAL 424,CANCEL
	NTVAL 254,CF
	NTVAL 252,CH
	NTVAL 154,CHANNEL
	NTVAL 241,CHARACTERS
	NTVAL 004,CLOSE
	NTVAL 313,COBOL
	NTVAL 277,CODE
	NTVAL 257,COLUMN
	NTVAL 147,COMMA
	NTVAL 204,COMP
	NTVAL 205,COMP:1
	NTVAL 204,COMPUTATIONAL
	NTVAL 205,COMPUTATIONAL:1
	NTVAL 005,COMPUTE
	NTVAL 106,CONFIGURATION
	NTVAL 302,CONSOLE
	NTVAL 206,CONTAINS
	NTVAL 260,CONTROL
	NTVAL 260,CONTROLS
	NTVAL 006,COPY
	NTVAL 314,CORR
	NTVAL 314,CORRESPONDING
	NTVAL 107,CURRENCY
	NTVAL 207,DATA
	NTVAL 110,DATE:COMPILED
	NTVAL 210,DATE:WRITTEN
	NTVAL 253,DE
	NTVAL 150,DECIMAL:POINT
	NTVAL 315,DECLARATIVES
	NTVAL 157,DECSYSTEM10
	NTVAL 157,DECSYSTEM:10
	NTVAL 153,DEFERRED
	NTVAL 043,DELETE
	NTVAL 161,DENSITY
	NTVAL 316,DEPENDING
	NTVAL 317,DESCENDING
	NTVAL 253,DETAIL
	NTVAL 007,DISPLAY
	NTVAL 212,DISPLAY:6
	NTVAL 213,DISPLAY:7
	NTVAL 010,DIVIDE
	NTVAL 405,DIVISION
	NTVAL 320,DOWN
	NTVAL 166,EBCDIC
	NTVAL 011,ELSE
	NTVAL 406,END
	NTVAL 321,ENDING
	NTVAL 013,ENTER
	NTVAL 425,ENTRY
	NTVAL 111,ENVIRONMENT
	NTVAL 322,EQUAL
	NTVAL 322,EQUALS
	NTVAL 323,ERROR
	NTVAL 170,EVEN
	NTVAL 324,EVERY
	NTVAL 014,EXAMINE
	NTVAL 015,EXIT
	NTVAL 214,FD
	NTVAL 325,FILE
	NTVAL 112,FILE:CONTROL
	NTVAL 113,FILE:LIMIT
	NTVAL 113,FILE:LIMITS
	NTVAL 421,FILLER
	NTVAL 262,FINAL
	NTVAL 326,FIRST
	NTVAL 263,FOOTING
	NTVAL 327,FOR
	NTVAL 423,FORTRAN
	NTVAL 415,FORTRAN:IV
	NTVAL 330,FROM
	NTVAL 331,GIVING
	NTVAL 041,GENERATE
	NTVAL 016,GO
	NTVAL 426,GOBACK
	NTVAL 332,GREATER
	NTVAL 264,GROUP
	NTVAL 265,HEADING
	NTVAL 700,HIGH:VALUE
	NTVAL 700,HIGH:VALUES
	NTVAL 333,I:O
	NTVAL 114,I:O:CONTROL
	NTVAL 216,ID
	NTVAL 216,IDENTIFICATION
	NTVAL 017,IF
	NTVAL 334,IN
	NTVAL 217,INDEX
	NTVAL 220,INDEXED
	NTVAL 266,INDICATE
	NTVAL 040,INITIATE
	NTVAL 335,INPUT
	NTVAL 333,INPUT:OUTPUT
	NTVAL 115,INSTALLATION
	NTVAL 336,INTO
	NTVAL 337,INVALID
	NTVAL 305,IS
	NTVAL 221,JUST
	NTVAL 221,JUSTIFIED
	NTVAL 340,KEY
	NTVAL 340,KEYS
	NTVAL 410,LABEL
	NTVAL 267,LAST
	NTVAL 341,LEADING
	NTVAL 223,LEFT
	NTVAL 342,LESS
	NTVAL 222,LIMIT
	NTVAL 222,LIMITS
	NTVAL 343,LINE
	NTVAL 343,LINES
	NTVAL 243,LINKAGE
	NTVAL 344,LOCK
	NTVAL 701,LOW:VALUE
	NTVAL 701,LOW:VALUES
	NTVAL 414,MACRO
	NTVAL 116,MEMORY
	NTVAL 151,MODE
	NTVAL 117,MODULES
	NTVAL 020,MOVE
	NTVAL 120,MULTIPLE
	NTVAL 021,MULTIPLY
	NTVAL 345,NEGATIVE
	NTVAL 346,NEXT
	NTVAL 347,NO
	NTVAL 350,NOT
	NTVAL 022,NOTE
	NTVAL 270,NUMBER
	NTVAL 351,NUMERIC
	NTVAL 121,OBJECT:COMPUTER
	NTVAL 224,OCCURS
	NTVAL 167,ODD
	NTVAL 334,OF
	NTVAL 412,OFF
	NTVAL 225,OMITTED
	NTVAL 352,ON
	NTVAL 023,OPEN
	NTVAL 123,OPTIONAL
	NTVAL 353,OR
	NTVAL 354,OUTPUT
	NTVAL 430,OVERFLOW
	NTVAL 271,PAGE
	NTVAL 162,PARITY
	NTVAL 157,PDP:10
	NTVAL 024,PERFORM
	NTVAL 255,PF
	NTVAL 251,PH
	NTVAL 226,PIC
	NTVAL 226,PICTURE
	NTVAL 272,PLUS
	NTVAL 124,POSITION
	NTVAL 355,POSITIVE
	NTVAL 411,PROCEDURE
	NTVAL 356,PROCEED
	NTVAL 125,PROCESSING
	NTVAL 427,PROGRAM
	NTVAL 126,PROGRAM:ID
	NTVAL 702,QUOTE
	NTVAL 702,QUOTES
	NTVAL 127,RANDOM
	NTVAL 227,RD
	NTVAL 025,READ
	NTVAL 357,RECORD
	NTVAL 160,RECORDING
	NTVAL 357,RECORDS
	NTVAL 230,REDEFINES
	NTVAL 360,REEL
	NTVAL 152,RELATIVE
	NTVAL 026,RELEASE
	NTVAL 413,REMAINDER
	NTVAL 130,REMARKS
	NTVAL 231,RENAMES
	NTVAL 361,REPLACING
	NTVAL 273,REPORT
	NTVAL 273,REPORTS
	NTVAL 417,REPORTING
	NTVAL 131,RERUN
	NTVAL 132,RESERVE
	NTVAL 274,RESET
	NTVAL 027,RETURN
	NTVAL 362,REVERSED
	NTVAL 363,REWIND
	NTVAL 044,REWRITE
	NTVAL 256,RF
	NTVAL 250,RH
	NTVAL 232,RIGHT
	NTVAL 364,ROUNDED
	NTVAL 365,RUN
	NTVAL 133,SAME
	NTVAL 233,SD
	NTVAL 030,SEARCH
	NTVAL 366,SECTION
	NTVAL 134,SECURITY
	NTVAL 031,SEEK
	NTVAL 135,SEGMENT:LIMIT
	NTVAL 136,SELECT
	NTVAL 367,SENTENCE
	NTVAL 137,SEQUENTIAL
	NTVAL 032,SET
	NTVAL 140,SIGN
	NTVAL 164,SIXBIT
	NTVAL 404,SIZE
	NTVAL 033,SORT
	NTVAL 275,SOURCE
	NTVAL 141,SOURCE:COMPUTER
	NTVAL 703,SPACE
	NTVAL 703,SPACES
	NTVAL 142,SPECIAL:NAMES
	NTVAL 407,STANDARD
	NTVAL 143,STATUS
	NTVAL 034,STOP
	NTVAL 035,SUBTRACT
	NTVAL 276,SUM
	NTVAL 416,SWITCH
	NTVAL 235,SYNC
	NTVAL 235,SYNCHRONIZED
	NTVAL 146,SYMBOLIC
	NTVAL 704,TALLY
	NTVAL 370,TALLYING
	NTVAL 144,TAPE
	NTVAL 042,TERMINATE
	NTVAL 371,THAN
	NTVAL 372,THROUGH
	NTVAL 372,THRU
	NTVAL 373,TIMES
	NTVAL 374,TO
	NTVAL 707,TODAY
	NTVAL 420,TRACE
	NTVAL 247,TYPE
	NTVAL 360,UNIT
	NTVAL 375,UNTIL
	NTVAL 376,UP
	NTVAL 377,UPON
	NTVAL 236,USAGE
	NTVAL 036,USE
	NTVAL 242,USER:NUMBER
	NTVAL 400,USING
	NTVAL 237,VALUE
	NTVAL 237,VALUES
	NTVAL 401,VARYING
	NTVAL 402,WHEN
	NTVAL 403,WITH
	NTVAL 145,WORDS
	NTVAL 240,WORKING:STORAGE
	NTVAL 037,WRITE
	NTVAL 705,ZERO
	NTVAL 705,ZEROES
	NTVAL 705,ZEROS
	LIST>

	DEFINE PUTVAL (C,D), <Z==.
		XWD X'D,C>

	DEFINE SETVAL (E), <
		X'E==.-Z>

	DEFINE NTVAL (A,B), <
		PUTVAL A,\I
		SIXBIT "'B' "
		SETVAL \I
		I==I+1
		>

	XALL
	I==0

NAMDAT:	TABLE;
	0
EXTERNAL SRCDEV,LSTDEV,BINDEV,ERADEV,GENDEV,CPYDEV,NAMDEV
EXTERNAL AS1DEV,AS2DEV,AS3DEV,LIBDEV,LITDEV,CRFDEV
EXTERNAL SRCBUF,LSTBUF,BINBUF,LIBBUF,AS1BUF,GENBUF
EXTERNAL AS2BUF,AS3BUF,CPYBUF

EXTERNAL COMBH,LIBSET,I0CHAN,LSTBLK,BINBLK
EXTERNAL PPOINT,ENTROP,LOOKOP,OUTBOP,TOPLOC,LASTDV,GENWRD
EXTERNAL STDATE,STTIME,PHASEN,FSTCLR,FREESP,EXTNXT

EXTERNAL NAMLOC,TAGLOC,EXTPTR,CREFSW,PRODSW,WASERC

EXTERNAL NAMVAL,NAMWRD,NAMNXT,NAMNSZ,NM12SZ,NAMBAS,NM1SIZ,NSZPTR
EXTERNAL NM1LOC,NM2LOC,NAMPSZ,NTSIZE,NTNSIZ,SIZTAB
EXTERNAL GETLOD,GETFNM,GETFST

EXTERNAL DEVDEV,DEVFIL,DEVEXT,DEVBHI,DEVBH,DEVBLK,DEVBUF,DEVPP,DEVSW,DEVSIZ
EXTERNAL SRCTOP,LIBTOP,LSTSWS,BINSWS,LIBSWS,IOSRCS,SRCEND,COMEXT


	END COBOLA
   qEg