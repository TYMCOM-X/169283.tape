-CROSREF
*
*       PROGRAM BUILDER.
*
        DECLARE('SNOBOL.SUBPROGRAM','CSBLD')
        DECLARE('PURGE.VARIABLE',ALL)
        DECLARE('PURGE.LABEL',ALL)
        DECLARE('EXTERNAL.FUNCTION','GETLIN,ENDLIN,FILESC,FILEOP,HELP')
        DECLARE('GLOBAL.VARIABLE','BLDLIST,BLDHELP,BLDJMP,BLDHTYPE')
        DECLARE('GLOBAL.VARIABLE','ENVLIST,ENVHELP,ENVJMP,ENVHTYPE')
        DECLARE('GLOBAL.VARIABLE','DATALIST,DATAHELP,DATAJMP,DATAHTYPE')
        DECLARE('GLOBAL.LABEL','BLD1 BLD2 BLD3 BLD4 BLD5 BLD6')
        DECLARE('GLOBAL.LABEL','BLDENT')
        DECLARE('GLOBAL.LABEL','ENV1 ENV2 ENV3')
        DECLARE('GLOBAL.LABEL','DATA1 DATA2 DATA3')
        DECLARE('EXTERNAL.VARIABLE','LUPNAM,INFL,INFLC,OUTFL,OUTFLC')
        DECLARE('EXTERNAL.VARIABLE','PROGFL,PROGRM,ALPNUM,FILECH,CRLF')
        DECLARE('EXTERNAL.VARIABLE','LUPRMT')
        DECLARE('EXTERNAL.LABEL','COMLUP COMERR FOPERR')
        DECLARE('EXTERNAL.FUNCTION','COBCOP,PERIOD,MARGNA,MARGNB')
        DECLARE('EXTERNAL.FUNCTION','COBIN,EDIT')
        DECLARE('ENTRY.FUNCTION','BLDINT()')
        DECLARE('UNPURGE.VARIABLE','BLDINT')
        DECLARE('UNPURGE.LABEL','BLDINT')
*
*       INITIALIZE PROGRAM BUILDER.
*
BLDINT  BLDLIST = ARRAY(9) ; BLDHELP = ARRAY(9)
        BLDJMP = ARRAY(9) ; BLDHTYPE = 'FUNCTIONS'
        BLDLIST<1> = 'IDENTIFICATION' ; BLDJMP<1> = 'BLD1'
                BLDHELP<1> = 'CONSTRUCT IDENTIFICATION DIVISION'
        BLDLIST<2> = 'ENVIORNMENT' ; BLDJMP<2> = 'BLD2'
                BLDHELP<2> = 'CONSTRUCT ENVIORNMENT DIVISION'
        BLDLIST<3> = 'DATA' ; BLDJMP<3> = 'BLD3'
                BLDHELP<3> = 'CONSTRUCT DATA DIVISION FILE SECTION'
        BLDLIST<4> = 'WORKING-STORAGE' ; BLDJMP<4> = 'BLD4'
                BLDHELP<4> = 'CONSTRUCT WORKING-STORAGE SECTION'
        BLDLIST<5> = 'PROCEDURE' ; BLDJMP<5> = 'BLD5'
                BLDHELP<5> = 'CONSTRUCT PROCEDURE DIVISION'
        BLDLIST<6> = 'MAKE' ; BLDJMP<6> = 'BLD6'
                BLDHELP<6> = 'COMBINE SEPARATE DIVISIONS'
        BLDLIST<7> = 'END' ; BLDJMP<7> = 'MAIENT'
                BLDHELP<7> = 'RETURN TO SUPPORT COMMAND LEVEL'
        BLDLIST<8> = 'QUIT' ; BLDJMP<8> = 'QUIT'
               BLDHELP<8> = 'RETURN TO EXECUTIVE'
        BLDLIST<9> = 'HELP' ; BLDJMP<9> = 'CMHELP'
                BLDHELP<9> = 'TYPE THIS LIST'
        ENVLIST = ARRAY(6) ; ENVHELP = ARRAY(6)
        ENVJMP = ARRAY(6) ; ENVHTYPE = 'ANSWERS'
        ENVLIST<1> = 'LIST' ; ENVJMP<1> = 'ENV1'
                ENVHELP<1> = 'LIST STANDARD ENVIORNMENT DIVISION'
        ENVLIST<2> = 'YES' ; ENVJMP<2> = 'ENV2'
                ENVHELP<2> = 'USE STANDARD ENVIORNMENT DIVISION'
        ENVLIST<3> = 'NO' ; ENVJMP<3> = 'ENV3'
                ENVHELP<3> = 'CREATE ENVIORNMENT DIVISION IN EDITOR'
        ENVLIST<4> = 'END' ; ENVJMP<4> = 'BLDENT'
               ENVHELP<4> = 'RETURN TO PROGRAM BUILDER'
        ENVLIST<5> = 'QUIT' ; ENVJMP<5> = 'QUIT'
               ENVHELP<5> = 'RETURN TO EXECUTIVE'
        ENVLIST<6> = 'HELP' ; ENVJMP<6> = 'CMHELP'
                ENVHELP<6> = 'TYPE THIS LIST'
        DATALIST = ARRAY(6) ; DATAHELP = ARRAY(6)
        DATAJMP = ARRAY(6) ; DATAHTYPE = 'COMMANDS'
        DATALIST<1> = 'BUILD' ; DATAJMP<1> = 'DATA1'
                DATAHELP<1> = 'CONSTRUCT DATA DIVISION FILE SECTION'
        DATALIST<2> = 'APPEND' ; DATAJMP<2> = 'DATA2'
                DATAHELP<2> = 'APPEND TO DATA DIVISION FILE SECTION'
        DATALIST<3> = 'EDIT' ; DATAJMP<3> = 'DATA3'
                DATAHELP<3> = 'EDIT DATA DIVISION FILE SECTION'
        DATALIST<4> = 'END' ; DATAJMP<4> = 'BLDENT'
                DATAHELP<4> = 'RETURN TO PROGRAM BUILDER'
        DATALIST<5> = 'QUIT' ; DATAJMP<5> = 'QUIT'
                DATAHELP<5> = 'RETURN TO EXECUTIVE'
        DATALIST<6> = 'HELP' ; DATAJMP<6> = 'CMHELP'
                DATAHELP<6> = 'TYPE THIS LIST'   :(RETURN)
*
*       ENTER PROGRAM BUILDER.
*
BLDENT  OUTPUT = 
        OUTPUT = 'COBOL PROGRAM BUILDER ACTIVE'
        OUTPUT =
        LUPRMT = CRLF 'FUNCTION? '
        LUPNAM = 'BLD'                           :(COMLUP)
*
*       IDENTIFICATION COMMAND. BUILD AN IDENTIFICATION DIVISION
*       FILE WITH EXTENSION 'IDD'.
*
BLD1    ?ENDLIN()                                :F(COMERR)
        DIVIFILE = 'DSK:' PROGRM '.IDD'
        ?FILEOP(2,DIVIFILE,'OUTFL')              :F(FOPERR)
        OUTFL = 'IDENTIFICATION DIVISION.'
        OUTFL = 'PROGRAM-ID. ' PROGRM '.'
        OUTPUT =
        ?MARGNA(PERIOD(COBIN('AUTHOR. ')))
        ?MARGNA(PERIOD(COBIN('INSTALLATION. ')))
        ?MARGNA(PERIOD(COBIN('DATE-WRITTEN. ')))
        ?MARGNA(PERIOD(COBIN('DATA-COMPILIED. ')))
        ?MARGNA(PERIOD(COBIN('SECURITY. ')))
        ?MARGNA(PERIOD(COBIN('REMARKS. ')))
        ?RELEASE(2)                              :(COMLUP)
*
*       ENVIORNMENT COMMAND. BUILD AN ENVIORNMENT DIVISION FILE
*       WITH EXTENSION 'ENV'.
*
BLD2    ?ENDLIN()                                :F(COMERR)
        DIVIFILE = 'DSK:' PROGRM '.ENV'
        ?FILEOP(2,DIVIFILE,'OUTFL')              :F(FOPERR)
        OUTFL = 'ENVIORNMENT DIVISION.'
        OUTPUT = 'IS THE STANDARD ENVIORNMENT DIVISION SUFFICIENT?'
        OUTPUT = '(FOR EXAMPLE TYPE LIST)'
        LUPRMT = '? '
        LUPNAM = 'ENV'                           :(COMLUP)
*
*       LIST STANDARD ENVIORNMENT DIVISION.
*
ENV1    ?ENDLIN()                                :F(COMERR)
        OUTPUT =
        OUTPUT = 'ENVIORNMENT DIVISION.'
        OUTPUT = 'CONFIGURATION SECTION.'
        OUTPUT = 'SOURCE-COMPUTER. PDP-10.'
        OUTPUT = 'OBJECT-COMPUTER. PDP-10.'
        OUTPUT = 'INPUT-OUTPUT SECTION.'
        OUTPUT = 'FILE-CONTROL.'
        OUTPUT = '        SELECT XXX ASSIGN TO DSK'
        OUTPUT = '        RECORDING MODE IS ASCII.'
        OUTPUT = '(WHERE XXX IS A NAME SUPPLIED BY THE USER.)'
        OUTPUT = '(ANY NUMBER OF SELECT STATEMENTS ARE ALLOWED.)'
        OUTPUT =                                 :(COMLUP)
*
*       USE STANDARD EVIORMENT DIVISION.
*
ENV2    ?ENDLIN()                                :F(COMERR)
        OUTFL = 'CONFIGURATION SECTION.'
        OUTFL = 'SOURCE-COMPUTER. PDP-10.'
        OUTFL = 'OBJECT-COMPUTER. PDP-10.'
        OUTFL = 'INPUT-OUTPUT SECTION.'
        OUTFL = 'FILE-CONTROL.'
        OUTPUT =
        OUTPUT = 'TYPE <CR> WHEN DONE'
        OUTPUT =
ENV21   ?MARGNB(COBIN('SELECT ','UCNAME') ' ASSIGN TO DSK')
        ?MARGNB('RECORDING MODE IS ASCII.')      :S(ENV21)
        ?RELEASE(2)                              :(BLDENT)
*
*       CONSTRUCT ENVIORNMENT DIVISION IN EDITOR.
*
ENV3    ?ENDLIN()                                :F(COMERR)
        ?RELEASE(2)
        ?EDIT(PROGRM '.ENV')                     :(BLDENT)
*
*       DATA COMMAND. BUILD A DATA DIVISION FILE
*       WITH EXTENSION '.DAD'. ONLY INCLUDES THE FILE SECTION. USE
*       WORKING-STORAGE COMMAND FOR REST OF DIVISION.
*
BLD3    DIVIFILE = 'DSK:' PROGRM '.DAD'
        OUTPUT =
        OUTPUT = 'DATA DIVISION BUILDER ACTIVE'
        OUTPUT =
        LUPRMT = CRLF 'COMMAND? '
        LUPNAM = 'DATA'                          :(COMLUP)
*
*       BUILD COMMAND. GENERATE A NEW DATA DIVSION FILE.
*
DATA1   ?ENDLIN()                                :F(COMERR)
        ?FILEOP(2,DIVIFILE,'OUTFL')              :F(FOPERR)
        OUTFL = 'DATA DIVISION.'
        OUTFL = 'FILE SECTION.'
DATA11  OUTPUT =
        ?MARGNA(COBIN('FD ','UCNAME'))           :F(DATA14)
        ?MARGNB(COBIN('BLOCK CONTAINS '))
        ?MARGNB(COBIN('RECORD CONTAINS '))
        ?MARGNB(COBIN('LABEL RECORDS ARE '))
        ?MARGNB(COBIN('VALUE OF IDENTIFICATION IS ','FCHECK'))
        ?MARGNB(COBIN('VALUE OF DATE-WRITTEN IS '))
        ?MARGNB(PERIOD(COBIN('DATA RECORDS ARE ')))
        OUTPUT = 'ENTER YOUR RECORD DESCRIPTIONS HERE (<CR> WHEN DONE):'
DATA12  OUTPUTC = '? '
        LINE = TRIM(INPUT)
        ?IDENT(LINE)                             :S(DATA11)
        LINE '01' ! '-' ! '*'                    :F(DATA13)
        ?MARGNA(LINE)                            :(DATA12)
DATA13  ?MARGNB(LINE)                            :(DATA12)
DATA14  ?RELEASE(2)                              :(COMLUP)
*
*       APPEND COMMAND. APPEND TO AN EXISTING DATA DIVISION FILE.
*
DATA2   ?ENDLIN()                                :F(COMERR)
        ?FILEOP(1,DIVIFILE,'INFL')               :F(FOPERR)
        ?FILEOP(2,DIVIFILE,'OUTFL')              :F(FOPERR)
DATA21  OUTFL = INFL                             :S(DATA21)
        ?RELEASE(1)                              :(DATA11)
*
*       EDIT COMMAND. EDIT AN EXISTING DATA DIVISION FILE OR CREATE
*       AND EDIT A NEW ONE.
*
DATA3   ?ENDLIN()                                :F(COMERR)
        ?EDIT(PROGRM '.DAD')                     :(COMLUP)
*
*       WORKING-STORAGE COMMAND. CREATE A WORKING STORAGE FILE WITH
*       EXTENSION '.WKS' IN EDITOR.
*
BLD4    ?ENDLIN()                                :F(COMERR)
        DIVIFILE = 'DSK:' PROGRM '.WKS'
        ?FILEOP(2,DIVIFILE,'OUTFL')              :F(FOPERR)
        OUTFL = 'WORKING-STORAGE SECTION.'
        ?RELEASE(2)
        ?EDIT(PROGRM '.WKS')                     :(COMLUP)
*
*       PROCEDURE COMMAND. CREATE A PROCEDURE DIVISION FILE
*       WITH EXTENSION '.PRD' IN EDITOR.
*
BLD5    ?ENDLIN()                                :F(COMERR)
        DIVIFILE = 'DSK:' PROGRM '.PRD'
        ?FILEOP(2,DIVIFILE,'OUTFL')              :F(FOPERR)
        OUTFL = 'PROCEDURE DIVISION.'
        OUTFL = 'USER-FIRST-PARAGRAPH.'
        ?RELEASE(2)
        ?EDIT(PROGRM '.PRD')                     :(COMLUP)
*
*       MAKE COMMAND. COMBINE THE SEPARATE DIVISION FILES TO
*       CONSTRUCT COBOL PROGRAM FILE WITH EXTENSION '.CBL'.
*
BLD6    ?ENDLIN()                                :F(COMERR)
        ?FILEOP(2,PROGFL,'OUTFL')                :F(FOPERR)
        ?COBCOP('IDD')                           :F(FOPERR)
        ?COBCOP('ENV')                           :F(FOPERR)
        ?COBCOP('DAD')                           :F(FOPERR)
        ?COBCOP('WKS')                           :F(FOPERR)
        ?COBCOP('PRD')                           :F(FOPERR)
        ?RELEASE(2)                              :(COMLUP)
END
 