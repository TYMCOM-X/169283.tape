TITLE	MATGEN FOR COBOL 5(103)	
SUBTTL	MATHEMATICAL CODE GENERATORS	AL BLACKINGTON/CAM

;COPYRIGHT 1970,1971,1972, DIGITAL EQUIPMENT CORP, MAYNARD,MA.

TWOSEG
RELOC	400000

ENTRY ADDGEN		;ADD OPERATOR
ENTRY ADDTGN		;ADDTO OPERATOR
ENTRY SUBGEN		;SUB OPERATOR
ENTRY SUBFGN		;SUBFRM OPERATOR
ENTRY MULGEN		;MUL OPERATOR
ENTRY MULBGN		;MULBY OPERATOR
ENTRY DIVGEN		;DIV OPERATOR
ENTRY DIVBGN		;DIVBY OPERATOR
ENTRY REMGEN		;REMAIN OPERATOR
ENTRY RESGEN		;RESULT OPERATOR
ENTRY SETTGN		;SETTO OPERATOR
ENTRY SETDGN		;SETDN OPERATOR
ENTRY SETUGN		;SETUP OPERATOR

INTERNAL ADDX.		;ADD SOMETHING TO THE AC'S
INTERNAL SUBX.		;SUBTRACT SOMETHING FROM THE AC'S
INTERNAL MULX.		;MULTIPLY AC'S BY SOMETHING
INTERNAL DIVX.		;DIVIDE AC'S BY SOMETHING
INTERNAL EXPX.		;EXPONENTIATE AC'S BY SOMETHING
INTERNAL SWAPEM		;SWAP OPERANDS AND CURRENT "EAC"

EXTERNAL READEM,PUTASY,PUTASN,SETUUO,STASHL,OPFAT,OPNFAT,NOTNUM,NOTDAT,SWAPAB,ADJSL.
EXTERNAL CC1C2.,MXAC.,MACX.,MNXAC.,FORCX0,ADJDP.,CONVNL,NEGATL
EXTERNAL BMPEOP,BADEOP,GETTAG,ROUND,SIZERA,KILL,XPNRES,XPNEOP,LNKSET,GETEMP
EXTERNAL SUBSCB,SETOPA,SETOPB,SETOPN,MSFP%L,MXFPA.,CCXFP.
EXTERNAL PUT.A,PUT.AA,PUT.B,PUT.BA,PUT.L,PUT.LA,PUT.LB,PUT.P,PUT.PA
EXTERNAL PUT.PC,PUT.LC,PUT.LD,PUT.XA,PUT.XB,PUT.EX
;"ADD" GENERATOR

ADDGEN:	PUSHJ	PP,GRABOP	;GET FIRST OPERAND INTO AC'S
	SKIPL	RESTYP		;ANY ERRORS?
ADDG0:	PUSHJ	PP,BMPEOP	;NO--BUMP UP TO NEXT OPERAND
	POPJ	PP,		;NO MORE OPERANDS

ADDG1:	MOVE	TC,CUREOP	;SET UP "B" OPERAND
	HRRM	TC,OPERND
	PUSHJ	PP,SETOPB

	PUSHJ	PP,OPBCHK	;CK 2ND OPERAND FOR ELEMENTARY NUMERIC

	PUSHJ	PP,ADDX.	;ADD IT TO AC'S

ADDG2:	PUSHJ	PP,BMPEOP	;LOOK FOR ANOTHER OPERAND
	POPJ	PP,		;NO MORE--QUIT

	JRST	ADDG1		;FOUND ANOTHER--LOOP

;"ADDTO" GENERATOR

ADDTGN:	PUSHJ	PP,GRABOP	;GET FIRST OPERAND INTO AC'S
	SKIPGE	RESTYP		;ANY GOOD OPERANDS FOUND?
	POPJ	PP,		;NO--FORGET IT

	MOVEI	TE,1		;YES--SET RESULT TYPE TO 1
	MOVEM	TE,RESTYP
	JRST	ADDG0
;"SUB" GENERATOR

SUBGEN:	SETOM	RESTYP
	MOVEM	W1,OPLINE
	SWOFF	FEOFF1		;TURN OFF MOST FLAGS
	MOVEM	EACA,EOPNXT	;SAVE END-OF-LIST POINTER
	HRRZ	TC,EOPLOC	;SET "TC" TO FIRST OPERAND
	ADDI	TC,1
	CAIL	TC,(EACA)	;IS IT AFTER END?
	JRST	BADEOP		;YES--OOPS

	SETZM	ECARRY

	MOVEM	TC,ESAVAC	;NO--SAVE THE LOCATION
	MOVEM	TC,CUREOP

	PUSHJ	PP,BMPEOP	;LOOP FOR NEXT OPERAND
	JRST	BADEOP		;NOT THERE--ERROR

;SKIP THRU EOPTAB UNTIL LAST OPERAND SEEN
SUBGN1:	MOVE	TC,CUREOP	;SAVE LOCATION OF LAST ONE SEEN
	PUSHJ	PP,BMPEOP	;LOOK FOR ANOTHER
	SKIPA			;NO MORE
	JRST	SUBGN1		;LOOP

	MOVEI	TE,-1(TC)	;RESET EOPNXT TO POINT TO NEXT TO LAST OPERAND
	HRRM	TE,EOPNXT

	HRLZM	TC,OPERND
	SETZM	EAC		;SET AC'S TO 0 & 1
	MOVEI	LN,EBASEA	;SET UP THAT LAST OPERAND'S PARAMETERS
	PUSHJ	PP,SETOPN
	TSWF	FERROR		;ANY TROUBLE?
	JRST	SUBGN4		;YES

	PUSHJ	PP,GRBOP2	;GET OPERAND INTO AC'S

	MOVE	TC,ESAVAC	;GET BACK TO FIRST OPERAND
	MOVEM	TC,CUREOP

	SETZM	RESTYP

SUBGN4:	HRRM	TC,OPERND
	PUSHJ	PP,SETOPB	;SET UP "B" PARAMETERS
	PUSHJ	PP,OPBCHK	;CK 2ND OPERAND FOR ELEMENTARY NUMERIC CLASS

	PUSHJ	PP,SUBX.	;YES--GENERATE THE SUBTRACT

SUBGN5:	PUSHJ	PP,BMPEOP	;GO TO NEXT OPERAND
	POPJ	PP,		;NO MORE--QUIT
	MOVE	TC,CUREOP	;LOOP
	JRST	SUBGN4
;"SUBFRM" GENERATOR

SUBFGN:	SETOM	RESTYP
	MOVEM	W1,OPLINE
	SWOFF	FEOFF1		;CLEAR MOST FLAGS
	MOVEM	EACA,EOPNXT

	HRRZ	TC,EOPLOC
	ADDI	TC,1
	CAIL	TC,(EACA)
	JRST	BADEOP

	SETZM	ECARRY

SUBFG2:	MOVEM	TC,CUREOP
	MOVSM	TC,OPERND
	PUSHJ	PP,SETOPA

	SETZM	EAC		;SET AC'S TO BE 0&1

	TSWT	FANUM		;IS "A" NUMERIC?
	JRST	SUBFG4		;NO--DROP IT

	HRRZ	TE,EMODEA	;IS "A" A LITERAL?
	CAIN	TE,FCMODE
	JRST	SUBFG7
	CAIN	TE,LTMODE
	JRST	SUBFG6		;YES

	PUSHJ	PP,MNXAC.	;NO--GET NEGATIVE INTO AC'S

SUBFG3:	MOVEI	TE,1		;SET RESULT TYPE TO 1
	MOVEM	TE,RESTYP

	PUSHJ	PP,BMPEOP
	POPJ	PP,

	MOVE	TC,CUREOP
	JRST	SUBGN4

SUBFG4:	PUSHJ	PP,NOTNUM	;PUT OUT "IMPROPER CLASS" DIAG

SUBFG5:	PUSHJ	PP,BMPEOP
	POPJ	PP,

	HRRZ	TC,CUREOP
	JRST	SUBFG2
;"SUBFRM" GENERATOR (CONT'D).

;"A" IS A LITERAL

SUBFG6:	PUSHJ	PP,CONVNL
	TSWF	FERROR		;ANY ERRORS?
	JRST	SUBFG5		;YES

	TSWTZ	FLNEG		;IS LITERAL NEGATIVE?
	PUSHJ	PP,NEGATL	;NO--MAKE IT NEGATIVE

	PUSHJ	PP,GRBOP4
	JRST	SUBFG3

;"A" IS A FIGURATIVE CONSTANT

SUBFG7:	HRRZ	TE,EFLAGA
	CAIE	TE,2
	JRST	SUBFG4
	SWON	FALWY0
	JRST	SUBFG3

;"MUL" GENERATOR

MULGEN:	PUSHJ	PP,GRABOP		;GET FIRST OPERAND INTO AC'S
	SKIPL	RESTYP		;ANY ERRORS?
	PUSHJ	PP,BMPEOP		;NO--GET SECOND OPERAND
	POPJ	PP,		;SOME KIND OF ERROR

	MOVE	TC,CUREOP
	HRRM	TC,OPERND
	PUSHJ	PP,SETOPB	;SET UP "B" PARAMETERS

	PUSHJ	PP,OPBCHK		;CK 2ND OPERAND FOR ELEM. NUM. CLASS

	JRST	MULX.			;YES--GENERATE MULTIPLY

;"MULBY" GENERATOR

MULBGN:	PUSHJ	PP,GRABOP	;GET OPERAND INTO AC'S

	MOVEI	TE,2
	SKIPL	RESTYP		;ERRORS FOUND?
	MOVEM	TE,RESTYP	;NO--SET RESULT TYPE TO 2

	POPJ	PP,
;"DIVIDE ... GIVING" GENERATOR

DIVGEN:	PUSHJ	PP,SETDIV	;SET UP RESULT
	TSWF	FERROR		;ANY TROUBLE?
	JRST	DIVG2C		;YES--DON'T GENERATE CODE


DIVG1:	TLNE	W1,DINTO	;"INTO" OPTION?
	JRST	DIVG3		;YES

;"DIVIDE BY"

	PUSHJ	PP,GRBDIV	;GET FIRST OPERAND INTO AC'S
	SKIPL	RESTYP		;ANY GOOD OPERANDS FOUND?
	PUSHJ	PP,BMPEOP	;YES--SKIP UP TO NEXT OPERAND
	JRST	DIVG2B		;SOME KIND OF ERROR

	MOVE	TC,CUREOP	;SET UP "B" PARAMETERS

DIVG2:	HRRM	TC,OPERND
	PUSHJ	PP,SETOPB

	TSWT	FBNUM		;IS "B" NUMERIC?
	PUSHJ	PP,NOTNUM	;NO--ERROR

	MOVE	CH,[XWD SETZM.,OVFLO.]
	PUSHJ	PP,PUT.EX

	SWON	FADJDV		;SET "ADJUST DIVISOR" FLAG
	PUSHJ	PP,DIVX.	;GENERATE THE DIVIDE
	SWOFF	FADJDV		;CLEAR "ADJUST DIVISOR" FLAG

	SETZM	EMULSZ
	LDB	TE,[POINT 8,EREM4,8];IS THERE
	CAIE	TE,REMOP	;  A REMAINDER?
	JRST	DIVG2B		;NO
	HRRZ	TE,EMODEA	;IF COMP-1,
	CAIN	TE,FPMODE	;  NO NEED FOR
	JRST	DIVG2B		;  REMAINDER
;"DIVIDE ... GIVING" (CONT'D)

	MOVE	TE,EREM4	;ANY
	TLNN	TE,GNSERA	;  SIZE ERROR?
	JRST	DIVG2A		;NO
	MOVE	CH,[XWD SETZM.,SZERA.];YES
	PUSHJ	PP,PUT.EX
	SETOM	EMULSZ

DIVG2A:	SETZM	ETEMPC		;STASH REMAINDER INTO %TEMP
	MOVEI	TE,2
	MOVE	TD,REMPAR
	LDB	TC,ACMODE
	CAIE	TC,D2MODE
	MOVEI	TE,1
	PUSHJ	PP,GETEMP
	MOVE	CH,[XWD MOVEM.+AC2+ASINC,AS.MSC]
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACC
	PUSHJ	PP,PUTASN
	CAIE	TC,D2MODE
	JRST	DIVG2B
	MOVE	CH,[XWD MOVEM.+AC3+ASINC,AS.MSC]
	PUSHJ	PP,PUTASY
	MOVEI	CH,1(EACC)
	PUSHJ	PP,PUTASN
;"DIVIDE ... GIVING" (CONT'D)

DIVG2B:	MOVE	W1,OPLINE	;SET UP FOR "RESGEN"
	MOVE	EACA,EREM1
	MOVEM	EACA,EOPNXT
	MOVE	W1,EREM2
	MOVE	TC,EREM0
	MOVEI	TC,1(TC)
	PUSHJ	PP,STRES0
	PUSHJ	PP,RESG0D	;GENERATE 'GIVING'

DIVG2C:	SKIPN	W1,EREM4	;ANY OPERATOR READY?
	POPJ	PP,		;NO--WE'RE DONE

	HRRZ	TE,EREM1	;YES--THIS IS START OF OPERAND LESS 1
	HRRZ	TD,EOPLOC	;BUILD
	ADDI	TD,1		;  XWD FOR
	HRLI	TD,1(TE)	;  BLT TO MOVE OPERAND UP

	HRRZ	EACA,EREM3	;THIS IS LAST ADDRESS OF OPERAND
	SUBI	EACA,(TE)	;SO THIS IS SIZE OF OPERAND
	ADDI	TE,1(EACA)	;SO THIS IS LAST ADDRESS TO BLT
	BLT	TD,(TE)		;MOVE OPERAND TO TOP OF EOPTAB

	HRLS	EACA		;COMPUTE NEW
	ADD	EACA,EOPLOC	;  EOPNXT
	MOVEM	EACA,EOPNXT	;  AND STASH IT

	LDB	TE,[POINT 8,W1,8];GET OPERATOR CODE
	JRST	@EOPCOD(TE)	;DISPATCH TO SOME GENERATOR
;"DIVIDE ... GIVING GENERATOR (CONT'D)

;"DIVIDE INTO"

DIVG3:	HRRZ	TC,EOPLOC	;GET TO SECOND OPERAND
	ADDI	TC,1
	MOVEM	TC,CUREOP
	PUSHJ	PP,BMPEOP
	JRST	BADEOP		;THERE ISN'T ONE--ERROR

	MOVE	TC,CUREOP	;GET THAT OPERAND INTO AC'S
	PUSHJ	PP,GRBOP0

	SKIPGE	RESTYP		;ERRORS?
	JRST	DIVG2B		;YES--FORGET IT

	HRRZ	TC,EOPLOC	;NO--RESET TO TOP OF EOPTAB
	ADDI	TC,1
	MOVEM	TC,CUREOP
	JRST	DIVG2		;NOW PRETEND IT'S "DIVIDE BY"
;"DIVIDE ... BY" GENERATOR

DIVBGN:	PUSHJ	PP,SETDIV	;SET UP THE RESULT
	TSWF	FERROR		;ANY TROUBLE?
	JRST	DIVG2C		;YES--QUIT

;WE HAVE TO CREATE A RESULT EQUAL TO THE SECOND DIVIDE OPERAND.
;BE SURE THERE IS ROOM IN EOPTAB.

DIVBG1:	HRRZ	TE,EREM0
	MOVE	EACA,EREM1
	SUBI	TE,(EACA)
	HLRE	TD,EREM3
	CAMLE	TE,TD
	JRST	DIVBG2
	PUSHJ	PP,XPNEOP
	JRST	DIVBG1

;OK, THERE IS ROOM IN EOPTAB. NOW WE HAVE TO MOVE DOWN THE RESULT
;  OPERAND (SECOND DIVIDE OPERAND), PLUS OPERANDS FOR REMAINDER OR
;  WHATEVER CAME AFTER DIVIDE.
;NOTE THAT RESULT OPERAND WILL BE DUPLICATED.

DIVBG2:	MOVMS	TE
	HRLS	TE
	HRRZ	TB,EREM0
	HRRZ	TA,EREM3
	ADDM	TE,EREM0
	ADDM	TE,EREM1
	ADDB	TE,EREM3

DIVBG3:	MOVE	CH,(TA)
	MOVEM	CH,(TE)
	SUBI	TA,1
	CAIE	TA,(TB)
	SOJA	TE,DIVBG3

	MOVE	EACA,EREM0
	MOVEM	EACA,EOPNXT
	JRST	DIVG1
;"SETTO" GENERATOR

SETTGN:	PUSHJ	PP,SETSET	;SET UP LAST OPERAND

	SKIPGE	RESTYP		;IS IT ALL RIGHT?
	POPJ	PP,		;NO--FORGET IT

	HRRZ	TE,EMODEA	;YES--IS IT A LITERAL?
	CAIN	TE,LTMODE
	JRST	SETT2		;YES

	CAIN	TE,FCMODE	;NO--IS IT ZERO?
	JRST	SETT3		;YES

	PUSHJ	PP,MXAC.	;NO--GET IT INTO THE AC'S

	JRST	SETT4		;GO TO "RESULT" GENERATOR

SETT2:	PUSHJ	PP,GRBOP4	;GET VALUE OF LITERAL INTO AC'S

	JRST	SETT4		;GO TO "RESULT" GENERATOR

SETT3:	SWON	FALWY0;

SETT4:	MOVE	EACA,EOPNXT
	JRST	RESGEN
;"SETDN" GENERATOR

SETDGN:	PUSHJ	PP,SETSET	;SET UP LAST OPERAND

	SKIPGE	RESTYP		;IS IT ALL RIGHT?
	POPJ	PP,		;NO--FORGET IT

	MOVEI	TE,1		;SET RESULT TYPE TO 1
	MOVEM	TE,RESTYP

	HRRZ	TE,EMODEA	;IS IT A LITERAL?
	CAIN	TE,LTMODE
	JRST	SETD2		;YES

	CAIN	TE,FCMODE
	POPJ	PP,

	PUSHJ	PP,MNXAC.	;NO--GET NEGATIVE INTO AC'S
	JRST	SETT4		;GO TO "RESULT" GENERATOR

SETD2:	JUMPN	TD,SETD3	;IS IT A 2-WORD LITERAL?
	TSWT	FLNEG		;NO--NEGATIVE?
	CAIE	TC,1		;NO--IS IT 1?
	JRST	SETD3		;NEGATIVE OR NOT 1

	MOVSI	CH,SOS.		;IT IS 1--USE "SOS"
	JRST	SETU3

SETD3:	TSWTZ	FLNEG		;IS IT NEGATIVE?
	PUSHJ	PP,NEGATL	;NO--MAKE IT NEGATIVE
	JRST	SETT2		;GO TO "RESULT" GENERATOR
;"SETUP" GENERATOR

SETUGN:	PUSHJ	PP,SETSET	;SET UP LAST OPERAND
	SKIPGE	RESTYP		;IS IT ALL RIGHT?
	POPJ	PP,		;NO--FORGET IT

	MOVEI	TE,1		;SET RESULT TYPE TO 1
	MOVEM	TE,RESTYP

	HRRZ	TE,EMODEA	;IS IT A LITERAL?
	CAIN	TE,LTMODE
	JRST	SETU2		;YES
	CAIN	TE,FCMODE	;NO--FIG. CONST.?
	POPJ	PP,		;YES--MUST BE 'ZEROES'

	PUSHJ	PP,MXAC.	;NO--GET IT INTO AC'S
	JRST	SETT4		;GO TO "RESULT" GENERATOR

SETU2:	JUMPN	TD,SETT2	;IS IT A 2-WORD LITERAL?
	TSWT	FLNEG		;NO--IS IT NEGATIVE?
	CAIE	TC,1		;NO--IS IT 1?
	JRST	SETT2		;NOT 1, OR NEGATIVE--GO TO "RESULT"

	MOVSI	CH,AOS.		;IT IS 1--USE "AOS"

SETU3:	MOVEM	CH,RESTYP	;SAVE "AOS" OR "SOS"

	HRRZ	TC,EOPLOC
	ADDI	TC,1
	MOVEM	TC,CUREOP

	SETZM	ERCNT
	MOVE	TE,RESLOC
	MOVEM	TE,RESNXT

SETU5:	SWOFF	FERROR;
	MOVE	TC,CUREOP	;SET UP PARAMETERS FOR OPERAND
	MOVEI	LN,EBASEB
	PUSHJ	PP,SETOPN
	TSWF	FERROR;
	JRST	SETU6

	HRRZ	TE,EMODEB	;IS IT 1-WORD COMP?
	CAIE	TE,D1MODE
	JRST	SETU10		;NO

	PUSHJ	PP,SUBSCB	;YES--SUBSCRIPT IF NECESSARY
	MOVE	CH,RESTYP	;GENERATE "AOS" OR "SOS"
	PUSHJ	PP,PUT.B

SETU6:	PUSHJ	PP,BMPEOP	;GO TO NEXT OPERAND
	SKIPA			;NO MORE
	JRST	SETU5		;LOOP
;"SETUP" OPERATOR  (CONT'D).

;ALL RESULTS HAVE BEEN LOOKED AT ONCE.

	SKIPN	ERCNT		;ANY NOT DONE?
	POPJ	PP,		;NO--QUIT

	MOVEI	TE,D1MODE	;SET MODE OF "A" TO 1-WORD COMP
	MOVEM	TE,EMODEA

	HLRZ	CH,RESTYP	;IS THIS "SETUP"?
	CAIE	CH,AOS.
	SKIPA	CH,[XWD MOVNI.,1];NO
	MOVE	CH,[XWD MOVEI.,1];YES

	PUSHJ	PP,PUT.XA

	MOVEI	TE,1		;SET RESULT TYPE TO 1
	MOVEM	TE,RESTYP

	JRST	RESGN0

;A RESULT IS NOT 1-WORD COMP--PUT ENTRY INTO RESTAB

SETU10:	MOVE	TC,CUREOP
	PUSHJ	PP,STRES8

	JRST	SETU6

;"RESULT" GENERATOR

RESGEN:	SWOFF	FEOFF1-FALWY0-FERROR	;CLEAR MOST FLAGS
	MOVEM	W1,OPLINE	;SAVE LN&CP OF OPERATOR

	PUSHJ	PP,SETRES	;SET UP RESTAB
	TLNN	W1,CORR		;IF 'CORRESPONDING', DON'T CLEAR EMULSZ

RESGN0:	SETZM	EMULSZ		;ASSUME ONLY ONE OPERAND
RESG0D:	SETZM	ERESDP
	TSWT	FERROR		;ANY ERRORS?
	SKIPN	TE,ERCNT	;NO--ANYTHING TO DO?
	POPJ	PP,		;NO--QUIT

	SWON	FASIGN		;SET "AC'S ARE SIGNED"
	HRRZ	TE,EMODEA	;IF 'A' IS
	CAIE	TE,FPMODE	;  COMP-1
	TSWF	FALWY0		;  OR IF AC'S ARE ZERO,
	JRST	RESG0C		;  SKIP SIZE TEST

	MOVE	CH,ESIZEA	;IF SIZE OF 'A' IS TOO BIG,
	CAILE	CH,MAXSIZ	;  FORGET IT
	POPJ	PP,

RESG0C:	TLNN	W1,GNSERA	;ANY SIZE ERROR?
	JRST	RESGN1		;NO

	PUSHJ	PP,GETTAG	;GET A TAG NUMBER
	MOVEM	CH,ESZERA
	SWON	FSZERA		;SET 'SIZE ERROR REQUIRED'

	LDB	TE,[POINT 8,W1,8];IF OPERATOR
	CAIN	TE,REMOP	;  IS 'REMAINDER'
	JRST	RESGN1		;  GO TO GENERATION

	TLNN	W1,CORR		;ANY CORRESPONDING?
	JRST	RESG0A		;NO

RESG0B:	SKIPE	EMULSZ		;IS THIS THE FIRST?
	JRST	RESGN1		;NO
	MOVE	CH,[XWD SETZM.,SZERA.]
	PUSHJ	PP,PUT.EX
	SETOM	EMULSZ
	JRST	RESGN1

RESG0A:	MOVE	TE,ERCNT
	CAIE	TE,1		;MORE THAN ONE OPERAND?
	JRST	RESG0B		;YES
;"RESULT" GENERATOR (CONT'D).

RESGN1:	HRRZ	TE,RESLOC
	ADDI	TE,1
	MOVEM	TE,CURRES

RESGN2:	PUSHJ	PP,SCNRES	;SCAN THRU RESTAB TO SEE IF %TEMP NEEDED

	PUSHJ	PP,RESETB
	TSWF	FERROR;
	JRST	RESGN6

RESGN5:	PUSHJ	PP,RESG10

RESGN6:	PUSHJ	PP,LUKRES
	POPJ	PP,

	JRST	RESGN2

RESGN7:	PUSHJ	PP,NOTNUM		;PUT OUT "NOT NUMERIC" DIAG
	JRST	RESGN6			;LOOP;"RESULT" GENERATOR  (CONT'D).

;GENERATE CODE TO TAKE SOMETHING OUT OF AC'S, DEPENDING ON RESTYP.
;IF RESTYP IS NEGATIVE, THERE HAVE BEEN ERRORS, SO FORGET IT.
;IF RESTYP IS ZERO, GENERATE A "MOVEM" TYPE OF INSTRUCTION.
;IF RESTYP IS 1, GENERATE "ADDM"
;IF RESTYP IS 2, GENERATE MULTIPLY AND STORE.

RESG10:	SKIPGE	TE,RESTYP	;NEGATIVE?
	POPJ	PP,		;YES--QUIT

	MOVE	TA,1(TC)	;PICK UP SECOND WORD OF OPERAND

	CAIG	TE,2		;IS RESTYP IN BOUNDS?
	JRST	@RES.T(TE)	;YES--GO TO APPROPRIATE ROUTINE

	TTCALL	3,[ASCIZ /BAD "RESTYP"
/]
	JRST	KILL


RES.T:	EXP	RESG11		;"MOVEM"
	EXP	RESG14		;"ADDM"
	EXP	RESG12		;MULTIPLY

;"MOVEM"

RESG11:	TLNE	TA,GNROUN	;ANY ROUNDING?
	PUSHJ	PP,ROUND	;YES--ROUND AC'S

	TSWF	FSZERA		;ANY SIZE ERROR?
	JRST	SIZERA		;YES--GENERATE "SIZE ERROR" CODING
	JRST	MACX.		;GENERATE "MOVEM" AND RETURN

;MULTIPLY

RESG12:	PUSHJ	PP,RESCHK	;IS RECEIVING FIELD ELEMENTARY NUMERIC?
	JRST	NOTNUM		;NO
	PUSHJ	PP,MULX.
	JRST	RESG16
;CK RESULT OPERAND FOR ELEMENTARY NUMERIC CLASS

RESCHK:	TSWT	FBNUM		;NUMERIC?
	JRST	CPOPJ		;NO, TAKE ERROR RETURN
	PUSH	PP,TA
	PUSHJ	PP,LNKSET	;GET PTR TO OPERAND'S DATAB ENTRY
	LDB	TA,DA.EDT	;EDITED?
	JUMPN	TA,.+2		;NO, ERROR
	AOS	-1(PP)		;NORMAL RETURN
	POP	PP,TA
	POPJ	PP,

;SPECIAL CK ON 2ND OPERAND - MUST BE ELEMENTARY NUMERIC CLASS

OPBCHK:	MOVE	TB,EMODEB	;LITERAL?
	CAIL	TB,LTMODE
	POPJ	PP,		;YES, LET IT PASS

	LDB	TB,DA.EDT	;EDITED?
	JUMPN	TB,OPBCH2	;YES, ERROR
	LDB	TB,DA.CLA	;NUMERIC?
	CAIN	TB,2
	POPJ	PP,		;OK, RETURN

OPBCH2:	POP	PP,TB		;SET FOR RETURN TO CALLER'S CALLER
	JRST	NOTNUM		;?IMPROPER CLASS
;"RESULT" GENERATOR  (CONT'D).

;"ADDM"

RESG14:	PUSHJ	PP,RESCHK	;IS RECEIVING FIELD ELEMENTARY NUMERIC?
	JRST	NOTNUM		;NO
	TSWT	FSZERA		;ANY SIZE ERROR?
	TLNE	TA,GNROUN	;NO--ANY ROUNDING?
	JRST	RESG15		;YES

	TSWF	FALWY0		;IF AC'S ARE ZERO,
	POPJ	PP,		;  FORGET IT

	HRRZ	TD,EMODEB
	HRRZ	TE,EMODEA
	CAIN	TE,FPMODE	;IS "A" COMP-1?
	JRST	RSG14B		;YES
	CAIN	TD,FPMODE	;NO--IS "B" COMP-1?
	JRST	RESG15		;YES

	PUSHJ	PP,ADJDP.	;NO--ADJUST DECIMAL PLACES OF AC'S

	MOVE	TE,ESIZEA
	CAILE	TE,MAXSIZ	;ARE AC'S TOO BIG?
	POPJ	PP,		;YES--QUIT

	CAMG	TE,ESIZEB	;NO--IS "A" LARGER THAN RESULT?
	TSWT	FBSIGN		;NO--IS "B" SIGNED?
	JRST	RESG15		;CAN'T USE ADDM

	HRRZ	TD,EMODEB
	HRRZ	TE,EMODEA

	CAIE	TE,D1MODE	;ARE AC'S 1-WORD COMP?
	JRST	RESG15		;NO
	CAIE	TD,D1MODE	;YES--ALSO "B"?
	JRST	RESG15		;NO
	PUSHJ	PP,SUBSCB	;YES--SUBSCRIPT IF NECCESSARY
	MOVSI	CH,ADDM.	;GENERATE <ADDM AC,B> AND
	JRST	PUT.BA		;	RETURN

RSG14B:	CAIE	TD,FPMODE	;"A" IS COMP-1, IS "B"?
	JRST	RESG15		;NO

	PUSHJ	PP,SUBSCB	;YES--SUBSCRIPT IF NECESSARY
	MOVSI	CH,FADM.	;GENERATE <FADM AC,B> AND
	JRST	PUT.BA		;	RETURN

RESG15:	PUSHJ	PP,ADDX.	;CAN'T USE "ADDM"--GENERATE ADD TO AC'S

RESG16:	PUSHJ	PP,RESETB
	MOVE	TA,1(TC)
	JRST	RESG11		;GO GENERATE STASH
;"REMAINDER" GENERATOR

REMGEN:	SWOFF	FEOFF1-FALWY0-FERROR
	MOVEM	W1,OPLINE	;SAVE OPERATOR

	SETZM	EAC		;SET AC'S TO BE 0&1
	MOVE	TD,REMPAR	;PICK UP REMAINDER PARAMETERS

	LDB	TC,ACMODE	;GET MODE
	CAIN	TC,FPMODE	;IS IT COMP-1?
	JRST	REMGN4		;YES

	LDB	TE,ACSIZE	;NO--GET SIZE
	MOVEM	TE,ESIZEA
	MOVEM	TC,EMODEA	;SET MODE
	HRREM	TD,EDPLA	;SET DECIMAL PLACES

	MOVE	CH,[XWD MOV+ASINC,AS.MSC]
	PUSHJ	PP,PUTASY
	MOVEI	CH,AS.TMP
	ADD	CH,TEMBAS
	PUSHJ	PP,PUTASN

	CAIE	TC,D2MODE
	JRST	REMGN5

	MOVE	CH,[XWD MOV+AC1+ASINC,AS.MSC]
	PUSHJ	PP,PUTASY
	MOVEI	CH,AS.TMP+1
	ADD	CH,TEMBAS
	PUSHJ	PP,PUTASN

	JRST	REMGN5

REMGN4:	MOVEM	TC,EMODEA	;SET MODE TO COMP-1
	MOVE	CH,[XWD SETZB.,1] ;GENERATE <SETZB 0,1>
	PUSHJ	PP,PUTASY
	SWON	FALWY0;

REMGN5:	PUSHJ	PP,SETRES
	JRST	RESG0D
;GENERATE CODE TO ADD SOMETHING TO THE AC'S

ADDX.:	TSWF	FALWY0		;ARE AC'S ZERO?
	JRST	ADDX.7		;YES
	PUSHJ	PP,SETB		;NO--SET UP "B"
	JRST	ADDX.4		;IT IS A LITERAL, OR ERRORS FOUND

ADDX.1:	PUSHJ	PP,SETDP
	TSWF	FERROR;
	POPJ	PP,

	SWOFF	FALWY0		;TURN OFF "AC'S ARE ZERO"

	HRRZ	TE,EMODEA
	JRST	@ADDT.1(TE)


;"B" IS A HALF-WORD LITERAL, OR ERRORS FOUND

ADDX.4:	MOVSI	CH,AD##
	TSWFZ	FLNEG		;IF NEGATIVE LITERAL,
	MOVSI	CH,SUB.		;  USE SUBTRACT

ADDX.5:	TSWT	FERROR		;IF ANY ERRORS DETECTED
	SKIPN	TC		;  OR IF LITERAL IS ZERO,
	POPJ	PP,		;  FORGET IT

	PUSH	PP,CH		;SAVE OP-CODE
	MOVE	TE,EDPLA	;IF
	SUB	TE,EDPLB	;  NECESSARY,
	JUMPLE	TE,ADDX.6	;  ADJUST
	PUSHJ	PP,ADJSL.	;  DECIMAL PLACES OF LITERAL
	PUSHJ	PP,SETB2A	;SEE IF STILL HALF-WORD
	HRRZ	TE,EMODEB	;IS IT
	CAIE	TE,LTMODE	;  STILL A LITERAL?
	JRST	ADDX.8		;NO

ADDX.6:	PUSH	PP,TC		;SAVE LITERAL VALUE
	PUSHJ	PP,SETDP	;ADJUST AC'S
	POP	PP,TC		;RESTORE LITERAL VALUE
	POP	PP,CH		;RESTORE OP-CODE
	PUSHJ	PP,PUT.LA	;GENERATE ADD OR SUBTRACT
	JRST	CHKSIZ		;CHECK SIZE OF RESULT AND RETURN

;AC'S ARE ZERO

ADDX.7:	PUSHJ	PP,SWAPAB	;SWAP OPERANDS
	SWOFF	FALWY0		;TURN OFF  "AC'S ARE ZERO"
	JRST	MXAC.		;GET OLD 'B' INTO AC'S

;IT IS NO LONGER LITERAL

ADDX.8:	POP	PP,CH		;GET OP-CODE
	CAME	CH,[XWD AD,0]	;IF NOT ADD,
	JRST	SUBX.1		;  DO SUBTRACT,
	JRST	ADDX.1		;  ELSE DO ADD
;ADD NON-LITERAL TO 1-WORD COMP IN AC'S

ADD1D:	HRRZ	TE,EMODEB
	CAIE	TE,D1MODE
	JRST	ADD1DD

	MOVSI	CH,AD
	PUSHJ	PP,PUT.BA
	JRST	CHKSIZ

;"B" IS MORE THAN 10 DIGITS LONG

ADD1DD:	PUSHJ	PP,FORCX0
	MOVSI	CH,ADD.12

ADD1DF:	MOVEI	TE,D2MODE
	MOVEM	TE,EMODEA
	JRST	ADD2DC


;ADD NON-LITERAL TO 2-WORD COMP IN AC'S

ADD2D:	PUSHJ	PP,FORCX0
	MOVSI	CH,ADD.21
	HRRZ	TE,EMODEB
	CAIE	TE,D1MODE
	MOVSI	CH,ADD.22

ADD2DC:		PP,SETUUO
	PUSHJ	PP,PUT.BA
	JRST	CHKSIZ



;ADD NON-LITERAL TO FLOATING-POINT
;"ADSUB2" CONVERTED "B" TO COMP-1, IF NECESSARY

ADD3D:	MOVSI	CH,FAD.
	JRST	PUT.BA
;GENERATE CODE TO SUBTRACT FROM AC'S

SUBX.:	TSWF	FALWY0		;IF AC'S ARE ZERO,
	JRST	SUBX.6		;  TAKE SPECIAL ROUTE
	PUSHJ	PP,SETB		;SET UP "B"
	JRST	SUBX.5		;IT IS A LITERAL, OR ERRORS FOUND

SUBX.1:	PUSHJ	PP,SETDP
	TSWF	FERROR;
	POPJ	PP,

	SWOFF	FALWY0		;TURN OFF "AC'S CONTAIN ZERO"

SUBX.4:	HRRZ	TE,EMODEA
	JRST	@SUBT.1(TE)


;"B" IS A HALF-WORD LITERAL, OR ERRORS FOUND

SUBX.5:	MOVSI	CH,SUB.		;GENERATE SUBTRACT UNLESS
	TSWFZ	FLNEG		;  LITERAL IS NEGATIVE,
	MOVSI	CH,AD		;  IN WHICH CASE GENERATE AN ADD
	JRST	ADDX.5

;AC'S ARE ZERO

SUBX.6:	PUSHJ	PP,SWAPAB	;SWAP OPERANDS
	SWOFF	FALWY0		; RESET "AC'S ARE ZERO"
	JRST	MNXAC.		;GET NEGATIVE OF OLD 'B' INTO AC'S
;SUBTRACT NON-LITERAL FROM 1-WORD COMP IN AC'S

SUB1D:	HRRZ	TE,EMODEB
	CAIE	TE,D1MODE
	JRST	SUB1DD

	MOVSI	CH,SUB.
	PUSHJ	PP,PUT.BA
	JRST	CHKSIZ
SUB1DD:	PUSHJ	PP,FORCX0
	MOVSI	CH,SUB.12
	JRST	ADD1DF


;SUBTRACT NON-LITERAL FROM 2-WORD COMP IN AC'S

SUB2D:	PUSHJ	PP,FORCX0
	MOVSI	CH,SUB.21
	HRRZ	TE,EMODEB
	CAIE	TE,D1MODE
	MOVSI	CH,SUB.22
	JRST	ADD2DC

;SUBTRACT NON-LITERAL FROM COMP-1.
;"ADSUB2" CONVERTED "B" TO COMP-1, IF NECESSARY.

SUB3D:	MOVSI	CH,FSB.
	JRST	PUT.BA
;MULTIPLY AC'S BY SOMETHING

MULX.:	TSWF	FALWY0		;IF AC'S ARE ZERO,
	POPJ	PP,		;  NO CODE NECESSARY
	PUSHJ	PP,SETB		;SET UP "B"
	JRST	MULX20		;"B" IS LITERAL, OR ERRORS


;"B" IS NOT A LITERAL

	HRRZ	TE,EMODEA
	CAIN	TE,FPMODE
	JRST	MUL10B

	MOVE	TA,ESIZEA
	CAILE	TA,MAXSIZ	;IS IT TOO BIG ALREADY?
	POPJ	PP,		;YES--FORGET IT

	HRRZ	TE,EMODEB
	CAIN	TE,FPMODE
	JRST	MUL10B

	ADD	TA,ESIZEB
	CAILE	TA,MAXSIZ
	JRST	MULX32

MUL10B:	PUSHJ	PP,SUBSCB

MULX11:	PUSHJ	PP,NEGIF
	HRRZ	TE,EMODEA
	HRRZ	TD,EMODEB
	JRST	@MULT.1(TE)

;MULTIPLY A 1-WORD COMP BY SOMETHING
ML1CX:
	JRST	@MULT.2(TD)

;MULTIPLY A 2-WORD COMP BY SOMETHING

ML2CX:	JRST	@MULT.3(TD)
;"B" IS A HALF-WORD LITERAL, OR ERRORS FOUND

MULX20:	TSWF	FERROR		;ANY ERRORS?
	POPJ	PP,		;YES--FORGET IT

	SKIPN	TC		;IS LITERAL ZERO?
	SWON	FALWY0		;YES--SET 'AC'S ARE ZERO'

	TSWF	FALWY0		;ARE AC'S ZERO?
	POPJ	PP,		;YES--FORGET IT

	TSWFZ	FLNEG		;IS LITERAL NEGATIVE?
	MOVNS	TC		;YES

	MOVE	TA,ESIZEB
	ADDB	TA,ESIZEA
	CAILE	TA,^D10
	JRST	MULX23

;RESULT WILL BE ONE WORD

	MOVSI	CH,IMUL.

MULX22:	PUSHJ	PP,PUT.LA
	MOVE	TE,EDPLB
	ADDM	TE,EDPLA
	POPJ	PP,

;RESULT WILL BE TWO WORDS

MULX23:	MOVEI	TE,D2MODE
	MOVEM	TE,EMODEA
	MOVSI	CH,MUL.
	JRST	MULX22
;MULTIPLY A 1-WORD COMP BY A 1-WORD COMP
ML1C1C:	MOVE	TE,ESIZEA
	ADD	TE,ESIZEB
	CAILE	TE,^D10
	JRST	MULX12
	MOVSI	CH,IMUL.
	PUSHJ	PP,PUT.BA

MULEND:	MOVE	TE,ESIZEB
	ADDM	TE,ESIZEA
	MOVE	TE,EDPLB
	ADDM	TE,EDPLA
	POPJ	PP,

MULX12:	MOVSI	CH,MUL.
	PUSHJ	PP,PUT.BA
	JRST	MULX14


;MULTIPLY A 1-WORD COMP BY A 2-WORD COMP

ML1C2C:	MOVSI	CH,MUL.12
MULX13:	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUT.BA

MULX14:	MOVEI	TE,D2MODE
	MOVEM	TE,EMODEA
	JRST	MULEND


;MULTIPLY A 2-WORD COMP BY A 1-WORD COMP

ML2C1C:	MOVSI	CH,MUL.21
	JRST	MULX13

;MULTIPLY A 2-WORD COMP BY A 2-WORD COMP

ML2C2C:	MOVSI	CH,MUL.22
	JRST	MULX13

;MULTIPLY COMP-1 BY COMP-1

MLFPFP:	MOVSI	CH,FMP.
	JRST	PUT.BA
;NEW SIZE IS > 19 DIGITS

;"B" IS NOT A LITERAL

MULX32:	TSWT	FBIGCV;
	JRST	MULX33
	PUSHJ	PP,CCXFP.

	PUSHJ	PP,SWAPEM
	PUSHJ	PP,MXFPA.
	PUSHJ	PP,SWAPEM
	JRST	MLFPFP

MULX33:	MOVEI	DW,^D88
	JRST	OPNFAT

;GENERATE CODE TO DIVIDE AC'S BY SOMETHING
DIVX.:	TSWF	FALWY0		;IF AC'S ARE ZERO,
	POPJ	PP,		;  NO CODE NEEDED

	PUSHJ	PP,FORCX0	;INSURE THAT AC'S ARE 0&1

	PUSHJ	PP,SETB		;SET UP "B"
	JRST	DIVX50		;"B" IS LITERAL OR ERROR

;GENERATE CODE TO DIVIDE AC'S BY SOMETHING.
;"B" IS NOT A LITERAL.

DIVX.4:	PUSHJ	PP,SUBSCB

	PUSHJ	PP,NEGIF	;NEGATE AC'S IF 'B' HAS UNARY MINUS
	HRRZ	TE,EMODEB
	CAIN	TE,FPMODE
	JRST	DIVX40

DIVX5B:	MOVE	TE,EDPLA	;WILL THERE BE ENOUGH DECIMAL PLACES?
	SUB	TE,EDPLB
	SKIPGE	TD,ERESDP
	MOVEI	TD,0
	CAML	TE,TD
	JRST	DIVX5A		;YES

	MOVE	TE,[XWD EBASEB,ESAVEB];NO--ADJUST DP OF "A"
	BLT	TE,ESAVBX
	ADDM	TD,EDPLB
	PUSHJ	PP,ADJDP.

	MOVE	TE,[XWD ESAVEB,EBASEB]
	BLT	TE,EBASBX
	JRST	DIV5XD

DIVX5A:	TSWF	FADJDV		;SHOULD WE TRY TO ADJUST DIVISOR?
	CAMG	TE,TD		;YES--SHOULD WE ADJUST IT?
	JRST	DIV5XD		;NO

	PUSHJ	PP,SWAPEM	;YES--SWAP OPERANDS
	HRRZ	TE,EBASEA	;IS NEW "A" IN AC'S?
	CAILE	TE,17
	PUSHJ	PP,MXAC.	;NO--PUT IT THERE
	MOVE	TE,[XWD EBASEB,ESAVEB]	;SAVE "B" PARAMETERS
	BLT	TE,ESAVBX
	SKIPGE	TD,ERESDP
	MOVEI	TD,0
	MOVNS	TD
	ADDM	TD,EDPLB
	PUSHJ	PP,ADJDP.	;ADJUST DECIMAL PLACES
	MOVE	TE,[XWD ESAVEB,EBASEB]	;RESTORE "B"
	BLT	TE,EBASBX
	PUSHJ	PP,SWAPEM	;RE-SWAP OPERANDS

DIV5XD:	TSWF	FERROR;
	POPJ	PP,

	HRRZ	TE,EMODEA
	JRST	@DIVT.1(TE)
;"A" IS A 1-WORD COMP OR INDEX
DIVX.6:	HRRZ	TC,EMODEB
	CAIE	TC,D1MODE
	JRST	DIVX.7
	MOVSI	CH,DIV.11
	JRST	DIVX.8

DIVX.7:	MOVEM	TC,EMODEA
	MOVSI	CH,DIV.12

DIVX.8:	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUT.BA	;WRITE OUT THE INSTRUCTION
	MOVN	TE,EDPLB	;ADJUST DECIMAL PLACES IN "A"
	MOVE	TD,EDPLA
	ADDM	TE,EDPLA

	MOVE	TE,ESIZEB
	DPB	TE,ACSIZE
	DPB	TC,ACMODE
	MOVEM	TD,REMPAR
	POPJ	PP,

;"A" IS A 2-WORD COMP.
DIVX10:	HRRZ	TC,EMODEB
	MOVSI	CH,DIV.21
	CAIE	TC,D1MODE
	MOVSI	CH,DIV.22
	JRST	DIVX.8

;"A" IS COMP-1

DIVX40:	HRRZ	TE,EMODEB
	CAIE	TE,FPMODE
	PUSHJ	PP,GTBFP

	MOVSI	CH,FDV.
	PUSHJ	PP,PUT.BA

	MOVEI	TD,0		;SET UP REMAINDER PARAMETER
	MOVEI	TE,FPMODE
	DPB	TE,ACMODE
	MOVEM	TD,REMPAR
	POPJ	PP,
;DIVIDE ONE-WORD COMP BY HALF-WORD LITERAL

DIVX50:	TSWF	FERROR		;ANY ERRORS?
	POPJ	PP,		;YES--QUIT

	JUMPE	TC,CANT0	;CANNOT DIVIDE BY ZERO
	TSWF	FALWY0		;AC'S ALREADY ZERO?
	POPJ	PP,		;YES--NO CODE

	MOVE	TE,OPERND	;UNARY MINUS?
	MOVE	TE,1(TE)
	TLNE	TE,NEGEOP
	TSWC	FLNEG		;YES--NEGATE LITERAL

	MOVE	TA,[XWD D1LIT,1];CREATE LITERAL
	PUSHJ	PP,STASHL
	TSWT	FLNEG		;NEGATIVE?
	SKIPA	TA,TC		;NO
	MOVN	TA,TC		;YES
	PUSHJ	PP,STASHL

	MOVEI	TE,D1MODE
	MOVEM	TE,EMODEB
	MOVE	TE,ELITPC
	IORI	TE,AS.LIT
	MOVEM	TE,EINCRB

	MOVEI	TE,AS.MSC
	MOVEM	TE,EBASEB

	AOS	ELITPC

	SWON	FBSIGN
	JRST	DIVX5B
;GENERATE CODE FOR EXPONENTIATION

EXPX.:	HRRZ	TE,EMODEA	;IS "A" FLOATING-POINT?
	CAIE	TE,FPMODE
	PUSHJ	PP,CCXFP.	;NO--CONVERT IT TO FLOATING-POINT
	PUSHJ	PP,FORCX0	;BE SURE IT IS IN AC 1

	HRRZ	TE,EMODEB	;IS "B" A FIG. CONST.?
	CAIN	TE,FCMODE
	JRST	EXPX15		;YES

	CAIE	TE,LTMODE	;IS "B" A LITERAL?
	JRST	EXPX4		;NO

;"B" IS A LITERAL

	MOVE	TE,EBYTEB	;SAVE
	MOVEM	TE,ESAVER	;	BYTE POINTER TO LITERAL
	MOVE	TE,ESIZEB	;	AND
	MOVEM	TE,ESAVER+1	;	IT'S SIZE

	MOVEI	LN,EBASEB	;GET IT'S VALUE
	PUSHJ	PP,CONVNL
	TSWF	FERROR;
	POPJ	PP,

	JUMPN	TD,EXPX2
	JUMPE	TC,EXPX16
	SKIPN	EDPLB
	JRST	EXPX3
;GENERATE CODE FOR EXPONENTIATION  (CONT'D).

;LITERAL HAS TO BE FLOATING POINT

EXPX2:	MOVE	TE,ESAVER
	MOVEM	TE,EBYTEB
	MOVE	TE,ESAVER+1
	MOVEM	TE,ESIZEB
	SETZM	EDPLB

	PUSHJ	PP,MSFP%L	;CREATE A FLOATING-POINT LITERAL

	MOVE	CH,[XWD E.C3C3,AS.MSC]
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASY
	HRRZ	CH,TC
	JRST	PUTASN

EXPX3:	MOVSI	CH,E.C3C1
	PUSHJ	PP,SETUUO

	MOVE	TE,OPERND	;IS LITERAL TO BE NEGATED?
	MOVE	TE,1(TE)
	TLNE	TE,NEGEOP
	TSWC	FLNEG		;YES--COMPLEMENT SIGN INDICATOR
	TSWFZ	FLNEG;
	MOVNS	TC

	JRST	PUT.L
;GENERATE EXPONENTIATION  (CONT'D)

;"B" IS NOT A LITERAL

EXPX4:	PUSHJ	PP,SETB		;SET UP "B"
	POPJ	PP,		;ERROR--QUIT

	MOVE	TE,OPERND	;IS "B" TO BE NEGATED?
	MOVE	TE,1(TE)
	TLNN	TE,NEGEOP
	JRST	EXPX5		;NO

	PUSHJ	PP,SWAPEM	;YES--SWAP OPERANDS
	PUSHJ	PP,MNXAC.	;GET NEGATIVE OF "B" INTO AC'S
	PUSHJ	PP,SWAPEM	;SWAP OPERANDS BACK

EXPX5:	HRRZ	TE,EMODEB
	CAIN	TE,FPMODE
	JRST	EXPX8
;GENERATE EXPONENTIATION (CONT'D)

;"B" IS COMP

EXPX6:	SKIPN	EDPLB
	CAIE	TE,D1MODE
	JRST	EXPX7

	PUSHJ	PP,SUBSCB
EXPX6A:	MOVSI	CH,E.C3C1
	PUSHJ	PP,SETUUO
	JRST	PUT.B

EXPX7:	PUSHJ	PP,GTBFP
	JRST	EXPX9

;"B" IS COMP-1

EXPX8:	PUSHJ	PP,SUBSCB
EXPX9:	MOVSI	CH,E.C3C3
	PUSHJ	PP,SETUUO
	JRST	PUT.B

;"B" IS A FIG. CONST.

EXPX15:	MOVE	TE,OPERND
	MOVE	TE,(TE)
	TLNN	TE,GNFCZ
	JRST	BADFIG

EXPX16:	MOVE	CH,[XWD HRLZI.+AC1,AS.CNB]
	PUSHJ	PP,PUTASY
	MOVEI	CH,(1.0)
	SETZM	EAC
	JRST	PUTASN
;SET UP B-OPERAND FOR ARITHMETIC VERBS

;IF "B" IS A LITERAL, AND "A" IS COMP-1, CREATE A COMP-1 LITERAL AND
;	RETURN TO CALL+2.
;IF "B" IS A LITERAL, AND "A" IS NOT COMP-1, CREATE A LITERAL AND
;	RETURN TO CALL+2 UNLESS VALUE OF LITERAL FITS A HALF-WORD,
;	IN WHICH CASE RETURN TO CALL+1 WITH VALUE OF LITERAL
;	IN ACCUMULATOR TC.
;IF "A" IS COMP-1, CONVERT "B" TO COMP-1 (IF NECESSARY) AND RETURN
;	TO CALL+2.
;IF "B" IS COMP-1, CONVERT "A" TO COMP-1 (IF NECESSARY) AND RETURN
;	TO CALL+2.
;IF "B" IS DISPLAY, CONVERT IT TO COMP.

;ON ANY OF THE ABOVE, IF ERRORS FOUND RETURN TO CALL+1.

SETB:	HRRZ	TE,EMODEA	;IF MODE IS
	CAIE	TE,FPMODE	;  FLOATING-POINT,
	CAIN	TE,FCMODE	;  OR FIG. CONST.,
	JRST	SETB0		;  DON'T DO SIZE TEST
	MOVE	TE,ESIZEA	;IF SIZE IS
	CAIG	TE,MAXSIZ	;  REASONABLE,
	JRST	SETB0		;  WE'RE HAPPY
	SWON	FERROR		;FORCE NO CODE
	POPJ	PP,

SETB0:	HRRZ	TE,EMODEB	;GET TYPE OF B-OPERAND
	CAIE	TE,LTMODE	;IS IT A LITERAL?
	JRST	SETB8		;NO

	TSWT	FBNUM		;YES--NUMERIC?
	JRST	NOTNUM		;NO
	SWON	FBSIGN		;YES--MUST BE SIGNED

	MOVEI	LN,EBASEB	;GET READY TO GET LITERAL VALUE

	HRRZ	TE,EMODEA	;IS "A" COMP-1?
	CAIE	TE,FPMODE
	JRST	SETB2		;NO

	PUSHJ	PP,MSFP%L	;YES--CREATE A COMP-1 LITERAL
	MOVEI	TE,FPMODE	;FORCE MODE TO BE COMP-1

SETB1:	MOVEM	TE,EMODEB
	MOVEI	TE,AS.MSC	;GET ADDRESS
	MOVEM	TE,EBASEB
	MOVEM	TC,EINCRB

SETB1A:	TSWT	FERROR		;ANY ERRORS?
	AOS	(PP)		;NO--RETURN TO CALL+2
	POPJ	PP,
;SET UP 'B' OPERAND (CONT'D)

;"B" IS NON-FLOATING-POINT LITERAL

SETB2:	PUSHJ	PP,CONVNL	;GET VALUE
	MOVE	TE,OPERND
	MOVE	CH,1(TE)
	TLZE	CH,NEGEOP
	TSWC	FLNEG;
	MOVEM	CH,1(TE)

SETB2A:	SKIPN	TD		;TWO-WORD LITERAL?
	JRST	SETB4

;"B" IS TWO-WORD LITERAL

	TSWFZ	FLNEG		;NEGATIVE?
	PUSHJ	PP,NEGATL	;YES--NEGATE VALUE
	MOVE	TA,[XWD D2LIT,2];CREATE LITERAL
	PUSHJ	PP,STASHL
	MOVE	TA,TD
	PUSHJ	PP,STASHL
	MOVE	TA,TC
	PUSHJ	PP,STASHL

	MOVEI	TE,D2MODE
	MOVEI	TC,2

SETB3:	EXCH	TC,ELITPC
	ADDM	TC,ELITPC
	IORI	TC,AS.LIT
	JRST	SETB1

;"B" IS ONE-WORD LITERAL

SETB4:	JUMPE	TC,CPOPJ	;RETURN IF ZERO VALUE
	HRRZ	TE,EMODEA	;IS MODE
	CAIN	TE,D1MODE	;  ONE-WORD COMP?
	TLNE	TC,-1		;YES--IS VALUE ONLY HALF-WORD?
	JRST	SETB5		;NO--NEED LITERAL
	POPJ	PP,		;YES--RETURN WITH VALUE

SETB5:	MOVE	TA,[XWD D1LIT,1];CREATE LITERAL
	PUSHJ	PP,STASHL
	TSWTZ	FLNEG		;IS IT NEGATIVE?
	SKIPA	TA,TC		;NO
	MOVN	TA,TC		;YES
	PUSHJ	PP,STASHL

	MOVEI	TE,D1MODE
	MOVEI	TC,1
	JRST	SETB3
;SET UP "B" OPERAND (CONT'D).

;"B" IS NOT A LITERAL

SETB8:	CAIE	TE,FCMODE	;IS "B" FIG. CONST.?
	JRST	SETB10		;NO

	SETZB	TC,TD		;YES--
	MOVE	TE,OPERND	;  IT
	MOVE	TD,(TE)		;  MUST BE
	TLNE	TD,GNFCZ	;  "ZERO"
	JRST	SETB4		;IT IS -- OK

	HRRZM	TE,CUREOP	;IT ISN'T --
	JRST	BADFIG		;ERROR


;"B" IS A DATA-ITEM

SETB10:	HRRZ	TD,EMODEA
	CAIE	TE,FPMODE	;IS "B" COMP-1?
	JRST	SETB11		;NO

	CAIE	TD,FPMODE	;YES--IS "A" ALSO COMP-1?
	PUSHJ	PP,CCXFP.	;NO--CONVERT "A" TO COMP-1
	JRST	SETB1A		;RETURN

;"B" IS NOT COMP-1

SETB11:	CAIE	TD,FPMODE	;IS "A" COMP-1?
	JRST	SETB12		;NO

	HRRZ	TE,EBASEB	;YES--IS "B" IN
	SKIPN	TE		;  AC'S 0&1?
	PUSHJ	PP,EXCHAC	;YES--EXCHANGE AC'S
	PUSHJ	PP,SWAPEM	;EXCHANGE OPERANDS
	PUSHJ	PP,MXFPA.	;GET "B" INTO AC'S AS COMP-1
	PUSHJ	PP,SWAPEM	;RE-EXCHANGE OPERANDS
	JRST	SETB1A		;RETURN
;SET UP "B" OPERAND (CONT'D)

;"B" IS DATA-ITEM, AND NEITHER "A" NOR "B" IS COMP-1

SETB12:	CAILE	TE,DSMODE	;IS "B" DISPLAY?
	JRST	SETB14		;NO

SETB13:	PUSHJ	PP,SWAPEM	;EXCHANGE OPERANDS
	PUSHJ	PP,MXAC.	;GET "B" INTO AC'S
	PUSHJ	PP,SWAPEM	;RE-EXCHANGE AC'S
	JRST	SETB1A		;RETURN

SETB14:	TSWF	FBSIGN		;IS "B" SIGNED?
	JRST	SETB1A		;YES
	JRST	SETB13		;NO
;SET UP DECIMAL PLACES FOR ADD OR SUBTRACT

;IF "A" IS COMP-1, SIMPLY RETURN ("SETB" HAS INSURED THAT "B" IS ALSO COMP-1).
;IF "A" HAS FEWER DECIMAL PLACES, ADJUST "A".
;IF "B" HAS FEWER DECIMAL PLACES, ADJUST "B".

SETDP:	HRRZ	TE,EMODEA
	CAIN	TE,FPMODE
	JRST	SUBSCB

	MOVE	TE,EDPLA
	CAMN	TE,EDPLB
	JRST	SUBSCB

	CAML	TE,EDPLB
	JRST	SETDP1

;"A" HAS FEWER PLACES

	PUSHJ	PP,ADJDP.
	HRRZ	TE,EMODEA	;HAS "A" BECOME
	CAIE	TE,FPMODE	;  COMP-1?
	JRST	SUBSCB		;NO
	PUSHJ	PP,SWAPEM	;YES--
	PUSHJ	PP,MXFPA.	;  CONVERT "B" TO
	JRST	SWAPEM		;  COMP-1

;"B" HAS FEWER PLACES

SETDP1:	PUSHJ	PP,SWAPEM	;EXCHANGE OPERANDS
	PUSHJ	PP,MXAC.	;GET "B" INTO AC'S
	PUSHJ	PP,ADJDP.	;ADJUST DECIMAL PLACES
	PUSHJ	PP,SWAPEM	;RE-EXCHANGE OPERANDS

	HRRZ	TE,EMODEB	;HAS "B" BECOME
	CAIN	TE,FPMODE	;  COMP-1?
	JRST	CCXFP.		;YES--CONVERT "A"

	POPJ	PP,		;NO--RETURN
;LOOK AT NEXT ENTRY IN RESTAB.
;IF NO MORE ENTRIES, EXIT TO CALL+1; OTHERWISE EXIT WILL BE TO CALL+2.
;IF IT HAS MORE INTEGRAL PLACES, OR MORE DECIMAL PLACES, THAN AC'S, AND
;A CONTENTS OF AC'S WERE PREVIOUSLY STASHED IN A TEMPORARY, GENERATE
;CODE TO PICK UP THAT TEMPORARY.

LUKRES:	SOSG	ERCNT		;ANY MORE?
	POPJ	PP,		;NO--EXIT TO CALL+1

	AOS	(PP)		;EXIT WILL BE TO CALL+2

	MOVEI	TA,2		;BUMP UP TO NEXT ENTRY
	ADDB	TA,CURRES
	HRRZ	TC,0(TA)	;SET POINTER TO RESULT'S EOPTAB ENTRY
	SKIPN	ETEMPR		;ANY TEMP STASHED?
	POPJ	PP,		;NO

	SKIPN	RESTYP		;DOING ANYTHING BUT "MOVEM"?
	SKIPGE	-2(TA)		;WAS LAST RESULT ROUNDED?
	JRST	LUKR5		;YES--TEMP REQUIRED

	HRRZ	TD,EMODEA	;ARE AC'S FLOATING POINT?
	CAIN	TD,FPMODE
	JRST	LUKR7		;YES

	HLRZ	TD,1(TA)	;COMPARE INTEGRAL SIZES
	MOVE	TE,ESIZEA
	SUB	TE,EDPLA
	CAMLE	TD,TE
	JRST	LUKR4		;RESULT > AC'S--GET TEMP

	HRRE	TD,1(TA)	;COMPARE DECIMAL PLACES
	CAMG	TD,EDPLA
	POPJ	PP,		;NO TEMP NECESSARY

LUKR4:	MOVE	TD,ETEMPR+1	;PICK UP DATA ON TEMP
	LDB	TE,ACMODE
	CAIN	TE,FPMODE
	JRST	LUKR5
	LDB	TE,ACSIZE
	HRRE	TB,TD
	SUB	TE,TB
	MOVE	TD,ESIZEA
	SUB	TD,EDPLA
	CAMLE	TE,TD
	JRST	LUKR5

	CAMG	TB,EDPLA
	POPJ	PP,
;LOOK AT NEXT ENTRY IN RESTAB (CONT'D).

;%TEMP MUST BE PICKED UP
LUKR5:	SETZM	EAC
	MOVE	TD,ETEMPR+1
	LDB	TE,ACSIZE
	MOVEM	TE,ESIZEA

	HRRE	TE,TD
	MOVEM	TE,EDPLA

	LDB	TE,ACMODE
	MOVEM	TE,EMODEA

	MOVE	CH,[XWD MOV+ASINC,AS.MSC]
	PUSHJ	PP,PUT.XA
	HRRZ	CH,ETEMPR
	PUSHJ	PP,PUTASN
	MOVE	TE,EMODEA
	CAIE	TE,D2MODE
	POPJ	PP,

LUKR6:	MOVE	CH,[XWD MOV+ASINC,AS.MSC]
	PUSHJ	PP,PUT.XB
	HRRZ	CH,ETEMPR
	ADDI	CH,1
	JRST	PUTASN

LUKR7:	HLRZ	TE,0(TA)
	ANDCMI	TE,1B18
	CAIE	TE,FPMODE
	JRST	LUKR4
	POPJ	PP,
;SET UP RESTAB
SETRES:	MOVEM	EACA,EOPNXT
	MOVE	TC,EOPLOC
	ADDI	TC,1

STRES0:	MOVEM	TC,CUREOP
	SETZM	ERCNT
	MOVE	EACA,EOPNXT
	CAMN	EACA,EOPLOC
	POPJ	PP,

	MOVE	TB,RESLOC
	MOVEM	TB,RESNXT

STRES1:	PUSHJ	PP,STRES8

STRES4:	PUSHJ	PP,BMPEOP
	POPJ	PP,
	HRRZ	TC,CUREOP
	JRST	STRES1
;SET UP RESTAB  (CONT'D)

STRES8:	HLRE	TE,RESNXT
	CAMLE	TE,[-2]
	PUSHJ	PP,XPNRES
	MOVE	TB,RESNXT
	MOVEM	TC,1(TB)
	MOVE	TA,1(TC)
	LDB	TD,LNKCOD
	CAIE	TD,TB.DAT
	JRST	NOTDAT

	PUSHJ	PP,LNKSET
	LDB	TE,DA.CLA
	CAIE	TE,2
	JRST	NOTNUM

	LDB	TE,DA.NDP
	LDB	TD,DA.DPR
	SKIPE	TD
	MOVNS	TE
	MOVEM	TE,2(TB)
	LDB	TE,DA.INS
	SUB	TE,2(TB)
	HRLM	TE,2(TB)
	LDB	TE,DA.USG
	SUBI	TE,1
	CAIN	TE,IXMODE
	MOVEI	TE,D1MODE
	MOVE	TD,1(TC)
	TLNN	TD,GNROUN
	JRST	STRES9

	IORI	TE,1B18
	AOS	2(TB)
STRES9:	HRLM	TE,1(TB)
	AOS	ERCNT
	ADD	TB,[XWD 2,2]
	MOVEM	TB,RESNXT
	POPJ	PP,
;SCAN THRU RESTAB.
;IF ANY ENTRY HAS MORE INTEGRAL PLACES, OR MORE DECIMAL PLACES, THAN
;PRECEDING ONES, OR IF ANY NON-FLOATING POINT FOLLOWS A FLOATING POINT,
;GET A TEMP LOCATION AND GENERATE CODE TO STASH AC'S THERE.

SCNRES:	TSWF	FALWY0		;IF AC'S ARE ZERO,
	JRST	SCNR3A		;  NO TEMP NEEDED

	MOVE	TE,ERCNT
	SOJLE	TE,CPOPJ

	SKIPN	RESTYP		;RESULT OTHER THAN "MOVEM"?
	TSWF	FSZERA		;ANY SIZE ERROR CLAUSE?
	JRST	SCNRS4		;YES--TEMP NEEDED

	MOVE	TA,RESLOC
	ADDI	TA,1

SCNRS1:	HLRZ	TB,0(TA)	;IS OPERAND ROUNDED?
	TRNE	TB,1B18
	JRST	SCNRS4		;YES--TEMP NEEDED

	CAIE	TB,FPMODE
	JRST	SCNRS2

	HLRZ	TB,2(TA)
	ANDCMI	TB,1B18
	CAIE	TB,FPMODE
	JRST	SCNRS4
	JRST	SCNRS3

SCNRS2:	HLRZ	TB,1(TA)
	HLRZ	TC,3(TA)
	CAMGE	TB,TC
	JRST	SCNRS4

	HRRE	TB,1(TA)
	HRRE	TC,3(TA)
	CAMGE	TB,TC
	JRST	SCNRS4

SCNRS3:	ADDI	TA,2
	SOJG	TE,SCNRS1

SCNR3A:	SETZM	ETEMPR
	POPJ	PP,

SCNRS4:	MOVEI	TE,1
	HRRZ	TA,EMODEA
	CAIN	TA,D2MODE
	MOVEI	TE,2
	PUSHJ	PP,GETEMP
	HRRZM	EACC,ETEMPR
	HRRZ	TD,EDPLA
	MOVE	TE,ESIZEA
	DPB	TE,ACSIZE
	DPB	TA,ACMODE
	MOVEM	TD,ETEMPR+1
	MOVE	CH,[XWD MOVEM.+ASINC,AS.MSC]
	PUSHJ	PP,PUT.XA
	HRRZ	CH,ETEMPR
	PUSHJ	PP,PUTASN
	CAIE	TA,D2MODE
	POPJ	PP,

	MOVE	CH,[XWD MOVEM.+ASINC,AS.MSC]
	PUSHJ	PP,PUT.XB
	MOVE	CH,ETEMPR
	ADDI	CH,1
	JRST	PUTASN
;SET UP "B" OPERAND AS A RESULT

RESETB:	HRRZ	TC,@CURRES
	MOVEM	TC,OPERND
	MOVEM	TC,CUREOP

	PUSHJ	PP,SETOPB	;GET PARAMETERS
	MOVE	TC,OPERND	;GET LINK TO
	MOVE	TA,1(TC)	;  OPERAND
	PUSHJ	PP,LNKSET	;CONVERT TO ADDRESS
	LDB	TE,DA.CLA	;IF CLASS IS
	CAIE	TE,2		;  NOT NUMERIC,
	JRST	RSETB2		;  ERROR
	SWON	FBNUM		;IT IS NUMERIC

	LDB	TE,DA.EDT	;IF IT IS
	JUMPE	TE,RSETB1	;  NOT EDITED, USE EXTERNAL SIZE

	LDB	TE,DA.INS	;IT IS EDITED--GET INTERNAL SIZE
	MOVEM	TE,ESIZEB
	MOVEI	TE,EDMODE	;SET MODE TO NUMERIC-EDITED
	MOVEM	TE,EMODEB
RSETB1:	POPJ	PP,

RSETB2:	SWON	FERROR;
	JRST	NOTNUM
;GET IN RESULT FIELD FOR DIVIDE

SETDIV:	SWOFF	FEOFF1;
	MOVEM	W1,OPLINE
	CAMN	EACA,EOPLOC
	JRST	STDIV9
	MOVEM	EACA,EREM0

	PUSHJ	PP,READEM
	HRRZ	TE,W2
	CAIE	TE,RESLT.
	JRST	STDIV9

	MOVEM	EACA,EREM1
	MOVEM	W1,EREM2
	HRRZ	TC,EREM0
	PUSHJ	PP,STDIV7
	TSWF	FERROR		;IF TROUBLE,
	JRST	STDIV4		;  DON'T CHECK ROUNDING

	MOVE	TA,2(TC)	;GET
	PUSHJ	PP,LNKSET	;  NUMBER
	LDB	TE,DA.NDP	;  OF DECIMAL
	MOVEM	TE,ERESDP	;  PLACES
	MOVE	TE,2(TC)	;IS RESULT TO BE
	TLNE	TE,GNROUN	;  ROUNDED?
	AOS	ERESDP		;YES--GET ANOTHER DECIMAL PLACE

STDIV4:	PUSHJ	PP,READEM	;GET OPERANDS&OPERATOR AFTER 'RESULT'
	MOVEM	W1,EREM4
	MOVEM	EACA,EREM3
	HRRZ	TE,W2
	CAIE	TE,REMOP
	JRST	STDIV6
	HRRZ	TC,EREM1
	PUSHJ	PP,STDIV7

	MOVSI	TE,GNSERA
	TLNE	W1,GNSERA
	IORM	TE,EREM2

STDIV6:	MOVE	W1,OPLINE
	MOVE	TC,EOPLOC
	MOVEI	TC,1(TC)
	MOVEM	TC,CUREOP
	MOVE	EACA,EREM0
	MOVEM	EACA,EOPNXT

	POPJ	PP,
;GET DIVIDE RESULT FIELDS (CONT'D)

;CHECK OPERAND FOR VALIDITY

STDIV7:	CAIN	TC,(EACA)	;WAS AN OPERAND READ?
	JRST	STDIV9		;NO--ERROR
	MOVE	TA,2(TC)	;IS IT
	LDB	TE,LNKCOD	;  A
	CAIN	TE,TB.DAT	;  DATA-NAME?
	POPJ	PP,		;YES--OK

	MOVEI	TC,1(TC)	;NO, SET UP FOR  OPNFAT
	MOVEM	TC,CUREOP
	JRST	NOTDAT		;PUT OUT DIAG

STDIV9:	CAIN	TE,REMOP
	TDCA	TE,TE
	MOVEM	TE,EREM4
	MOVEM	EACA,EREM3
	SWON	FERROR
	POPJ	PP,
;EXCHANGE CONTENTS OF AC'S SUCH THAT "A" IS NOW IN AC'S 0&1.
;CURRENTLY "B" IS THERE.

EXCHAC:	MOVE	TE,EBASEB
	CAILE	TE,1
	POPJ	PP,

	MOVE	TE,EAC
	MOVEM	TE,EBASEB

	MOVSI	CH,EXCH.
	HRR	CH,EAC
	PUSHJ	PP,PUTASY

	HRRZ	TE,EMODEB
	CAIN	TE,D2MODE
	JRST	EXCAC1

	HRRZ	TE,EMODEA
	CAIE	TE,D2MODE
	JRST	EXCAC3

	MOVSI	CH,MOV+AC1
	JRST	EXCAC2

EXCAC1:	MOVSI	CH,MOVEM.+AC1
	HRRZ	TE,EMODEA
	CAIN	TE,D2MODE
	MOVSI	CH,EXCH.

EXCAC2:	HRR	CH,EAC
	ADDI	CH,1
	PUSHJ	PP,PUTASY

EXCAC3:	SETZM	EAC
CPOPJ:	POPJ	PP,
;GET "B" INTO AC'S AS COMP-1 NUMBER

GTBFP:	HRRZ	TE,EBASEB	;IS "B" NOW IN AC'S 0&1?
	SKIPN	TE
	PUSHJ	PP,EXCHAC	;YES--EXCHANGE AC'S
	PUSHJ	PP,FORCX0	;BE SURE "A" IS NOW IN 0&1

	PUSHJ	PP,SWAPEM	;SWAP OPERANDS

	PUSHJ	PP,MXFPA.	;GET "B" INTO AC'S AS COMP-1

	JRST	SWAPEM		;RE-SWAP OPERANDS AND LEAVE
;RESET NEW SIZE OF AC'S

CHKSIZ:	MOVE	TE,ESIZEB
	CAMLE	TE,ESIZEA
	JRST	CHKSZ2

CHKSZ1:	AOS	TE,ECARRY
	CAIG	TE,^D9
	POPJ	PP,

	SETZM	ECARRY
	AOS	ESIZEA
	POPJ	PP,

CHKSZ2:	MOVEM	TE,ESIZEA
	MOVEI	TE,1
	MOVEM	TE,ECARRY
	POPJ	PP,


;IF "A" IS 1-WORD COMP, "B" IS 10 DIGITS OR LESS,
;	AND SIZEA OF "A" IS 10, AND ECARRY IS 3, CONVERT "A" TO A 2-WORD COMP.

CHKS10:	HRRZ	TE,EMODEA
	CAIE	TE,D1MODE
	POPJ	PP,

	MOVE	TE,ESIZEB
	CAIL	TE,^D11
	POPJ	PP,

	MOVE	TE,ESIZEA
	CAIE	TE,^D10
	POPJ	PP,

	MOVE	TE,ECARRY
	CAIGE	TE,3
	POPJ	PP,
	JRST	CC1C2.
;SWAP "A" AND "B" PARAMETERS

SWAPEM:	PUSHJ	PP,SWAPAB

	MOVE	TE,EAC
	MOVEM	TE,EBASEB
	SETZM	EINCRB

	SKIPE	EAC
	TDCA	TE,TE
	MOVEI	TE,2
	MOVEM	TE,EAC

	POPJ	PP,
;NEGATE AC'S IF "B" HAS UNARY MINUS

NEGIF:	MOVE	TE,OPERND
	MOVE	TE,1(TE)
	TLNN	TE,NEGEOP
	POPJ	PP,

	MOVSI	CH,MOVN.
	HRRZ	TE,EMODEA
	CAIE	TE,D2MODE
	JRST	NEGIF2

	MOVSI	CH,NEG.
	PUSHJ	PP,SETUUO

NEGIF2:	HRR	CH,EAC
	DPB	CH,CHAC
	JRST	PUTASY
;PUT FIRST OPERAND INTO AC'S
;USED BY ADD,ADDTO,MUL,MULBY,DIV,DIVBY

GRABOP:	MOVEM	W1,OPLINE

GRBDIV:	HRRZ	TC,EOPLOC
	ADDI	TC,1

GRBOP0:	CAIL	TC,(EACA)	;STILL INSIDE EOPTAB?
	JRST	BADEOP		;NO--TROUBLE

	SWOFF	FEOFF1		;TURN OFF MOST FLAGS
	MOVEM	EACA,EOPNXT	;SAVE EACA

	MOVEM	TC,CUREOP	;SAVE THAT LOCATION
	MOVSM	TC,OPERND

GRBOP1:	PUSHJ	PP,SETOPA	;SET UP "A" PARAMETERS

	SETZM	EAC		;USE AC'S 0 & 1
	SETZM	ECARRY

GRBOP2:	HRRZ	TE,EMODEA
	CAIN	TE,FCMODE
	JRST	GRBOP9

	TSWF	FANUM		;NUMERIC FIELD?
	JRST	GRBOP5		;YES
	MOVEM	TC,CUREOP	;NO, RESET PTR TO THAT OPERAND
	SETOM	RESTYP		;SET ERROR FLAG
	JRST	NOTNUM		;GIVE "?IMPROPER CLASS" MSG

GRBOP5:	CAIN	TE,LTMODE
	JRST	GRBOP3

	SETZM	RESTYP		;SET RESULT TYPE TO ZERO
	JRST	MXAC.		;GET DATA INTO AC'S AND RETURN
;PUT FIRST OPERAND INTO AC'S  (CONT'D).

;IT IS A LITERAL.

GRBOP3:	PUSHJ	PP,CONVNL	;GET VALUE INTO TC&TD
	TSWF	FERROR		;ANY ERRORS?
	JRST	GRBOP8		;YES

	SETZM	RESTYP		;NO--CLEAR RESULT TYPE

GRBOP4:	SKIPN	TD		;TREAT ZERO LITERAL IN
	JUMPE	TC,GRBO10	;  SPECIAL WAY
	MOVE	TE,ESIZEA	;ONE WORD LITERAL?
	CAILE	TE,^D10
	JRST	GRBOP6		;NO

	MOVEI	TE,D1MODE	;YES--SET MODE
	MOVEM	TE,EMODEA
	TSWF	FLNEG		;NEGATIVE LITERAL?
	MOVNS	TC		;YES--NEGATE VALUE
	MOVSI	CH,MOV##	;GENERATE <MOVE AC,[LITERAL]>
	JRST	PUT.LA		;	AND RETURN

GRBOP6:	MOVEI	TE,D2MODE
	MOVEM	TE,EMODEA
	TSWF	FLNEG;
	PUSHJ	PP,NEGATL

	MOVE	TA,[XWD D2LIT,2]
	PUSHJ	PP,STASHL
	MOVE	TA,TD
	PUSHJ	PP,STASHL
	MOVE	TA,TC
	PUSHJ	PP,STASHL

	MOVEI	TE,AS.MSC
	MOVEM	TE,EBASEA
	MOVE	TE,ELITPC
	IORI	TE,AS.LIT
	HRRZM	TE,EINCRA
	MOVEI	TE,2
	ADDM	TE,ELITPC
	JRST	MXAC.

GRBOP7:	PUSHJ	PP,NOTNUM	;PUT OUT "IMPROPER CLASS" DIAG

GRBOP8:	PUSHJ	PP,BMPEOP	;ANY MORE OPERANDS?
	POPJ	PP,		;NO

	HRRZ	TC,CUREOP	;YES--TRY NEXT ONE
	JRST	GRBOP1
;PUT FIRST OPERAND INTO AC'S (CONT'D)

;IT IS A FIGURATIVE CONSTANT

GRBOP9:	HRRZ	TE,EFLAGA
	CAIE	TE,2
	JRST	GRBOP7

;LITERAL IS ZERO

GRBO10:	SWON	FALWY0		;SET "AC'S ARE ZERO"
	POPJ	PP,
;CHECK OPERANDS FOR LEGALITY FOR "SET" VERB.
;SET UP LAST OPERAND.

SETSET:	SWOFF	FEOFF1		;TURN OFF MOST FLAGS
	MOVEM	W1,OPLINE	;SAVE LN&CP OF OPERATOR
	MOVEM	EACA,EOPNXT
	SETZM	ERCNT
	SETZM	RESTYP
	SETZM	EAC

	HRRZ	TC,EOPLOC
	ADDI	TC,1
	CAIL	TC,(EACA)	;ANY OPERANDS AT ALL?
	JRST	SETST4		;NO--ERROR

SETST1:	MOVEM	TC,CUREOP
	MOVE	TA,1(TC)
	LDB	TE,LNKCOD
	CAIE	TE,TB.DAT
	JRST	SETST5		;NO--ERROR

	MOVE	TE,0(TC)	;YES--IS IT NUMERIC?
	TLNN	TE,GNOPNM
	JRST	SETST3		;NO--ERROR

	MOVE	TA,1(TC)	;YES--GET POINTER TO DATAB
	PUSHJ	PP,LNKSET

	LDB	TE,DA.NDP	;ANY DECIMAL PLACES?
	JUMPN	TE,SETST3
	AOS	ERCNT		;NO

SETST2:	PUSHJ	PP,BMPEOP	;STEP UP TO NEXT ONE
	JRST	SETST4		;NO MORE--ERROR

	MOVE	TC,CUREOP	;SAVE LOCATION OF THIS ONE
	PUSHJ	PP,BMPEOP	;WAS THAT THE LAST?
	JRST	SETST7		;YES
	JRST	SETST1		;NO--GO PROCESS IT


SETST3:	SETOM	RESTYP		;SET ERROR INDICATION
	MOVEI	DW,^D264	;WRITE OUT DIAG
	PUSHJ	PP,OPNFAT
	JRST	SETST2

SETST4:	SETOM	RESTYP		;SET ERROR INDICATION
	JRST	BADEOP		;PUT OUT DIAG

SETST5:	PUSHJ	PP,NOTDAT
	SETOM	RESTYP
	JRST	SETST2

;SET UP LAST OPERAND FOR "SET" VERB  (CONT'D).

;LAST OPERAND IS IN HAND.

SETST7:	MOVEM	TC,CUREOP
	HRLM	TC,OPERND
	MOVEI	TE,-1(TC)	;RESET RESNXT TO DROP THIS ONE
	HRRM	TE,EOPNXT

	MOVEI	LN,EBASEA	;SET UP PARAMETERS
	PUSHJ	PP,SETOPN
	TSWF	FERROR;
	JRST	STST10

	HRRZ	TE,EMODEA
	CAIN	TE,FCMODE
	JRST	STST12

	TSWT	FANUM		;NUMERIC?
	JRST	SETST8		;NO

	CAIN	TE,LTMODE	;YES--IS IT A LITERAL?
	JRST	SETST9		;YES

STST11:	SKIPN	EDPLA		;NO--ANY DECIMAL PLACES?
	POPJ	PP,		;NO--ALL OK

SETST8:	MOVEI	DW,^D264	;WRITE OUT DIAG
	PUSHJ	PP,OPNFAT

STST10:	SETOM	RESTYP		;SET ERROR INDICATION
	POPJ	PP,

SETST9:	PUSHJ	PP,CONVNL	;GET VALUE OF LITERAL INTO AC'S
	TSWF	FERROR		;ANY ERRORS?
	JRST	STST10		;YES--QUIT
	JRST	STST11		;NO

STST12:	MOVE	TD,EOPNXT
	MOVE	TD,1(TD)
	TLNN	TD,GNFCZ
	JRST	SETST8
	POPJ	PP,
;ERROR ROUTINES

TOOBIG:	MOVEI	DW,^D88
	JRST	OPERA

BADFIG:	MOVEI	DW,^D211

OPERA:	SWON	FERROR;
	JRST	OPNFAT

CANT0:	MOVE	W1,OPLINE
	MOVEI	DW,^D239
	JRST	OPFAT
ADDT.1=.-3
	EXP ADD1D
	EXP ADD2D
	EXP ADD3D

SUBT.1=.-3
	EXP SUB1D
	EXP SUB2D
	EXP SUB3D

MULT.1=.-3
	EXP ML1CX
	EXP ML2CX
	EXP MLFPFP
MULT.2=.-3
	EXP ML1C1C
	EXP ML1C2C
MULT.3=.-3
	EXP ML2C1C
	EXP ML2C2C

DIVT.1=.-3
	EXP	DIVX.6
	EXP	DIVX10
	EXP	DIVX40
AC1==1B30
AC2==2B30
AC3==3B30

DINTO==1B<^D18+^D9>	;"INTO" FLAG IN DIVIDE OPERATOR

RESLT.==11	;"RESULT" OPERATOR CODE
YECCH.==105	;"YECCH" OPERATOR CODE
NEGEOP==1B<^D18+6>	;"UNARY MINUS" FLAG IN OPERAND
REMOP==12	;'REMAINDER' OPERATOR CODE

EXTERNAL CORR

EXTERNAL EOPLOC,EOPNXT,CUREOP,RESLOC,RESNXT,CURRES,EXTLOC,EWORDB,EREMAN,TEMBAS,ETEMPC

EXTERNAL EBASEA,EINCRA,ERESA,EDPLA,EMODEA,ESIZEA,EFLAGA,EBYTEA
EXTERNAL EBASEB,EINCRB,ERESB,EDPLB,EMODEB,ESIZEB,EFLAGB,EBYTEB
EXTERNAL EBASEX,EINCRX,ERESX,EDPLX,EMODEX,ESIZEX,EFLAGX,EBYTEX
EXTERNAL ESAVEA,ESAVEB,EBASAX,EBASBX,ESAVAX,ESAVBX,ESAVER,ESAVRX

EXTERNAL D1MODE,D2MODE,DSMODE,D6MODE,D7MODE,FPMODE,EDMODE,FCMODE,LTMODE,IXMODE,ZERO
EXTERNAL AS.MSC,AS.CNB,AS.TMP,AS.LIT,D1LIT,D2LIT

EXTERNAL LNKCOD,TB.DAT
EXTERNAL DA.CLA,DA.NDP,DA.DPR,DA.INS,DA.EXS,DA.USG,DA.EDT

EXTERNAL AOS.,FAD.,ADDM.,FADM.,ADD.12,ADD.21,ADD.22
EXTERNAL SOS.,SUB.,FSB.,SUB.12,SUB.21,SUB.22
EXTERNAL MUL.,FMP.,IMUL.,MUL.12,MUL.21,MUL.22
EXTERNAL DIV.,FDV.,DIV.11,DIV.12,DIV.21,DIV.22
EXTERNAL MOVM.,MOVN.,MOVEM.,MOVEI.,MOVNI.,MOVSI.,HRLZI.,MAG.,NEG.
EXTERNAL BLT.,EXCH.,SETZB.,HRRZI.,SETZM.,SZERA.,OVFLO.
EXTERNAL E.C3C1,E.C3C3

EXTERNAL EAC,ELITPC,CUREOP,OPERND,CHAC,TCLN,TCCP,ESAVAC,OPLINE
EXTERNAL ELITLO,ELITHI,ECARRY,MAXSIZ,ESZERA,ERESDP,EMULSZ,EOPCOD
EXTERNAL ERCNT,ETEMPR,RESTYP,ACSIZE,ACMODE,REMPAR
EXTERNAL EREM0,EREM1,EREM2,EREM3,EREM4

	END
[ PB