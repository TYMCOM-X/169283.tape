.SPACING 1
.RIGHT MARGIN 70
.LEFT MARGIN 5
.NOFILL
.NONUMBER
.FIGURE 10
^^
.CENTER 65
BBL
.SKIP 5
.CENTER 65
BASIC
.CENTER 65
BUSINESS
.CENTER 65
LANGUAGE
.SKIP 5
.CENTER 65
USER'S MANUAL
\\
.SKIP 20
.CENTER 65
^COPYRIGHT##^C##1972#BY#^CORE#_&#^CODE,#^INC.
.CENTER 65
^ALL#^RIGHTS#^RESERVED
.PAGE
.CENTER 65
^^TABLE OF CONTENTS\\
.SKIP 4
^^
                                                        PAGE NO.
.SKIP 1
I     CONVENTIONS USED IN THIS MANUAL                       3
.SKIP 1
II    BBL OVERVIEW                                          5
.SKIP 1
III   BBL COMMAND SYSTEM                                    9
           BYE/EXIT/STOP                                   10
           CATALOG                                         11
           DELETE                                          12
           HELP                                            13
           LIST                                            14
           MERGE                                           15
           NEW                                             17
           OLD                                             18
           RECOVER                                         20
           RENAME                                          21
           RESOURCES                                       22
           RUN                                             24
           SAVE                                            25
           UNSAVE                                          27
.SKIP 1
IV    STANDARD BBL VARIABLES, EXPRESSIONS,
      AND STATEMENTS                                       28
           LET                                             33
           PRINT                                           34
           READ                                            38
           DATA                                            40
           INPUT                                           41
           OPEN                                            42
                SEQUENTIAL ACCESS FILES                    42
                RANDOM ACCESS FILES                        45
           RESTORE                                         48
           GO TO/THEN                                      49
           GO SUB                                          50
           RETURN                                          52
           IF                                              53
           ON                                              56
           FOR                                             58
                THE IMPLIED NEXT                           60
           NEXT                                            62
           DIMENSION                                       63
           REMARKS                                         64
           END                                             65
           STOP                                            66
.PAGE
.CENTER 65
^^TABLE OF CONTENTS (CONTINUED)\\
.SKIP 4
^^
                                                        PAGE NO.
.SKIP 1
V     BBL USER-DEFINED FUNCTIONS --
      THE FN CAPABILITY                                    67
           DEFINE FN (SINGLE-LINE FUNCTIONS)               68
           DEFINE FN (MULTI-LINE FUNCTIONS)                70
           FNEND                                           73
.SKIP 1
VI    BBL STRING VARIABLES                                 74
           LET (STRING VARIABLE FORM)                      76
           PRINT (STRING VARIABLE FORM)                    77
           READ (STRING VARIABLE FORM)                     78
           DATA (STRING VARIABLE FORM)                     79
           INPUT (STRING VARIABLE FORM)                    80
           OPEN (STRING VARIABLE FORM)                     81
           IF (STRING VARIABLE FORM)                       82
           DIMENSION (STRING VARIABLE FORM)                84
           CHANGE                                          85
.SKIP 1
VII   BBL SPECIAL DATA AND THE SELECT STATEMENT            87
           STEP DATA                                       88
           SMOOTH DATA                                     91
           DISCRETE DATA                                   93
           CONTINUOUS DATA                                 95
           FIXED DATA                                      97
           NORMAL DATA                                     98
           LOGNORMAL DATA                                  99
           POISSON DATA                                   102
           EXPONENTIAL DATA                               104
           SELECT                                         106
.SKIP 1
VIII  ASTERISK SUBSCRIPTING                               107
           LET (SINGLE ASTERISK)                          109
           LET (DOUBLE ASTERISK)                          111
           LET (STACKED FORM)                             113
.SKIP 1
IX    ROW, COL, _& REP VARIABLES --
      THE IMPLIED ASTERISK                                116
           ASSUME                                         120
           DEFINE REPORT                                  121
           SHOW (ALPHANUMERIC FORM)                       123
           SHOW (NUMERIC FORM)                            127
           REPEND                                         130
           DISPLAY (REPORT FORM)                          131
.PAGE
.CENTER 65
^^TABLE OF CONTENTS (CONTINUED)\\
.SKIP 4
^^
                                                        PAGE NO.
.SKIP 1
X     BBL RISK PROFILES                                   134
           DEFINE PROFILE                                 136
           INSERT (RISK PROFILE FORM)                     138
           PUT (RISK PROFILE FORM)                        139
           FIND (RISK PROFILE FORM)                       140
           GET (RISK PROFILE FORM)                        142
           REMOVE (RISK PROFILE FORM)                     144
           CLEAR (RISK PROFILE FORM)                      145
           SHOW (RISK PROFILE TABLE FORM)                 146
           SHOW (RISK PROFILE FUNCTION FORM)              148
           RPEND                                          150
           DISPLAY (RISK PROFILE FORM)                    151
           GRAPH (RISK PROFILE FORM)                      155
           LET (RISK PROFILE FORM)                        162
           PRINT (RISK PROFILE FORM)                      163
           SORT (RISK PROFILE FORM)                       164
.SKIP 1
XI    THE GENERALIZED BBL LIST CAPABILITY                 165
           DEFINE LIST                                    169
           INSERT (GENERAL LIST FORM)                     172
           PUT (GENERAL LIST FORM)                        174
           FIND (GENERAL LIST FORM)                       176
           GET (GENERAL LIST FORM)                        179
           REMOVE (GENERAL LIST FORM)                     181
           CLEAR (GENERAL LIST FORM)                      183
           CREATE                                         184
           DESTROY                                        185
           LET (GENERAL LIST FORM)                        186
           PRINT (GENERAL LIST FORM)                      187
           SORT (GENERAL LIST FORM)                       188
.SKIP 1
XII   OTHER SPECIAL BBL STATEMENTS                        189
           AVERAGE                                        190
           CHAIN                                          191
           DISCOUNT                                       193
           IROI                                           196
           GRAPH (VECTOR FORM)                            198
           SORT (VECTOR FORM)                             202
           TREND                                          203
           WIDTH                                          205
           WORKSPACE                                      206
.PAGE
.CENTER 65
^^TABLE OF CONTENTS (CONTINUED)\\
.SKIP 4
^^
                                                        PAGE NO.
.SKIP 1
XIII  INTERNAL BBL FUNCTIONS                              207
           STANDARD FUNCTIONS                             208
           VECTOR/ROW/COL FUNCTIONS                       210
           LIST FUNCTIONS                                 212
           STRING FUNCTIONS                               214
.SKIP 1
XIV   BBL TECHNICAL SPECIFICATIONS                        215
           DESIGN SPECIFICATIONS                          215
           MAJOR BBL SUBSYSTEMS                           218
           BBL DYNAMIC MEMORY SYSTEM                      219
           BBL SYSTEM FILES                               221
           BBL COMMAND SUMMARY                            222
           BBL STATEMENT SUMMARY                          223
           INPUT AND EDITING AIDS                         230
           BBL ERROR MESSAGES                             231
                BBL COMMAND ERRORS                        231
                BBL STATEMENT ERRORS                      232
                BBL ASSEMBLY ERRORS                       233
                BBL EXECUTION ERRORS                      235
           RISK PROFILE SMOOTHING                         237
           ASCII CODES                                    239
           HARDWARE _& OPERATING SYSTEM REQUIREMENTS       240
.SKIP 1
XV    BIBLIOGRAPHY                                        241
\\
.FILL
.NUMBER 0
.RIGHT MARGIN 65
.PAGE
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.CENTER 65
^^PREFACE\\
.SKIP 4
.PARAGRAPH
^THIS USER'S MANUAL HAS BEEN DESIGNED TO SERVE AS A REFERENCE DOCUMENT
FOR THE USE OF ^^BBL\\ (^BASIC ^BUSINESS ^LANGUAGE.)  ^THE INITIAL
OVERVIEW PROVIDES A GENERAL DISCUSSION OF THE ^^BBL\\ SYSTEM, ITS
USES, AND ITS STRUCTURE. ^SUBSEQUENT SECTIONS DISCUSS THE ^^BBL\\
COMMAND SYSTEM, STANDARD ^^BBL\\ VARIABLES AND STATEMENTS, AND
SPECIAL ^^BBL\\ CAPABILITIES FOR HANDLING A BROAD VARIETY OF
MANAGEMENT ANALYSES INCLUDING REPORT OR SPREAD SHEET GENERATION,
MONTE CARLO SIMULATION, RISK ANALYSIS, IMMINENT EVENT SIMULATION,
QUEUEING MODELS, STATISTICAL ANALYSIS, ETC.  ^LATER SECTIONS DEAL
WITH ^^BBL\\ FUNCTIONS,  ^^BBL\\ DESIGN SPECIFICATIONS, AND
HARDWARE/OPERATING SYSTEM REQUIREMENTS.
.PARAGRAPH
^BECAUSE ^^BBL\\ INCORPORATES MANY OF THE FEATURES OF THE BASIC
PROGRAMMING LANGUAGE, WE HAVE CHOSEN TO BEGIN THE DESCRIPTION OF
^^BBL\\'S CAPABILITIES BY DISCUSSING THESE "BASIC-LIKE" CAPABILITIES.
^THE FIRST FEW SECTIONS, THEREFORE, SHOULD APPEAR QUITE FAMILIAR
TO AN EXPERIENCED BASIC PROGRAMMER, YET SHOULD PERMIT A GRADUAL
INTRODUCTION TO THE OVERALL ^^BBL\\ SYSTEM TO BOTH THE BEGINNER
AND THE EXPERT.  ^ONCE THE "BASIC" FRAMEWORK HAS BEEN LAYED OUT,
EACH ADDITIONAL FACET OF ^^BBL\\ IS DISCUSSED IN A PROGRESSION FROM
THE MORE SIMPLE ^^BBL\\ CAPABILITIES (SPREAD SHEET
AND REPORT GENERATION), TO THE MORE UNIQUE AND SOPHISTICATED
CAPABILITIES OF ^^BBL\\ (LISTS AND RISK PROFILE VARIABLES, ETC.)
^YET THE PROGRESSION IS MODULAR SO THAT A USER CAN JUMP AHEAD AND
DEAL ONLY WITH THAT PART OF ^^BBL\\ WHICH IS OF IMMEDIATE INTEREST
TO HIM.
.PARAGRAPH
^AS ^^BBL\\ BECOMES BETTER KNOWN, ONE ANTICIPATED QUESTION CONCERNS
^^BBL\\'S SIMILARITY TO THE BASIC LANGUAGE -- "^IS ^^BBL\\
AN ENTIRELY NEW MANAGEMENT SCIENCE LANGUAGE, OR MERELY AN EXTENSION
OF THE BASIC LANGUAGE?"  ^AS AUTHORS OF ^^BBL\\ WE HAVE ATTEMPTED
TO DESIGN A PROGRAMMING LANGUAGE WHICH WILL DEAL WITH A BROAD CLASS
OF MANAGEMENT SCIENCE PROBLEMS IN A CONCEPTUALLY SIMPLE YET POWERFUL
FRAMEWORK.  ^AT THE SAME TIME, WE FELT IT APPROPRIATE TO PERMIT A
LARGE GROUP OF ANALYSTS, NAMELY THOSE FAMILIAR WITH THE BASIC LANGUAGE,
TO BECOME COMFORTABLE WITH ^^BBL\\ WITH A MINIMUM OF EFFORT. ^ONE
MIGHT ANALOGIZE THE RELATIONSHIP BETWEEN ^^BBL\\ AND THE BASIC
LANGUAGE AS BEING SIMILAR TO THE ^SIMSCRIPT/^FORTRAN RELATIONSHIP,
OR THE ^SIMULA/^ALGOL RELATIONSHIP.  ^AS A POINT OF INTEREST, ^^BBL\\
ENCOMPASSES ROUGHLY FOUR TIMES THE NUMBER OF STATEMENTS AS ARE
GENERALLY AVAILABLE IN THE BASIC LANGUAGE, AND OMITS AT LEAST ONE
BROAD CLASS OF STATEMENTS OFTEN FOUND IN BASIC, THE MAT STATEMENTS.
^WE HAVE CONCIOUSLY ATTEMPTED TO ONLY OVERLAP THOSE AREAS OF THE
BASIC LANGUAGE WHICH WOULD SERVE THE OBJECTIVES OF PRESENTING A
SIMPLE FRAMEWORK FOR ANALYSIS, A COMFORTABLE TRANSITION FOR CURRENT
BASIC LANGUAGE PROGRAMMERS, AND CONSISTENCY IN LANGUAGE DESIGN
THROUGHOUT ALL AREAS OF ^^BBL\\.  ^IT IS OUR HOPE THAT THESE OBJECTIVES
HAVE BEEN MET.
.PARAGRAPH
^TO ALL THOSE WHO HAVE OFFERED ASSISTANCE AND HAVE PROVIDE CRITIQUES
THROUGHOUT THE DESIGN AND DEVELOPMENT OF ^^BBL\\, WE OFFER OUR
SINCERE THANKS.  ^WE WOULD LIKE TO SPECIALLY ACKNOWLEDGE THE
^JOHNSON _& ^JOHNSON ^MANAGEMENT ^INFORMATION ^CENTER.  ^THE GENEROUS
SUPPORT OF THIS ORGANIZATION  DEMONSTRATES ^JOHNSON _& ^JOHNSON'S
CONTINUING CONCERN FOR THE APPLICATION AND ADVANCEMENT OF MANAGEMENT
SCIENCE.
.PARAGRAPH
^IT IS OUR INTENTION THAT ^^BBL\\ SHOULD GROW IN CAPABILITY, UNDERGOING
FURTHER REFINEMENTS AND EXTENSIONS IN THE FUTURE.  ^AS INPUTS TO
THIS PROCESS, FURTHER SUGGESTIONS ARE WELCOMED.
.SKIP 3
.LEFT MARGIN 40
^TIMOTHY ^SORRELL
.BREAK
^JAMES ^BOTKIN
.BREAK
^WELLESLEY, ^MASS.
.BREAK
^OCTOBER, 1972
.BREAK


.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^I
.PAGE
.CENTER 65
^CONVENTIONS ^USED ^IN ^THIS ^MANUAL
.SKIP 4
.PARAGRAPH
^THROUGHOUT THIS MANUAL THE FOLLOWING CONVENTIONS WILL BE USED
TO DESCRIBE INPUT TYPED BY THE USER, RESPONSES FROM THE ^^BBL\\
SYSTEM, AND THE GENERAL FORM OF ^^BBL\\ COMMANDS AND STATEMENTS:
.SKIP 2
.LEFT MARGIN 10
.NOFILL
^^N1\\     =     NUMERIC ARGUMENT
^^L1\\     =     LINE NUMBER ARGUMENT
[]     =     AN OPTIONAL FIELD
       =     A CARRIAGE RETURN
       =     REQUIRED CHARACTERS OR USER-TYPED INPUT
^^CON\\    =     A CONSTANT
^^VAR\\    =     A STANDARD VARIABLE
^^EXP\\    =     A STANDARD EXPRESSION
(*)    =     ASTERISK SUBCRIPTING ALLOWED
$      =     AN ALPHANUMERIC STRING (FOR EXAMPLE ^^VAR$\\)
_#      =     A NUMERIC LIST (FOR EXAMPLE ^^VAR_#\\)
_._._.    =     REPEATED FIELDS PERMITTED
^^FNV\\    =     ANY USER DEFINED FUNCTION VARIABLE
^^RPV\\    =     ANY USER DEFINED RISK PROFILE VARIABLE
^^PROB\\   =     A PROBABILITY
.SKIP 1
.LEFT MARGIN 5
.FILL
.PARAGRAPH
^IN GENERAL, CONSTANT, VARIABLE, AND EXPRESSION FIELDS FOLLOW
A GENERAL HIERARCHY.  ^IF AN "^^EXP\\" FIELD
IS PERMITTED, THEN ANY SUBSCRIPTED OR UNSUBSCRIPTED
VARIABLE IS ALSO PERMITTED, AS IS ANY CONSTANT.  ^SIMILARLY,
SUBSCRIPTED VARIABLE FIELDS IMPLY THAT UNSUBSCRIPTED
VARIABLES AND CONSTANTS ARE ALSO ALLOWED, WHILE AN 
UNSUBSCRIPTED VARIABLE IMPLIES ONLY UNSUBSCRIPTED  VARIABLES
AND CONSTANTS ARE ALLOWED.
.PARAGRAPH
^THIS SAME HIERARCHY APPLIES TO SUBSCRIPTING, WITH ASTERISK
SUBSCRIPTING BEING THE MOST POWERFUL.  ^FOR EXAMPLE "^^VAR(*)\\"
WOULD IMPLY THAT ONLY A VARIABLE OR A CONSTANT IS PERMITTED, BUT
IF A VARIABLE IT CAN BE SUBSCRIPTED WITH AN *, AN EXPRESSION, 
A VARIABLE, OR A CONSTANT.  ^THUS "^^VAR(*)\\" IMPLIES THAT THE
FOLLOWING FIELDS ARE PERMITTED:
.SKIP 1
.LEFT MARGIN 25
^^VAR(*)\\
.BREAK
^^VAR(EXP)\\
.BREAK
^^VAR(VAR)\\
.BREAK
^^VAR(CON)\\
.BREAK
^^VAR\\
.BREAK
^^CON\\
.SKIP 1
.LEFT MARGIN 5
.PARAGRAPH
^THEREFORE, THE FIELD WITH HIGHEST HIERARCHY IS "^^EXP(*)\\",
WHICH IMPLIES THAT ANY ALLOWED EXPRESSION, INCLUDING ANY ASTERISK
SUBSCRIPTED VARIABLES, IS PERMITTED.  (^WHEN EXCEPTIONS ARE MADE
TO THIS GENERAL STRUCTURE, THEY ARE EXPLICITLY NOTED WHERE THEY
OCCUR.)
.PARAGRAPH
^THE UNDERLINING CONVENTION IS USED TO SHOW THE REQUIRED CHARACTERS
OF A COMMAND OR STATEMENT WHENEVER EXPLAINING THE GENERAL FORM.
^UNDERLINING IS ALSO USED IN EXAMPLES TO DISTINGUISH TYPING
ENTERED BY THE USER FROM RESPONSES TYPED BY THE ^^BBL\\ SYSTEM.
.PARAGRAPH
^WHEN A ^^BBL\\ COMMAND IS TYPED EITHER BLANKS OR COMMAS CAN 
DELIMIT ARGUMENTS.  ^WHEN A ^^BBL\\ STATEMENT IS ENTERED, BLANKS
BECOME INSIGNIFICANT (UNLESS ENCLOSED IN SINGLE OR DOUBLE QUOTES),
AND COMMAS MUST THEREFORE BE USED AS DELIMITERS.
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^I^I
.PAGE
.CENTER 65
^^BBL\\ ^OVERVIEW
.SKIP 4
.PARAGRAPH
^THE ^BASIC ^BUSINESS ^LANGUAGE IS A COMPUTER LANGUAGE WHICH
SERVES AS AN ANALYTICAL AID TO MANAGERS AND ANALYSTS IN
ALL TYPES OF ORGANIZATIONS.  ^^BBL\\ PROVIDES THE COMPUTATIONAL
CAPABILITY FOR AUTOMATING MANY OF THE CALCULATIONS ASSOCIATED WITH
MANAGEMENT AND PROBLEM SOLVING.  ^THE BROAD CLASS OF SITUATIONS
TO WHICH ^^BBL\\ LENDS THE MOST ASSISTANCE IS GENERALLY REFERRED
TO AS MANAGEMENT SCIENCE, SUCH AREAS AS RISK ANALYSIS, FINANCIAL
MODELING, QUEUEING THEORY, IMMINENT EVENT SIMULATIONS, ETC.  ^IN
GENERAL ^^BBL\\ CAN ASSIST IN THE PROBLEM SOLVING PROCESS IN THREE
BROAD AREAS:
.SKIP 1
.LEFT MARGIN 15
.INDENT -3
1.#^STRUCTURING THE PROBLEM OR THE REQUIREMENT INTO A FLEXIBLE
FRAMEWORK FOR ANAYSIS;
.SKIP 1
.INDENT -3
2.#^PROVIDING THE COMPUTING POWER TO CARRY OUT THE ASSIGNED
ANALYSIS OR TASK;
.SKIP 1
.INDENT -3
3.#^PROVIDING MANAGEMENT REPORTS WHICH ASSIST IN THE IMPLEMENTATION,
CONTROL, ETC. OF MANAGEMENT ACTION.
.SKIP 1
.LEFT MARGIN 5
.PARAGRAPH
^THE SCHEMATIC WHICH FOLLOWS INDICATES THE OVERALL LAYOUT OF THE
^^BBL\\ SYSTEM.  ^THE ^^BBL\\ USER CAN EITHER STRUCTURE HIS ANALYSIS
BY ENTERING OR EDITING THE ^^BBL\\ STATEMENTS ASSOCIATED WITH THE
PROBLEM (CALLED THE PROBLEM FILE), OR HE CAN ISSUE CONCISE COMMANDS
TO THE ^^BBL\\ SYSTEM WHICH CALL FOR SPECIFIC ACTIONS TO BE CARRIED
OUT:
.NOFILL
.TEST PAGE 38
^^
                         .CALL BBL
                             '
                             '
                             '
                             '
                         '       '
                     '               '
         --------'      NEW OR OLD?      '-------- 
         '           '               '           '
         '               '       '               '
         '                   '                   '
         '                                  '
  ---------------                         ---------------
  '             '                         '             '
  ' ENTER NAME  '                         '  RETRIEVE   '
  ' OF NEW FILE '                         '  OLD FILE   '
  '             '                         '             '
  ---------------                         ---------------
         '                                       '
         '                                       '
         '                                       '
         -----------------------------------------
                             '
                             '
                             '
                         ---------
                         ' READY '
                         ---------
                             '
       COMMAND SYSTEM        '       STATEMENT EDITING
                             '
 NEW              LIST       '
 OLD              MERGE      '
 RECOVER          RENAME     '      LINE NO. _& STATEMENT
 BYE/STOP/EXIT    RESOURCES  '      (TO ADD A LINE)
 CATALOG          RUN        '
 DELETE           SAVE       '      LINE NO. _& C.R.
 HELP             UNSAVE     '      (TO DELETE A LINE)
\\
.FILL
.SKIP 2
.PARAGRAPH
^BECAUSE THE SYSTEM IS INTERACTIVE, MANY INSTRUCTIONS OR COMMANDS
ENTERED BY THE USER WILL BRING RESPONSES AND FURTHER REQUESTS FROM
^^BBL\\ FOR ADDITIONAL INFORMATION.  ^IN MANY CASES ^^BBL\\ PROMPTS
WHEN THE USER HAS TYPED AN INCOMPLETE COMMAND, OR, IN THE CASE OF
ENTERING STATEMENTS, ^^BBL\\ INDICATES WHEN AN INPUT CAN NOT BE
UNDERSTOOD.
.PARAGRAPH
^COMMANDS ARE ENTERED WITHOUT LINE NUMBERS.  ^THE COMMAND AND ANY
ASSOCIATED ARGUMENTS ARE TYPED BY THE USER FOLLOWED
BY A CARRIAGE RETURN.  ^FOR EXAMPLE, AN OLD PROBLEM FILE "^^MYFILE\\"
CAN BE RETRIEVED IN RESPONSE TO "^^NEW OR OLD?\\" AS FOLLOWS:
.SKIP 1
.LEFT MARGIN 15
.NOFILL
^^
NEW OR OLD? OLD MYFILE
.SKIP 1
READY
\\
.FILL
.LEFT MARGIN 5
.SKIP 1
^WHEN ^^BBL\\ RESPONDS WITH "^^READY\\", A COPY OF THE STATEMENTS
FROM THE FILE "^^MYFILE\\" HAS BEEN RETRIEVED BY ^^BBL\\ AND IS HELD
INTERNAL TO ^^BBL\\ AS A WORKING PROBLEM FILE. ^THE PROBLEM CAN NOW BE
EDITED BY THE USER OR ADDITIONAL COMMANDS CAN BE GIVEN TO CAUSE FURTHER
ACTIONS.
.PARAGRAPH
^IN ORDER TO EDIT A FILE, OR ENTER A NEW FILE INTO ^^BBL\\, THE
USER MUST ENTER EACH ^^BBL\\ STATEMENT ON A LINE BEGINNING WITH
A LINE NUMBER (BETWEEN 1 AND 99999).  ^LINES WILL BE ARRANGED
BY ^^BBL\\ IN SEQUENCE FROM SMALLEST LINE NUMBER TO LARGEST.
^FOR EXAMPLE, IF THE USER'S CURRENT FILE CONTAINS TWO LINES NUMBERED
100 AND 200, A THIRD LINE NUMBERED 150 COULD BE ENTERED AND WOULD
BE PLACED BETWEEN THE FIRST TWO LINES BY ^^BBL\\.  ^IF THE USER
THEN TYPED THE "^^LIST\\" COMMAND, ^^BBL\\ WOULD RESPOND WITH
AN ORDERED LIST OF STATEMENTS:
.SKIP 1
.LEFT MARGIN 15
.NOFILL
.TEST PAGE 10
^^
100 REMARKS THIS LINE ENTERED FIRST
200 REMARKS THIS LINE ENTERED SECOND
150 REMARKS THIS LINE ENTERED THIRD
LIST
.SKIP 1
MYFILE
.SKIP 1
100 REMARKS THIS LINE ENTERED FIRST
150 REMARKS THIS LINE ENTERED THIRD
200 REMARKS THIS LINE ENTERED SECOND

\\
.LEFT MARGIN 5
.FILL
.PARAGRAPH
^TO REPLACE A STATEMENT WHICH IS CURRENTLY WITHIN ^^BBL\\, THE USER
SHOULD ENTER THE LINE NUMBER OF THE STATEMENT TO BE REPLACED,
FOLLOWED BY THE NEW STATEMENT:
.SKIP 1
.LEFT MARGIN 15
.NOFILL
^^
200 REMARKS NEW LAST LINE
LIST
.SKIP 1
MYFILE
.SKIP 1
100 REMARKS THIS LINE ENTERED FIRST
150 REMARKS THIS LINE ENTERED THIRD
200 REMARKS NEW LAST LINE

\\
.LEFT MARGIN 5
.FILL
.PARAGRAPH
^DELETION  FOLLOWS THE SAME LINE NUMBERING SCHEME. ^IF A LINE
NUMBER IS TYPED, FOLLOWED BY NO ADDITIONAL INFORMATION, THE LINE
IS DELETED:
.SKIP 1
.NOFILL
.LEFT MARGIN 15
.TEST PAGE 7
^^
100
LIST
.SKIP 1
MYFILE
.SKIP 1
150 REMARKS THIS LINE ENTERED THIRD
200 REMARKS NEW LAST LINE

\\
.LEFT MARGIN 5
.FILL
.PARAGRAPH
^AS EACH LINE IS ENTERED INTO THE ^^BBL\\ SYSTEM, ^^BBL\\ NOT ONLY
STORES THE INFORMATION ENTERED BY THE USER (CALLED THE CURRENT SOURCE
OR TEXT FILE), BUT ALSO STORES AN INTERNAL REPRESENTATION OF THE
INFORMATION CALLED THE "RELOCATABLE COMPILED CODE."  ^BOTH THESE
CURRENT FILES ARE WORKING FILES WITHIN ^^BBL\\, AND NO CHANGES
ARE MADE TO ANY SAVED FILES UNTIL THE USER ISSUES THE "^^SAVE\\"
COMMAND.  ^TWO CURRENT SETS OF INFORMATION EXIST AT ALL TIMES:
.SKIP 1
.LEFT MARGIN 15
.INDENT -3
1.#^USER DEFINED SOURCE LINES RETAINED IN THE FORMAT ENTERED
BY THE USER;
.SKIP 1
.INDENT -3
2.#^RELOCATABLE COMPILED CODE (CORRESPONDING TO THE USER DEFINED
SOURCE LINES) GENERATED BY  ^^BBL\\ AS THE SOURCE LINES ARE INPUT.
.SKIP 1
.LEFT MARGIN 5
.PARAGRAPH
^WHEN A FILE IS SAVED BY ^^BBL\\, BOTH SETS OF INFORMATION ARE
NORMALLY SAVED.  ^THE USER SPECIFIES THE NAME TO BE ASSIGNED TO
THE SOURCE FILE, AND THE RELOCATABLE CODE IS ASSIGNED THE SAME NAME
WITH THE EXTENSION "^^.REL\\".  ^IN THIS WAY, OLD PROBLEMS
CAN BE RETRIEVED WITHOUT REGENERATION OF THE RELOCATABLE COMPILED
CODE.  ^IF, HOWEVER, AN OLD PROBLEM IS RETRIEVED, AND NO RELOCATABLE
FILE EXISTS FOR THE PROBLEM, OR CHANGES HAVE BEEN MADE TO THE PROBLEM
FILE SINCE THE RELOCATABLE CODE WAS GENERATED, ^^BBL\\ WILL REGENERATE
NEW RELOCATABLE CODE WHEN THE PROBLEM IS RETRIEVED.
.PARAGRAPH
^THE FOLLOWING SECTION OF THIS MANUAL WILL DISCUSS THE ^^BBL\\
COMMANDS, THEIR FORM, AND THE ACTIONS WHICH THEY INITIATE.
^SUBSEQUENT SECTIONS EXPLAIN THE VARIOUS ^^BBL\\ STATEMENTS WHICH
CAN BE USED TO DEFINE AND STRUCTURE THE USER'S ANALYSIS.
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^I^I^I
.PAGE
.CENTER 65
^^BBL\\ ^COMMAND ^SYSTEM
.SKIP 4
.PARAGRAPH
^^BBL\\ COMMANDS MAY BE TYPED BY THE USER IN RESPONSE TO "^^NEW
OR OLD?\\" OR WHEN ^^BBL\\ IS AT THE "^^READY\\" POINT.  ^COMMANDS
PERMITTED AT "^^NEW OR OLD?\\" ARE:
.SKIP 1
.LEFT MARGIN 25
.NOFILL
^^
BYE/EXIT/STOP
HELP
NEW
OLD
RECOVER
\\
.FILL
.LEFT MARGIN 5
.SKIP 1
.PARAGRAPH
^THE ^^RECOVER\\ COMMAND IS THE ONLY COMMAND NOT PERMITTED AT THE
"^^READY\\" POINT:
.SKIP 1
.NOFILL
.LEFT MARGIN 25
^^
BYE/EXIT/STOP
CATALOG
DELETE
HELP
LIST
MERGE
NEW
OLD
RENAME
RESOURCES
RUN
SAVE
UNSAVE
\\
.FILL
.SKIP 1
.LEFT MARGIN 5
.PARAGRAPH
^EACH OF THESE COMMANDS WILL BE DISCUSSED IN THIS SECTION. ^THE
GENERAL FORM OF THE COMMAND WILL BE SHOWN WITH BLANKS AS DELIMITERS
OF ARGUMENTS, ALTHOUGH COMMAS ARE ALSO ACCEPTABLE.
.PAGE
.LEFT MARGIN 20
^^BYE/EXIT/STOP\\
.SKIP 2
.INDENT -6
^FORM:#^^BYE\\
.BREAK
^^EXIT\\
.BREAK
^^STOP\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THESE COMMANDS ALLOW THE USER TO TERMINATE EXECUTION
OF ^^BBL\\. ^AFTER THE COMMAND IS GIVEN, ^^BBL\\ CHECKS TO DETERMINE
IF THE EDITOR CONTAINS ANY PROGRAM LINES.  ^IF LINES ARE PRESENT,
^^BBL\\ ASKS:
.SKIP 1
.INDENT 15
^^SAVE?\\
.SKIP 1
^A "^^YES\\" RESPONSE WILL SAVE THE CURRENT LINES ON A FILE WITH
THE CURRENT NAME. (^AS IN THE STANDARD ^^SAVE\\ COMMAND, ^^BBL\\
THEN ASKS "^^NEW FILE, OK?\\" OR "^^OLD FILE, OK?\\", WHICH
PROVIDES THE USER AN OPPORTUNITY TO CHANGE THE NAME OR BY-PASS
SAVING.  ^SEE THE ^^SAVE\\ COMMAND.) ^IF THE CURRENT LINES ARE
SAVED, ^^BBL\\ ALSO SAVES THE CORRESPONDING RELOCATABLE COMPILED
CODE FOR THE CURRENT LINES (ACCORDING TO THE CONVENTIONS OF THE
STANDARD ^^SAVE\\ COMMAND) ON A "^^.REL\\" FILE.
.SKIP 1
^BEFORE ENDING EXECUTION, ^^BBL\\ AUTOMATICALLY PRINTS THE
ELAPSED CONNECT TIME (MINUTES) AND COMPUTE TIME (SECONDS) SINCE
LOGIN TO THE ^^BBL\\ SYSTEM.
.NOFILL
.SKIP 2
.INDENT -9
^EXAMPLE:#^^BYE
.SKIP 1
SAVE? YES
.SKIP 1
OLD FILE, OK? YES
.SKIP 1
TIME SINCE LOGIN:
CONN MIN=     12.46
COMP SEC=      4.82
.SKIP 1
EXIT
_^C
_.
\\
.FILL
.PAGE
^^CATALOG\\
.SKIP 2
.INDENT -6
^FORM:#^^CATALOG [NAME]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THIS COMMAND WILL TYPE THE NAMES OF ALL FILES FOUND
IN THE USER'S STORAGE AREA.  ^IF NO ARGUMENT IS GIVEN, ALL FILE
NAMES ARE TYPED. ^IF A NAME IS GIVEN, THE FILE NAME SPECIFIED IS
LISTED, IF FOUND.  ^THIS COMMAND ALSO ALLOWS THREE SPECIAL FORMS
OF THE FILE NAME ARGUMENT:
.SKIP 1
.INDENT 15
^^FILE.*\\
.INDENT 15
^^*.EXT\\
.INDENT 15
^^*.*\\
.SKIP 1
^THE ASTERISK IN PLACE OF A FILE NAME OR EXTENSION INDICATES
THAT ALL NAMES OR EXTENSIONS SHOULD BE CATALOGED.
.SKIP 2
.INDENT -9
.NOFILL
^EXAMPLE:#^^CATALOG ABC.*
.SKIP 1
ABC.BBL
ABC.DAT
ABC.OUT
ABC.REL
.SKIP 1
READY\\
.FILL
.PAGE
^^DELETE\\
.SKIP 2
.INDENT -6
^FORM:#^^DELETE [L1 [L2]]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THIS COMMAND ERASES ALL OR A SELECTED PORTION OF
LINES CURRENTLY IN THE ^^BBL\\ EDITOR.  ^TWO ARGUMENTS, REPRESENTING
LINE NUMBERS, ARE OPTIONAL. ^IF NO ARGUMENTS ARE GIVEN, ALL
LINES WILL BE DELETED.  ^A SINGLE ARGUMENT
WILL DELETE ALL LINES WITH LINE NUMBERS EQUAL TO OR GREATER THAN
THAT SPECIFIED. ^TWO ARGUMENTS SPECIFY THAT THE BLOCK OF LINES
BETWEEN THE TWO ARGUMENTS SHOULD BE DELETED.
.SKIP 1
^AFTER INTERPRETING A ^^DELETE\\ COMMAND, ^^BBL\\ CHECKS TO MAKE
CERTAIN THAT THE USER ACTUALLY INTENDED TO DELETE LINES:
.SKIP 1
.INDENT 15
^^DELETING LINES, OK?\\
.SKIP 1
^A "^^YES\\" RESPONSE INSTRUCTS ^^BBL\\ TO CARRY OUT THE ^^DELETE\\
COMMAND AS GIVEN. ^A "^^NO\\" RESPONSE WILL CAUSE ^^BBL\\ TO IGNORE
THE ^^DELETE\\ COMMAND THAT WAS GIVEN.
.SKIP 1
^^BBL\\ RETURNS TO "^^READY\\" WHEN DELETION IS COMPLETED OR WHEN
THE DELETION IS BY-PASSED.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^DELETE 100 200
.SKIP 1
DELETING LINES, OK? YES
.SKIP 1
READY\\
.FILL
.PAGE
^^HELP\\
.SKIP 2
.INDENT -6
^FORM:#^^HELP [COMMAND COMMAND COMMAND...]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^HELP\\ COMMAND PROVIDES THE USER A COMPLETE
LIST OF THE COMMANDS AVAILABLE OR A BRIEF EXPLANATION OF SPECIFIC
COMMANDS IF ONE OR MORE COMMAND NAME ARGUMENTS ARE INCLUDED.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^HELP OLD
.SKIP 1
OLD            NAME (L1 (L2))
NAME=FILE NAME RETRIEVED
L1=OPTIONAL FIRST LINE (1 ASSUMED) THRU
L2=OPTIONAL LAST LINE (99999 ASSUMED)
.SKIP 1
READY\\
.FILL
.PAGE
^^LIST\\
.SKIP 2
.INDENT -6
^FORM:#^^LIST [L1 [L2]]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^LIST\\ COMMAND WILL INSTRUCT ^^BBL\\ TO DISPLAY
ALL OR A SELECTED PORTION OF LINES CURRENTLY IN THE ^^BBL\\ EDITOR.
^TWO ARGUMENTS, REPRESENTING LINE NUMBERS, ARE OPTIONAL. ^IF NO
ARGUMENTS ARE GIVEN, ALL LINES WILL BE DISPLAYED.  ^A SINGLE ARGUMENT
WILL DISPLAY ALL LINES WITH LINE NUMBERS EQUAL TO OR GREATER THAN
THAT SPECIFIED. ^TWO ARGUMENTS SPECIFY THAT THE BLOCK OF LINES
BETWEEN THE TWO ARGUMENTS SHOULD BE DISPLAYED.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^LIST 60
.SKIP 1
MYFILE
.SKIP 1
60 ROW4=ROW1-ROW2-ROW3*100%
70 ROW5=10,20,30,5:40,30,20
80 ROW6=ROW4*ROW5
90 DISPLAY REP1
.SKIP 1
READY\\
.FILL
.PAGE
^^MERGE\\
.SKIP 2
.INDENT -6
^FORM:#^^MERGE NAME [L1 [L2]]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THIS COMMAND ALLOWS THE USER TO BRING A FILE INTO
THE EDITOR AND COMBINE IT WITH THE FILE WHICH IS CURRENTLY IN THE
EDITOR TO CREATE A NEW WORKING FILE.  ^THE ^^MERGE\\ COMMAND
SHOULD BE FOLLOWED BY THE NAME OF THE FILE TO BE RETRIEVED.  ^IF NO
FILE NAME IS GIVEN, ^^BBL\\ WILL PROMPT:
.SKIP 1
.INDENT 15
^^FILE NAME?\\
.SKIP 1
^A CARRIAGE RETURN RESPONSE TO "^^FILE NAME?\\" WILL BY-PASS THE
^^MERGE\\ COMMAND, AND RETURN TO "^^READY\\".
.SKIP 1
^IN ADDITION, THE USER CAN SUPPLY TWO OPTIONAL ARGUMENTS WHICH
REPRESENT LINE NUMBERS.  ^IF NO ARGUMENTS ARE GIVEN, THE ENTIRE
FILE IS MERGED.  ^A SINGLE ARGUMENT INDICATES THAT ALL LINES WITH
LINE NUMBERS EQUAL TO OR GREATER THAN THE ARGUMENT SHOULD BE
MERGED FROM THE FILE SPECIFIED. ^TWO ARGUMENTS SPECIFY THAT THE
BLOCK OF LINES BETWEEN THE TWO ARGUMENTS SHOULD BE MERGED FROM THE
FILE SPECIFIED.
.SKIP 1
^AFTER THE ^^MERGE\\ COMMAND IS GIVEN, ^^BBL\\ DETERMINES IF
THE FILE EXISTS.  ^IF THE FILE IS FOUND, THE ^^MERGE\\ COMMAND
IS CARRIED OUT. ^IF THE FILE IS NOT FOUND, ^^BBL\\ GIVES AN ERROR
MESSAGE AND RETURNS TO THE "^^READY\\" POINT:
.SKIP 1
.INDENT 15
^^FILE NOT FOUND\\
.SKIP 1
.INDENT 15
^^READY\\
.SKIP 1
^FILES WHICH ARE FOUND ARE ENTERED INTO THE EDITOR BY MERGING
LINES FROM THE IN-COMING FILE WITH LINES CURRENTLY IN THE ^^BBL\\
EDITOR ACCORDING TO LINE NUMBER. ^IF A RETRIEVED LINE COINCIDES
WITH A LINE NUMBER CURRENTLY IN THE EDITOR, ^^BBL\\ REPLACES THE
CURRENT LINE WITH THE IN-COMING LINE.
.SKIP 1
^WHEN THE ^^MERGE\\ COMMAND RETRIEVES A FILE, THE IN-COMING LINES
ARE ALWAYS RECOMPILED INTO NEW RELOCATABLE CODE, AND THE NEWLY
COMPILED RELOCATABLE CODE IS SORTED INTO THE CURRENT SET OF
RELOCATABLE CODE.  ^THE ^^MERGE\\ COMMAND DOES NOT RETRIEVE 
RELOCATABLE COMPILED CODE DIRECTLY FROM A RELOCATABLE COMPILED
CODE FILE AS IN THE CASE OF THE STANDARD "^^OLD\\" COMMAND.
^FOR THIS REASON, "^^.REL\\" FILES CAN NOT BE MERGED. ^THE
RECOMPILATION OF THE IN-COMING LINES IS INDICATED BY ^^BBL\\ BY
THE SYSTEM TYPING "^^BBL: NAME\\" AFTER THE COMMAND IS
GIVEN.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^MERGE
.SKIP 1
FILE NAME? MYFILE 100 200
BBL: MYFILE
.SKIP 1
READY\\
.FILL
.PAGE
^^NEW\\
.SKIP 2
.INDENT -6
^FORM:#^^NEW NAME\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^NEW\\ COMMAND CLEARS THE CONTENTS OF THE
^^BBL\\ EDITOR, AND AWAITS FURTHER COMMANDS OR EDITING INSTRUCTIONS.
^A SINGLE ARGUMENT, REPRESENTING THE FILE NAME TO BE ASSIGNED TO
THE NEW CURRENT FILE, IS REQUIRED. ^IF THE FILE NAME IS NOT SPECIFIED,
^^BBL\\ PROMPTS:
.SKIP 1
.INDENT 15
^^FILE NAME?\\
.SKIP 1
^THE USER CAN RESPOND WITH THE NAME HE CHOOSES, OR A CARRIAGE
RETURN TO BY-PASS THE ^^NEW\\ COMMAND AND RETURN TO "^^READY\\"
OR TO "^^NEW OR OLD?\\"
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^NEW
.SKIP 1
FILE NAME? MYPROG
.SKIP 1
READY\\
.FILL
.PAGE
^^OLD\\
.SKIP 2
.INDENT -6
^FORM:#^^OLD NAME [L1 [L2]]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE OLD COMMAND CLEARS THE CONTENTS OF THE ^^BBL\\ EDITOR
AND ENTERS THE CONTENTS OF AN EXISTING FILE INTO THE EDITOR.
(^IF A "^^.REL\\" FILE EXISTS, THE RELOCATABLE CODE IS TAKEN FROM
THE "^^.REL\\" FILE, PROVIDING IT WAS CREATED LATER THAN THE
SOURCE FILE. ^OTHERWISE, ^^BBL\\ RECOMPILES THE SOURCE FILE INTO
NEW RELOCATABLE CODE AS THE FILE IS RETRIEVED.) ^THE ^^OLD\\ COMMAND
SHOULD BE FOLLOWED BY THE NAME OF THE FILE TO BE RETRIEVED. ^IF
THE FILE NAME IS NOT SPECIFIED, ^^BBL\\ WILL PROMPT:
.SKIP 1
.INDENT 15
^^FILE NAME?\\
.SKIP 1
^A CARRIAGE RETURN RESPONSE TO "^^FILE NAME?\\" WILL BY-PASS THE
^^OLD\\ COMMAND AND RETURN TO "^^READY\\" OR TO "^^NEW OR OLD?\\"
.SKIP 1
^IN ADDITION, THE USER CAN SUPPLY TWO OPTIONAL ARGUMENTS WHICH
REPRESENT LINE NUMBERS. ^IF NO ARGUMENTS ARE GIVEN, THE ENTIRE FILE
IS RETRIEVED. ^A SINGLE ARGUMENT INDICATES THAT ALL LINES WITH 
LINE NUMBERS EQUAL TO OR GREATER THAN THE ARGUMENT SHOULD BE RETRIEVED.
^TWO ARGUMENTS SPECIFY THAT THE BLOCK OF LINES BETWEEN THE TWO
ARGUMENTS SHOULD BE RETRIEVED. ^IN EVERY CASE, ALL CURRENT LINES
ARE CLEARED PRIOR TO ANY RETRIEVAL.
.SKIP 1
^AN ATTEMPT TO RETRIEVE A NON-EXISTENT FILE WILL CAUSE ^^BBL\\
TO RESPOND:
.SKIP 1
.INDENT 15
^^FILE NOT FOUND\\
.SKIP 1
AND RETURN TO ^^"READY"\\.
.SKIP 1
^THE USER CAN CHOOSE TO RETRIEVE ONLY THE RELOCATABLE COMPILED
CODE (NO TEXT LINES) BY SPECIFYING A "^^.REL\\" EXTENSION.
^WHEN A "^^.REL\\" FILE IS RETRIEVED WITHOUT CORRESPONDING TEXT LINES,
^^BBL\\ WILL NOT PERMIT ANY FURTHER EDITING OF THE "^^.REL\\" FILE,
AND THEREFORE WILL NOT ALLOW THE FOLLOWING COMMANDS:
.SKIP 1
.INDENT 15
^^MERGE\\
.BREAK
.INDENT 15
^^LIST\\
.BREAK
.INDENT 15
^^DELETE\\
.SKIP 1
^IN ADDITION, NO NEW LINES CAN BE ADDED NOR CAN CHANGES BE MADE
TO CURRENT LINES WHEN OPERATING IN THIS "NO-EDIT" MODE.
^IF THE USER RETRIEVES A NORMAL TEXT FILE VIA "^^OLD\\" OR BEGINS
A "^^NEW\\" PROBLEM, ^^BBL\\ WILL RETURN TO THE NORMAL EDITING
MODE WHICH ALLOWS EDITING.
.SKIP 1
^WHENEVER A SOURCE PROBLEM FILE IS RETRIEVED, AND THE CORRESPONDING
RELOCATABLE FILE IS NON-EXISTENT OR OUT-DATED, THE ^^BBL\\ SYSTEM
INDICATES THE REGENERATION OF NEW RELOCATABLE CODE BY TYPING
"^^BBL: NAME\\".
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^OLD
.SKIP 1
FILE NAME? MYFILE 100 200
BBL: MYFILE
.SKIP 1
READY\\
.FILL
.PAGE
^^RECOVER\\ (IN RESPONSE TO "^^NEW OR OLD?\\")
.SKIP 2
.INDENT -6
^FORM:#^^RECOVER\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THIS COMMAND ALLOWS THE USER TO RECOVER A ^^BBL\\
PROGRAM WHICH HAD BEEN PREVIOUSLY ENTERED INTO THE ^^BBL\\ EDITOR
BUT NOT SAVED. ^THE ^^BBL\\ SYSTEM WILL ATTEMPT TO RETRIEVE ALL
LINES FROM THE ^^BBL\\ SYSTEM EDITOR "^^.TMP\\" FILE ASSIGNED TO
THE CURRENT JOB.  (^SEE ^^BBL\\ TECHNICAL SPECIFICATIONS.)
^IF ^^BBL\\ FINDS SUCH A "^^.TMP\\" FILE, THE LINES ARE RETRIEVED
JUST AS IF THE USER HAD RETRIEVED AN "^^OLD\\" FILE, AND
^^BBL\\ CONFIRMS THE RETRIEVAL WITH "^^READY\\".  ^IF THE "^^.TMP\\"
FILE CAN NOT BE FOUND, ^^BBL\\ RESPONDS:
.SKIP 1
.INDENT 15
^^FILE NOT FOUND\\
.SKIP 1
^AFTER A FAILURE TO RECOVER A SYSTEM "^^.TMP\\" FILE, THE USER
IS RETURNED TO "^^NEW OR OLD?\\" AT WHICH POINT FURTHER COMMANDS
MAY BE ISSUED.
(^SINCE THE EDITOR "^^.TMP\\" FILE IS ASSIGNED A NAME CORRESPONDING
TO THE JOB NUMBER WHICH CREATED THE FILE,
THE USER SHOULD RENAME THE "^^.TMP\\" FILE
PRIOR TO A ^^RECOVER\\ COMMAND IF THE JOB NUMBER HAS CHANGED.)
.SKIP 1
^WHEN A "^^.TMP\\" FILE HAS BEEN SUCCESSFULLY RECOVERED, THE
USER SHOULD CHECK THE CONTENTS OF THE RECOVERED FILE BY LISTING
THE SOURCE LINES. ^SINCE THE "^^.TMP\\"
FILE MAY NOT CONTAIN A FEW OF THE MOST RECENT EDITING CHANGES,
THE RECOVERED FILE MAY HAVE TO BE MODIFIED TO INCLUDE ANY CHANGES
WHICH WERE NOT RECOVERED. ^THE "^^TMP\\" FILE IS ALWAYS COMPLETE IF
A NORMAL ^^BYE/EXIT/STOP\\ COMMAND TERMINATES THE SESSION CREATING
THE "^^TMP\\" FILE. ^THIS FACILITATES EXITING TO THE MONITOR WITHOUT
SAVING THE CURRENT FILE, AND THEN RETURNING TO THE ^^BBL\\ SYSTEM
USING THE RECOVER COMMAND TO CONTINUE WITH THE CURRENT FILE.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^NEW OR OLD? RECOVER
.SKIP 1
READY\\
.FILL
.PAGE
^^RENAME\\
.SKIP 2
.INDENT -6
^FORM:#^^RENAME NAME\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^RENAME\\ COMMAND ALLOWS THE USER TO ASSIGN
A NEW NAME TO THE CURRENT FILE WITHIN THE ^^BBL\\ EDITOR. ^THE
^^RENAME\\ COMMAND SHOULD BE FOLLOWED BY THE NAME TO BE ASSIGNED.
^IF NO FILE NAME IS GIVEN, ^^BBL\\ WILL PROMPT:
.SKIP 1
.INDENT 15
^^FILE NAME?\\
.SKIP 1
^A CARRIAGE RETURN RESPONSE TO "^^FILE NAME?\\" WILL BY-PASS THE
RENAME COMMAND AND RETURN TO "^^READY\\".
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^RENAME MYPROG
.SKIP 1
READY\\
.FILL
.PAGE
^^RESOURCES\\
.SKIP 2
.INDENT -6
^FORM:#^^RESOURCES ON\\
.BREAK
.INDENT 10
^^OFF\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THIS COMMAND INSTRUCTS ^^BBL\\ TO PRINT FIVE
RESOURCE ITEMS AFTER EACH SUBSEQUENT RUN:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#CONNECT TIME FOR THE RUN IN MINUTES
.SKIP 1
.INDENT -3
2.#COMPUTE TIME FOR THE RUN IN SECONDS
.SKIP 1
.INDENT -3
3.#STARTING WORKSPACE (MEMORY CONSUMED BY PROBLEM) IN THOUSANDS
OF WORDS
.SKIP 1
.INDENT -3
4.#ADDED WORKSPACE (MEMORY ADDED DURING ASSEMBLY TO SATISFY
DIMENSIONS, SET UP LISTS, ETC.) IN THOUSANDS OF WORDS
.SKIP 1
.INDENT -3
5.#DYNAMIC WORKSPACE (MEMORY ALLOCATED DURING EXECUTION TO
LISTS, STRING VARIABLES, ETC.) IN THOUSANDS OF WORDS
.SKIP 1
.LEFT MARGIN 20
^THE WORKSPACE MEASURES INDICATE THE TOTAL AMOUNT OF MEMORY CONSUMED
BY THE USER'S PROBLEM. (^THIS DOES NOT INCLUDE THE ^^BBL\\ SYSTEM
MEMORY REQUIREMENTS.) ^THE MINIMUM WORKSPACE IS 1^K. (^BECAUSE
ADDING WORKSPACE DURING ASSEMBLY FORCES A CERTAIN AMOUNT OF RE-ASSEMBLY,
THE USER CAN SET HIS WORKSPACE FOR ANY PROBLEM VIA THE ^^WORKSPACE\\
STATEMENT. ^SEE THAT SECTION OF THIS MANUAL.)
.SKIP 1
^THIS COMMAND REQUIRES A SINGLE ARGUMENT TO SET THE RESOURCE
PRINTER "^^ON\\" OR "^^OFF\\". ^WHEN RESOURCES ARE TURNED "^^ON\\",
RESOURCES WILL CONTINUE TO BE PRINTED AFTER EACH SUBSEQUENT RUN
UNTIL RESOURCES ARE TURNED "^^OFF\\". (^^BBL\\ INITIALLY ASSUMES
RESOURCES "^^OFF\\".)
.SKIP 1
^IF NO "^^ON\\" OR "^^OFF\\" ARGUMENT IS SPECIFIED WHEN THE COMMAND
IS ISSUED, ^^BBL\\ PROMPTS:
.SKIP 1
.INDENT 15
^^ON OR OFF?\\
.PAGE
.NOFILL
.INDENT -9
^EXAMPLE:#^^RESOURCES
.SKIP 1
ON OR OFF? ON
.SKIP 1
READY
.SKIP 1
RUN
EXECUTION
.SKIP 1
                  XYZ CORPORATION
            PRODUCTION SIMULATION STUDY
                         .
                         .
                         .
.SKIP 1
TIME/WORKSPACE:
CONN MIN=      1.21
COMP SEC=      4.02
START WS=         4
ADDED WS=         0
DYNAM WS=         2
.SKIP 1
READY\\
.FILL
.PAGE
^^RUN\\
.SKIP 2
.INDENT -6
^FORM:#^^RUN\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^RUN\\ COMMAND CAUSES ^^BBL\\ TO ASSEMBLE THE
RELOCATABLE COMPILED CODE FOR THE CURRENT PROBLEM STATEMENTS INTO
A FORM WHICH CAN BE EXECUTED, AND THEN TO
EXECUTE THE PROGRAM. ^IF ERRORS ARE FOUND DURING ASSEMBLY OR
EXECUTION, APPROPRIATE ERROR MESSAGES WILL BE ISSUED BY ^^BBL\\.
^THE END OF ASSEMBLY AND THE START OF EXECUTION IS SIGNALED BY
THE WORD "^^EXECUTION\\" TYPED BY ^^BBL\\.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^RUN
EXECUTION
.SKIP 1
                  XYZ CORPORATION
            PRODUCTION SIMULATION STUDY
.SKIP 1
THROUGHPUT EFFICIENCY       88.7%     99.2%
NET ACTIVITY                12.6      18.2
AVE COST PER UNIT          $ .08
                         .
                         .
                         .
.SKIP 1
READY\\
.FILL
.PAGE
^^SAVE\\
.SKIP 2
.INDENT -6
^FORM:#^^SAVE [NAME [L1 [L2]]]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THIS COMMAND SAVES THE CURRENT CONTENTS OF THE ^^BBL\\
EDITOR ON A PERMANENT FILE UNDER THE USER'S NUMBER.  ^THE ^^SAVE\\
COMMAND CAN INCLUDE UP TO THREE OPTIONAL ARGUMENTS, A FILE NAME AND
TWO LINE NUMBERS. ^IF NO FILE NAME IS SPECIFIED, THE SAVED FILE
WILL BE GIVEN THE SAME NAME AS ASSIGNED TO THE CURRENT FILE WITHIN
THE EDITOR, AND ALL LINES WILL BE SAVED. (^THE RELOCATABLE CODE WILL
BE SAVED ON A FILE WITH THE SAME NAME AND THE EXTENSION
"^^.REL\\".) ^IF A FILE NAME IS GIVEN, THIS NAME OVERRIDES THE
CURRENT NAME (CAN BE THE SAME HOWEVER), AND TWO OPTIONAL LINE
NUMBER ARGUMENTS CAN BE SPECIFIED. ^A SINGLE LINE NUMBER ARGUMENT
INDICATES THAT ALL LINES WITH LINE NUMBERS EQUAL TO OR GREATER THAN
THE ARGUMENT SHOULD BE SAVED. ^TWO LINE NUMBER ARGUMENTS
SPECIFY THAT THE BLOCK OF LINES BETWEEN THE TWO ARGUMENTS SHOULD
BE SAVED.
.SKIP 1
^AFTER THE ^^SAVE\\ COMMAND IS GIVEN, ^^BBL\\ DETERMINES IF THE FILE
BEING SAVED IS A NEW OR OLD FILE, AND ASKS THE USER TO VERIFY
THIS STATUS:
.SKIP 1
.INDENT 15
^^NEW FILE, OK?\\
.SKIP 1
OR:
.SKIP 1
.INDENT 15
^^OLD FILE, OK?\\
.SKIP 2
^A "^^YES\\" RESPONSE TO EITHER INQUIRY INSTRUCTS ^^BBL\\ TO
SAVE ON THE FILE SPECIFIED. ^A "^^NO\\" RESPONSE WILL CAUSE ^^BBL\\
TO REQUEST A "^^FILE NAME?\\" AT WHICH POINT THE USER CAN ENTER
THE CORRECT NAME (AND LINE NUMBERS), OR BY-PASS THE COMMAND WITH A
CARRIAGE RETURN.
.SKIP 1
^WHEN A FILE IS SAVED, THE RELOCATABLE CODE IS NORMALLY SAVED 
WITH THE SAME FILE NAME AND WITH THE EXTENSION "^^.REL\\".
^THEREFORE, TWO FILES ARE NORMALLY CREATED WITH THE ^^SAVE\\ COMMAND.
^IF THE USER WISHES TO SAVE ONLY THE "^^.REL\\" FILE, THE FILE
NAME SHOULD BE SPECIFIED WITH A "^^.REL\\" EXTENSION. ^WHEN
THIS IS DONE, THE CURRENT TEXT LINES ARE NOT SAVED. ^IN ADDITION,
IF THE USER HAS RETRIEVED AN OLD "^^.REL\\" FILE (WITHOUT THE
CORRESPONDING TEXT LINES) ANY SUBSEQUENT ^^SAVE\\ COMMAND WILL
AUTOMATICALLY BY-PASS SAVING TEXT LINES, AND ONLY SAVE THE
"^^.REL\\" FILE.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^SAVE MYFILL
.SKIP 1
NEW FILE, OK? NO
.SKIP 1
FILE NAME? MYFILE
.SKIP 1
OLD FILE, OK? YES
.SKIP 1
READY\\
.FILL
.PAGE
^^UNSAVE\\
.SKIP 2
.INDENT -6
^FORM:#^^UNSAVE NAME\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^UNSAVE\\ COMMAND UNSAVES ANY FILE IN THE
USER'S STORAGE AREA. ^A SINGLE ARGUMENT IS REQUIRED, SPECIFYING THE
NAME OF THE FILE TO BE UNSAVED. ^IF THE USER FAILS TO SPECIFY A
FILE NAME, ^^BBL\\ PROMPTS:
.SKIP 1
.INDENT 15
^^FILE NAME?\\
.SKIP 1
^THE USER CAN RESPOND WITH THE NAME HE CHOOSES OR A CARRIAGE RETURN
TO BY-PASS THE ^^UNSAVE\\ COMMAND AND RETURN TO "^^READY\\".
.SKIP 1
^AFTER THE ^^UNSAVE\\ COMMAND IS GIVEN, ^^BBL\\ DETERMINES IF THE
FILE BEING UNSAVED EXISTS. ^IF NON-EXISTENT, ^^BBL\\ TYPES:
.SKIP 1
.INDENT 15
^^FILE NOT FOUND\\
.SKIP 1
AND RETURNS TO "^^READY\\". ^IF THE FILE DOES EXIST, ^^BBL\\
CHECKS TO MAKE CERTAIN THAT THE USER ACTUALLY INTENDED TO UNSAVE
THE FILE WHICH IT HAS FOUND:
.SKIP 1
.INDENT 15
^^UNSAVING NAME, OK?\\
.SKIP 1
^A "^^YES\\" RESPONSE INSTRUCTS ^^BBL\\ TO CARRY OUT THE ^^UNSAVE\\
COMMAND AS GIVEN. ^A "^^NO\\" RESPONSE WILL CAUSE ^^BBL\\ TO
IGNORE THE ^^UNSAVE\\ COMMAND THAT WAS GIVEN AND RETURN
TO "^^READY\\".
.SKIP 1
^WHEN UNSAVING A FILE, ^^BBL\\ ALWAYS INTERPRETS THE COMMAND AS
A REQUEST TO UNSAVE ALL LINES SAVED UNDER THE FILE NAME GIVEN.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^UNSAVE MYPROG
.SKIP 1
UNSAVING MYPROG, OK? YES
.SKIP 1
READY\\
.FILL
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^I^V
.PAGE
.CENTER 65
^STANDARD ^^BBL\\ ^VARIABLES,
.CENTER 65
^EXPRESSIONS, AND ^STATEMENTS
.SKIP 4
.PARAGRAPH
^^BBL\\ "STATEMENTS" ARE THE BUILDING BLOCKS BY WHICH A USER CAN
DEFINE AND STRUCTURE HIS ANALYSIS. ^STATEMENTS ARE ENTERED INTO
^^BBL\\ BY TYPING A LINE NUMBER (BETWEEN 1 AND 99999) FOLLOWED
ON THE SAME LINE BY THE STATEMENT. ^THE LINE NUMBER CAN THEREFORE
BE USED TO GROUP AND SEQUENCE STATEMENTS FOR EXECUTION AS THE
USER DESIRES.
.PARAGRAPH
^EACH ^^BBL\\ STATEMENT TYPE FOLLOWS A SPECIFIC FORMAT IN TERMS
OF KEY WORDS, MATHEMATICAL EXPRESSIONS, ARRANGEMENT, ETC. ^THE
BASIC COMPONENTS OF A PARTICULAR STATEMENT, AND THE REQUIRED
ARRANGEMENT ARE EXPLAINED IN DETAIL THROUGHOUT THIS AND SUBSEQUENT
SECTIONS OF THE MANUAL.
.PARAGRAPH
^IN ORDER TO UNDERSTAND HOW STATEMENTS ARE CONSTRUCTED FOR DEFINITION
OR EXECUTION, THE USER SHOULD BE FAMILIAR WITH:
.LEFT MARGIN 10
.SKIP 1
.INDENT -2
_.#^OPERANDS - CONSTANTS AND VARIABLES
.SKIP 1
.INDENT -2
_.#^OPERATORS - MATHEMATICAL SYMBOLS FOR COMBINING OPERANDS
.SKIP 1
.INDENT -2
_.#^EXPRESSIONS - COMBINATIONS OF OPERANDS AND OPERATORS
.SKIP 1
.LEFT MARGIN 5
.PARAGRAPH
^IF THE USER HAS A WORKING KNOWLEDGE OF THESE CONCEPTS, HE MAY CHOOSE
TO SKIP THE MORE DETAILED DISCUSSION THAT FOLLOWS.
.SKIP 1
.INDENT -3
1.#^OPERANDS ARE USED TO REPRESENT A FIXED QUANTITY (CONSTANTS) OR
QUANTITIES WHICH MAY VARY IN VALUE DURING EXECUTION OF A ^^BBL\\
PROGRAM (VARIABLES). ^A ^^BBL\\ CONSTANT CAN BE EXPRESSED AS
ANY NUMBER WITH OR WITHOUT DECIMAL PLACES. ^IN ADDITION, CONSTANTS
CAN BE SUFFIXED BY A "%" TO REPRESENT A PERCENTAGE, OR SHOWN IN
"^E FORMAT" WHICH ADJUSTS THE DECIMAL
LOCATION OF THE CONSTANT. ^EXAMPLES OF CONSTANTS ARE:
.SKIP 1
.LEFT MARGIN 25
.NOFILL
100.2
12% (SAME AS .12)
_.006
8.2^E5 (SAME AS 820000)
.SKIP 1
.FILL
.LEFT MARGIN 5
^COMMAS SHOULD NOT BE INCLUDED IN CONSTANTS TO DISTINGUISH THOUSANDS
SINCE ^^BBL\\ ALWAYS INTERPRETS A COMMA AS A FIELD DELIMITER.
.SKIP 1
^^BBL\\ PERMITS THE USER TO SPECIFY VARIABLES ACCORDING TO AN 
ALLOWED SET OF NAMES. ^STANDARD ^^BBL\\ VARIABLES CAN BE WRITTEN
AS:
.SKIP 1
.LEFT MARGIN 15
.NOFILL
.INDENT -2
_.#^ANY SINGLE ALPHABETIC
CHARACTER               ^A,^B,^C,...,^Y,^Z
.SKIP 1
.INDENT -2
_.#^ANY SINGLE ALPHABETIC
CHARACTER FOLLOWED BY
A SINGLE DIGIT          ^A0,^A1,^A2,...,^Z8,^Z9
.SKIP 1
.INDENT -2
_.#^ANY SINGLE ALPHABETIC
CHARACTER FOLLOWED BY
ANY NUMBER OF
SUBSCRIPTS              ^A(1),^A(10,10),...,^Z(2,3,4)
.SKIP 1
.LEFT MARGIN 5
.FILL
^THIS THIRD TYPE OF VARIABLE IS REFERRED TO AS AN ARRAY.
(^A SINGLE SUBSCRIPTED ARRAY IS CALLED A VECTOR, AND A DOUBLE
SUBSCRIPTED ARRAY IS CALLED A MATRIX.) ^A VARIABLE WHICH IS AN
ARRAY IS ACTUALLY A GROUP OF VARIABLES. ^THE SUBSCRIPT LOCATES THE
SPECIFIC ELEMENT WITHIN THE GROUP. ^FOR EXAMPLE, ^A(1) IS POSITION
NUMBER ONE OF AN ARRAY AND ^A(10) IS THE 10TH POSITION OF THE
SAME ARRAY.
.SKIP 1
^IF THE USER MAKES USE OF A SUBCRIPTED VARIABLE, ^^BBL\\ WILL ASSUME
THAT THE MAXIMUM VALUE OF EACH SUBSCRIPT IS 10 AND WILL ALLOCATE
ENOUGH VARIABLE POSITIONS (INCLUDING A ZERO POSITION) TO SATISFY
THE ASSUMED SIZE. ^THUS REFERENCING ^A(1) CAUSES ^^BBL\\ TO SET ASIDE
11 POSITIONS (^A(0) THROUGH ^A(10)) FOR THE ARRAY CALLED "^A".
^SIMILARLY, REFERENCING ^B(5,5) CAUSES ^^BBL\\ TO SET ASIDE
121 POSITIONS (^B(0,0) THROUGH ^B(10,10)) FOR THE ARRAY CALLED
"^B". ^THE USER MAY WISH TO REDEFINE THE ALLOCATED SIZE
OF A SUBSCRIPTED VARIABLE BY USING THE ^^DIMENSION\\ STATEMENT WHICH
OVERRIDES THE ASSUMED MAXIMUM OF 10. ^ARRAY SIZES CAN THEREFORE
BE SET LARGER OR SMALLER THAN THE ASSUMED SIZE.
.SKIP 1
.INDENT -3
2.#^A SINGLE OPERATOR IS USED TO INDICATE A COMBINATION OF
OPERANDS, A TRANSFER OF VALUE BETWEEN OPERANDS (ASSIGNMENT), OR
THE LOGICAL COMPARISON OF THE VALUE OF TWO OPERANDS. ^THE FOLLOWING
FIVE SYMBOLS ARE RECOGNIZED BY ^^BBL\\ AS OPERATORS WHICH MATHEMATICALLY
COMBINE TWO QUANTITIES:
.SKIP 1
.LEFT MARGIN 15
.NOFILL
+          ADD
-          SUBTRACT
*          MULTIPLY
/          DIVIDE
_^          EXPONENTIATE
.SKIP 1
.LEFT MARGIN 5
.FILL
^EXAMPLES SHOWING TYPICAL USES OF THESE OPERATORS ARE:
.SKIP 1
.LEFT MARGIN 26
.INDENT -11
^^A+B6\\#######ADD THE VALUE OF VARIABLE ^A AND THE VALUE OF VARIABLE ^B6
.SKIP 1
.INDENT -11
^^Z(2)/10.6\\##DIVIDE THE VALUE OF THE 2ND ELEMENT OF THE ARRAY ^Z BY
10.6
.SKIP 1
.INDENT -11
^^Q(A)*50%\\###MULTIPLY THE VALUE OF THE "^ATH" ELEMENT OF THE ARRAY
^Q BY 50% (I.E. .50)
.SKIP 1
.LEFT MARGIN 5
^THE OPERATOR WHICH INDICATES A TRANSFER OF VALUE BETWEEN TWO
OPERANDS IS THE "=". ^THE VALUE OF THE QUANTITY TO THE RIGHT OF THE
"=" IS MOVED INTO THE VARIABLE TO THE LEFT OF THE "=". ^NOTE THAT
THE "=" OPERATOR REQUIRES THAT THE LEFT SIDE OPERATOR BE A VARIABLE.
^THIS TRANSFER OF VALUE IS OFTEN CALLED ASSIGNMENT. ^EXAMPLES ARE:
.SKIP 1
.LEFT MARGIN 26
.INDENT -11
^^A=12\\#######SET THE VARIABLE ^A EQUAL TO 12
.SKIP 1
.INDENT -11
^^B(2)=B(3)\\##SET THE 2ND ELEMENT OF THE ARRAY ^B EQUAL TO THE
VALUE OF THE 3RD ELEMENT OF THE SAME ARRAY
.SKIP 1
.INDENT -11
^^C(N)=50%\\###SET THE "NTH" ELEMENT OF THE ARRAY ^C EQUAL TO 
50% (I.E. .50)
.SKIP 1
.LEFT MARGIN 5
^THE THIRD CLASS OF OPERATORS ARE LOGICAL OPERATORS WHICH 
REPRESENT A COMPARISON BETWEEN TWO QUANTITIES. ^THE COMPARISON IS
GENERALLY A SIZE COMPARISON (THOUGH IN THE CASE OF STRING VARIABLES
DISCUSSED LATER IN THIS MANUAL THIS IS NOT THE CASE.) ^AN
EXAMPLE OF A SIZE COMPARISON MIGHT BE "^WHICH QUANTITY IS LARGER?",
OR "^ARE THE TWO QUANTITIES EQUAL?"  ^THE ^^BBL\\ LOGICAL OPERATORS
ARE AS FOLLOW:
.LEFT MARGIN 15
.SKIP 1
.NOFILL
=          EQUAL TO
<          LESS THAN
>          GREATER THAN
<=  =<     LESS THAN OR EQUAL TO
>=  =>     GREATER THAN OR EQUAL TO
><  <>     NOT EQUAL TO
.FILL
.SKIP 1
.LEFT MARGIN 5
(^THESE SAME LOGICAL OPERATORS CAN BE USED TO COMPARE ALPHANUMERIC
STRING VARIABLES. ^SEE THAT SECTION OF THIS MANUAL.)
.SKIP 1
^LOGICAL OPERATORS ARE DISCUSSED MORE FULLY IN CONJUNCTION WITH THE
"^^IF\\" STATEMENT REVIEWED LATER IN THIS SECTION.
.SKIP 1
.INDENT -3
3.#^COMBINATIONS OF MATHEMATICAL OPERATORS AND OPERANDS ARE CALLED
EXPRESSIONS. ^IN ANY EXPRESSION A SINGLE OPERATOR SEPARATES TWO
ADJACENT OPERANDS, BUT THE ENTIRE EXPRESSION CAN BE COMPOSED
OF SEVERAL OPERATORS AND OPERANDS:
.SKIP 1
.INDENT 25
^^A*B6/12.2\\
.SKIP 1
^IN THE EXAMPLE ABOVE, THE VALUE OF ^A IS MULTIPLIED BY THE VALUE
OF ^B6 AND THEN DIVIDED BY 12.2. ^IF THE VALUE OF ^A WERE 24.4,
AND THE VALUE OF ^B6 WERE 2.0, THEN THE EXPRESSION WOULD BE EVALUATED
AS:
.SKIP 1
.INDENT 25
24.4*2.0/12.2
.SKIP 1
.INDENT 25
44.8/12.2
.SKIP 1
.INDENT 25
4.0
.SKIP 1
^NOTICE THAT THE VALUES OF ^A AND ^B6 HAVE NOT CHANGED. ^THE EXPRESSION
HAS SIMPLY USED THE VALUES OF ^A AND ^B6, ALONG WITH SOME OPERATORS,
TO REPRESENT A TOTALLY SEPARATE QUANTITY, EQUAL IN THIS CASE TO 4.0.
^THE EXAMPLE ABOVE ALSO BEGINS TO REVEAL A SET HIERARCHY FOR EVALUATING
EXPRESSIONS. ^THE ORDER FOR EVALUATING EXPRESSIONS IS AS FOLLOWS:
.SKIP 1
.LEFT MARGIN 15
.INDENT -3
1.#^THE INNER-MOST GROUPED (PARENTHESIZED) SET OF OPERATORS AND
OPERANDS ARE EVALUATED FIRST. ^THEN THE SECOND INNER-MOST SET, ETC.
.SKIP 1
.INDENT -3
2.#^WITHIN A SET OF OPERATORS AND OPERANDS ALL EXPONENTIATION
OPERATORS ARE PERFORMED FIRST, LEFT TO RIGHT WITHIN THE GROUP.
^NEXT, MULTIPLICATION AND DIVISION OPERATORS ARE PERFORMED LEFT
TO RIGHT. ^FINALLY ADDITION AND SUBTRACTION OPERATORS ARE PERFORMED,
ALSO LEFT TO RIGHT.
.SKIP 1
.LEFT MARGIN 5
^THE EXAMPLE BELOW SHOWS WHY THESE RULES ARE HELPFUL. ^CONSIDER THE
CONSTANT EXPRESSION:
.SKIP 1
.INDENT 25
12+8/4
.SKIP 1
^THIS COULD CONCEIVABLY BE EVALUATED IN TWO DIFFERENT WAYS. ^ONE
MIGHT ADD 12 AND 8 EQUALLING 20, AND THEN DIVIDE BY 4 EQUALLING
5. ^BUT THIS DOES NOT FOLLOW THE HIERHARCHY SET FORTH FOR EVALUATING
EXPRESSIONS. ^SPECIFICALLY, DIVISIONS SHOULD BE PERFORMED PRIOR TO
ADDITIONS. ^THEREFORE, THE CORRECT WAY TO EVALUATE THE EXPRESSION
IS 8 DIVIDED BY 4 EQUALLING 2 WHICH IS THEN ADDED TO 12 EQUALLING
14.
.SKIP 1
^WHEN THERE IS NEED TO GROUP PORTIONS OF EXPRESSIONS TO CONTROL
THE ORDER OF EVALUATION, OR SIMPLIFY THE DESCRIPTION OF THE EXPRESSION,
SETS OF PARENTHESES CAN BE USED. ^SUPPOSE, IN THE ABOVE EXAMPLE,
THE USER ACTUALLY DESIRED THE ADDITION OPERATOR TO BE
PERFORMED PRIOR TO THE DIVISION OPERATOR. ^THIS CAN BE
ACCOMPLISHED BY GROUPING THE 12+8 WITHIN A SET OF PARENTHESES:
.SKIP 1
.INDENT 25
(12+8)/4
.SKIP 1
^NOW, ALL OPERATORS WITHIN THE INNER-MOST GROUP
WILL BE EVALUATED FIRST. ^IN THIS CASE (12+8) IS EVALUATED
AS 20, AND THE RESULT IS DIVIDED BY 4, EQUALLING 5.
.SKIP 1
^THIS GROUPING BY PARENTHESES (OFTEN CALLED NESTING) CAN PROCEED
TO SEVERAL LEVELS OF GROUPS WITHIN GROUPS. ^THE INNER-MOST GROUP IS
ALWAYS EVALUATED FIRST. ^BECAUSE EACH GROUPING REQUIRES BOTH A
LEFT AND RIGHT PARENTHESIS, THE TOTAL NUMBER OF LEFT AND RIGHT
PARENTHESES WITHIN AN EXPRESSION MUST BE THE SAME.
.SKIP 1
^IF THERE IS ANY DOUBT IN THE USER'S MIND AS TO THE  ORDER IN
WHICH AN EXPRESSION WILL BE EVALUATED, PARENTHESES SHOULD BE
USED TO INSURE THAT EVALUATION PROCEEDS AS DESIRED.
^OFTEN, A FEW EXTRA SETS OF PARENTHESES LEND CLARITY. ^A GOOD
RULE OF THUMB IS TO USE PARENTHESES WHEN IN DOUBT.
.SKIP 1
^THE FOLLOWING PAGES OF THIS SECTION DISCUSS SEVERAL ^^BBL\\
STATEMENTS. ^THESE ARE STATEMENTS WHICH ARE SIMILAR TO THOSE
FOUND IN THE BASIC PROGRAMMING LANGUAGE. ^THE DESCRIPTION OF THESE
STATEMENTS MAKES USE OF THE CONCEPTS OF OPERANDS, OPERATORS, AND
EXPRESSIONS.
.PAGE
.LEFT MARGIN 20
^^LET\\
.SKIP 2
.INDENT -6
^FORM:#^^[LET] VAR(EXP)=EXP\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE KEY WORD "^^LET\\" IN THE LET STATEMENT IS
OPTIONAL. ^THIS STATEMENT, WHEN EXECUTED, WILL EVALUATE THE
EXPRESSION TO THE RIGHT OF THE EQUAL SIGN, AND SET THE VARIABLE
TO THE LEFT OF THE EQUAL SIGN EQUAL TO THE RESULT. (^THE OPERAND
TO THE LEFT OF THE EQUAL SIGN MUST BE A VARIABLE.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^LET Q(2*X)=120%*V+6
.SKIP 1
LET V=(A+B)/12
.SKIP 1
A6=V*Q(2*X)\\
.FILL
.PAGE
^^PRINT\\
.SKIP 2
.INDENT -6
^FORM:#^^PRINT[(VAR[:VAR])] EXP,EXP,"ALPHA",...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE PRINT STATEMENT, WHEN EXECUTED, WRITES INFORMATION
TO THE USER'S CONSOLE OR TO A FILE IN THE USER'S STORAGE AREA.
^WHEN INFORMATION IS TYPED, EACH OUTPUT LINE IS SEPARATED INTO A
FIXED NUMBER OF OUTPUT COLUMNS (USUALLY ASSUMED TO BE FIVE COLUMNS
OF 14 SPACES EACH UNLESS RESET WITH THE "^^WIDTH\\" STATEMENT.)
.SKIP 1
^IF AN EXPRESSION IS BEING PRINTED, IT IS FIRST EVALUATED AND
THE RESULTING VALUE IS OUTPUT. ^ALPHANUMERIC PHRASES CAN BE OUTPUT
BY ENCLOSING THE PHRASE IN SINGLE OR DOUBLE QUOTES. (^NOTE: SINGLE
QUOTES CAN BE USED TO ENCLOSE DOUBLE QUOTES, AND VICE VERSA.)
.SKIP 1
^IF NO OUTPUT UNIT NUMBER IS SPECIFIED, THE OUTPUT WILL APPEAR ON
THE INPUT CONSOLE. ^AN OUTPUT UNIT NUMBER CAN BE SPECIFIED (CONSTANT
OR UNSUBSCRIPTED VARIABLE ENCLOSED IN PARENTHESES), IN WHICH CASE
OUTPUT WILL BE WRITTEN ON THE NEXT AVAILABLE RECORD OF THE FILE
ASSOCIATED WITH THAT UNIT. ^IF THE FILE IS A RANDOM ACCESS FILE,
A RECORD NUMBER (CONSTANT OR UNSUBSCRIPTED VARIABLE PRECEDED BY A
:) CAN BE GIVEN TO SPECIFY TO WHICH RECORD OUTPUT SHOULD BE
WRITTEN.
.SKIP 1
^THE END OF ANY PRINT STATEMENT WILL SIGNAL ^^BBL\\ TO BEGIN SUBSEQUENT
PRINTED OUTPUT ON A NEW LINE, UNLESS THE PRINT STATEMENT
ENDS IN A COMMA OR A SEMICOLON. ^WHEN EXECUTED, THE TWO STATEMENTS:
.SKIP 1
.INDENT 15
^^100 PRINT "LINE 100",\\
.BREAK
.INDENT 15
^^200 PRINT "LINE 200"\\
.SKIP 1
WOULD CAUSE ^^BBL\\ TO TYPE:
.SKIP 1
.NOFILL
.INDENT 15
^^LINE 100      LINE 200\\
.FILL
.SKIP 1
(^CONTINUING AN OUTPUT LINE VIA A COMMA OR A SEMICOLON CAN BE USED
FOR CONSOLE OUTPUT OR SEQUENTIAL FILE OUTPUT.
^POSITIONING OUTPUT TO A RANDOM ACCESS FILE VIA A RECORD NUMBER
ALWAYS COMPLETES ANY OUTPUT TO THE LAST RECORD AND BEGINS PRINTING
AT THE START OF THE INDICATED RECORD.)
.SKIP 1
^WHEN A PRINT STATEMENT IS EXECUTED, THE VALUES OF THE EXPRESSIONS
(OR ALPHANUMERIC PHRASES) ARE PRINTED OUT IN THE FIXED NUMBER
OF OUTPUT FIELDS. ^NORMALLY, NUMERIC VALUES WILL BE RIGHT JUSTIFIED
WITHIN THE FIELD, AND ALPHANUMERICS WILL BE LEFT JUSTIFIED WITHIN
THE FIELD WHENEVER THE FIELD IS SEPARATED FROM THE PRECEDING
FIELD WITH A COMMA. ^IF THE FIELD SEPARATOR IS A SEMICOLON, ALPHANUMERIC
OUTPUT WILL BEGIN IMMEDIATELY AFTER THE PRECEDING OUTPUT ON THE
SAME LINE. ^THE SEMICOLON ALSO CAUSES NUMERIC OUTPUT TO BEGIN
IMMEDIATELY, BUT ALL NUMERIC VALUES ARE ALWAYS PRECEDED BY A SINGLE
BLANK SPACE. ^THUS ALPHANUMERIC FIELDS CAN BE "PACKED" TOGETHER,
BUT NUMERIC FIELDS WILL ALWAYS BE SEPARATED BY AT LEAST ON SPACE.
.SKIP 1
^THE ^^BBL\\ SYSTEM PERMITS SOME SPECIAL JUSTIFICATION SYMBOLS
WHICH OVERRIDE THE NORMAL "," AND ";" CONVENTIONS. ^THESE ARE:
.SKIP 1
.LEFT MARGIN 25
.NOFILL
>    RIGHT JUSTIFY IN THE NEXT FIELD
<    LEFT JUSTIFY IN THE NEXT FIELD
><   CENTER IN THE PAGE
.SKIP 1
.LEFT MARGIN 20
.FILL
^WHEN THESE SPECIAL JUSTIFIERS PRECEDE AN EXPRESSION OR AN
ALPHANUMERIC PHRASE, THE OUTPUT IS POSITIONED ACCORDINGLY. (^IF
PAGE CENTERING RESULTS IN "OVERLAP" WITH OUTPUT FROM A PRECEDING
FIELD PRINTED ON THE SAME LINE, THE FIELD TO BE CENTERED IS PRINTED
ON THE FOLLOWING LINE.)
.SKIP 1
^THE ^^BBL\\ REPEATER SYMBOL ":" IS ALSO PERMITTED AS A MODIFIER
OF ANY EXPRESSION OR ALPHANUMERIC PHRASE. ^THE REPEATER
IS PRECEDED BY A POSITIVE CONSTANT INDICATING THE NUMBER OF TIMES
THE EXPRESSION OR PHRASE IS TO BE PRINTED. ^FOR EXAMPLE:
.SKIP 1
.INDENT 10
^^100 PRINT 3:"ABC"
.SKIP 1
WOULD RESULT IN:
.SKIP 1
.NOFILL
.INDENT 10
^^ABC           ABC           ABC\\
.FILL
.SKIP 1
^IF A PRINT STATEMENT IS USED WITHOUT ANY FIELDS, THE EXECUION
OF THE PRINT WILL RESULT IN SKIPPING ONE LINE. ^ADDITIONAL LINES
CAN BE SKIPPED BY INCLUDING ONE OR MORE "/" SYMBOLS AT THE START
OF ANY FIELD. ^A FIELD WHICH STARTS WITH A "/" NEED NOT 
INCLUDE ANY EXPRESSION IF ONLY SKIPPING IS DESIRED:
.SKIP 1
.INDENT 15
^^100 PRINT A+B,///\\
.BREAK
.INDENT 15
^^200 PRINT //A+B\\
.SKIP 1
^EXPRESSION FIELDS (NOT ALPHANUMERIC PHRASES) ARE ALSO PERMITTED
SOME SPECIAL FORMATTING OPTIONS:
.SKIP 1
.LEFT MARGIN 25
.INDENT -2
_.#^IF A "$" PRECEDES THE EXPRESSION, A "$" WILL PRECEDE THE OUTPUT.
.SKIP 1
.INDENT -2
_.#^IF A "%" FOLLOWS THE EXPRESSION, A "%" WILL FOLLOW THE OUTPUT.
.SKIP 1
.INDENT -2
_.#^IF A DECIMAL FOLLOWED BY "^X'S" IMMEDIATELY FOLLOWS THE EXPRESSION,
THE NUMBER OF "^X'S" DETERMINES THE NUMBER OF DECIMAL PLACES SHOWN.
(^NORMALLY, ^^BBL\\ SHOWS 6 SIGNIFICANT DIGITS ON ALL NUMERIC OUTPUT.)
^A "." WITH NO "^X'S" MEANS NO DECIMAL PLACES. ^THE MAXIMUM NUMBER
OF DECIMAL PLACES IS 8.
.SKIP 1
.INDENT -2
_.#^IF A "!" IMMEDIATELY PRECEDES THE EXPRESSION, THE VALUE FOR
THE EXPRESSION WILL BE PRINTED WHEN NON-ZERO. ^IF THE EXPRESSION
EQUALS ZERO, A SINGLE BLANK CHARACTER IS OUTPUT -- I.E. THE OUTPUT
IS NULLED.
.SKIP 1
.LEFT MARGIN 20
^THE GENERAL FORM FOR POSITIONING ALL THESE SPECIAL PRINT OPTIONS
FOR AN EXPRESSION IS AS FOLLOWS:
.NOFILL
.SKIP 1
^^ //   CON:   >     $     !   EXP  .XXX    %\\
.BREAK
SKIP REPEAT JUST DOLLAR NULL     DECIMAL PCT
.FILL
.SKIP 1
^THE GENERAL FORM FOR THE ORDERING OF PRINT OPTIONS WITHIN
ALPHANUMERIC FIELDS IS SIMILAR, BUT SOMEWHAT MORE SIMPLE:
.SKIP 1
.NOFILL
^^ //   CON:   >   "PHRASE"\\
.BREAK
SKIP REPEAT JUST
.FILL
.SKIP 1
^IN GENERAL SKIPS FIRST, NEXT REPEATERS, THEN JUSTIFIERS,
FOLLOWED BY $ OR %, WITH ! AND .XXX INNER-MOST.
.SKIP 1
^SINCE EXPRESSIONS CAN BE FOLLOWED WITH A %, THIS MAY BECOME
CONFUSED WITH THE ALLOWED % SUFFIX FOR CONSTANTS. (^SEE THE 
BEGINNING OF THIS SECTION.) ^TO DIFFERENTIATE PERCENTAGE CONSTANTS
FROM % FORMAT SYMBOLS, USE PARENTHESES:
.SKIP 1
.INDENT 15
^^100 PRINT (A*100%)%\\
.SKIP 1
^IF A SINGLE TRAILING PERCENT SIGN IS FOUND ON AN EXPRESSION IN
A PRINT STATEMENT, IT IS ALWAYS ASSUMED TO BE A FORMAT %.
.SKIP 1
^A SIMILAR CONFLICT CAN OCCUR WITH A SINGLE TRAILING
DECIMAL POINT:
.SKIP 1
.INDENT 15
^^100 PRINT A*100.\\
.SKIP 1
^IN THIS CASE, THE TRAILING DECIMAL IS ALSO ASSUMED TO BE A FORMAT
SYMBOL, INDICATING OUTPUT SHOULD BE SHOWN WITH NO DECIMAL PLACES.
^AS IN THE CASE OF TRAILING % SIGNS, PARENTHESES CAN BE USED TO
AVOID CONFUSION.
.SKIP 1
^FINALLY, THE USER MAY WISH TO SKIP A FIELD WITHIN AN OUTPUT LINE.
^TWO METHODS ARE PROVIDED:
.SKIP 1
.LEFT MARGIN 25
.INDENT -2
_.#^TO SKIP A FIELD USE ,"#", OR ,'#', (^THIS SKIP
IS CONSIDERED TO BE AN ALPHANUMERIC FIELD. ^A BLANK MUST APPEAR BETWEEN
THE SINGLE OR DOUBLE QUOTES.)
.SKIP 1
.INDENT -2
_.#^TO SKIP A FIELD USE ,, (^THIS SKIP IS CONSIDERED TO BE A NUMERIC
FIELD.)
.SKIP 1
.LEFT MARGIN 20
(^THE DISTINCTION BETWEEN SKIPPED NUMERIC FIELDS AND SKIPPED
ALPHANUMERIC FIELDS IS OF IMPORTANCE IN REGARDS TO THE "^^SHOW\\"
STATEMENTS EXPLAINED LATER IN THIS MANUAL.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^PRINT A,B,C
.SKIP 1
PRINT "SALES=";$S1
.SKIP 1
PRINT ///,,>"GRAND TOTAL",A(B)%
.SKIP 1
PRINT "DOLLARS AND CENTS";$A.XX
.SKIP 1
PRINT 5:"-----"
.SKIP 1
PRINT "NON-ZERO VALUES"; !ROW1.XXX\\
.FILL
.PAGE
^^READ\\
.SKIP 2
.RIGHT MARGIN 70
.INDENT -6
^FORM:#^^READ[(VAR[:VAR][,END=L1][,ERR=L2])] VAR(EXP),...\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE STANDARD FORM OF THE READ STATEMENT IS A
PARTNER OF THE ^^BBL\\ DATA STATEMENT. ^THE DATA STATEMENT SPECIFIES
NUMERIC AND ALPHANUMERIC DATA WHICH IS STORED BY ^^BBL\\ IN AN
INTERNAL DATA BLOCK IN THE ORDER IN WHICH THE DATA LINES OCCUR.
^A READ STATEMENT (WITHOUT A LOGICAL UNIT NUMBER) CAN THEN BE USED
TO RETRIEVE VALUES, ONE AT A TIME, FROM THE DATA BLOCK, AND TRANSFER
THEM INTO THE VARIABLES REFERENCED IN THE
ASSOCIATED READ STATEMENT. (^ALPHANUMERIC
DATA IS ALSO PERMITTED. ^SEE ^^BBL\\ STRING VARIABLES.)
.SKIP 1
^IF THE BLOCK OF DATA IS EXHAUSTED, AND A READ STATEMENT REQUESTS
MORE ITEMS, AN ERROR CONDITION WILL RESULT. ^THE OPTIONAL "^^END=\\"
FIELD CAN BE INCLUDED TO BRANCH TO A SPECIFIED LINE WITHIN THE
PROGRAM WHEN THIS OCCURS. ^IF NO "^^END=\\" IS SPECIFIED, THE ERROR
TERMINATES EXECUTION. ^IN ORDER TO INCLUDE AN "^^END=\\" WITHIN A
STANDARD READ STATEMENT, THE OPTIONAL PARENTHESIZED LOGICAL UNIT
NUMBER MUST BE SHOWN. ^THE LOGICAL UNIT FOR THE INTERNAL DATA BLOCK
IS UNIT NUMBER ZERO. ^THEREFORE, A READ STATEMENT TO READ FROM THE
INTERNAL DATA BLOCK AND BRANCH WHEN DATA IS EXHAUSTED MIGHT APPEAR AS:
.SKIP 1
.INDENT 15
^^100 READ(0,END=200) A,B,C\\
.SKIP 1
(^THE DATA BLOCK CAN BE RESET TO THE FIRST VALUE WITH THE
"^^RESTORE\\" STATEMENT.)
.SKIP 1
^WHEN ^^BBL\\ EXECUTES A READ STATEMENT WITH A LOGICAL UNIT NUMBER
OTHER THAN ZERO (I.E. THE CONSOLE OR A FILE), THE SEQUENCE OF
VARIABLES IN THE READ STATEMENT IS FILLED WITH VALUES (OR ALPHANUMERICS)
READ FROM THE CONSOLE OR THE CORRESPONDING FILE. ^IF A GIVEN FILE
IS EXHAUSTED OF DATA, THE SAME ERROR CONDITION EXISTS. ^THE "^^END=\\"
FIELD CAN BE USED TO RECOVER AS EXPLAINED ABOVE. ^IF A RANDOM ACCESS
FILE IS BEING READ, A RECORD NUMBER (A CONSTANT OR UNSUBSCRIPTED
VARIABLE PRECEDED BY A :) CAN BE USED TO POSITION THE FILE TO
THE PROPER RECORD FOR INPUT.
.SKIP 1
^AN ADDITIONAL FIELD IS PROVIDED FOR READING FROM A FILE.
^THE "^^ERR=\\" FIELD CAN BE USED TO BRANCH TO A SPECIFIED
LINE NUMBER IF DATA TRANSMISSION ERRORS ARE ENCOUNTERED, OR IF THE FILE
IS NON-EXISTENT OR PROTECTED. ("^^ERR=\\" FOR THE INTERNAL DATA
BLOCK HAS NO MEANING.)
.SKIP 1
^IF THE USER WISHES TO READ INFORMATION FROM THE CONSOLE, A LOGICAL
UNIT OF FIVE SHOULD BE USED. (^THE INPUT STATEMENT, WHICH ASSUMES
A LOGICAL UNIT OF FIVE, MAY BE MORE CONVENIENT.) ^WHEN A READ FROM
THE CONSOLE IS EXECUTED, ^^BBL\\ INDICATES THAT INPUT IS REQUIRED
BY TYPING A "?" TO THE CONSOLE. ^ONE OR MORE VALUES MAY BE 
ENTERED ON A SINGLE LINE OR SEVERAL LINES, WITH ^^BBL\\ CONTINUING
TO ISSUE "?'S" UNTIL SUFFICIENT VALUES HAVE BEEN SUPPLIED TO THE
VARIABLES IN THE READ. ("^^END=\\" DOES NOT APPLY TO READING FROM
THE CONSOLE.)
.SKIP 1
^ON ANY INPUT, WHETHER FROM THE CONSOLE OR A FILE, THE ^^BBL\\
REPEAT SYMBOL ":" CAN BE USED TO INDICATE THAT AN INPUT
SHOULD BE REPEATED. ^FOR EXAMPLE, THE FOLLOWING READ STATEMENT:
.SKIP 1
.INDENT 15
^^100 READ(5) A,B,C\\
.SKIP 1
COULD BE GIVEN VALUES, WHEN EXECUTED, AS FOLLOWS:
.SKIP 1
.INDENT 15
^^? 100,100,100\\
.SKIP 1
OR BY USING THE REPEATER:
.SKIP 1
.INDENT 15
^^? 3:100\\
.SKIP 1
(^DATA STATEMENTS CAN USE A SIMILAR REPEATER SYMBOL. ^SEE
THE NEXT PART OF THIS SECTION.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^READ A,B,C
.SKIP 1
READ(21,END=200,ERR=300) A,B,C
.SKIP 1
READ(21:I) A(I),B(I)
.SKIP 1
READ(M6) Q(A+B)\\
.FILL
.PAGE
^^DATA\\
.SKIP 2
.INDENT -6
^FORM:#^^DATA CON,CON,"ALPHA",...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE DATA STATEMENT SPECIFIES THE NUMERIC AND 
ALPHANUMERIC DATA WHICH IS STORED BY ^^BBL\\ IN AN INTERNAL DATA
BLOCK. ^DATA STATEMENTS CAN BE LOCATED ARBITRARILY THROUGHOUT
THE ^^BBL\\ PROGRAM, WITH ^^BBL\\ LOADING THE INTERNAL DATA BLOCK
ACCORDING TO THE LINE NUMBER SEQUENCE OF THE DATA STATEMENTS. ^ALL
DATA VALUES (NUMERIC AND ALPHANUMERIC) ARE LOADED INTO THE SAME
BLOCK, AND AS READ STATEMENTS ARE EXECUTED, SUCEEDING VALUES ARE
SUPPLIED. (^SEE ^^BBL\\ STRING VARIABLES FOR ALPHANUMERIC DATA
DESCRIPTION.)
.SKIP 1
^THE ^^BBL\\ DATA STATEMENT ALSO ALLOWS THE ^^BBL\\ REPEAT SYMBOL
":". ^A POSITIVE WHOLE NUMBER, FOLLOWED BY THE ":" CAN PRECEDE ANY
ITEM OF DATA TO INDICATE THAT THE VALUE SHOULD BE REPEATED IN THE
DATA BLOCK. ^FOR EXAMPLE:
.SKIP 1
.INDENT 15
^^100 DATA 5:20\\
.SKIP 1
WOULD BE THE SAME AS:
.SKIP 1
.INDENT 15
^^100 DATA 20,20,20,20,20\\
.SKIP 1
(^ACTUALLY, WHEN THE REPEATER SYMBOL IS USED, THE REPEATED ITEM
IS NOT STORED MULTIPLE TIMES IN THE INTERNAL DATA BLOCK. ^FOR THIS
REASON, USE OF THE REPEATER SYMBOL MAY SAVE SIGNIFICANT
SPACE AS OPPOSED TO ENTERING THE SAME
VALUE SEVERAL TIMES. ^THE REPEATER GENERALLY SAVES INTERNAL
DATA BLOCK STORAGE IF THE ITEM IS REPEATED 6 OR MORE TIMES. ^USE
OF THE REPEATER FOR LESS THAN 6 REPEATS DOES NOT, HOWEVER, WASTE
STORAGE.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^DATA 10.2%,12E10,18.6,.002
.SKIP 1
DATA 10:8%,5:10%,15:12%\\
.FILL
.PAGE
^^INPUT\\
.SKIP 2
.RIGHT MARGIN 70
.INDENT -6
^FORM:#^^INPUT[(VAR[:VAR][,END=L1][,ERR=L2])] VAR(EXP),...\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE INPUT STATEMENT IS IDENTICAL TO THE READ
STATEMENT EXCEPT A LOGICAL UNIT OF FIVE (USER'S CONSOLE) IS ASSUMED
IF NO LOGICAL UNIT NUMBER IS EXPLICITLY GIVEN. ^THEREFORE,
THE INPUT STATEMENT IS GENERALLY USED TO ENTER VALUES (OR
ALPHANUMERIC INFORMATION) FROM THE CONSOLE.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^INPUT A,B,C
.SKIP 1
INPUT(0,END=120) A,B,C
.SKIP 1
INPUT(M6:N) Q(A+B)\\
.FILL
.PAGE
^^OPEN\\
.SKIP 2
.INDENT -6
^FORM:#^^OPEN[:VAR:] "NAME" ON EXP\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE OPEN STATEMENT IS PROVIDED AS A MECHANISM
FOR DEFINING FILES FROM WITHIN A ^^BBL\\ PROGRAM. ^THE OPEN
STATEMENT ESTABLISHES A DIRECT CORRESPONDENCE BETWEEN A FILE IN THE
USER'S STORAGE AREA AND A "LOGICAL UNIT" NUMBER. ^SUBSEQUENT
PRINTS AND READS REFERENCE THE FILE BY REFERENCING ITS ASSIGNED
LOGICAL UNIT NUMBER.  ^NORMALLY, AN OPEN STATEMENT ASSIGNS
A SEQUENTIAL FILE. ^IF THE ":VAR:" FIELD IS GIVEN, A RANDOM
ACCESS FILE IS OPENED.
.SKIP 1
^SEQUENTIAL ^ACCESS ^FILES:
.BREAK
.SKIP 1
^WHEN A SEQUENTIAL ACCESS FILE OPEN STATEMENT IS EXECUTED, THE
NAMED FILE IS OPENED BY ^^BBL\\ AND ASSIGNED TO THE UNIT NUMBER
SPECIFIED BY THE EXPRESSION FOLLOWING THE KEY WORD "^^ON\\".
(^ANY FILE CURRENTLY OPEN ON THE UNIT WILL AUTOMATICALLY BE CLOSED.)
.SKIP 1
^FROM THE USER'S POINT OF VIEW, ^^BBL\\ DOES NOT DISTINGUISH
BETWEEN OPENING FOR INPUT (I.E. READING) AND OPENING FOR OUTPUT
(I.E. PRINTING). ^THE SEQUENCE OF READING AND PRINTING CONTROLS
THE INPUT/OUTPUT MODE, THE MODE BEING AUTOMATICALLY SWITCHED
BY ^^BBL\\ AS THE USER ALTERNATES PRINTING AND READING.
.SKIP 1
^NOTE: ^WHENEVER A SEQUENTIAL FILE IS OPENED, RESET FROM OUTPUT
TO INPUT, RESET FROM INPUT TO OUTPUT, OR RESTORED, ^^BBL\\ WILL
POSITION A UNIT "RECORD POINTER" TO THE FIRST RECORD (I.E. LINE)
ON THE FILE. ^ANY CONSISTENT SERIES OF READS (OR PRINTS) CAUSES THE
RECORD POINTER TO INCREMENT SEQUENTIALLY SO THAT EACH ADDITIONAL
OPERATION ACCESSES THE NEXT RECORD. (^THIS TYPE OF FILE IS THEREFORE
CALLED A SEQUENTIAL FILE.)
.SKIP 1
^SUPPOSE A USER OPENS A NEW FILE "^^MYDATA\\" WITH THE OPEN
STATEMENT:
.SKIP 1
.INDENT 15
^^100 OPEN "MYDATA" ON 20\\
.SKIP 1
^THREE RECORDS MIGHT BE WRITTEN TO THE FILE AS FOLLOWS:
.SKIP 1
.INDENT 15
^^200 PRINT(20) X,Y,Z\\
.BREAK
.INDENT 15
^^300 PRINT(20) 5:10%*X\\
.BREAK
.INDENT 15
^^400 PRINT(20) "SALES",10*Q+X\\
.SKIP 1
^THE FILE WOULD NOW BE SET TO OUTPUT MODE AND WOULD CONTAIN THREE
RECORDS. ^A READ STATEMENT WOULD CAUSE THE RECORD POINTER TO BE
RESET TO RECORD ONE, AND THE FILE WOULD BE AUTOMATICALLY CLOSED
AND OPENED FOR INPUT. (^ALL THIS IS INVISIBLE TO THE USER.)
^THUS, THE FOLLOWING READ STATEMENT WOULD ACCESS THE FIRST RECORD
ON THE FILE:
.SKIP 1
.INDENT 15
^^500 READ(20) A,B,C\\
.SKIP 1
^WHEN A READING SEQUENCE ALTERNATES TO PRINTING, OR VICE VERSA,
THE OPEN FILE IS AUTOMATICALLY CLOSED, THEN REOPENED
BY ^^BBL\\. ^SEQUENTIAL
FILES ARE ALSO CLOSED WHENEVER:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#A DIFFERENT FILE IS OPENED ON A UNIT WHICH ALREADY HAS A FILE
OPEN;
.SKIP 1
.INDENT -3
2.#A FILE IS RESTORED VIA THE RESTORE STATEMENT;
.SKIP 1
.INDENT -3
3.#OR WHEN EXECUTION IS COMPLETED AND ONE OR MORE FILES ARE OPEN.
.SKIP 1
.LEFT MARGIN 20
^THE CLOSING PROCESS AFFECTS THE NUMBER OF RECORDS PRESERVED
ON A FILE ACCORDING TO THE INPUT/OUTPUT SETTING WHEN THE FILE
IS CLOSED:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^IF SET FOR INPUT, ALL RECORDS ARE PRESERVED ON A SEQUENTIAL
ACCESS FILE.
.SKIP 1
.INDENT -3
2.#^IF SET FOR OUTPUT, ONLY THOSE RECORDS UP TO AND INCLUDING THE
LAST RECORD PRINTED ARE PRESERVED ON A SEQUENTIAL ACCESS FILE.
.SKIP 1
.LEFT MARGIN 20
^FOR EXAMPLE, A SEQUENTIAL ACCESS FILE WHICH INITIALLY CONTAINS 100
RECORDS OF DATA CAN BE OPENED FOR OUTPUT AND 50 RECORDS (STARTING WITH
RECORD NUMBER 1) CAN BE PRINTED. ^IF A READ WERE THEN EXECUTED TO
READ THE INFORMATION FROM THE FIRST RECORD, THE INPUT/OUTPUT
REVERSAL WOULD AUTOMATICALLY CLOSE THE FILE, SAVING 50 RECORDS
WHICH WOULD THEN BE AVAILABLE FOR READING WHEN REOPENED FOR THE
READ STATEMENT.
.SKIP 1
^IN GENERAL, PRINTING TO A FILE CAUSES THE SAME INFORMATION TO BE
RECORDED ON THE FILE AS WOULD BE PRINTED ON THE CONSOLE. ^THE NUMBER
OF COLUMNS ARE THE SAME, FORMATTING AND RECORD SKIPPING CONVENTIONS
ARE THE SAME, ETC. (^SEE THE PRINT STATEMENT IN THIS SECTION.) ^WHEN
A PRINT STATEMENT ATTEMPTS TO PRINT MORE INFORMATION TO ONE RECORD
OF A FILE THAN CAN BE CONTAINED ON THE LINE, EXCESS FIELDS APPEAR
ON SUBSEQUENT RECORDS. (^THE PAGE WIDTH IS SET BY THE "^^WIDTH\\"
STATEMENT, IF THE DEFAULT OF 5 COLUMNS, 14 CHARACTERS EACH IS TO
BE CHANGED.)
.SKIP 1
^SIMILARLY, READING FROM A FILE IS CONTROLED IN THE SAME WAY AS
READING FROM THE CONSOLE. ^REPEATER FIELDS APPLY, ETC. (^SEE THE
READ STATEMENT IN THIS SECTION.) ^WHEN A READ STATEMENT REQUIRES
MORE NUMERIC QUANTITIES THAN ARE AVAILABLE ON THE FIRST RECORD READ,
SUBSEQUENT RECORDS ARE READ TO SATISFY THE READ. ^NOTE: ^A READ
STATEMENT ALWAYS STARTS READING FROM A NEW RECORD ON A FILE, REGARDLESS
IF EXCESS VALUES REMAINED ON THE PREVIOUS RECORD.
.SKIP 1
^THE USER IS ALLOWED TO PRINT OR READ FROM SEQUENTIAL FILES WHICH
HAVE NOT BEEN EXPLICITLY OPENED WITH AN OPEN STATEMENT. ^^BBL\\
ASSUMES A STANDARD FILE NAME IF THIS OCCURS, AND AUTOMATICALLY
OPENS A SEQUENTIAL FILE ON THE LOGICAL UNIT SPECIFIED BY THE PRINT OR
READ WHICH FIRST REFERENCES THE FILE:
.SKIP 1
.NOFILL
^^
     UNIT          STANDARD BBL NAME
.SKIP 1
      20              BBL020.DAT
      21              BBL021.DAT
      22              BBL022.DAT
\\
.FILL
.SKIP 1
^THE ^^BBL\\ SYSTEM PERMITS USAGE OF THE FOLLOWING FIVE LOGICAL
UNIT NUMBERS:
.SKIP 1
.RIGHT MARGIN 75
.NOFILL
^^
     UNIT             DESCRIPTION
\\
.SKIP 1
       0           INTERNAL DATA BLOCK (READ ONLY)
       5           USER'S CONSOLE
      20           DISK FILE
      21           DISK FILE
      22           DISK FILE
.SKIP 1
.RIGHT MARGIN 65
.FILL
(^ALLOWED FILE NAMES FOLLOW THE SAME RULES AS PERMITTED WITHIN
THE ^^BBL\\ EDITOR. ^THE CONVENTIONS ARE EXPLAINED IN ^^BBL\\
TECHNICAL SPECIFICATIONS.)
.SKIP 1
^RANDOM ^ACCESS ^FILES:
.SKIP 1
^THE ^^BBL\\ SYSTEM ALSO ALLOWS THE USER TO SET UP
RANDOM ACCESS FILES VIA THE OPEN STATEMENT. ^ANY RECORD ON A RANDOM
ACCESS FILE CAN BE READ OR WRITTEN, NOT NECESSARILY IN SEQUENCE.
^A RANDOM ACCESS FILE IS SIGNALED BY INCLUDING AN "ASSOCIATED VARIABLE"
(ENCLOSED IN TWO COLONS) IN THE OPEN STATEMENT:
.SKIP 1
.INDENT 15
^^100 OPEN:N2: "MYDATA" ON 20\\
.SKIP 1
^THE ASSOCIATED VARIABLE PROVIDES THE USER INFORMATION ABOUT THE
RANDOM ACCESS FILE RECORD NUMBER AS FOLLOWS:
.SKIP 1
.LEFT MARGIN 25
.INDENT -2
_.#^WHEN OPENED, THE RECORD NUMBER OF THE NEXT RECORD AFTER THE
LAST RECORD ON THE FILE IS ASSIGNED TO THE ASSOCIATED VARIABLE.
^THUS, OPENING A NEW RANDOM ACCESS FILE ASSIGNS A VALUE OF 1,
WHEREAS OPENING AN EXISTING RANDOM ACCESS FILE WITH 10 RECORDS
ASSIGNS A VALUE OF 11 TO THE ASSOCIATED VARIABLE.
.SKIP 1
.INDENT -2
_.#^EACH TIME A RECORD IS WRITTEN OR READ, THE NUMBER OF THE
FOLLOWING RECORD (NEXT RECORD TO BE READ OR WRITTEN) IS ASSIGNED
TO THE ASSOCIATED VARIABLE. ^THUS THE USER CAN KEEP TRACK OF THE
"NEXT" RECORD NUMBER.
.SKIP 1
.LEFT MARGIN 20
^THE ASSOCIATED VARIABLE OF A RANDOM ACCESS FILE DOES NOT NECESSARILY
POSITION THE FILE. ^POSITIONING IS DONE BY A "RECORD NUMBER SPECIFIER"
GIVEN IN A READ, PRINT, OR ANY OTHER INPUT/OUTPUT STATEMENT.
^THE RECORD NUMBER SPECIFIER SETS THE RANDOM ACCESS FILE POSITION,
WHILE THE ASSOCIATED VARIABLE IS SET BY AN ACTUAL ACCESS
TO THE FILE. ^SINCE THE ASSOCIATED VARIABLE IS ASSIGNED THE
"NEXT" RECORD NUMBER, IT CAN BE USED AS THE RECORD NUMBER SPECIFIER
FOR A SUBSEQUENT RECORD. ^THIS CAUSES SEQUENTIAL ^^I/O\\ OF A
RANDOM ACCESS FILE:
.SKIP 1
.INDENT 15
^^200 READ(20:N2) A,B,C\\
.SKIP 1
^THE STRUCTURE OF A RANDOM ACCESS FILE IS SLIGHTLY DIFFERENT THAN
THE STRUCTURE OF A STANDARD SEQUENTIAL FILE. ^SEQUENTIAL FILES
ALLOW LINES (RECORDS) OF VARYING LENGTH. ^RANDOM ACCESS FILES ALWAYS
ASSIGN THE SAME AMOUNT OF SPACE ON A FILE (128 WORDS) FOR EACH RECORD.
^WHEN THE USER'S PROGRAM PRINTS TO A RANDOM ACCESS FILE, THE UNUSED
PORTION OF THE RANDOM ACCESS FILE BLOCK IS PADDED WITH NULL'S.
(^THEREFORE, WHEN A RANDOM ACCESS FILE IS TYPED, THESE "PADDED AREAS"
ARE NOT VISIBLE.) ^BECAUSE OF THE FIXED RECORD LENGTH, RANDOM
ACCESS INPUT/OUTPUT STATEMENTS CAN CALCULATE WHERE THE RECORD IN
QUESTION RESIDES.  ^THIS DIFFERENCE IN FILE STRUCTURE BRINGS ABOUT
THE FOLLOWING RULES:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^RANDOM ACCESS ^^I/O\\ STATEMENTS SHOULD NOT NORMALLY ACCESS
FILES WHICH WERE ORIGINALLY CREATED SEQUENTIALLY.
.SKIP 1
.INDENT -3
2.#^SEQUENTIAL ACCESS ^^I/O\\ STATEMENTS CAN ACCESS EITHER
SEQUENTIAL ACCESS FILES OR RANDOM ACCESS FILES. ^SEQUENTIAL ACCESS
PRINTING, HOWEVER, WILL DISREGARD THE RECORD PADDING OF A RANDOM
ACCESS FILE, AND SHOULD BE USED WITH CAUTION.
.SKIP 1
.LEFT MARGIN 20
^IN GENERAL, IT IS USUALLY SAFEST TO RESTRICT RANDOM ACCESS FILES
TO RANDOM ACCESS ^^I/O\\ STATEMENTS, AND SEQUENTIAL ACCESS FILES
TO SEQUENTIAL ACCESS ^^I/O\\ STATEMENTS. ^TWO COMMON EXCEPTIONS
TO THIS RULE ARE:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^A RANDOM ACCESS FILE BEING READ CAN BE POSITIONED VIA A RANDOM
ACCESS READ, AND THEN CAN BE READ SEQUENTIALLY FROM THAT POINT:
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^
100 READ(20:1) A(1),B(1),C(1)
200 FOR I=2 TO 10
300 READ(20) A(I),B(I),C(I)
400 NEXT I
\\
.SKIP 1
.FILL
.LEFT MARGIN 25
(^SEQUENTIAL ACCESS ^^I/O\\ AND RANDOM ACCESS ^^I/O\\ ARE APPROXIMATELY
THE SAME IN TERMS OF EFFICIENCY WHEN BOTH ACCESS A RANDOM ACCESS FILE,
AND THEREFORE NO ECONOMY IS GAINED WITH THIS EXAMPLE.)
.TEST PAGE 5
.SKIP 1
.INDENT -3
2.#^A RANDOM ACCESS FILE BEING PRINTED CAN HAVE A RECORD INITIATED
BY A RANDOM ACCESS PRINT, AND THE REMAINDER PRINTED VIA A SEQUENTIAL
ACCESS PRINT:
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^
100 PRINT(22:106) A;B;C;D;E;
200 PRINT(22) Q;X;P
\\
.SKIP 1
.FILL
.LEFT MARGIN 25
^NOTE THAT THE TRAILING SEMICOLON (OR COMMA) ON THE INITIAL RANDOM
ACCESS PRINT CONTINUES THE RECORD TO THE NEXT SEQUENTIAL ACCESS
PRINT. (^IF THE SECOND PRINT WERE A RANDOM ACCESS PRINT, THE RECORD
WOULD BE REINITIALIZED, AND THE FIRST INFORMATION PRINTED WOULD
BE OVER-PRINTED BY THE SECOND PRINT.)
.LEFT MARGIN 20
.SKIP 1
^REVERSING THE INPUT/OUTPUT DIRECTION OF A RANDOM ACCESS FILE DOES
NOT CLOSE AND REOPEN THE FILE. ^ALL RECORDS ARE MAINTAINED INTACT
THROUGHOUT ALL RANDOM ACCESS ^^I/O\\. ^PRINTING BEYOND THE END OF
A RANDOM ACCESS FILE CREATES INTERMEDIATE "NULL" RECORDS TO FILL
ANY RECORDS SKIPPED. ^READING BEYOND THE END OF A RANDOM ACCESS
FILE CAUSES AN ERROR CONDITION. (^THE OPTIONAL "^^END=\\" FIELD OF
THE READ AND INPUT STATEMENTS CAN BE USED TO RECOVER FROM THIS
CONDITION.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^OPEN "MYDATA" ON 20
.SKIP 1
OPEN "FILE1" ON M(I)
.SKIP 1
OPEN:Q: "OUT.DAT" ON 21
.SKIP 1
OPEN:Z2: "IN.DAT" ON 22\\
.FILL
.PAGE
^^RESTORE\\
.SKIP 2
.INDENT -6
^FORM:#^^RESTORE [EXP,EXP,...]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE RESTORE STATEMENT PERMITS THE USER TO RESET THE
RECORD POINTER FOR AN OPEN FILE TO THE FIRST RECORD, OR FOR THE
INTERNAL DATA BLOCK TO THE FIRST ITEM. ^THE EXPRESSIONS DESIGNATE
WHICH UNIT NUMBERS ARE TO BE RESTORED. (^THE CONSOLE LOGICAL
UNIT CAN NOT BE RESTORED.)
.SKIP 1
^WHEN USED WITHOUT A SPECIFIED UNIT NUMBER, OR WITH A LOGICAL UNIT
OF ZERO, THE RESTORE STATEMENT RESETS THE POINTER IN THE INTERNAL
DATA BLOCK TO THE FIRST ITEM.
.SKIP 1
^WHEN A FILE IS RESTORED, THE INPUT/OUTPUT MODE IS NOT CHANGED.
(^HOWEVER, THE FILE IS CLOSED THEN REOPENED. ^IF THE FILE IS
SEQUENTIAL, THE RECORDS WHICH ARE PRESERVED FOLLOW THE RULES EXPLAINED
UNDER THE OPEN STATEMENT IN THIS SECTION.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^RESTORE
.SKIP 1
RESTORE Z1,M(I)\\
.FILL
.PAGE
^^GO#TO / THEN\\
.SKIP 2
.INDENT -6
^FORM:#^^GO#TO L1\\
.BREAK
^^THEN L1\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE GO#TO STATEMENT (OR THEN STATEMENT) CAN BE USED
TO CONTROL THE SEQUENCE OF PROGRAM EXECUTION. ^NORMALLY, EXECUTION
PROCEEDS FROM THE LOWEST LINE-NUMBERED STATEMENTS TO THE HIGHEST 
LINE-NUMBERED STATEMENTS. ^WHEN A GO#TO STATEMENT IS EXECUTED, CONTROL
OF THE PROGRAM IS TRANSFERRED TO THE LINE NUMBER SPECIFIED IN
THE STATEMENT. ^EXECUTION PROCEEDS FROM THAT POINT IN THE NORMAL
MANNER.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^GO#TO 100
.SKIP 1
THEN 200\\
.FILL
.PAGE
^^GO#SUB\\
.SKIP 2
.INDENT -6
^FORM:#^^GO#SUB L1\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE GO#SUB STATEMENT CAN BE USED TO CONTROL THE 
SEQUENCE OF PROGRAM EXECUTION. ^NORMALLY, PROGRAM EXECUTION PROCEEDS
FROM THE LOWEST LINE-NUMBERED STATEMENTS TO THE HIGHEST LINE-NUMBERED
STATEMENTS. ^WHEN A GO#SUB STATEMENT IS EXECUTED, CONTROL OF THE
PROGRAM IS TRANSFERRED TO THE LINE NUMBER SPECIFIED. ^EXECUTION
PROCEEDS FROM THAT POINT IN THE NORMAL MANNER UNTIL A "^^RETURN\\"
STATEMENT IS ENCOUNTERED. ^AT THIS POINT CONTROL IS TRANSFERRED
BACK TO THE FIRST LINE AFTER THE GO#SUB.
.SKIP 1
^THE GROUP OF ^^BBL\\ LINES TO WHICH A GO#SUB TRANSFERS CONTROL
IS CALLED A SUBROUTINE. ^ANY BLOCK OF ^^BBL\\
STATEMENTS WHICH CAN BE EXECUTED MAY MAKE UP A SUBROUTINE.
^IN ORDER THAT THE USER'S PROGRAM PROPERLY TRANSFERS CONTROL TO
AND FROM SUBROUTINES, THE FOLLOWING POINTS ARE SUGGESTED:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^EACH SUBROUTINE SHOULD HAVE AT LEAST ONE "^^RETURN\\" STATEMENT
TO TRANSFER CONTROL BACK TO THE POINT WHERE THE SUBROUTINE WAS
CALLED.
.SKIP 1
.INDENT -3
2.#^STATEMENTS INTERNAL TO A SUBROUTINE BLOCK SHOULD NOT BE ACCESSED
BY GO#TO'S, IF'S, ON'S, OR BY ALLOWING THE NORMAL PATH OF CONTROL
TO ENTER THE SUBROUTINE FROM OUTSIDE. ^THE PROPER WAY TO ACCESS A
SUBROUTINE IS THROUGH A GO#SUB STATEMENT WHICH NORMALLY TRANSFERS
CONTROL TO THE FIRST STATEMENT OF THE SUBROUTINE.
.SKIP 1
.INDENT -3
3.#^SUBROUTINES CAN ACCESS OTHER SUBROUTINES BY USING GO#SUB
STATEMENTS WITHIN THE SUBROUTINE. ^AS SUBROUTINES CALL OTHER
SUBROUTINES, WHICH IN TURN CALL STILL LOWER-LEVEL SUBROUTINES, A
SUBROUTINE WHICH HAS ALREADY BEEN CALLED IN ORDER TO REACH A LOWER-LEVEL
ROUTINE CAN BE CALLED A SECOND TIME. (^THIS CAPABILITY IS CALLED
RECURSION.) ^RECURSION CAN BE A USEFUL FEATURE. ^HOWEVER, IT SHOULD
BE DONE CAREFULLY, IN ORDER TO INSURE THAT SUBROUTINES USED IN A
RECURSIVE MANNER CAN AVOID INFINITE LOOPING (I.E. CALLING THEMSELVES
REPEATEDLY WITH NO WAY OUT.)
.SKIP 1
.INDENT -3
4.#^CONTROL SHOULD ONLY BE TRANSFERRED OUT OF A SUBROUTINE BLOCK
VIA A RETURN (TO THE CALLING POINT) OR VIA A GO#SUB (OR FUNCTION
CALL) TO A LOWER-LEVEL ROUTINE. ^NOTE: GO#TO'S, IF'S, ON'S, ETC.
SHOULD NOT "LEAVE" A SUBROUTINE (I.E. GO OUTSIDE THE RANGE AS DEFINED
BY THE LAST RETURN OF THE SUBROUTINE.) ^THEREFORE, THE LAST STATEMENT
OF A SUBROUTINE SHOULD BE A RETURN STATEMENT.
.SKIP 1
.INDENT -3
5.#^MORE SOPHISTICATED SUBROUTINES CAN HAVE SEVERAL RETURNS FROM
WITHIN THE DEFINED BLOCK OF SUBROUTINE STATEMENTS. ^ALSO SUBROUTINES
CAN "OVERLAP" OR "SHARE" BLOCKS OF STATEMENTS. ^THIS FEATURE IS
GENERALLY THOUGHT OF AS "MULTIPLE ENTRY POINTS". ^FOR EXAMPLE:
.TEST PAGE 13
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^
100 GO#SUB 800
200 PRINT A
300 GO#SUB 850
400 PRINT A
500 STOP
     .
     .
     .
800 A=B+C
850 A=A_^2
900 RETURN
950 END
\\
.LEFT MARGIN 25
.FILL
.SKIP 1
^IN THIS EXAMPLE SUBROUTINE 800 IS THE BLOCK OF STATEMENTS FROM
800 THROUGH 900, WHILE SUBROUTINE 850 IS THE BLOCK OF STATEMENTS
FROM 850 THROUGH 900. ^NOTE THAT SUBROUTINE 850 IS A SUBSET OF
SUBROUTINE 800. ^ANOTHER WAY TO CONSIDER THE OVERLAP IS THAT
A SINGLE SUBROUTINE FROM LINE 800 THROUGH 900 HAS TWO "ENTRY
POINTS", ONE AT 800 AND ONE AT 850.
.LEFT MARGIN 20
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^GO#SUB 100
.SKIP 1
GO#SUB 99900\\
.FILL
.PAGE
^^RETURN\\
.SKIP 2
.INDENT -6
^FORM:#^^RETURN\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE RETURN STATEMENT IS USED FROM WITHIN A SUBROUTINE
OR MULTIPLE LINE FUNCTION TO RETURN CONTROL TO THE POINT WHERE THE
SUBROUTINE OR FUNCTION WAS CALLED. ^WHEN A RETURN IS EXECUTED,
CONTROL IS ALWAYS RETURNED TO THE STATEMENT AFTER THE ASSOCIATED
SUBROUTINE CALL, OR TO THE STATEMENT CONTAINING THE ASSOCIATED
FUNCTION CALL.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^RETURN\\
.FILL
.PAGE
^^IF\\
.SKIP 2
.INDENT -6
^FORM:#^^IF##EXP##LOGICAL##EXP##EXECUTEABLE\\
.BREAK
.INDENT 9
^^OPERATOR######STATEMENT\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE IF STATEMENT CAN BE USED TO CAUSE "CONDITIONAL"
EXECUTION OF ALMOST ANY ^^BBL\\ EXECUTEABLE STATEMENT. ^A COMPARISON
IS MADE BETWEEN THE TWO EVALUATED EXPRESSIONS ACCORDING TO THE 
FOLLOWING SIX LOGICAL OPERATOR SYMBOLS:
.SKIP 1
.NOFILL
.RIGHT MARGIN 75
.LEFT MARGIN 25
^^
LOGICAL OPERATOR     DESCRIPTION
.SKIP 1
     =               EQUAL
     <               LESS THAN
     >               GREATER THAN
     <=  =<          LESS THAN OR EQUAL
     >=  =>          GREATER THAN OR EQUAL
     ><  <>          NOT EQUAL
\\
.LEFT MARGIN 20
.RIGHT MARGIN 65
.FILL
.SKIP 1
^IF THE CONDITION SPECIFIED BY THE LOGICAL OPERATOR IS PASSED
(I.E. TRUE), THE STATEMENT SPECIFIED IS EXECUTED. ^IF THE CONDITION
IS NOT PASSED (I.E. FALSE), THE EXECUTEABLE STATEMENT IS BY-PASSED,
AND CONTROL IS TRANSFERRED TO THE NEXT STATEMENT IN NORMAL LINE
NUMBER SEQUENCE.
.SKIP 1
^THE ^^BBL\\ SYSTEM WILL PERMIT ALMOST ANY EXECUTEABLE ^^BBL\\
STATEMENT TO BE INCLUDED WITHIN AN IF STATEMENT:
.LEFT MARGIN 25
.SKIP 1
.NOFILL
^^
LET       OPEN      GRAPH     CREATE
READ      GO TO     SORT      DESTROY
INPUT     GO SUB    FIND      AVERAGE
PRINT     RETURN    GET       DISCOUNT
STOP      ASSUME    REMOVE    IROI
CHANGE    DISPLAY   PUT       TREND
SELECT    RESTORE   CLEAR     THEN
INSERT    CHAIN
\\
.FILL
.LEFT MARGIN 20
.SKIP 1
(^THE ^^BBL\\ LET STATEMENT, IF USED WITHIN AN IF STATEMENT, MUST
INCLUDE THE NORMALLY OPTIONAL KEY WORD "^^LET\\".)
.SKIP 1
^ALL VALUES WITHIN ^^BBL\\ ARE CARRIED AS SINGLE PRECISION,
FLOATING-POINT QUANTITIES. ^AS VALUES ARE MATHEMATICALLY COMBINED,
SOME SIGNIFICANCE MAY BE LOST DUE TO ROUNDING. ^IF THE USER
DISCOVERS ROUNDING TO BE A PROBLEM IN MAKING A COMPARISON VIA
AN IF STATEMENT, SEVERAL METHODS CAN BE USED TO COMPENSATE:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^IF WHOLE NUMBERS ARE TO BE COMPARED, AND HAVE BEEN MATHEMATICALLY
DERIVED, AN INTEGERIZATION MAY BE HELPFUL TO AVOID ROUNDING
DISCREPANCIES. ^FOR EXAMPLE:
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^
100 Y=INT(1971+A+.5)
200 X=INT(1972+B+.5)
300 IF Y=X GO TO 900
\\
.SKIP 1
.FILL
.LEFT MARGIN 25
.INDENT -3
2.#^THE USER MAY WISH TO COMPARE THE ABSOLUTE DIFFERENCE BETWEEN
THE VALUES OF
TWO EXPRESSIONS AGAINST SOME SMALL QUANTITY. ^IF THE DIFFERENCE
IS LESS THAN THE SMALL AMOUNT, THEN THE QUANTITIES WOULD BE
CONSIDERED EQUAL. ^FOR EXAMPLE, A ROUNDING DISCREPANCY MAY CAUSE
AN INCORRECT COMPARISON HERE:
.SKIP 1
.LEFT MARGIN 35
.NOFILL
^^
100 Y=A*100.26233
200 X=B*200.52466
300 IF X=Y GO TO 900
\\
.FILL
.LEFT MARGIN 25
.SKIP 1
WHILE THE SAME COMPARISON CAN BE MADE AS FOLLOWS
TO AVOID ROUNDING ERRORS:
.SKIP 1
.LEFT MARGIN 35
.NOFILL
^^
100 Y=A*100.26233
200 X=B*200.52466
300 IF ABS(X-Y)<.01 GO TO 900
\\
.FILL
.LEFT MARGIN 25
.SKIP 1
.INDENT -3
3.#^WHEN COMPARING THE VALUE OF THE INDEXING VARIABLE OF A FOR-NEXT
LOOP, A <= OR >= COMPARISON MIGHT BE CONVERTED TO A < OR > COMPARISON.
^IF A TEST WERE TO BE MADE FOR ALL VALUES OF ^I FROM 1 THROUGH
10, ONE MIGHT COMPARE ^I<10.1 (RATHER THAN ^I<=10) AS SHOWN BELOW:
.SKIP 1
.LEFT MARGIN 35
.NOFILL
^^
100 FOR I=1 TO 20 STEP .5
200 J=J+1
300 A(J)=J_^2
400 IF I<10.1 GO TO 600
500 B(J)=A(J)
600 NEXT I
\\
.FILL
.LEFT MARGIN 20
.SKIP 1
^THE THREE SUGGESTIONS ABOVE MAY BE USEFUL IF THE FLOATING-POINT
ROUNDING PROBLEM CAUSES DIFFICULTY. ^MOST OFTEN THE USER NEED NOT
CONCERN HIMSELF WITH SUCH METHODS, UNLESS ROUNDING DOES BECOME
A PROBLEM.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^IF A+B<.006 PRINT "MINIMUM=";A+B
.SKIP 1
IF A(I)<>B(I) GO SUB 800
.SKIP 1
IF I=1 OPEN "MYDATA" ON 21
.SKIP 1
IF B6>=Z9 LET B6=Z9\\
.FILL
.PAGE
^^ON\\
.SKIP 2
.INDENT -6
^FORM:#^^ON##EXP##GO#TO##L1,L2,L3,...\\
.BREAK
.INDENT 9
^^THEN\\
.BREAK
.INDENT 9
^^GO#SUB\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ON STATEMENT CAN BE USED TO CONTROL THE SEQUENCE
OF PROGRAM EXECUTION. ^WHEN EXECUTED, CONTROL IS TRANSFERRED
TO ONE OF SEVERAL LINE NUMBERS SPECIFIED. ^THE ACTUAL TRANSFER
OF CONTROL IS EITHER LIKE A GO#TO (THEN) OR A GO#SUB, DEPENDING
UPON THE SPECFIED ACTION. ^IF THE TRANSFER IS A GO#SUB, A RETURN
STATEMENT WILL RETURN CONTROL TO THE FIRST STATEMENT AFTER THE
ON STATEMENT.
.SKIP 1
^WHEN THE ON STATEMENT IS EVALUATED, THE VALUE OF THE ON EXPRESSION
IS CALCULATED, AND CONTROL IS TRANSFERRED TO ONE OF THE SPECIFIED
LINE NUMBERS DEPENDING ON THE VALUE OF THE EXPRESSION. (^THE INTEGER
PORTION OF THE EXPRESSION IS USED FOR BRANCHING. ^FOR EXAMPLE, AN
EXPRESSION WITH A VALUE OF 2.75 WOULD BE INTEGERIZED TO 2.0.)
^IF THE VALUE OF THE EXPRESSION IS 1, CONTROL IS ROUTED TO THE 
FIRST SPECIFIED LINE NUMBER. ^SIMILARLY, IF THE EXPRESSION EQUALS
2, THE SECOND LINE NUMBER IS USED, ETC. ^AS LONG AS THE VALUE OF
THE EXPRESSION LIES BETWEEN ONE AND THE NUMBER OF LINES IN THE LIST,
CONTROL IS ROUTED TO THE CORRESPONDING LINE NUMBER.
.SKIP 1
^IF THE VALUE OF THE EXPRESSION IS LESS THAN ONE, OR GREATER THAN
THE NUMBER OF LINE NUMBERS AVAILABLE (I.E. OUTSIDE THE PERMITTED
RANGE), THE STATEMENT IS SKIPPED AND THE NEXT STATEMENT IN NORMAL
LINE NUMBER SEQUENCE IS EXECUTED.
.SKIP 1
^THE ^^BBL\\ ON STATEMENT ALSO PERMITS USE OF THE ^^BBL\\ REPEATER
SYMBOL ":". ^IF A LINE NUMBER IS PRECEDED BY A POSITIVE WHOLE NUMBER
AND THE COLON, ^^BBL\\ ASSUMES THAT THE SPECIFIED LINE NUMBER SHOULD
BE REPEATED AS MANY TIMES AS INDICATED. ^FOR EXAMPLE:
.TEST PAGE 6
.SKIP 1
.INDENT 10
^^ON X GO TO 100,200,3:300,400\\
.SKIP 1
CAUSES EXECUTION SIMILAR TO:
.SKIP 1
.INDENT 10
^^ON X GO TO 100,200,300,300,300,400\\
.SKIP 1
^THE REPEATER NOTATION NOT ONLY SAVES MEMORY WITHIN THE ^^BBL\\
SYSTEM, BUT ALSO RESULTS IN MORE EFFICIENT EXECUTION, ESPECIALLY IF
THE REPEAT QUANTITY IS LARGE. ^IN ADDITION, THE REPEATER
CAPABILITY ALLOWS A USER TO STRUCTURE AN ON STATEMENT WITH FAR
MORE FLEXIBILITY. ^FOR EXAMPLE, THE ON STATEMENT SHOWN BELOW:
.SKIP 1
.RIGHT MARGIN 70
.INDENT 10
^^ON X GO TO 100:10,200:20,800:30\\
.RIGHT MARGIN 65
.SKIP 1
WILL ROUTE CONTROL TO STATEMENT 10 IF THE VALUE OF X LIES BETWEEN
1 AND 100, TO STATEMENT 20 IF THE VALUE LIES BETWEEN 101 AND 300,
AND TO STATEMENT 30 IF THE VALUE LIES BETWEEN 301 AND 1100.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^ON INT(A(I)+.5) GO TO 5:100,200,300,2:400
.SKIP 1
ON B+C GO SUB 800,8100,8200,7000,6000
.SKIP 1
ON X THEN 1000:400,1000:300,1000:200\\
.FILL
.PAGE
^^FOR\\
.SKIP 2
.INDENT -6
^FORM:#^^FOR#VAR#=#EXP#TO#EXP#[STEP=EXP][EXECUTEABLE\\
.BREAK
.INDENT 32
^^STATEMENT]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE FOR STATEMENT IS THE PARTNER OF THE ^^BBL\\
NEXT STATEMENT. ^A FOR STATEMENT AND A NEXT STATEMENT REFERENCING THE
SAME, UNSUBSCRIPTED "INDEX" VARIABLE, FORM A "FOR-NEXT LOOP".
^THE FOR STATEMENT MUST PRECEDE THE ASSOCIATED NEXT STATEMENT
ACCORDING TO LINE NUMBER SEQUENCE.
.SKIP 1
^WHEN A FOR STATEMENT IS EXECUTED, THE EXPRESSION TO THE RIGHT OF
THE EQUAL SIGN IS EVALUATED, AND THE VALUE IS TRANSFERRED TO
THE INDEX VARIABLE. ^THE "^^TO\\" EXPRESSION IS EVALUATED AND
ESTABLISHED AS THE FIXED "TERMINAL" VALUE OF THE INDEX VARIABLE.
^IF A "^^STEP\\" EXPRESSION IS SPECIFIED, IT IS EVALUATED AND
BECOMES THE STEP SIZE OF THE INDEX VARIABLE. ^IF NO STEP
EXPRESSION IS GIVEN, A STEP SIZE OF +1 IS ASSUMED.
.SKIP 1
^SUCCEEDING ^^BBL\\ STATEMENTS ARE THEN EXECUTED UNTIL THE ASSOCIATED
NEXT STATEMENT IS ENCOUNTERED. ^AT THIS POINT THE INDEX VARIABLE
IS INCREMENTED BY THE STEP SIZE, AND A TEST IS MADE TO DETERMINE
IF THE INDEX VARIABLE HAS GONE BEYOND THE TERMINAL VALUE:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^IF THE STEP SIZE IS POSITIVE, CONTROL WILL BE TRANSFERRED BACK
TO THE FIRST STATEMENT AFTER THE ASSOCIATED FOR STATEMENT UNLESS
THE INDEX VARIABLE EXCEEDS THE TERMINAL VALUE.
.SKIP 1
.INDENT -3
2.#^IF THE STEP SIZE IS NEGATIVE, CONTROL WILL BE TRANSFERRED BACK
TO THE FIRST STATEMENT AFTER THE ASSOCIATED FOR STATEMENT UNLESS
THE INDEX VARIABLE IS LESS THAN THE TERMINAL VALUE.
.SKIP 1
.LEFT MARGIN 20
^WHEN THE INDEX VARIABLE'S VALUE GOES BEYOND THE TERMINAL VALUE,
THE LOOP IS COMPLETED, AND EXECUTION WILL BE TRANSFERRED TO THE
STATEMENT IMMEDIATELY FOLLOWING THE NEXT STATEMENT. ^IN THE EXAMPLE
BELOW, THE BLOCK OF LINES BETWEEN 200 AND 400 WILL BE EXECUTED
10 TIMES, WITH THE VALUE OF ^I INCREASING BY ONE EACH TIME, AND THEN
CONTROL WILL CONTINUE ON THROUGH THE NEXT STATEMENT TO STATEMENT
600:
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^
100 FOR I=1 TO 10
200 A(I)=I
300 B(I)=A(I)*2
400 C(I)=A(I)+B(I)
500 NEXT I
600 INPUT Q
      .
      .
      .
\\
.SKIP 1
.FILL
.LEFT MARGIN 20
^IF THE INITIAL VALUE TRANSFERRED INTO THE INDEX VARIABLE BEGINS
BEYOND THE TERMINAL VALUE, NO PASSES ARE MADE THROUGH THE LOOP, AND
THE CONTROL IMMEDIATELY PASSES TO THE STATEMENT FOLLOWING THE ASSOCIATED
NEXT STATEMENT. ^IN THIS CASE THE INDEX VARIABLE WILL REMAIN
SET TO THE INITIAL VALUE OF THE FOR-NEXT LOOP.
.SKIP 1
^IF THE LOOP IS EXECUTED ONE OR MORE TIMES, AND EXECUTION PASSES
THROUGH THE NEXT STATEMENT TO THE FOLLOWING STATEMENT IN THE NORMAL
MANNER, THE INDEX VARIABLE WILL RETAIN THE VALUE IT HAD DURING
THE LAST PASS THROUGH THE LOOP.
.SKIP 1
^NOTE: ^THE INDEX VARIABLE VALUE CAN BE ALTERED WITHIN THE FOR-NEXT
LOOP IF DESIRED BY ANY STANDARD ^^BBL\\ STATEMENT WHICH CAUSES
ASSIGNMENT. ^WHEN THE ASSOCIATED NEXT STATEMENT IS ENCOUNTERED, THE
STEP SIZE IS ALWAYS ADDED TO THE CURRENT INDEX VARIABLE VALUE.
(^THE TERMINAL VALUE AND STEP SIZE ARE FIXED ONCE THE LOOP IS
INITIATED.)
.SKIP 1
^NOTE: ^IF A STEP SIZE OF ZERO IS ENCOUNTERED, AN ERROR CONDITION
RESULTS.
.SKIP 1
^NOTE: ^EXECUTION OF STATEMENTS WITHIN A FOR-NEXT LOOP SHOULD
BEGIN AT THE FOR STATEMENT. ^THEREFORE, A GO#TO, GO#SUB, IF, ETC.
EXTERNAL TO THE LOOP SHOULD ONLY TRANSFER CONTROL TO THE START OF
THE LOOP, AND NOT TO A STATEMENT INTERNAL TO THE LOOP.
.SKIP 1
^NOTE: ^NESTING OF FOR-NEXT LOOPS IS PERMITTED, BUT LOOPS CAN NOT
PARTIALLY OVERLAP, I.E. CROSS OVER SO THAT ONE LOOP BEGINS WITHIN
ANOTHER BUT ENDS OUTSIDE. ^THE FOLLOWING NEST IS PERMITTED:
.TEST PAGE 9
.SKIP 2
.NOFILL
.LEFT MARGIN 27
^^
--------100 FOR I=1 TO 20
'       200 A(I)=I
'   ----300 FOR J=1 TO 10
'   '   400 B(J)=B(J)+A(I)
'   '   450 C(J)=B(J)_^2
'   ----500 NEXT J
'       550 PRINT C(J)
--------600 NEXT I
\\
.FILL
.LEFT MARGIN 20
.SKIP 2
WHILE THE EXAMPLE BELOW IS ILLEGAL:
.TEST PAGE 9
.SKIP 2
.NOFILL
.LEFT MARGIN 27
^^
--------100 FOR I=1 TO 20
'       200 A(I)=I
'   ----300 FOR J=1 TO 10
'   '   400 B(J)=B(J)+A(I)
'   '   450 C(J)=B(J)_^2
----'---500 NEXT I
    '   550 PRINT C(J)
    ----600 NEXT J
\\
.FILL
.LEFT MARGIN 20
.SKIP 2
^THE ^IMPLIED ^NEXT:
.SKIP 1
^OFTEN FOR-NEXT LOOPS CONTAIN ONLY A SINGLE EXECUTEABLE ^^BBL\\
STATEMENT. ^^BBL\\ PROVIDES A CAPABILITY REFERRED TO AS THE
"IMPLIED NEXT" SO THAT SUCH A LOOP CAN BE SPECIFIED AS A SINGLE
STATEMENT RATHER THAN THREE. ^THE STANDARD FOR STATEMENT CAN
BE FOLLOWED ON THE SAME LINE BY ANY ONE OF THE FOLLOWING
EXECUTEABLE STATEMENTS:
.SKIP 1
.NOFILL
.LEFT MARGIN 25
^^
LET*      OPEN      GRAPH     CREATE
READ      GO TO**   SORT      DESTROY
INPUT     GO SUB**  FIND      AVERAGE
PRINT     RETURN**  GET       DISCOUNT
STOP**    ASSUME    REMOVE    IROI
CHANGE    DISPLAY   PUT       TREND
SELECT    RESTORE   CLEAR     THEN**
INSERT    CHAIN**
\\
.SKIP 1
.INDENT -2
*#^KEY WORD (NORMALLY OPTIONAL) REQUIRED.
.SKIP 1
.INDENT -3
**#^PROBABLY NOT MEANINGFUL.
.TEST PAGE 10
.SKIP 1
.FILL
.LEFT MARGIN 20
^FOR EXAMPLE, THE LOOP SHOWN BELOW:
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^
100 FOR I=1 TO 20
200 A(I)=I
300 NEXT I
\\
.LEFT MARGIN 20
.FILL
.SKIP 1
MIGHT BE MORE EASILY STATED AS:
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^
100 FOR I=1 TO 20 LET A(I)=I
\\
.LEFT MARGIN 20
.FILL
.SKIP 1
^WHEN ^^BBL\\ ENCOUNTERS A FOR STATEMENT WHICH IS CONFIGURED IN THIS
WAY, A NEXT STATEMENT IS ASSUMED TO IMMEDIATELY FOLLOW. (^THE
USER SHOULD NOT INSERT THE NEXT STATEMENT HIMSELF.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^FOR I=A+B TO Q(2) STEP 18*B
Z(I,J)=I_^2
NEXT I
.SKIP 1
FOR J=1 TO 5 PRINT A(J),B(J)\\
.FILL
.PAGE
^^NEXT\\
.SKIP 2
.INDENT -6
^FORM:#^^NEXT VAR\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE NEXT STATEMENT IS THE PARTNER OF THE FOR
STATEMENT. ^IT SHOULD ALWAYS REFERENCE A SINGLE UNSUBSCRIPTED 
VARIABLE WHICH IS ALSO REFERENCED BY THE PRECEDING PARTNER FOR
STATEMENT.
.SKIP 1
^EXECUTION OF A NEXT STATEMENT TESTS FOR TERMINATION OF A 
FOR-NEXT LOOP. (^FOR-NEXT LOOPS ARE EXPLAINED IN DETAIL UNDER
THE FOR STATEMENT IN THIS SECTION.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^NEXT I
.SKIP 1
NEXT J6\\
.FILL
.PAGE
^^DIMENSION\\
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^DIMENSION VAR(CON,CON,...),VAR(CON,CON,...),...\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE DIMENSION STATEMENT IS USED TO ASSIGN A SPECIFIC
MAXIMUM SIZE TO A ^^BBL\\ ARRAY. ^IF AN ARRAY IS USED WHICH IS NOT 
SPECIFICALLY DIMENSIONED, ^^BBL\\ ASSUMES A MAXIMUM DIMENSION OF
10 FOR EACH SUBSCRIPT. ^THE USER MAY ACTUALLY WANT TO RESERVE MORE
SPACE OR LESS SPACE IF THE ASSUMED DIMENSIONS ARE TOO SMALL OR 
TOO LARGE. (^NOTE THAT ALPHANUMERIC STRING VARIABLES CAN ALSO BE
DIMENSIONED. ^SEE ^^BBL\\ STRING VARIABLES.)
.SKIP 1
^WHEN A ^^BBL\\ PROGRAM IS RUN, STORAGE WILL BE ALLOCATED DURING
ASSEMBLY FOR EACH DIMENSIONED VARIABLE. ^THE AMOUNT OF SPACE SET
ASIDE ASSUMES SUBSCRIPTS CAN RANGE FROM ZERO TO THE MAXIMUM VALUE
AS STATED IN THE DIMENSION STATEMENT. ^FOR EXAMPLE:
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^
100 DIMENSION Q(12,12,12)
\\
.LEFT MARGIN 20
.FILL
.SKIP 1
WILL SET ASIDE STORAGE FOR ^Q(0,0,0)
THROUGH ^Q(12,12,12), I.E. 13_^3#=#2197 POSITIONS.
.SKIP 1
^NOTE THAT THE DEFINE#REPORT STATEMENT CAN ALSO SERVE TO SET ASIDE
STORAGE. ^IF AN ARRAY IS DEFINED IN THIS WAY IT SHOULD NOT ALSO BE
DIMENSIONED.
(^SEE ^ROW, ^COL, _& ^REP VARIABLES -- ^THE ^IMPLIED ^ASTERISK.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^DIMENSION A(15),B(25,10)
.SKIP 1
DIMENSION A(2,2,2,2)\\
.FILL
.PAGE
^^REMARKS\\
.SKIP 2
.INDENT -6
^FORM:#^^REMARKS [ANY ALPHANUMERIC DESCRIPTION]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE REMARKS STATEMENT IS USED TO INSERT DESCRIPTIVE
COMMENTS INTO A ^^BBL\\ PROGRAM. ^THE REMARKS STATEMENT WILL CAUSE
NO EFFECT OTHER THAN TO APPEAR IN ITS ASSIGNED SEQUENCE IN A
^^BBL\\ PROGRAM LISTING.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^REMARKS   THE FOLLOWING LINE CALCULATES CASH
.SKIP 1
REMARKS -- SUBROUTINE 100 (HEAT BALANCE)\\
.FILL
.PAGE
^^END\\
.SKIP 2
.INDENT -6
^FORM:#^^END\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE END STATEMENT SPECIFIES WHERE EXECUTION IS
TO TERMINATE WITHIN A ^^BBL\\ PROGRAM. ^WHEN AN END STATEMENT IS
EXECUTED, ALL OPEN FILES ARE CLOSED, AND EXECUTION IS HALTED. 
^CONTROL IS THEN RETURNED TO THE "^^READY\\" POINT FOR THE USER'S
NEXT EDIT INSTRUCTION OR COMMAND.
.SKIP 1
^MORE THAN ONE END STATEMENT CAN APPEAR IN A ^^BBL\\
PROGRAM SO THAT SEVERAL LOGICAL POINTS CAN TERMINATE EXECUTION.
^HOWEVER, THE LAST STATEMENT IN ANY ^^BBL\\ PROGRAM SHOULD BE AN
END STATEMENT.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^END\\
.FILL
.PAGE
^^STOP\\
.SKIP 2
.INDENT -6
^FORM:#^^STOP\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE STOP STATEMENT SPECIFIES WHERE EXECUTION IS
TO TERMINATE WITHIN A ^^BBL\\ PROGRAM. ^WHEN A STOP STATEMENT
IS EXECUTED, ALL OPEN FILES ARE CLOSED, AND EXECUTION IS HALTED.
^CONTROL IS THEN RETURNED TO THE "^^READY\\" POINT FOR THE USER'S
NEXT EDIT INSTRUCTION OR COMMAND.
.SKIP 1
^STOP STATEMENTS HAVE THE SAME EFFECT AS END STATEMENTS, EXCEPT
THAT A STOP STATEMENT CAN NOT BE USED IN PLACE OF AN END
STATEMENT AS THE LAST LINE OF A ^^BBL\\ PROGRAM.
.SKIP 1
^MORE THAN ONE STOP STATEMENT CAN APPEAR IN A ^^BBL\\ PROGRAM
SO THAT SEVERAL LOGICAL POINTS CAN TERMINATE EXECUTION.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^STOP\\
.FILL
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^V
.PAGE
.CENTER 65
^^BBL\\ ^USER-^DEFINED ^FUNCTIONS --
.CENTER 65
^THE ^^FN\\ ^CAPABILITY
.SKIP 4
.PARAGRAPH
^THE ^^BBL\\ SYSTEM PERMITS THE USER TO DEFINE A SINGLE
MATHEMATICAL EXPRESSION OR A SET OF ^^BBL\\ STATEMENTS WHICH
ACT AS A USER-DEFINED FUNCTION. ^THE EXECUTION OF A FUNCTION IS
CARRIED OUT WHENEVER THE USER'S PROGRAM REFERENCES THE CORRESPONDING
FUNCTION FROM WITHIN AN EXPRESSION. (^THIS REFERENCE IS CALLED
A FUNCTION CALL.) ^CONTROL IS THEN RETURNED TO THE EXPRESSION MAKING
THE CALL, AND ANY UPDATED VALUE FOR THE FUNCTION IS USED IN THE 
INSUING EVALUATION OF THE EXPRESSION.
.PARAGRAPH
^USER-DEFINED FUNCTIONS ARE ALWAYS NAMED WITH THE LETTERS "^^FN\\"
FOLLOWED BY ANY SINGLE LETTER. ^EXAMPLES ARE ^^FNA\\, ^^FNB\\,
^^FNQ\\, ETC.
.PARAGRAPH
^THROUGHOUT THIS SECTION WE SHALL REFER TO AN ARBITRARY FUNCTION
NAME WITH THE NAME "^^FNV\\".
.PAGE
.LEFT MARGIN 20
^^DEFINE FN\\ (SINGLE-LINE FUNCTIONS)
.SKIP 2
.INDENT -6
^FORM:#^^DEFINE FNV(VAR,VAR,...)=EXP\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE SIMPLEST FORM OF A DEFINE ^^FN\\ STATEMENT IS
THE "SINGLE-LINE" DEFINITION. ^THE KEYWORD "^^DEFINE\\" IS FOLLOWED
BY THE NAME OF THE FUNCTION BEING DEFINED. ^ONE OR MORE FUNCTION
ARGUMENTS SHOULD BE SPECIFIED, ENCLOSED IN PARENTHESES.
(^ARGUMENTS SHOULD BE ANY STANDARD, UNSUBSCRIPTED
^^BBL\\ VARIABLE. ^STRING OR LIST VARIABLES, DESCRIBED LATER IN
THIS MANUAL, ARE NOT ALLOWED.) ^FOLLOWING THE CLOSING PARENTHESIS
IS AN EQUAL SIGN AND THEN THE EXPRESSION. FOR EXAMPLE:
.SKIP 1
.INDENT 15
^^100 DEFINE FNA(X)=X+Y*X_^2\\
.SKIP 2
^CALLING ^THE ^FUNCTION:
.SKIP 1
^WHEN THE FUNCTION IS CALLED, THE SAME NUMBER OF CALLING ARGUMENTS
SHOULD BE USED. ^HOWEVER, THE CALLING ARGUMENTS MAY BE EXPRESSIONS.
^THE FUNCTION IS USED AS AN OPERAND WITHIN AN EXPRESSION TO TRIGGER
THE CALL:
.SKIP 1
.INDENT 15
^^200 A(I)=FNA(A+B)*C6\\
.SKIP 1
^WHEN THE CALL IS MADE, THE EXPRESSIONS IN THE CALLING ARGUMENT
LIST WILL BE EVALUATED, AND THE VALUES WILL BE ASSIGNED
(PASSED INTO) TO THE VARIABLES IN THE DEFINED ARGUMENT LIST. ^IN
THE EXAMPLE ABOVE, THE VALUE OF ^^A+B\\ WILL BE ASSIGNED TO THE
DEFINED ARGUMENT VARIABLE, WHICH IN THE EXAMPLE DEFINE STATEMENT
WAS ^X:
.SKIP 1
.LEFT MARGIN 35
.NOFILL
^^
100 DEFINE FNA(X)=X+Y*X_^2
               _^
               '
               '
200 A(I)=FNA(A+B)*C6
\\
.SKIP 1
.LEFT MARGIN 20
.FILL
^THE FUNCTION IS THEN EVALUATED ACCORDING TO THE DEFINED
EXPRESSION. ^IF DEFINED ARGUMENT VARIABLES APPEAR IN THE EXPRESSION,
THEIR "PASSED-IN" VALUES ARE USED FOR THE EVALUATION. ^THE EXPRESSION
VALUE IS ASSIGNED TO THE FUNCTION (IN THIS CASE ^^FNA\\), AND
THE DEFINED ARGUMENTS ARE REASSIGNED THEIR PRE-CALLING VALUES.
^CONTROL IS THEN RETURNED TO THE EXECUTING STATEMENT WHICH MADE
THE CALL, AND THE NEWLY CALCULATED FUNCTION VALUE IS USED AS AN
OPERAND IN THE EXPRESSION.
.SKIP 1
^ONE MIGHT THINK OF THE DEFINED ARGUMENTS AS VARIABLES WHICH
"TEMPORARILY" TRANSFER VALUES OF EXPRESSIONS INTO THE FUNCTION.
^IN THE EXAMPLE SHOWN ABOVE, PRIOR TO CALLING ^^FNA\\, SUPPOSE
^^A=1, B=2, C6=6, X=0, Y=10\\. ^THE FUNCTION CALL AND EXECUTION
WOULD RESULT IN:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#EVALUATION OF THE CALLING ARGUMENT (^^A+B=1+2=3\\)
.SKIP 1
.INDENT -3
2.#TRANSFER OF THE CALLING ARGUMENT VALUE (^^X=3\\)
.SKIP 1
.INDENT -3
3.#EVALUATION OF THE DEFINED EXPRESSION (^^FNA=3+10*3_^2=93\\)
.SKIP 1
.INDENT -3
4.#REASSIGNMENT OF THE ORIGINAL ARGUMENT VALUE (^^X=0\\)
.SKIP 1
.INDENT -3
5.#RETURN OF THE FUNCTION VALUE TO THE CALLING EXPRESSION AND EVALUATION
OF THE CALLING EXPRESSION (^^A(I)\\=93*6=558)
.SKIP 1
.LEFT MARGIN 20
^THIS TYPE OF FUNCTION, ONE THAT CAN BE EXPRESSED ON A SINGLE
LINE, IS CALLED A "SINGLE-LINE" FUNCTION.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^DEFINE FNQ(A,B,C)=R(J)+A*B_^C
.SKIP 1
DEFINE FNB(Z)=FNC(Z)*S9+8.0
.SKIP 1
DEFINE FNF(N2,N3)=INT(N2+N3+.5)*12.0\\
.FILL
.PAGE
^^DEFINE FN\\ (MULTI-LINE FUNCTIONS)
.SKIP 2
.INDENT -6
^FORM:#^^DEFINE FNV(VAR,VAR,...)[VAR,VAR,...]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^BBL\\ SYSTEM ALSO PERMITS "MULTI-LINE"
FUNCTIONS, FUNCTION DEFINITIONS WHICH REQUIRE SEVERAL ^^BBL\\
PROGRAM LINES FOR DEFINITION. ^THIS FORM OF THE DEFINE ^^FN\\
STATEMENT SHOULD ALWAYS BE ACCOMPANIED BY AN "^^FNEND\\"
STATEMENT WHICH DESIGNATES THE END OF THE FUNCTION DEFINITION.
.SKIP 1
^THE MULTI-LINE FUNCTION IS SIMILAR TO A SUBROUTINE IN THAT
TRANSFER OF PROGRAM CONTROL SHOULD ONLY BE MADE INTO THE FUNCTION
THROUGH THE FIRST (DEFINE) STATEMENT, AND TRANSFER OF CONTROL BACK
TO THE CALLING POINT SHOULD BE MADE VIA A RETURN STATEMENT, OR AN
FNEND STATEMENT WHICH ALSO ACTS AS A RETURN.
.SKIP 1
^THE MULTI-LINE FUNCTION DEFINITION INCLUDES THE FUNCTION
NAME, ONE OR MORE UNSUBSCRIPTED, STANDARD ^^BBL\\ VARIABLES
ENCLOSED IN LEFT AND RIGHT PARENTHESES, AND AN OPTIONAL SET OF
ONE OR MORE UNSUBSCRIPTED, STANDARD ^^BBL\\ "LOCAL" VARIABLES.
^ARGUMENT VARIABLES ACT IN THE SAME WAY AS IN THE SINGLE-LINE FUNCTION,
FOR THE TEMPORARY TRANSFER OF INFORMATION INTO A FUNCTION. ^THE
OPTIONAL LOCAL VARIABLES ARE UNIQUE TO THE MULTI-LINE FUNCTION.
^THESE VARIABLES CAN TAKE ON ANY VALUE ASSIGNED DURING EXECUTION
OF A MULTI-LINE FUNCTION, BUT WILL ALWAYS HAVE THEIR ORIGINAL
"PRE-CALL" VALUE RESTORED UPON RETURN FROM A FUNCTION.
.SKIP 1
^THIS LOCAL VARIABLE CAPABILITY ALLOWS A USER TO MAKE USE OF A
VARIABLE WITHIN A FUNCTION, YET NOT AFFECT ITS "GLOBAL" VALUE
OUTSIDE THE FUNCTION, I.E. ITS VALUE THROUGHOUT THE OTHER
PORTIONS OF THE ^^BBL\\ PROGRAM. ^LOCAL VARIABLES ARE NEVER
USED TO TRANSFER VALUES INTO OR OUT OF A FUNCTION, AND THE SAME
VARIABLE SHOULD NOT APPEAR AS BOTH AN ARGUMENT VARIABLE AND A
LOCAL VARIABLE IN THE MULTI-LINE FUNCTION DEFINITION. ^THE 
TABLE WHICH FOLLOWS RECAPS THE ACTION OF ARGUMENT VARIABLES AND
LOCAL VARIABLES:
.TEST PAGE 13
.SKIP 1
.NOFILL
.LEFT MARGIN 17
.RIGHT MARGIN 75
^^
               ARGUMENT               LOCAL
\\
.SKIP 1
WHEN       TAKES ON "PASSED-IN"  TAKES ON LAST VALUE
CALLED:    VALUE FROM CALLING    IT HAD LOCAL TO THE
           EXPRESSION.           FUNCTION, INITIALLY
                                 ZERO.
.SKIP 1
FUNCTION   CAN TAKE ON ANY       CAN TAKE ON ANY
EXECUTION: VALUE.                VALUE.
.SKIP 1
WHEN       REASSIGNED ITS        REASSIGNED ITS
RETURNS:   "PRE-CALL" VALUE.     "PRE-CALL" VALUE.
.FILL
.LEFT MARGIN 20
.RIGHT MARGIN 65
.SKIP 2
^WHEN A MULTI-LINE FUNCTION IS CALLED, EXECUTION BEGINS AT THE
FIRST STATEMENT AFTER THE DEFINE STATEMENT, AND RETURNS TO THE
CALLING EXPRESSION AT THE FIRST RETURN OR FNEND ENCOUNTERED. ^WITHIN
A BLOCK OF FUNCTION LINES, CONTROL CAN BE TRANSFERRED BY GO#TO'S,
ON'S, ETC. TO OTHER LINES WITHIN THE FUNCTION, OR BY GO#SUB'S
AND FUNCTION CALLS TO LOWER-LEVEL FUNCTIONS (I.E. MULTI-LINE ^^BBL\\
FUNCTIONS CAN REFERENCE OTHER FUNCTIONS AND THUS BE NESTED.)
.SKIP 1
^HOWEVER, GO#TO'S, ON'S, ETC. SHOULD NOT TRANSFER CONTROL
OUTSIDE THE FUNCTION BLOCK (AS DEFINED BY ITS FNEND) NOR SHOULD
EXTERNAL GO#TO'S, ON'S, ETC. TRANSFER CONTROL INTO A FUNCTION.
^UNLIKE ^^BBL\\ SUBROUTINES, ^^BBL\\ FUNCTIONS SHOULD NEVER BE
USED RECURSIVELY (I.E. CALL ROUTINES WHICH IN TURN CALL THEM
BACK.)
.SKIP 1
^AS CONTROL PROCEEDS THROUGH THE BLOCK OF LINES MAKING UP THE
FUNCTION, THE FUNCTION ITSELF CAN BE ASSIGNED AN INTERMEDIATE
VALUE OR A VALUE FOR RETURN BY ANY STANDARD ASSIGNMENT STATEMENT,
SUCH AS A STANDARD LET STATEMENT. ^THE FUNCTION NAME (WITHOUT
ARGUMENTS) IS USED AS THE VARIABLE TO WHICH THE ASSIGNMENT IS
MADE. ^IN THE CASE OF A LET STATEMENT, THE FUNCTION
NAME APPEARS AS THE OPERAND TO THE LEFT OF THE EQUAL SIGN, AS IN
STATEMENT 300 OF THE FOLLOWING MULTI-LINE DEFINITION:
.SKIP 1
.LEFT MARGIN 35
.NOFILL
^^
100 DEFINE FNA(X) Y
200 Y=Y+1
300 FNA=X+Y*X_^2
400 FNEND
\\
.FILL
.LEFT MARGIN 20
.SKIP 1
^THE FUNCTION MAY BE ASSIGNED A VALUE BY ANY OTHER ASSIGNMENT
STATEMENT SUCH AS READ, INPUT, SELECT, FOR, GET, REMOVE,
AVERAGE, ETC., AND CAN BE USED INTERMEDIATELY JUST AS ANY STANDARD
UNSUBSCRIPTED ^^BBL\\ VARIABLE. ^FOR EXAMPLE:
.SKIP 1
.LEFT MARGIN 35
.NOFILL
^^
100 DEFINE FNA(X) Y
200 Y=Y+1
300 FNA=X+Y*X_^2
400 PRINT(5) "FNA=";FNA;
450 PRINT(5) " ENTER FNA";
500 INPUT FNA
600 IF FNA<1000 RETURN
700 PRINT(5) "FNA TOO LARGE"
750 PRINT(5) "1000 ASSUMED"
800 FNA=1000
900 FNEND
\\
.FILL
.LEFT MARGIN 20
.SKIP 2
.INDENT -10
^EXAMPLES:#^^DEFINE FNQ(A,B,C) X,Y,Z
.SKIP 1
DEFINE FNB(Z)
.SKIP 1
DEFINE FNF(N2) N3\\
.FILL
.PAGE
^^FNEND\\
.SKIP 2
.INDENT -6
^FORM:#^^FNEND\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE FNEND STATEMENT SHOULD ALWAYS BE USED AS
THE LAST LINE OF A MULTI-LINE FUNCTION DEFINITION TO DESIGNATE
THE END OF THE FUNCTION DEFINITION.
.SKIP 1
^THE FNEND STATEMENT ALSO SERVES TO RETURN CONTROL TO THE CALLING
POINT, IN THE SAME WAY AS A RETURN STATEMENT.
.SKIP 1
^A FUNCTION DEFINITION MAY INCLUDE SEVERAL RETURNS, BUT ONLY
ONE FNEND STATEMENT.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^FNEND\\
.FILL
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^V^I
.PAGE
.CENTER 65
^^BBL\\ ^STRING ^VARIABLES
.SKIP 4
.PARAGRAPH
^THE ^^BBL\\ SYSTEM PERMITS STANDARD ^^BBL\\ VARIABLE
NAMES TO BE SUFFIXED WITH A "$", INDICATING A ^^BBL\\ STRING
VARIABLE. ^EXAMPLES ARE:
.SKIP 1
.INDENT 15
.NOFILL
^^A$     Z9$     V$(2)\\
.FILL
.SKIP 1
.PARAGRAPH
^IF A STRING VARIABLE IS USED AS AN ARRAY, THE ARRAY SHOULD BE
SINGLY SUBSCRIPTED. ^WHEN USED AS AN ARRAY, ELEVEN ARRAY ELEMENT
POSITIONS ARE ASSUMED (I.E. ^^VAR\\$(0) THROUGH ^^VAR\\$(10)), UNLESS THE
STRING VARIABLE IS SPECFICALLY DIMENSIONED IN A DIMENSION STATEMENT.
^FOR EXAMPLE:
.SKIP 1
.INDENT 15
^^100 DIMENSION V$(30)\\
.SKIP 1
^THIS DIMENSION STATEMENT WOULD INSTRUCT ^^BBL\\ TO ALLOCATE STORAGE
FOR 31 STRING VARIABLES NAMED ^V$(0) THROUGH ^V$(30).
.PARAGRAPH
^STRING VARIABLES ARE USED TO REPRESENT ALPHANUMERIC STRINGS OF
CHARACTERS -- ANY SEQUENCE OF LETTERS, DIGITS, SPACES, ETC. WHICH
IS TO BE REPRESENTED IN ALPHABETIC FORM. ^A STRING CONSTANT IS A SET
OF ALPHANUMERIC CHARACTERS ENCLOSED IN SINGLE OR DOUBLE QUOTES.
(^SINGLE QUOTES CAN ENCLOSE DOUBLE QUOTES, AND VICE VERSA.)
^EXAMPLES ARE:
.SKIP 1
.INDENT 15
.NOFILL
^^"ABC CORP."    '"NOW IS THE TIME"'\\
.FILL
.SKIP 1
.PARAGRAPH
^IF A STRING IS REPRESENTED AS A VARIABLE, SAY ^A$, ^^BBL\\
INITIALLY SETS IT UP AS A "NULL" STRING; THAT IS IT CONTAINS NO
CHARACTERS. ^AS THE USER MAKES USE OF THE STRING IN THE PROGRAM,
ITS LENGTH (NUMBER OF CHARACTERS) CAN GROW OR CONTRACT, AND ^^BBL\\
WILL DYNAMICALLY ALLOCATE STORAGE FOR EACH STRING AS IT GROWS OR
CONTRACTS. (^THIS ALLOCATION IS INVISIBLE TO THE USER. ^SEE ^^BBL\\
TECHNICAL SPECIFICATIONS.)  ^THE ONLY LIMIT TO A STRING'S SIZE
IS THE OVERALL AMOUNT OF MEMORY AVAILABLE TO THE ^^BBL\\ SYSTEM.
.PARAGRAPH
^THE USER CAN ALSO EXPRESS A NULL STRING CONSTANT AS "" OR ''.
^THIS SETS UP A CONSTANT STRING WITH NO CHARACTERS.
.TEST PAGE 8
.PARAGRAPH
^SEVERAL STANDARD ^^BBL\\ STATEMENTS CAN BE USED TO DEAL
WITH STRING VARIABLES AND CONSTANTS:
.SKIP 1
.NOFILL
.LEFT MARGIN 20
^^
LET            INPUT
PRINT          OPEN
READ           IF
DATA           DIMENSION
\\
.LEFT MARGIN 5
.FILL
.SKIP 1
.PARAGRAPH
^IN ADDITION THE CHANGE STATEMENT CAN BE USED TO CONVERT EACH CHARACTER
IN A STRING TO ITS ^AMERICAN ^STANDARD ^CODE (^^ASCII\\ ^CODE).
^THE ^^ASCII\\ ^CODE IS A SINGLE CODE NUMBER FOR EACH ALLOWED
CHARACTER (0 THROUGH 127), AND IS LISTED UNDER "^^ASCII\\ ^CODES"
IN THIS MANUAL.
.PAGE
.LEFT MARGIN 20
^^LET\\ (STRING VARIABLE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^[LET] VAR$(EXP)="ALPHANUMERICS"\\
.BREAK
.INDENT 19
^^VAR$(EXP)\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE LET STATEMENT CAN BE USED TO ASSIGN A STRING OF
CONSTANT OR VARIABLE CHARACTERS TO A GIVEN STRING VARIABLE ON THE
LEFT SIDE OF THE EQUAL SIGN. ^SINCE NO ARITHMETIC OPERATIONS ARE
ALLOWED ON STRING VARIABLES, ONLY A SINGLE STRING CONSTANT OR
VARIABLE CAN APPEAR TO THE RIGHT SIDE OF THE EQUAL SIGN.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^LET A$="MYFILE"
.SKIP 1
A$(1)=B$(1)
.SKIP 1
A$(A+B)=B$(I)\\
.FILL
.PAGE
^^PRINT\\ (STRING VARIABLE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^PRINT[(VAR[:VAR])] "ALPHA",VAR$(EXP),...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^BBL\\ PRINT STATEMENT WILL PRINT EITHER
STRING CONSTANTS (AS DISCUSSED IN ^SECTION ^I^V) OR STRING VARIABLES
TO THE CONSOLE OR FILE. ^ANY COMBINATION OF STRING VARIABLES AND
STANDARD ^^BBL\\ EXPRESSION MAY BE USED IN THE
SAME PRINT STATEMENT.
.SKIP 1
^ANY STANDARD ^^BBL\\ PRINT STATEMENT OPTION (EXCEPT $, !, %, .XXX) MAY BE SPECIFIED FOR A STRING FIELD WITHIN
THE PRINT STATEMENT. ^THESE OPTIONS INCLUDE /, :, >, <, ><.
(^SEE ^SECTION ^I^V FOR A COMPLETE DESCRIPTION.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^PRINT A$(I),B,C
.SKIP 1
PRINT "SALES FOR PRODUCT ";P6$;" = ";S6
.SKIP 1
PRINT ///>A$(A+B),V(B)
.SKIP 1
PRINT 4:"-----",/B$(1),B$(2),B$(3),B(4)\\
.FILL
.PAGE
^^READ\\ (STRING VARIABLE FORM)
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^READ[(VAR[:VAR][,END=L1][,ERR=L2])] VAR$(EXP),...\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^STRINGS MAY BE ASSIGNED TO STRING VARIABLES VIA
THE READ STATEMENT WITH VALUES SUPPLIED FROM THE INTERNAL DATA
BLOCK, CONSOLE, OR DISK FILES. ^THE READ STATEMENT MAY
INTERMIX STRING VARIABLES AND STANDARD ^^BBL\\ VARIABLES,
BUT THE USER SHOULD TAKE INTO ACCOUNT THE SEQUENCE IN WHICH NUMERIC
DATA AND ALPHANUMERIC DATA IS STORED IN THE DATA BLOCK (OR ON
THE FILE). 
.SKIP 1
^STRING DATA READ FROM THE INTERNAL DATA BLOCK SHOULD BE ENTERED INTO
THE DATA BLOCK (WITH OR WITHOUT QUOTES) ACCORDING TO THE CONVENTIONS
DISCUSSED UNDER THE DATA STATEMENT IN THIS SECTION.
^IF STRING DATA IS BEING
READ FROM THE CONSOLE OR FILE, QUOTES ARE ONLY REQUIRED WHEN THE 
USER WISHES TO EMBED A COMMA (NORMALLY A DELIMITER),
OR LEADING/TRAILING BLANKS. ^REPEATER FIELDS (":") ARE PERMITTED
ON CONSOLE OR FILE INPUT, AS WELL AS WHEN ENTERING
STRING DATA INTO THE INTERNAL DATA BLOCK. ^NOTE THAT CONSOLE OR
FILE INPUT OF STRING INFORMATION WHICH IS NOT ENCLOSED IN QUOTES CAN
BE DELIMITED WITH A COMMA OR CARRIAGE RETURN.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^READ(21,END=100,ERR=200) A$(I),B$(A+B)
.SKIP 1
READ(0,END=100) A,B,A$,B$
.SKIP 1
READ A$,B$,C7$\\
.FILL
.PAGE
^^DATA\\ (STRING VARIABLE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^DATA "ALPHANUMERICS","ALPHANUMERICS",...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^STRING CONSTANTS MAY BE INCLUDED IN THE
INTERNAL DATA BLOCK VIA THE DATA STATEMENT. ^THE STRING CONSTANT
WILL BE INCLUDED IN THE SAME DATA BLOCK AS NUMERIC DATA, AND THE
SAME DATA STATEMENT CAN BE USED TO SPECIFY BOTH TYPES OF DATA.
.SKIP 1
^UNLIKE OTHER STRING STATEMENTS, THE DATA STATEMENT CAN SPECIFY
STRING CONSTANTS WITH OR WITHOUT QUOTES. ^IF THE STRING VARIABLE
STARTS WITH A NUMERIC CHARACTER (FOR EXAMPLE "71 ^^MAIN STREET\\"),
COULD BE INTERPRETED AS A NUMERIC VALUE (FOR EXAMPLE "+1"), OR
CONTAINS LEADING, EMBEDDED, OR TRAILING BLANKS
OR COMMAS (FOR EXAMPLE "^^DOE, JOHN\\"), THEN SINGLE OR DOUBLE QUOTES
SHOULD BE USED.
.SKIP 1
^THE ^^BBL\\ ":" REPEAT FIELD IS ALSO PERMITTED TO INDICATE A 
REPEATED STRING CONSTANT.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^DATA ABC,"ABC,INC.",1,2,3
.SKIP 1
DATA "THIS LEAVES A SPACE   IN THE MIDDLE"
.SKIP 1
DATA 5:"ABCEDEFGHIJKLMNOP",'ZERO'\\
.FILL
.PAGE
^^INPUT\\ (STRING VARIABLE FORM)
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^INPUT[(VAR[:VAR][,END=L1][,ERR=L2])] VAR$(EXP),...\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^BBL\\ INPUT STATEMENT CAN BE USED TO READ
STRING DATA FROM THE CONSOLE (IF NO LOGICAL UNIT IS SPECIFIED)
OR FROM A FILE OR THE INTERNAL DATA BLOCK. ^THE INPUT STATEMENT
MAY INTERMIX STRING VARIABLES AND STANDARD VARIABLES, BUT THE
USER SHOULD TAKE INTO ACCOUNT THE SEQUENCE IN WHICH NUMERIC AND
ALPHANUMERIC DATA IS STORED IN THE INTERNAL DATA BLOCK,
OR APPEARS ON THE FILE.
.SKIP 1
^QUOTING CONVENTIONS AND REPEATER DATA FIELDS ARE THE SAME AS
DETAILED UNDER THE READ AND DATA STATEMENTS IN THIS SECTION.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^INPUT A$,B$,C$
.SKIP 1
INPUT(21,END=100,ERR=200) A$(I),B$(I)
.SKIP 1
INPUT(0,END=100) A,B,A$,B$\\
.FILL
.PAGE
^^OPEN\\ (STRING VARIABLE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^OPEN[:N:]##"NAME"###ON##EXP\\
.BREAK
.INDENT 10
^^VAR$(EXP)\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^BBL\\ OPEN STATEMENT PERMITS EITHER
A STRING CONSTANT, OR A STRING VARIABLE TO SPECIFY THE NAME
OF THE SEQUENTIAL OR RANDOM ACCESS FILE BEING OPENED.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^OPEN A$(I) ON 20
.SKIP 1
OPEN:N5: A6$ ON M(I)\\
.FILL
.PAGE
^^IF\\ (STRING VARIABLE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^IF##"ALPHA"###LOGICAL####"ALPHA"##EXECUTEABLE\\
.BREAK
.INDENT 3
^^VAR$(EXP)##OPERATOR##VAR$(EXP)##STATEMENT\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE STANDARD ^^BBL\\ IF STATEMENT CAN BE USED TO 
COMPARE ANY TWO STRING VARIABLES AND/OR CONSTANTS.
.SKIP 1
^THIS FORM OF THE IF STATEMENT, WHEN EXECUTED, WILL COMPARE EACH
CHARACTER IN THE TWO SPECIFIED STRINGS (STARTING AT THE FIRST OR
LEFT-MOST CHARACTER) UNTIL THE LOGICAL OPERATOR
IS SATISFIED. ^THE SAME SIX LOGICAL OPERATORS ARE PERMITTED,
AND RELATE TO THE ALPHABETIC ORDER OF THE STRINGS BEING COMPARED
(OR ^^ASCII\\ ^CODE IF NON-ALPHABETIC). ^FOR EXAMPLE "LESS THAN" (<)
MEANS NEARER THE BEGINNING OF THE ALPHABET, AND "GREATER THAN" (>)
MEANS NEARER THE END OF THE ALPHABET.
.SKIP 1
^TWO RULES ARE FOLLOWED:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^COMPARE THE STRINGS CHARACTER FOR CHARACTER UNTIL A LOGICAL
CONDITION HAS BEEN DETERMINED.
.SKIP 1
.INDENT -3
2.#^WHEN COMPARING TWO STRINGS OF UNEQUAL LENGTH, THE SHORTER
STRING IS ASSUMED TO CONTAIN ENOUGH TRAILING BLANKS TO BE EQUAL IN
LENGTH TO THE LONGER STRING.
.SKIP 1
.LEFT MARGIN 20
.TEST PAGE 24
^THE SIX LOGICAL OPERATORS WILL BE CONSIDERED TO BE TRUE IF:
.RIGHT MARGIN 75
.SKIP 1
.NOFILL
^^
     OPERATOR         TRUE CONDITION
\\
.SKIP 1
       =       LEFT $ HAS IDENTICAL CHARACTERS
               TO RIGHT $
.SKIP 1
       <       FIRST DIFFERENT CHAR (FROM LEFT)
               IS LOWER IN LEFT $ THAN RIGHT $
.SKIP 1
       >       FIRST DIFFERENT CHAR (FROM LEFT)
               IS HIGHER IN LEFT $ THAN RIGHT $
.SKIP 1
       <= =<   LEFT $ IDENTICAL TO RIGHT $ OR
               FIRST DIFFERENT CHAR IS LOWER IN
               LEFT $ THAN RIGHT $
.SKIP 1
       >= =>   LEFT $ IDENTICAL TO RIGHT $ OR
               FIRST DIFFERENT CHAR IS HIGHER IN
               LEFT $ THAN RIGHT $
.SKIP 1
       >< <>   AT LEAST ONE CHAR IN LEFT $ IS
               DIFFERENT FROM CHAR IN RIGHT $
.RIGHT MARGIN 65
.SKIP 1
.FILL
(^NOTE: ^COMPARISONS ARE ACTUALLY MADE ON THE ^^ASCII\\ ^CODE
FOR EACH CHARACTER. ^SEE ^^ASCII\\ ^CODES IN THIS MANUAL.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^IF A$>B$ GO TO 100
.SKIP 1
IF A$="YES" PRINT "MINIMUM=";A+B
.SKIP 1
IF B$(I) <> "NO" LET B$(I)="NO"
.SKIP 1
IF S3$="STOP" STOP\\
.FILL
.PAGE
^^DIMENSION\\ (STRING VARIABLE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^DIMENSION VAR$(CON),VAR$(CON),...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE STANDARD ^^BBL\\ DIMENSION STATEMENT CAN
BE USED TO EXPLICITLY DIMENSION ANY STRING VARIABLE.  ^THE SAME
DIMENSION STATEMENT CAN BE USED TO DIMENSION BOTH STRING AND
STANDARD ^^BBL\\ VARIABLES. ^NOTE, HOWEVER, THAT UNLIKE STANDARD
VARIABLES, STRING VARIABLES CAN ONLY HAVE A SINGLE SUBSCRIPT.
.SKIP 1
^IF A SINGLY SUBSCRIPTED STRING VARIABLE IS REFERENCED BY A ^^BBL\\
PROGRAM AND IS NOT EXPLICITLY DIMENSIONED IN A DIMENSION STATEMENT,
^^BBL\\ ASSUMES THAT THE STRING VARIABLE HAS 11 MEMBERS IN THE FAMILY
(I.E. VAR$(0) THROUGH VAR$(10)) AND SETS ASIDE STORAGE ACCORDINGLY.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^DIMENSION A$(20),B$(2)
.SKIP 1
DIMENSION A(1,2,3),C$(66)\\
.FILL
.PAGE
^^CHANGE\\
.SKIP 2
.INDENT -6
^FORM:#^^CHANGE VAR$(EXP) TO VAR[(*)]\\
.BREAK
.INDENT 17
OR
.BREAK
^^CHANGE VAR[(*)]##TO#VAR$(EXP)\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE CHANGE STATEMENT IS A SPECIAL STRING MANIPULATION
STATEMENT FOR CONVERTING THE INDIVIDUAL CHARACTERS IN A STRING TO
THEIR EQUIVALENT ^^ASCII\\ ^CODES OR VICE VERSA. (^SEE THE
^^ASCII\\ ^CODE TABLE IN THIS MANUAL.) ^THE CONVERSION TAKES
PLACE BETWEEN A STRING VARIABLE AND ANY SINGLY SUBSCRIPTED STANDARD
^^BBL\\ ARRAY, CALLED THE "CODE" ARRAY. (^NOTE THAT THE CODE ARRAY
CAN BE SPECIFIED WITH OR WITHOUT AN OPTIONAL (*) SUBSCRIPT.
^THE (*) DOES NOT CHANGE THE MEANING OF THE STATEMENT, AND IS
ALLOWED FOR CLARITY AND CONSISTENCY WITH THE GENERAL
* SUBSCRIPT CAPABILITY OF ^^BBL\\ EXPLAINED UNDER ASTERISK
SUBSCRIPTING.)
.SKIP 1
^IF THE CONVERSION IS OF THE FORM:
.SKIP 1
.INDENT 15
^^100 CHANGE A$ TO B(*)\\
.SKIP 1
^EACH CHARACTER IN THE STRING IS TRANSLATED
INTO AN ^^ASCII\\ ^CODE WHICH IS THEN ASSIGNED TO THE
CORRESPONDING POSITION IN THE CODE ARRAY. ^THE TOTAL NUMBER OF
CHARACTERS IN THE STRING IS COUNTED, AND IS ASSIGNED TO THE (0)
POSITION OF THE CODE ARRAY. ^THEREFORE, THE CODE ARRAY MUST BE 
DIMENSIONED LARGE ENOUGH TO ALLOW ONE POSITION FOR EACH CHARACTER IN
ADDITION TO THE ZERO POSTION OF THE ARRAY.
.SKIP 1
^THE REVERSE FORM:
.SKIP 1
.INDENT 15
^^200 CHANGE B(*) TO A$\\
.SKIP 1
CONVERTS THE ^^ASCII\\ ^CODES FOUND IN THE CODE ARRAY INTO CHARACTERS,
AND ASSIGNS THESE CHARACTERS TO THE STRING VARIABLE. ^THIS FORM
OF THE CHANGE STATEMENT WILL CONVERT AS MANY
CODES FROM THE CODE ARRAY AS ARE INDICATED BY THE (0) POSITION OF
THE CODE ARRAY. ^THEREFORE, ALL OR A PORTION OF THE CODES
HELD IN THE CODE ARRAY CAN BE CONVERTED. ^MOREOVER, THE CODE ARRAY
SHOULD BE AT LEAST AS LARGE AS THE NUMBER OF CODES INDICATED BY
THE (0) POSITION OF THE ARRAY. (^A NEGATIVE OR ZERO NUMBER IN THE
ZERO POSITON OF THE CODE ARRAY CAUSES EXECUTION OF THIS FROM OF
THE CHANGE STATEMENT TO NULL THE INDICATED STRING VARIABLE.)
.SKIP 1
^DURING CONVERSION FROM A CODE ARRAY TO A STRING VARIABLE, ANY CODE
VALUES LESS THAN 0 (NULL), OR
GREATER THAN 127 (A RUBOUT), ARE DISCARDED. ^IN THIS WAY, ELEMENTS
IN THE CODE ARRAY CAN BE "IGNORED" WHEN CONVERTED TO THE STRING
VARIABLE.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^CHANGE B$(I) TO A(*)
.SKIP 1
CHANGE A TO C6$\\
.FILL
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^V^I^I
.PAGE
.CENTER 65
^^BBL\\ ^SPECIAL ^DATA
.CENTER 65
AND THE
.CENTER 65
^SELECT ^STATEMENT
.SKIP 4
.PARAGRAPH
^THE ^^BBL\\ SYSTEM PERMITS THE USER TO SPECIFY DATA IN SEVERAL
DIFFERENT FORMS OTHER THAN THE STANDARD "SEQUENTIAL" SERIES OF
NUMERIC AND ALPHANUMERIC CONSTANTS DESIGNATED BY THE STANDARD
^^BBL\\ DATA STATEMENT.
.PARAGRAPH
^EACH SPECIAL FORM OR "DATA TYPE" IS SPECIFIED BY A UNIQUE ^^BBL\\
STATEMENT WHICH BEGINS WITH A KEY WORD INDICATING THE TYPE OF 
DATA BEING SPECIFIED. ^EACH OF THE SPECIAL DATA STATEMENTS ASSOCIATES
ONE OR MORE ITEMS OF DATA WITH A SINGLE STANDARD ^^BBL\\ VARIABLE,
ALSO SPECIFIED IN THE STATEMENT.
.PARAGRAPH
^THE SPECIAL DATA COUNTERPART OF THE READ STATEMENT IS THE SELECT
STATEMENT, WHICH IS USED TO SELECT NEW VALUES FROM THE SPECIAL
DATA ASSOCIATED WITH A VARIABLE. ^THE SELECTED VALUE IS THEN ASSIGNED
TO THE VARIABLE.
.PARAGRAPH
^NINE ^^BBL\\ SPECIAL DATA STATEMENTS AND THE SELECT STATEMENT
ARE DISCUSSED IN THIS SECTION:
.SKIP 1
.LEFT MARGIN 15
.NOFILL
^^
STEP [DATA]           NORMAL [DATA]
SMOOTH [DATA]         LOGNORMAL [DATA]
DISCRETE [DATA]       POISSON [DATA]
CONTINUOUS [DATA]     EXPONENTIAL [DATA]
FIXED [DATA]          SELECT
\\
.FILL
.LEFT MARGIN 5
.PARAGRAPH
^THROUGHOUT THIS SECTION OF THE MANUAL, SPECIAL DATA STATEMENT
FORMS ARE SHOWN WITHOUT THE OPTIONAL WORD "^^DATA\\" IN ORDER
TO CONSERVE SPACE.
.PARAGRAPH
^SEVERAL OF THE SPECIAL DATA TYPES MAKE USE OF AN INTERNAL
RANDOM NUMBER GENERATOR WITHIN THE ^^BBL\\ SYSTEM. ^THE USER CAN
ACCESS OR MODIFY THE RANDOM NUMBER SEED ASSOCIATED WITH THE
INTERNAL RANDOM NUMBER GENERATOR BY REFERENCING THE ^^BBL\\
VARIABLE:
.SKIP 1
.INDENT 25
^^SEED\\
.SKIP 1
^THIS VARIABLE CAN BE USED JUST AS ANY STANDARD ^^BBL\\ VARIABLE.
^IT WILL NOT CONTAIN THE VALUE SAMPLED FOR A RANDOM NUMBER, BUT WILL
CONTAIN THE NEXT ARGUMENT TO BE PASSED TO THE RANDOM NUMBER GENERATOR
IN ORDER TO GENERATE A RANDOM NUMBER. (^A RANDOM NUMBER CAN BE
GENERATED WITHIN THE USER'S ^^BBL\\ PROGRAM WITH THE INTERNAL
^^BBL\\ FUNCTIONS ^^RND\\ OR ^^RNM\\. ^SEE INTERNAL ^^BBL\\
FUNCTIONS.)
.PAGE
.LEFT MARGIN 20
^^STEP DATA\\
.SKIP 2
.RIGHT MARGIN 80
.INDENT -6
^FORM:#^^STEP#VAR(CON,...)#AS#CON,...#[WITH#CON,...]#ON#EXP\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE STEP DATA STATEMENT CAN BE USED TO SPECIFY A 
STEP CURVE SET OF DATA. ^A SINGLE STEP VARIABLE IS PERMITTED AFTER
THE KEYWORD "^^STEP\\", AND, IF SUBSCRIPTED, ONLY CONSTANT SUBSCRIPTS
CAN BE USED.
.SKIP 1
^WHEN THE SELECT STATEMENT RETRIEVES A VALUE FOR THE STEP VARIABLE,
THE VALUE IS FOUND BY FIRST EVALUATING THE "^^ON\\" EXPRESSION,
AND THEN USING THE INTEGER PART (I.E. TRUNCATING ANY FRACTION) TO
FIND THE CORRESPONDING CONSTANT IN THE FIRST SERIES OF CONSTANTS.
^IF THE VALUE OF THE EXPRESSION EXCEEDS THE TOTAL NUMBER OF VALUES
IN THE SERIES, THE LAST CONSTANT IS ASSUMED. ^ON THE OTHER HAND,
IF THE EVALUATED EXPRESSION IS LESS THAN ONE, THE FIRST
CONSTANT IN THE SERIES IS ASSUMED.
.SKIP 1
^THE SECOND SERIES OF CONSTANTS IS OPTIONAL, AND SHOULD BE
SEPARATED FROM THE FIRST SERIES BY THE WORD "^^WITH\\". ^WHEN THE SECOND
SERIES IS PROVIDED, THE VALUE OF THE EXPRESSION IS COMPARED AGAINST
THE RELATIVE POSITION IN THE SECOND SERIES. ^ALL VALUES IN THE
"^^WITH\\" SERIES SHOULD BE SPECIFIED IN ASCENDING SEQUENCE, AND
THE VALUE OF THE EXPRESSION WILL THEREFORE LIE BETWEEN TWO OF THE
VALUES. (^AN EQUAL NUMBER OF VALUES SHOULD BE SPECIFIED IN BOTH
SERIES.) ^IF THE VALUE OF THE EXPRESSION LIES BETWEEN THE FIRST AND
SECOND "^^WITH\\" CONSTANTS, THE FIRST VALUE FROM THE "^^AS\\" SERIES IS
RETRIEVED. ^IF THE VALUE OF THE EXPRESSION LIES BETWEEN THE SECOND
AND THIRD "^^WITH\\" CONSTANTS, THE SECOND VALUE FROM THE "^^AS\\"
SERIES IS RETRIEVED, AND SO FORTH. (^AS IS THE CASE
WITHOUT THE "^^WITH\\" SERIES OF CONSTANTS, AN EXPRESSION VALUE
BELOW THE FIRST "^^WITH\\" CONSTANT RETRIEVES THE FIRST VALUE FROM
THE "^^AS\\" SERIES, AND AN EXPRESSION VALUE ABOVE THE LAST
"^^WITH\\" CONSTANT RETRIEVES THE LAST VALUE FROM THE "^^AS\\"
SERIES.)
.SKIP 1
^THE "^^WITH\\" SERIES OF CONSTANTS PERMITS THE USER TO SPECIFY
STEP CURVES WITH STEP WIDTHS OTHER THAN 1.0 AND STEP CURVES WITH
UNEQUAL STEP WIDTHS. ^THE "^^WITH\\" SERIES CAN BE PICTURED
AS THE XAXIS OF A STEP CURVE. FOR EXAMPLE:
.SKIP 1
^^10 STEP D6 AS 10,20,30 WITH 100,200,400 ON X1\\
.SKIP 1
WOULD ESTABLISH THE FOLLOWING STEP CURVE:
.LEFT MARGIN 30
.TEST PAGE 19
.SKIP 2
.NOFILL
^^
   '
   '
   '
30 -               ---------
   '               '
   '               '
   '               '
20 -       ---------
   '       '
   '       '
   '       '
10 ---------
   '
   '
   '
   '---'---'---'---'---'----
      100 200 300 400 500
\\
.LEFT MARGIN 20
.FILL
.SKIP 2
^WHENEVER THE VALUE OF ^D6 WAS TO BE RESET, THE USER'S PROGRAM WOULD:
.SKIP 1
.INDENT 15
^^200 SELECT D6\\
.SKIP 1
^^BBL\\ WOULD THEN USE THE VALUE OF ^X1 (AS THE XAXIS VALUE)
TO RETRIEVE A VALUE FOR ^D6 (THE YAXIS VALUE) FROM
THE DEFINED STEP CURVE.
.SKIP 1
^OMITTING THE "^^WITH\\" SERIES OF CONSTANTS ACTUALLY ASSUMES
EQUAL XAXIS INCREMENTS OF 1.0, CREATING A STEP CURVE
WHICH JUMPS AT EACH UNIT INCREMENT OF THE
EXPRESSION.  FOR EXAMPLE:
.SKIP 1
.INDENT 5
^^10 STEP D6 AS 10,20,30 ON X1\\
.SKIP 1
IS THE SAME AS:
.SKIP 1
.INDENT 5
^^10 STEP D6 AS 10,20,30 WITH 1,2,3, ON X1\\
.TEST PAGE 9
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^STEP DATA A6 AS -10.2,-5,8.6,16.2 ON B(N1)
.SKIP 1
STEP V(1,1) AS 10,15,25,15 WITH 2,4,6,8 ON C2
.SKIP 1
STEP V9 AS 10%,18%,6%,10% ON B\\
.FILL
.PAGE
^^SMOOTH DATA\\
.SKIP 2
.RIGHT MARGIN 80
.INDENT -6
^FORM:#^^SMOOTH#VAR(CON,...)#AS#CON,...#[WITH#CON,...]#ON#EXP\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE SMOOTH DATA STATEMENT CAN BE USED TO SPECIFY
A SMOOTH CURVE SET OF DATA. ^A SINGLE SMOOTH DATA VARIABLE IS
PERMITTED AFTER THE KEYWORD "^^SMOOTH\\", AND, IF SUBSCRIPTED,
ONLY CONSTANT SUBSCRIPTS CAN BE USED.
.SKIP 1
^THIS STATEMENT IS SIMILAR TO THE STEP DATA STATEMENT, EXCEPT
THAT RETRIEVED VALUES ARE INTERPOLATED FROM THE VALUES IN THE 
FIRST SERIES OF CONSTANTS. ^THE "^^ON\\" EXPRESSION IS EVALUATED
EACH TIME A SELECT STATEMENT IS EXECUTED IN ORDER TO
SELECT THE ASSOCIATED SMOOTH DATA VARIABLE. ^THE VALUE OF THE EXPRESSION
IS USED TO FIND THE RELATIVE POSITION IN THE FIRST SERIES OF CONSTANTS,
ASSUMING EQUAL INCREMENTS OF 1.0 FOR THE SECOND, "^^WITH\\" SERIES
OF CONSTANTS IF IT IS NOT SPECIFIED. ^FOR EXAMPLE, IF THE
EXPRESSION VALUE WERE 1.5, THE RETRIEVED VALUE WOULD BE CALCULATED
AS HALF WAY BETWEEN THE FIRST AND SECOND VALUES IN THE FIRST SERIES
OF CONSTANTS. ^THE CALCULATION IS A STRAIGHT-LINE INTERPOLATION AS
IS SHOWN IN THE FOLLOWING SMOOTH DATA CURVE:
.SKIP 2
.INDENT 5
^^10 SMOOTH D6 AS 10,20 40 ON X1\\
.TEST PAGE 23
.SKIP 2
.NOFILL
.LEFT MARGIN 25
^^
   '
   '
   '
40 -                       *       *
   '
   '
   '
30 -
   '
   '
   '
20 -               *
   '
   '__----------
   '           _^
10 *       *   '
   '           '
   '           '
   '           '
   --------'---'---'-------'-------'
          1.0 1.5 2.0     3.0
\\
.FILL
.LEFT MARGIN 20
.SKIP 2
^SMOOTH DATA CAN ALSO UTILIZE THE SECOND "^^WITH\\" SERIES OF
CONSTANTS TO SPECIFY XAXIS INTERVALS OF WIDTH OTHER THAN 1.0,
AND XAXIS INTERVALS OF UNEQUAL WIDTH. ^IF THE "^^WITH\\" SERIES IS
SPECIFIED, THE VALUES SHOULD BE IN ASCENDING SEQUENCE, AND ONE
VALUE SHOULD BE SPECIFIED FOR EACH VALUE IN THE FIRST "^^AS\\"
SERIES OF CONSTANTS.
.SKIP 1
^IF AN EXPRESSION VALUE LIES BELOW THE FIRST XAXIS POINT, THE
FIRST VALUE IN THE "^^AS\\" SERIES OF CONSTANTS IS RETURNED. ^IF
AN EXPRESSION VALUE LIES ABOVE THE LAST XAXIS POINT, THE LAST
VALUE IN THE "^^AS\\" SERIES OF CONSTANTS IS RETURNED.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^SMOOTH DATA B(9) AS -6%,2%,12% ON B(9)
.SKIP 1
SMOOTH Q(2,3) AS 100,80,70 WITH -2,9,11 ON A6
.SKIP 1
SMOOTH Q2 AS 6,5,6,9 ON S2\\
.FILL
.PAGE
^^DISCRETE DATA\\
.SKIP 2
.RIGHT MARGIN 80
.INDENT -6
^FORM:#^^DISCRETE VAR(CON,...) AS PROB,CON,PROB,CON,...\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THIS STATEMENT IS USED TO SPECIFY A DISCRETE
PROBABILITY DISTRIBUTION. ^A SINGLE DISCRETE DATA VARIABLE IS
PERMITTED AFTER THE KEYWORD "^^DISCRETE\\", AND, IF SUBSCRIPTED, ONLY
CONSTANT SUBSCRIPTS CAN BE USED.
.SKIP 1
^THE "^^AS\\" SERIES OF VALUES REPRESENTS ALTERNATING PAIRS OF
DISCRETE PROBABILITIES (BETWEEN 0.0 AND 1.0) AND ASSOCIATED VALUES.
^PROBABILITIES  ARE ENTERED ON AN INCREMENTAL BASIS, AND PROBABILITIES
FOR ALL PAIRS MUST ADD TO 1.0. ^THE VALUES ASSOCIATED WITH EACH
PROBABILITY SHOULD BE SPECIFIED IN ASCENDING SEQUENCE FROM ONE 
PAIR TO THE NEXT.
.SKIP 1
^WHEN THE SELECT STATEMENT RETRIEVES A VALUE FOR THE DISCRETE
DATA VARIABLE, A UNIFORMLY DISTRIBUTED RANDOM NUMBER
BETWEEN 0.0 AND 1.0 IS SAMPLED (INTERNAL TO ^^BBL\\), AND THE
VALUE RETURNED IS THE FIRST VALUE IN THE SERIES SUCH THAT THE
CUMULATIVE PROBABILITY (SUMMED INCREMENTAL PROBABILITIES) IS
GREATER THAN OR EQUAL TO THE SAMPLED RANDOM NUMBER:
.TEST PAGE 24
.SKIP 2
.LEFT MARGIN 30
.NOFILL
  RANDOM
  NUMBER
.SKIP 1
^^
1.00 '               ----
     '               '
     '               '
     '               '
 .75 -           -----
     '           '
     ------------'
     '           '
 .50 -       -----
     '       '   '
     '       '   '
     '       '   '
 .25 -   -----   '
     '   '       '
     '   '       '
     '   '       '
0.00 ----'-------'-------
\\
       SAMPLED VALUE
.FILL
.LEFT MARGIN 20
.SKIP 2
^A DISCRETE DATA VARIABLE HAS A LIKLIHOOD OF TAKING ON EACH
SPECIFIED VALUE EQUAL TO THE INCREMENTAL PROBABILITY ASSOCIATED
WITH EACH VALUE. ^THE VALUE RETRIEVED WILL ALWAYS BE ONE
OF THE EXACT VALUES SPECIFIED IN THE DISCRETE DATA STATEMENT.
.SKIP 1
^THE USER CAN SPECIFY ANY NUMBER OF PROABILITY/VALUE PAIRS,
BUT THERE SHOULD BE NO "HALF" PAIRS.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^DISCRETE DATA D(2) AS 10%,100,40%,200,50%,300
.SKIP 1
DISCRETE A9 AS .25,12,.25,14,.25,16,.25,18
.SKIP 1
DISCRETE Q(1,1) AS 100%,10\\
.FILL
.PAGE
^^CONTINUOUS DATA\\
.SKIP 2
.RIGHT MARGIN 80
.INDENT -6
^FORM:#^^CONTINUOUS VAR(CON,...) AS PROB,CON,PROB,CON,...\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE CONTINUOUS DATA STATEMENT IS USED TO SPECIFY
CONTINUOUS PROBABILITY DISTRIBUTIONS. ^A SINGLE CONTINUOUS
DATA VARIABLE IS PERMITTED AFTER THE KEYWORD "^^CONTINUOUS\\",
AND, IF SUBSCRIPTED, ONLY CONSTANT SUBSCRIPTS CAN BE USED.
.SKIP 1
^THE STATEMENT IS SIMILAR TO THE DISCRETE DATA STATEMENT, EXCEPT
THAT RETRIEVED VALUES ARE INTERPOLATED FROM A CONTINUOUS
PROBABILITY DISTRIBUTION. ^THE "^^AS\\" SERIES OF VALUES REPRESENTS
ALTERNATING PAIRS OF CUMULATIVE PROBABILITES AND ASSOCIATED VALUES.
^SUCCESSIVE  PROBABILITIES SHOULD BE SPECIFIED IN ASCENDING 
SEQUENCE, WHILE SUCCESSIVE VALUES SHOULD BE EQUAL TO OR GREATER
THAN PRECEDING VALUES. ^FURTHERMORE, AT LEAST TWO
PROABILITY/VALUE PAIRS SHOULD BE SPECIFIED.
.SKIP 1
^WHEN THE SELECT STATEMENT RETRIEVES A VALUE FOR A CONTINUOUS
DATA VARIABLE, A UNIFORMLY DISTRIBUTED RANDOM NUMBER
BETWEEN 0.0 AND 1.0 IS SAMPLED (INTERNAL TO ^^BBL\\). ^THE
RANDOM NUMBER IS USED TO FIND TWO SUCCESSIVE PROBABILITY POINTS
BETWEEN WHICH THE INTERPOLATION IS DONE. ^THE RETRIEVED VALUE
LIES BETWEEN THE FIRST VALUE WHOSE ASSOCIATED PROBABILITY IS
GREATER THAN OR EQUAL TO THE SAMPLED RANDOM NUMBER, AND THE
VALUE IN THE PRECEDING PAIR:
.TEST PAGE 24
.SKIP 2
.LEFT MARGIN 30
.NOFILL
  RANDOM
  NUMBER
.SKIP 1
^^
1.00 '                  *
     '
     '
     '
 .75 -           *
     '
     -----------
     '          '
 .50 -        * '
     '          '
     '          '
     '          '
 .25 -     *    '
     '          '
     '          '
     '          '
0.00 *----------'--------
\\
       SAMPLED VALUE
.FILL
.LEFT MARGIN 20
.SKIP 2
^THE CUMULATIVE PROBABILITY CURVE USED FOR THE INTERPOLATION
IS A SET OF STRAIGHT-LINE SEGMENTS RUNNING BETWEEN
THE SPECIFIED PROBABILITY/VALUE POINTS. (^THE TAILS OF THE
DISTRIBUTION ARE EXTRAPOLATED USING THE SLOPE OF THE
TWO ADJACENT PROBABILITY POINTS WHENEVER THE 0.0 OR THE 1.0
POINT  IS NOT GIVEN.)
.SKIP 1
^A CONTINUOUS DATA VARIABLE CAN TAKE ON A VALUE EQUAL TO OR
LESS THAN EACH SPECIFIED VALUE WITH A LIKLIHOOD GIVEN BY
THE ASSOCIATED PROBABILITY. ^ANY VALUE BETWEEN THE 0.0
PROBABILITY POINT AND THE 1.0 PROBABILITY POINT CAN OCCUR.
.SKIP 1
^THE USER CAN SPECIFY ANY NUMBER OF PROBABILITY/VALUE
PAIRS (MINIMUM OF TWO), BUT THERE SHOULD BE NO "HALF" PAIRS.
.RIGHT MARGIN 75
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^CONTINUOUS DATA S(2) AS 0%,10,50%,30,100%,90
.SKIP 1
CONTINUOUS R5 AS 25%,-6.2,50%,0,75%,11.8
.SKIP 1
CONTINUOUS F AS 5%,10,25%,40,50%,60,75%,80,95%,110
.FILL
.RIGHT MARGIN 65
.PAGE
^^FIXED DATA\\
.SKIP 2
.INDENT -6
^FORM:#^^FIXED VAR(CON,...) AS CON\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE FIXED DATA STATEMENT CAN BE USED TO SPECIFY
A CONSTANT VALUE, WHICH IS RETRIEVED EACH TIME THE
ASSOCIATED FIXED DATA VARIABLE IS SELECTED. ^A
SINGLE FIXED DATA VARIABLE IS PERMITTED AFTER THE KEYWORD "^^FIXED\\",
AND, IF SUBSCRIPTED, ONLY CONSTANT SUBSCRIPTS CAN BE USED.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^FIXED DATA A(1) AS 12.5%
.SKIP 1
FIXED B9 AS 17.2E+12\\
.FILL
.PAGE
^^NORMAL DATA\\
.SKIP 2
.INDENT -6
^FORM:#^^NORMAL VAR(CON,...) AS CON [,CON]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE NORMAL DATA STATEMENT CAN BE USED TO SPECIFY
A NORMAL PROBABILITY DISTRIBUTION. ^A SINGLE NORMAL DATA
VARIABLE IS PERMITTED AFTER THE KEYWORD "^^NORMAL\\", AND,
IF SUBSCRIPTED, ONLY CONSTANT SUBSCRIPTS CAN BE USED.
.SKIP 1
^THE "^^AS\\" FIELD SHOULD BE FOLLOWED BY THE MEAN OF THE
NORMAL DISTRIBUTION AND AN OPTIONAL STANDARD DEVIATION.
^THE MEAN CAN BE ANY REAL NUMBER, WHILE THE STANDARD DEVIATION CAN
BE ANY NON-NEGATIVE REAL NUMBER. (^IF THE STANDARD DEVIATION IS
NOT SPECIFIED, ZERO IS ASSUMED.)
.SKIP 1
^WHEN THE SELECT STATEMENT RETRIEVES A VALUE FOR THE NORMAL DATA
VARIABLE, A NORMALLY DISTRIBUTED RANDOM NUMBER (BETWEEN APPROXIMATELY
+ AND - 3 STANDARD DEVIATIONS OF THE MEAN) IS SAMPLED, AND THE VALUE
IS RETURNED IN THE NORMAL DATA VARIABLE. ^THE APPROXIMATE
LIKLIHOOD THAT A SAMPLED VALUE WILL OCCUR WITHIN SPECIFIC
RANGES IS SHOWN BELOW:
.FIGURE 15
.NOFILL
.INDENT -10
^EXAMPLES:#^^NORMAL DATA E7 AS 110.2,12.6
.SKIP 1
NORMAL A(2) AS 10%,2%
.SKIP 1
NORMAL S2 AS .002\\
.FILL
.PAGE
^^LOGNORMAL DATA\\
.SKIP 2
.INDENT -6
^FORM:#^^LOGNORMAL VAR(CON,...) AS CON [,CON]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE LOGNORMAL DATA STATEMENT CAN BE USED TO 
SPECIFY A LOGNORMAL PROBABILITY DISTRIBUTION. ^A SINGLE LOGNORMAL
DATA VARIABLE IS PERMITTED AFTER THE KEYWORD "^^LOGNORMAL\\",
AND IF SUBSCRIPTED, ONLY CONSTANT SUBSCRIPTS CAN BE USED.
.SKIP 1
^THE "^^AS\\" FIELD SHOULD BE FOLLOWED BY THE MEAN OF THE LOGNORMAL
DISTRIBUTION AND AN OPTIONAL STANDARD DEVIATION. ^THE MEAN CAN BE
ANY REAL NUMBER, WHILE THE STANDARD DEVIATION CAN BE ANY 
NON-NEGATIVE REAL NUMBER. (^IF THE STANDARD DEVIATION IS NOT
SPECIFIED, ZERO IS ASSUMED.)
.SKIP 1
^WHEN A SELECT STATEMENT RETRIEVES A VALUE FOR THE LOGNORMAL DATA
VARIABLE, A NORMALLY DISTRIBUTED RANDOM NUMBER IS SAMPLED IN THE
SAME WAY AS FOR A NORMAL DATA VARIABLE. ^THE LOGNORMAL VALUE IS
THEN CALCULATED AS:
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^
       (RNM)
LGN = \\E
.FILL
.LEFT MARGIN 20
.SKIP 1
^HERE "E" IS THE BASE OF THE NATURAL LOGARITHMS, AND "^^RNM\\"
IS THE SAMPLED NORMAL RANDOM NUMBER. ^THE GENERAL CURVE
"^^LGN\\=E_^(^^RNM\\)" IS SHOWN TO INDICATE
VALUES WHICH MIGHT BE RETRIEVED AS ^^RNM\\ VARIES:
.TEST PAGE 30
.SKIP 2
.RIGHT MARGIN 70
.NOFILL
^^
                       LGN
                        '
                        '
                        '
                      3 -
                        '
                        '
                        '
                      2 -
                        '
                        '
                        '
                        -
                        '
                        '
                        '
'-------'-------'-------'-------'-------'-------'
       -2      -1       0       1       2
            (LGN AS A FUNCTION OF RNM)
.SKIP 1
                        '
                        '
                        '
                        '
                        '
                        '
'-------'-------'-------'-------'-------'-------'
               (PROBABILITY OF RNM)
\\
.FILL
.RIGHT MARGIN 65
.SKIP 2
^THE LOGNORMAL DISTRIBUTION WILL CONSIST OF ALL ^^LGN\\ VALUES ON THE
PRECEDING CURVE OF ^^LGN\\ VS ^^RNM\\ CORRESPONDING TO ^^RNM\\ VALUES
BETWEEN APPROXIMATELY + AND - 3 STANDARD DEVIATIONS
OF THE MEAN. ^THE EXPONENTIAL EFFECT OF THIS CURVE SHOWS THAT SAMPLED
VALUES ON THE HIGH SIDE OF THE MEAN WEIGH MORE HEAVILY
THAN SAMPLED VALUES ON THE LOW SIDE OF THE MEAN. ^THEREFORE,
SELECTING FROM A LOGNORMAL PROBABILITY DISTRIBUTION WILL RESULT
IN A SKEWED SET OF RETRIEVED VALUES AS SHOWN IN THE LOGNORMAL
PROBABILITY CURVE BELOW:
.TEST PAGE 24
.LEFT MARGIN 25
.SKIP 2
.NOFILL
^^
  RANDOM
  NUMBER
.SKIP 1
1.00 -
     '                                 *
     '                       *
     '                 *
 .75 '             *
     '          *
     -------- *
     '       *'
 .50 -      * '
     '      * '
     '     *  '
     '     *  '
 .25 '    *   '
     '    *   '
     '   *    '
     '   *    '
0.00 ----*----'-------------------------
         SAMPLED VALUE
\\
.FILL
.SKIP 2
.LEFT MARGIN 20
.INDENT -10
^EXAMPLES:#^^LOGNORMAL DATA C6 AS 10,.2
.SKIP 1
LOGNORMAL Q(2) AS 12%,.5%
.SKIP 1
LOGNORMAL V(1,1) AS -7.2,.50\\
.FILL
.PAGE
^^POISSON DATA\\
.SKIP 2
.INDENT -6
^FORM:#^^POISSON VAR(CON,...) AS CON\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE POISSON DATA STATEMENT CAN BE USED TO SPECIFY
A POISSON PROBABILITY DISTRIBUTION. ^A SINGLE POISSON DATA VARIABLE
IS PERMITTED AFTER THE KEYWORD "^^POISSON\\", AND, IF SUBSCRIPTED,
ONLY CONSTANT SUBSCRIPTS CAN BE USED.
.SKIP 1
^THE ONLY VALUE REQUIRED TO DEFINE THE POISSON DISTRIBUTION IS THE
MEAN VALUE OF THE DISTRIBUTION, WHICH MAY BE EXPRESSED AS ANY
NON-NEGATIVE REAL NUMBER.
.SKIP 1
^THE POISSON STATEMENT DEFINES A DISCRETE PROBABILITY DISTRIBUTION
WHICH IS OF THE FORM:
.SKIP 1
.NOFILL
.LEFT MARGIN 30
           (-MEAN)      (I)
          E       * MEAN
PROB(I) = --------------
                I!
.FILL
.LEFT MARGIN 20
.SKIP 1
WHERE PROB(I) IS THE DISCRETE PROBABILITY THAT "I" OCCURENCES
OF AN UNCERTAIN EVENT WILL OCCUR WITHIN A FIXED INTERVAL. (^FOR
EXAMPLE, "I" COULD REPRESENT THE UNCERTAIN NUMBER OF ARRIVALS OF
WORKMEN AT A TOOL CRIB WITHIN A FIXED INTERVAL OF TIME.) "E"
IS THE BASE OF THE NATURAL LOGARITHMS. ^THE PROBABILITY OF ZERO
OCCURENCES IS:
.SKIP 1
.NOFILL
.LEFT MARGIN 30
         (-MEAN)
PROB(0)=E
.FILL
.LEFT MARGIN 20
.SKIP 1
AND THE PROBABILITY OF EACH SUCCEEDING NUMBER OF POSSIBLE
OCCURENCES IS THE PRECEDING PROBABILITY MULTIPLIED
BY "(MEAN/I)". ^FOR EXAMPLE, THE PROBABILITIES
OF 1 AND 2 OCCURENCES WITHIN THE FIXED INTERVAL CAN BE CALCULATED
AS:
.NOFILL
.SKIP 1
.LEFT MARGIN 30
PROB(1)=PROB(0)*(MEAN/1)
PROB(2)=PROB(1)*(MEAN/2)
            .
            .
            .
.FILL
.LEFT MARGIN 20
.SKIP 1
^THESE DISCRETE PROBABILITIES ARE SUMMED TO ARRIVE AT A
CUMULATIVE DISCRETE PROBABILITY DISTRIBUTION. ^THE SELECT STATEMENT
RETRIEVES A SAMPLED VALUE FROM THIS DISTRIBUTION IN THE SAME
WAY AS IT SAMPLES A STANDARD DISCRETE DISTRIBUTION.
.SKIP 1
^ONE APPROXIMATION IS MADE. ^IF THE MEAN OF THE POISSON
DISTRIBUTION IS GREATER THAN 10, THE DISTRIBUTION IS APPROXIMATED
AS A NORMAL DISTRIBUTION USING THE MEAN SPECIFIED
FOR THE POISSON, AND A STANDARD DEVIATION EQUAL TO THE
SQUARE ROOT OF THE MEAN.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^POISSON DATA P1 AS 2.5
.SKIP 1
POISSON A(1) AS 12
.SKIP 1
POISSON V(2,2) AS 6.0\\
.FILL
.PAGE
^^EXPONENTIAL DATA\\
.SKIP 2
.INDENT -6
^FORM:#^^EXPONENTIAL VAR(CON,...) AS CON\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THIS STATEMENT CAN BE USED TO
SPECIFY AN EXPONENTIAL PROBABILITY DISTRIBUTION. ^A SINGLE
EXPONENTIAL DATA VARIABLE IS PERMITTED AFTER THE KEYWORD
"^^EXPONENTIAL\\", AND, IF SUBSCRIPTED, ONLY CONSTANT SUBSCRIPTS
CAN BE USED.
.SKIP 1
^THE ONLY VALUE REQUIRED TO DEFINE THE EXPONENTIAL DISTRIBUTION
IS THE MEAN VALUE, WHICH MAY BE EXPRESSED AS ANY NON-NEGATIVE
REAL NUMBER. ^THE EXPONENTIAL DISTRIBUTION IS A CONTINUOUS
DISTRIBUTION OF THE FORM:
.SKIP 1
.NOFILL
.LEFT MARGIN 25
                        -(1/MEAN)*X
PROB(INTERVAL<=X)=1.0-(E)
.SKIP 1
.FILL
.LEFT MARGIN 20
WHERE "PROB(INTERVAL<=X)" IS THE PROBABILITY OF AN INTERVAL
BEING LESS THAN OR EQUAL TO X, "MEAN" IS THE AVERAGE INTERVAL
BETWEEN OCCURENCES, AND "E" IS THE BASE OF THE NATURAL LOGARITHMS.
.SKIP 1
^THE EXPONENTIAL DISTRIBUTION IS THE PARTNER TO THE POISSON
DISTRIBUTION. (^FOR EXAMPLE, THE POISSON COULD BE USED TO SPECIFY
THE EXPECTED NUMBER OF OCCURENCES OVER A FIXED TIME PERIOD,
WHILE THE EXPONENTIAL MIGHT BE USED TO SPECIFY THE EXPECTED TIME
BETWEEN OCCURENCES.) ^SINCE THE POISSON AND THE EXPONENTIAL
ARE DIRECTLY RELATED, THE RELATIONSHIP BETWEEN THEIR
MEANS CAN BE SHOWN AS:
.SKIP 1
.NOFILL
.LEFT MARGIN 25
MEAN TIME         (TIME INTERVAL)
BETWEEN    =  ------------------------
OCCURENCES    (MEAN NO. OF OCCURENCES)
.FILL
.LEFT MARGIN 20
.SKIP 1
^THE EXPONENTIAL DATA STATEMENT SPECIFIES A CONTINUOUS PROBABILITY
DISTRIBUTION FROM WHICH THE SELECT STATEMENT CAN RETRIEVE
SAMPLED VALUES IN THE SAME WAY AS IT SAMPLES A STANDARD
CONTINUOUS DISTRIBUTION:
.TEST PAGE 24
.LEFT MARGIN 25
.SKIP 2
.NOFILL
^^
  RANDOM
  NUMBER
.SKIP 1
1.00 -
     '                                 *
     '                       *
     '                 *
 .75 '             *
     '          *
     -------- *
     '       *'
 .50 -      * '
     '     *  '
     '    *   '
     '   *    '
 .25 '  *     '
     ' *      '
     '*       '
     *        '
0.00 *--------'-------------------------
         SAMPLED VALUE
\\
.FILL
.SKIP 2
.LEFT MARGIN 20
.NOFILL
.INDENT -10
^EXAMPLES:#^^EXPONENTIAL DATA Q2 AS 16.2
.SKIP 1
EXPONENTIAL A(9) AS 12%
.SKIP 1
EXPONENTIAL V0 AS .212\\
.FILL
.PAGE
^^SELECT\\
.SKIP 2
.INDENT -6
^FORM:#^^SELECT VAR(EXP),VAR(EXP),...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE SELECT STATEMENT CAN BE THOUGHT OF AS ANALOGOUS
TO THE STANDARD READ STATEMENT. ^WHEN THE SELECT IS EXECUTED,
A VALUE FOR EACH SPECIFIED VARIABLE IS RETURNED FROM THE SPECIAL
DATA STATEMENT ASSOCIATED WITH THE VARIBLE. (^THE METHODS
FOR SAMPLING AND CALCULATING THE RETURNED VALUES ARE DETAILED
UNDER EACH SPECIAL DATA STATEMENT IN THIS SECTION.) ^THE RETRIEVED
VALUE IS THEN ASSIGNED TO THE VARIABLE SPECIFIED IN THE SELECT.
.SKIP 1
^BECAUSE THE USER HAS ACCESS TO THE RANDOM NUMBER SEED
(VIA THE ^^BBL\\ VARIABLE "^^SEED\\"), HE CAN INTERRELATE
SELECTING FROM DIFFERENT PROBABILITY DISTRIBUTIONS IF TWO OR MORE
SPECIAL DATA VARIABLES ARE INTERDEPENDENT. ^FIVE DIFFERENT
PROBABILITY VARIABLES (^A(1) THROUGH ^A(5)) ARE
SELECTED WITH THE SAME RANDOM NUMBER SEED IN THE EXAMPLE
BELOW:
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^
100 S=SEED
200 FOR I=1 TO 5
300 SEED=S
400 SELECT A(I)
500 NEXT I
\\
.SKIP 1
.FILL
.LEFT MARGIN 20
^IF AN ATTEMPT IS MADE TO SELECT A VALUE FOR A VARIABLE
WHICH HAS NO ASSOCIATED SPECIAL DATA STATEMENT, AN
"OUT OF DATA" ERROR CONDITION EXISTS.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^SELECT A6,B6,C6
.SKIP 1
SELECT Q(A+B/2),Q(B+A/2)
.SKIP 1
SELECT R0\\
.FILL
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^V^I^I^I
.PAGE
.CENTER 65
^ASTERISK ^SUBSCRIPTING
.SKIP 4
.PARAGRAPH
^MOST ^^BBL\\ STATEMENTS PERMIT THE USER TO SPECIFY ANY STANDARD
SUBSCRIPTED ^^BBL\\ VARIABLE WITH ONE OR MORE "ASTERISK SUBSCRIPTS."
^A SINGLE ASTERISK IN THE PLACE OF A SPECIFIC SUBSCRIPT IMPLIES
THAT AN EXPRESSION, STATEMENT, ETC. SHOULD BE EVALUATED ONCE
FOR EACH POSSIBLE VALUE OF THE (*) SUBSCRIPT FROM 1 TO ITS MAXIMUM
DIMENSIONED SIZE. ^THUS WHEN A USER REFERENCES AN ARRAY WITH AN
ASTERISK SUBSCRIPT, HE IS ACTUALLY REFERENCING EACH ELEMENT IN THE
ARRAY. ^EXPRESSIONS CONTAINING (*)'S ARE, IN GENERAL, REPEATED
AS MANY TIMES AS REQUIRED TO ACCESS ALL ELEMENTS IN THE (*) ARRAY.
^A VARIABLE SUBSCRIPTED BY ONE OR MORE (*)'S FOLLOWS TWO CONVENTIONS:
.SKIP 1
.LEFT MARGIN 10
.INDENT -3
1.#^AUTOMATIC SUBSCRIPT INCREMENTING PROCEEDS FROM SUBSCRIPT
VALUE 1 TO THE MAXIMUM DIMENSIONED (OR IMPLIED) SIZE OF THE
SUBSCRIPT. ^THE ZERO POSITIONS OF SUBSCRIPTS ARE NOT DISTURBED.
.SKIP 1
.INDENT -3
2.#^INCREMENTING OF ASTERISK SUBSCRIPTS WITHIN A SINGLE VARIABLE
(WITH MULTIPLE SUBSCRIPTS) PROCEEDS FROM THE OUTERMOST SUBSCRIPT
INWARD. ^FOR EXAMPLE, IN THE MATRIX:
.SKIP 1
.INDENT 20
^^A(*,*)\\
.SKIP 1
THE SECOND SUBSCRIPT VARIES MOST RAPIDLY. ^IF THE MATRIX WERE
DIMENSIONED 2 BY 2, THE ASTERISK NOTATION WOULD IMPLY THAT THE
ARRAY ELEMENTS WOULD BE PROCESSED IN THE FOLLOWING ORDER:
.SKIP 1
.LEFT MARGIN 30
.NOFILL
^^A(1,1)
A(1,2)
A(2,1)
A(2,2)\\
.FILL
.LEFT MARGIN 10
.SKIP 1
^SINCE THE SECOND SUBSCRIPT VARIES MOST RAPIDLY, THE ELEMENTS ARE
BEING ACCESSED ONE "ROW" AT A TIME, FROM THE POINT OF VIEW OF
A MATRIX. (^NOTE: ^IF ONLY SELECTED SUBSCRIPTS WITHIN A MULTIPLE
DIMENSION VARIABLE ARE REFERENCED AS ASTERISKS, INCREMENTING
IS OUTSIDE-IN FOR ONLY THOSE SUBSCRIPTS WHICH ARE ASTERISKS. ^THE
REMAINING ASTERISK SUBSCRIPTS ARE EVALUATED AS NORMAL EXPRESSIONS.)
.LEFT MARGIN 5
.PARAGRAPH
^FOR SOME SPECIAL ^^BBL\\ VARIABLES (DESCRIBED IN THE NEXT SECTION),
THE (*) SUBSCRIPT IS ALWAYS ASSUMED IF THE VARIABLE IS SPECIFIED
WITH NO SUBSCRIPT.
.PARAGRAPH
^IN ORDER TO BETTER UNDERSTAND THE EXECUTION SEQUENCE OF AN (*)
STATEMENT, THE THREE ASTERISK FORMS OF THE LET STATEMENT ARE DISCUSSED
IN DETAIL ON THE FOLLOWING PAGES. (^ALMOST ALL ^^BBL\\ STATEMENTS
PERMIT A FORM OF ASTERISK SUBSCRIPTING. ^THESE CAN BE REFERRED
TO UNDER ^^BBL\\ ^STATEMENT ^SUMMARY, AT THE BACK OF THIS MANUAL.)
^THE THREE ASTERISK FORMS OF THE LET STATEMENT ARE DISTINGUISHED
FROM ONE ANOTHER BY THE ACTION ^^BBL\\ PERFORMS ON THE RIGHT-HAND
SIDE EXPRESSION DURING EXECUTION:
.SKIP 2
.LEFT MARGIN 10
.INDENT -3
1.#^SINGLE ^ASTERISK: (^THIS FORM MIGHT ALSO BE CALLED "RIGHT
SIDE FIXED.") ^THIS FORM HAS A FIXED RIGHT-HAND EXPRESSION WHICH IS
EVALUATED ONLY ONCE BY ^^BBL\\. ^AFTER THE VALUE TO BE ASSIGNED
IS DETERMINED, THE VARIABLE TO WHICH IT IS ASSIGNED IS CALCULATED
BY ^^BBL\\ FOR ALL POSITIONS IMPLIED BY ANY LEFT-HAND SIDE ASTERISK
SUBSCRIPTS, AND THE VALUE IS ASSIGNED TO EACH.
.SKIP 1
.INDENT -3
2.#^DOUBLE ^ASTERISK: (^THIS FORM MIGHT ALSO BE CALLED "RIGHT SIDE
VARYING.") ^IN THE DOUBLE ASTERISK LET STATEMENT (SIGNALED BY
AT LEAST ONE ASTERISK SUBSCRIPT TO THE RIGHT SIDE OF THE EQUAL 
SIGN) THE RIGHT-HAND EXPRESSION IS RE-EVALUATED ONCE FOR EACH IMPLIED
ASTERISK VALUE WHILE THE VARIABLE TO WHICH THE ASSIGNMENT IS MADE
IS ALSO REVISED FOR ALL POSITIONS IMPLIED BY ANY LEFT-HAND
SIDE ASTERISK SUBSCRIPTS. ^THE KEY DISTINCTION HERE IS THAT THE
RIGHT SIDE IS NOT FIXED.
.SKIP 1
.INDENT -3
3.#^STACKED: (^THIS FORM MIGHT ALSO BE CALLED "RIGHT SIDE FIXED
OR VARYING.") ^THIS FORM HAS SEVERAL RIGHT-HAND SIDE EXPRESSIONS
WHICH ARE EVALUATED IN SERIES. ^EACH INDIVIDUAL RIGHT SIDE EXPRESSION
IS EVALUATED ONCE IF IT CONTAINS NO ASTERISK SUBSCRIPTS (SAME AS
THE SINGLE ASTERISK FORM), OR SEVERAL TIMES, ONCE FOR EACH IMPLIED
ASTERISK VALUE, IF IT DOES CONTAIN
ASTERISK SUBSCRIPTS (SAME AS THE DOUBLE ASTERISK FORM.)
^THE RIGHT SIDE THEN REPRESENTS A "STACK" OF "SINGLE ASTERISK TYPE"
AND "DOUBLE ASTERISK TYPE"
RIGHT HAND SIDES.
.SKIP 1
.LEFT MARGIN 5
^NOTE THAT ALL THREE FORMS ARE USUALLY SPECIFIED WITH AN ASTERISK
SUBSCRIPT IN THE VARIABLE TO WHICH ASSIGNMENT IS BEING MADE. ^HOWEVER,
THIS NEED NOT BE THE CASE SINCE IT IS SOMETIMES USEFUL TO ASSIGN
A SERIES OF VARYING EXPRESSION VALUES TO A SINGLE
ASSIGNMENT VARIABLE. ^THIS CONCEPT IS CALLED "ASSIGNMENT IN PLACE",
AND IS DISCUSSED UNDER THE DOUBLE ASTERISK AND STACKED FORMS OF THE
LET STATEMENT IN THIS SECTION.
.PAGE
.LEFT MARGIN 20
^^LET\\ (SINGLE ASTERISK)
.SKIP 2
.INDENT -6
^FORM:#^^[LET] VAR(*)=EXP\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^IF A STANDARD LET STATEMENT DOES NOT INCLUDE ASTERISK
SUBSCRIPTS IN THE RIGHT-HAND EXPRESSION, THE VALUE OF THE RIGHT-HAND
EXPRESSION IS ASSIGNED TO EACH IMPLIED ASTERISK POSITION OF THE
VARIABLE TO WHICH ASSIGNMENT IS BEING MADE.
^WHEN THE ASTERISK SUBSCRIPTING HAS BEEN
COMPLETED, EXECUTION CONTINUES TO THE NEXT STATEMENT.
.SKIP 1
^THIS IS THE SIMPLEST FORM OF THE LET STATEMENT WHICH CAN INCLUDE
ASTERISK SUBSCRIPTS. ^THE LIMITATION IS THAT ASTERISKS CAN APPEAR
TO THE LEFT OF THE EQUAL SIGN, BUT NONE TO THE RIGHT. ^THE SINGLE
ASTERISK LET STATEMENT MIGHT BE CONSIDERED AS THE ASSIGNMENT OF
A FIXED EXPRESSION TO MULTIPLE POSITIONS IN ANY STANDARD ^^BBL\\
VARIABLE. ^FOR EXAMPLE, THE ^VARIABLE V(10,10) MIGHT BE ZEROED
AS FOLLOWS:
.SKIP 1
.INDENT 15
^^100 V(*,*)=0\\
.SKIP 1
^ALL 100 ARRAY POSITIONS WITH NON-ZERO SUBSCRIPTS (I.E.
^V(1,1) THROUGH ^V(10,10)) WOULD BE SET TO ZERO.
.SKIP 1
(^IT IS USEFUL TO NOTE THAT THE SIMPLEST FORM OF THIS
STATEMENT IS REALLY THE STANDARD ^^BBL\\ LET STATEMENT, I.E. NO
LEFT-HAND ASTERISKS, AND THEREFORE A SINGLE
ASSIGNMENT WILL BE MADE.)
.SKIP 1
^IT IS IMPORTANT TO NOTE THAT ASTERISK SUBSCRIPTS MAY OCCUR
WITHIN AN EXPRESSION WHICH IS ITSELF A SUBSCRIPT:
.SKIP 1
.INDENT 15
^^200 V(A(*),10)=0\\
.SKIP 1
^IN THIS EXAMPLE, THE LEFT-HAND SUBSCRIPT IS SET EQUAL TO EACH
VALUE FOUND IN THE ARRAY ^A(*). ^THE VALUES FOUND IN ^A(*) MIGHT BE
SUCH THAT ONLY SELECTED POSITIONS OF ^V(10,10) WERE ZEROED.
^FURTHERMORE, THE RIGHT-HAND SUBSCRIPT IN THIS EXAMPLE WAS HELD
FIXED AT 10. ^IN TERMS OF A MATRIX, THE EXAMPLE IS ZEROING SELECTED
PORTIONS OF COLUMN 10 OF THE MATRIX. ^THE CAPABILITY OF SELECTIVELY
EMBEDDING ASTERISK SUBSCRIPTS AT ANY LEVEL WITHIN AN EXPRESSION
ALLOWS THE USER TO MANIPULATE ONLY SELECTED PORTIONS OF ARRAYS
(FOR EXAMPLE ELEMENTS 3 THROUGH 7), AND EVEN NON-CONTIGUOUS PORTIONS
OF ARRAYS (FOR EXAMPLE ELEMENTS 3,5,9.) ^THIS CONCEPT OF LOWER-LEVEL
ASTERISK SUBSCRIPTING IS CALLED "INDIRECT ASTERISK SUBSCRIPTING."
.SKIP 1
^OUR EXAMPLE CAN HAVE AN ADDITIONAL PERMUTATION. ^SUPPOSE
BOTH SUBSCRIPTS CONTAINED INDIRECT
ASTERISK SUBSCRIPTS:
.SKIP 1
.INDENT 15
^^300 V(A(*),B(*))=0\\
.SKIP 1
^WHEN MORE THAN ONE ARRAY WITHIN AN EXPRESSION
CONTAINS AN ASTERISK, THE ASTERISK
INCREMENTING FOR BOTH ARRAYS PROCEEDS IN PARALLEL.  ^THAT IS, THE
FIRST PASS THROUGH THE EXPRESSION IS MADE WITH THE
TWO SUBSCRIPTS EVALUATED AS ^A(1) AND ^B(1). ^THE SECOND PASS
EVALUATES THE SUBSCRIPTS AS ^A(2) AND ^B(2), AND SO FORTH. ^WHEN 
EITHER ^A(*) OR ^B(*) IS COMPLETED, EXECUTION PASSES TO THE NEXT
STATEMENT. ^THIS EXAMPLE DEMONSTRATES A GENERAL CONVENTION
OF ASTERISK SUBSCRIPTING:
.SKIP 1
.LEFT MARGIN 25
.INDENT -2
_.#^WHEN TWO OR MORE SEPARATE VARIABLES ARE REFERENCED WITH
ASTERISK SUBSCRIPTS WITHIN THE SAME EXPRESSION, ALL (*) VARIABLES
ARE INCREMENTED IN PARALLEL (RIGHT SUBSCRIPT TO LEFT
WITHIN EACH VARIABLE) UNTIL ONE VARIABLE CONTAINING AN (*) SUBSCRIPT
IS EXHAUSTED, AT WHICH POINT INCREMENTING OF ALL VARIABLES WITH
(*)'S HAS BEEN COMPLETED.
.LEFT MARGIN 20
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^LET A(*)=B6*10
.SKIP 1
LET A(B(*)*I)=-1
.SKIP 1
LET Q(*,B(*))=0\\
.FILL
.PAGE
^^LET\\ (DOUBLE ASTERISK)
.SKIP 2
.INDENT -6
^FORM:#^^[LET] VAR(*)=EXP(*)\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^A DOUBLE ASTERISK LET STATEMENT CAN CONTAIN
ASTERISK SUBSCRIPTS ON EACH SIDE OF THE EQUAL SIGN. ^EXECUTION
OF THIS FORM OF THE LET STATEMENT FOLLOWS THE SAME GENERAL
CONVENTION OF INCREMENTING (*) VARIABLES IN PARALLEL (IN
THIS CASE ON BOTH SIDES OF THE EQUAL SIGN), FOR EACH PASS THROUGH
THE STATEMENT.
.SKIP 1
^CONSIDER THE EXAMPLE:
.SKIP 1
.INDENT 15
^^100 LET A(*)=B(*)+10\\
.SKIP 1
^IF ^A AND ^B WERE BOTH DIMENSIONED (3), THIS STATEMENT WOULD
BE EXECUTED 3 TIMES AS FOLLOWS:
.SKIP 1
.NOFILL
.LEFT MARGIN 35
^^100 LET A(1)=B(1)+10
100 LET A(2)=B(2)+10
100 LET A(3)=B(3)+10\\
.SKIP 1
.LEFT MARGIN 20
.FILL
^IF EITHER ^A OR ^B BECAME EXHAUSTED (I.E. REACHED
AN UPPER SUBSCRIPT LIMIT) PRIOR TO THE OTHER, EXECUTION
PASSES ON TO THE NEXT STATEMENT, LEAVING ONE OR MORE ELEMENTS
IN THE LARGER ARRAY UNTOUCHED. (^NOTE: ^EACH TIME AN ASTERISK
STATEMENT IS EXECUTED, THE INCREMENTING PROCESS IS REINITIALIZED
TO A STARTING POINT WHERE ALL SUBSCRIPTS ARE 1.)
.SKIP 1
^THE DOUBLE ASTERISK USUALLY IMPLIES THAT A VARYING VALUE FOR THE
RIGHT-HAND EXPRESSION IS ASSIGNED TO VARYING POSITIONS IN THE
LEFT-HAND ARRAY. ^OCCASSIONALLY THE USER WANTS TO
"ASSIGN IN PLACE", I.E. VARY THE EVALUATION OF THE RIGHT SIDE
BUT ASSIGN THE RESULTS TO A FIXED LEFT SIDE VARIABLE.
^THIS IS USEFUL WHEN THE RIGHT HAND EXPRESSION 
CONTAINS THE VARIABLE TO WHICH ASSIGNMENT IS BEING MADE:
.SKIP 1
.INDENT 15
^^200 LET T=T+A(*)\\
.SKIP 1
^THE EFFECT OF STATEMENT 200 IS TO SUM THE VARIABLE ^T WITH EACH
VALUE IN THE ARRAY ^A(*), AND ASSIGN THE TOTAL (AS THE RIGHT SIDE IS
BEING SUMMED) TO THE VARIABLE ^T. ^THIS NEW VALUE OF ^T IS
USED IN THE NEXT EVALUATION OF THE RIGHT SIDE, SO THAT WHEN
ALL ELEMENTS OF ^A(*) HAVE BEEN PROCESSED, THE TOTAL OF THE
VALUES FOUND IN ^A(*) HAS BEEN ASSIGNED TO ^T.
.SKIP 1
^INDIRECT ASTERISK SUBSCRIPTING CAN ALSO BE USED.
^THE INTRICACY OF INDIRECT ASTERISK SUBSCRIPTING
FOR THIS FORM OF THE LET STATEMENT SOON BECOMES APPARENT:
.SKIP 1
.INDENT 10
^^200 LET Q(V(*))=S(*)*R(V(*),2)\\
.SKIP 1
^EXECUTION OF THIS STATEMENT WILL PROCEED WITH ^V(*) AND ^S(*)
BEING INCREMENTED IN PARALLEL UNTIL ONE OR BOTH IS EXHAUSTED.
^IN THIS EXAMPLE ALL ELEMENTS OF THE ARRAY ^S ARE BEING MULTIPLIED
BY THEIR ASSOCIATED ELEMENT IN THE MATRIX ^R (WHICH MAY BE
NON-CONTIGUOUS ELEMENTS SINCE ^R USES INDIRECT ASTERISK SUBSCRIPTING),
AND THE RESULTANT IS ASSIGNED TO THE ASSOCIATED POSITION IN THE
ARRAY ^Q (WHICH ALSO COULD BE NON-CONTIGUOUS.) ^THIS FORM OF THE
ASTERISK LET STATEMENT ALLOWS THE USER TO MATHEMATICALLY COMBINE
SELECTED PORTIONS OF SEVERAL ARRAYS, AND ASSIGN THE RESULT TO
SELECTED ELEMENTS IN THE LEFT-HAND ARRAY OR VARIABLE.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^LET A(10,*)=B(*)
.SKIP 1
LET A(B(C(*)))=A(B(C(*))+1)
.SKIP 1
LET A(*,10,C(*))=D(*,*)\\
.FILL
.PAGE
^^LET\\ (STACKED FORM)
.SKIP 2
.INDENT -6
^FORM:#^^[LET] VAR(*)=EXP(*),EXP(*),...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^BECAUSE ASTERISK SUBSCRIPTING FACILITATES AN AUTOMATIC
LOOPING PROCESS, IT IS OFTEN DESIRABLE TO SET ALL OR PORTIONS OF
AN ARRAY EQUAL TO ALL OR PORTIONS OF A SERIES OF OTHER ARRAYS OR
EXPRESSIONS. ^THEREFORE, THE ^^BBL\\ LET STATEMENT CAN BE
STRUCTURED TO ALLOW "STACKING" OF EXPRESSIONS ON THE RIGHT SIDE
OF THE EQUAL SIGN.
.SKIP 1
^EACH EXPRESSION TO THE RIGHT SIDE MAY OR MAY NOT CONTAIN ASTERISK
SUBSCRIPTS. ^THE STACKED FORM IS DIFFERENTIATED FROM OTHER FORMS BY MORE
THAN ONE EXPRESSION TO THE RIGHT OF THE EQUAL, AND NOT
NECESSARILY BY ASTERISK SUBSCRIPTS
FOUND WITHIN THESE RIGHT SIDE EXPRESSION, OR BY ASTERISKS FOUND
WITHIN THE LEFT SIDE ASSIGNMENT VARIABLE.
.SKIP 1
^FOR PURPOSES OF EXPLAINING THE EXECUTION SEQUENCE OF THIS FORM
OF THE LET STATEMENT, CONSIDER THE EXAMPLE:
.SKIP 1
.INDENT 15
^^100 LET A(*)=B(*),C(*)\\
.SKIP 1
^THIS STATEMENT IS EXECUTED BY INCREMENTING ^A(*) AND ^B(*) IN
PARALLEL AND EQUATING:
.SKIP 1
.INDENT 15
^^100 LET A(*)=B(*)\\
.SKIP 1
UNTIL ^B(*) IS EXHAUSTED. ^INCREMENTING OF THE RIGHT SIDE THEN MOVES
ON THE THE NEXT EXPRESSION IN THE "STACK" OF EXPRESSIONS, IN THIS
CASE ^C(*). ^A(*) CONTINUES TO BE INCREMENTED FROM WHERE IT LEFT
OFF WITH ^B(*), AND ^C(*) IS INCREMENTED IN PARALLEL STARTING AT
^C(1). ^THE STATEMENT CONTINUES EXECUTION AS:
.SKIP 1
.INDENT 15
^^100 LET A(*)=C(*)\\
.SKIP 1
^IN THIS WAY, THE FIRST PORTION OF ^A(*) COULD BE SET EQUAL
TO ^B(*), AND THE SECOND PORTION OF ^A(*) COULD BE EQUATED TO
^C(*). ^THE IMPORTANT CONVENTION HERE IS THAT THE 
VARIABLE TO WHICH THE ASSIGNMENT IS BEING MADE (^A(*)) IS
CONTINUOUSLY INCREMENTED UPWARD AS THE STATEMENT PROCEEDS THROUGH
RIGHT-HAND SIDE EXPRESSIONS.
^IF ^A(*) HAD BECOME EXHAUSTED DURING THE PROCESS, EXECUTION
WOULD HAVE PROCEEDED TO THE NEXT STATEMENT WITH SOME ELEMENTS OF
^C(*) (OR BOTH ^B(*) AND ^C(*)) BEING UNTOUCHED. ^THE RULE IS:
.SKIP 1
.LEFT MARGIN 25
.INDENT -2
_.#^INCREMENT (*)'S IN PARALLEL UNTIL ONE BECOMES EXHAUSTED. ^IF
IT IS WITHIN A RIGHT-HAND SIDE EXPRESSION, MOVE TO THE NEXT
EXPRESSION IN THE STACK OF RIGHT-HAND EXPRESSIONS AND CONTINUE
WITH THE ASSIGNMENT VARIABLE UNINTERRUPTED. ^IF NO MORE RIGHT-HAND
SIDE EXPRESSIONS ARE AVAILABLE, OR THE EXHAUSTED (*) IS WITHIN THE
LEFT-HAND ASSIGNMENT VARIABLE, PROCEED TO THE NEXT STATEMENT.
.SKIP 1
.LEFT MARGIN 20
^EXPRESSIONS TO THE RIGHT-HAND SIDE OF THE EQUAL SIGN NEED NOT
BE (*) EXPRESSIONS. ^FOR EXAMPLE:
.SKIP 1
.INDENT 2
^^200 LET A(*)=20,20,35,35,35,40,40,40,30,30\\
.SKIP 1
^EXECUTION OF THIS STATEMENT SIMPLY SKIPS FROM ONE CONSTANT
TO THE NEXT AS ^A(*) IS INCREMENTED, LOADING ^A(1)
THROUGH ^A(10) WITH THE 10 VALUES SPECIFIED.
.SKIP 1
^SIMILARLY, THE LEFT-HAND SIDE ASSIGNMENT VARIABLE NEED NOT
CONTAIN ASTERISK SUBSCRIPTS. FOR EXAMPLE:
.SKIP 1
.INDENT 15
^^300 LET T=T+C(*),T+D(*)\\
.SKIP 1
^IN STATEMENT 300 ABOVE, VALUES IN ARRAY ^C(*) ARE SUMMED ONE BY
ONE WITH VARIABLE ^T AND ASSIGNED TO ^T. ^NEXT THE SAME IS DONE
WITH ARRAY ^D(*). ^THE NET EFFECT IS TO SUM BOTH
ARRAYS ^C(*) AND ^D(*) AND ASSIGN THE TOTAL
OF BOTH TO ^T.
.SKIP 1
^SINCE STACKING ALLOWS SEVERAL EXPRESSIONS TO THE RIGHT-HAND SIDE
OF THE EQUAL SIGN, THE USER MAY WISH TO REPEAT EXPRESSIONS. ^THIS
CAN BE DONE EXPLICITLY OR WITH THE STANDARD ^^BBL\\ REPEATER
SYMBOL ":". ^IF A RIGHT-HAND FIELD EXPRESSION BEGINS WITH A
POSITIVE WHOLE NUMBER FOLLOWED BY ":", THE EXPRESSION WHICH
FOLLOWS IS REPEATED THE NUMBER OF TIMES INDICATED WHEN
EXECUTED. ^FOR EXAMPLE:
.SKIP 1
.INDENT 15
^^400 LET A(*)=5:B(*)\\
.SKIP 1
WOULD BRING ABOUT THE SAME RESULT AS:
.SKIP 1
.INDENT 5
^^400 LET A(*)=B(*),B(*),B(*),B(*),B(*)\\
.SKIP 1
^IN THIS EXAMPLE, EACH TIME ^B(*) IS EXHAUSTED, IT IS RESET
TO ^B(1) AND INCREMENTED AGAIN UNTIL ^B(*) HAS BEEN EXHAUSTED
FIVE TIMES (OR ^A(*) BECOMES EXHAUSTED.) ^THE REPEATER FIELD TO
THE RIGHT-HAND SIDE OF THE EQUAL SIGN IMPLIES STACKING. ^SEVERAL
DIFFERENT STACKED FIELDS CAN EACH BE REPEATED.  ^THE
EARLIER EXAMPLE COULD HAVE BEEN SIMPLIFIED AS:
.SKIP 1
.INDENT 5
^^200 LET A(*)=2:20,3:35,3:40,2:30\\
.SKIP 1
^FINALLY, INDIRECT ASTERISK SUBSCRIPTING IS PERMISSIBLE WITHIN
ANY PORTION OF A STACKED LET STATEMENT:
.SKIP 1
.INDENT 5
^^500 LET B(A(*)+I)=C(*),2:D(E(*))*100%\\
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^LET X(*)=5:Y(*)/Z(*)
.SKIP 1
LET X(5,*)=10:A6,10:B6,10:C6
.SKIP 1
LET X(I(*))=Y,Z,P,Q(*),M+N\\
.FILL
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^I^X
.PAGE
.CENTER 65
^^ROW\\, ^^COL\\, AND ^^REP\\ ^VARIABLES --
.CENTER 65
^THE ^IMPLIED ^ASTERISK
.SKIP 4
.PARAGRAPH
^^BBL\\ PROVIDES TWO SPECIAL VARIABLES WHICH CAN REFERENCE ENTIRE
ROWS OR COLUMNS WITHIN ANY STANDARD DOUBLY DIMENSIONED ARRAY
(MATRIX). ^THESE VARIABLES ARE NAMED WITH THE WORD "^^ROW\\" OR
"^^COL\\" FOLLOWED BY ONE OR TWO INTEGERS DESIGNATING THE ROW OR
COLUMN NUMBER:
.SKIP 1
.LEFT MARGIN 20
.NOFILL
^^
ROW0, ROW1, ROW2, ..., ROW99
COL0, COL1, COL2, ..., COL99
\\
.FILL
.LEFT MARGIN 5
.SKIP 1
^AN OPTIONAL SINGLE SUBSCRIPT IS PERMITTED ON ANY ^^ROW/COL\\
VARIABLE. ^THE SUBSCRIPT DESIGNATES A SPECIFIC ELEMENT WITHIN THE
ROW OR COLUMN. FOR EXAMPLE:
.SKIP 1
.NOFILL
.LEFT MARGIN 20
^^
ROW1(10)  ROW99(12)  ROW26(A+B)
COL12(2)  COL35(35)  COL26(I7)
\\
.SKIP 1
.FILL
.LEFT MARGIN 5
.PARAGRAPH
^IF A ^^ROW/COL\\ VARIABLE IS REFERENCED WITHOUT A SUBSCRIPT,
AN IMPLIED ASTERISK SUBSCRIPT IS ASSUMED. ^THEREFORE:
.SKIP 1
.INDENT 25
^^ROW1\\
.SKIP 1
IS THE SAME AS:
.SKIP 1
.INDENT 25
^^ROW1(*)\\
.SKIP 1
.PARAGRAPH
^THESE TWO VARIABLES GENERALLY BEHAVE AS SINGLE SUBSCRIPTED ARRAYS,
REFERENCING PORTIONS OF A MATRIX. ^IF USED WITH SPECIFIC
SUBSCRIPTS (OTHER THAN (*)'S) THEY CAN BE REFERENCED IN ANY
STANDARD ^^BBL\\ EXPRESSION. ^IF USED WITH AN (*) SUBSCRIPT
(EXPLICIT OR IMPLIED), ^^ROW/COL\\ VARIABLES CAN BE USED IN ANY
EXPRESSIONS WHICH ALLOW THE (*) CAPABILITY. (^^BBL\\ ^STATEMENT
^SUMMARY DETAILS WHERE (*)'S ARE PERMITTED.)
.PARAGRAPH
^^ROW/COL\\ VARIABLES, UNLIKE OTHER ARRAYS, SHOULD BE ASSOCIATED
WITH A SPECIFIC MATRIX (USUALLY THE SPECIAL MATRIX "^^REP\\"
EXPLAINED LATER IN THIS SECTION), AND ^^ROW/COL\\ VARIABLES ARE
NOT DIMENSIONED SINCE THEIR SIZE DEPENDS UPON THE ASSOCIATED
MATRIX.
.PARAGRAPH
^THE ASSOCIATION BETWEEN THE ^^ROW\\ OR ^^COL\\ VARIABLE
AND ITS "PARENT" MATRIX IS ACCOMPLISHED WITH AN "^^ASSUME\\"
STATEMENT. ^THIS STATEMENT SPECIFIES A SPECIFIC MATRIX WHICH WILL
BE "ASSUMED" EACH TIME A ^^ROW/COL\\ VARIABLE IS REFERENCED. ^FOR
EXAMPLE, IF MATRIX ^A(*,*) WERE ASSUMED, A REFERENCE TO ^^ROW1\\
WOULD IMPLY A PORTION OF MATRIX ^A(*,*):
.SKIP 1
.NOFILL
.LEFT MARGIN 20
^^
100 ASSUME A(*,*)
200 ROW1=10,20,30,40,50
300 COL4=COL2+COL3
400 ROW2(1)=ROW2(2)+ROW3(2)
\\
.SKIP 1
.LEFT MARGIN 5
.FILL
^STATEMENT 200 IN THIS EXAMPLE IS THE SAME AS:
.SKIP 1
.INDENT 15
^^200 A(1,*)=10,20,30,40,50\\
.SKIP 1
SINCE IT SPECIFIES THAT ALL ELEMENTS IN ^^ROW1\\ (I.E. LEFT HAND
SUBSCRIPT=1) BE SET EQUAL TO A SERIES OF CONSTANTS. ^SIMILARLY,
STATEMENT 300 IS THE SAME AS:
.SKIP 1
.INDENT 15
^^300 A(*,4)=A(*,2)+A(*,3)\\
.SKIP 1
^IF SPECIFIC ELEMENTS WITHIN A ^^ROW/COL\\ ARE REFERENCED, AS IN
STATEMENT 400, THE STATEMENT CAN BE REWRITTEN USING THE PARENT
MATIRX WITHOUT (*) SUBSCRIPTS:
.SKIP 1
.INDENT 15
^^400 A(2,1)=A(2,2)+A(3,2)\\
.SKIP 1
.PARAGRAPH
^NOTE THAT THE PARENT MATRIX DETERMINES THE DIMENSIONS OF A
^^ROW/COL\\ VARIABLE. ^IF THE PARENT MATRIX IS REDEFINED WITH A
SECOND ASSUME STATEMENT, REFERENCING A ^^ROW/COL\\ MAY IMPLY A
DIFFERENT NUMBER OF SUBSCRIPT ELEMENTS. ^CONSIDER THE EXAMPLE
BELOW:
.SKIP 1
.NOFILL
.LEFT MARGIN 20
^^
100 DIMENSION A(10,10),B(20,20)
200 ASSUME A(*,*)
300 ROW1=ROW2+ROW3
400 ASSUME B(*,*)
500 ROW1=ROW2+ROW3
\\
.SKIP 1
.FILL
.LEFT MARGIN 5
^IN STATEMENT 300, ROWS 1, 2, AND 3 ARE 10 ELEMENTS LONG. ^IN
STATEMENT 500 THE SAME ROWS ARE 20 ELEMENTS LONG.
.PARAGRAPH
^IT IS IMPORTANT TO KEEP IN MIND THAT A ^^ROW/COL\\ VARIABLE ALWAYS
REFERS BACK TO THE PARENT MATRIX .
^IF USED AS A SUBSCRIPT TO ANOTHER ARRAY, AN
INDIRECT ASTERISK SUBSCRIPTING OPERATION IS IMPLIED. ^FOR EXAMPLE,
ASSUMING PARENT MATRIX ^B(*,*):
.SKIP 1
.INDENT 15
^^100 LET C(ROW1,COL2)=10\\
.SKIP 1
IS EXACTLY THE SAME AS:
.SKIP 1
.INDENT 15
^^100 LET C(B(1,*),B(*,2))=10\\
.SKIP 1
.PARAGRAPH
^IN ORDER TO BETTER UNDERSTAND ^^ROW/COL\\ VARIABLE USAGE, AN
EXAMPLE USING EACH FORM OF THE LET STATEMENT FOLLOWS:
.LEFT MARGIN 10
.SKIP 1
.INDENT -3
1.#^STANDARD ^LET ^STATEMENT:
.SKIP 1
.INDENT 10
^^100 LET ROW1(A)=ROW2(A)*ROW3(A+I)/110%\\
.SKIP 1
.INDENT -3
2.#^SINGLE ^ASTERISK ^LET ^STATEMENT:
.SKIP 1
.INDENT 10
^^200 LET ROW12=16.2\\
.SKIP 1
.INDENT -3
3.#^DOUBLE ^ASTERISK ^LET ^STATEMENT:
.SKIP 1
.INDENT 10
^^300 LET COL26=COL24/COL25\\
.SKIP 1
.INDENT -3
4.#^STACKED ^LET ^STATEMENT:
.SKIP 1
.INDENT 10
^^400 LET COL10=5:A+B,5:A+C,B(*)\\
.LEFT MARGIN 5
.SKIP 1
(^NOTE: ^EXCEPTIONS TO THE RULE THAT ^^ROW/COL\\ VARIABLES CAN
BE USED IN ALL PLACES THAT PERMIT STANDARD ^^BBL\\
VARIABLES ARE EXPLICITLY DETAILED IN THE ^^BBL\\ ^STATEMENT
^SUMMARY.)
.SKIP 1
.PARAGRAPH
^A THIRD VARIABLE WHICH MAY OR MAY NOT BE EXPRESSED WITH A SUBSCRIPT
IS THE "^^REP\\" OR REPORT VARIABLE. ^REPORT VARIABLES ARE ALWAYS
DOUBLY SUBSCRIPTED ARRAYS (MATRICES), AND ARE NAMED WITH THE
WORD "^^REP\\" FOLLOWED BY ONE OR TWO INTEGERS:
.SKIP 1
.INDENT 15
^^REP0, REP1, REP2, ..., REP99\\
.SKIP 1
.PARAGRAPH
^AN OPTIONAL DOUBLE SUBSCRIPT IS PERMITTED ON ANY ^^REP\\ VARIABLE,
THE SUBSCRIPT DESIGNATING THE SPECIFIC ROW AND COLUMN NUMBER WITHIN
THE MATRIX. ^FOR EXAMPLE:
.SKIP 1
.NOFILL
.INDENT 15
^^REP1(10,2)     REP12(A,J+K)\\
.FILL
.SKIP 1
.PARAGRAPH
^IF A ^^REP\\ VARIABLE IS REFERENCED WITHOUT A SUBSCRIPT,
AN IMPLIED DOUBLE ASTERISK SUBSCRIPT IS ASSUMED. ^THEREFORE:
.SKIP 1
.INDENT 25
^^REP1\\
.SKIP 1
IS THE SAME AS:
.SKIP 1
.INDENT 25
^^REP1(*,*)\\
.SKIP 1
.PARAGRAPH
^A ^^REP\\ VARIABLE GENERALLY BEHAVES AS A DOUBLY SUBSCRIPTED
ARRAY. ^IF REFERENCED WITH SPECIFIC SUBSCRIPTS OTHER THAN (*)'S,
A ^^REP\\ VARIABLE CAN BE REFERENCED WITHIN ANY STANDARD ^^BBL\\
EXPRESSION. ^IF USED WITH ONE OR TWO (*) SUBSCRIPTS, ^^REP\\
VARIABLES ARE PERMITTED IN ANY STATEMENT WHICH ALLOWS THE (*)
CAPABILITY. (^THE ^^BBL\\ ^STATEMENT ^SUMMARY DETAILS WHERE (*)'S
ARE PERMITTED.)
.PARAGRAPH
^^REP\\ VARIABLES ALSO FOLLOW THE STANDARD ^^BBL\\ CONVENTION OF
ASSUMING SUBSCRIPT MAXIMUMS OF 10, IF NOT EXPLICITLY DIMENSIONED
IN A DIMENSION STATEMENT OR ALTERNATIVELY IN A "^^DEFINE REPORT\\"
STATEMENT. (^THE DEFINE REPORT STATEMENT IS DISCUSSED LATER IN
THIS SECTION.) ^THEREFORE, REFERENCING UNDIMENSIONED ^^REP1(I,J)\\ WILL
ESTABLISH A MATRIX WITH ASSUMED DIMENSIONS ^^REP1(10,10)\\.
^MOST OFTEN THE ^^REP\\ VARIABLE WILL BE DIMENSIONED VIA A
DEFINE REPORT STATEMENT.
.PARAGRAPH
^THOUGH ^^REP\\ VARIABLES APPEAR SOMEWHAT UNIQUE, THEIR
ONLY UNIQUE PROPERTY, OTHER THAN THEIR NAME, IS THE IMPLIED
DOUBLE ASTERISK SUBSCRIPT WHEN USED WITHOUT A SUBSCRIPT.
.PARAGRAPH
^AS STATED EARLIER, ^^REP\\ VARIABLES ARE OFTEN SET UP AS PARENT
MATRICES FOR ^^ROW/COL\\ VARIABLES. ^IN THE EXAMPLE BELOW, ^^REP1\\
IS ASSUMED AND SUBSEQUENT ^^ROW/COL\\ USAGE WILL THEREFORE REFERENCE
PORTIONS OF ^^REP1\\:
.SKIP 1
.NOFILL
.LEFT MARGIN 20
^^
100 ASSUME REP1
200 ROW1=100,50,20,2:0
300 ROW2=25%,26%,27%,28%,29%
400 ROW3=ROW1*ROW2
500 ROW4=ROW1-ROW3
600 COL6=COL1+COL2+COL3+COL4+COL5
\\
.SKIP 1
.FILL
.LEFT MARGIN 5
.PARAGRAPH
^FURTHER EXAMPLES OF ^^ROW/COL\\ VARIABLES AND ^^REP\\
VARIABLES ARE FOUND IN THE DESCRIPTIONS OF THE ASSUME
STATEMENT, THE DEFINE REPORT STATEMENT, AND THE SHOW STATEMENTS
WHICH FOLLOW IN THIS SECTION.
.PAGE
.LEFT MARGIN 20
^^ASSUME\\
.SKIP 2
.INDENT -6
^FORM:#^^ASSUME VAR[(*,*)]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ASSUME STATEMENT IS USED TO DESIGNATE A DOUBLY
SUBSCRIPTED ARRAY (MATRIX) TO WHICH SUBSEQUENT ^^ROW/COL\\
REFERENCES REFER. (^NOTE THAT THE DESIGNATED PARENT MATRIX CAN BE
SPECIFIED WITH OR WITHOUT AN OPTIONAL (*,*) SUBSCRIPT. ^THE (*,*)
DOES NOT CHANGE THE MEANING OF THE STATEMENT, AND IS ALLOWED FOR
CLARITY AND CONSISTENCY WITH THE * SUBSCRIPT
CAPABILITY OF ^^BBL\\.)
.SKIP 1
^WHEN AN ASSUME STATEMENT IS EXECUTED, THE DIMENSIONS OF THE 
SPECIFIED PARENT MATRIX ARE ESTABLISHED AS THE DIMENSIONS OF ANY
FOLLOWING ^^ROW/COL\\ VARIABLE.
.SKIP 1
^A ^^BBL\\ PROGRAM CAN HAVE MANY ASSUME STATEMENTS, SO THAT
THE PARENT MARTIX CAN BE VARIED FROM ONE MATRIX TO
ANOTHER. ^YET, AT ANY ONE TIME, ONLY ONE MATRIX MAY
BE THE ASSUMED PARENT.
.SKIP 1
^IF A ^^BBL\\ PROGRAM MAKES REFERENCE TO A ^^ROW/COL\\
VARIABLE PRIOR TO EXECUTION OF AN ASSUME STATEMENT, THE LOWEST
NUMBERED ^REP\\ VARIABLE REFERENCED IN THE ENTIRE PROGRAM IS
ASSUMED. (^CARE SHOULD BE USED IF MAKING USE OF THIS FEATURE. ^IF
NO ^^REP\\ VARIABLE HAS BEEN USED IN THE PROGRAM, ^^ROW/COL\\ VARIABLES
SHOULD ONLY BE USED AFTER EXECUTION OF AN ASSUME STATEMENT.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^ASSUME REP1
.SKIP 1
ASSUME REP2(*,*)
.SKIP 1
ASSUME M
.SKIP 1
ASSUME M(*,*)\\
.FILL
.PAGE
^^DEFINE REPORT\\
.SKIP 2
.INDENT -6
^FORM:#^^DEFINE VAR(CON,CON),VAR(CON,CON),...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE DEFINE REPORT STATEMENT SERVES TWO PURPOSES.
^FIRST, THIS STATEMENT CAN BE USED AS AN ALTERNATE WAY TO
SPECIFY THE MAXIMUM DIMENSIONS OF A MATRIX, SINCE A MATRIX 
REFERENCED IN A DEFINE STATEMENT NEED NOT BE DIMENSIONED IN
A NORMAL DIMENSION STATEMENT. ^SECONDLY, AND MORE IMPORTANTLY, THE
DEFINE REPORT STATEMENT ESTABLISHES THE BEGINNING OF A BLOCK OF
LINES WHICH ^^BBL\\ WILL TREAT AS REPORT FORMAT LINES. ^EACH FORMAT
LINE IS INDICATED BY A "^^SHOW\\" STATEMENT, AND THE
ENTIRE BLOCK OF SHOW STATEMENTS REPRESENTS THE DESIRED OUTPUT
FORMAT FOR EACH OF THE REPORTS DEFINED IN THE INITIAL
DEFINE REPORT STATEMENT. ^THE BLOCK OF SHOW STATEMENTS CAN BE
TERMINATED WITH A "^^REPEND\\" STATEMENT. ^AN ENTIRE REPORT DEFINITION
CAN BE PICTURED AS:
.SKIP 1
.NOFILL
.LEFT MARGIN 30
^^
DEFINE REPORT STATEMENT
    SHOW STATEMENT
    SHOW STATEMENT
    SHOW STATEMENT
          .
          .
          .
    SHOW STATEMENT
   REPEND STATEMENT
\\
.LEFT MARGIN 20
.FILL
.SKIP 1
^ANY MATRIX DEFINED IN A DEFINE REPORT STATEMENT CAN BE
DISPLAYED IN A REPORT FORM VIA THE "^^DISPLAY\\" STATEMENT
(EXPLAINED LATER IN THIS SECTION.) ^WHEN A DISPLAY TRIGGERS PRINTING
OF A REPORT, THE SHOW STATEMENT BLOCK FOLLOWING THE ASSOCIATED
DEFINE REPORT STATEMENT CONTROLS THE FORMAT OF THE REPORT BEING
GENERATED. ^FOR EXAMPLE, STATEMENTS 100 THROUGH 800 FULLY DEFINE
A REPORT, WHILE STATEMENT 900 EXECUTES THE PRINTING OF THE REPORT:
.SKIP 1
.NOFILL
.LEFT MARGIN 25
.TEST PAGE 13
^^
100 DEFINE REP1(5,5)
200 SHOW ><"XYZ COMPANY"
250 SHOW ><"PROFIT _& LOSS STATEMENT"
300 SHOW //"GROSS SALES", ROW1
400 SHOW "C.O.G.S.", ROW2
500 SHOW "GROSS PROFIT", ROW3
600 SHOW "TAX", ROW4
700 SHOW "PROFIT AFTER TAX", ROW5
800 REPEND
      .
      .
      .
900 DISPLAY REP1
\\
.SKIP 1
.FILL
.LEFT MARGIN 20
^SINCE A DEFINE REPORT STATEMENT ALSO SETS ASIDE THE REQUIRED
MEMORY FOR A REPORT MATRIX, THE MATRICES SPECIFIED IN A DEFINE
REPORT SHOULD BE DOUBLY SUBSCRIPTED WITH THE MAXIMUM SUBSCRIPT
SIZE DESIRED (IN A WAY SIMILAR TO THE STANDARD DIMENSION STATEMENT.)
^MORE THAN ONE REPORT MATRIX CAN BE DEFINED IN THE SAME STATEMENT,
SO THAT TWO OR MORE REPORT MATRICES CAN HAVE THE SAME OUTPUT
FORMAT. (^THIS FEATURE IS PARTICULARLY CONVENIENT WHEN PROGRAMMING
CONSOLIDATION REPORTS, OR WHEN PROGRAMMING
MONTE CARLO MODELS WHICH REQUIRE A TRIAL REPORT AND AN AVERAGE
REPORT ACROSS ALL TRIALS.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^DEFINE REP1(10,10)
.SKIP 1
DEFINE REP1(5,5),REP2(5,5),REP3(5,5)
.SKIP 1
DEFINE A(10,10),REP1(10,20)\\
.FILL
.PAGE
^^SHOW\\ (ALPHANUMERIC FORM)
.SKIP 2
.INDENT -6
^FORM:#^^SHOW "ALPHAS",VAR$(EXP),...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE SHOW STATEMENT IS USED TO DESCRIBE THE FORMAT
EACH LINE OF OUTPUT SHOULD TAKE WHEN A DISPLAY REPORT STATEMENT
IS EXECUTED. ^THE SHOW STATEMENT, AS RELATED TO THE DEFINE
REPORT STATEMENT, CAN TAKE ON TWO FORMS:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#ONLY ALPHANUMERIC CONSTANTS OR STRING VARIABLES
SPECIFIED -- THE ALPHANUMERIC FORM;
.SKIP 1
.INDENT -3
2.#^OPTIONAL LEADING ALPHANUMERIC CONSTANTS (NO STRING VARIABLES)
AND AT LEAST ONE TRAILING NUMERIC FIELD -- THE NUMERIC FORM.
.LEFT MARGIN 20
.SKIP 1
(^THE NUMERIC FORM OF THE SHOW STATEMENT IS DISCUSSED FOLLOWING
THIS DISCUSSION OF THE ALPHANUMERIC FORM.)
.SKIP 1
^IN GENERAL, SHOW STATEMENTS WILL ONLY BE EXECUTED WHEN CALLED
UPON BY A DISPLAY STATEMENT. ^WHEN A SHOW STATEMENT IS EXECUTED,
THE ACTION IS SIMILAR, BUT NOT COMPLETELY THE SAME AS A 
STANDARD ^^BBL\\ PRINT STATEMENT.
.SKIP 1
^WHEN A DISPLAY STATEMENT TRIGGERS THE ALPHANUMERIC SHOW STATEMENT
INTO CREATING OUTPUT, THE ALPHANUMERICS DESIGNATED IN THE SHOW ARE
PREPARED FOR OUTPUT USING ALL THE STANDARD ^^BBL\\ PRINT OPTIONS
FOR ALPHANUMERIC FIELDS (I.E. /, :, >, <, ><).
(^IN ADDITION, TWO SPECIAL JUSTIFIERS, >> AND <<, ARE PERMITTED.
^THESE ARE DISCUSSED LATER.)
^IF THE ALPHANUMERICS WILL FIT ON A SINGLE LINE, THEY ARE PRINTED,
AND THE OUTPUT CONTROL MOVES TO THE NEXT SHOW STATEMENT IN NORMAL
LINE NUMBER SEQUENCE. ^IF, HOWEVER, THE ALPHANUMERICS ARE LONGER
THAN CAN APPEAR ON ONE LINE, ONLY THE FIRST LINE IS OUTPUT FOR THE
TIME BEING, BUT ^^BBL\\ WILL RECOGNIZE THAT FURTHER OUTPUT IS
AVAILABLE. ^THEREFORE, AFTER ALL SHOW STATEMENTS HAVE BEEN OUTPUT,
^^BBL\\ RECYCLES CONTROL TO THE FIRST SHOW STATEMENT FOR
A SECOND PASS. ^DURING THE SECOND PASS, SHOWS WITH LONG ALPHANUMERICS
HAVE THE SECOND LINE OUTPUT. (^SHOWS WITH SHORT ALPHANUMERICS, I.E.
ONE LINE OR LESS, HAVE THE SAME OUTPUT REPEATED.) ^IF AFTER
THE SECOND PASS THROUGH THE SHOWS, ONE OR MORE SHOWS STILL HAS
ALPHANUMERICS YET TO BE DISPLAYED, A THIRD PASS THROUGH THE SHOWS
WILL BE MADE, AND SO FORTH.
.SKIP 1
^THIS RECYCLING THROUGH THE SHOW STATEMENTS IS THEREFORE
"BLOCKING" THE REPORT FORMAT INTO SECTIONS WHICH WILL EACH FIT ONTO
ONE PRINTED PAGE. (^THE PAGE WIDTH CAN BE SET VIA THE "^^WIDTH\\"
STATEMENT.) ^^BBL\\ WILL CONTINUE BLOCKING UNTIL ALL OF EACH
ALPHANUMERIC SHOW HAS BEEN SEEN. ^THE EXAMPLE BELOW ASSUMES THAT
THE WIDTH OF AN OUTPUT PAGE IS 5 COLUMNS. ^TWO PASSES ARE MADE
THROUGH THE SHOW STATEMENTS WHENEVER A DISPLAY CALLS FOR A REPORT
TO BE OUTPUT:
.SKIP 2
.NOFILL
.RIGHT MARGIN 75
.TEST PAGE 12
^^
100 DEFINE REP1(2,8)
110 SHOW /"XYZ COMPANY"
115 SHOW
120 SHOW " ",4:>"YEAR"," ",4:>"YEAR"
130 SHOW " ",>"1",>"2",>"3",>"4"," ",>"5",
                            >"6",>"7",>"8"
140 SHOW "SALES"
150 SHOW "COGS"
160 REPEND
170 DISPLAY REP1
180 END
RUN
.TEST PAGE 15
EXECUTION
.SKIP 1
XYZ COMPANY
.SKIP 1
              YEAR    YEAR    YEAR    YEAR
                 1       2       3       4
SALES
COGS
.SKIP 1
XYZ COMPANY
.SKIP 1
              YEAR    YEAR    YEAR    YEAR
                 5       6       7       8
SALES
COGS
\\
.FILL
.RIGHT MARGIN 65
.SKIP 1
^IN THIS EXAMPLE, LINES 120 AND 130 EACH
SPECIFY TWO FULL LINES OF OUTPUT, THEREFORE REQUIRING TWO
"BLOCKING" PASSES THROUGH THE SHOW STATEMENTS. ^NOTE THAT THE
SHORT ALPHANUMERIC SHOW STATEMENTS (LINES 110, 115, 140,  AND 150)
ARE SIMPLY REPEATED ON THE SECOND PASS.
.SKIP 1
^BECAUSE THE USER CAN CONTROL THE PAGE WIDTH (^SEE THE WIDTH
STATEMENT), THIS SAME REPORT COULD BE BLOCKED INTO MORE
SECTIONS, OR OUTPUT IN A SINGLE PASS BY SPECIFYING A
WIDER PAGE WIDTH. (^NOTE THAT A BLANK ALPHANUMERIC FIELD
SHOULD BE SPECIFIED IN THIS FORM OF THE SHOW STATEMENT AS "#"
OR '#' SINCE THE ALTERNATIVE BLANK FIELD ,, IS INTERPRETED AS A NUMERIC FIELD AND BLOCKED ACCORDING
TO THE CONVENTIONS OF THE NUMERIC SHOW STATEMENT.)
.SKIP 1
^IF AN ALPHANUMERIC SHOW STATEMENT ENDS IN A COMMA OR SEMICOLON,
OUTPUT FROM THE NEXT SHOW STATEMENT CONTINUES ON THE SAME LINE
ACCORDING TO THE CONVENTIONS OF THE PRINT STATEMENT.
^THEREFORE, SEVERAL CONSECUTIVE SHOWS CAN BE STRUNG TOGETHER
LOGICALLY TO SPAN ANY NUMBER OF BLOCKED OUTPUT PAGES:
.SKIP 1
.RIGHT MARGIN 75
.NOFILL
^^
100 SHOW " ",>"JANUARY",>"FEBRUARY",>"MARCH",
150 SHOW " ",>"APRIL",>"MAY",>"JUNE",
200 SHOW " ",>"JULY",>"AUGUST",>"SEPTEMBER",
250 SHOW " ",>"OCTOBER",>"NOVEMBER",>"DECEMBER"
\\
.FILL
.RIGHT MARGIN 65
.SKIP 1
^TWO SPECIAL JUSTIFIERS, >> AND <<, ARE USED TO COORDINATE FIELD
JUSTIFICATION BETWEEN ALPHANUMERIC SHOW STATEMENTS AND NUMERIC SHOW
STATEMENTS. ^OFTEN ALPHA FIELDS ARE USED AS COLUMN HEADINGS, AND ARE
TO BE POSITIONED DIRECTLY OVER THE NEXT COLUMN WHICH CONTAINS
NUMERIC INFORMATION SPECIFIED BY A NUMERIC SHOW STATEMENT.
^THE >> SYMBOL SPECIFIES RIGHT JUSTIFICATION OVER THE NEXT NUMERIC
COLUMN, AND THE << SYMBOL SPECIFIES LEFT JUSTIFICATION OVER THE NEXT
NUMERIC COLUMN. ^IF THE MONTH NAMES IN THE EXAMPLE SHOWN ABOVE WERE
TO ALWAYS APPEAR OVER THE NEXT AVAILABLE NUMERIC COLUMN, THE EXAMPLE
COULD BE REWRITTEN AS:
.SKIP 1
.RIGHT MARGIN 75
.NOFILL
^^
100 SHOW >>"JANUARY",>>"FEBRUARY",>>"MARCH",
150 SHOW >>"APRIL",>>"MAY",>>"JUNE",
200 SHOW >>"JULY",>>"AUGUST",>>"SEPTEMBER",
250 SHOW >>"OCTOBER",>>"NOVEMBER",>>"DECEMBER"
\\
.FILL
.RIGHT MARGIN 65
.SKIP 1
^SEE THE FOLLOWING DISCUSSION OF NUMERIC SHOW STATEMENTS FOR FURTHER
EXAMPLES.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^SHOW " ",>"1973",>"1974",>"1975",>"1976"
.SKIP 1
SHOW 10:>"========"
.SKIP 1
SHOW //><"XYZ P_&L STATEMENT",/><"(000'S)"\\
.FILL
.PAGE
^^SHOW\\ (NUMERIC FORM)
.SKIP 2
.INDENT -6
^FORM:#^^SHOW "ALPHAS","ALPHAS",...,EXP,EXP,...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE SECOND FORM OF THE SHOW STATEMENT INCLUDES BOTH
ALPHANUMERIC FIELDS (NO STRING VARIABLES) AND NUMERIC FIELDS,
WHICH MUST APPEAR AFTER ALL ALPHANUMERIC FIELDS.
.SKIP 1
^THIS FORM OF THE SHOW IS EXECUTED IN THE SAME WAY AS AN ALPHANUMERIC
SHOW STATEMENT WITH ONE DIFFERENCE IN HOW 
^^BBL\\ BLOCKS THE OUTPUT. ^THIS FORM OF THE SHOW SHOULD SPECIFY
ALPHANUMERIC FIELDS IN SUCH A WAY THAT AT LEAST ONE NUMERIC
FIELD CAN BE OUTPUT ON THE SAME LINE AS THE ENTIRE SET OF
ALPHANUMERIC FIELDS. ^SINCE THE ALPHANUMERIC FIELDS CAN NEVER
OCCUPY A FULL LINE, BLOCKING IS CONTROLED BY THE TRAILING
NUMERIC FIELDS. ^THE FIRST TIME THE SHOW IS EXECUTED (VIA A
DISPLAY STATEMENT), ALL THE ALPHANUMERIC FIELDS ARE PRINTED ALONG
WITH AS MANY OF THE NUMERIC FIELDS AS WILL FIT ON THE REMAINDER
OF THE LINE. ^IF MORE NUMERIC FIELDS REMAIN TO BE SHOWN, THEY WILL
BE SHOWN ON THE SECOND PASS, AGAIN PRECEDED BY THE ALPHANUMERIC FIELDS,
IF ANY. ^IF STILL MORE NUMERIC FIELDS REMAIN, A THIRD BLOCKING
PASS IS MADE, AND SO FORTH.
.SKIP 1
^IN THE EXAMPLE BELOW, AN OUTPUT PAGE OF 5 COLUMNS IS ASSUMED.
^TWO PASSES ARE REQUIRED TO DISPLAY THIS REPORT:
.SKIP 2
.NOFILL
.RIGHT MARGIN 75
.TEST PAGE 14
^^
100 DEFINE REP1(2,8)
110 SHOW /"XYZ COMPANY"
115 SHOW
120 SHOW 8:>>"YEAR"
130 SHOW >>"1",>>"2",>>"3",>>"4",>>"5",
                           >>"6",>>"7",>>"8"
140 SHOW "SALES", ROW1
150 SHOW "COGS",  ROW2
160 REPEND
170 ROW1=100,110,120,5:130
180 ROW2=50%*ROW1
190 DISPLAY REP1
200 END
RUN
.TEST PAGE 15
EXECUTION
.SKIP 1
XYZ COMPANY
.SKIP 1
              YEAR    YEAR    YEAR    YEAR
                 1       2       3       4
SALES          100     110     120     130
COGS            50      55      60      65
.SKIP 1
XYZ COMPANY
.SKIP 1
              YEAR    YEAR    YEAR    YEAR
                 5       6       7       8
SALES          130     130     130     130
COGS            65      65      65      65
\\
.FILL
.RIGHT MARGIN 65
.SKIP 1
^IN THIS EXAMPLE, BOTH LINES 140 AND 150 ARE NUMERIC
FORMS OF THE SHOW STATEMENT, AND REQUIRE TWO
PASSES TO BE OUTPUT. ^ON EACH PASS THE LEADING ALPHANUMERIC
FIELD IS FOLLOWED BY FOUR NUMERIC FIELDS.
.SKIP 1
^ANY ALLOWED ^^BBL\\ PRINT STATEMENT OPTION FOR NUMERIC
FIELDS CAN BE USED (/, :, >, <, ><, $, %, !, .XXX).
^NOTE ALSO THAT ASTERISK NUMERIC FIELDS ARE USEFUL TO
DISPLAY ROWS OR COLUMNS FROM SELECTED REPORTS. (^ASTERISK
SUBSCRIPTS ARE PERMITTED IN STANDARD ^^BBL\\ PRINT STATEMENTS
ALONG WITH SHOW STATEMENTS AS DETAILED UNDER THE ^^BBL\\
STATEMENT SUMMARY.)
.SKIP 1
^BECAUSE THE ^^BBL\\ SYSTEM DISTINGUISHES BETWEEN ALPHANUMERIC AND
NUMERIC FIELDS IN DETERMINING WHETHER A SHOW STATEMENT IS
AN ALPHANUMERIC SHOW STATEMENT OR A NUMERIC SHOW STATEMENT, TWO
METHODS ARE PROVIDED FOR "SKIPPING" FIELDS. ^THESE TWO METHODS
FOR SPECIFYING BLANK FIELDS ARE:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#"#" OR '#' IS CONSIDERED A BLANK ALPHANUMERIC FIELD. (^A
BLANK IS REQUIRED BETWEEN THE SINGLE OR DOUBLE QUOTES.)
.SKIP 1
.INDENT -3
2.#,, IS CONSIDERED A BLANK NUMERIC FIELD.
.SKIP 1
.LEFT MARGIN 20
^WHEN A NUMERIC SHOW STATEMENT IS DISPLAYED, THE FIRST NUMERIC
FIELD SHOWN APPEARS IN THE FIRST FREE COLUMN AS DEFINED BY THE NUMERIC
SHOW STATEMENT WITH THE GREATEST NUMBER OF ALPHANUMERIC CHARACTERS.
^SOME LEADING ALPHANUMERIC FIELDS CAN BE SHORT, OTHERS LONG, AND
ALL WILL BE DISPLAYED WITH THE NUMERIC FIELDS BEGINNING
IN THE SAME OUTPUT COLUMN:
.SKIP 1
.NOFILL
.TEST PAGE 9
^^
100 DEFINE REP2(2,3)
110 SHOW /"SALES FOR YEARS 1972-1974",ROW1
120 SHOW "COGS", ROW2
130 REPEND
140 ROW1=100,110,120
150 ROW2=50%*ROW1
160 DISPLAY REP2
170 END
RUN
.TEST PAGE 4
EXECUTION
.SKIP 1
SALES FOR YEARS 1972-1974   100  110  120
COGS                         50   55   60
\\
.SKIP 1
.FILL
^AS DISCUSSED UNDER THE ALPHANUMERIC SHOW STATEMENT, THE SPECIAL
JUSTIFIERS >> AND << CAN BE USED WITHIN ALPHANUMERIC SHOW STATEMENTS
TO RIGHT AND LEFT JUSTIFY ALPHANUMERIC FIELDS OVER THE
NEXT AVAILABLE NUMERIC COLUMN.
.SKIP 1
^NUMERIC SHOW STATEMENTS CAN ALSO END IN A COMMA OR SEMICOLON
TO CAUSE SUBSEQUENT OUTPUT TO BE CONTINUED ON THE SAME LINE,
BUT SUBSEQUENT OUTPUT FROM THE NEXT SHOW STATEMENT SHOULD CONSIST
OF ADDITIONAL NUMERIC FIELDS:
.SKIP 1
.RIGHT MARGIN 75
.NOFILL
^^
100 SHOW "SUBTOTALS",,,ROW6(4),ROW6(5),,,ROW6(9),
100 SHOW ROW6(9),,,ROW6(12)
\\
.RIGHT MARGIN 65
.FILL
.SKIP 1
^THE DEFINE REPORT AND SHOW STATEMENT CAPABILITY COMBINE TO
PROVIDE THE ^^BBL\\ USER WITH AN EXTREMELY SIMPLE, YET FLEXIBLE
WAY TO BUILD MANAGEMENT REPORTS. ^^BBL\\ IS OFTEN A USEFUL
TOOL FOR MANY ANALYSTS WHO MAKE PRIMARY USE OF THE ^^BBL\\
"REPORT GENERATION" CAPABILITY.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^SHOW "SALES",ROW1.XXX
.SKIP 1
SHOW "TOTAL PROJECT COST",,,,,$ROW2(5)
.SKIP 1
SHOW " ",ROW3(*)%
.SKIP 1
SHOW ////\\
.FILL
.PAGE
^^REPEND\\
.SKIP 2
.INDENT -6
^FORM:#^^REPEND\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE REPEND STATEMENT SERVES TO DESIGNATE THE END
OF A COMPLETE REPORT DEFINITION. ^BETWEEN THE INITIAL DEFINE
REPORT STATEMENT AND THE ENDING REPEND STATEMENT, ANY NUMBER OF
^^BBL\\ SHOW STATEMENTS (ALPHANUMERIC FORM OR NUMERIC FORM)
MAY APPEAR. ^THE ENTIRE BLOCK OF LINES MAKING UP THE
REPORT DEFINITION IS USED ONLY WHEN REFERENCED
BY A DISPLAY STATEMENT.
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^REPEND\\
.FILL
.PAGE
^^DISPLAY\\ (REPORT FORM)
.SKIP 2
.RIGHT MARGIN 80
.INDENT -6
^FORM:#^^DISPLAY[(VAR[:VAR])] VAR[(*,*)],... [USING L1...]\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE REPORT FORM OF THE DISPLAY STATEMENT IS USED TO
TRIGGER THE OUTPUT OF A DEFINED ^^BBL\\ REPORT. ^THE DISPLAY
STATEMENT WILL OUTPUT THE REPORT TO THE CONSOLE UNLESS THE
OPTIONAL LOGICAL UNIT NUMBER IS USED TO SPECIFY OUTPUT TO
A SEQUENTIAL OR RANDOM ACCESS FILE.
.SKIP 1
^EACH DISPLAY SHOULD REFERENCE AT LEAST ONE REPORT MATRIX, I.E.
A MATRIX WHICH HAS BEEN DEFINED VIA A DEFINE REPORT STATEMENT.
(^THIS COULD BE A ^^REP\\ VARIABLE OR ANY STANDARD ^^BBL\\
DOUBLY SUBSCRIPTED ARRAY.) ^THE MATRIX MAY BE SPECIFIED
WITHOUT A SUBSCRIPT OR WITH A (*,*) SUBSCRIPT. ^THE (*,*) DOES
NOT CHANGE THE MEANING OF THE STATEMENT, AND IS ALLOWED FOR CLARITY
AND CONSISTENCY WITH THE * SUBSCRIPT CAPABILITY OF ^^BBL\\.
.SKIP 1
^WHEN A DISPLAY IS EXECUTED, THE BLOCK OF SHOW STATEMENTS WHICH DEFINE
THE FORMAT OF THE REPORT WILL CONTROL THE DISPLAY. (^SEE SHOW
STATEMENTS IN THIS SECTION.) ^IF THE OPTIONAL "^^USING\\" SERIES
OF LINE NUMBERS IS OMITTED, ALL SHOW STATEMENTS IN THE ASSOCIATED
BLOCK WILL BE DISPLAYED. ^IF THE "^^USING\\" SERIES
OF LINE NUMBERS IS SPECIFIED, ONLY THOSE LINE NUMBERS INDICATED
ARE DISPLAYED. ^THE "^^USING\\" OPTION MAY SPECIFY LINE NUMBERS
IN ANY ORDER, AND MAY REPEAT LINE NUMBERS. ^FURTHERMORE,
LINE NUMBERS CAN BE DISPLAYED SINGLY:
.SKIP 1
.INDENT 15
^^USING 10,12,18,22\\
.SKIP 1
OR HYPHENATED TO INDICATE A RANGE OF LINES (MINIMUM TO MAXIMUM)
TO DISPLAY:
.SKIP 1
.INDENT 15
^^USING 10-14,18-20\\
.SKIP 1
^IN ADDITION TO ROUTING CONTROL TO THE ASSOCIATED REPORT
OUTPUT DEFINITION, THE DISPLAY STATEMENT PERFORMS ONE ADDITIONAL
FUNCTION:
.SKIP 1
.TEST PAGE 6
.LEFT MARGIN 25
.INDENT -2
_.#^EACH TIME A REPORT MATRIX IS DISPLAYED, THE ^^BBL\\ ASSUMED
"PARENT" MATRIX IS TEMPORARILY SET TO THE REPORT MATRIX BEING
DISPLAYED. (^SEE ^^ROW/COL\\ VARIABLES AND THE ASSUME STATEMENT
IN THIS SECTION.)
.SKIP 1
.LEFT MARGIN 20
^BY TEMPORARILY REDEFINING THE ASSUMED PARENT MATRIX, THE DISPLAY
STATEMENT FACILITATES USING ^^ROW/COL\\ VARIABLES IN SHOW STATEMENTS
WHICH CAN BE ACCESSED BY DISPLAYS OF SEVERAL DIFFERENT REPORTS.
^FOR EXAMPLE, STATEMENT 310 WILL INITIATE THE DISPLAY OF BOTH
REPORTS ^^REP1\\ AND ^^REP2\\. ^WHEN ^^REP1\\ IS DISPLAYED, THE
ROW VARIABLES IN THE ASSOCIATED SHOW STATEMENTS ASSUME ^^REP1\\ IS
THE PARENT MATRIX. ^WHEN ^^REP2\\ IS DISPLAYED, THE ROW
VARIABLES ASSUME ^^REP2\\ IS THE PARENT MATRIX:
.SKIP 2
.LEFT MARGIN 25
.TEST PAGE 13
.NOFILL
^^
100 DEFINE REP1(5,5),REP2(5,5)
110 SHOW /"SALES",ROW1
120 SHOW "COGS",ROW2
130 SHOW "GROSS PROFIT",ROW3
140 SHOW "TAX",ROW4
150 SHOW "PROFIT AFTER TAX",ROW5
160 REPEND
170 ASSUME REP1
180 ROW1=110,120,130,140,130
              .
              .
              .
310 DISPLAY REP1,REP2
\\
.FILL
.LEFT MARGIN 20
.SKIP 2
^FURTHERMORE, AFTER BOTH REPORTS HAVE BEEN OUTPUT, ^^BBL\\
RE-ESTABLISHES THE ORIGINAL PARENT MATRIX WHICH WAS ASSUMED PRIOR
TO EXECUTION OF THE DISPLAY. ^SUBSEQUENT USE OF ^^ROW/COL\\
VARIABLES CAN CONTINUE UNAFFECTED.
.SKIP 1
(^THE DISPLAY STATEMENT CAN ALSO BE USED TO DISPLAY ^^BBL\\
RISK PROFILE VARIABLES AS EXPLAINED IN THAT SECTION
OF THIS MANUAL. ^A SINGLE DISPLAY STATEMENT CAN NOT BE USED
TO DISPLAY BOTH STANDARD REPORTS AND RISK PROFILES, SINCE
DIFFERENT OPTIONAL FIELDS ARE PROVIDED.)
.SKIP 2
.RIGHT MARGIN 80
.TEST PAGE 5
.NOFILL
.INDENT -10
^EXAMPLES:#^^DISPLAY REP1 USING 100-200,210-220,300
.SKIP 1
DISPLAY(21) A(*,*),B(*,*)
.SKIP 1
DISPLAY(21:N) REP2(*,*),REP99(*,*) USING 110,120\\
.RIGHT MARGIN 65
.FILL
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^X
.PAGE
.CENTER 65
^^BBL\\ ^RISK ^PROFILES
.SKIP 4
.PARAGRAPH
^^BBL\\ PROVIDES SOME SPECIAL CAPABILITIES TO HANDLE "LISTS" OF
NUMERIC INFORMATION. ^JUST AS "$" VARIABLES CONSIST OF STRINGS
OF ALPHANUMERIC CHARACTERS WHICH CAN VARY IN LENGTH, NUMERIC LISTS
OF DATA WHICH CAN VARY IN LENGTH CAN BE REPRESENTED BY SINGLE
VARIABLES WITHIN THE ^^BBL\\ SYSTEM. ^A VARIABLE WHICH REPRESENTS A LIST
OF DATA IS INDICATED BY SUFFIXING THE NAME WITH A "_#". (^A GENERAL
DISCUSSION OF THE _# VARIABLES, THEIR ASSOCIATED STATEMENTS, AND
USES IS CONTAINED IN THE NEXT SECTION OF THIS MANUAL.)
.PARAGRAPH
^ONE SPECIAL TYPE OF LIST VARIABLE IS THE RISK PROFILE
VARIABLE. ^THE NAME "RISK PROFILE" IS ASSOCIATED WITH THE TYPE
OF ANALYSIS WHICH THIS VARIABLE FACILITATES. ^A RISK
PROFILE VARIABLE CAN BE USED TO ACCUMULATE VARIOUS FORMS OF DATA
DERIVED FROM SIMULATION PROGRAMS RUN IN THE ^^BBL\\ SYSTEM. ^USING
A RISK PROFILE VARIABLE TO COLLECT KEY DATA FACILITATES SUCH OPERATIONS
AS SORTING THE DATA, DISPLAYING FREQUENCY OR PROBABILITY DISTRIBUTIONS
OF THE DATA, GRAPHING THE DATA, DERIVING VARIOUS STATISTICS, ETC.
^BECAUSE ONE FORM OF OUTPUT FOR DATA COLLECTED IN THIS MANNER IS
CALLED A "RISK PROFILE" (A PROBABILITY DISTRIBUTION OF THE DATA),
THE VARIABLE HAS BEEN NAMED A RISK PROFILE VARIABLE, OR A "^^RP_#\\"
VARIABLE.
.PARAGRAPH
^A ^^RP_#\\ VARIABLE SHOULD BE NAMED WITH THE TWO LETTERS "^^RP\\"
FOLLOWED BY A SINGLE LETTER (FROM ^A TO ^Z) AND THE "_#" SYMBOL.
^THEREFORE, ^^RP_#\\ VARIABLES CAN TAKE ON THE FOLLOWING
SET OF NAMES:
.SKIP 1
.INDENT 20
^^RPA_#,RPB_#,RPC_#,...,RPZ_#\\
.SKIP 1
.PARAGRAPH
^A ^^RP_#\\ VARIABLE REPRESENTS A LIST OF SINGLE NUMERIC
VALUES. ^^RPA_#\\ MIGHT, FOR INSTANCE, REPRESENT A LIST OF FIVE
VALUES:
.SKIP 1
.INDENT 20
10 30 20 40 50
.SKIP 1
.PARAGRAPH
^^BBL\\ PROVIDES A SERIES OF STATEMENTS BY WHICH THE DATA ITEMS
IN A LIST CAN BE ACCESSED AND UTILIZED:
.SKIP 1
.TEST PAGE 15
.LEFT MARGIN 29
.INDENT -22
1.#^DEFINE#^STATEMENT###TO DEFINE A RISK PROFILE VARIABLE
.SKIP 1
.INDENT -22
2.#^INSERT#^STATEMENT###TO ADD AN ITEM OF DATA TO THE LIST
.SKIP 1
.INDENT -22
3.#^PUT#^STATEMENT######TO REPLACE AN ITEM OF DATA IN THE LIST
.SKIP 1
.INDENT -22
4.#^FIND#^STATEMENT#####TO LOCATE SPECIFIC ITEMS WITHIN THE LIST
.SKIP 1
.INDENT -22
5.#^GET#^STATEMENT######TO RETRIEVE A VALUE FROM THE LIST
.SKIP 1
.INDENT -22
6.#^REMOVE#^STATEMENT###TO RETRIEVE A VALUE FROM THE LIST AND
REMOVE IT FROM THE LIST AT THE SAME TIME
.SKIP 1
.INDENT -22
7.#^CLEAR#^STATEMENT####TO EMPTY A LIST
.SKIP 1
.PARAGRAPH
.LEFT MARGIN 5
^SEVERAL SPECIAL STATEMENTS ARE PROVIDED TO GENERATE REPORTS FROM
^^RP_#\\ LISTS:
.SKIP 1
.LEFT MARGIN 29
.INDENT -22
1.#^SHOW#^STATEMENT#####TO DEFINE CONTENTS OF RISK PROFILE REPORTS
.SKIP 1
.INDENT -22
2.#^RPEND#^STATEMENT####TO DEFINE THE END OF A RISK PROFILE REPORT
.SKIP 1
.INDENT -22
3.#^DISPLAY#^STATEMENT##TO GENERATE A RISK PROFILE TABLE REPORT
.SKIP 1
.INDENT -22
4.#^GRAPH#^STATEMENT####TO GENERATE A RISK PROFILE GRAPH REPORT
.SKIP 1
.PARAGRAPH
.LEFT MARGIN 5
^IN ADDITION, ^^RP_#\\ VARIABLES CAN BE USED IN THE STANDARD ^^BBL\\
LET STATEMENT, PRINT STATEMENT, AND SORT STATEMENT. ^FINALLY,
VARIOUS STATISTICS (SUCH AS MEAN, VARIANCE, ETC.) CAN BE CALCULATED
BY USING SPECIAL INTERNAL ^^BBL\\ FUNCTIONS DESCRIBED
IN THE SECTION "^INTERNAL ^^BBL\\ ^FUNCTIONS" FOUND AT THE BACK
OF THIS MANUAL.
.PAGE
.LEFT MARGIN 20
^^DEFINE PROFILE\\
.SKIP 2
.INDENT -6
^FORM:#^^DEFINE STEP#######RPV_#,RPV_#,... [SORTED]\\
.BREAK
.INDENT 7
^^SMOOTH\\
.BREAK
.INDENT 7
^^DISCRETE\\
.BREAK
.INDENT 7
^^CONTINUOUS\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE DEFINE PROFILE STATEMENT SHOULD BE USED TO 
ESTABLISH THE RISK PROFILE "TYPE" FOR ONE OR MORE ^^RP_#\\
VARIABLES. ^THE RISK PROFILE TYPE IS AN IDENTIFIER ASSIGNED TO
EACH RISK PROFILE VARIABLE. ^THE TYPE SPECIFIES HOW ^^BBL\\
SHOULD DISPLAY OUTPUT, ETC., WHEN THE RISK PROFILE IS REFERENCED.
^FOUR TYPES ARE PERMITTED:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^STEP PROFILES WILL BE CONSIDERED TO BE DISCRETE FREQUENCY
DISTRIBUTIONS. ^WHEN RISK PROFILE TABLES AND GRAPHS, ETC. ARE GENERATED,
^^BBL\\ WILL ASSUME THAT ONLY THOSE VALUES FOUND IN THE LIST CAN
OCCUR (I.E. INTERMEDIATE VALUES DO NOT EXIST.) ^TABLES, GRAPHS, ETC.
WILL BE SHOWN ON A FREQUENCY BASIS (I.E. THE NUMBER OF OCCURENCES
OF A VALUE RATHER THAN THE PROBABILITY OF OCCURENCE.)
.SKIP 1
.INDENT -3
2.#^SMOOTH PROFILES WILL BE CONSIDERED TO BE CONTINUOUS FREQUENCY
DISTRIBUTIONS. ^WHEN RISK PROFILE TABLES, GRAPHS, ETC. ARE GENERATED,
^^BBL\\ WILL ASSUME INTERMEDIATE VALUES ARE POSSIBLE. ^TABLES,
GRAPHS, ETC. WILL BE SHOWN ON A FREQUENCY BASIS.
.SKIP 1
.INDENT -3
3.#^DISCRETE PROFILES WILL BE CONSIDERED TO BE DISCRETE
PROBABILITY DISTRIBUTIONS. ^CALCULATIONS ARE MADE IN THE SAME WAY
AS FOR STEP PROFILES. ^HOWEVER, TABLES, GRAPHS, ETC. ARE SHOWN ON
A PROBABILITY BASIS.
.SKIP 1
.INDENT -3
4.#^CONTINUOUS PROFILES WILL BE CONSIDERED TO BE CONTINUOUS
PROBABILITY DISTRIBUTIONS. ^CALCULATIONS ARE MADE IN THE SAME WAY
AS FOR SMOOTH PROFILES. ^HOWEVER, TABLES GRAPHS, ETC. ARE SHOWN
ON A PROBABILITY BASIS.
.SKIP 1
.LEFT MARGIN 20
^THE FOUR TYPES OF RISK PROFILE VARIABLES REPRESENT THE FOUR POSSIBLE
COMBINATIONS OF FREQUENCY VS. PROBABILITY DISTRIBUTIONS AND
DISCRETE VS. CONTINUOUS DISTRIBUTIONS:
.SKIP 2
.RIGHT MARGIN 70
.NOFILL
.TEST PAGE 10
^^
               FREQUENCY      PROBABILITY
            *******************************
            *              *              *
DISCRETE    *  STEP        *  DISCRETE    *
            *              *              *
            *******************************
            *              *              *
CONTINUOUS  *  SMOOTH      *  CONTINUOUS  *
            *              *              *
            *******************************
\\
.SKIP 2
.FILL
.RIGHT MARGIN 65
^FOR A BRIEF EXPLANATION OF THE ASSUMPTIONS BEHIND SMOOTHING
CONTINUOUS DISTRIBUTIONS (SMOOTH AND CONTINUOUS PROFILES)
SEE ^RISK ^PROFILE ^SMOOTHING AT THE END OF THIS MANUAL.
.SKIP 1
^THE DEFINE PROFILE STATEMENT PROVIDES AN OPTIONAL "^^SORTED\\"
FIELD TO CONTROL HOW DATA ITEMS ARE ARRANGED WITHIN A
^^RP_#\\ VARIABLE AS VALUES ARE ADDED TO THE LIST OR REMOVED
FROM THE LIST. ^IF THE OPTION IS NOT SPECIFIED, ITEMS ARE ARRANGED
IN THE SAME ORDER AS THEY ARE ENTERED INTO THE LIST. ^THE
FIRST VALUE ENTERED INTO A ^^RP_#\\ VARIABLE WILL BE
HELD IN THE FIRST POSTION OF THE LIST, THE SECOND
VALUE WILL BE HELD IN THE SECOND POSTION, ETC. ^IF THE
DEFINE STATEMENT SPECIFIES THE ^^RP_#\\ VARIABLES TO BE SORTED,
ITEMS WITHIN THE LIST ARE ARRANGED IN ORDER OF SIZE FROM
SMALLEST FIRST TO LARGEST LAST. (^NOTE THAT, ALTHOUGH A LIST
MIGHT BE SPECIFIED AS AN UNSORTED LIST, IT CAN LATER BE SORTED
VIA A SORT STATEMENT.)
.SKIP 1
^SORTED LISTS MAY BE DESIRABLE FOR PURPOSES OF
PRINTING THEIR CONTENTS IN ORDER OF MAGNITUDE, OR
SEARCHING THE ITEMS IN THE LIST FROM SMALLEST TO LARGEST
VIA THE FIND STATEMENT DISCUSSED LATER IN THIS SECTION.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^DEFINE STEP RPA_#,RPB_#,RPC_#
.SKIP 1
DEFINE SMOOTH RPC_# SORTED
.SKIP 1
DEFINE DISCRETE RPA_#,RPB_#,RPZ_# SORTED\\
.FILL
.PAGE
^^INSERT \\ (RISK PROFILE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^INSERT EXP INTO RPV_#\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE INSERT STATEMENT WILL ENTER AN ADDITIONAL
ITEM INTO A LIST. ^THE VALUE OF THE STANDARD ^^BBL\\
EXPRESSION IS EVALUATED AND INSERTED INTO THE LIST. ^IF THE LIST
IS NOT A SORTED LIST, THE VALUE APPEARS AS THE LAST ITEM IN THE
LIST. ^IF THE LIST IS A SORTED LIST, IT IS INSERTED INTO THE LIST
DIRECTLY AFTER ALL CURRENT LIST VALUES WHICH ARE EQUAL TO OR LESS
THAN THE VALUE BEING ADDED. (^LISTS ARE SORTED MINIMUM TO MAXIMUM.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^INSERT A6 INTO RPA_#
.SKIP 1
INSERT B2+A(I,J)*100% INTO RPQ_#\\
.FILL
.PAGE
^^PUT\\ (RISK PROFILE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^PUT EXP INTO RPV_#\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE PUT STATEMENT WILL REPLACE THE VALUE OF AN ITEM
IN A LIST. ^THE LIST "POINTER" (DISCUSSED UNDER THE FIND STATEMENT)
IS SET VIA THE FIND STATEMENT. ^WHEN A PUT IS EXECUTED, THE "POINTED-TO"
ITEM HAS ITS VALUE REPLACED WITH THE VALUE OF THE EXPRESSION IN THE
PUT STATEMENT. ^THIS IS THE NORMAL USE OF THE PUT STATEMENT.
^HOWEVER, THE PUT CAN BE USED TO ADD ADDITIONAL ITEMS INTO A LIST
(SIMILAR TO THE INSERT STATEMENT) IF:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#THE LIST POINTER IS NOT POSITIONED TO AN ITEM IN THE LIST
(I.E. IS POSITIONED AT THE START OR END OF THE LIST);
.SKIP 1
.INDENT -3
2.#THE LIST IS EMPTY.
.SKIP 1
.LEFT MARGIN 20
^WHEN EITHER OF THESE CONDITIONS OCCUR, THE PUT STATEMENT
ACTS AS AN INSERT STATEMENT.
.SKIP 1
^WHEN A PUT STATEMENT REPLACES THE VALUE OF AN ITEM IN A LIST WITH
A NEW VALUE, NO AUTOMATIC SORTING TAKES PLACE, EVEN IF THE LIST IS
SORTED. (^AUTOMATIC SORTING IS APPLICABLE TO ENTERING ITEMS INTO
A LIST VIA THE INSERT STATEMENT, AND REMOVAL OF ITEMS FROM A LIST
VIA THE REMOVE STATEMENT.) ^FOR THIS REASON, A PUT STATEMENT
CAN "UNSORT" A SORTED LIST, AND CARE SHOULD BE TAKEN.
^IF A SORTED LIST IS TO REMAIN SORTED, AND THE USER IS CONCERNED
ABOUT REPLACING AN ITEM WITH A PUT STATEMENT, TWO METHODS OF
REPLACING WILL MAINTAIN THE SORT INTACT:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^REMOVE THE ITEM WITH A REMOVE STATEMENT AND INSERT THE NEW ITEM
WITH AN INSERT STATEMENT.
.SKIP 1
.INDENT -3
2.#^REPLACE THE ITEM VIA A PUT STATEMENT, AND SORT VIA THE
SORT STATEMENT. (^THIS METHOD IS PROBABLY QUITE INEFFICIENT.)
.SKIP 2
.LEFT MARGIN 20
.NOFILL
.INDENT -10
^EXAMPLES:#^^PUT I9 INTO RPZ_#
.SKIP 1
PUT A2/6+B(6) INTO RPZ_#\\
.FILL
.PAGE
^^FIND\\ (RISK PROFILE FORM)
.SKIP 2
.RIGHT MARGIN 80
.INDENT -6
^FORM:#^^FIND [FIRST] RPV_# [WITH EXP LOG EXP] [END=L1]\\
.BREAK
.INDENT 5
^^[NEXT]#################OPR\\
.BREAK
.INDENT 5
^^[LAST]\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^EACH LIST CAN BE ACCESSED BY A SERIES OF ^^BBL\\ 
STATEMENTS. ^THE FIND STATEMENT IS USED TO CONTROL A LIST 
"POINTER" ASSIGNED TO THE LIST. ^THE POINTER
CAN BE POSITIONED TO SPECIFIC ITEMS WITHIN THE LIST, SO THAT
GET, REMOVE, INSERT, AND PUT STATEMENTS MAY ACCESS THAT
ITEM. (^THE "POINTER" CONCEPT IS DISCUSSED MORE COMPLETELY UNDER THE
DISCUSSION OF THE GENERAL ^^BBL\\ LIST
CAPABILITY IN THE NEXT SECTION.)
.SKIP 1
^THE FIND STATEMENT MAY PROCEED TO SEARCH A LIST IN ONE OF THREE
MODES:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^FIRST ITEM TO LAST ITEM IN THE LIST.
.SKIP 1
.INDENT -3
2.#^NEXT ITEM BEGINNING WHERE THE POINTER IS CURRENTLY
POSITIONED, CONTINUING IN THE PREVIOUSLY SPECIFIED 
FIRST-TO-LAST OR LAST-TO-FIRST DIRECTION. (^FIRST-TO-LAST
IS ASSUMED IF NO PREVIOUS FIND STATEMENT HAS SET A DIRECTION
FOR THE LIST.)
.SKIP 1
.INDENT -3
3.#^LAST ITEM TO FIRST ITEM IN THE LIST.
.SKIP 1
.LEFT MARGIN 20
^IF THE FIRST/NEXT/LAST SPECIFICATION IS OMITTED, A FIRST-TO-LAST
SEARCH IS ASSUMED. ^A SIMPLE FIND 
STATEMENT SUCH AS:
.SKIP 1
.INDENT 10
^^100 FIND FIRST RPA_#\\
.SKIP 1
WOULD POSITION THE LIST POINTER FOR ^^RPA_#\\ TO THE
FIRST ITEM. (^IF THE "LAST" DESIGNATION HAD BEEN SPECIFIED,
THE POINTER WOULD BE POSITIONED TO THE LAST ITEM IN ^^RPA_#\\.)
.SKIP 1
^SUPPOSE THE EXAMPLE ABOVE HAD BEEN EXECUTED. THE ^^RPA_#\\
POINTER COULD BE POSITIONED TO THE SECOND
ITEM IN ^^RPA_#\\ BY:
.SKIP 1
.INDENT 10
^^200 FIND NEXT RPA_#\\
.SKIP 1
^THE FIND STATEMENT CAN INCLUDE AN OPTIONAL "^^WITH\\"
SPECIFICATION SO THAT THE POINTER CAN BE SET TO SPECIFIC ITEMS 
WHICH SATISFY SOME TEST SPECIFIED BY THE USER. ^THE LOGICAL
TEST FIELD CAN BE COMPOSED OF A DIRECT LOGICAL
COMPARISON BETWEEN ANY TWO STANDARD ^^BBL\\ EXPRESSIONS OR STRING
VARIABLES AND STRING CONSTANTS.
(^SEE THE IF STATEMENT DESCRIPTIONS.)
^THE SEARCH PROCESS WILL PROCEED AS SPECIFIED UNTIL THE SPECIFIED
LOGICAL COMPARISON IS TRUE. ^AS THE SEARCH PROCEEDS, THE ^^BBL\\
ATTRIBUTE VARIABLE "^^ATT\\" WILL AUTOMATICALLY BE ASSIGNED THE
VALUE OF EACH SUCCESSIVE ITEM IN THE LIST. ^THE USER'S LOGICAL
COMPARISON CAN TEST "^^ATT\\" AGAINST CERTAIN REQUIREMENTS WHICH
MUST BE MET BEFORE THE CORRECT ITEM HAS BEEN FOUND. ^FOR EXAMPLE,
THE NEXT ITEM IN ^^RPA_#\\ WHICH HAS A VALUE GREATER THAN 100 MIGHT
BE FOUND BY:
.SKIP 1
.INDENT 10
^^300 FIND NEXT RPA_# WITH ATT>100\\
.SKIP 1
^IF A FIND STATEMENT SEARCH CAN NOT FIND A SATISFACTORY ITEM (THE
LIST IS EMPTY, NO MORE ITEMS EXIST WHICH SATISFY
A "^^WITH\\" TEST, ETC.), THE END (TOP OR BOTTOM)
OF THE LIST WILL BE ENCOUNTERED BY THE FIND STATEMENT. ^SPECIFYING
AN "^^END=\\" LINE NUMBER WILL TRANSFER CONTROL TO THE INDICATED LINE
WHEN THIS OCCURS. ^IF NO "^^END=\\" OPTION IS SPECIFIED,
AN ERROR CONDITION EXISTS.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^FIND FIRST RPQ_# WITH ATT*100>S6
.SKIP 1
FIND NEXT RPQ_# END=200
.SKIP 1
FIND LAST RPP_# WITH S(ATT)=10\\
.FILL
.PAGE
^^GET\\ (RISK PROFILE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^GET VAR(EXP) FROM RPV_# [END=L1]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE GET STATEMENT ASSIGNS THE VALUE OF AN ITEM IN A
LIST TO A STANDARD ^^BBL\\ VARIABLE. ^THE VALUE
ASSIGNED IS THE VALUE OF THE ITEM TO WHICH THE LIST POINTER IS
CURRENTLY POSITIONED. (^SEE THE FIND STATEMENT.) ^IF THE POINTER
IS CURRENTLY POSITIONED TO EITHER END OF THE LIST (OR NEVER WAS
POSITIONED VIA A FIND STATEMENT) THE ASSIGNED VALUE WILL BE THE
FIRST VALUE (IF THE SEARCH DIRECTION IS FIRST-TO-LAST) OR THE LAST
VALUE (IF THE SEARCH DIRECTION IS
LAST-TO-FIRST.) ^SUPPOSE THE FIND STATEMENT IN THE EXAMPLE BELOW
SEARCHED TO THE END OF ^^RPA_#\\ AND TRANSFERRED CONTROL TO THE
"^^END=\\" LINE NUMBER 800. ^A SUBSEQUENT GET STATEMENT
AT LINE NUMBER 800 WOULD ASSIGN THE FIRST VALUE IN THE LIST
SINCE THE LAST FIND DIRECTION WAS FIRST-TO-LAST:
.SKIP 1
.NOFILL
.LEFT MARGIN 25
^^
100 FIND FIRST RPA_# WITH ATT=10 END=800
                  .
                  .
                  .
800 GET A6 FROM RPA_#
\\
.LEFT MARGIN 20
.FILL
.SKIP 1
^IF THE USER HAD WISHED TO RETRIEVE THE LAST VALUE
IN THE EVENT THAT NO VALUES WERE EQUAL TO 10 IN THE ABOVE
EXAMPLE, THE POINTER SHOULD BE POSITIONED TO THE LAST ITEM:
.SKIP 1
.LEFT MARGIN 25
.NOFILL
^^
100 FIND FIRST RPA_# WITH ATT=10 END=800
                  .
                  .
                  .
800 FIND LAST RPA_#
810 GET A6 FROM RPA_#\\
.SKIP 1
.LEFT MARGIN 20
.FILL
^IF THE LIST CONTAINS NO ITEMS, THE OPTIONAL "^^END=\\"
FIELD WILL TRANSFER CONTROL TO THE INDICATED LINE WHEN A GET
IS EXECUTED. ^OTHERWISE AN ERROR CONDITION EXISTS.
.SKIP 1
^A MORE SUBTLE RESULT OF THE FIND STATEMENT SEARCH IS THAT THE
VARIABLE "^^ATT\\" HAS BEEN ASSIGNED THE VALUES OF EACH ITEM 
ENCOUNTERED DURING THE SEARCH. ^THEREFORE, ONCE AN ITEM HAS BEEN
FOUND, "^^ATT\\" CAN BE REFERENCED BY THE USER TO ACCESS THE
VALUE, OR AS AN ALTERNATIVE WAY OF "GETTING" THE VALUE. ^SUPPOSE
STATEMENT 200, IN THE EXAMPLE BELOW, MOVES THE POINTER TO THE
NEXT ITEM IN THE LIST. ^THE VALUE OF THE NEXT ITEM CAN BE USED BY
REFERENCING ^^ATT\\:
.SKIP 1
.NOFILL
.LEFT MARGIN 25
^^
200 FIND NEXT RPA_# END=800
210 IF ATT>100% GO TO 300
\\
.FILL
.LEFT MARGIN 20
.SKIP 1
^CARE SHOULD BE USED IN BY-PASSING THE GET STATEMENT TO ACCESS THE
VALUE OF AN ITEM IN A LIST. ^IF A FIND STATEMENT HAS BEEN UNSUCCESSFUL
IN A SEARCH, ^^ATT\\ WILL CONTAIN THE LAST VALUE ENCOUNTERED BY
THE FIND STATEMENT (I.E. THE LAST VALUE IF FIRST-TO-LAST OR THE
FIRST VALUE IF LAST-TO-FIRST.) ^THIS MAY OR MAY NOT BE
USEFUL, DEPENDING UPON THE REQUIREMENTS OF THE USER'S PROGRAM.
.SKIP 1
^IF A SEARCH IS SUCCESSFUL, THE FOLLOWING TWO METHODS CAN BE USED
TO ACCESS THE FOUND ITEM:
.SKIP 1
.LEFT MARGIN 25
.NOFILL
^^
100 FIND FIRST RPA_# WITH ATT<12
110 GET S6 FROM RPA_#
\\
.FILL
.LEFT MARGIN 20
.SKIP 1
OR:
.SKIP 1
.LEFT MARGIN 25
.NOFILL
^^
100 FIND FIRST RPA_# WITH ATT<12
110 S6=ATT
\\
.SKIP 1
.LEFT MARGIN 20
.FILL
^NOTICE THAT ^^ATT\\ IS RESET EACH TIME A FIND, GET, REMOVE,
PUT, OR INSERT STATEMENT IS EXECUTED. ^THEREFORE, THE 
USER'S PROGRAM SHOULD PRESERVE THE VALUE OF ^^ATT\\ AS SHOWN ABOVE,
IF THE VALUE IS TO BE USED SUBSEQUENT TO FURTHER FINDS, GETS,
REMOVES, PUTS, OR INSERTS ON ANOTHER LIST. ^A GET STATEMENT, ON
THE OTHER HAND, CAN ALWAYS BE USED TO RETRIEVE THE CURRENT 
"POINTED-TO" ITEM FROM THE LIST.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^GET A2 FROM RPB_# END=200
.SKIP 1
GET(12,A+J) FROM RPR_#\\
.FILL
.PAGE
^^REMOVE\\ (RISK PROFILE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^REMOVE VAR(EXP) FROM RPV_# [END=L1]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE REMOVE STATEMENT IS IDENTICAL TO THE
GET STATEMENT, BUT PERFORMS TWO ADDITIONAL FUNCTIONS:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^NOT ONLY IS THE VALUE OF AN ITEM WITHIN A LIST ASSIGNED TO
THE DESIGNATED VARIABLE, BUT ALSO THE ITEM IS REMOVED FROM THE
LIST, REDUCING THE SIZE OF THE LIST BY ONE ITEM.
.SKIP 1
.INDENT -3
2.#^WHEN AN ITEM IS REMOVED, THE LIST POINTER (POSITIONED
VIA A FIND STATEMENT) IS SET BACK TO THE PRECEDING ITEM.
^IF THE PRIOR FIND FOR THE LIST WERE FIRST-TO-LAST, THE POINTER
IS SET ONE NEARER THE START OF THE LIST. ^IF THE PRIOR FIND FOR
THE LIST WERE LAST-TO-FIRST, THE POINTER IS SET ONE NEARER THE
END OF THE LIST. ^SETTING THE PRECEDING ITEM ALLOWS A SUBSEQUENT
"^^FIND NEXT\\" STATEMENT TO CONTINUE THROUGH THE LIST,
OMITTING NO ITEMS IN THE SEARCH.
.SKIP 1
.LEFT MARGIN 20
^IF THE FIRST ITEM IS REMOVED, AND THE POINTER IS "BACKED-UP"
TO THE TOP, A SUBSEQUENT REMOVE STATEMENT REMOVES THE FIRST ITEM.
^SIMILARLY, IF THE LAST ITEM IS REMOVED, AND THE POINTER IS
"BACKED-DOWN" TO THE END, A SUBSEQUENT REMOVE STATEMENT REMOVES THE LAST
ITEM. ^IF THE LIST CONTAINS NO ITEMS, THE OPTIONAL
"^^END=\\" FIELD WILL TRANSFER CONTROL TO THE INDICATED
LINE WHEN A REMOVE IS EXECUTED. ^OTHERWISE, AN ERROR
CONDITION EXISTS.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^REMOVE A2 FROM RPB_# END=200
.SKIP 1
REMOVE Q(12,A+J) FROM RPR_#\\
.FILL
.PAGE
^^CLEAR\\ (RISK PROFILE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^CLEAR RPV_#,RPV_#,...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE CLEAR STATEMENT RE-INITIALIZES ANY LIST.
^ALL ITEMS ARE REMOVED FROM THE LIST, AND THE DEFAULT SEARCH
DIRECTION FOR THE LIST IS SET TO FIRST-TO-LAST. (^THIS STATEMENT
IS USEFUL TO NULL A LIST MORE EFFICIENTLY THAN EXECUTING
SUCCESSIVE REMOVE STATEMENTS.) ^THE SAME CLEAR STATEMENT
CAN INTERMIX RISK PROFILE LISTS, AND GENERAL LIST VARIABLES
DISCUSSED IN THE NEXT SECTION.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^CLEAR RPA_#
.SKIP 1
CLEAR RPA_#,RPB_#,RPC_#\\
.FILL
.PAGE
^^SHOW\\ (RISK PROFILE TABLE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^SHOW#[CUM]##PROFILE\\
.BREAK
.INDENT 5
^^[MASS]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^A DEFINE RISK PROFILE STATEMENT NOT ONLY ESTABLISHES
A RISK PROFILE VARIABLE, BUT ALSO CAN SERVE AS THE BEGINNING
OF A BLOCK OF LINES SPECIFYING THE FORMAT OF A RISK PROFILE
REPORT. ^EACH FORMAT LINE IS A SHOW STATEMENT, AND THE ENTIRE
BLOCK OF LINES REPRESENTS THE DESIRED OUTPUT FORMAT OF THE RISK
PROFILE OUTPUT REPORT. ^THE BLOCK OF SHOW STATEMENTS CAN
BE TERMINATED WITH AN "^^RPEND\\" STATEMENT. ^AN ENTIRE RISK PROFILE
REPORT DEFINITION CAN BE PICTURED AS:
.SKIP 1
.NOFILL
.LEFT MARGIN 30
^^
DEFINE PROFILE STATEMENT
     SHOW STATEMENT
     SHOW STATEMENT
     SHOW STATEMENT
           .
           .
           .
     SHOW STATEMENT
    RPEND STATEMENT
\\
.SKIP 1
.FILL
.LEFT MARGIN 20
^EITHER A DISPLAY PROFILE STATEMENT OR A GRAPH PROFILE
STATEMENT CAN BE USED TO TRIGGER OUTPUT OF THE RISK PROFILE
REPORT AS DEFINED BY THE BLOCK OF SHOW STATEMENTS MAKING UP THE
RISK PROFILE REPORT DEFINITION. ^THE BLOCK OF SHOW STATEMENTS CAN
INCLUDE EITHER OF THE TWO STANDARD SHOW STATEMENTS FOR ^^BBL\\ REPORTS
(SEE ALPHANUMERIC SHOW STATEMENTS AND NUMERIC SHOW STATEMENTS)
AND TWO ADDITIONAL FORMS OF THE SHOW STATEMENT:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#SHOW RISK PROFILE TABLE FORM
.SKIP 1
.INDENT -3
2.#SHOW RISK PROFILE FUNCTION FORM
.SKIP 1
.LEFT MARGIN 20
(^THE RISK PROFILE TABLE FORM IS DISCUSSED HERE, AND
THE RISK PROFILE FUNCTION IS DISCUSSED AS THE NEXT TOPIC OF
THIS SECTION.)
.SKIP 1
^IN GENERAL, SHOW STATEMENTS FOR ^^RP_#\\ VARIABLES WILL ONLY BE
EXECUTED WHEN CALLED UPON BY DISPLAY OR GRAPH STATEMENTS. ^WHEN
A RISK PROFILE TABLE IS GENERATED, IT CAN BE ONE OF TWO FORMS:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^A CUMULATIVE DISTRIBUTION OF VALUES IN THE LIST,
COMPARING EITHER CUMULATIVE FREQUENCY OR PROBABILITY VS. VALUE.
(^FREQUENCY OR PROBABILITY IS DETERMINED BY THE ^^RP_#\\
TYPE, AND THE CUMULATIVE VALUES ARE EITHER SMOOTHED OR DISCRETE
ACCORDING TO THE TYPE.)
.SKIP 1
.INDENT -3
2.#^A MASS DISTRIBUTION OF VALUES IN THE LIST, COMPARING
THE FREQUENCY OF OCCURENCE OR PROBABILITY OF OCCURENCE
VS. RANGES OF VALUES. (^AS IN THE CASE OF
THE CUMULATIVE DISTRIBUTION, BOTH FREQUENCY/PROBABILITY AND
ALSO SMOOTH/DISCRETE
ARE DETERMINED BY THE ^^RP_#\\ TYPE.)
.SKIP 1
.LEFT MARGIN 20
^IF THE SHOW STATEMENT DOES NOT SPECIFY "^^CUM\\" OR "^^MASS\\",
A CUMULATIVE OUTPUT REPORT IS ASSUMED.
.SKIP 1
(^NOTE THAT A DEFINE PROFILE STATEMENT NEED NOT BE FOLLOWED BY
SHOW STATEMENTS TO DEFINE A SPECIFIC RISK PROFILE REPORT.
^IF A DISPLAY OR GRAPH STATEMENT TRIGGERS OUTPUT OF A RISK
PROFILE WITH NO ASSOCIATED SHOW STATEMENTS, A SINGLE CUMULATIVE
DISTRIBUTION IS OUTPUT. ^SEE DISPLAY PROFILE AND GRAPH PROFILE
STATEMENTS IN THIS SECTION. ^EXAMPLES OF THE DIFFERENT TYPES
OF OUTPUT REPORTS AND GRAPHS CAN ALSO BE FOUND IN THESE SECTIONS.)
.SKIP 1
^WHEN A RISK PROFILE TABLE OR GRAPH IS GENERATED, THE
JUSTIFICATION OF THE OUTPUT IS FIXED. ^HOWEVER, THE USER CAN CONTROL
THE NUMBER OF DECIMAL PLAYCES VIA THE STANDARD PRINT STATEMENT
MODIFIER "^^.XXX\\". ^SIMILARLY, THE SPECIFICATION CAN
BE PRECEDED BY A "$" OR FOLLOWED BY A "%" TO AFFIX EITHER
SYMBOL TO THE VALUES WHEN OUTPUT. ^THE NULL SPECIFICATION "!"
IS ALSO PERMITTED.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^SHOW $CUM PROFILE.XX
.SKIP 1
SHOW PROFILE
.SKIP 1
SHOW MASS PROFILE.%\\
.FILL
.PAGE
^^SHOW\\ (RISK PROFILE FUNCTION FORM)
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^SHOW "ALPHA",VAR$(EXP),...,EXP,FUNCTION,...\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE SECOND TYPE OF SHOW STATEMENT UNIQUE
TO A RISK PROFILE REPORT IS THE FUNCTION FORM. ^THIS TYPE OF SHOW
STATEMENT IS SIMILAR TO THE NUMERIC FORM OF THE SHOW
STATEMENT FOR STANDARD ^^BBL\\ REPORTS, EXCEPT THAT
ANY NUMERIC FIELD CAN BE REPLACED WITH THE NAME OF A LIST FUNCTION.
^^BBL\\ PROVIDES SEVERAL INTERNAL FUNCTIONS WHICH CAN
BE USED TO CALCULATE STATISTICS OF THE VALUES IN A LIST.
(^SEE ^^BBL\\ INTERNAL FUNCTIONS.) ^ANY TWO-ARGUMENT LIST FUNCTION
CAN BE SPECIFIED IN THIS FORM OF THE SHOW STATEMENT, WITHOUT
ARGUMENTS. ^THESE INCLUDE:
.SKIP 1
.LEFT MARGIN 30
.NOFILL
^^
MINVAL    MEANVAL
MAXVAL    MEANSQR
SUMVAL    VARVAL
SUMSQR    DEVVAL
\\
.FILL
.LEFT MARGIN 20
.SKIP 1
^WHENEVER A DISPLAY OR GRAPH STATEMENT TRIGGERS OUTPUT OF THIS
FORM OF THE SHOW STATEMENT, THE INDICATED FUNCTION WILL BE CALCULATED
FOR THE RISK PROFILE VARIABLE BEING OUTPUT, AND THE FUNCTION VALUE
WILL BE PRINTED. (^NO ARGUMENTS SHOULD BE GIVEN SINCE THE DISPLAY
OR GRAPH STATEMENT MAY SPECIFY SEVERAL DIFFERENT ^^RP_#\\ VARIABLES
FOR OUTPUT.) ^THE FOLLOWING EXAMPLE DEFINES A RISK PROFILE REPORT
CONSISTING OF A CUMULATIVE TABLE FOLLOWED BY THE MEAN AND
STANDARD DEVIATION:
.SKIP 1
.LEFT MARGIN 30
.NOFILL
^^
100 DEFINE CONTINUOUS RPA_#,RPB_#
110 SHOW $CUM PROFILE.XX
120 SHOW "MEAN =",$MEANVAL.XX
130 SHOW "STD DEV =",$DEVVAL.XX
140 RPEND
     .
     .
     .
200 DISPLAY RPA_#,RPB_#
\\
.FILL
.LEFT MARGIN 20
.SKIP 1
^WHEN STATEMENT 200 IS EXECUTED, THE DEFINED RISK PROFILE REPORT
FOR ^^RPA_#\\ WILL BE DISPLAYED, FOLLOWED BY
A SECOND REPORT FOR ^^RPB_#\\. ^THE MEAN AND STANDARD
DEVIATION ON EACH REPORT WILL BE CALCULATED FROM THE RISK
PROFILE VARIABLE BEING DISPLAYED.
.SKIP 1
^THIS FORM OF THE SHOW STATEMENT WILL ALLOW THE STANDARD ^^BBL\\
PRINT STATEMENT OPTIONS FOR NUMERIC FIELDS (INCLUDING
THE FUNCTION FIELDS AS NUMERIC FIELDS). ^THESE OPTIONS INCLUDE
/, :, >, <, ><, $, %, .XXX, !. ^THIS FORM ALSO FOLLOWS THE
NUMERIC SHOW STATEMENT CONVENTION THAT ALPHANUMERIC FIELDS MUST LEAD
NUMERIC FIELDS, AND THE USER MAY DISTINGUISH BLANK
ALPHANUMERIC FIELDS ("#" OR '#') FROM BLANK
NUMERIC FIELDS (,,). ^HOWEVER UNLIKE THE NUMERIC SHOW STATEMENT,
THE RISK PROFILE FUNCTION SHOW ALLOWS THE USE OF STRING VARIABLES IN
ADDITION TO ALPHANUMERIC CONSTANT FIELDS.
.SKIP 2
.NOFILL
.RIGHT MARGIN 80
.INDENT -10
^EXAMPLES:#^^SHOW //"MINIMUM VALUE =",MINVAL
.SKIP 1
SHOW >"MIN VALUE",>"MAX VALUE",/MINVAL,MAXVAL
.SKIP 1
SHOW "STANDARD DEVIATION %=",<DEVVAL.XX%\\
.FILL
.RIGHT MARGIN 65
.PAGE
^^RPEND\\
.SKIP 2
.INDENT -6
^FORM:#^^RPEND\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE RPEND STATEMENT SHOULD BE USED TO
DESIGNATE THE END OF A COMPLETE RISK PROFILE REPORT DEFINITION. ^BETWEEN
THE INITIAL DEFINE REPORT AND ENDING RPEND STATEMENT, ANY
NUMBER OF ^^BBL\\ SHOW STATEMENTS (ALPHANUMERIC, NUMBERIC, RISK
PROFILE TABLE, OR FUNCTION FORM) MAY APPEAR. ^THE ENTIRE BLOCK OF
LINES MAKING UP THE RISK PROFILE REPORT DEFINITION IS USED ONLY
WHEN REFERENCED BY A DISPLAY OR GRAPH STATEMENT.
(^IF THE ^^RP_#\\ DEFINITION IS NOT FOLLOWED BY ONE OR MORE SHOW
STATEMENTS, THE RPEND STATEMENT IS NOT NEEDED.)
.SKIP 2
.NOFILL
.INDENT -9
^EXAMPLE:#^^RPEND\\
.FILL
.PAGE
^DISPLAY\\ (RISK PROFILE FORM)
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^DISPLAY[(VAR[:VAR])] RPV_#,RPV_#...\\
.SKIP 1
.INDENT 18
^^...[USING L1,...][INTERVALS=CON]\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE RISK PROFILE FORM OF THE DISPLAY STATEMENT IS
USED TO TRIGGER THE OUTPUT OF A DEFINED ^^BBL\\ RISK PROFILE
REPORT. ^THE DISPLAY STATEMENT WILL OUTPUT THE REPORT TO THE CONSOLE
UNLESS THE OPTIONAL LOGICAL UNIT NUMBER IS USED TO SPECIFY
SEQUENTIAL OR RANDOM ACCESS FILE OUTPUT.
.SKIP 1
^THIS STATEMENT SHOULD REFERENCE AT LEAST ONE RISK PROFILE
VARIABLE FOR OUTPUT. ^WHEN THE DISPLAY IS EXECUTED, THE BLOCK OF
SHOW STATEMENTS DEFINING THE FORMAT OF THE RISK PROFILE REPORT
WILL CONTROL THE DISPLAY. (^SEE SHOW STATEMENTS IN THIS SECTION AND
THE PREVIOUS SECTION.) ^IF NO SHOW STATEMENTS HAVE BEEN SPECIFIED
WITH THE ASSOCIATED DEFINE ^^RP_#\\ STATEMENT, ^^BBL\\ WILL DISPLAY
A SINGLE CUMULATIVE DISTRIBUTION OF THE RISK PROFILE VARIABLE.
.SKIP 1
^IF A BLOCK OF SHOW STATEMENTS HAVE BEEN SPECIFIED, THE DISPLAY
STATEMENT WILL OUTPUT THE REPORT AS DEFINED BY THE ENTIRE BLOCK
OF ASSOCIATED SHOW STATEMENTS, UNLESS THE OPTIONAL
"^^USING\\" SERIES OF LINE NUMBERS IS INCLUDED.
^WHEN "^^USING\\" IS SPECIFIED, ONLY THOSE LINE NUMBERS INDICATED
ARE DISPLAYED. ^THE "^^USING\\" OPTION MAY SPECIFY LINE NUMBERS IN
ANY ORDER, AND REPEAT LINE NUMBERS. ^FURTHERMORE, LINE NUMBERS CAN
BE DISPLAYED SINGLY:
.SKIP 1
.INDENT 15
^^USING 10,12,18,22\\
.SKIP 1
OR HYPHENATED TO INDICATE A RANGE OF LINES (MINIMUM TO MAXIMUM)
TO DISPLAY:
.SKIP 1
.INDENT 15
^^USING 10-14,18-20\\
.SKIP 1
^A SECOND OPTION IS PROVIDED. ^IF "^^INTERVALS=\\" IS
SPECIFIED AS THE LAST FIELD IN THIS STATEMENT, A WHOLE NUMBER SHOULD
BE GIVEN WHICH SPECIFIES THE NUMBER OF INTERVALS TO DISPLAY IN THE
CUMULATIVE OR MASS DISTRIBUTIONS. (^CUMULATIVE TABLES ARE
EQUI-FREQUENCY/EQUI-PROBABLE, WHEREAS MASS DISTRIBUTIONS ARE
EQUI-VALUE INTERVALS.) ^IF THE "^^INTERVALS=\\" FIELD IS OMITTED,
ALL OUTPUT DISTRIBUTIONS WILL BE SHOWN WITH 4 INTERVALS.
.SKIP 1
^IN ADDITION TO ROUTING CONTROL TO THE ASSOCIATED RISK
PROFILE REPORT DEFINITION, THE DISPLAY STATEMENT PERFORMS
ONE ADDITIONAL FUNCTION:
.SKIP 1
.LEFT MARGIN 25
.INDENT -2
_.#^EACH TIME A RISK PROFILE VARIABLE IS DISPLAYED, ^^BBL\\
ASSUMES THAT ANY SHOW STATEMENTS REFERENCING LIST FUNCTIONS
WITHOUT ARGUMENTS (I.E. FUNCTION SHOW STATEMENTS) SHOULD
REFERENCE THE ^^RP_#\\ VARIABLE BEING DISPLAYED. (^SEE FUNCTION FORM
OF THE SHOW STATEMENT IN THIS SECTION.)
.SKIP 1
.LEFT MARGIN 20
(^THE DISPLAY STATEMENT CAN ALSO BE USED TO DISPLAY
STANDARD ^^BBL\\ OUTPUT REPORTS AS EXPLAINED IN THE PREVIOUS
SECTION OF THIS MANUAL. ^A SINGLE DISPLAY STATEMENT CAN NOT BE
USED TO DISPLAY BOTH STANDARD REPORTS AND RISK PROFILE REPORTS, SINCE
DIFFERENT OPTIONAL FIELDS ARE PROVIDED.)
.SKIP 1
^FOUR EXAMPLES OF RISK PROFILE OUTPUT REPORTS FOLLOW:
.RIGHT MARGIN 75
.SKIP 2
.LEFT MARGIN 25
.NOFILL
.TEST PAGE 12
.INDENT -3
1.#^CUMULATIVE ^DISCRETE ^RISK ^PROFILE
.SKIP 1
^^
CUMULATIVE RISK PROFILE:
-----------------------
.SKIP 1
PROBABILITY OF
 VALUE OR LESS         VALUE
         0.000       $ 42.18
          .250       $ 56.78
          .500       $ 59.11
          .750       $ 61.86
         1.000       $ 68.48
\\
.SKIP 2
.TEST PAGE 12
.INDENT -3
2.#^CUMULATIVE ^CONTINUOUS ^RISK ^PROFILE
.SKIP 1
^^
CUMULATIVE RISK PROFILE:
-----------------------
.SKIP 1
PROBABILITY OF
 VALUE OR LESS         VALUE
         0.000       $ 38.89
          .250       $ 56.68
          .500       $ 59.24
          .750       $ 61.93
         1.000       $ 68.58
\\
.SKIP 2
.TEST PAGE 11
.INDENT -3
3.#^MASS ^DISCRETE ^RISK ^PROFILE
.SKIP 1
^^
MASS RISK PROFILE:
-----------------
.SKIP 1
PROBABILITY OF
VALUE IN RANGE        (FROM)        (THRU)
          .040       $ 42.18       $ 48.75
          .160       $ 48.75       $ 55.33
          .560       $ 55.33       $ 61.90
          .240       $ 61.90       $ 68.48
\\
.SKIP 2
.TEST PAGE 11
.INDENT -3
4.#^MASS ^CONTINUOUS ^RISK ^PROFILE
.SKIP 1
^^
MASS RISK PROFILE:
-----------------
.SKIP 1
PROBABILITY OF
VALUE IN RANGE        (FROM)        (THRU)
          .025       $ 38.89       $ 46.31
          .102       $ 46.31       $ 53.73
          .553       $ 53.73       $ 61.16
          .319       $ 61.16       $ 68.58
\\
.SKIP 2
.RIGHT MARGIN 65
.LEFT MARGIN 20
.FILL
^FOUR ANALOGOUS REPORTS CAN BE DISPLAYED ON A FREQUENCY BASIS
(RATHER THAN PROBABILITY) IF THE ^^RP_#\\ VARIABLE 
TYPES WERE DEFINED AS "^^STEP\\" OR "^^SMOOTH\\". (^NOTE THAT 
DISPLAYING A RISK PROFILE IN NO WAY ALTERS OR REARRANGES THE ITEMS
IN THE LIST.  ^THEREFORE, DISPLAYING A RISK PROFILE DOES NOT
LOOSE ANY INFORMATION CONTAINED IN THE LIST CONCERNING THE ORDER
IN WHICH THE ITEMS WERE COLLECTED.)
.SKIP 2
.NOFILL
.TEST PAGE 5
.INDENT -10
^EXAMPLES:#^^DISPLAY RPA_# USING 100-200,300
.SKIP 1
DISPLAY(20) RPB_#,RPA_# INTERVALS=10
.SKIP 1
DISPLAY(20:N2) RPA_# USING 10,20 INTERVALS=10\\
.FILL
.PAGE
^^GRAPH\\ (RISK PROFILE FORM)
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^GRAPH[(VAR[:VAR])] RPV_#,RPV_#,...\\
.SKIP 1
.INDENT 16
^^...[USING L1,...][INTERVALS=CON]...\\
.BREAK
.INDENT 33
^^[STEP=CON]\\
.SKIP 1
.INDENT 16
^^...[XAXIS=CON,CON][YAXIS=CON,CON]\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE RISK PROFILE FORM OF THE GRAPH STATEMENT IS
SIMILAR TO THE RISK PROFILE FORM OF THE DISPLAY STATEMENT, EXCEPT
THAT THE OUTPUT REPORT PRODUCED BY EACH ASSOCIATED "^^SHOW PROFILE\\"
STATEMENT WILL BE A TWO-DIMENSIONAL PLOT OF FREQUENCY OR
PROBABILITY VS. VALUE. ^THE GRAPH WILL BE OUTPUT TO THE CONSOLE
UNLESS THE OPTIONAL LOGICAL UNIT NUMBER SPECIFIES OUTPUT TO A SEQUENTIAL
OR RANDOM ACCESS FILE.
.SKIP 1
^THE SAME CONVENTIONS AS FOR THE DISPLAY STATEMENT HOLD FOR
THE "^^USING\\" FIELD:
.SKIP 1
.LEFT MARGIN 25
.INDENT -2
_.#^OMITTING THE "^^USING\\" FIELD CAUSES ALL ASSOCIATED
SHOW STATEMENTS TO BE OUTPUT. (^IF NO SHOW STATEMENTS ARE ASSOCIATED,
A SINGLE CUMULATIVE GRAPH IS OUTPUT.)
.SKIP 1
.INDENT -2
_.#^INCLUDING THE "^^USING\\" FIELD CAUSES ONLY THOSE LINES
SPECIFIED TO BE OUTPUT.
.SKIP 1
.LEFT MARGIN 20
^THE FIRST OPTIONAL FIELD OF THE GRAPH STATEMENT CAN
BE EITHER "^^INTERVALS=\\" OR "^^STEP=\\", BUT NOT BOTH.
^IF "^^INTERVALS=\\" IS SPECIFIED, IT IS INTERPRETED AS THE NUMBER
OF EQUI-VALUE INTERVALS TO BE SHOWN ON THE VALUE OR
XAXIS (VERTICAL AXIS) BETWEEN THE MINIMUM AND MAXIMUM VALUES.
^IF "^^STEP=\\" IS SPECIFIED, THE VALUE AXIS OF THE GRAPH WILL BE
DIVIDED INTO INTERVALS WITH A STEP SIZE EQUAL TO THE POSITIVE REAL
NUMBER INDICATED. ^THE INTERVALS WILL BEGIN AT THE MINIMUM VALUE,
AND CONTINUE FOR AS MANY INTERVALS AS NECESSARY TO PLOT THE
MAXIMUM VALUE. ^NOTE THAT "^^INTERVALS=\\" AND "^^STEP=\\"
ARE BOTH WAYS OF SPECIFYING THE INCREMENTS ON THE VALUE AXIS (OR
XAXIS). ^IF NEITHER "^^INTERVALS=\\" NOR "^^STEP=\\" IS GIVEN,
"^^INTERVALS=4\\" IS ASSUMED.
.SKIP 1
^THE FREQUENCY OR PROBABILITY AXIS OF THE GRAPH (THE YAXIS)
IS ALWAYS DIVIDED INTO 4 INTERVALS, AND IS
PRINTED HORIZONTALLY ON THE PAGE.
.SKIP 1
^THE FINAL TWO OPTIONAL FIELDS CAN BE USED TO SPECIFY
THE MINIMUM AND MAXIMUM VALUES TO BE SHOWN ON EACH AXIS. ^IF
EITHER OR BOTH OF THESE FIELDS IS GIVEN, ^^BBL\\
USES THE FIRST VALUE AS THE MINIMUM, AND THE SECOND VALUE
AS THE MAXIMUM. (^IF THE TRUE MINIMUM IS
LESS THAN THE SPECIFIED MINIMUM, THE TRUE MINIMUM OVERRIDES THE
SPECIFIED MINIMUM. ^THE SAME IS TRUE FOR
THE MAXIMUM.) ^IF THE MINIMUM AND MAXIMUM FOR EITHER AXIS ARE NOT
SPECIFIED, ^^BBL\\ COMPUTES THE TRUE MAXIMUM AND MINIMUM AND USES
THESE VALUES ON THE AXES.
.SKIP 1
^THE GRAPH STATEMENT SERVES THE SAME ROLE AS THE DISPLAY
STATEMENT WHEN THE FUNCTION FORM OF THE SHOW STATEMENT IS ENCOUNTERED.
^^BBL\\ ASSUMES THE LIST FUNCTIONS WITHOUT ARGUMENTS IN SUCH A 
STATEMENT SHOULD REFERENCE THE ^^RP_#\\ VARIABLE SPECIFIED IN
THE GRAPH STATEMENT. (^SEE FUNCTION FORM OF THE SHOW STATEMENT IN
THIS SECTION.)
.SKIP 1
(^THE GRAPH STATEMENT CAN ALSO BE USED TO GRAPH STANDARD ^^BBL\\
VECTORS AS EXPLAINED UNDER "^OTHER ^SPECIAL ^^BBL\\ ^STATEMENTS."
^A SINGLE GRAPH STATEMENT CAN NOT BE USED TO GRAPH STANDARD
^^BBL\\ VECTORS AND RISK PROFILE VARIABLES, SINCE DIFFERENT OPTIONAL
FIELDS ARE PROVIDED.
.SKIP 1
^FOUR EXAMPLES OF RISK PROFILE GRAPHS FOLLOW:
.LEFT MARGIN 0
.RIGHT MARGIN 72
.NOFILL
.TEST PAGE 35
.SKIP 4
.CENTER 72
^CUMULATIVE ^DISCRETE ^RISK ^PROFILE ^GRAPH
.SKIP 4
^^
CUMULATIVE RISK PROFILE:
-----------------------
.SKIP 1
         0.000          .250          .500          .750         1.000
             +-------------+-------------+-------------+-------------+
             '
             '
             '
 $ 42.18     XX
             'X
             'X
             'X
 $ 45.46     +X
             'X
             'X
             'X
 $ 48.75     +XXX
             '  X
             '  X
             '  XX
 $ 52.04     +   XXXX
             '      X
             '      X
             '      XX
 $ 55.33     +       XXXXX
             '           XX
             '            XXXXX
             '                XXXXX
 $ 58.61     +                    XXXXXXX
             '                          XXXXX
             '                              XXXXXX
             '                                   XXX
 $ 61.90     +                                     XXXXXXXXXX
             '                                              XXX
             '                                                X
             '                                                XXXX
 $ 65.19     +                                                   X
             '                                                   XX
             '                                                    X
             '                                                    XX
 $ 68.48     +                                                     XXX
\\
.TEST PAGE 35
.SKIP 4
.CENTER 72
^CUMULATIVE ^CONTINUOUS ^RISK ^PROFILE ^GRAPH
.SKIP 4
^^
CUMULATIVE RISK PROFILE:
-----------------------
.SKIP 1
         0.000          .250          .500          .750         1.000
             +-------------+-------------+-------------+-------------+
             '
             '
             '
 $ 38.89     X
             X
             X
             'X
 $ 42.60     +X
             'X
             'X
             'X
 $ 46.31     + X
             ' X
             ' X
             '  X
 $ 50.02     +   X
             '   X
             '     X
             '      X
 $ 53.73     +      X
             '        X
             '            X
             '              X
 $ 57.45     +                   X
             '                        X
             '                             X
             '                                    X
 $ 61.16     +                                      X
             '                                              X
             '                                                X
             '                                                  X
 $ 64.87     +                                                   X
             '                                                   X
             '                                                    X
             '                                                     X
 $ 68.58     +                                                       X
\\
.TEST PAGE 39
.SKIP 4
.CENTER 72
^MASS ^DISCRETE ^RISK ^PROFILE ^GRAPH
.SKIP 4
^^
MASS RISK PROFILE:
-----------------
.SKIP 1
         0.000          .050          .100          .150          .200
             +-------------+-------------+-------------+-------------+
             '
             '
             '
 $ 42.18     XXXXXXX
             X
             X
             X
 $ 45.46     X
             X
             X
             X
 $ 48.75     XXXXXXXXXXXX
             X
             X
             XXXXXXX
 $ 52.04     XXXXXXXXXXXX
             X
             X
             XXXXXXX
 $ 55.33     XXXXXXXXXXXXXXXXXXXXXXX
             XXXXXXX
             XXXXXXXXXXXXXXXXXX
             XXXXXXXXXXXXXXXXXXXXXXX
 $ 58.61     XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
             XXXXXXXXXXXXXXXXXXXXXXX
             XXXXXXXXXXXXXXXXXXXXXXX
             XXXXXXXXXXXX
 $ 61.90     XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
             XXXXXXXXXXXX
             X
             XXXXXXXXXXXX
 $ 65.19     X
             XXXXXXX
             X
             XXXXXXX
 $ 68.48     XXXXXXXXXXXX
             '
             '
             '
\\
.TEST PAGE 39
.SKIP 4
.CENTER 72
^MASS ^CONTINUOUS ^RISK ^PROFILE ^GRAPH
.SKIP 4
^^
MASS RISK PROFILE:
-----------------
.SKIP 1
         0.000          .050          .100          .150          .200
             +-------------+-------------+-------------+-------------+
             '
             '
             '
 $ 38.89     X
             XX
             XX
             XX
 $ 42.60     XX
             XX
             XX
             XX
 $ 46.31     XXX
             XXX
             XXX
             XXXX
 $ 50.02     XXXXX
             XXXX
             XXXXXXXXX
             XXXXXX
 $ 53.73     XXXXX
             XXXXXXXXXX
             XXXXXXXXXXXXXXXXXXX
             XXXXXXXXXXXXXX
 $ 57.45     XXXXXXXXXXXXXXXXXXXXXXXXXXX
             XXXXXXXXXXXXXXXXXXXXXX
             XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
             XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 $ 61.16     XXXXXXXXXXXXXX
             XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
             XXXXXXXXXX
             XXXXXXXX
 $ 64.87     XXXXXXX
             XXXX
             XXXXX
             XXXXXXX
 $ 68.58     XXXXXXXXXX
             '
             '
             '
\\
.PAGE
.LEFT MARGIN 20
.RIGHT MARGIN 65
.FILL
^FOUR ANALOGOUS GRAPHS COULD BE PRODUCED ON A FREQUENCY
BASIS (RATHER THAN PROBABILITY) IF THE ^^RP_#\\ VARIABLE WERE DEFINED
AS "^^STEP\\" OR "^^SMOOTH\\". (^NOTE THAT GRAPHING
A RISK PROFILE IN NO WAY ALTERS OR REARRANGES THE ITEMS IN THE LIST.
^THEREFORE, GRAPHING A RISK PROFILE DOES NOT LOOSE ANY
INFORMATION CONTAINED IN THE LIST CONCERNING THE ORDER IN WHICH
THE ITEMS WERE COLLECTED.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^GRAPH RPA_# USING 100-200,210 INTERVALS=10
.SKIP 1
GRAPH RPA_#,RPB_#, STEP=12.5% XAXIS=100,200
.SKIP 1
GRAPH(N6:N) RAP_# USING 110,115 STEP=50.0\\
.FILL
.PAGE
^^LET\\ (RISK PROFILE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^[LET] RPV_#=RPV_#\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE LET STATEMENT CAN BE USED TO EQUATE ANY TWO RISK
PROFILE VARIABLES. ^THE ^^RP_#\\ VARIABLE TO THE LEFT OF THE
EQUAL SIGN WILL BE ASSIGNED THE SAME ITEMS AS ARE IN THE RISK PROFILE
VARIABLE TO THE RIGHT OF THE EQUAL SIGN. ^ONLY ONE ^^RP_#\\ VARIABLE
CAN BE USED ON EITHER SIDE, AND NO ARITHMETIC OPERATIONS ARE
PERMITTED. (^RISK PROFILES CAN BE EQUATED TO STANDARD LISTS AND
VICE VERSA. ^SEE "^THE ^GENERALIZED ^^BBL\\ ^LIST ^CAPABILITY".)
^THE ^^RP_#\\ TYPE AND SORT SPECIFICATION OF THE ^^RP_#\\
VARIABLE TO THE LEFT OF THE EQUAL SIGN ARE NOT CHANGED.
^HOWEVER, THE CURRENT POINTER POSTION FOR THE LEFT-HAND SIDE
^^RP_#\\ VARIABLE IS SET TO THE SAME RELATIVE ITEM AS THE
RIGHT-HAND ^^RP_#\\ VARIABLE. ^IF THE LEFT-HAND ^^RP_#\\
IS SORTED, THE VALUES TRANSFERRED INTO THE LIST WILL BE SORTED.
(^CAUTION: ^IF THE RIGHT-HAND SIDE LIST IS A SORTED LIST
AND WAS INADVERTENTLY
"UNSORTED" BY A PUT STATEMENT OVERRIDING A CORRECT SORT, THE
SORTING OF THE LEFT-HAND VARIABLE MAY BE SIMILARLY CONFUSED.)
.SKIP 2
.NOFILL
.INDENT -9
^^EXAMPLE:#^^LET RPA_#=RPB_#\\
.FILL
.PAGE
^^PRINT\\ (RISK PROFILE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^PRINT[(VAR[:VAR])] RPV_#,RPV_#,...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^ANY STANDARD ^^BBL\\ PRINT STATEMENT CAN SPECIFY A 
^^RP_#\\ VARIABLE TO BE PRINTED. ^WHEN PRINTED, EACH ITEM IN THE
^^RP_#\\ VARIABLE WILL BE SHOWN IN ORDER, WITH ONE ITEM PER LINE,
UNTIL ALL ITEMS HAVE BEEN PRINTED. ^ANY COMBINATION OF STANDARD
^^BBL\\ EXPRESSIONS, STRING VARIABLES, OR LIST VARIABLES MAY BE USED
IN THE SAME PRINT STATEMENT. (^NOTE: ^THE / AND : PRINT OPTIONS
CAN BE USED. ^HOWEVER, >, <, ><, $, %, AND .XXX SHOULD BE
AVOIDED.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^PRINT RPA_#,RPB_#
.SKIP 1
PRINT(N2)//"CONTENTS OF RPA_#",/RPA_#
.SKIP 1
PRINT(20:N) "SALES=",/RPZ_#\\
.FILL
.PAGE
^^SORT\\ (RISK PROFILE FORM)
.SKIP 2
.INDENT -6
^FORM:#^^SORT RPV_#,RPV_#,...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^BBL\\ SORT STATEMENT CAN BE USED TO SORT
ANY LIST VARIABLE OR ^^BBL\\ VECTOR. (^SEE "^THE ^GENERALIZED
^^BBL\\ ^LIST ^CAPABILITY" FOR LIST SORTS, AND "^OTHER ^SPECIAL
^^BBL\\ ^STATEMENTS" FOR VECTOR SORTS.) ^WHEN EXECUTED, ALL ITEMS
IN THE LIST WILL BE REARRANGED FROM SMALLEST TO LARGEST.
(^IF THE LIST VARIABLE IS DEFINED AS A SORTED LIST,
THIS IS PROBABLY REDUNDANT UNLESS THE SORTED LIST BECAME
ACCIDENTLY "UNSORTED" VIA AN IMPROPER USE OF THE PUT STATEMENT.)
^IF THE LIST VARIABLE IS NOT DEFINED AS A SORTED LIST,
THE SORT STATEMENT WILL SORT THE LIST VARIABLE, YET NOT AFFECT
ITS "NON-SORT" TYPE.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^SORT RPA_#,RPB_#
.SKIP 1
SORT RPC_#\\
.FILL
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^X^I
.PAGE
.CENTER 65
^THE ^GENERALIZED ^^BBL\\
.CENTER 65
^LIST ^CAPABILITY
.SKIP 4
.PARAGRAPH
^IN THE PRECEDING SECTION, RISK PROFILES (^^RP_#\\
VARIABLES) WERE DESCRIBED AS LISTS OF NUMERIC DATA WHICH COULD BE
DISPLAYED OR GRAPHED IN SPECIAL REPORTS. ^^RP_#\\ VARIABLES
FALL INTO A GENERAL CLASS OF "NUMERIC LISTS" WHICH CAN BE MANIPULATED
VIA SPECIAL ^^BBL\\ CAPABILITIES. ^EACH NUMERIC LIST CAN BE THOUGHT
OF AS A VARIABLE LENGTH MATRIX. ^BY THIS IT IS MEANT THAT THE SIZE
OF EACH ROW (CALLED AND "ITEM" IN A LIST) IS FIXED, BUT THE TOTAL
NUMBER OF ITEMS (ROWS) IN THE LIST CAN VARY:
.SKIP 2
.LEFT MARGIN 10
.TEST PAGE 18
.NOFILL
^^
             FIXED ATTRIBUTES PER ITEM
.SKIP 1
         ATT 1  ATT 2  ATT 3   ...   ATT N
        '------'------'------'------'------'
ITEM 1  '      '      '      '      '      '
        '------'------'------'------'------'
ITEM 2  '      '      '      '      '      '
        '------'------'------'------'------'
ITEM 3  '      '      '      '      '      ' VARIABLE
        '------'------'------'------'------' NUMBER OF
ITEM 4  '      '      '      '      '      ' ITEMS IN
        '------'------'------'------'------' THE LIST
                          .
                          .
                          .
        '------'------'------'------'------'
ITEM M  '      '      '      '      '      '
        '------'------'------'------'------'
\\
.SKIP 2
.FILL
.LEFT MARGIN 5
.PARAGRAPH
^IN THE DIAGRAM, EACH ITEM HAS A FIXED SIZE OR A FIXED NUMBER OF
"ATTRIBUTES". ^HOWEVER, THE TOTAL NUMBER OF ITEMS IN THE LIST
CAN VARY, I.E. CAN GROW OR CONTRACT. ^IN OTHER WORDS, A NUMERIC
LIST CAN HAVE A VARYING NUMBER OF ITEMS, BUT EACH ITEM WITHIN THE
LIST WILL HAVE THE SAME NUMBER OF ATTRIBUTES.
.PARAGRAPH
^FROM THIS GENERAL DEFINITION OF A NUMERIC LIST, IT CAN BE
SEEN THAT RISK PROFILES ARE REALLY ONLY NUMERIC LISTS WITH A SINGLE
ATTRIBUTE FOR EACH ITEM:
.SKIP 2
.NOFILL
.TEST PAGE 16
.LEFT MARGIN 25
^^
         ATT 1
        '------'
ITEM 1  '      '
        '------'
ITEM 2  '      '
        '------'
ITEM 3  '      '
        '------'
ITEM 4  '      '
        '------'
            .
            .
            .
        '------'
ITEM M  '      '
        '------'
\\
.LEFT MARGIN 5
.SKIP 2
.FILL
.PARAGRAPH
^ANY NUMERIC LIST VARIABLE IS REPRESENTED WITH THE "_#"
SYMBOL FOLLOWING THE LAST ALPHANUMERIC CHARACTER IN THE NAME.
(^RISK PROFILE LISTS, FOR EXAMPLE, ARE NAMED "^^RPV_#\\", ETC.)
^STANDARD CONVENTIONS FOR NAMING UNSUBSCRIPTED AND SUBSCRIPTED
VARIABLES APPLY, EXCEPT THE _# IS ADDED:
.SKIP 1
.LEFT MARGIN 22
.NOFILL
^^
A0_#, A1_#, A2_#, ..., Z9_#
A_#(10), B_#(10), ..., Z_#(10)
\\
.FILL
.LEFT MARGIN 5
.SKIP 1
^THE ^^BBL\\ SYSTEM ALSO PERMITS THE USER TO USE THE NAME:
.SKIP 1
.INDENT 25
^^CLOCK_#\\
.SKIP 1
^THIS ^^CLOCK_#\\ IS PERMITTED SINCE MANY SIMULATION MODELS MAKE USE OF
A TIME CLOCK, OR LIST OF FUTURE EVENTS TO BE PROCESSED. ^IF ^^CLOCK_#\\
IS DEFINED AS A LIST, IT FOLLOWS ALL CONVENTIONS OF LISTS WITH
STANDARD NAMES. ^THEREFORE, ^^CLOCK_#\\ IS PROVIDED TO ADD 
"READABILITY" TO A USER'S PROGRAM STATEMENTS.
.PARAGRAPH
^NUMERIC LIST VARIABLES, LIKE ALPHANUMERIC STRING VARIABLES, ARE
RESTRICTED TO A SINGLE SUBSCRIPT. (^^CLOCK_#\\ CAN HAVE NO SUBSCRIPT.)
^USING THE SUBSCRIPT, THE USER CAN DESCRIBE A FAMILY OF NUMERIC
LISTS, EACH WITH THE SAME FIXED NUMBER OF ATTRIBUTES PER ITEM.
^HOWEVER, UNLIKE STANDARD ^^BBL\\ ARRAYS AND STRING VARIABLES,
SUBSCRIPTED NUMERIC LISTS SHOULD BE DIMENSIONED VIA A DEFINE 
LIST STATEMENT, AND NO DEFAULT DIMENSIONS WILL BE ALLOWED IF A LIST
IS NOT DEFINED.
.PARAGRAPH
^WIDE APPLICATIONS EXIST FOR NUMERIC LISTS IN BOTH
QUEUEING MODELS AND IMMINENT EVENT SIMULATION MODELS. ^FOR EXAMPLE,
A LIST CAN REPRESENT A GROWING OR CONTRACTING NUMBER OF ITEMS (PARTS,
ORDERS, CUSTOMERS, ETC.) WAITING TO BE PROCESSED. ^THE NUMERIC
LIST OPERATIONS, LIKE THE STRING OPERATIONS, DYNAMICALLY
ALLOCATE MEMORY TO THE USER AS THE LISTS GROW AND CONTRACT.
^THIS DYNAMIC ALLOCATION IS INVISIBLE TO THE USER, AND IS ONLY
CONSTRAINED BY THE TOTAL AMOUNT OF MEMORY AVAILABLE TO THE
^^BBL\\ SYSTEM.  ^THIS DYNAMIC MEMORY SCHEME MAKES MAXIMUM USE
OF THE AVAILABLE MEMORY THROUGHOUT EXECUTION OF A QUEUEING MODEL,
SIMULATION, ETC. (^SEE ^^BBL\\ ^TECHNICAL ^SPECIFICATIONS AT THE
BACK OF THIS MANUAL.)
.PARAGRAPH
^THE GENERAL FRAMEWORK FOR PROCESSING LISTS WITHIN ^^BBL\\ IS AS
FOLLOWS:
.SKIP 1
.LEFT MARGIN 29
.INDENT -22
1.#^DEFINE#^STATEMENT###TO DEFINE A SINGLE LIST, OR FAMILY
OF LISTS
.SKIP 1
.INDENT -22
2.#^INSERT#^STATEMENT###TO ADD ITEMS TO THE LIST
.SKIP 1
.INDENT -22
3.#^PUT#^STATEMENT######TO CHANGE THE ATTRIBUTE VALUES OF AN
EXISTING ITEM IN A LIST
.SKIP 1
.INDENT -22
4.#^FIND#^STATEMENT#####TO LOCATE SPECIFIC ITEMS WITHIN THE LIST
.SKIP 1
.INDENT -22
5.#^GET#^STATEMENT######TO RETRIEVE ATTRIBUTE VALUES FROM THE LIST
.SKIP 1
.INDENT -22
6.#^REMOVE#^STATEMENT###TO RETRIEVE ATTRIBUTE VALUES FROM THE LIST,
AND REMOVE THE ITEM AT THE SAME TIME
.SKIP 1
.INDENT -22
7.#^CLEAR#^STATEMENT####TO EMPTY THE LIST
.LEFT MARGIN 5
.PARAGRAPH
^^BBL\\ ALLOWS THE USER TO DEFINE SUBSCRIPTED LISTS WITH A VARIABLE
NUMBER OF FAMILY MEMBERS. ^THAT IS, AT ONE POINT IN TIME A FAMILY
MIGHT CONSIST OF:
.SKIP 1
.INDENT 20
^^B_#(0) THROUGH B_#(10)\\
.SKIP 1
^AT A DIFFERENT POINT IN TIME THE
SAME FAMILY OF LISTS MIGHT INCLUDE:
.SKIP 1
.INDENT 20
^^B_#(8) THROUGH B_#(12)\\
.PARAGRAPH
^NUMERIC LISTS WHICH CAN HAVE TEMPORARY FAMILY MEMBERS
ARE CALLED "TEMPORARY NUMERIC LISTS" (AS OPPOSED TO "PERMANENT
NUMERIC LISTS"), AND ARE EXPLAINED MORE COMPLETELY UNDER THE DEFINE
STATEMENT IN THIS SECTION. ^TWO SPECIAL ^^BBL\\ LIST
STATEMENTS ALLOW THE USER TO INCLUDE NEW FAMILY MEMBERS
OR ELIMINATE OLD FAMILY MEMBERS FROM A FAMILY OF TEMPORARY LISTS:
.SKIP 1
.LEFT MARGIN 29
.TEST PAGE 6
.INDENT -22
1.#^CREATE#^STATEMENT###TO ADD A NEW FAMILY MEMBER TO A FAMILY
OF "TEMPORARY NUMERIC LISTS"
.SKIP 1
.INDENT -22
2.#^DESTROY#^STATEMENT##TO ELIMINATE AN OLD FAMILY MEMBER FROM A
FAMILY OF "TEMPORARY NUMERIC LISTS"
.LEFT MARGIN 5
.PARAGRAPH
^IN ADITION, NUMERIC LIST VARIABLES CAN BE USED IN THE STANDARD
^^BBL\\ LET STATEMENT, PRINT STATEMENT, AND SORT STATEMENT.
^FINALLY, VARIOUS STATISTICS (SUCH AS MEAN, VARIANCE, ETC.)
CAN BE CALCULATED BY USING SPECIAL INTERNAL ^^BBL\\ FUNCTIONS
DESCRIBED IN THE SECTION "^INTERNAL ^^BBL\\ 
^FUNCTIONS" AT THE BACK OF THIS MANUAL.
.PAGE
.LEFT MARGIN 20
^^DEFINE LIST\\
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^DEFINE#VAR_#(CON),...#WITH#CON#[ATTRIBUTES]...\\
.SKIP 1
.INDENT 18
^^...[SORTED [ON CON]]\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE DEFINE STATEMENT (LIST FORM) SHOULD BE USED TO
ESTABLISH A LIST VARIABLE, AND ITS FIXED NUMBER OF ATTRIBUTES
PER ITEM. ^EACH DEFINED LIST VARIABLE CAN BE SUBSCRIPTED WITH
A SINGLE CONSTANT, WHICH SPECIFIES THE TOTAL NUMBER OF LISTS IN THE
FAMILY BEING DEFINED. ^THE "^^WITH\\" FIELD SPECIFIES THE TOTAL 
NUMBER OF ATTRIBUTES PER ITEM TO BE ALLOCATED FOR EACH LIST
BEING DEFINED. (^THE WORD "^^ATTRIBUTE\\" IS PURELY OPTIONAL AND
IS PROVIDED FOR CLARITY.) ^UP TO 15 ATTRIBUTES ARE ALLOWED IN ANY
ONE ITEM OF A LIST.
.SKIP 1
^A SECOND FIELD, "^^SORTED ON\\" IS OPTIONAL, AND MAY BE SPECIFIED
LAST IN THE DEFINE STATEMENT TO INDICATE WHICH ATTRIBUTE 
SHOULD BE USED FOR SORTING ENTRIES INTO THE LIST. ^IF THE OPTION
IS NOT SPECIFIED, ITEMS ARE ARRANGED IN THE SAME ORDER AS THEY ARE
ENTERED INTO THE LIST. ^THE FIRST ITEM ENTERED INTO THE LIST
WILL BE FIRST. ^THE SECOND ITEM ENTERED WILL BE SECOND, ETC. ^IF
THE DEFINE STATEMENT SPECIFIES THE LIST TO BE SORTED, ITEMS
WITHIN THE LIST WILL BE ARRANGED IN ORDER OF THE SIZE
OF ONE ATTRIBUTE, FROM SMALLEST FIRST TO LARGEST LAST.
^IF A LIST IS DEFINED ONLY AS "^^SORTED\\", THE FIRST ATTRIBUTE
IN EACH ITEM IS USED FOR SORTING. ^IF A "^^SORTED ON\\"
ATTRIBUTE NUMBER IS SPECIFIED, THAT ATTRIBUTE IS USED FOR SORTING.
(^OF COURSE THE ATTRIBUTE FOR SORTING MUST NOT BE GREATER THAN
THE NUMBER OF ATTRIBUTES DEFINED FOR THE LIST. ^NOTE ALSO THAT,
ALTHOUGH A LIST MIGHT BE SPECIFIED AS AN UNSORTED LIST, IT CAN
LATER BE SORTED VIA A SORT STATEMENT.)
.SKIP 1
^SORTING LISTS IS USEFUL FOR ARRANGING THE ITEMS FOR PRINTING, OR
FOR REMOVAL ACCORDING TO SIZE, OR FOR SEARCHING THE ITEMS IN THE
LIST FROM SMALLEST TO LARGEST VIA THE FIND STATEMENT DISCUSSED
LATER IN THIS SECTION. ^UNSORTED LISTS ARE PREFERABLE
WHEN THE REQUIRED ORDER IS BASED ON THE ORDER IN WHICH ITEMS 
ARE ENTERED INTO THE LIST. ^FOR EXAMPLE, ITEMS COULD BE
ADDED TO AN UNSORTED LIST, AND COULD BE SEARCHED
VIA A FIND STATEMENT FOR EITHER "FIRST-IN-FIRST-OUT" OR
"LAST-IN-FIRST-OUT" METHODS OF REMOVING ITEMS
FROM THE LIST. ^IT IS ALSO PREFERABLE TO LEAVE A LIST UNSORTED,
IF POSSIBLE, SINCE THIS AVOIDES THE EXTRA INTERNAL ^^BBL\\ OPERATIONS
REQUIRED TO KEEP THE LIST SORTED.
.SKIP 1
^AS MENTIONED IN THE INTRODUCTION TO THIS SECTION,
A FAMILY OF LISTS CAN BE DEFINED WITH A VARIABLE NUMBER OF MEMBERS.
^THIS TYPE OF LIST IS CALLED A "TEMPORARY" LIST, WHEREAS THE STANDARD
LIST IS CALLED A "PERMANENT" LIST. ^TEMPORARY LISTS ARE, FOR THE
MOST PART, SIMILAR TO PERMANENT LIST, EXCEPT:
.SKIP 1
.LEFT MARGIN 25
.INDENT -2
_.#^TEMPORARY LISTS ONLY CONSUME STORAGE WHEN "CREATED" AND
RETURN STORAGE TO THE ^^BBL\\ SYSTEM FREE MEMORY AREA WHEN
"DESTOYED".
.SKIP 1
.INDENT -2
_.#^TEMPORARY LIST MEMBERS MAY BE CREATED WITH ANY NON-NEGATIVE NUMERIC
SUBSCRIPT DESIGNATION, AND THE CURRENT MEMBERS
OF A TEMPORARY LIST FAMILY NEED NOT HAVE SUBSCRIPT DESIGNATIONS
IN A CONTINUOUS BLOCK. ^FOR EXAMPLE, DEFINING A PERMANENT LIST 
AS ^^A_#(2)\\ IMPLIES THREE FAMILY MEMBERS AT ALL TIMES:
.SKIP 1
.INDENT 10
^^A_#(0)  A_#(1)  A_#(2)\\
.SKIP 1
^ON THE OTHER HAND, DEFINING A TEMPORARY LIST AS ^^A_#(*)\\
IMPLIES THAT A VARIABLE NUMBER OF FAMILY MEMBERS CAN EXIST. ^THREE
MEMBERS MIGHT BE CREATED AS:
.SKIP 1
.INDENT 10
^^A_#(132)  A_#(16)  A_#(1001)\\
.SKIP 1
^NOTE THAT ^^BBL\\ DYNAMICALLY ALLOCATES MEMORY TO ONLY THOSE TEMPORARY
LISTS WHICH ARE CREATED. ^THIS EXAMPLE CAUSES 3 LISTS TO BE
SET UP, NOT 1001 LISTS.
.SKIP 1
.INDENT -2
_.#^NOT ONLY CAN THE ITEMS IN EACH LIST VARY,
BUT ALSO THE NUMBER OF LISTS CAN VARY. ^THEREFORE
TEMPORARY ^^BBL\\ LIST ARE SLIGHTLY
LESS EFFICIENT IN OPERATING EFFICIENCY WHEN TEMPORARY
LISTS ARE IN EXISTENCE.
^IT IS THEREFORE WISE TO DEFINE PERMANENT LISTS WHEN THE DYNAMIC
CREATION AND ELIMINATION CAPABILITY IS NOT ESSENTIAL TO THE USER'S
ANALYSIS.
.SKIP 1
.LEFT MARGIN 20
^IN ORDER TO DEFINE A TEMPORARY LIST FAMILY, THE SUBSCRIPTED NUMERIC
LIST SHOULD BE DEFINED WITH A SINGLE ASTERISK SUBSCRIPT. ^FOR EXAMPLE:
.RIGHT MARGIN 75
.SKIP 1
^^100 DEFINE A_#,B_#(10),C_#(*) WITH 5 ATTRIBUTES\\
.RIGHT MARGIN 65
.SKIP 1
^THIS STATEMENT HAS DEFINED A SINGLE PERMANENT LIST ^^A_#\\,
A PERMANENT FAMILY OF LISTS WITH 11 MEMBERS ^^B_#(0)\\
THROUGH ^^B_#(10)\\, AND A TEMPORARY FAMILY OF LISTS WITH
AN UNCERTAIN NUMBER OF MEMBERS ^^C_#(*)\\.
^THE "^^CREATE\\" AND "^^DESTROY\\" STATEMENTS EXPLAINED IN THIS
SECTION CAN BE USED TO INCLUDE OR ELIMINATE DIFFERENT MEMBERS
OF THE ^^C_#(*)\\ FAMILY OF LISTS AS THE PROGRAM
IS EXECUTED.
.SKIP 2
.RIGHT MARGIN 75
.NOFILL
.INDENT -10
^EXAMPLES:#^^DEFINE A_#,B6_#,B_#(20) WITH 12 ATTRIBUTES
.SKIP 1
DEFINE Q_#,Q_#(10) WITH 2 SORTED
.SKIP 1
DEFINE D_#(*) WITH 2 ATTRIBUTES SORTED ON 2\\
.FILL
.RIGHT MARGIN 65
.PAGE
^^INSERT\\ (GENERAL LIST FORM)
.SKIP 2
.INDENT -6
^FORM:#^^INSERT EXP,... INTO VAR_#(EXP) [ERR=L1]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE INSERT STATEMENT ENTERS AN ADDITIONAL ITEM INTO
A NUMERIC LIST. ^EACH STANDARD ^^BBL\\ EXPRESSION FOLLOWING THE
KEY WORD "^^INSERT\\" IS EVALUATED AND BECOMES THE VALUE OF THE
CORRESPONDING ATTRIBUTE IN THE ITEM BEING ENTERED. (^IF FEWER
EXPRESSIONS ARE GIVEN THAN DEFINED ATTRIBUTES IN THE LIST, THE 
REMAINING ATTRIBUTES ARE ENTERED AS ZERO. ^IF MORE EXPRESSIONS ARE
GIVEN THAN DEFINED ATTRIBUTES IN THE LIST, THE EXTRA EXPRESSIONS
ARE IGNORED.)
.SKIP 1
^THE "^^INTO\\" FIELD SPECIFIES THE NUMERIC LIST INTO WHICH THE 
ITEM SHOULD BE ENTERED. ^IF THE LIST IS NON-SORTED, THE ITEM WILL
BE APPENDED TO THE END OF THE LIST. ^IF THE
LIST IS SORTED ON ANY ATTRIBUTE, THE ITEM WILL BE INSERTED INTO THE
LIST DIRECTLY AFTER ALL CURRENT ITEMS WITH A CORRESPONDING
ATTRIBUTE VALUE EQUAL TO OR LESS THAN THE ATTRIBUTE VALUE BEING
ADDED. (^LISTS ARE SORTED MINIMUM TO MAXIMUM.)
.SKIP 1
^SINCE ^^BBL\\ ALLOWS TEMPORARY LISTS, THE USER MIGHT
ATTEMPT TO "^^INSERT\\" AN ITEM INTO A NON-EXISTENT MEMBER OF A
DEFINED TEMPORARY LIST VARIABLE. ^THIS WILL CAUSE AN ERROR CONDITION.
^THE USER CAN COMPENSATE WITH THE OPTIONAL "^^ERR=\\" FIELD.
^IF "^^ERR=\\" IS SPECIFIED, AN INSERT STATEMENT WHICH ATTEMPTS
TO ADD AN ITEM TO A NON-EXISTENT LIST WILL CAUSE CONTROL TO BE
TRANSFERRED TO THE INDICATED LINE NUMBER.
.SKIP 1
(^^BBL\\'S ASTERISK SUBSCRIPTING CAPABILITY
WILL PERMIT THE "^^INTO\\" LIST TO BE SUBSCRIPTED WITH AN ASTERISK
OR EXPRESSION CONTAINING AN ASTERISK AS SHOWN IN "^^BBL\\
^STATEMENT ^SUMMARY\\". ^IF THIS CAPABILITY IS USED, THE OPTIONAL
"^^ERR=\\" FIELD IS IGNORED BY ^^BBL\\. ^IF THE
"^^INTO\\" FIELD SPECIFIES A LIST OF THE FORM "^^VAR_#(*)\\",
THEN THE INDICATED ITEM WILL BE ENTERED INTO EACH CURRENT FAMILY
MEMBER, TEMPORARY OR PERMANENT, AND "^^ERR=\\" IS MEANINGLESS.
^IF THE "^^INTO\\" LIST IS OF THE FORM "^^VAR_#(EXP(*))\\",
"^^ERR=\\" IS NOT RECOGNIZED BY THE ^^BBL\\ SYSTEM FOR THAT ^^VAR_#\\.
^OF COURSE "^^ERR=\\" IS MEANINGLESS FOR UNSUBSCRIPTED VARIABLES
SINCE THEY CAN NEVER BE TEMPORARY LISTS.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^INSERT A+B,A1+B1 INTO Q_#(I)
.SKIP 1
INSERT A,B,C,D INTO V6_#
.SKIP 1
INSERT S(I)*100,Q9 INTO A_#(P6) ERR=100\\
.FILL
.PAGE
^^PUT\\ (GENERAL LIST FORM)
.SKIP 2
.INDENT -6
^FORM:#^^PUT EXP,... INTO VAR_#(EXP) [ERR=L1]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE PUT STATEMENT REPLACES
THE ATTRIBUTE VALUES OF AN ITEM IN A LIST WITH NEW
ATTRIBUTE VALUES. ^EACH STANDARD EXPRESSION IS
EVALUATED AND BECOMES THE VALUE OF THE CORRESPONDING ATTRIBUTE
IN THE ITEM BEING REPLACED. ^THE LIST "POINTER" (EXPLAINED UNDER
THE FIND STATEMENT IN THIS SECTION) SPECIFIES THE ITEM TO BE REPLACED.
(^WHEN FEWER EXPRESSIONS ARE GIVEN THAN DEFINED ATTRIBUTES IN THE
LIST, THE REMAINING ATTRIBUTES ARE REPLACED WITH ZEROS.
^IF EXTRA EXPRESSIONS ARE GIVEN, THE EXTRAS ARE IGNORED.)
.SKIP 1
^THE "^^INTO\\" FIELD SPECIFIES THE NUMERIC LIST INTO WHICH
THE NEW ATTRIBUTE VALUES ARE PLACED. ^NOTE THAT A PUT STATEMENT
WILL ALWAYS REPLACE THE CURRENT "POINTED-TO" ITEM. ^FOR THIS
REASON, SORTED LISTS CAN BE "UN-SORTED" VIA A PUT STATEMENT, AND CARE
SHOULD BE TAKEN. ^IF A SORTED LIST IS TO REMAIN SORTED, AND THE
USER IS CONCERNED ABOUT REPLACING AN ITEM WITH A PUT STATEMENT,
TWO METHODS OF REPLACING WILL MAINTAIN THE SORT INTACT:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^REMOVE THE ITEM WITH A REMOVE STATEMENT, AND INSERT
THE ITEM WITH AN INSERT STATEMENT.
.SKIP 1
.INDENT -3
2.#^REPLACE THE ITEM VIA A PUT STATEMENT, AND SORT VIA THE SORT
STATEMENT. (^THIS METHOD IS PROBABLY LESS EFFICIENT.)
.SKIP 1
.LEFT MARGIN 20
^NORMALLY THE PUT STATEMENT REPLACES THE ATTRIBUTE
VALUES OF AN EXISTING ITEM IN A LIST. ^HOWEVER, THE PUT
STATEMENT CAN BE USED TO ADD ADDITIONAL ITEMS TO A LIST
(SIMILAR TO THE INSERT STATEMENT) IF:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#THE LIST POINTER IS NOT POSITIONED TO AN ITEM IN
THE LIST (I.E. IS POSITIONED AT THE START OR END OF THE LIST.)
.SKIP 1
.INDENT -3
2.#THE LIST IS EMPTY.
.SKIP 1
.LEFT MARGIN 20
^THE OPTIONAL "^^ERR=\\" FIELD PERMITS BRANCHING IF A 
PUT STATEMENT REFERENCES A NON-EXISTENT TEMPORARY LIST.
(^IF "^^ERR=\\" IS OMITTED, AND AN ATTEMPT IS MADE TO
PUT INTO A NON-EXISTENT LIST, AN ERROR CONDITION OCCURS.)
^AS EXPLAINED UNDER THE INSERT STATEMENT, "^^ERR=\\" FOR ASTERISK
SUBSCRIPTED LISTS IS IGNORED.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^PUT Q2,6%*B INTO Q_#(I)
.SKIP 1
PUT 1,B,6,C INTO V6_#
.SKIP 1
PUT A(I+J) INTO C_#(I+J) ERR=620\\
.FILL
.PAGE
^^FIND\\ (GENERAL LIST FORM)
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^FIND [FIRST] VAR_#(EXP) [WITH EXP LOG EXP]...\\
.BREAK
.INDENT 5
^^[NEXT]######################OPR\\
.BREAK
.INDENT 5
^^[LAST]\\
.SKIP 1
.INDENT 20
^^...[END=L1][ERR=L2]\\
.SKIP 2
.RIGHT MARGIN 65
.INDENT -13
^DESCRIPTION:#^EACH ^^BBL\\ NUMERIC LIST CAN BE ACCESSED BY A SERIES
OF ^^BBL\\ STATEMENTS. ^THE FIND STATEMENT IS USED TO CONTROL A
LIST "POINTER" ASSIGNED TO EACH LIST. ^THE POINTER CAN BE POSITIONED
TO SPECIFIC ITEMS IN A LIST, SO THE GET, REMOVE, PUT, AND
INSERT STATEMENTS MAY ACCESS A SPECIFIC ITEM.
.SKIP 1
^THE FIND STATEMENT MAY PROCEED TO SEARCH A LIST (1) FIRST ITEM
TO LAST ITEM, (2) NEXT ITEM TO LAST OR NEXT ITEM TO FIRST
OR (3) LAST ITEM TO FIRST, AS ALSO EXPLAINED WITH AN
EXAMPLE UNDER "^^FIND\\ (RISK PROFILE FORM)" IN THE
PRECEDING SECTION OF THIS MANUAL. ^IF THE FIRST/NEXT/LAST
SPECIFICATION IS OMITTED, A FIRST-TO-LAST SEARCH IS ASSUMED. ^THE
"^^NEXT\\" SEARCH ALWAYS PROCEEDS IN THE SAME DIRECTION (FIRST-TO-LAST
OR LAST-TO-FIRST) AS THE PRECEDING FIND STATEMENT WHICH
WAS EXECUTED ON THAT LIST. ^LISTS ARE ALWAYS INITIALIZED IN 
FIRST-TO-LAST SEARCH MODE.
.SKIP 1
^THUS EACH LIST HAS TWO ASSOCIATED PIECES OF INFORMATION
INTERNAL TO ^^BBL\\, THE POINTER POSITION AND THE FIND
DIRECTION:
.SKIP 2
.TEST PAGE 16
.NOFILL
.LEFT MARGIN 22
^^
         ATT 1   ...   ATT N
        '------'------'------'
ITEM 1  '      '      '      '
        '------'------'------'
ITEM 2  '      '      '      ' __POINTER
        '------'------'------'
ITEM 3  '      '      '      '
        '------'------'------'     _^
ITEM 4  '      '      '      ' DIRECTION
        '------'------'------'
                   .
                   .
                   .
        '------'------'------'
ITEM M  '      '      '      '
        '------'------'------'
\\
.SKIP 2
.LEFT MARGIN 20
.FILL
^THE FIND STATEMENT CAN INCLUDE AN OPTIONAL "^^WITH\\"
SPECIFICATION USED TO SET THE POINTER TO AN ITEM WHICH
SATISFIES A TEST SPECIFIED BY THE USER. ^THE "^^WITH\\" LOGICAL
COMPARISON CAN BE COMPOSED OF A DIRECT LOGICAL COMPARISON
BETWEEN ANY TWO STANDARD ^^BBL\\ EXPRESSIONS, OR BETWEEN TWO
^^BBL\\ STRING VARIABLES AND ALPHANUMERIC CONSTANTS.
(^SEE IF STATEMENT DESCRIPTIONS.) ^THE SEARCH PROCESS WILL
PROCEED AS SPECIFIED UNTIL THE SPECIFIED LOGICAL COMPARISON
IS TRUE.
.SKIP 1
^AS MENTIONED PREVIOUSLY UNDER "^^BBL\\ ^RISK ^PROFILES", THE
VARIABLE "^^ATT\\" CAN BE USED TO ACCESS EACH ITEM'S
ATTRIBUTE VALUE DURING A LOGICAL COMPARISON. ^ACTUALLY "^^ATT\\"
OR ALTERNATIVELY "^^ATT1\\" IS ONLY THE FIRST OF A SET OF
15 ATTRIBUTE VARIABLES WHICH CAN BE ACCESSED BY THE USER:
.SKIP 1
.INDENT 10
^^ATT1 ATT2 ATT3 ... ATT15\\
.SKIP 1
^AS A FIND SEARCH PROCEEDS, ^^ATT1\\ THROUGH ^^ATT15\\ WILL
AUTOMATICALLY BE ASSIGNED THE VALUES OF THE ATTRIBUTES IN EACH
SUCCESSIVE ITEM IN THE LIST. ^THE USER'S "^^WITH\\" TEST CAN
CHECK ANY ATTRIBUTE AGAINST CERTAIN REQUIREMENTS WHICH MUST
BE MET BEFORE THE CORRECT ITEM HAS BEEN FOUND. ^FOR EXAMPLE,
THE NEXT ITEM IN ^V_# WITH THE 3RD ATTRIBUTE EQUAL TO
ZERO MIGHT BE FOUND BY:
.SKIP 1
.INDENT 10
^^100 FIND NEXT V_# WITH ATT3=0\\
.SKIP 1
^IF A FIND STATEMENT SEARCH CAN NOT FIND A SATISFACTORY ITEM
(THE LIST IS EMPTY, NO MORE ITEMS EXIST WHICH SATISFY A "^^WITH\\"
TEST, ETC.), THE END (TOP OR BOTTOM) OF THE LIST WILL BE
ENCOUNTERED BY THE FIND STATEMENT. ^SPECIFYING AN "^^END=\\" LINE
NUMBER WILL TRANSFER CONTROL TO THE INDICATED LINE WHEN THIS OCCURS.
^IF NO "^^END=\\" OPTION IS SPECIFIED, AND THE END OF A LIST
IS ENCOUNTERED, AN ERROR CONDITION EXISTS.
.SKIP 1
^AS DISCUSSED UNDER THE "^^INSERT\\" STATEMENT IN THIS SECTION, ^^BBL\\
PERMITS THE USE OF TEMPORARY LISTS IN THIS STATEMENT AND OTHERS
THROUGHOUT THIS SECTION. ^TO AVOID SUBSCRIPTING A
NON-EXISTENT MEMBER OF A TEMPORARY LIST FAMILY, THE OPTIONAL
"^^ERR=\\" FIELD CAN BE SPECIFIED, AND CONTROL WILL
BE TRANSFERRED TO THE INDICATED LINE IF A NON-EXISTENT
LIST VARIABLE IS REFERENCED. ^OTHERWISE, REFERENCING A NON-EXISTENT
LIST VARIABLE (A TEMPORARY LIST) WILL CAUSE AN ERROR CONDITION.
("^^ERR=\\" DOES NOT APPLY FOR UNSUBSCRIPTED LISTS AND
FOR LISTS SUBSCRIPTED WITH AN ASTERISK. ^SEE THE INSERT
STATEMENT.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^FIND FIRST A6_# WITH ATT6<=ATT5
.SKIP 1
FIND NEXT B_#(I) END=200 ERR=300
.SKIP 1
FIND LAST C_#(I+J) WITH Q6<2 ERR=10\\
.FILL
.PAGE
^^GET\\ (GENERAL LIST FORM)
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^GET VAR(EXP),... FROM VAR_#(EXP) [END=L1][ERR=L2]\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE GET STATEMENT ASSIGNS THE ATTRIBUTE VALUES OF
AN ITEM IN A LIST TO A SERIES OF STANDARD ^^BBL\\ VARIABLES.
^THE ATTRIBUTE VALUES ASSIGNED ARE THE VALUES FOUND IN THE ITEM 
TO WHICH THE LIST POINTER IS CURRENTLY POINTING. (^SEE FIND
STATEMENT.) ^IF THE POINTER HAS BEEN POSITIONED TO EITHER END OF
A LIST (OR NEVER POSITIONED VIA A FIND STATEMENT) THE VARIABLES
WILL BE ASSIGNED ATTRIBUTE VALUES FROM THE FIRST
ITEM (IF THE SEARCH DIRECTION IS FIRST-TO-LAST) OR FROM THE LAST
ITEM (IF THE SEARCH DIRECTION IS LAST-TO-FIRST.)
^THEREFORE, A GET STATEMENT WILL ALWAYS RETRIEVE VALUES IF A LIST
IS NOT EMPTY, EVEN IF THE POINTER FOR THE LIST IS AT THE TOP
OR BOTTOM OF THE LIST. (^SEE GET STATEMENT UNDER "^^BBL\\ ^RISK
^PROFILES" FOR AN EXAMPLE.)
.SKIP 1
^IF A GET STATEMENT CONTAINS FEWER VARIABLES TO BE ASSIGNED VALUES
THAN ATTRIBUTE VALUES IN THE CURRENT ITEM, THE EXTRA ATTRIBUTE
VALUES ARE IGNORED. ^IF MORE VARIABLES THAN ATTRIBUTES ARE
SPECIFIED, THE EXTRA VARIABLES REMAIN UNCHANGED.
.SKIP 1
^IF THE LIST CONTAINS NO ITEMS, THE OPTIONAL "^^END=\\"
FIELD WILL TRANSFER CONTROL TO THE INDICATED LINE NUMBER
WHEN A GET STATEMENT IS EXECUTED. ^OTHERWISE, ATTEMPTING TO GET
ATTRIBUTE VALUES FROM AN EMPTY LIST WILL CAUSE AN ERROR CONDITION.
.SKIP 1
^THE USER CAN ALSO ACCESS THE ATTRIBUTE VALUES OF THE CURRENT ITEM
IN A LIST THROUGH THE ATTRIBUTE VARIABLES ^^ATT1\\ THROUGH ^^ATT15\\,
SINCE THESE VARIABLES ARE ASSIGNED THE ATTRIBUTE VALUES DURING
EXECUTION OF A FIND STATEMENT. ^IF A FIND STATEMENT PROCEEDS TO THE
END OF A LIST, ^^ATT1\\ THROUGH ^^ATT15\\ CONTAIN THE ATTRIBUTE
VALUES OF THE LAST ITEM ENCOUNTERED BY THE FIND STATEMENT.
^BECAUSE ^^ATT1\\ THROUGH ^^ATT15\\ ARE RESET BY A FIND STATEMENT
EXECUTED FOR ANY LIST, THE USER SHOULD SET ASIDE ^^ATT\\
VALUES IF REQUIRED SUBSEQUENT TO FURTHER FINDS, GETS, REMOVES,
PUTS, OR INSERTS ON ANOTHER LIST. ^A GET STATEMENT, ON THE OTHER
HAND, CAN ALWAYS BE USED TO RETRIEVE THE "POINTED-TO"
ATTRIBUTE VALUES FROM THE LIST. (^A GET STATEMENT ALSO RESETS THE
ATTRIBUTE VALUES ^^ATT1\\ THROUGH ^^ATT15\\.)
.SKIP 1
^TO AVOID SUBSCRIPTING A NON-EXISTENT MEMBER OF A TEMPORARY LIST
FAMILY, THE OPTIONAL "^^ERR=\\" FIELD CAN BE SPECIFIED, AND CONTROL
WILL BE TRANSFERRED TO THE INDICATED LINE NUMBER IF THIS OCCURS.
^OTHERWISE, REFERENCING A NON-EXISTENT LIST WILL CAUSE AN ERROR
CONDITION. ("^^ERR=\\" DOES NOT APPLY FOR UNSUBSCRIPTED LISTS AND
LISTS SUBSCRIPTED WITH AN ASTERISK. ^SEE THE INSERT STATEMENT.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^GET A1,B1,C1 FROM Q_#(I)
.SKIP 1
GET A(I+J) FROM A6_# END=100
.SKIP 1
GET A,B,C FROM B_#(I) ERR=210\\
.FILL
.PAGE
^^REMOVE\\ (GENERAL LIST FORM)
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^REMOVE VAR(EXP),... FROM VAR_#(EXP) [END=L1][ERR=L2]\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE REMOVE STATEMENT IS SIMILAR TO THE GET STATEMENT,
BUT PERFORMS TWO ADDITIONAL FUNCTIONS:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^NOT ONLY ARE THE VALUES OF THE "POINTED TO" ITEM ASSIGNED
TO THE DESIGNATED VARIABLES, BUT ALSO THE ITEM IS REMOVED
FROM THE LIST, REDUCING THE SIZE OF THE LIST BY ONE ITEM.
.SKIP 1
.INDENT -3
2.#^WHEN AN ITEM IS REMOVED, THE LIST POINTER (POSITIONED
VIA A FIND STATEMENT) IS SET BACK TO THE PRECEDING ITEM. ^IF THE
LIST DIRECTION (SET BY THE FIND STATEMENT) WERE FIRST-TO-LAST,
THE POINTER IS SET ONE ITEM NEARER THE TOP.
^CONVERSELY, IF THE LIST DIRECTION
WERE LAST-TO-FIRST, THE POINTER IS SET ONE ITEM NEARER THE BOTTOM.
^SETTING TO THE PRECEDING ITEM ALLOWS A SUBSEQUENT "^^FIND NEXT\\"
STATEMENT TO CONTINUE THROUGH THE LIST OMITTING NO ITEMS IN THE
SEARCH.
.SKIP 1
.LEFT MARGIN 20
^IF THE FIRST ITEM IS REMOVED, AND THE POINTER IS
"BACKED-UP" TO THE TOP, A SUBSEQUENT REMOVE STATEMENT WILL REMOVE
THE FIRST ITEM. ^SIMILARLY, IF THE LAST ITEM IS REMOVED, AND THE
POINTER IS "BACKED-DOWN" TO THE BOTTOM, A SUBSEQUENT REMOVE
STATEMENT WILL REMOVE THE LAST ITEM. ^THEREFORE A REMOVE STATEMENT
(LIKE A GET STATEMENT) ALWAYS REMOVES AN ITEM IF THE LIST IS
NOT EMPTY, EVEN IF THE LIST POINTER IS SET TO EITHER END OF THE
LIST. ^IF THE LIST CONTAINS NO ITEMS, THE OPTIONAL "^^END=\\"
FIELD WILL TRANSFER CONTROL TO THE INDICATED LINE WHEN A REMOVE
IS EXECUTED. ^OTHERWISE, AN ERROR CONDITION EXISTS.
.SKIP 1
^TO AVOID SUBSCRIPTING A NON-EXISTENT MEMBER OF A TEMPORARY LIST
FAMILY, THE OPTIONAL "^^ERR=\\" FIELD CAN BE SPECIFIED, AND CONTROL
WILL BE TRANSFERRED TO THE INDICATED LINE IF THIS OCCURS.
^OTHERWISE, REFERENCING A NON-EXISTENT LIST WILL CAUSE AN ERROR
CONDITION. ("^^ERR=\\" DOES NOT APPLY FOR UNSUBSCRIPTED LISTS AND
LISTS SUBSCRIPTED WITH AN ASTERISK. ^SEE THE INSERT STATEMENT.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^REMOVE A1,B1,C1 FROM Q_#(I) END=10
.SKIP 1
REMOVE A(I+J) FROM A_#(K*2)
.SKIP 1
REMOVE A,B,C FROM B_#(I) ERR=20\\
.FILL
.PAGE
^^CLEAR\\ (GENERAL LIST FORM)
.SKIP 2
.INDENT -6
^FORM:#^^CLEAR VAR_#(EXP),VAR_#(EXP),... [ERR=L1]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE CLEAR STATEMENT RE-INITIALIZES ANY LIST. ^ALL
ITEMS ARE REMOVED FROM THE LIST, AND THE DEFAULT SEARCH
DIRECTION FOR THE LIST IS SET TO FIRST-TO-LAST. (^THE CLEAR
STATEMENT CAN NULL A LIST MORE EFFICIENTLY THAN EXECUTING SUCCESSIVE
REMOVE STATEMENTS.) ^A CLEAR STATEMENT CAN REFERENCE BOTH STANDARD
NUMERIC LISTS AND RISK PROFILE VARIABLES. ^WHEN A LIST IS CLEARED,
THE STORAGE CONSUMED BY THE LIST IS RETURNED TO THE ^^BBL\\ SYSTEM.
.SKIP 1
^AN OPTIONAL "^^ERR=\\" FIELD IS PROVIDED TO AVOID SUBSCRIPTING A
NON-EXISTENT MEMBER OF A TEMPORARY LIST FAMILY. ^IF THIS IS DONE,
"^^ERR=\\" TRANSFERS CONTROL TO THE INDICATED LINE. ^IF "^^ERR=\\"
IS OMITTED, AND A NON-EXISTENT LIST IS REFERENCED, AN ERROR
CONDITION EXISTS. ("^^ERR=\\" DOES NOT APPLY FOR UNSUBSCRIPTED
LISTS AND LISTS SUBSCRIPTED WITH AN ASTERISK. ^SEE THE INSERT
STATEMENT.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^CLEAR A_#,B_#(I+J),RPQ_#
.SKIP 1
CLEAR J_#(K6) ERR=210\\
.FILL
.PAGE
^^CREATE\\
.SKIP 2
.INDENT -6
^FORM:#^^CREATE VAR_#(EXP),VAR_#(EXP),... [ERR=L1]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE CREATE STATEMENT SETS UP A TEMPORARY LIST,
WHICH INITIALLY CONTAINS NO ITEMS. ^THIS STATEMENT SHOULD
REFERENCE ONLY THOSE SUBSCRIPTED NUMERIC LIST VARIABLES WHICH ARE
DEFINED BY THE USER'S PROGRAM AS TEMPORARY LISTS. (^SEE DEFINE
LIST STATEMENT IN THIS SECTION.)
.SKIP 1
^THE OPTIONAL "^^ERR=\\" FIELD, IF SPECIFIED, WILL ROUTE CONTROL
TO THE INDICATED LINE WHEN A CREATE STATEMENT ATTEMPTS TO
CREATE A TEMPORARY LIST WHICH ALREADY EXISTS. ^OTHERWISE, AN
ERROR CONDITION EXISTS IF A CLEAR STATEMENT ATTEMPTS TO CREATE
AN EXISTENT LIST. (^AN ATTEMPT TO CREATE A LIST WITH
A NEGATIVE SUBSCRIPT, FOR EXAMPLE ^A_#(-1), WILL ALWAYS RESULT
IN AN ERROR.)
.SKIP 1
^TEMPORARY LISTS WITHIN A FAMILY CAN BE NAMED WITH ANY NON-NEGATIVE
SUBSCRIPT, AND NEED NOT BE NAMED WITH SUBSCRIPTS WHICH ARE IN
SUCCESSION. ^CREATING LIST ^A_#(1001), FOR EXAMPLE, ONLY CREATES
A SINGLE LIST, AND LISTS ^A_#(0) THROUGH ^A_#(1000) ARE NOT
AUTOMATICALLY EXISTENT JUST BECAUSE ^A_#(1001) HAS BEEN CREATED.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^CREATE A_#(12),A_#(26),A_#(292)
.SKIP 1
CREATE B_#(I),B_#(I+J) ERR=120\\
.FILL
.PAGE
^^DESTROY\\
.SKIP 2
.INDENT -6
^FORM:#^^DESTROY VAR_#(EXP),VAR_#(EXP),... [ERR=L1]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE DESTROY STATEMENT ELIMINATES A TEMPORARY
LIST, PREVIOUSLY SET UP WITH A CREATE STATEMENT. ^THIS STATEMENT
SHOULD REFERENCE ONLY THOSE NUMERIC LIST VARIABLES DEFINED BY THE
USER'S PROGRAM AS TEMPORARY LISTS. (^SEE DEFINE LIST STATEMENT
IN THIS SECTION.)
.SKIP 1
^THE OPTIONAL "^^ERR=\\" FIELD, IF SPECIFIED, WILL ROUTE
CONTROL TO THE INDICATED LINE NUMBER WHEN A DESTROY STATEMENT
ATTEMPTS TO ELIMINATE A LIST WHICH IS NON-EXISTENT, I.E. NOT CREATED
OR ALREADY DESTROYED. (^UNLIKE THE "^^ERR=\\" FIELD FOR THE
INSERT, PUT, GET, REMOVE, CREATE, AND SORT STATEMENTS, THE DESTROY
"^^ERR=\\" FIELD IS IN EFFECT EVEN IF THE DESTROY STATEMENT
REFERENCES A LIST SUBSCRIPTED WITH AN ASTERISK.)
.SKIP 1
^DESTROYING A LIST NOT ONLY FREES THE MEMORY OCCUPIED BY THE ITEMS
IN THE LIST, BUT ALSO FREES THE ADDITIONAL MEMORY
REQUIRED TO MAINTAIN THE LIST WITHIN THE ^^BBL\\ SYSTEM. (^A CLEAR
STATEMENT, ON THE OTHER HAND, ONLY FREES THE MEMORY OCCUPIED BY
THE ITEMS IN THE LIST, AND THE LIST IS STILL MAINTAINED BY
^^BBL\\, SUBSEQUENT TO A CLEAR STATEMENT, AS A NULL LIST.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^DESTROY A_#(I),B_#(J),C_#(K)
.SKIP 1
DESTROY A_#(Q+2),B_#(Q*2),C_#(K) ERR=120\\
.FILL
.PAGE
^^LET\\ (GENERAL LIST FORM)
.SKIP 2
.INDENT -6
^FORM:#^^[LET] VAR_#(EXP)=VAR_#(EXP)\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^ANY TWO NUMERIC LIST VARIABLES CAN BE REFERENCED
IN A LET STATEMENT. ^THE LIST TO THE LEFT OF THE EQUAL SIGN WILL BE
ASSIGNED THE SAME NUMBER OF ITEMS, AND THE SAME ATTRIBUTE VALUES
WITHIN EACH ITEM, AS ARE IN THE LIST TO THE RIGHT OF THE
EQUAL SIGN. ^ONLY ONE LIST IS ALLOWED ON EITHER SIDE OF THE
EQUAL SIGN, AND NO ARITHMETIC OPERATIONS ARE PERMITTED ON EITHER
LIST. ^STANDARD LIST VARIABLES AND ^^RP_#\\ VARIABLES MAY BE
EQUATED. ^FOR EXAMPLE:
.SKIP 1
.INDENT 15
^^100 LET RPA_#=V6_#\\
.SKIP 1
^WHEN A LIST IS ASSIGNED ITEMS VIA A LET STATEMENT, THE SORT CODE
IS NOT MODIFIED. ^HOWEVER, THE CURRENT POINTER POSITION FOR
THE LEFT-HAND LIST IS SET TO THE SAME RELATIVE POSITION AS THE
RIGHT-HAND LIST. ^IF THE LEFT-HAND SIDE LIST IS SORTED, THE ITEMS
TRANSFERRED INTO THE LIST WILL BE SORTED. (^^BBL\\ DOES NOT 
RE-SORT LISTS EQUATED TO LISTS SORTED ON THE SAME ATTRIBUTE, SINCE
^^BBL\\ ASSUMES THE RIGHT-HAND LIST IS ALREADY SORTED CORRECTLY.
^CARE SHOULD BE TAKEN IF A PUT, SORT, OR PRIOR LET STATEMENT
HAS INADVERTENTLY UNSORTED THE RIGHT-HAND LIST.)
.SKIP 1
^IF THE LEFT-HAND LIST CONTAINS MORE ATTRIBUTE VALUES THAN ARE
BEING ASSIGNED FROM THE RIGHT-HAND LIST, THE EXTRA ATTRIBUTE VALUES
IN THE LEFT-HAND LIST WILL BE SET TO ZERO. ^IF THE RIGHT-HAND
LIST CONTAINS MORE ATTRIBUTES THAN THE LEFT-HAND LIST EXPECTS,
THE EXTRA ATTRIBUTE VALUES IN THE RIGHT-HAND LIST 
WILL BE IGNORED.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^LET A6_#=V_#(Q+P6)
.SKIP 1
LET B_#(I)=B_#(I+1)
.SKIP 1
V_#(J+2)=RPB_#\\
.FILL
.PAGE
^^PRINT\\ (GENERAL LIST FORM)
.SKIP 2
.INDENT -6
^FORM:#^^PRINT[(VAR[:VAR])] VAR_#(EXP),VAR_#(EXP),...\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^ANY STANDARD ^^BBL\\ PRINT STATEMENT CAN SPECIFY
A NUMERIC LIST VARIABLE. ^WHEN PRINTED, EACH ITEM
IN THE LIST WILL BE SHOWN IN ORDER, WITH EACH ITEM BEGINNING
ON A NEW LINE AND ALL ATTRIBUTE VAUES FOR THE ITEM SHOWN ON THE
SAME LINE. (^IF MORE ATTRIBUTES ARE PRINTED THAN CAN FIT ON A SINGLE
LINE, THE EXTRAS ARE PRINTED ON SUCCEEDING LINES. ^THE USER CAN MAKE
USE OF THE WIDTH STATEMENT TO ADJUST THE NUMBER OF FIELDS AVAILABLE
ON A SINGLE LINE AND THE SIZE OF
EACH FIELD.) ^ANY COMBINATION OF STANDARD
^^BBL\\ EXPRESSIONS, STRING VARIABLES, OR LIST VARIABLES MAY BE
USED IN THE SAME PRINT STATEMENT. (/ AND : PRINT STATEMENT OPTIONS
CAN BE USED AS LIST FIELD MODIFIERS. ^HOWEVER, >, <, ><, $, %,
_.XXX, AND ! SHOULD BE AVOIDED.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^PRINT V6_#,V7_#,B_#(I+J)
.SKIP 1
PRINT(N8)//"WAITING LINE - MACHINE 1",/W1_#
.SKIP 1
PRINT(20:N) //"ORDERS NOT PROCESSED",/Q9_#\\
.FILL
.PAGE
^^SORT\\ (GENERAL LIST FORM)
.SKIP 2
.INDENT -6
^FORM:#^^SORT VAR_#(EXP),... [ON VAR][ERR=L1]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE ^^BBL\\ SORT STATEMENT CAN BE USED TO SORT ANY
^^BBL\\ NUMERIC LIST VARIABLE OR ^^BBL\\ VECTOR. (^RISK PROFILE
SORTS ARE DISCUSSED UNDER "^^BBL\\ ^RISK
^PROFILES". ^VECTOR SORTS ARE COVERED UNDER "^OTHER ^SPECIAL
^^BBL\\ ^STATEMENTS".)
.SKIP 1
^THE OPTIONAL "^^ON\\" FIELD CAN REFERENCE A CONSTANT OR UNSUBSCRIPTED
VARIABLE SPECIFYING THE NUMBER OF THE ATTRIBUTE ON WHICH THE LIST
IS TO BE SORTED. (^IF THE "^^ON\\" FIELD IS OMITTED, ATTRIBUTE
NUMBER 1 IS ASSUMED.) ^WHEN EXECUTED, ALL ITEMS IN THE LIST WILL
BE SORTED SO THAT THE CHOSEN ATTRIBUTE WILL BE IN ORDER FROM
THE SMALLEST TO THE LARGEST. (^IF A LIST VARIABLE IS DEFINED AS
A SORTED LIST, THIS MAY BE REDUNDANT
UNLESS THE SORT IS DONE ON A DIFFERENT
ATTRIBUTE.) ^EXECUTION OF THIS STATEMENT DOES NOT EFFECT DEFINITION
OF THE LIST AS SORTED/NON-SORTED, AND IF SORTED, THE SORT
ATTRIBUTE NUMBER REMAINS UNCHANGED. (^SUBSEQUENT ENTRIES INTO A 
LIST WHICH HAS BEEN SORTED BY A SORT STATEMENT ARE CONTROLED BY
THE ORIGINAL SORT SPECIFICATION. ^THUS THE ENTRY MAY OR MAY NOT BE
ENTERED INTO THE PROPER SEQUENCE, IF THE SORT WAS DONE ON A
DIFFERENT ATTRIBUTE NUMBER THAN DEFINED. ^IF THIS IS THE CASE, THE
LIST SHOULD BE RE-SORTED ON THE SORTING ATTRIBUTE PRIOR TO 
SUBSEQUENT ENTRIES.)
.SKIP 1
^THE OPTIONAL "^^ERR=\\" FIELD IS PERMITTED TO AVOID
SUBSCRIPTING A NON-EXISTENT MEMBER OF A TEMPORARY LIST FAMILY.
^IF THIS IS DONE, "^^ERR=\\" TRANSFERS CONTROL TO
THE INDICATED LINE NUMBER. ^IF "^^ERR=\\" IS OMITTED, AND A
NON-EXISTENT LIST IS REFERENCED, AN ERROR CONDITION EXISTS. ("^^ERR=\\"
DOES NOT APPLY FOR UNSUBSCRIPTED LISTS AND LISTS SUBSCRIPTED WITH AN
ASTERISK. ^SEE THE INSERT STATEMENT.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^SORT V6_#,B6_# ON 12
.SKIP 1
SORT A_#(I+J) ON I2 ERR=210
.SKIP 1
SORT R_#(Q+6*I)\\
.FILL
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^X^I^I
.PAGE
.CENTER 65
^OTHER ^SPECIAL ^^BBL\\ ^STATEMENTS
.SKIP 4
.PARAGRAPH
^^BBL\\ PROVIDES SEVERAL ADDITIONAL STATEMENTS WHICH
AUTOMATE PROCESSES OFTEN PROGRAMMED IN TYPICAL
MANAGEMENT SCIENCE APPLICATIONS. ^THESE INCLUDE:
.SKIP 1
.LEFT MARGIN 21
.INDENT -14
1.#^^AVERAGE\\####TO CALCULATE A WEIGHTED AVERAGE.
.SKIP 1
.INDENT -14
2.#^^CHAIN\\######TO RUN FROM ONE ^^BBL\\ PROGRAM TO A SECOND
^^BBL\\ PROGRAM.
.SKIP 1
.INDENT -14
3.#^^DISCOUNT\\###TO CALCULATE THE DISCOUNTED PRESENT VALUE
OF A SERIES OF CASH FLOWS.
.SKIP 1
.INDENT -14
4.#^^IROI\\#######TO CALCULATE THE INTERNAL RATE OF RETURN FOR A
SERIES OF CASH FLOWS.
.SKIP 1
.INDENT -14
5.#^^GRAPH\\######TO GRAPH ONE OR MORE DEPENDENT SERIES OF VALUES
VERSUS A SINGLE INDEPENDENT SERIES OF VALUES. (^GRAPH IS ALSO
USED FOR RISK PROFILE GRAPHS.)
.SKIP 1
.INDENT -14
6.#^^SORT\\#######TO SORT A SERIES OF VALUES. (^SORT IS ALSO
USED FOR ANY NUMERIC LIST VARIABLE.)
.SKIP 1
.INDENT -14
7.#^^TREND\\######TO FILL IN STRAIGHT-LINE INTERPOLATED VALUES
BETWEEN ANY TWO POINTS IN AN ARRAY.
.SKIP 
.INDENT -14
8.#^^WIDTH\\######TO SPECIFY THE NUMBER OF COLUMNS ACROSS A
PAGE OF OUTPUT AND THE NUMBER OF CHARACTERS IN EACH COLUMN.
.SKIP 1
.INDENT -14
9.#^^WORKSPACE\\##TO SET THE USER'S WORKSPACE SIZE PRIOR TO ASSEMBLY.
.LEFT MARGIN 20
.PAGE
^^AVERAGE\\
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^AVERAGE EXP [WEIGHT=EXP] INTO VAR(EXP) [WEIGHT=EXP]\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE AVERAGE STATEMENT WILL CALCULATE THE AVERAGE
OF THE VALUE OF ANY STANDARD ^^BBL\\ EXPRESSION AND THE VALUE
OF ANY STANDARD ^^BBL\\ VARIABLE, AND WILL ASSIGN THE RESULT TO
THE VARIABLE BEING AVERAGED.
.SKIP 1
^EITHER ELEMENT IN THE AVERAGING CALCULATION CAN BE WEIGHTED BY
SPECIFYING AN OPTIONAL "^^WEIGHT=\\" FIELD WITH
EITHER OR BOTH THE LEFT AND RIGHT HAND SIDES. ^IF "^^WEIGHT=\\"
IS NOT GIVEN, A WEIGHT OF 1.0 IS ASSUMED. ^THE MATHEMATICAL
REPRESENTATION OF THIS CALCULATION IS:
.SKIP 1
.LEFT MARGIN 22
.NOFILL
^^
           (EXP*WEIGHT1+VAR(EXP)*WEIGHT2)
VAR(EXP) = ------------------------------
                (WEIGHT1+WEIGHT2)
\\
.LEFT MARGIN 20
.FILL
.SKIP 1
^ONE USEFUL APPLICATION OF THE AVERAGE STATEMENT IS TO
COLLECT "TIME-WEIGHTED" AVERAGES FOR SUCH THINGS AS THE LENGTH OF
QUEUES IN IMMINENT EVENT SIMULATIONS.
.SKIP 2
.NOFILL
.RIGHT MARGIN 75
.INDENT -10
^EXAMPLES:#^^AVERAGE SIZE(Q1_#) WEIGHT=T2-T1 INTO S1 WEIGHT=T1
.SKIP 1
AVERAGE A(J)+12.6 WEIGHT=2 INTO A(J+1)\\
.RIGHT MARGIN 65
.FILL
.PAGE
^^CHAIN\\
.SKIP 2
.INDENT -6
^FORM:#^^CHAIN#[TO]##"NAME"\\
.BREAK
.INDENT 11
^^VAR$(EXP)\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE CHAIN STATEMENT WILL TRANSFER CONTROL FROM ONE
^^BBL\\ PROGRAM TO ANOTHER. ^THE NAME OF THE PROGRAM TO BE RUN CAN
BE GIVEN AS EITHER AN ALPHANUMERIC NAME (IN SINGLE
OR DOUBLE QUOTES) OR ANY STRING VARIABLE. ^WHEN THE
"CHAINED-TO" PROGRAM IS RUN, NO FURTHER USER INTERVENTION IS REQUIRED.
^^BBL\\ AUTOMATICALLY RETRIEVES THE IN-COMING PROGRAM, AND RECOMPILES
THE PROGRAM INTO RELOCATABLE CODE IF NECESSARY. ^THE PROGRAM IS
THEN EXECUTED. ^THE CHAINING PROCESS FOLLOWS THE
FOLLOWING STEPS:
.SKIP 1
.LEFT MARGIN 25
.INDENT -3
1.#^ALL OPEN FILES ARE CLOSED.
.SKIP 1
.INDENT -3
2.#^THE NEW PROGRAM IS READ INTO THE SYSTEM. ^IF THE PROGRAM
REQUIRES COMPILING TO GENERATE RELOCATABLE CODE, IT IS COMPILED.
^ANY ERRORS IN COMPILATION TERMINATE CHAINING.
.SKIP 1
.INDENT -3
3.#^THE PROGRAM IS ASSEMBLED. ^ANY ERRORS IN ASSEMBLY TERMINATE
CHAINING.
.SKIP 1
.INDENT -3
4.#^THE PROGRAM IS EXECUTED.
.SKIP 1
.LEFT MARGIN 20
^INFORMATION CAN BE PASSED FROM ONE CHAIN TO THE NEXT VIA DISK
FILES. ^IT IS IMPORTANT TO REMEMBER THAT ALL FILES ARE CLOSED
BETWEEN CHAINS.
.SKIP 1
^WHEN EXECUTION OF THE "CHAINED-TO" PROGRAM TERMINATES
NORMALLY, OR WITH AN ERROR (NO FURTHER CHAINING), THE ^^BBL\\
EDITOR WILL CONTAIN THE LAST PROGRAM READ IN THE CHAINING
SEQUENCE.
.SKIP 1
^PROGRAMS CAN CHAIN TO RELOCATABLE COMPILED CODE PROGRAMS (I.E.
NO PROGRAM TEXT) FOR IMPROVED EFFICIENCY OR PROTECTION.
^IF A "^^.REL\\" PROGRAM IS THE LAST LINK IN THE CHAIN, THE
^^BBL\\ EDITOR HAS THE NORMAL RESTRICTIONS IMPOSED ON EDITING
A "^^.REL\\" FILE UNTIL A NEW OR OLD TEXT FILE IS
ENTERED INTO THE SYSTEM.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^CHAIN TO "LINK2.BBL"
.SKIP 1
CHAIN A$
.SKIP 1
CHAIN TO B$(I+6)\\
.FILL
.PAGE
^^DISCOUNT\\
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^DISCOUNT EXP INTO VAR(EXP) RATE=VAR [PERIOD=VAR]\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE DISCOUNT STATEMENT WILL CALCULATE THE DISCOUNTED
PRESENT VALUE OF THE LEFT-HAND EXPRESSION. ^THE RESULT IS ADDED
TO THE RIGHT SIDE VARIABLE VALUE, AND ASSIGNED TO THAT VARIABLE.
^THE STATEMENT SHOULD INCLUDE A NON-NEGATIVE RATE OF RETURN
IN THE "^^RATE=\\" FIELD. "^^RATE=\\" CAN REFERENCE A CONSTANT
OR UNSUBSCRIPTED ^^BBL\\ VARIABLE.
.SKIP 1
^THE OPTIONAL "^^PERIOD=\\" FIELD CAN SPECIFY THE TIME PERIOD
(IN YEARS) FOR WHICH THE VALUE IS TO BE DISCOUNTED. ^THE PERIOD
CAN BE SPECIFIED AS EITHER A CONSTANT OR UNSUBSCRIPTED ^^BBL\\
VARIABLE. ^IF NO "^^PERIOD=\\" FIELD IS GIVEN, A PERIOD OF
ONE YEAR IS ASSUMED. ^THE MATHEMATICAL REPRESENTATION OF THE
DISCOUNT CALCULATION IS:
.SKIP 1
.LEFT MARGIN 27
.NOFILL
^^
                  (EXP)
VAR(EXP) = -------------------
           ((1.0+RATE)_^PERIOD)
\\
.SKIP 1
.LEFT MARGIN 20
.FILL
^THE DISCOUNT STATEMENT PERFORMS A SPECIAL FUNCTION WHEN THE DISCOUNTED
^^BBL\\ EXPRESSION OR THE VARIABLE INTO WHICH THE EXPRESSION IS
DISCOUNTED CONTAINS AN ASTERISK SUBSCRIPT. (^THE ALLOWED ASTERISK
SUBSCRIPT FIELDS FOR ALL ^^BBL\\ STATEMENTS ARE DISCUSSED UNDER
"^^BBL\\ ^STATEMENT ^SUMMARY\\".) ^AS EXPLAINED IN THE PREVIOUS
SECTION ON "^ASTERISK ^SUBSCRIPTING", A STATEMENT
WITH ONE OR MORE ASTERISK SUBSCRIPTED FIELDS WILL BE EXECUTED
REPEATEDLY WITH THE ASTERISK SUBSCRIPTS INCREMENTING FROM
1 TO THEIR MAXIMUM SUBSCRIPT VALUES. ^THIS SAME PROCESS TAKES PLACE
WITHIN THE DISCOUNT STATEMENT. ^HOWEVER, AS THE STATEMENT IS RECYCLED,
THE "^^PERIOD=\\" VALUE IS INCREMENTED BY ONE PERIOD EACH PASS.
^FOR EXAMPLE, ALL THE CASH FLOWS IN VECTOR ^A(*) CAN BE DISCOUNTED
AS FOLLOWS:
.SKIP 1
.INDENT 5
^^100 DISCOUNT A(*) INTO B1 RATE=10%\\
.SKIP 1
^THE TIME PERIOD STARTS AT 1 YEAR, THE ASSUMED VALUE.
^THEREFORE, ^A(1) IS DISCOUNTED 1 YEAR. ^A(2) IS DISCOUNTED
2 YEARS. ^A(3) IS DISCOUNTED 3 YEARS, AND SO FORTH. ^THIS AUTOMATIC
PERIOD INCREMENTING ALLOWS THE SINGLE DISCOUNT
STATEMENT TO CALCULATE THE
PRESENT VALUE OF A SERIES OF CASH FLOWS WHICH OCCUR OVER TIME,
AND TO TAKE INTO ACCOUNT THE VARYING TIME OF EACH FLOW.
.SKIP 1
^OF COURSE, IF THE VARIABLE INTO WHICH THE DISCOUNTED VALUES
ARE BEING ADDED IS ALSO ASTERISK SUBSCRIPTED, EACH DISCOUNTED
VALUE WOULD BE ASSIGNED TO A DIFFERENT ELEMENT OF THAT VARIABLE.
^FOR EXAMPLE:
.SKIP 1
.INDENT 5
^^200 DISCOUNT ROW1 INTO ROW2 RATE=.05\\
.SKIP 1
^BOTH ^^ROW1\\ (SAME AS ^^ROW1(*)\\)
AND ^^ROW2\\ (SAME AS ^^ROW2(*)\\) WILL BE INCREMENTED IN 
PARALLEL. ^THEREFORE, ^^ROW1(1)\\ WILL BE DISCOUNTED 1 YEAR
INTO ^^ROW2(1)\\. ^^ROW1(2)\\ WILL BE DISCOUNTED 2 YEARS INTO
^^ROW2(2)\\. ^^ROW1(3)\\ WILL BE DISCOUNTED 3 YEARS INTO ^^ROW2(3)\\,
AND SO FORTH. ^THIS TECHNIQUE IS USEFUL FOR CALCULATING AND
ISOLATING THE PRESENT VALUE OF EACH INDIVIDUAL CASH FLOW WITHIN
A SERIES OF CASH FLOWS WHICH OCCUR OVER TIME.
.SKIP 1
^THE USER SHOULD REMEMBER THAT THE "^^INTO\\" VARIABLE
ACCUMULATES  THE VALUES ASSIGNED TO IT. ^THEREFORE, SEVERAL
DISCOUNT STATEMENTS CAN DISCOUNT SINGLE CASH FLOWS OR A SERIES OF
CASH FLOWS INTO THE DESIGNATED VARIABLE TO ARRIVE AT A TOTAL
PRESENT VALUE. (^LIKE ANY ACCUMULATOR, THE "^^INTO\\" VARIABLE
SHOULD BE SET TO ZERO WITH A LET STATEMENT TO RE-INITIALIZE
THE VARIABLE FOR FRESH ACCUMULATION.)
^AN EXAMPLE FOLLOWS:
.SKIP 1
.NOFILL
.LEFT MARGIN 25
^^
100 T1=0
200 DISCOUNT ROW2 INTO T1 RATE=10%
300 DISCOUNT ROW3 INTO T1 RATE=10%
\\
.FILL
.LEFT MARGIN 20
.SKIP 1
^ALSO, IT IS OFTEN USEFUL TO TAKE ADVANTAGE OF
ELEMENTS WITH ZERO VALUES
WITHIN A SERIES OF CASH FLOWS. ^A CASH FLOW OF ZERO, BY
DEFINITION, DISCOUNTS TO ZERO. ^THEREFORE, IF A SERIES OF CASH FLOWS
BEGINS SEVERAL PERIODS IN THE FUTURE, THE FIRST FEW ELEMENTS IN AN
ARRAY CAN BE SET TO ZERO, WITH THE DESIRED CASH FLOWS SPECIFIED
IN THE REMAINDER OF THE ARRAY. ^FOR EXAMPLE:
.SKIP 1
.NOFILL
.LEFT MARGIN 25
^^
100 ROW1=6:0,110,120,130,140
200 DISCOUNT ROW1 INTO T1 RATE=15%
\\
.SKIP 1
.FILL
.LEFT MARGIN 20
^IN THIS EXAMPLE, CASH FLOWS IN YEARS 7, 8, 9, AND 10
WERE DISCOUNTED 7, 8, 9, AND 10 YEARS RESPECTIVELY INTO THE
ACCUMULATOR VARIABLE ^T1.
.SKIP 1
^FINALLY, THE USER CAN SPECIFY A NEGATIVE PERIOD (USING A
VARIABLE IN THE "^^PERIOD=\\" FIELD) IF COMPOUNDING
OF CASH FLOWS IS DESIRED RATHER THAN DISCOUNTING. ^GENERALLY
THIS TECHNIQUE REQUIRES THE USER TO EXPLICITLY CONTROL THE
INCREMENTING TIME PERIOD SINCE IT WILL PROBABLY VARY FROM A LARGE
NEGATIVE TIME PERIOD (CASH FLOWS IN THE NEAR FUTURE)
TO A SMALL NEGATIVE NUMBER (CASH FLOWS IN THE DISTANT FUTURE):
.SKIP 1
.NOFILL
.TEST PAGE 4
^^
100 LET T=-10
200 FOR I=1 TO 10
300 DISCOUNT ROW1(I) INTO D RATE=10% PERIOD=T
400 LET T=T+1
500 NEXT I
\\
.FILL
.SKIP 1
^IN THIS EXAMPLE, THE VALUE FOUND IN ^^ROW1(1)\\ IS COMPOUNDED
FOR 10 YEARS INTO THE ACCUMULATOR VARIABLE ^D. ^NEXT, 
^^ROW1(2)\\ IS COMPOUNDED FOR 9 YEARS INTO ^D, AND SO FORTH.
.SKIP 1
.NOFILL
.INDENT -10
^EXAMPLES:#^^DISCOUNT Y(J+2)*2 INTO X RATE=20%
.SKIP 1
DISCOUNT Z2 INTO T(I+1) RATE=N PERIOD=.25\\
.FILL
.PAGE
^^IROI\\
.SKIP 2
.INDENT -6
^FORM:#^^IROI VAR[(*)] INTO VAR(EXP) [PERIOD=VAR]\\
.BREAK
.INDENT 5
^^ROW[(*)]\\
.BREAK
.INDENT 5
^^COL[(*)]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE IROI STATEMENT CALCULATES THE INTERNAL
RATE OF RETURN FOR A SERIES OF CASH FLOWS SPECIFIED BY AN ARRAY.
^THE INTERNAL RATE IS THAT RATE WHICH DISCOUNTS THE SERIES OF
CASH FLOWS TO A PRESENT VALUE OF ZERO, ACCORDING TO THE DISCOUNT
CALCULATION:
.SKIP 1
.NOFILL
.LEFT MARGIN 30
^^
          (CASH FLOWS)
PV =   -------------------
       ((1.0+RATE)_^PERIOD)
\\
.FILL
.LEFT MARGIN 20
.SKIP 1
^THE CASH FLOW SERIES SHOULD BE EXPRESSED AS A SINGLY DIMENSIONED
STANDARD ^^BBL\\ ARRAY, A ^^BBL\\ ^^ROW\\ VARIABLE, OR A
^^BBL\\ ^^COL\\ VARIABLE. (^NOTE THAT THE ARRAY CAN BE
SPECIFIED WITH OR WITHOUT AN OPTIONAL (*) SUBSCRIPT. ^THE
(*) DOES NOT CHANGE THE MEANING OF THE STATEMENT, AND IS ALLOWED
FOR CLARITY AND CONSISTENCY WITH THE * SUBSCRIPT CAPABILITY
EXPLAINED UNDER "^ASTERISK ^SUBSCRIPTING".)
.SKIP 1
^THE OPTIONAL "^^PERIOD=\\" FIELD CAN SPECIFY THE
TIME PERIOD (IN YEARS) BETWEEN THE CASH FLOWS SPECIFIED IN THE
ARRAY. ^IF "^^PERIOD=\\" IS NOT GIVEN, THE CASH FLOWS ARE ASSUMED
TO OCCUR IN 1 YEAR INTERVALS. ^FOR EXAMPLE:
.SKIP 1
.INDENT 10
^^100 IROI A(*) INTO R6\\
.SKIP 1
^^BBL\\ ASSUMES CASH FLOW ^A(1) IS AT THE END OF YEAR 1, CASH
FLOW ^A(2) IS AT THE END OF YEAR 2, CASH FLOW ^A(3) IS AT THE END
OF YEAR 3, AND SO FORTH. ^WHEN EXECUTED, THE RATE WHICH DISCOUNTS
^A(*) TO ZERO IS CALCULATED AND ASSIGNED TO THE VARIABLE ^R6. ^NOTE
THAT THE "^^INTO\\" VARIABLE IS NOT AN ACCUMULATOR
(AS IT IS FOR THE AVERAGE STATEMENT AND THE
DISCOUNT STATEMENT), AND THEREFORE, ANY VALUE IN ^R6 PRIOR TO EXECUTION
OF STATEMENT 100 ABOVE WILL BE LOST WHEN THE INTERNAL RATE
OF RETURN IS ASSIGNED TO ^R6.
.SKIP 1
(^SINCE THE LEFT-HAND ARRAY IS CONSIDERED AS AN ARRAY FOR EACH 
EXECUTION OF THE STATEMENT, SPECIFYING THE "^^INTO\\" VARIABLE WITH
AN ASTERISK SUBSCRIPT WILL RECYCLE THE STATEMENT ONCE FOR EACH
ELEMENT IN THE VARIABLE. ^THIS IS PROBABLY INEFFICIENT SINCE EACH
PASS WILL CALCULATE THE SAME IROI ON THE ARRAY AND SIMPLY ASSIGN
IT TO A DIFFERENT ELEMENT OF THE "^^INTO\\" VARIABLE. ^THE MAJOR
POINT IS THAT THE ARRAY (*) IMPLIES NOTHING ABOUT AUTOMATIC RECYCLING.)
.SKIP 1
^THE IROI WHICH IS FOUND WILL FALL WITHIN THE RANGE OF 0% THROUGH
1000%. ^IF THE RATE FALLS OUTSIDE THESE LIMITS, ^^BBL\\ ASSIGNS
EITHER 0% OR 1000% AS THE CALCULATED RATE.
.SKIP 1
^FINALLY, NOTE THAT ELEMENT (0) OF THE CASH FLOW ARRAY IS CONSIDERED
IN THE IROI CALCULATION IF IT CONTAINS A NON-ZERO VALUE. (^MAKING USE
OF THE (0) ELEMENT IS UNIQUE TO THE IROI STATEMENT AND THE CHANGE
STATEMENT.) ^INCLUDING THE (0) ELEMENT PERMITS THE USER TO
SPECIFY CASH FLOWS AT TIME ZERO. ^FOR EXAMPLE:
.SKIP 1
.NOFILL
.LEFT MARGIN 30
^^
100 ROW1(0)=-1200
200 ROW1=150,160,170,7:200
300 IROI ROW1 INTO R6 PERIOD=.25
\\
.SKIP 1
.FILL
.LEFT MARGIN 20
^HERE AN INITIAL CASH OUTLAY OF $1200 RETURNS 10 QUARTERLY
CASH INFLOWS RANGING FROM $150 IN QUARTER 1 TO $200 IN THE LAST
QUARTER. ^THE IROI STATEMENT WILL INCLUDE THE -1200 IN THE
CALCULATION OF THE INTERNAL RATE OF RETURN.
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^IROI COL2(*) INTO Q PERIOD=2.0
.SKIP 1
IROI A INTO S(I) PERIOD=N2
.SKIP 1
IROI V(*) INTO J6\\
.FILL
.PAGE
^^GRAPH\\
.SKIP 2
.RIGHT MARGIN 75
.INDENT -6
^FORM:#^^GRAPH[(VAR[:VAR])]#VAR[(*)];...#VS#VAR[(*)],...\\
.BREAK
.INDENT 19
^^ROW[(*)]########ROW[(*)]\\
.BREAK
.INDENT 19
^^COL[(*)]########COL[(*)]\\
.SKIP 1
.INDENT 16
^^...[INTERVALS=CON]...\\
.BREAK
.INDENT 16
^^###[STEP=CON]\\
.SKIP 1
.INDENT 16
^^...[XAXIS=CON,CON][YAXIS=CON,CON]\\
.RIGHT MARGIN 65
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE GRAPH STATEMENT CAN BE USED TO GRAPH ONE OR MORE
DEPENDENT SERIES OF VALUES VERSUS A SINGLE SERIES OF INDEPENDENT
VALUES. ^EACH SERIES CAN BE EXPRESSED AS A SINGLY DIMENSIONED STANDARD
^^BBL\\ ARRAY, A ^^BBL\\ ^^ROW\\ VARIABLE, OR A ^^BBL\\ ^^COL\\
VARIABLE. (^NOTE THE ARRAY CAN BE SPECIFIED WITH OR WITHOUT AN
OPTIONAL (*) SUBSCRIPT. ^THE (*) DOES NOT CHANGE
THE MEANING OF THE STATEMENT, AND IS ALLOWED FOR CLARITY AND
CONSISTENCY WITH THE * SUBSCRIPT CAPABILITY EXPLAINED UNDER
"^ASTERISK ^SUBSCRIPTING".) ^MORE THAN ONE SET OF ARRAYS
TO BE GRAPHED CAN BE SPECIFIED IN A SINGLE GRAPH STATEMENT IF
MORE THAN ONE GRAPH IS TO BE PRODUCED. ^EACH GRAPH WILL
BE OUTPUT TO THE CONSOLE, UNLESS THE OPTIONAL LOGICAL UNIT NUMBER
SPECIFIES OUTPUT TO A SEQUENTIAL OR RANDOM ACCESS FILE.
.SKIP 1
^THE DEPENDENT ARRAYS (UP TO 9) ARE SHOWN TO THE LEFT OF THE
"^^VS\\", SEPARATED FROM EACH OTHER BY SEMICOLONS. ^THE SINGLE
INDEPENDENT ARRAY IN EACH SET IS SHOWN TO THE RIGHT SIDE OF THE
"^^VS\\". ^ADDITIONAL SETS OF DEPENDENT AND INDEPENDENT ARRAYS CAN
FOLLOW, SEPARATED FROM THE PREVIOUS SET WITH A COMMA.
.SKIP 1
^ALL ELEMENTS IN EACH ARRAY WILL BE INCLUDED IN THE GRAPH
EXCEPT THE (0) ELEMENTS. ^IF ANY OF THE ARRAYS
PLOTTED VERSUS EACH OTHER HAVE A DIFFERENT
NUMBER OF ELEMENTS (SIZE), THE NUMBER OF POINTS PLOTTED WILL EQUAL
THE SMALLEST OF THE ARRAYS. ^THE DEPENDENT ARRAY VALUES WILL BE
PLOTTED ON THE FIXED LENGTH HORIZONTAL AXIS (YAXIS), WHICH IS ALWAYS
DIVIDED INTO 4 INTERVALS FROM MINIMUM TO MAXIMUM.
^THE DEPENDENT ARRAY POINTS ARE SHOWN AS SINGLE
INTEGERS ON THE GRAPH, WITH THE INTEGER "1" ASSIGNED TO THE
FIRST DEPENDENT SERIES, THE INTEGER "2" ASSIGNED TO THE SECOND
DEPENDENT SERIES, ETC. ^THE INDEPENDENT
ARRAY IN EACH GRAPH IS PLOTTED ON THE VARIABLE LENGTH VERTICAL
AXIS (XAXIS) WITH 4 INTERVALS FROM MINIMUM TO MAXIMUM UNLESS AN
OPTIONAL VERTICAL AXIS CONTROL IS SPECIFIED:
.SKIP 1
.LEFT MARGIN 25
.INDENT -2
_.#"^^INTERVALS=\\" IS INTERPRETED AS THE NUMBER OF INTERVALS FROM
MINIMUM TO MAXIMUM INTO WHICH THE VERTICAL AXIS SHOULD BE
DIVIDED.
.SKIP 1
.INDENT -2
_.#"^^STEP=\\" IS INTERPRETED AS THE STEP SIZE OF EACH VERTICAL 
AXIS INTERVAL. ^THE INTERVALS WILL BEGIN AT THE MINIMUM AND CONTINUE
FOR AS MANY INTERVALS AS NECESSARY TO PLOT THE MAXIMUM.
"^^STEP=\\" CAN BE ANY POSITIVE REAL NUMBER.
.SKIP 1
.LEFT MARGIN 20
^NOTE THAT EITHER "^^INTERVALS=\\" OR "^^STEP=\\" CAN BE
GIVEN, BUT NOT BOTH SINCE EACH SPECIFIES HOW THE VERTICAL AXIS
IS TO BE SHOWN.
.SKIP 1
^THE FINAL TWO OPTIONAL FIELDS CAN BE USED TO SPECIFY
THE MINIMUM AND MAXIMUM VALUES TO BE SHOWN ON EACH
AXIS. ^IF EITHER OR BOTH OF THESE FIELDS IS GIVEN, ^^BBL\\
USES THE FIRST VALUE AS THE MINIMUM AND THE
SECOND VALUE AS THE MAXIMUM. (^IF THE TRUE MINIMUM IS LESS
THAN THE SPECIFIED MINIMUM, THE TRUE MINIMUM OVERRIDES THE
SPECIFIED MINIMUM. ^THE SAME IS TRUE FOR THE MAXIMUM.) ^IF THE
MINIMUM AND MAXIMUM FOR EITHER AXIS ARE NOT SPECIFIED, ^^BBL\\
COMPUTES THE TRUE MINIMUM AND MAXIMUM AND USES THESE VALUES ON THE
AXES.
.SKIP 1
^AN EXAMPLE ^^BBL\\ GRAPH FOLLOWS:
.PAGE
.RIGHT MARGIN 72
.LEFT MARGIN 0
.NOFILL
.CENTER 72
^^BBL\\ ^GRAPH ^OUTPUT ^REPORT
.SKIP 4
^^
             0            25            50            75           100
             +-------------+-------------+-------------+-------------+
             '
             '
             '
 1973        +1  2
             '
             '
             '
 1974        +     1          2
             '
             '
             '
 1975        +             1                     2
             '
             '
             '
 1976        +                     1                      2
             '
             '
             '
 1977        +                           1                     2
             '
             '
             '
 1978        +                              1                    2
             '
             '
             '
 1979        +                               1                    2
             '
             '
             '
 1980        +                               1                     2
             '
             '
             '
 1981        +                               1                     2
             '
             '
             '
 1982        +                               1                     2
\\
.LEFT MARGIN 20
.RIGHT MARGIN 65
.PAGE
.FILL
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^GRAPH A(*) VS B(*), C(*) VS B(*) STEP=25
.SKIP 1
GRAPH(20) C;D;E VS F INTERVALS=10
.SKIP 1
.RIGHT MARGIN 75
GRAPH(20:N) ROW1 VS ROW2 XAXIS=0,10 YAXIS=0,100\\
.RIGHT MARGIN 65
.FILL
.PAGE
^^SORT\\ (VECTOR FORM)
.SKIP 2
.INDENT -6
^FORM:#^^SORT VAR[(*)],VAR[(*)],... [ON VAR]\\
.BREAK
.INDENT 5
^^ROW[(*)]#ROW[(*)]\\
.BREAK
.INDENT 5
^^COL[(*)]#COL[(*)]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE SORT STATEMENT CAN BE USED TO SORT ONE OR MORE
SINGLY DIMENSIONED STANDARD ^^BBL\\ ARRAYS, ^^BBL\\ ^^ROW\\ VARIABLES,
OR ^^BBL\\ ^^COL\\ VARIABLES. (^NOTE THAT AN ARRAY MAY BE SPECIFIED
WITH OR WITHOUT AN OPTIONAL (*) SUBSCRIPT. ^THE (*) DOES NOT CHANGE
THE MEANING OF THE STATEMENT, AND IS ALLOWED FOR CLARITY AND CONSISTENCY
WITH THE * SUBSCRIPT CAPABILITY EXPLAINED UNDER "^ASTERISK
^SUBSCRIPTING".)
.SKIP 1
^WHEN THE SORT STATEMENT IS EXECUTED, THE VALUES IN THE ARRAY ARE
SORTED FROM MINIMUM TO MAXIMUM VALUE. (^THE (0) ELEMENT OF THE ARRAY
IS NOT INCLUDED IN THE SORT.) ^IF THE OPTIONAL "^^ON\\" FIELD IS
GIVEN, A CONSTANT OR UNSUBSCRIPTED STANDARD ^^BBL\\ VARIABLE CAN
BE GIVEN TO INDICATE THE TOTAL NUMBER OF ELEMENTS TO SORT.
^IF "^^ON\\" IS NOT GIVEN, ALL ELEMENTS ARE SORTED. ^SORTING
ALWAYS BEGINS AT ELEMENT (1) OF THE ARRAY.
.SKIP 1
(^THE RISK PROFILE FORM OF THE SORT STATEMENT IS DISCUSSED
UNDER "^^BBL\\ ^RISK ^PROFILES", AND THE GENERAL LIST FORM OF THE
SORT STATEMENT IS EXPLAINED UNDER "^THE ^GENERALIZED ^^BBL\\
^LIST ^CAPABILITY".)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^SORT A(*),B(*),ROW1 ON A6
.SKIP 1
SORT A,C,D ON 10
.SKIP 1
SORT ROW2,ROW3,ROW4 ON N2\\
.FILL
.PAGE
^^TREND\\
.SKIP 2
.INDENT -6
^FORM:#^^TREND VAR(EXP) TO VAR(EXP),...\\
.BREAK
.INDENT 6
^^ROW(EXP)####ROW(EXP)\\
.BREAK
.INDENT 6
^^COL(EXP)####COL(EXP)\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE TREND STATEMENT WILL CALCULATE THE STRAIGHT-LINE
INTERPOLATED VALUES BETWEEN ANY TWO ELEMENTS IN A STANDARD
^^BBL\\ ARRAY, ^^BBL\\ ^^ROW\\ VARIABLE, OR ^^BBL\\ ^^COL\\
VARIABLE. ^THE ARRAY SPECIFIED ON EITHER SIDE OF THE "^^TO\\"
SHOULD BE THE SAME ARRAY. ^THE STRAIGHT-LINE VALUES ARE ASSIGNED
TO THE INTERMEDIATE ARRAY ELEMENTS, WHICH CAN BE THOUGHT OF AS
"FILLING IN" A TREND BETWEEN TWO POINTS.
.SKIP 1
^MORE THAN ONE TREND PAIR CAN BE GIVEN IN A SINGLE TREND STATEMENT.
^FOR EXAMPLE:
.SKIP 1
.NOFILL
.LEFT MARGIN 25
^^
100 TREND A(1) TO A(5), A(5) TO A(10)
\\
.FILL
.SKIP 1
.LEFT MARGIN 20
^IN THIS EXAMPLE, ^^A(2)\\ THROUGH ^^A(4)\\ ARE "FILLED IN"
FIRST, THEN ^^A(6)\\ THROUGH ^^A(9)\\ ARE ASSIGNED INTERPOLATED
VALUES.
.SKIP 1
^IF A STANDARD ^^BBL\\ ARRAY IS SPECIFIED, IT MAY CONTAIN MORE
THAN ONE SUBSCRIPT. ^HOWEVER, ALL INTERMEDIATE ELEMENTS WILL BE
"FILLED IN" ACCORDING TO THE STANDARD ^^BBL\\
CONVENTION THAT THE OUTERMOST SUBSCRIPT INCREMENTS MOST RAPIDLY.
^IF TWO POINTS IN A 3#X#3 MATRIX WERE SPECIFIED:
.SKIP 1
.INDENT 10
^^100 TREND A(1,2) TO A(3,2)\\
.SKIP 1
THEN THE FOLLOWING ELEMENTS WOULD BE "FILLED IN":
.SKIP 1
.TEST PAGE 7
.NOFILL
.LEFT MARGIN 40
^^
A(1,3)
A(2,0)
A(2,1)
A(2,2)
A(2,3)
A(3,0)
A(3,1)
\\
.SKIP 1
.FILL
.LEFT MARGIN 20
^SPECIFYING A TREND OPERATION BETWEEN TWO POINTS IN
A COLUMN VARIABLE CAUSES ONLY ELEMENTS IN THAT COLUMN
OF THE ASSUMED PARENT MATRIX TO BE "FILLED IN". ^THEREFORE, IF THE
USER WISHED TO TREND ^A(1,2) TO ^A(3,2) FOR ONLY THOSE ELEMENTS
IN COLUMN 2, HE MIGHT PROCEED AS FOLLOWS:
.SKIP 1
.NOFILL
.LEFT MARGIN 30
^^
110 ASSUME A(*,*)
120 TREND COL2(1) TO COL2(3)
\\
.SKIP 1
.FILL
.LEFT MARGIN 20
^IN THIS EXAMPLE ONLY ^^COL2(2)\\ (WHICH IS THE SAME AS
^A(2,2)) WOULD BE ASSIGNED A NEW VALUE. (^SEE "^^ROW, COL,\\
AND ^^REP\\ ^VARIABLES -- ^THE ^IMPLIED ^ASTERISK.")
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^TREND ROW12(N1) TO ROW12(N2)
.SKIP 1
TREND A(1) TO A(J), A(J) TO A(10)
.SKIP 1
TREND COL6(16) TO COL6(1)\\
.FILL
.PAGE
^^WIDTH\\
.SKIP 2
.INDENT -6
^FORM:#^^WIDTH COLUMNS=N1, CHARACTERS=N2\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^THE WIDTH STATEMENT CAN BE USED TO SET
THE NUMBER OF OUTPUT COLUMNS PER PAGE AND THE NUMBER OF
CHARACTERS PER COLUMN. ^THESE SETTINGS WILL CONTROL FORMATTING
OF A ^^BBL\\ PROGRAM'S OUTPUT DURING EXECUTION. (^IF NO WIDTH
STATEMENT APPEARS IN A ^^BBL\\ PROGRAM, ^^BBL\\ ASSUMES 5 COLUMNS
OF 14 CHARACTERS EACH FOR ALL OUTPUT.)
.SKIP 1
^TWO CONTROL FIELDS ARE REQUIRED. "^^COLUMNS=\\" SPECIFIES THE NUMBER OF
COLUMNS TO BE PRINTED ACROSS THE PAGE, AND "^^CHARACTERS=\\"
SPECIFIES THE NUMBER OF CHARACTERS IN EACH COLUMN. (^THE NUMBER
OF CHARACTERS MUST BE 2 OR MORE, AND THE TOTAL NUMBER OF
CHARACTERS ACROSS AN OUTPUT PAGE MUST BE 130 OR LESS,
I.E. COLUMNS*CHARACTERS<=130.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^WIDTH COLUMNS=10,CHARACTERS=14
.SKIP 1
WIDTH COLUMNS=5,CHARACTERS=10\\
.FILL
.PAGE
^^WORKSPACE\\
.SKIP 2
.INDENT -6
^FORM:#^^WORKSPACE=N1[K]\\
.SKIP 2
.INDENT -13
^DESCRIPTION:#^WHEN A USER'S PROGRAM IS IN THE
^^BBL\\ EDITOR, THE ^^BBL\\ SYSTEM ASSIGNS A SUFFICIENT AMOUNT OF
WORKSPACE TO CONTAIN THE PROGRAM LINES. ^THIS "STARTING" WORKSPACE
MAY BE INSUFFICIENT FOR ASSEMBLY AND EXECUTION. ^DURING ASSEMBLY,
^^BBL\\ MAY HAVE TO "ADD" WORKSPACE FOR DIMENSIONS, LISTS, STRINGS,
ETC. ^ADDING WORKSPACE DURING ASSEMBLY FORCES A CERTAIN AMOUNT
OF RE-ASSEMBLY. (^SIMILARLY, LISTS AND STRINGS MAY GROW DURING
EXECUTION, IN WHICH CASE A CERTAIN AMOUNT OF "DYNAMIC"
WORKSPACE HAS TO BE PROVIDED TO THE USER'S PROGRAM BY ^^BBL\\.)
^THIS IS ALL DONE AUTOMATICALLY BY ^^BBL\\ UNLESS THE USER SPECIFIES
A "^^WORKSPACE=\\" STATEMENT. ^THIS STATEMENT SETS THE WORKSPACE,
AND RE-ASSEMBLY CAN BE AVOIDED. (^DYNAMIC WORKSPACE ADDITIONS CAN
ALSO BE AVOIDED BY SETTING THE WORKSPACE TO A LEVEL WHICH COVERS
ALL DYNAMIC REQUIREMENTS. ^BECAUSE THIS MAY CHANGE FROM ONE RUN
TO THE NEXT, AND BECAUSE DYNAMIC ADDITIONS ARE RELATIVELY INEXPENSIVE,
WORKSPACE= IS GENERALLY ONLY USED TO SET THE WORKSPACE TO COVER
THE REQUIREMENTS DURING ASSEMBLY. ^NORMALLY DYNAMIC REQUIREMENTS
WILL THEN BE AUTOMATICALLY SATISFIED BY ^^BBL\\.)
.SKIP 1
^THE AMOUNT OF WORKSPACE CONSUMED BY A PROBLEM CAN BE DETERMINED
BY USING THE "^^RESOURCES\\" COMMAND TO SET RESOURCES ON. ^AFTER
EACH RUN, THE WORKSPACE CONSUMED BY THE RUN IS SHOWN. ^THE USER CAN
THEN ADD A WORKSPACE STATEMENT TO COVER THE AMOUNT OF STARTING
AND ADDED WORKSPACE REQUIRED BY THE PROGRAM.
.SKIP 1
^THE WORKSPACE STATEMENT REQUIRES A SINGLE NUMERIC
FIELD, DESIGNATING THE WORKSPACE SIZE IN THOUSAND WORD
BLOCKS (1024 WORDS PER BLOCK.)
.SKIP 2
.NOFILL
.INDENT -10
^EXAMPLES:#^^WORKSPACE 10
.SKIP 1
WORKSPACE=12K\\
.FILL
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^X^I^I^I
.PAGE
.CENTER 65
^INTERNAL ^^BBL\\ ^FUNCTIONS
.SKIP 4
.PARAGRAPH
^WITHIN ANY STANDARD ^^BBL\\ EXPRESSION, A SERIES OF ^^BBL\\
SYSTEM FUNCTIONS CAN BE USED AT ANY TIME, AS OPERANDS IN THE
EXPRESSION. (^THE USER CAN ALSO DEFINE HIS OWN FUNCTIONS.
^SEE "^^BBL\\ ^USER ^DEFINED ^FUNCTIONS
-- ^THE ^^FN\\ ^CAPABILITY".) ^INTERNAL ^^BBL\\ FUNCTIONS CAN
BE SEPARATED INTO 4 BROAD CATEGORIES ACCORDING TO THE
TYPE OF FUNCTION ARGUMENTS REQUIRED:
.SKIP 2
.LEFT MARGIN 35
.INDENT -28
1.#^^STANDARD FUNCTION\\########REQUIRES ONE OR TWO VALUES AS ARGUMENTS.
.SKIP 1
.INDENT -28
2.#^^VECTOR/ROW/COL FUNCTION\\##REQUIRES THE NAME OF A SINGLY
SUBSCRIPTED ARRAY, A ^^ROW\\ VARIABLE, OR A ^^COL\\ VARIABLE.
^IN ADDITION, ONE OR TWO VALUES ARE REQUIRED AS ARGUMENTS.
.SKIP 1
.INDENT -28
3.#^^LIST FUNCTION\\############REQUIRES THE NAME OF ANY ^^BBL\\
LIST VARIABLE. ^IN ADDITION, ONE OR TWO VALUES MAY BE REQUIRED
AS ARGUMENTS.
.SKIP 1
.INDENT -28
4.#^^STRING FUNCTION\\##########REQUIRES THE NAME OF ANY ^^BBL\\
STRING VARIABLE.
.LEFT MARGIN 5
.PAGE
.CENTER 65
^STANDARD ^FUNCTIONS
.SKIP 4
.SKIP 1
.LEFT MARGIN 31
.INDENT -29
1.#^^SIN(EXP)\\##################RETURNS THE SINE OF ARGUMENT
WHICH IS ANGLE EXPRESSED IN RADIANS.
.SKIP 1
.INDENT -29
2.#^^COS(EXP)\\##################RETURNS THE COSINE OF ARGUMENT
WHICH IS ANGLE EXPRESSED IN RADIANS.
.SKIP 1
.INDENT -29
3.#^^TAN(EXP)\\##################RETURNS THE TANGENT OF ARGUMENT
WHICH IS ANGLE EXPRESSED IN RADIANS.
.SKIP 1
.INDENT -29
4.#^^ATN(EXP)\\##################RETURNS THE ANGLE (IN RADIANS)
WHOSE TANGENT EQUALS THE ARGUMENT (ARCTANGENT.)
.SKIP 1
.INDENT -29
5.#^^EXP(EXP)\\##################RETURNS THE VALUE OF E_^ARGUMENT,
WHERE E IS THE BASE OF THE NATURAL LOGARITHMS.
.SKIP 1
.INDENT -29
6.#^^ABS(EXP)\\##################RETURNS THE ABSOLUTE VALUE OF
THE ARGUMENT.
.SKIP 1
.INDENT -29
7.#^^LOG(EXP)\\##################RETURNS THE NATURAL LOGARITHM
(LOGARITHM TO THE BASE E) OF THE ARGUMENT.
.SKIP 1
.INDENT -29
8.#^^SQR(EXP)\\##################RETURNS THE SQUARE ROOT OF THE
ARGUMENT.
.SKIP 1
.INDENT -29
9.#^^INT(EXP)\\##################RETURNS THE LARGEST INTEGER
LESS THAN OR EQUAL TO THE ARGUMENT.
.SKIP 1
.INDENT -30
10.#^^RND(EXP)\\##################RETURNS A RANDOM VALUE FROM
A UNIFORM CONTINUOUS DISTRIBUTION BETWEEN 0.0 AND 1.0. (^THE ARGUMENT
IS A DUMMY.) ^THE INTERNAL ^^BBL\\ VARIABLE "^^SEED\\" IS USED AS
THE RANDOM NUMBER SEED AND IS RETURNED AS THE UPDATED SEED AFTER
THE RANDOM NUMBER IS GENERATED.
.SKIP 1
.INDENT -30
11.#^^RNM(EXP,EXP)\\##############RETURNS A RANDOM VALUE FROM A
CONTINUOUS NORMAL DISTRIBUTION WITH A MEAN EQUAL TO THE FIRST
ARGUMENT AND A STANDARD DEVIATION EQUAL TO THE SECOND ARGUMENT.
.SKIP 1
.INDENT -30
12.#^^MIN(EXP,EXP)\\##############RETURNS THE MINIMUM OF TWO
ARGUMENTS.
.SKIP 1
.INDENT -30
13.#^^MAX(EXP,EXP)\\##############RETURNS THE MAXIMUM OF TWO
ARGUMENTS.
.SKIP 1
.INDENT -30
14.#^^XPN(EXP)\\##################RETURNS A RANDOM VALUE FROM
AN EXPONENTIAL DISTRIBUTION WITH A MEAN EQUAL TO THE ARGUMENT.
(^SEE THE EXPONENTIAL DATA STATEMENT FOR 
FURTHER DESCRIPTION OF THIS DISTRIBUTION.)
.SKIP 1
.INDENT -30
15.#^^POI(EXP)\\##################RETURNS A RANDOM VALUE FROM
A DISCRETE POISSON DISTRIBUTION WITH A MEAN EQUAL TO THE ARGUMENT.
(^SEE THE POISSON DATA STATEMENT FOR FURTHER DESCRIPTION OF THIS
DISTRIBUTION.)
.SKIP 1
.INDENT -30
16.#^^LGN(EXP,EXP)\\##############RETURNS A RANDOM VALUE FROM A
CONTINUOUS LOGNORMAL DISTRIBUTION OF THE FORM
"^^LGN=\\E_^^X" WHERE X IS A RANDOM VALUE FROM A NORMAL
CONTINUOUS DISTRIBUTION WITH A MEAN EQUAL TO THE FIRST ARGUMENT
AND A STANDARD DEVIATION EQUAL TO THE SECOND ARGUMENT. (^SEE THE
LOGNORMAL DATA STATEMENT FOR FURTHER DESCRIPTION OF THIS
DISTRIBUTION.)
.PAGE
.LEFT MARGIN 5
.CENTER 65
^VECTOR/^^ROW/COL\\ ^FUNCTIONS
.SKIP 4
.LEFT MARGIN 33
.INDENT -31
1.#^^MINVAL(VAR[(*)],[,EXP])\\#####RETURNS THE MINIMUM VALUE FROM
THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -31
2.#^^MAXVAL(VAR[(*)],[,EXP])\\#####RETURNS THE MAXIMUM VALUE FROM THE SPECIFIED
VECTOR.
.SKIP 1
.INDENT -31
3.#^^SUMVAL(VAR[(*)],[,EXP])\\#####RETURNS THE SUM OF THE
VALUES IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -31
4.#^^SUMSQR(VAR[(*)],[,EXP])\\#####RETURNS THE SUM OF 
THE SQUARES OF THE VALUES IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -31
5.#^^MEANVAL(VAR[(*)],[,EXP])\\####RETURNS THE MEAN OF THE VALUES IN THE
SPECIFIED VECTOR.
.SKIP 1
.INDENT -31
6.#^^MEANSQR(VAR[(*)],[,EXP])\\####RETURNS THE MEAN OF THE
SQUARES OF THE VALUES IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -31
7.#^^VARVAL(VAR[(*)],[,EXP])\\#####RETURNS THE VARIANCE OF THE 
VALUES IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -31
8.#^^DEVVAL(VAR[(*)],[,EXP])\\#####RETURNS THE STANDARD DEVIATION OF 
THE VALUES IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -31
9.#^^VALLT(VAR[(*)],EXP[,EXP])\\###RETURNS THE LARGEST VALUE LESS THAN THE
SECOND ARGUMENT, FROM THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -32
10.#^^VALGT(VAR[(*)],EXP[,EXP])\\###RETURNS THE SMALLEST VALUE 
GREATER THAN THE SECOND ARGUMENT, FROM THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -32
11.#^^QTYLT(VAR[(*)],EXP[,EXP])\\###RETURNS THE NUMBER
OF VALUES LESS THAN THE SECOND ARGUMENT, IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -32
12.#^^QTYGT(VAR[(*)],EXP[,EXP])\\###RETURNS THE NUMBER OF VALUES GREATER THAN
THE SECOND ARGUMENT, IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -32
13.#^^QTYEQ(VAR[(*)],EXP[,EXP])\\###RETURNS THE NUMBER OF VALUES EQUAL TO
THE SECOND ARGUMENT, IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -32
14.#^^PCTLT(VAR[(*)],EXP[,EXP])\\###RETURNS THE PERCENTAGE
(IN DECIMAL FORM) OF VALUES LESS THAN THE SECOND
ARGUMENT, IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -32
15.#^^PCTGT(VAR[(*)],EXP[,EXP])\\###RETURNS THE PERCENTAGE (IN
DECIMAL FORM) OF VALUES GREATER THAN THE SECOND
ARGUMENT, IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -32
16.#^^PCTEQ(VAR[(*)],EXP[,EXP])\\###RETURNS THE PERCENTAGE
(IN DECIMAL FORM) OF VALUES EQUAL TO THE
SECOND ARGUMENT, IN THE SPECIFIED VECTOR.
.SKIP 1
.INDENT -32
17.#^^FRCTLE(VAR[(*)],EXP[,EXP])\\##RETURNS THE FRACTILE (VALUE) FROM 
THE SPECIFIED VECTOR SUCH THAT THE PERCENTAGE
OF VALUES IN THE VECTOR, WHICH ARE LESS THAN OR EQUAL TO THE
FRACTILE, EQUALS THE 2ND DECIMAL ARGUMENT.
.SKIP 1
.INDENT -32
18.#^^FRCTGE(VAR[(*)],EXP[,EXP])\\##RETURNS THE FRACTILE (VALUE) FROM THE
SPECIFIED VECTOR SUCH THAT THE PERCENTAGE
OF VALUES IN THE VECTOR, WHICH ARE GREATER THAN OR EQUAL TO THE
FRACTILE, EQUALS THE 2ND DECIMAL ARGUMENT.
.SKIP 1
.LEFT MARGIN 5
^THE LAST ARGUMENT IN ALL CASES IS OPTIONAL. ^IF
THE LAST ARGUMENT IS EXCLUDED, THE ENTIRE VECTOR IS USED.
^IF THE LAST ARGUMENT IS INCLUDED, IT INDICATES THE
TOTAL NUMBER OF VECTOR ELEMENTS TO USE. ^FOR EXAMPLE, IF 
VECTOR "^A" IS DIMENSIONED 10, THE ^^MINVAL\\ OF ELEMENTS (1) THROUGH
(10) IS:
.SKIP 1
.CENTER 65
^^MINVAL(A)##OR##MINVAL(A(*))\\
.SKIP 1
^THE ^^MINVAL\\ OF ELEMENTS (1) THROUGH (5) IS:
.SKIP 1
.CENTER 65
^^MINVAL(A,5)##OR##MINVAL(A(*),5)\\
.SKIP 1
^NOTE THAT THE ASTERISK SUBSCRIPT FOR A VECTOR
NAME IS PURELY OPTIONAL AND DOES NOT CHANGE THE MEANING OF THE
FUNCTION CALL. ^THE (*) IS ALLOWED FOR CLARITY AND CONSISTENCY
WITH THE * SUBSCRIPT CAPABILITY OF ^^BBL\\.
^THE VECTOR NAME CAN ALSO BE ANY ROW OR COLUMN VARIABLE
NAME. ^THE ^^MINVAL\\ OF ^^ROW1\\ IS:
.SKIP 1
.CENTER 65
^^MINVAL(ROW1)##OR##MINVAL(ROW1(*))\\
.SKIP 1
^THE ^^MINVAL\\ OF THE FIRST 5 POSITIONS OF ^^ROW1\\ IS:
.SKIP 1
.CENTER 65
^^MINVAL(ROW1,5)##OR##MINVAL(ROW1(*),5)\\
.PAGE
.CENTER 65
^LIST ^FUNCTIONS
.SKIP 4
.LEFT MARGIN 33
.INDENT -31
1.#^^SIZE(VAR_#(EXP))\\#############RETURNS THE CURRENT NUMBER OF
ITEMS IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -31
2.#^^MINVAL(VAR_#(EXP),[,EXP])\\####RETURNS THE MINIMUM VALUE OF AN
ATTRIBUTE IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -31
3.#^^MAXVAL(VAR_#(EXP),[,EXP])\\####RETURNS THE MAXIMUM VALUE OF AN
ATTRIBUTE IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -31
4.#^^SUMVAL(VAR_#(EXP),[,EXP])\\####RETURNS THE SUM OF AN ATTRIBUTE'S
VALUES IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -31
5.#^^SUMSQR(VAR_#(EXP),[,EXP])\\####RETURNS THE SUM OF THE
SQUARES OF AN ATTRIBUTE'S VALUES IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -31
6.#^^MEANVAL(VAR_#(EXP),[,EXP])\\###RETURNS THE MEAN OF AN ATTRIBUTE'S
VALUES IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -31
7.#^^MEANSQR(VAR_#(EXP),[,EXP])\\###RETURNS THE MEAN OF THE SQUARES
OF AN ATTRIBUTE'S VALUES IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -31
8.#^^VARVAL(VAR_#(EXP),[,EXP])\\####RETURNS THE VARIANCE OF AN ATTRIBUTE'S
VALUES IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -31
9.#^^DEVVAL(VAR_#(EXP),[,EXP])\\####RETURNS THE STANDARD DEVIATION OF
AN ATTRIBUTE'S VALUES IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -32
10.#^^VALLT(VAR_#(EXP),EXP[,EXP])\\##RETURNS THE LARGEST VALUE OF AN
ATTRIBUTE LESS THAN THE SECOND ARGUMENT, FROM THE
SPECIFIED LIST.
.SKIP 1
.INDENT -32
11.#^^VALGT(VAR_#(EXP),EXP[,EXP])\\##RETURNS THE SMALLEST VALUE
OF AN ATTRIBUTE GREATER THAN THE SECOND ARGUMENT, FROM THE
SPECIFIED LIST.
.SKIP 1
.INDENT -32
12.#^^QTYLT(VAR_#(EXP),EXP[,EXP])\\##RETURNS THE NUMBER OF VALUES
OF AN ATTRIBUTE LESS THAN THE SECOND ARGUMENT, IN THE
SPECIFIED LIST.
.SKIP 1
.INDENT -32
13.#^^QTYGT(VAR_#(EXP),EXP[,EXP])\\##RETURNS THE NUMBER OF VALUES OF
AN ATTRIBUTE GREATER THAN THE SECOND ARGUMENT, IN THE
SPECIFIED LIST.
.SKIP 1
.INDENT -32
14.#^^QTYEQ(VAR_#(EXP),EXP[,EXP])\\##RETURNS THE NUMBER OF VALUES OF AN
ATTRIBUTE EQUAL TO THE SECOND ARGUMENT, IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -32
15.#^^PCTLT(VAR_#(EXP),EXP[,EXP])\\##RETURNS THE PERCENTAGE (IN DECIMAL
FORM) OF AN ATTRIBUTE'S VALUES LESS THAN THE SECOND
ARGUMENT, IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -32
16.#^^PCTGT(VAR_#(EXP),EXP[,EXP])\\##RETURNS THE PERCENTAGE (IN DECIMAL
FORM) OF AN ATTRIBUTE'S VALUES GREATER THAN
THE SECOND ARGUMENT, IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -32
17.#^^PCTEQ(VAR_#(EXP),EXP[,EXP])\\##RETURNS THE PERCENTAGE (IN DECIMAL
FORM) OF AN ATTRIBUTE'S VALUES EQUAL TO THE SECOND
ARGUMENT, IN THE SPECIFIED LIST.
.SKIP 1
.INDENT -32
18.#^^FRCTLE(VAR_#(EXP),EXP[,EXP])\\#RETURNS THE FRACTILE (VALUE) OF AN
ATTRIBUTE FROM THE SPECIFIED LIST SUCH THAT THE PERCENTAGE OF THE
ATTRIBUTE'S VALUES LESS THAN OR EQUAL TO THE FRACTILE EQUALS
THE 2ND DECIMAL ARGUMENT.
.SKIP 1
.INDENT -32
19.#^^FRCTGE(VAR_#(EXP),EXP[,EXP])\\#RETURNS THE FRACTILE (VALUE) OF AN
ATTRIBUTE FROM THE SPECIFIED LIST SUCH THAT THE PERCENTAGE OF THE
ATTRIBUTE'S VALUES GREATER THAN OR EQUAL TO THE FRACTILE
EQUALS THE 2ND DECIMAL ARGUMENT.
.SKIP 1
.LEFT MARGIN 5
^WHEN TWO OR THREE ARGUMENTS ARE ALLOWED, THE LAST ARGUMENT IS
OPTIONAL. ^IF THE LAST ARGUMENT IS NOT INCLUDED,
THE FIRST ATTRIBUTE IN EACH ITEM
IS USED FOR THE CALCULATIONS. ^IF THE LAST ARGUMENT IS INCLUDED,
THIS ARGUMENT INDICATES THE ATTRIBUTE NUMBER TO USE IN THE
CALCULATIONS. ^FOR EXAMPLE, IF "^A_#" HAS 5 ATTRIBUTES, THE MINVAL
OF ATTRIBUTE 1 IS:
.SKIP 1
.CENTER 65
^^MINVAL(A_#)##OR##MINVAL(A_#,1)\\
.SKIP 1
^THE MINVAL OF ATTRIBUTE 5 IS:
.SKIP 1
.CENTER 65
^^MINVAL(A_#,5)\\
.PAGE
.CENTER 65
^STRING ^FUNCTIONS
.SKIP 4
.LEFT MARGIN 33
.INDENT -31
1.#^^SIZE(VAR$(EXP))\\#############RETURNS THE NUMBER OF 
CHARACTERS IN THE SPECIFIED STRING.
.LEFT MARGIN 5
.SPACING 1
.RIGHT MARGIN 65
.LEFT MARGIN 5
.SUBTITLE                                                     ^SECTION ^X^I^V
.PAGE
.CENTER 65
^^BBL\\ ^TECHNICAL ^SPECIFICATIONS
.SKIP 4
.CENTER 65
^DESIGN ^SPECIFICATIONS
.SKIP 2
.NOFILL
 1. ^MAXIMUM PROGRAM SIZE      ^DYNAMICALLY ALLOCATED TO
                              THE INDIVIDUAL USER, LIMITED
                              ONLY BY LIMITS OF THE MONITOR.
.SKIP 1
 2. ^MAXIMUM SIZE OF INPUT     ^UP TO 160 CHARACTERS (158
    LINE                      WITHOUT C.R. _& L.F.), EXTENDED
                              FROM LINE TO LINE WITH A 
                              "_&". (^NO LINE NUMBERS ON 
                              CONTINUED LINES.)
.SKIP 1
 3. ^LARGEST NUMERIC           1*^E+38
    QUANTITIES
.SKIP 1
 4. ^SMALLEST NUMERIC          1*^E-37
    QUANTITIES
.SKIP 1
 5. ^ALLOWED FORMS OF          ^STANDARD NUMERICS
    CONSTANTS                 (WITH OR WITHOUT DECIMAL)
.SKIP 1
                              ^E FORMAT
                              (RAISE TO A POWER OF 10)
.SKIP 1
                              % FORMAT
                              (DIVIDE BY 100)
.SKIP 1
 6. ^ALLOWED FILE NAMES        ^UP TO 6 CHARACTER ALPHA-
                              NUMERIC FILE NAME (WITH
                              THE 1ST CHARACTER NOT
                              NUMERIC) AND A 3 CHARACTER
                              ALPHANUMERIC FILE EXTENSION.
.SKIP 1
 7. ^SIGNIFICANCE OF           ^AT LEAST 6 SIGNIFICANT DIGITS
    NUMERIC OUTPUT            LARGE NUMBERS SHOWN IN ^E
                              FORMAT, UNLESS SPECIFIC FORMAT
                              INSTRUCTIONS APPLY.
.SKIP 1
 8. ^ALPHANUMERIC STRING       ^UNLIMITED LENGTH OF ALPHA
    CAPABILITIES              STRINGS, DYNAMICALLY ALLOCATED
                              TO THE USER'S PROGRAM. ^FULL
                              ^^ASCII\\ CHARACTER SET.
.SKIP 1
 9. ^NUMERIC LIST              ^UNLIMITED NUMBER OF ITEMS
    CAPABILITIES              IN EACH LIST, DYNAMICALLY
                              ALLOCATED TO THE USER PROGRAM.
                              ^UP TO 15 ATTRIBUTES PER ITEM.
.SKIP 1
10. ^SUBROUTINES               ^UP TO 25 LEVELS OF SUBROUTINE 
                              _& FUNCTION CALLS. ^SUBROUTINES
                              MAY BE RECURSIVE.
.SKIP 1
11. ^FUNCTIONS                 ^SINGLE AND MULTIPLE-LINE USER
                              DEFINED FUNCTIONS. ^MAY CALL
                              LOWER LEVEL SUBROUTINES _& 
                              FUNCTIONS FROM WITHIN A
                              FUNCTION.
.SKIP 1
12. ^SPECIAL DATA TYPES        ^STEP, ^SMOOTH, ^DISCRETE,
                              ^CONTINUOUS, ^FIXED, ^NORMAL,
                              ^LOGNORMAL, ^POISSON,
                              ^EXPONENTIAL.
.SKIP 1
13. ^RISK PROFILE              ^SPECIAL RISK PROFILE NUMERIC
    CAPABILITIES              LISTS DYNAMICALLY ALLOCATED TO
                              THE USER'S PROGRAM. ^TABLES
                              AND GRAPHS OF MASS/CUMULATIVE,
                              FREQUENCY/PROBABILITY
                              PROFILES.
.SKIP 1
14. ^ASTERISK SUBSCRIPTING     ^STANDARD SUBSCRIPTS EXPRESSED
                              AS (*) TO IMPLY REPETITIVE 
                              EXECUTION OF ALMOST ANY ^^BBL\\
                              STATEMENT.
.SKIP 1
15. ^REPORT GENERATION         ^SPECIAL ^^ROW/COL/REP\\ VARIABLES
                              AND DISPLAY STATEMENTS FOR 
                              EASY REPORT SPECIFICATION AND
                              GENERATION.
.SKIP 1
16. ^OUTPUT REPORT             ^UP TO 130 CHARACTERS PER LINE,
    FORMATS                   WITH CONTROLLED JUSTIFICATION,
                              DECIMAL LOCATION, LEADING "$",
                              TRAILING "%", ETC. ^REPORTS
                              WIDER THAN ONE PAGE BLOCKED
                              INTO TWO PAGES, THREE, ETC.

.SKIP 1
17. ^REPEATER CAPABILITY       ^FREQUENT ALLOWANCE OF ":" TO 
                              SHOW REPEATED INPUT FIELDS, 
                              OUTPUT FIELDS, ETC.
.SKIP 1
18. ^PROGRAM FILES             ^UP TO 3 SEQUENTIAL OR RANDOM
                              ACCESS ^^ASCII\\ PROGRAM FILES
                              AVAILABLE TO THE USER PROGRAM
                              FOR INPUT _& OUTPUT. ^AUTOMATIC
                              CLOSING/OPENING OF FILES FOR
                              ^^BBL\\ PROGRAM ^^I/O\\ SIMPLICITY.
.SKIP 1
19. ^INTERNAL FUNCTIONS        ^SPECIAL SET OF STATISTICAL
                              FUNCTIONS SUCH AS VARIANCE,
                              STANDARD DEVIATION, ETC.
.SKIP 1
20. ^LINE NUMBERS              ^INPUT LINES NUMBERED FROM 1 
                              THROUGH 99999.
.SKIP 1
21. ^OTHER SPECIAL             ^SORTING
    FEATURES                  ^GRAPHING
                              ^AVERAGING
                              ^DISCOUNTING (PRESENT VALUE)
                              ^INTERNAL RATE OF RETURN
                              ^TRENDING
                              ^CHAINING
.SKIP 1
22. ^INTERACTIVE SYSTEM        ^SIMPLE YET POWERFUL COMMAND
                              SYSTEM. ^ALL STATEMENTS ARE
                              INCREMENTALLY COMPILED ON
                              INPUT FOR INTERACTIVE ERROR
                              DETECTION.
.FILL
.PAGE
.CENTER 65
^MAJOR ^^BBL\\ ^SUBSYSTEMS
.SKIP 4
.PARAGRAPH
^THE ^^BBL\\ SYSTEM CAN BE LOGICALLY DIVIDED INTO FOUR
MAJOR SUBSYSTEM AS SHOWN IN THE DIAGRAM BELOW:
.SKIP 2
.NOFILL
^^
    -----------------
    '               '
    '  BBL EDITOR   '----------------------------
    '               '                           '
    -----------------                           '
         '    '                                 '
         '    '                                 '
         '    '------------                     '
         '                '                     '
         '                '                     '
    -----------------  ----------------  ---------------
    '      BBL      '  '      BBL     '  '      BBL    '
    ' INCREMENTAL   '  '  ASSEMBLER   '--'  OPERATING  '
    '  COMPILER     '  '              '  '   SYSTEM    '
    -----------------  ----------------  ---------------
\\
.FILL
.SKIP 2
.PARAGRAPH
^A ^^BBL\\ PROGRAM IS ENTERED EITHER INTERACTIVELY FROM A CONSOLE
OR FROM AN ^^ASCII\\ SEQUENTIAL FILE. ^EACH LINE 
ENTERED IS INCREMENTALLY COMPILED INTO A SPECIAL SET OF OVER 150
DIFFERENT ^^BBL\\ COMPILED CODE INSTRUCTIONS. ^WHEN A ^^BBL\\
PROGRAM IS RUN, THE COMPILED ^^BBL\\ CODE IS ASSEMBLED INTO
AN EXECUTEABLE PROGRAM, AND THE ^^BBL\\ OPERATING SYSTEM CONTROLS
EXECUTION OF THE ASSEMBLED PROGRAM, FACILITATING ANY ^I/^O
INVOLVED.
.PAGE
.CENTER 65
^^BBL\\ ^DYNAMIC ^MEMORY ^SYSTEM
.SKIP 4
.PARAGRAPH
^MEMORY REQUIREMENTS FOR A ^^BBL\\ PROGRAM ARE AUTOMATICALLY
SATISFIED BY THE ^^BBL\\ SYSTEM AT THREE STAGES IN THE
^^BBL\\ SYSTEM. ^THE MEMORY ALLOCATED TO THE USER IS
CALLED THE USER'S WORKSPACE:
.SKIP 1
.LEFT MARGIN 10
.INDENT -3
1.#^DURING EDITING, THE SYSTEM ALLOCATES SUFFICIENT
WORKSPACE TO CONTAIN THE RELOCATABLE COMPILED CODE AND THE INFORMATION
REQUIRED BY THE EDITOR. ^THE AMOUNT OF MEMORY ALLOCATED DURING
EDITING IS CALLED THE "STARTING WORKSPACE."
.SKIP 1
.INDENT -3
2.#^WHEN A ^^BBL\\ PROGRAM IS ASSEMBLED, THE SYSTEM ALLOCATES
VARIABLE STORAGE AND LIST/STRING INFORMATION INTO THE AREA FORMERLY
OCCUPIED BY THE EDITING INFORMATION. ^IF THIS AREA IS SUFFICIENT,
NO ADDITIONAL WORKSPACE IS REQUIRED. ^IF, HOWEVER, THE VARIABLE
STORAGE AND LIST/STRING INFORMATION REQUIRES MORE WORKSPACE,
THE SYSTEM ALLOCATES ADDITIONAL WORKSPACE CALLED "ADDED WORKSPACE"
AND RE-ASSEMBLES PORTIONS OF THE RELOCATABLE COMPILED CODE WHICH
HAVE BEEN SHIFTED IN THE WORKSPACE TO MAKE ROOM FOR THE ADDED WORKSPACE.
.SKIP 1
.INDENT -3
3.#^DURING EXECUTION OF A ^^BBL\\ PROGRAM, LISTS, AND STRINGS
ARE ALLOCATED STORAGE AS THEY EXPAND AND CONTRACT IN LENGTH. 
^INITIALLY, ANY WORKSPACE NOT CONSUMED BY VARIABLE STORAGE AND 
RELOCATABLE CODE IS ALLOCATED TO STRINGS AND LISTS. ^IF MORE
STRING/LIST MEMORY IS REQUIRED DURING EXECUTION, ADDITIONAL
WORKSPACE, CALLED "DYNAMIC WORKSPACE", IS ALLOCATED BY ^^BBL\\.
.SKIP 1
.LEFT MARGIN 5
.PARAGRAPH
^ALTHOUGH ^^BBL\\ WILL AUTOMATICALLY HANDLE ALL DYNAMIC MEMORY
ALLOCATIONS, THE USER MAY WISH TO SPECIFY THE WORKSPACE
FOR ASSEMBLY AND EXECUTION VIA THE WORKSPACE STATEMENT.
^THE USE MAY DO SO FOR TWO REASONS:
.SKIP 1
.LEFT MARGIN 10
.INDENT -3
1.#^ADDING WORKSPACE DURING ASSEMBLY FORCES A CERTAIN AMOUNT OF
RE-ASSEMBLY, WHICH MAY ADD TO THE COMPUTE SECONDS FOR A
^^BBL\\ PROGRAM.
.SKIP 1
.INDENT -3
2.#^ADDING DYNAMIC MEMORY DURING EXECUTION IS LESS COSTLY, BUT IS
SOMEWHAT TIME-CONSUMING. ^THIS IS ESPECIALLY TRUE IF THE
DYNAMIC MEMORY REQUIREMENTS ARE LARGE, SINCE DYNAMIC MEMORY IS
ADDED IN 1024 WORD BLOCKS.
.TEST PAGE 8
.SKIP 1
.LEFT MARGIN 5
.PARAGRAPH
^IN ORDER TO DETERMINE THE MEMORY REQUIREMENTS OF A ^^BBL\\
PROGRAM, THE USER SHOULD USE THE 
"^^RESOURCES\\" COMMAND TO PRINT THE WORKSPACE CONSUMED BY
EACH RUN. ^UNLESS DYNAMIC MEMORY REQUIREMENTS CAUSE
EXCESSIVE DELAYS, THE USER GENERALLY SPECIFIES A WORKSPACE WHICH
COVERS THE STARTING AND ADDED WORKSPACE REQUIREMENTS OF THE
PROGRAM (CAUSING THE ADDED WORKSPACE TO BECOME ZERO), AND ^^BBL\\
AUTOMATICALLY ALLOCATES DYNAMIC WORKSPACE AS REQUIRED.
.PAGE
.CENTER 65
^^BBL\\ ^SYSTEM ^FILES
.SKIP 4
.PARAGRAPH
^THE ^^BBL\\ SYSTEM EMPLOYS TWO TEMPORARY SCRATCH FILES WHICH ARE
NORMALLY ONLY AVAILABLE TO THE ^^BBL\\ SYSTEM. ^EACH FILE IS NAMED
WITH THE JOB NUMBER FOLLOWED BY ^^BL1\\ OR ^^BL2\\. ^THE
EXTENSION IS ^^.TMP\\ SO THAT THE FILES CAN BE AUTOMATICALLY
DELETED UPON LOGOUT FROM THE TIME-SHARE SYSTEM.
.SKIP 1
.LEFT MARGIN 10
.INDENT -3
1.#^^000BL1.TMP\\ IS AN EDITOR SCRATCH FILE. (^IT CAN
BE USED TO RECOVER A USER PROGRAM WHICH WAS NOT SAVED. ^AS MANY AS
4 OF THE MOST RECENT CHANGES MAY BE ABSENT FROM THIS FILE. 
^THEREFORE, RECOVERED FILES SHOULD BE LISTED TO INSURE THEIR
COMPLETENESS. ^TO RECOVER A FILE FROM A DIFFERENT JOB, THE ^^BL1\\
^^.TMP\\ FILE SHOULD BE RENAMED TO INCORPORATE THE JOB NUMBER OF
THE CURRENT JOB.)
.SKIP 1
.INDENT -3
2.#^^000BL2.TMP\\ IS AN ASSEMBLER SCRATCH FILE.
.SKIP 1
.LEFT MARGIN 5
.PARAGRAPH
^WHILE WITHIN THE ^^BBL\\ EDITOR, ALL USER FILE RETRIEVING,
SAVING, ETC. IS HANDLED ON SEQUENTIAL ^^ASCII\\ FILES (NAMED BY THE
USER) AND ON DUMP MODE FILES FOR RELOCATABLE COMPILED CODE (GIVEN
THE EXTENSION ^^.REL\\ BY ^^BBL\\.) ^THESE FILES ARE AUTOMATICALLY
OPENED BY ^^BBL\\ FOR THE EDITOR OPERATIONS AND CLOSED WHEN
THE OPERATIONS ARE COMPLETED.
.PARAGRAPH
^THE USER'S PROGRAM CAN ALSO OPEN UP TO THREE SEQUENTIAL OR RANDOM
ACCESS ^^ASCII\\ FILES FOR INPUT OR OUTPUT, ON LOGICAL UNITS 20,
21, AND 22. ^IF NO FILE IS OPENED, DEFAULT FILES WILL BE
AUTOMATICALLY OPENED BY THE ^^BBL\\ SYSTEM WHEN AN EXECUTEABLE
^I/^O STATEMENT CAUSES A LOGICAL UNIT TO BE ACCESSED. ^EACH DEFAULT
FILE IS NAMED "^^BBL\\" FOLLOWED
BY THE UNIT NUMBER AND THE EXTENSION "^^.DAT\\":
.SKIP 1
.LEFT MARGIN 30
.NOFILL
^^
BBL020.DAT
BBL021.DAT
BBL022.DAT
\\
.FILL
.LEFT MARGIN 5
.SKIP 1
.PARAGRAPH
^ALL FILES OPENED BY THE USER'S PROGRAM DURING EXECUTION ARE
AUTOMATICALLY CLOSED WHEN EXECUTION IS COMPLETED OR WHEN CHAINING
TO ANOTHER ^^BBL\\ PROGRAM.
.PAGE
.CENTER 65
^^BBL\\ ^COMMAND ^SUMMARY
.SKIP 4
.NOFILL
.LEFT MARGIN 20
^^
BYE/EXIT/STOP
.SKIP 1
CATALOG [NAME]
.SKIP 1
DELETE [L1 [L2]]
.SKIP 1
HELP [COMMAND COMMAND ...]
.SKIP 1
LIST [L1 [L2]]
.SKIP 1
MERGE NAME [L1 [L2]]
.SKIP 1
NEW NAME
.SKIP 1
OLD NAME [L1 [L2]]
.SKIP 1
RECOVER
.SKIP 1
RENAME NAME
.SKIP 1
RESOURCES ON/OFF
.SKIP 1
RUN
.SKIP 1
SAVE [NAME [L1 [L2]]]
.SKIP 1
UNSAVE NAME
\\
.FILL
.LEFT MARGIN 5
.PAGE
.CENTER 65
THIS PAGE TO BE SUPPLIED LATER
.PAGE
.CENTER 65
THIS PAGE TO BE SUPPLIED LATER
.PAGE
.CENTER 65
THIS PAGE TO BE SUPPLIED LATER
.PAGE
.CENTER 65
THIS PAGE TO BE SUPPLIED LATER
.PAGE
.CENTER 65
THIS PAGE TO BE SUPPLIED LATER
.PAGE
.CENTER 65
THIS PAGE TO BE SUPPLIED LATER
.PAGE
.CENTER 65
THIS PAGE TO BE SUPPLIED LATER
.PAGE
.CENTER 65
^INPUT AND ^EDITING ^AIDS
.SKIP 4
.PARAGRAPH
^WHILE USING THE ^^BBL\\ SYSTEM, THE FOLLOWING INPUT AND
EDITING AIDS ARE PROVIDED:
.SKIP 1
.NOFILL
.LEFT MARGIN 7
 1. ^TO INDICATE A CONSTANT IS       TYPE A % AFTER THE
    A PERCENTAGE...                 NUMBER.
.SKIP 1
 2. ^TO INDICATE A CONSTANT IS       TYPE AN ^E AFTER THE
    TO BE RAISED TO A POWER         NUMBER FOLLOWED BY THE
    OF 10...                        POWER OF 10.
.SKIP 1
 3. ^TO SEPARATE COMMAND             TYPE A BLANK OR A
    ARGUMENTS...                    COMMA.
.SKIP 1
 4. ^TO SEPARATE ADJACENT            TYPE A COMMA.
    CONSTANTS WITHIN A ^^BBL\\
    STATEMENT...
.SKIP 1
 5. ^TO RESPOND TO A "YES/NO"        TYPE A "Y" OR CARRIAGE
    QUESTION...                     RETURN FOR "YES",
                                    ANY OTHER RESPONSE
                                    FOR "NO".
.SKIP 1
 6. ^TO SUPRESS TYPING OF LONG       TYPE A CONTROL _^O.
    LISTINGS, OUTPUT, ETC...
.SKIP 1
 7. ^TO DELETE A SINGLE CHARACTER    TYPE A RUBOUT.
    PRIOR TO CARRIAGE RETURN...
.SKIP 1
 8. ^TO DELETE AN ENTIRE LINE        TYPE A CONTROL _^U.
    PRIOR TO CARRIAGE RETURN...
.SKIP 1
 9. ^TO BREAK ^^BBL\\ SYSTEM             TYPE A CONTROL _^C.
    EXECUTION...
.SKIP 1
10. ^TO CONTINUE AFTER A             TYPE ^^CON\\  (CONTINUE).
    BREAK _^C...
.SKIP 1
11. ^TO RETURN TO THE ^^BBL\\            TYPE ^^REE\\  (REENTER).
    EDITOR AFTER A BREAK _^C...
.SKIP 1
12. ^TO EXTEND A ^^BBL\\ STATEMENT       TYPE AN "_&" AND THE
    TO ADDITIONAL LINES (UP TO      REMAINDER OF THE 
    160 CHARACTERS TOTAL)...        STATEMENT. (NO NEW
                                    LINE NUMBERS ON
                                    CONTINUED LINES.)
.LEFT MARGIN 5
.FILL
.PAGE
.CENTER 65
^^BBL\\ ^ERROR ^MESSAGES
.SKIP 4
.PARAGRAPH
^^BBL\\ ERROR MESSAGES CAN BE DIVIDED INTO FOUR CATEGORIES:
(1) COMMAND ERRORS; (2) STATEMENT ERRORS; (3) ASSEMBLY
ERRORS; (4) AND EXECUTION ERRORS.  ^A DESCRIPTION
OF ERROR MESSAGES IN EACH OF THESE
CATEGORIES FOLLOWS.
.SKIP 2
.LEFT MARGIN 10
^^BBL\\ ^COMMAND ^ERRORS:
.SKIP 2
.LEFT MARGIN 35
.INDENT -28
1.#^^CAN'T#OPEN#FILE\\##########^AN INPUT/OUTPUT FILE FOR SAVING,
ETC. WAS OF THE WRONG TYPE, WAS PROTECTED, ETC.
.SKIP 1
.INDENT -28
2.#^^COMMAND#ERROR\\############^THE COMMAND, AS TYPED, WAS UNINTERPRETABLE
OR HAD ILLEGAL ARGUMENTS.
.SKIP 1
.INDENT -28
3.#^^FILE#NOT#FOUND\\###########^FILE WAS NON-EXISTENT IN THE USER'S AREA.
.SKIP 1
.INDENT -28
4.#^^ILLEGAL#FILE#NAME\\########^FILE NAME INDICATED INCLUDED ILLEGAL
CHARACTERS.
.SKIP 1
.INDENT -28
5.#^^ILLEGAL#LINE#NO.
.BREAK
.INDENT -28
###REFERENCE\\################^LINE NUMBER ARGUMENT OUTSIDE RANGE 1-99999.
.PAGE
.LEFT MARGIN 10
^^BBL\\ ^STATEMENT ^ERRORS:
.SKIP 2
.LEFT MARGIN 35
.INDENT -28
1.#^^CONFUSING#DATA\\###########^SPECIFIED DATA PROCEEDS IN AN ILLEGAL
ORDER, IS OF THE WRONG SIZE, DOES NOT OCCUR IN EVEN PAIRS,
ETC.
.SKIP 1
.INDENT -28
2.#^^ILLEGAL#FILE#NAME\\########^A FILE NAME CONTAINS ILLEGAL CHARACTERS.
.SKIP 1
.INDENT -28
3.#^^ILLEGAL#LINE#NO.
.BREAK
.INDENT -28
###REFERENCE\\################^A LINE NUMBER REFERENCE WITHIN THE 
STATEMENT IS OUTSIDE THE RANGE 1-99999.
.SKIP 1
.INDENT -28
4.#^^MISSING#KEY#WORD\\#########^A REQUIRED KEY WORD IS MISSING FROM THE
STATEMENT.
.SKIP 1
.INDENT -28
5.#^^PROGRAM#TOO#BIG\\##########^NO MORE MEMORY CAN BE ALLOCATED.
.SKIP 1
.INDENT -28
6.#^^SYNTAX#ERROR\\#############^STATEMENT DOES NOT FOLLOW REQUIRED
INPUT SEQUENCE OR CONTAINS INFORMATION WHICH ^^BBL\\ CAN NOT INTERPRET.
.SKIP 1
.INDENT -28
7.#^^TOO#COMPLEX\\##############^THE STATEMENT GENERATES MORE
INSTRUCTIONS THAN CAN BE PROCESSED FOR A SINGLE ^^BBL\\ STATEMENT.
.SKIP 1
.INDENT -28
8.#^^UNBALANCED#PARENS\\########^THE PARENTHESES WITHIN AN EXPRESSION DO
NOT OCCUR IN BALANCED PAIRS.
.SKIP 1
.INDENT -28
9.#^^UNBALANCED#QUOTES\\########^SINGLE OR DOUBLE QUOTES DO NOT OCCUR
IN BALANCED PAIRS.
.LEFT MARGIN 10
.PAGE
^^BBL\\ ^ASSEMBLY ^ERRORS:
.SKIP 2
.LEFT MARGIN 35
.INDENT -28
1.#^^CONFLICTING#DEFINE
.BREAK
.INDENT -28
###STATEMENTS\\###############^TWO OR MORE DEFINE STATEMENTS DEFINE
THE SAME LIST, REPORT, OR FUNCTION.
.SKIP 1
.INDENT -28
2.#^^CONFLICTING#DIMENSIONS\\###^A PROGRAM VARIABLE HAS BEEN DIMENSIONED MORE
THAN ONCE.
.SKIP 1
.INDENT -28
3.#^^CONFLICTING#NUMBER#OF
.BREAK
.INDENT -28
###ARGUMENTS\\################^A FUNCTION DEFINITION AND A FUNCTION
REFERENCE DO NOT AGREE IN THE NUMBER OF ARGUMENTS.
.SKIP 1
.INDENT -28
4.#^^CONFLICTING#NUMBER#OF
.BREAK
.INDENT -28
###SUBSCRIPTS\\###############^TWO OR MORE REFERENCES TO AN ARRAY
SPECIFY A DIFFERENT NUMBER OF SUBSCRIPTS.
.SKIP 1
.INDENT -28
5.#^^DEFINE#FUNCTION
.BREAK
.INDENT -28
###WITHOUT#FNEND\\############^EACH MULTI-LINE FUNCTION DEFINITION
SHOULD END WITH A SINGLE FNEND STATEMENT.
.SKIP 1
.INDENT -28
6.#^^END#STATEMENT#NOT#LAST\\###^THE LAST LINE OF ANY ^^BBL\\
PROGRAM SHOULD BE AN END STATEMENT.
.SKIP 1
.INDENT -28
7.#^^FOR#NEXT#NESTED
.BREAK
.INDENT -28
###IMPROPERLY\\###############^A NEXT STATEMENT WHICH CORRESPONDS TO
A FOR STATEMENT DOES NOT REFERENCE THE SAME VARIABLE OR DOES NOT HAVE A
CORRESPONDING FOR STATEMENT.
.SKIP 1
.INDENT -28
8.#^^FOR#NEXT#NESTED
.BREAK
.INDENT -28
###TOO#DEEPLY\\###############^FOR NEXT LOOPS MAY BE NESTED UP TO 25
LEVELS DEEP.
.SKIP 1
.INDENT -28
9.#^^FOR#WITHOUT#NEXT\\#########^A FOR STATEMENT HAS NO MATCHING NEXT
STATEMENT.
.SKIP 1
.INDENT -29
10.#^^ILLEGAL#LINE#NO.
.BREAK
.INDENT -29
####REFERENCE\\################^A STATEMENT HAS REFERENCED A NON-EXISTENT
OR ILLEGAL LINE NUMBER.
.SKIP 1
.TEST PAGE 5
.INDENT -29
11.#^^NO#REPORT#LINES\\##########^A DEFINE REPORT STATEMENT HAS NO 
FOLLOWING SHOW STATEMENTS TO SPECIFY HOW EACH REPORT OUTPUT
LINE WAS TO BE FORMATTED.
.SKIP 1
.INDENT -29
12.#^^PROGRAM#TOO#BIG\\##########^THE PROGRAM INSTRUCTIONS PLUS VARIABLE
STORAGE REQUIRE MORE MEMORY THAN CAN BE ALLOCATED.
.SKIP 1
.INDENT -29
13.#^^REPORT#ALPHANUMERICS
.BREAK
.INDENT -29
####TOO#WIDE\\#################^THE NUMERIC FORM OF THE SHOW STATEMENT
HAS TOO MANY ALPHANUMERIC FIELDS. ^THE COMBINATION OF THE OUTPUT
WIDTH AND THE ALPHANUMERIC FIELDS SHOULD BE SUCH THAT AT LEAST ONE
NUMERIC FIELD WILL BE SHOWN ON EACH PAGE OF A REPORT.
.SKIP 1
.INDENT -29
14.#^^TEMPORARY/PERMANENT
.BREAK
.INDENT -29
####LIST#CONFLICT\\############^A PERMANENT LIST HAS BEEN REFERENCED
AS A TEMPORARY LIST IN A CREATE OR DESTROY STATEMENT.
.SKIP 1
.INDENT -29
15.#^^UNDEFINED#FUNCTION\\#######^A PROGRAM EXPRESSION HAS MADE REFERENCE TO
A USER DEFINED FUNCTION WHICH WAS NOT DEFINED.
.SKIP 1
.INDENT -29
16.#^^UNDEFINED#PROFILE
.BREAK
.INDENT -29
####OR#LIST\\##################^A REFERENCE HAS BEEN MADE TO A RISK
PROFILE OR LIST VARIABLE WHICH WAS NEVER DEFINED.
.SKIP 1
.INDENT -29
17.#^^UNDEFINED#REPORT\\#########^A DISPLAY STATEMENT HAS ATTEMPTED TO
DISPLAY A REPORT MATRIX WITH NO CORRESPONDING REPORT DEFINITION.
.SKIP 1
.INDENT -29
18.#^^UNDEFINED#RISK#PROFILE\\###^A DISPLAY STATEMENT OR GRAPH
STATEMENT HAS REFERENCED A RISK PROFILE WHICH WAS NOT DEFINED.
.PAGE
.LEFT MARGIN 10
^^BBL\\ ^EXECUTION ^ERRORS:
.SKIP 2
.LEFT MARGIN 35
.INDENT -28
1.#^^ARGUMENT#OUT#OF#RANGE\\####^AN ARGUMENT IN AN INTERNAL FUNCTION
CALL HAS A VALUE OUTSIDE THE LIMITS OF ALLOWED VALUES.
.SKIP 1
.INDENT -28
2.#^^ARITHMETIC#OVERFLOW\\#*####^AN ATTEMPT HAS BEEN MADE TO MATHEMATICALLY
COMBINE TWO VALUES WHOSE RESULTANT IS TOO LARGE.
.SKIP 1
.INDENT -28
3.#^^ARITHMETIC#UNDERFLOW\\#*###^AN ATTEMPT HAS BEEN MADE TO MATHEMATICALLY
COMBINE TWO VALUES WHOSE RESULTANT IS TOO SMALL.
.SKIP 1
.INDENT -28
4.#^^ATTRIBUTE#OUT#OF#RANGE\\###^A REFERENCE HAS BEEN MADE TO AN
ATTRIBUTE NUMBER LARGER THAN THE NUMBER OF ATTRIBUTES DEFINED
FOR A LIST.
.SKIP 1
.INDENT -28
5.#^^CAN'T#OPEN#FILE\\##########^A FILE WAS THE WRONG TYPE, PROTECTED, ETC.
.SKIP 1
.INDENT -28
6.#^^DISCOUNT#RATE#OUT
.BREAK
.INDENT -28
###OF#RANGE\\#################^A NEGATIVE DISCOUNT RATE WAS REFERENCED
BY A DISCOUNT STATEMENT.
.SKIP 1
.INDENT -28
7.#^^DIVISION#ERROR\\#*#########^AN ILLEGAL DIVISION OF TWO NUMBERS,
SUCH AS DIVISION BY ZERO.
.SKIP 1
.INDENT -28
8.#^^END#OF#FILE\\##############^AN ATTEMPT HAS BEEN MADE TO READ
BEYOND THE END OF A FILE.
.SKIP 1
.INDENT -28
9.#^^ERROR#READING#FILE\\#######^A DATA TRANSMISSION ERROR HAS BEEN
ENCOUNTERED WHILE READING A FILE, OR THE FILE COULD NOT BE
READ BECAUSE IT WAS NON-EXISTENT OR PROTECTED.
.SKIP 1
.INDENT -29
10.#^^ILLEGAL#FILE#NAME\\########^A FILE NAME INCLUDES ILLEGAL
CHARACTERS.
.SKIP 1
.INDENT -29
11.#^^LOGICAL#UNIT#OUT#
.BREAK
.INDENT -29
####OF#RANGE\\#################^AN ^I/^O OPERATION HAS MADE REFERENCE
TO A LOGICAL UNIT NUMBER NOT ALLOWED.
.SKIP 1
.INDENT -29
12.#^^OUT#OF#AVAILABLE
.BREAK
.INDENT -29
####MEMORY\\###################^THE PROGRAM HAS CALLED FOR MORE
DYNAMIC MEMORY TO BE ALLOCATED THAN IS AVAILABLE.
.SKIP 1
.INDENT -29
13.#^^OUT#OF#DATA\\##############^A READ STATEMENT HAS ATTEMPTED TO
ACCESS DATA PAST THE END OF THE INTERNAL DATA BLOCK OR A SELECT
STATEMENT HAS ATTEMPTED TO SELECT A VALUE FOR A VARIABLE WITH
NO ASSOCIATED SPECIAL DATA STATEMENT.
.SKIP 1
.INDENT -29
14.#^^RETURN#WITHOUT#SUBROU-
.BREAK
.INDENT -29
####TINE#OR#FUNCTION#CALL\\####^A RETURN STATEMENT HAS BEEN ENCOUNTERED,
AND NO SUBROUTINE OR FUNCTION HAD BEEN CALLED.
.SKIP 1
.INDENT -29
15.#^^STEP#OF#FOR/NEXT#=#0\\#####^THE STEP SIZE OF A FOR STATEMENT IS ZERO.
.SKIP 1
.INDENT -29
16.#^^SUBSCRIPT#OUT#OF#RANGE\\###^A SUBSCRIPT OF A VARIABLE, STRING, OR
LIST HAS REFERENCED AN ILLEGAL MEMORY LOCATION.
.SKIP 1
.INDENT -29
17.#^^TOO#MANY#NESTED#SUBROU-
.BREAK
.INDENT -29
####TINE#AND#FUNCTION#CALLS\\##^SUBROUTINES AND FUNCTIONS MAY CALL
OTHER SUBROUTINES AND FUNCTIONS UP TO 25 LEVELS DEEP.
.SKIP 10
.LEFT MARGIN 5
.INDENT -2
*#^THESE ERRORS WILL NOT TERMINATE EXECUTION OF THE USER'S ^^BBL\\
PROGRAM, AND WILL BE PRINTED EACH TIME THE ERROR CONDITION
OCCURS.
.PAGE
.CENTER 65
^RISK ^PROFILE ^SMOOTHING
.SKIP 4
.PARAGRAPH
^RISK PROFILE REPORTS PRODUCED BY ^^BBL\\ WILL EMPLOY SMOOTHING
CALCULATIONS IF THE RISK PROFILE VARIABLE TYPE IS EITHER "^^SMOOTH\\"
OR "^^CONTINUOUS\\".  ^THESE SMOOTHED PROFILES ARE CALCULATED BY
JOINING A SERIES OF STRAIGHT-LINE SEGMENTS THROUGH THE
OBSERVED PROFILE VALUES (VALUES OF THE ITEMS IN THE ^^RP_#\\
VARIABLE.)  ^IF A RISK PROFILE VARIABLE CONTAINS THE
FOLLOWING ITEM VALUES FOR 10 ITEMS, THE CUMULATIVE PROBABILITY
CURVE WOULD BE THE STEP CURVE SHOWN BELOW:
.SKIP 2
.NOFILL
.LEFT MARGIN 6
^^
ITEM VALUE     NO. OF ITEMS WITH VALUE    CUM NO. OF ITEMS
     1                   1                       1
     3                   2                       3
     7                   4                       7
    11                   2                       9
    13                   1                      10
\\
.LEFT MARGIN 5
.FILL

.PAGE
.PARAGRAPH
^IN ORDER TO SMOOTH A CURVE THROUGH THE STEPS, EACH OF
THE PLATEAUS IS BISECTED. ^THE CRITICAL ASSUMPTION HERE IS
THAT THE OBSERVED VALUE LIES IN THE CENTER OF A "GROUP" OF
POSSIBLE VALUES WHICH COULD OCCUR BETWEEN THE NEXT LOWER GROUP
AND THE NEXT HIGHER GROUP. ^SIMILARLY, THE NEXT LOWER VALUE
LIES IN THE CENTER OF ITS GROUP OF POSSIBLE VALUES, AND
THE CURVE IS SMOOTHED AS FOLLOWS:
.SKIP 2
.NOFILL
.LEFT MARGIN 6
^^
ITEM VALUE     NO. OF ITEMS WITH VALUE    CUM NO. OF ITEMS
     1                   1                       1
     3                   2                       3
     7                   4                       7
    11                   2                       9
    13                   1                      10
\\
.LEFT MARGIN 5
.FILL
.FIGURE 25
.PARAGRAPH
^NOTICE THAT THE "TAILS" OF THE SMOOTHED CUMULATIVE
PROBABILITY CURVE ARE EXTRAPOLATED ON EITHER END, THROUGH
THE MIDDLE OF THE STEP. ^EXTRAPOLATION CAN OCCASIONALLY CAUSE VALUES
FOR THE EXTREMES OF A PROFILE TO BE SLIGHTLY BELOW OR ABOVE WHAT
THE USER KNOWS THE TRUE EXTREMES TO BE.
.PAGE
.CENTER 65
^^ASCII\\ ^CODES
.SKIP 4
.NOFILL
.LEFT MARGIN 2
.RIGHT MARGIN 68
CHARACTER  CODE  CHARACTER  CODE  CHARACTER  CODE  CHARACTER  CODE
.SKIP 1
  ^^NULL\\       0     ^^SPACE\\     32     @         64     ^^XMIT\\      94
  ^^CTRL\\-^A     1     !         33     ^A         65     A         97
  ^^CTRL\\-^B     2     "         34     ^B         66     B         98
  ^^CTRL\\-^C     3     _#         35     ^C         67     C         99
  ^^CTRL\\-^D     4     $         36     ^D         68     D        100
  ^^CTRL\\-^E     5     %         37     ^E         69     E        101
  ^^CTRL\\-^F     6     _&         38     ^F         70     F        102
  ^^CTRL\\-^G     7     '         39     ^G         71     G        103
  ^^CTRL\\-^H     8     (         40     ^H         72     H        104
  ^^TAB \\       9     )         41     ^I         73     I        105
  ^^L.F.\\      10     *         42     ^J         74     J        106
  ^^V.T.\\      11     +         43     ^K         75     K        107
  ^^F.F.\\      12     ,         44     ^L         76     L        108
  ^^C.R.\\      13     -         45     ^M         77     M        109
  ^^CTRL\\-^N    14     .         46     ^N         78     N        110
  ^^CTRL\\-^O    15     /         47     ^O         79     O        111
  ^^CTRL\\-^P    16     0         48     ^P         80     P        112
  ^^CTRL\\-^Q    17     1         49     ^Q         81     Q        113
  ^^CTRL\\-^R    18     2         50     ^R         82     R        114
  ^^CTRL\\-^S    19     3         51     ^S         83     S        115
  ^^CTRL\\-^T    20     4         52     ^T         84     T        116
  ^^CTRL\\-^U    21     5         53     ^U         85     U        117
  ^^CTRL\\-^V    22     6         54     ^V         86     V        118
  ^^CTRL\\-^W    23     7         55     ^W         87     W        119
  ^^CTRL\\-^X    24     8         56     ^X         88     X        120
  ^^CTRL\\-^Y    25     9         57     ^Y         89     Y        121
  ^^CTRL\\-^Z    26     :         58     ^Z         90     Z        122
  ^^ESCAPE\\    27     ;         59     [         91              123
  ^^CTRL\\-_\    28     <         60     _\         92              124
  ^^CTRL\\-]    29     =         61     ]         93              125
  ^^CTRL\\-_^    30     >         62     _^         94              126
  ^^CTRL\\-__    31     ?         63     __         95     ^^DELETE\\   127
.FILL
.LEFT MARGIN 5
.RIGHT MARGIN 65
.PAGE
.CENTER 65
^HARDWARE AND ^OPERATING
.CENTER 65
^SYSTEM ^REQUIREMENTS
.SKIP 4
.NOFILL
MACHINE         ^^DEC\\SYSTEM-10 (^^PDP-10\\)
.SKIP 2
MINIMUM CORE    15^K WORDS + USER'S WORKSPACE
.SKIP 2
DISK FILES      1 SYSTEM SEQUENTIAL ^^ASCII\\ FILE
                2 SYSTEM RANDOM ACCESS ^^ASCII\\ FILES
                3 USER SEQUENTIAL/RANDOM ACCESS ^^ASCII\\ FILES
.SKIP 2
SYSTEM          FORTRAN ^^IV\\ COMPILER
PROGRAMS *      MACRO-10 COMPILER
                SYSTEM LOADER
.SKIP 20
.FILL
.INDENT -2
*#^^BBL\\ INCORPORATES IT'S OWN OPERATING SYSTEM, AND THE
FORTRAN ^^IV\\ COMPILER, MACRO-10 COMPILER, AND SYSTEM LOADER
ARE NOT REQUIRED WHILE THE ^^BBL\\ SYSTEM IS OPERATIONAL.
^THESE SYSTEM PROGRAMS ARE REQUIRED FOR ^^BBL\\ INSTALLATION
AND MAINTENANCE.
.SUBTITLE                                                     ^SECTION ^X^V
.PAGE
.CENTER 65
^BIBLIOGRAPHY
.SKIP 4
^A. ^ALAN ^B. ^PRITSKER, AND ^PHILIP ^J. ^KIVIAT,
^SIMULATION WITH ^GASP ^^II\\, ^PRENTICE-^HALL, ^INC., 1969
.SKIP 1
^GENERAL ^PURPOSE ^SIMULATOR, ^INFORMATION ^SERVICE ^DEPARTMANT,
^GENERAL ^ELECTRIC, ^MARCH 1970
.SKIP 1
^WILLIAM ^F. ^SHARPE, ^BASIC, ^AN ^INTRODUCTION TO ^COMPUTER
^PROGRAMMING ^USING THE ^BASIC ^LANGUAGE, ^THE ^FREE ^PRESS, 1967
.SKIP 1
^JOHN ^G. ^KEMENY, AND ^THOMAS ^E. ^KURTZ, ^BASIC 
^PROGRAMMING, ^JOHN ^WILEY _& ^SONS, ^INC., 1967
.SKIP 1
^^DEC\\SYSTEM-10 ^MATHEMATICAL ^LANGUAGES ^HANDBOOK,
^DIGITAL ^EQUIPMENT ^CORPORATION, 1972
.SKIP 1
^HARRY ^M. ^MARKOWITZ, ^BERNARD ^HAUSNER, AND ^HERBERT
^W. ^KARR, ^SIMSCRIPT A ^SIMULATION ^PROGRAMMING ^LANGUAGE,
^PRENTICE-^HALL, ^INC., 1963
.SKIP 1
^HARRY ^KATZAN, ^JR., ^ADVANCED ^PROGRAMMING, ^VAN ^NOSTRAND
^REINHOLD ^COMPANY, 1970
.SKIP 1
^PETER ^WEGNER, ^PROGRAMMING ^LANGUAGES, ^INFORMATION
^STRUCTURES, AND ^MACHINE ^ORGANIZATION, ^MC^GRAW-^HILL
^BOOK ^COMPANY, 1968
.SKIP 1
^ROBERT ^C. ^MEIR, ^WILLIAM ^T. ^NEWELL, AND ^HAROLD
^L. ^PAZER, ^SIMULATION IN ^BUSINESS AND ^ECONOMICS,
^PRENTICE-^HALL, ^INC. 1969
.SKIP 1
^ANALYSIS OF ^DECISIONS ^UNDER ^UNCERTAINTY, ^THE ^PRESIDENT
AND ^FELLOWS OF ^HARVARD ^COLLEGE, 1966
.SKIP 1
^TIMOTHY ^SORRELL, AND ^JAMES ^BOTKIN, ^PROFILE ^USER'S
^MANUAL, ^CORE _& ^CODE, ^INC., 1972
.SKIP 1
^B. ^W. ^LINDGREN, AND ^G. ^W. ^MC^ELRATH, ^INTRODUCTION TO
^PROBABILITY AND ^STATISTICS, ^THE ^MACMILLAN ^COMPANY, 1959
.SKIP 1
^ELWOOD ^S. ^BUFFA, ^MODERN ^PRODUCTION ^MANAGEMENT,
^JOHN ^WILEY _& ^SONS, ^INC., 1965
.SKIP 1
^EUGENE ^L. ^GRANT, ^STATISTICAL ^QUALITY ^CONTROL,
^MC^GRAW-^HILL ^BOOK ^COMPANY, 1964
.SKIP 1
^ELWOOD ^S. ^BUFFA, ^MODELS FOR ^PRODUCTION AND ^OPERATIONS
^MANAGEMENT, ^JOHN ^WILEY _& ^SONS, ^INC., 1963
    bI=wN