BEGIN "FINDHASH"

BOOLEAN HASHSW;
INTEGER I,K,BREAK,BREAKS,EOF,TOP,HASHED,CONFLICTS,MULT,BEST;
INTEGER PREVIOUS,SIZE,SHIFT,BEGINMULT,ENDMULT;
STRING INPSTR,ID;

INTEGER ARRAY HASHES[0:100];
STRING ARRAY RSWD[1:40];

DEFINE CR = "'15&'12";

EXTERNAL PROCEDURE BYE;

STRING PROCEDURE SPACES(REFERENCE STRING REFSTR;INTEGER NUMBER);
BEGIN INTEGER H; STRING SPACES;
        SPACES_NULL; "INIT STRING FOR SPACES."
        IF LENGTH(REFSTR)<NUMBER THEN BEGIN
                FOR H_1 STEP 1 UNTIL NUMBER-LENGTH(REFSTR) DO 
                    SPACES_SPACES&" ";
        END;
RETURN(SPACES);
END;

BOOLEAN PROCEDURE ANSWER;
WHILE TRUE DO BEGIN
        INPSTR_INCHWL;
        IF INPSTR="Y" THEN RETURN(TRUE);
        IF INPSTR="N" THEN RETURN(FALSE);
        OUTSTR("TYPE 'Y' OR 'N': ");
END;

INTEGER PROCEDURE HASH(REFERENCE STRING REFSTR);
BEGIN INTEGER J,HASHVAL;
        HASHVAL_0;
        FOR J_1 STEP 1 UNTIL LENGTH(REFSTR) DO
                HASHVAL_(HASHVAL ROT SHIFT) XOR REFSTR[J FOR 1];
        RETURN(HASHVAL*MULT);
END;

OPEN(1,"DSK",0,1,0,120,BREAK,EOF);
IF EOF THEN BEGIN
        OUTSTR("DSK NOT AVAILABLE?");
        BYE;
END;
OUTSTR("INPUT FILE: "); INPSTR_INCHWL;
LOOKUP(1,INPSTR,EOF);
IF EOF THEN BEGIN
        OUTSTR("CANNOT LOOKUP FILE: "&INPSTR);
        BYE;
END;

BREAKSET(BREAKS_1,'15,"I"); "SET FOR LINE BY LINE MODE."
OUTSTR("PRINT HASH VALUES? "); HASHSW_ANSWER;
OUTSTR("STARTING MULTIPLIER? "); BEGINMULT_CVD(INCHWL);
OUTSTR("END MULTIPLIER? "); ENDMULT_CVD(INCHWL);
OUTSTR("NO. OF ROTATES? "); SHIFT_CVD(INCHWL);

WHILE NOT EOF DO RSWD[TOP_TOP+1]_INPUT(1,BREAKS); TOP_TOP-1;
OUTSTR(CVS(TOP)&" RESERVED WORDS."&CR); PREVIOUS_999;
IF NOT (TOP MOD 2) THEN TOP_TOP+1; "MAKE TOP ODD IF IT ISN'T ALREADY"

FOR I_TOP STEP 1 UNTIL 2*TOP DO BEGIN
   FOR MULT_BEGINMULT STEP 1 UNTIL ENDMULT DO BEGIN
        CONFLICTS_0;
        FOR K_0 STEP 1 UNTIL 100 DO HASHES[K]_0;

        FOR K_1 STEP 1 UNTIL TOP DO BEGIN
                HASHED_HASH(RSWD[K]) MOD I;
                IF HASHES[HASHED]=0 THEN HASHES[HASHED]_TRUE
                ELSE CONFLICTS_CONFLICTS+1;
        END;
        IF PREVIOUS>CONFLICTS THEN BEGIN
                BEST_MULT; PREVIOUS_CONFLICTS; SIZE_I;
        END;
   END;
END;

        OUTSTR(CR&"OPTIMUM TABLE SIZE IS "&CVS(SIZE)&CR);
        OUTSTR("BEST HASH MULTIPLIER IS "&CVS(BEST)&" WITH "
              &CVS(PREVIOUS)&" CONFLICTS"&CR);
        MULT_BEST;
IF HASHSW THEN BEGIN "HASHIT"
        OUTSTR(CR&"IDENT.     INDEX.     HASH (OCTAL)"&CR&CR);
        FOR K_1 STEP 1 UNTIL TOP DO BEGIN
        ID_RSWD[K];
        IF LENGTH(ID)>10 THEN ID_ID[1 FOR 10];
        OUTSTR(ID&SPACES(ID,14)&CVS((HASHED_HASH(RSWD[K])) MOD SIZE)&
        "        "&CVOS(HASHED)&'15);
        END;
OUTSTR(CR);
END "HASHIT";

END "FINDHASH";
