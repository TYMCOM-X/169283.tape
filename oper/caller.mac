TITLE   CALLER
SUBTTL  SUBROUTINES FOR SIMPL-FORTRAN INTERFACE

        EXTERN  FORSE.

DEFINE MUMBLE<COMMENT>

MUMBLE *
        THIS PACKAGE CONSISTS OF SEVERAL PROCEDURES

1.      SIMMER
        THIS PROCEDURE, CALLED FROM SIMPL, WILL INITIALIZE
        SIMPL TO FORTRAN TRANSFER.  IT MUST BE THE FIRST
        THING A SIMPL PROGRAM DOES IF IT IS THE MAIN PROGRAM
        (I.Z. RUNS BEFORE FORTRAN).

2.      FOREST
        THIS SUBROUTINE, CALLED FROM FORTRAN, WILL INITIALIZE
        THE FORTRAN TO SIMPL TRANSFER.  IT MUST BE THE FIRST
        THING A FORTRAN PROGRAM DOES IF IT IS THE MAIN PROGRAM
        (I.E. RUNS BEFORE SIMPL)

        NOTE: EITHER SIMMER OF FOREST IS CALLED, NOT BOTH!!!
        EITHER OF THE TWO INITIALIZES THE TWO WAY TRANSFER,
        BUT EACH IS CALLED DIFFERENTLY.

3.      ISIMPL(RTN,ARG1,ARG2,...,ARGN) (OR OPTIONALLY SIMPL)
        THIS SUBROUTINE, CALLED FROM FORTRAN, CALLS SIMPL
        PROCEDURE NAMED 'RTN' WITH UP TO 13 ARGUMENTS ARG1-ARGN.
        ONE-WORD ARGUMENTS (INTEGER ETC.) RETURN THE VALUE AS
        PARAMETER TO SIMPL. TWO OR MORE WORD ARGUMENTS (STRING,
        DOUBLE PRECISION, ETC.) SEND THE WORD ADDRESS POINTER.

4.      DSIMPL(RTN,ARG1,ARG2,...,ARGN)
        THIS SUBROUTINE, CALLED FROM FORTRAN, CALLS SIMPL 
        PROCEDURE NAMED 'RTN' WITH UP TO 13 ARGUMENTS ARG1-ARGN.
        THIS DIFFERS FROM ISIMPL/SIMPL IN THAT INSTEAD OF GIVING
        ONE WORD PARAMETERS AS VALUES, ALL ARGUMENTS ARE GIVEN
        TO SIMPL AS ADDRESSES WITH DATA TYPES ATTACHED (SEE 6. BELOW)
        THIS HAS THE EFFECT OF A SIMPL PROCEDURE DECLARED WITH ALL
        @'S XYN THE PARAMETER LIST, AND BEING CALLED WITH ALL
        @'S IN THE PARAMETER LIST (SO THE PROCEDURE IN SIMPL MUST
        ASSUME IT GET'S EVERYTHING AS AN ADDRESS POINTER)

5.      IFORTRN(RTN,ARG1,ARG2,...,ARGN) (OR OPTIONALLY FORTRN)
        THIS PROCEDURE, CALLED FROM SIMPL, CALLS FORTRAN
        SUBROUTINE NAMED 'RTN' WITH UP TO 13 ARGUMENTS ARG1-ARGN.

6.      DFORTRN(RTN,ARG1,ARG2,...,ARGN)
        THIS PROCEDURE, CALLED FROM SIMPL, GIVES FORTRAN SUBROUTINES
        THE ACTUAL ARGUMENTS TO THE CALL AS ARGUMENT POINTERS INSTEAD
        OF VALUES.  THE CALL SHOULD BE SET UP SUCH THAT ALL ARGUMENTS
        POINT TO THE LOCATIONS FORTRAN EXPECTS STUFF TO BE AND THE
        LOCATIONS FORTRAN EXPECTS TO PUT THINGS (I.E., THE ARGUMENTS
        ARE POINTERS TO THE ACTUAL DATA LOCATIONS).  THE USER MAY
        SPECIFY AN ACCUMULATOR FIELD (WHICH IS THE FORTRAN DATA TYPE)
        AND AN ADDRESS FIELD FOR THIS.  FORMAT IS:

        AC,,ADDR
        AC::=0 IF INTEGER, 1 UNUSED, 2 IF REAL, 3 IF LOGICAL, 4 IF
           OCTAL, 5 IF HOLLERITH, 6 IF DOUBLE PRECISION, 7 IF COMPLEX
        ADDR::=ADDRESS WHERE THE DATA IS BEING KEPT AT

THE WAY THE STACK WORKS:

THIS ROUTINE HAS IT'S OWN STACK INITIALIZED BY STEP 1 OT STEP 2 ABOVE.
WHEN A SIMPL PROCEDURE IS CALLED BY FOOTRAN, THE FOLLOWING IS STORED
INTO THE STACK:

        WORD N+1: FORTRAN REGISTER 17 TO BE SAVED FOR RETURN
        WORD N+2: FORTRAN REGISTER 16 TO BE SAVED FOR RETURN

AND A BRANCH TO THE DESIRED ROUTINE IS MADE AFTER THE AC'S ARE
PROPERLY SET WITH ARGUMENTS (THEY ARE ALL POINTERS, BY THE
WAY, SO THE SIMP PROCEDURE SHOULD BE DEFINED AS IF IT WERE CALLED
WITH AN @ AT THE BEGINNING OF EACH ARGUEMENT)

WHEN A FORTRAN SUBROUTINE IS CALLED BY SIMPL, THE FOLLOWING IS STORED
INTO THE STACK:

        WORD N+1-N+20: SIMPL REGISTERS 1-17 USED AS ARGUMENTS, ETC.
                (PRESENT IN IFORTRN/FORTRN CALL ONLY)
        WORD N+21: A JSA 16,N+1 TO CALL FOOTRAN
        WORD N+22-N+41: JUMP 1,(.-17) FOR FOOTRAN ARGUMENTS
                (IN DFORTRN CALL THESE ARE THE USER ARGUMENTS)
        WORD N+42: A JRST TO FORET
        WORD N+43: POINTS TO PDL WHERE REG. 17 IS STORED
        WORD N+44: POINTS TO THE PDL BEFORE THIS MESS WAS PUSHED

THUS, THIS PACKAGE IS RE-ENTRANT
*

;******* CONSTANTS

OPDEF RESET. [15B8]                     ;FOOTRAN RESET. UUO
JUMP.=320                               ;JUMP INSTR. CODE

DEFINE %PDLS<^D500>

R0=0
R1=1
R2=2
R3=3
R4=4
R5=5
R6=6
R7=7
R10=10
R11=11
R12=12
R13=13
R14=14
R15=15
R16=16
R17=17


DEFINE X(A)<IRP A<JUMP 1,%ARGS+'A>>

%CURCON:BLOCK   1                       ;-1 IF DDSIMPL ELSE 0
SAVR17: BLOCK   1                       ;R17 SAVE FROM CALL TO FOREST
LASR17: BLOCK   1
TMP1:   BLOCK   1
TMP2:   BLOCK   1
GOADR:  BLOCK   1
%PDL:   BLOCK   1                       ;PDL POINTER
%PDLL:  BLOCK   %PDLS                   ;OUR VERY OWN PDL

;******* SUBROUTINE SIMMER
;******* INITIALIZE THINGS

        ENTRY   SIMMER

SIMMER: Z                               ;HERE FOR JSA 16,SIMMER
        SETZB   R0,R1                   ;NO REGISTER RETURNS
        MOVE    R2,[IOWD %PDLS,%PDLL]   ;INIT PDL
        MOVEM   R2,%PDL                 ;SAVE PDL POINTER
        JRA     R16,0(R16)              ;RETURN

;******* PROCEDURE FOREST
;******* INITIALIZE THINGS

        ENTRY   FOREST

FOREST: SETZ    R1,                     ;NO ANSWER RETURNED
        MOVEM   R17,SAVR17              ;SAVE R17
        MOVE    R2,[IOWD %PDLS,%PDLL]   ;INIT PDL
        MOVEM   R2,%PDL                 ;SAVE PDL POINTER
        RESET.                          ;RESET FOOTRAN I/O
        MOVEM   R17,LASR17              ;SAVE FOOTRAN R17
        JRST    @SAVR17                 ;RETURN


;******* PROCEDURE: DFORTRN
;******* FROM SIMPL, CALLS A FOOTRAN SUBROUTINE
MUMBLE *
        THIS PROCEDURE IS SAME AS FORTRN/IFORTRN (SEE BELOW) EXCEPT
        THAT IT USES THE AC'S TO POINT TO THE ACTUAL ARGUMENTS
*

        ENTRY   DFORTRN

DFORTR: MOVE    R0,%PDL
        MOVEM   R17,TMP1
        JUMPE   R0,[OUTSTR [ASCIZ /? RUNTIME ERROR IN DFORTR PROCEDURE
? PROCEDURE FOREST HAS NOT BEEN CALLED YET
/]
                EXIT]
        MOVEM   R0,TMP2
        MOVSI   R17,(JSA R16,)
        ADD     R17,R1
        PUSH    R0,R17
        HRRZM   R0,GOADR
DEFINE Y(A),<IRP A,<    TLZ R'A,777000
        TLO R'A,320000
        PUSH R0,R'A>>
        Y<2,3,4,5,6,7,10,11,12,13,14,15,16>
        PUSH    R0,[JRST FORET]
        PUSH    R0,TMP1
        PUSH    R0,TMP2
        MOVEM   R0,%PDL
        MOVE    R17,LASR17
        JRST    @GOADR

;******* PROCEDURE: FORTRN
;******* FROM SIMPL, CALLS A FOOTRAN SUBROUTINE
MUMBLE *

        THIS PROCEDURE GIVES THE FOOTRAN PROGRAM A CHANGE TO
        GRAB AS MANY ARGUMENTS AS IT WANTS TO.
        REGISTERS 2-16 ARE STORED ON THE PDL, A JRA, AND THEN 16
        JUMP 1, POINTING TO THE PDL ARE STORED ON THE PDL.
*

        ENTRY   FORTRN,IFORTRN

IFORTRN:                                        ;WHERE TO OPTIONALLY GO
FORTRN: MOVE    R0,%PDL
        JUMPE   R0,[OUTSTR [ASCIZ /? RUNTIME ERROR IN FORTRN PROCEDURE
? PROCEDURE FOREST HAS NOT BEEN CALLED YET
/]
                EXIT]
        MOVEM   R0,TMP2
DEFINE Y(A)<IRP A<      PUSH    R0,R'A>>
        Y<2,3,4,5,6,7,10,11,12,13,14,15,16,17>
        MOVEM   R0,TMP1
        MOVSI   R2,(JSA R16,)
        ADD     R2,R1
        PUSH    R0,R2
        HRRZM   R0,GOADR                ;SAVE LOC WHERE TO BRANCH TO
        HRRZM   R0,R2
        HRLI    R2,(JUMP R1,)
        SUBI    R2,16
REPEAT 15,<PUSH R0,R2
        ADDI R2,1>
        PUSH    R0,[JRST FORET]
        PUSH    R0,TMP1
        PUSH    R0,TMP2
        MOVEM   R0,%PDL                 ;SAVE THE PDL
        MOVE    R17,LASR17
        JRST    @GOADR                  ;JUMP TO IT

FORET:  MOVEM   R17,LASR17              ;SAVE R17
        MOVE    R0,%PDL
        POP     R0,%PDL                 ;INITIAL PDL STATE
        POP     R0,R0                   ;BACK TO WHERE R17 WAS PUT
        POP     R0,R17                  ;GET R17 BACK
        JRST    @17                     ;RETURN


;******* SUBROUTINE DSIMPL
;******* FROM FOOTRAN, CALLS A SIMPL SUBROUTINE
MUMBLE *

        THIS SUBROUTINE IS SAME AS SIMPL/ISIMPL EXCEPT THAT
        IT GIVES ADDRESSES ALWAYS FOR ARGUMENTS
*

        ENTRY   DSIMPL

DSIMPL: Z
        SETOM   %CURCON                 ;-1 IF DSIMPL
        JRST    SIMPL9

;******* SUBROUTINE SIMPL
;******* FROM FOOTRAN, CALLS A SIMPL SUBROUTINE
MUMBLE *

        THIS SUBROUTINE IS CALLED BY A FOOTRAN JSA 16,SIMPL.
        IT SAVES AC 16 AND AC 17, DETERMINS HOW MANY ARGUMENTS HAVE
        BEEN ISSUED IN THE FOOTRAN CALL (BY LOOKING AT CALL+1) AND
        PUTS THEM INTO AC'S 1 THRU 17.  ALSO, R16 AND R17 ARE STORED
        ONTO THE STACK
*

        ENTRY   SIMPL,ISIMPL

ISIMPL:                                 ;OPTIONAL ENTRY AREA
SIMPL:  Z                               ;JSA 16, GOES HERE
        SETZM   %CURCON                 ;-1 IF DSIMPL
SIMPL9: MOVEM   R17,LASR17              ;SAVE LAST R17 SEEN
        MOVE    R0,%PDL
        JUMPE   R0,[OUTSTR [ASCIZ /? RUNTIME ERROR IN SIMPL ROUTINE
? SUBROUTINE SIMMER HAS NOT BEEN CALLED YET
/]
                EXIT]
        PUSH    R0,R16                  ;SAVE R16
        PUSH    R0,R17                  ;SAVE R17
        MOVEM   R0,%PDL                 ;SAVE THE PDL AGAIN
; NOW WE MUST LOOK AT CALL+1 AND SO ON AND DETERMINE THE NUMBER
; OF ARGUMENTS
; R15 IS POINTER TO CURRENT AC ARGUMENT
; R16 IS POINTER TO CURRENT ARGUMENT
; R17 IS POINTER TO CURRENT AC
        MOVE    R0,0(R16)               ;FIRST ARGUMENT IS CALL ADDRESS
        MOVEM   R0,TMP1                 ;SAVE IT
        HLL     R16,[POINT 9,0,8]
        HRR     R15,R16
        HLL     R15,[POINT 4,0,12]
        MOVEI   R17,1
; LOOP-DE-LOOP
SIMPL0: ADDI    R16,1                   ;INCREMENT BYTE POINTER
        LDB     R0,R16                  ;GET THE CALL ARGUMENT
        CAIE    R0,JUMP.                ;IS IT A JUMP?
        JRST    SIMPL1                  ;NO - ALL DONE
        ADDI    R15,1
        LDB     R0,R15
        SKIPE   %CURCON                 ;SKIP IF SIMPL/ISIMPL
        JRST    SIMPL8
        CAIG    R0,^D4                  ;IN FOOTRAN 0-4 ARE 1 WORD
        JRST    [MOVE R0,@0(R16)
                JRST .+2]
SIMPL8: MOVE    R0,0(R16)               ;>1 WORD, GET ADDRESS
        MOVEM   R0,0(R17)               ;STORE THE ARGUMENT
        CAIE    R17,R15                 ;TOO MANY ARGUMENTS?
        AOJA    R17,SIMPL0              ;NO - PROCEED
; TOO MANY ARGUMENTS
        OUTSTR  [ASCIZ /? RUNTIME ERROR IN SIMPL SUBROUTINE
? MORE THAN 14 OCTAL ARGUMENTS HAVE BEEN GIVEN IN A CALL
/]
        EXIT


; ALL ARGUMENTS PASS -- JUMP AS WE WANT
SIMPL1: JSP     R17,@TMP1               ;GO TO SIMPLE PROCEDURE
        MOVE    R0,%PDL
        POP     R0,R17
        POP     R0,R16                  ;RESTORE FOOTRAN R17 AND R16
        MOVEM   R0,%PDL
        JRA     R16,(R16)               ;RETURN

        END
  