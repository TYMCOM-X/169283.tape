.skip 1
B.5   Group identifiers
.skip 1
     GROUP identifier  display list
.skip 1
enables the specified display list to be referred to in a
subsequent debugging command by the list element
#identifier.  The identifier may be any alphanumeric
string; if greater than 10 characters in length, only
the first 10 are retained .
.paragraph
The context for the display list is determined when the
GROUP command is given and will neither affect nor be
affected by any other context specifications made sub-
sequently.  Display modes, however, will be affected
just as if the list were entered at that point.  For
example, if H and T are mode identifiers,
.skip 1
     (context is main program)
     GROUP PVAR A,I@515/H,PTR(5)!3
     DISPLAY /T,TX(1)!50@100,NAM,#PVAR
     DEBUG 900
     DISPLAY #PVAR
.skip 1
     The context for A and PTR(5) to PTR(8) is always the
main program.  Their display mode in the first DISPLAY
command is T, because of the list element /T, while the
last command above uses their current default modes.
.paragraph
The group identifier always references the current group
contents, so that
.skip 1
     GROUP 1 A
     GROUP 2 B,#1
     GROUP 1 C
     DISPLAY #2
.skip 1
displays B and A.
.skip 1
     Note that GROUP n #n, display list adds the specified
display list to the current contents of group and GROUP n
clears group n.
.skip 1
     LIST GROUP [identifier]
.skip 1
lists the current contents of the specified group (or of
all non-empty groups, if the identifier is omitted).
.skip 1
B.6   Breakpoints
.skip 1
     BREAK statement address list [display list]
.skip 1
sets breakpoints at the specified statements.  The optional
display list has the same syntax as that of the DISPLAY
command (described above) unless indicated otherwise in the
.paragraph
Unless indicated otherwise in the display list, the context
address for the display variables is the first of the spec-
ified statement addresses.
.paragraph
When a breakpoint is reached, the message BREAK AT statement
location is printed, and the display specified for that break-
point is performed (if any).
.paragraph
If AFTER precedes the statement address list, the break 
occurs after rather than before execution of the specified
statement, and the message printed is BREAK AFTER statement
location.  For example,
.skip 1
 10  IF  A#0  THEN  DOTHIS  ELSE  DOTHAT
.skip 1
   1.             2.      3.    4.      5. 6.
.skip 1
These breakpoints would be set as follows:
.skip 1
1.  BREAK  10
2.  BREAK  10*1
3.  BREAK  AFTER  10*1   (after execution of DOTHIS)
4.  BREAK  10*2
5.  BREAK  AFTER  10*2   (after execution of DOTHAT)
6.  BREAK  AFTER  10     (after execution of the entire
                          IF statement)
.skip 1
     If DOTHIS and DOTHAT (procedure calls) return, 
BREAK  AFTER  10 is equivalent to BREAK  10+1.
.skip 1
     BREAK display list
.skip 1
causes a break to occur whenever the value of any of the
specified variables changes; the statement location and
the value are printed as described above (and the mod-
ified variable identifier).
.paragraph
At any break in execution, the current line (.) becomes th
the line containing the statement identified in the break
message.
.skip 1
     LIST BREAK statement address list
.skip 1
lists the statement locations at or after which breakpoints
are currently set among the specified statements.
.skip 1
     LIST BREAK
.skip 1
lists the current break state, by doing a LIST BREAK ALL
for all currently loaded files and identifying any other
type of break currently in effect (such as a BREAK on a
variable modification).
.paragraph
Any of the above types of breakpoints can be removed by
typing NO before the command which would set that break-
point (omitting the optional display list).  That is,
.skip 1
     NO  BREAK  statement address list
     NO BREAK  AFTER  statement address list
     NO  BREAK  display list
.skip 1
mode identifiers are not necessary in a NO BREAK display
list, but context address designations may be needed to
distinguish fron the current context.
.skip 1
     The command
.skip 1
     NO  BREAK
.skip 1
removes all types of breakpoints currently in effect (in
all currently loaded files).
.paragraph
The implementation of breaking on a specified condition
depends on what sore of expression analyzer will be 
available at debug time, if any, a decision yet to be made 
pending investigation of the compilers.
.skip 1
     BREAK IF logical expression
.skip 1
causes a break to occur when the logical expression is
true.  When a conditional breakpoint is set, a number
is assigned to it and printed.
.skip 1
     LIST  BREAK  IF [n]
     NO  BREAK  IF [n]
.skip 1
refer to the nth conditional breakpoint; omission of n
defaults to all such breakpoints.
.skip 1
B.7   Statement and variable trace
.skip 1
     TRACE statement address list [display list]
.skip 1
specifies that whenever any of the statements addressed
is reached in the course of subsequent program execution,
the statement location be printed, and the specified dis-
play be performed (if any).  If a range of statements is
specified, the printout is limited to the locations of
the statements in that range which are transferred to
(by an means other than falling through from the preced-
ing statement) or which themselves transfer program con-
trol.
.paragraph
If a breakpoint is set at any of the specified statements,
the break will still occur, and both of the displays will
be performed.
.skip 1
     TRACE display list
.skip 1
specifies that whenever the value of any of the specified
variables changes, the statement location and the value be
printed as described above (and the modified variable
identified).
.skip 1
     The commands
.skip 1
     LIST  TRACE  statement address list
     LIST  TRACE
     NO  TRACE  statement address list
     NO  TRACE  display list
     NO  TRACE
.skip 1
are analogous to the corresponding BREAK commands, pre-
viously described.
.skip 1
B.8   Frequency counters
.skip 1
     COUNT statement address list
.skip 1
initializes frequency counters for the specified state-
ments to zero, and activates the counters so that when-
ever any of the statements is reached in the course of
subsequent program execution, its counter is incremented
by 1.
.skip 1
     LIST COUNT [statement address list]
.skip 1
lists the current frequency counts for any of the spec-
ified statements having an activated counter, and
.skip 1
     NO COUNT [statement address list]
.skip 1
deactivates the counters.  In either case, if the
statement address list is omitted, the command refers to
all currently loaded files.
.skip 1
     DUMP COUNT [statement address list] TO file identifier
.skip 1
provides the same information as LIST COUNT [statement add-
ress list], but writes it on the specified file in a
binary format for easier, faster reading by another pro-
gram.
.skip 1
B.9   Program execution
.skip 1
     GO [statement address]
.skip 1
transfers control to the specified statement.  If the 
statement address is omitted, control transfers to the first
statement.
.skip 1
     CONTINUE [count]
.skip 1
continues execution after a breakpoint is encountered
or after program interruption (the meaning of which de-
pends on the language being used, such as the SFORTRAN
PAUSE statement).  When a breakpoint is encountered, 
CONTINUE n causes that breakpoint to remain invisible
the next n times it is encountered.
.skip 1
     NEXT [count]
.skip 1
continues execution and breaks after the specified number
of statements has been executed; the count is 1 if omitted.
Since the debugger recognizes only executable statements
and subroutine heads, only these are counted.  Note: BREAK
AFTER statement address is essentially a BREAK state-
ment address followed by a NEXT.
.paragraph
Whenever program execution is interrupted and the
program is continuable, the command prompt will be
rather than .  Whenever direct statements may be executed,
the prompt is preceded by an @.
.skip 1
B.10  Information commands
.paragraph
The LIST command can be followed by any of a number
of debugging information identifiers, which cause
it to respond with the requested information.  These
identifiers include some of the debugging commands 
themselves (DEBUG, GROUP, BREAK, TRACE, COUNT) as well
as language-dependent requests (such as FILES and SENSE
SWITCH for FORTRAN).  The SIMPL debugger could be
extended to recognize IOCS file (and other) information.
.skip 1
     LIST OPTIONS
.skip 1
lists all the currently available LIST options.
.skip 1
B.11  Machine code examination
.paragraph
The implementation of allowing access to machine code
depends on whether the response to this proposal indicates
a need for it.  How often will SIMPL users need this
feature?  Will it be infrequent enough a need that
DDT can be used at that point?  Should we simply allow
access to DDT via CCS?  Should the feature be available
to FORTRAN users?
.skip 1
     EXAMINE [statement address list]
.skip 1
lists the machine instructions and corresponding add-
resses generated for the specified statements, and puts
the debugger into a special mode in which all statement
address input and output becomes machine address I/O (all
the usual debugging commands can be given).
.paragraph
When the statement address list is omitted, the EXAMINE
command simply puts the debugger into this mode.
.paragraph
During EXAMINE mode, statement address lists must be
replaced by machine address lists (optional integer
displacement, colon to specify ranges, comma to
separate list items).  NEXT refers to machine in-
structions rather than statements.
.skip 1
     NO EXAMINE
.skip 1
returns the debugger to normal mode.  If this command is
given after execution has been interrupted in mid-state-
ment, NEXT starts from the next statement.
 