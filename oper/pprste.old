MODULE PRSTE(DOLLAR,ENTRIES=($SPSTE,$SPSTB),FSAVE,TIMING,
                TIMER=EXTERNAL(SIX12))=BEGIN
%VERSION H1     %
%LAST UPDATE, MAR. 13,1975, BY V. E. VAN VLEAR  %

REQUIRE ADEFS.BLI[7,107355];
REQUIRE SDEFS.BLI[7,107355];
REQUIRE UDEFS.BLI[7,107355];
REQUIRE FPDEFS.BLI[7,107355];

UNDECLARE $SPSTE,$SPSTB;

%FIELD DESCRIPTIONS     %
%TYPE NO.   2ND FIELD    3RD FIELD OR LIST      %
%1      ASCIZ FOR OUT.    SYMBOL        %
%2      "  "              SYMBOL     LIST OF ASCIZ'S FOR OUT.   %
%3 UP   ASCIZ FOR OUT.    SYMBOL (TYPE IN SIX BIT WHERE TYPE NO.=NO. CH.)       %
BIND F1=PLIT(   2,PLIT 'TYPE: ',S$TYPE,
   PLIT 'NAME',
   PLIT 'RW',
   PLIT 'STLIT',
   PLIT 'SWLIT',
   PLIT 'DWLIT',
   PLIT 'FIELD',
   PLIT 'RELDEF',
   PLIT 'SRC',
   PLIT 'ITEM',
   PLIT 'FLDINC',
   PLIT 'RELINC',
   PLIT 'SRCINC',
   PLIT 'PRC',
   PLIT 'LABINC',
   PLIT 'LIE',
   PLIT 'RPTCND',
   PLIT 'RPTCNDL',
   PLIT 'FORMAT',
   PLIT 'SYSLIT',
   PLIT 'SYSADCON',
   PLIT 'SCHEMA',
   PLIT 'REPORT',
   PLIT 'REPTINC',
   PLIT 'LABEL',
   PLIT 'DTIE',
   PLIT 'VCE',
   PLIT 'DTLIT');

BIND F2=PLIT(   1,PLIT 'LENGTH: ',S$LENGTH);
BIND F3=PLIT(   3,PLIT 'STPX: ',S$STPX);
BIND F4=PLIT(   3,PLIT 'STP1: ',S$STP1);
BIND F5=PLIT(   3,PLIT 'HCP: ',S$HCP);
BIND F6=PLIT(   3,PLIT 'DSTP: ',S$DSTP);
BIND F7=PLIT(   3,PLIT 'IDSTP: ',S$IDSTP);
BIND F8=PLIT(   3,PLIT 'LITINCP: ',S$LITINCP);
BIND F9=PLIT(   3,PLIT 'CISTP: ',S$CISTP);
BIND F10=PLIT(  2,PLIT 'DDTYPE: ',S$DDTYPE,
   PLIT 'SINGD',
   PLIT 'DBLD',
   PLIT '*INVALID*',
   PLIT 'SLIT',
   PLIT 'SYSL',
   PLIT 'SYSA',
   PLIT 'DLIT');
BIND F11=PLIT(  1,PLIT 'NCHAR: ',S$NCHAR);
BIND F12=PLIT(  3,PLIT 'NID: ',S$NID);
BIND F13=PLIT(  3,PLIT 'NDP: ',S$NDP);
BIND F14=PLIT(  1,PLIT 'TOKEN: ',S$TOKEN);
BIND F15=PLIT(  2,PLIT 'SCHF: ',S$SCHF,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F16=PLIT(  3,PLIT 'DFLT: ',S$DFLT);
BIND F17=PLIT(  3,PLIT 'RSFSN: ',S$RSFSN);
BIND F18=PLIT(  2,PLIT 'DTYP: ',S$DTYP,
   PLIT 'SINGD',
   PLIT 'DBLD',
   PLIT 'TRID',
   PLIT 'SLIT',
   PLIT 'OTHER',
   PLIT '*INVALID*',
   PLIT 'DLIT');
BIND F19=PLIT(  1,PLIT 'LCHAR: ',S$LCHAR);
BIND F20=PLIT(  1,PLIT 'INTD: ',S$INTD);
BIND F21=PLIT(  1,PLIT 'DECD: ',S$DECD);
BIND F22=PLIT(  3,PLIT 'FP: ',S$FP);
BIND F25=PLIT(  2,PLIT 'FTYPE: ',S$FTYPE,
   PLIT '*UNDEFINED*',
   PLIT 'SKIM');
BIND F26=PLIT(  1,PLIT 'KEYL: ',S$KEYL);
BIND F27=PLIT(  3,PLIT 'DB: ',S$DB);
BIND F28=PLIT(  3,PLIT 'ISTP: ',S$ISTP);
BIND F29=PLIT(  2,PLIT 'DBT: ',S$DBT,
   PLIT 'NONE',
   PLIT 'REG',
   PLIT 'LC',
   PLIT 'BSTP');
BIND F30=PLIT(  3,PLIT 'DAL: ',S$DAL);
BIND F31=PLIT(  3,PLIT 'DSO: ',S$DSO);
BIND F32=PLIT(  3,PLIT 'DFO: ',S$DFO);
BIND F33=PLIT(  3,PLIT 'VERFSTP: ',S$VERFSTP);
BIND F34=PLIT(  1,PLIT 'LWORD: ',S$LWORD);
BIND F35=PLIT(  3,PLIT 'PRECL: ',S$PRECL);
BIND F36=PLIT(  1,PLIT 'KEYN: ',S$KEYN);
BIND F37=PLIT(  1,PLIT 'FIELDN: ',S$FIELDN);
BIND F38=PLIT(  1,PLIT 'LRECL: ',S$LRECL);
BIND F39=PLIT(  2,PLIT 'SRCTYP: ',S$SRCTYP,
   PLIT 'FIXED',
   PLIT 'FREE');
BIND F40=PLIT(  2,PLIT 'VERFLG: ',S$VERFLG,
   PLIT 'NO VERIFY',
   PLIT 'VERIFY');
BIND F41=PLIT(  3,PLIT 'SDFSTP: ',S$SDFSTP);
BIND F42=PLIT(  3,PLIT 'TERMSTP: ',S$TERMSTP);
BIND F43=PLIT(  3,PLIT 'SEPSTP: ',S$SEPSTP);
BIND F44=PLIT(  3,PLIT 'INFSTP: ',S$INFSTP);
BIND F46=PLIT(  2,PLIT 'KDFLG: ',S$KDFLG,
   PLIT '*INVALID*',
   PLIT 'KEYF',
   PLIT 'DATAF',
   PLIT 'SRCF');
BIND F47=PLIT(  3,PLIT 'RSDSTP: ',S$RSDSTP);
BIND F48=PLIT(  3,PLIT 'FDSTP: ',S$FDSTP);
BIND F49=PLIT(  2,PLIT 'TPKI: ',S$TPKI,
   PLIT 'NOT STD',
   PLIT 'STDPK');
BIND F50=PLIT(  1,PLIT 'PKI: ',S$PKI);
BIND F51=PLIT(  2,PLIT 'DDBT: ',S$DDBT,
   PLIT 'NONE',
   PLIT 'REG',
   PLIT 'LC',
   PLIT 'BSTP');
BIND F52=PLIT(  3,PLIT 'DDAL: ',S$DDAL);
BIND F53=PLIT(  3,PLIT 'DDSO: ',S$DDSO);
BIND F54=PLIT(  3,PLIT 'DDFO: ',S$DDFO);
BIND F55=PLIT(  3,PLIT 'DDB: ',S$DDB);
BIND F56=PLIT(  2,PLIT 'SORTORD: ',S$SORTORD,
   PLIT 'NOT ASC',
   PLIT 'ASCEND');
BIND F57=PLIT(  2,PLIT 'AFLG: ',S$AFLG,
   PLIT 'NOT ACTIVE',
   PLIT 'ACTIVE');
BIND F58=PLIT(  3,PLIT 'SORTC: ',S$SORTC);
BIND F59=PLIT(  3,PLIT 'FISTP: ',S$FISTP);
BIND F60=PLIT(  3,PLIT 'CGC: ',S$CGC);
BIND F61=PLIT(  3,PLIT 'RNSTP: ',S$RNSTP);
BIND F62=PLIT(  3,PLIT 'VERFSTP: ',S$VERFSTP);
BIND F63=PLIT(  2,PLIT 'RCBTY: ',S$RCBTY,
   PLIT '*INVALID*',
   PLIT 'FULLKY',
   PLIT 'LEFTSB');
BIND F64=PLIT(  2,PLIT 'REALIZED: ',S$REALIZED,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F65=PLIT(  3,PLIT 'RICSTP: ',S$RICSTP);
BIND F66=PLIT(  3,PLIT 'RESTP: ',S$RESTP);
BIND F67=PLIT(  2,PLIT 'CHGREF: ',S$CHGREF,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F68=PLIT(  3,PLIT 'SDSTP: ',S$SDSTP);
BIND F69=PLIT(  1,PLIT 'NPARA: ',S$NPARA);
BIND F71=PLIT(  2,PLIT 'BRCHF: ',S$BRCHF,
   PLIT 'NOT LEGAL',
   PLIT 'LEGAL');
BIND F72=PLIT(  3,PLIT 'ENDSTP: ',S$ENDSTP);
BIND F73=PLIT(  2,PLIT 'RUSED: ',S$RUSED,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F74=PLIT(  2,PLIT 'APND: ',S$APND,
   PLIT 'NO APPEND',
   PLIT 'APPEND');
BIND F75=PLIT(  3,PLIT 'PLNL: ',S$PLNL);
BIND F76=PLIT(  3,PLIT 'RPFSTP: ',S$RPFSTP);
BIND F77=PLIT(  3,PLIT 'PRPHD: ',S$PRPHD);
BIND F78=PLIT(  3,PLIT 'PRPFT: ',S$PRPFT);
BIND F79=PLIT(  3,PLIT 'PGPHD: ',S$PGPHD);
BIND F80=PLIT(  3,PLIT 'PGPFT: ',S$PGPFT);
BIND F81=PLIT(  3,PLIT 'PPGHD: ',S$PPGHD);
BIND F82=PLIT(  3,PLIT 'PPGFT: ',S$PPGFT);
BIND F83=PLIT(  3,PLIT 'RSISTP: ',S$RSISTP);
BIND F84=PLIT(  3,PLIT 'RNMSTP: ',S$RNMSTP);
BIND F85=PLIT(  3,PLIT 'RPTCND: ',S$RPTCND);
BIND F86=PLIT(  3,PLIT 'PRPINC: ',S$PRPINC);
BIND F87=PLIT(  3,PLIT 'PFTGINC: ',S$PFTGINC);
BIND F88=PLIT(  3,PLIT 'PHDG: ',S$PHDG);
BIND F89=PLIT(  3,PLIT 'PFTGINIT: ',S$PFTGINIT);
BIND F90=PLIT(  3,PLIT 'PFTGDTL: ',S$PFTGDTL);
BIND F91=PLIT(  3,PLIT 'PFMT: ',S$PFMT);
BIND F92=PLIT(  1,PLIT 'CNSTL: ',S$CNSTL);
BIND F93=PLIT(  2,PLIT 'NOCF: ',S$NOCF,
   PLIT 'NO',
   PLIT 'YES');
BIND F94=PLIT(  1,PLIT 'RSBO: ',S$RSBO);
BIND F95=PLIT(  3,PLIT 'SEMP: ',S$SEMP);
BIND F96=PLIT(  3,PLIT 'RCSTMT: ',S$RCSTMT);
BIND F97=PLIT(  3,PLIT 'PINPL: ',S$PINPL);
BIND F98=PLIT(  2,PLIT 'IOMODE: ',S$IOMODE,
   PLIT '*INVALID*',
   PLIT 'INPUT',
   PLIT 'UPDATE',
   PLIT 'OUTPUT',
   PLIT 'SORTED',
   PLIT '*INVALID*');
BIND F99=PLIT(  3,PLIT 'LB: ',S$LB);
BIND F100=PLIT( 1,PLIT 'LFO: ',S$LFO);
BIND F101=PLIT( 1,PLIT 'AVB: ',S$AVB);
BIND F102=PLIT( 1,PLIT 'AVFO: ',S$AVFO);
BIND F103=PLIT( 2,PLIT 'ENFL: ',S$ENFL,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F104=PLIT( 3,PLIT 'RPDSTP: ',S$RPDSTP);
BIND F105=PLIT( 1,PLIT 'USECNT: ',S$USECNT);
BIND F106=PLIT( 1,PLIT 'IESTP: ',S$IESTP);
BIND F107=PLIT( 1,PLIT 'RNUM: ',S$RNUM);
BIND F108=PLIT( 1,PLIT 'SORTN: ',S$SORTN);
BIND F110=PLIT( 3,PLIT 'RHL: ',S$RHL);
BIND F111=PLIT( 3,PLIT 'RFINIL: ',S$RFINIL);
BIND F112=PLIT( 3,PLIT 'RFDTLL: ',S$RFDTLL);
BIND F113=PLIT( 3,PLIT 'RFINCL: ',S$RFINCL);
BIND F114=PLIT( 3,PLIT 'RCGPI: ',S$RCGPI);
BIND F115=PLIT( 3,PLIT 'PHL: ',S$PHL);
BIND F116=PLIT( 3,PLIT 'PFL: ',S$PFL);
BIND F117=PLIT( 2,PLIT 'VRF: ',S$VRF,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F118=PLIT( 3,PLIT 'VCSTP: ',S$VCSTP);
BIND F119=PLIT( 2,PLIT 'RSW: ',S$RSW,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F120=PLIT( 2,PLIT 'VALCHFG: ',S$VALCHGF,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F121=PLIT( 1,PLIT 'DTIP: ',S$DTIP);
BIND F122=PLIT( 3,PLIT 'VCISTP: ',S$VCISTP);
BIND F123=PLIT( 3,PLIT 'SORTCPRED: ',S$SORTCPRED);
BIND F124=PLIT( 3,PLIT 'PHDGDTL: ',S$PHDGDTL);
BIND F125=PLIT( 3,PLIT 'FLDINCP: ',S$FLDINCP);
BIND F126=PLIT( 3,PLIT 'RCGPRED: ',S$RCGPRED);
BIND F127=PLIT( 2,PLIT 'TTYIN: ',S$TTYIN,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F128=PLIT( 2,PLIT 'TTYOUT: ',S$TTYOUT,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F129=PLIT( 3,PLIT 'PBTMG: ',S$PBTMG);
BIND F130=PLIT( 3,PLIT 'PDVSTP: ',S$PDVSTP);
BIND F131=PLIT( 3,PLIT 'PFTSZ: ',S$PFTSZ);
BIND F132=PLIT( 3,PLIT 'PHDSZ: ',S$PHDSZ);
BIND F133=PLIT( 3,PLIT 'PLNNM: ',S$PLNNM);
BIND F134=PLIT( 3,PLIT 'PPGNM: ',S$PPGNM);
BIND F135=PLIT( 3,PLIT 'PPGSZ: ',S$PPGSZ);
BIND F136=PLIT( 3,PLIT 'PTPMG: ',S$PTPMG);
BIND F137=PLIT( 3,PLIT 'PTPSTP: ',S$PTPSTP);
BIND F138=PLIT( 3,PLIT 'DTP: ',S$DTP);
BIND F139=PLIT( 2,PLIT 'FEFLG: ',S$FEFLG,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F140=PLIT( 2,PLIT 'WHEREFLG: ',S$WHEREFLG,
   PLIT 'FALSE',
   PLIT 'TRUE');
BIND F141=PLIT( 6,PLIT 'RFNAM: ',S$RFNAM);

%ENTRY LISTS - LISTS OF FIELDS FOR EACH ENTRY CLASS     %
%200 NUMBERS ARE SPECIAL CASE FUNCTIONS %
%LIST MUST END WITH 0   %

BIND L2=PLIT(F119,F5,F6,F7,F8,206,F9,F103,F121,F14,F10,201,0);
BIND L3=PLIT(F15,F16,F17,F33,F34,206,F117,F118,205,207,209,0);
BIND L4=PLIT(F15,F25,F26,F28,202,F35,F36,F37,F38,206,F141,0);
BIND L5=PLIT(F15,F39,F40,F41,F28,206,F42,F43,F44,F75,206,F127,F97,0);
BIND L6=PLIT(F46,F93,F17,206,F28,F48,F49,F50,F94,200,0);
BIND L7=PLIT(F56,F57,F16,F7,202,205,F22,F58,F59,F94,200,206,
   F60,F61,F62,F64,206,F46,F106,F123,209,0);
BIND L8=PLIT(F63,F64,F65,F57,F7,202,F66,F67,F98,F58,F59,
   206,F107,F108,F139,F140,0);
BIND L9=PLIT(F68,F7,202,F59,206,F44,F107,F41,F65,206,F127,0);
BIND L10=PLIT(F15,202,204,0);
BIND L11=PLIT(F15,F71,F72,F95,202,0);
BIND L12=PLIT(202,200,208,0);
BIND L13=PLIT(F15,F84,F85,F96,0);
BIND L14=PLIT(F86,F87,F88,F89,206,F90,F60,F124,F125,F126,0);
BIND L15=PLIT(F15,F91,0);
BIND L16=PLIT(0);
BIND L17=PLIT(F15,F73,F74,F76,F75,206,202,F77,F78,F79,
   F80,206,F81,F82,F105,F128,206,F129,F130,F131,F132,F133,
   206,F134,F135,F136,F137,0);
BIND L18=PLIT(F7,F74,F76,F105,F110,F111,206,F112,F113,F114,
   F115,F116,206,F83,F65,F104,F128,0);
BIND L19=PLIT(F122,203,0);

%SPECIAL LISTS (USED SEVERAL TIMES)     %
BIND L200=PLIT(F55,F51,F52,F53,F54,0);
BIND L201=PLIT(F99,F100,0);
BIND L201A=PLIT(F99,F100,F101,F102,0);
BIND L201B=PLIT(F12,F13,0);
BIND L202=PLIT(F27,F29,F30,F31,F32,206,0);
BIND L205A=PLIT(F18,F19,0);
BIND L205B=PLIT(F18,F19,F20,F21,0);

%COMMON LIST FOR ALL ENTRIES    %
BIND LC=PLIT(F1,F2,F3,F4,0);

%MASTER TABLE OF ENTRIES        %
%INDEXED BY ENTRY TYPE NO.      %
BIND MT=PLIT(L2,L2,L2,L2,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11,L12,L13,L14,
   L15,L2,L2,L16,L17,L18,L2,L2,L19,L2);

%PRINT FIELD FUNCTION   %
%REQUIRS ADDRESS OF FIELD       %
ROUTINE PF(CBF,FL)=
   BEGIN
   LOCAL T1,T2,T3;
   MAP S$ CBF;
   T1:=.FL;             %GET FIELD ADDRESS       %
   T2:=(.(.T1+1))<36,7>;    %PTR FOR FIRST STRING        %
   T3:=@(.T1)[2];        %GET VALUE      %
   $UAPSZ(.T2);         %PRINT STRING   %
   IF .T3 GTR SV$LN THEN T1:=99 ELSE
   BEGIN
   T1:=@.T1;
   T3:=.CBF[.T3]
   END;
   IF .T1 EQL 1 THEN
      $UAPN(.T3,10,1)   %OUTPUT FIELD IN DECIMAL        %
   ELSE IF .T1 EQL 2 THEN
      BEGIN
      T3:=@(.FL)[3+.T3]; %USE FIELD AS INDEX     %
      T2:=(.T3)<36,7>;
      $UAPSZ(.T2)
      END
   ELSE IF .T1 EQL 3 THEN
      $UAPN(.T3,8,1)    %OUTPUT FIELD IN OCTAL  %
   ELSE IF .T1 EQL 99 THEN
      BEGIN
      $UOCHR("*");
      $UAPN(.T3,8,1);
      $UOCHR("*")
      END
   ELSE
      %6 BIT ASCII - LIST TYPE NO. HAS NO. OF DIGITS TO OUTPUT  %
      T2:=(.T3)<36,6>;           %CREATE BYTE PTR        %
      INCR K TO .T1-1 DO
         $UOCHR(SCANI(T2)+#240)
   END;


%PRINT STRING ROUTINE   %
%REQUIRES POINTER & NO. OF CHARS AS ARGUMENTS   %

ROUTINE PS(PTR,NC)=
BEGIN

LOCAL T1;

INCR K TO .NC-1 DO
  BEGIN
  T1:=SCANI(PTR);
  IF .T1 EQL #77 THEN $UOCHR(#77)
  ELSE IF .T1 LSS #40 THEN
    BEGIN
    T1:=.T1+#100;
    $UOCHR(#77)
    END
  ELSE IF .T1 GTR #137 THEN
    BEGIN
    T1:=.T1-#100;
    $UOCHR(#77)
    END;
  $UOCHR(.T1)
  END

END;

%PRINT LIST ROUTINE - CALLED RECURSIVLY %
%REQUIRES LIST ADDRESS AS ARGUMENT      %

ROUTINE PL(CBUF,LP)=
BEGIN
MAP S$ CBUF;
LOCAL STG[12],SPTR,T1,UDYNARY$ T2,T3,FLD;


UNTIL
  BEGIN
  FLD:=@.LP;
  LP:=.LP+1;     %TO NEXT ITEM IN LIST   %
  .FLD EQL 0
  END
DO
  BEGIN
  IF .FLD GTR 300 THEN
    PF(.CBUF,.FLD)
  ELSE
    BEGIN
    CASE (.FLD-200) OF
      SET
%CASE 200       %
PL(.CBUF,L200);

%CASE 201, FOR NAME ENTRY       %
BEGIN
T1:=CBUF[S$NAME];                %SETUP ADDRESS OF NAME AREA     %
T2:=.CBUF[S$TYPE];               %GET THE TYPE FOR CHECKING      %
$UOUTL(0);
IF .T2 EQL SV$NAME OR .T2 EQL SV$RW OR .T2 EQL SV$STLIT
THEN
  BEGIN
  PF(.CBUF,F11);
  PS((.T1)<0,7>,.CBUF[S$NCHAR])
  END
ELSE IF .T2 EQL SV$SYSLIT
  THEN PF(.CBUF,L201)
ELSE IF .T2 EQL SV$SYSADCON
  THEN PF(.CBUF,L201A)
ELSE
  BEGIN
  PL(.CBUF,L201B);
  IF .CBUF[S$DDTYPE] EQL SV$DBLD THEN
    BEGIN
    $UAPN(@(.T1)[1],8,12);
    $UAPN(@(.T1)[2],8,13)
    END
  ELSE $UAPN(@(.T1)[1],10,9);
  END
END;

%CASE 202       %
PL(.CBUF,L202);

%CASE 203, FOR S$CNST LIST      %
BEGIN
T1:=.CBUF[S$CNSTL];
PF(.CBUF,F92);
T2:=CBUF[S$CNST];
INCR K TO .T1-1 BY 3 DO
  BEGIN
  $UOUTL(0);
  $ATDMP(T2[.K])
  END
END;
%CASE 204, FOR S$PARASTP        %
BEGIN
T1:=.CBUF[S$NPARA];
PF(.CBUF,F69);
T2:=CBUF[S$PARASTP];
INCR K TO .T1-1 DO
  BEGIN
  T3:=@(.T2)[.K];
  $UAPN(.T3,8,1);
  $UOCHR(" ")
  END
END;

%CASE 205       %
IF .CBUF[S$DDTYPE] EQL SV$SLIT
THEN
  PL(.CBUF,L205A)
ELSE
  PL(.CBUF,L205B);

%CASE 206       PRINT LINE      %
$UOUTL(0);


%CASE 207       USE $FPPF TO PRINT S$FP FIELD   %
BEGIN
PF(.CBUF,F22);
$UOCHR(" ");
$FPPF(.CBUF[S$FP]);
$UOCHR(" ")
END;

%CASE 208       "NAME" FIELD IN LITERAL INCARNATION     %
BEGIN
T1:=CBUF[S$NAME];                %SETUP ADDRESS OF NAME AREA     %
T2:=.CBUF[S$DDTYPE];             %GET THE TYPE FOR CHECKING      %
IF .T2 EQL SV$SLIT THEN
  BEGIN
  PF(.CBUF,F11);
  PS((.T1)<0,7>,.CBUF[S$NCHAR])
  END
ELSE
  BEGIN
  PL(.CBUF,L201B);
  $UAPN(@(.T1)[1],8,9);
  IF .T2 EQL SV$DBLD
  THEN $UAPN(@(.T1)[2],8,9)
  END
END;

%CASE 209       %
BEGIN
$UOUTL(0);
$UAPSZ((.(F138+1))<36,7>);     %PRINT LABEL STRING      %
T1:=.CBUF[S$DTP];
IF .T1 EQL 0 THEN
  $UAPN(.T1,8,1)
ELSE
  $FPPD(CBUF[S$DTP])

END;

      TES
    END
  END
END;

GLOBAL ROUTINE $SPSTE(STP)=
BEGIN

LOCAL TYPE,S$ CBUF,LIST;

$UOUTL(0);
CBUF:=$SGSTE(.STP);
PL(.CBUF,LC);
$UOUTL(0);
TYPE:=.CBUF[S$TYPE];
LIST:=.MT[.TYPE];
PL(.CBUF,.LIST);
$UOUTL(0);
$SFRNCH(.CBUF)
END;


GLOBAL ROUTINE $SPSTB(CBUF)=
BEGIN

MAP S$ CBUF;

LOCAL TYPE,LIST;

$UOUTL(0);
PL(.CBUF,LC);
$UOUTL(0);
TYPE:=.CBUF[S$TYPE];
LIST:=.MT[.TYPE];
PL(.CBUF,.LIST);
$UOUTL(0)
END;

END ELUDOM
    