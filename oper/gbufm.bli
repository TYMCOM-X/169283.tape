MODULE GBUFM(DOLLAR,ENTRIES=($GIBUF,$GNBUF,$GRBUF,$GWBUF,$GMBUF,$GDBUF,$GCBUF,$GFBUF,$GFREC,$GLREC),
                        FSAVE,TIMING,TIMER=EXTERNAL(SIX12)) =
  BEGIN

  REQUIRE UDEFS.BLI[7,107355];
  REQUIRE GDEFS.BLI[7,107355];
  REQUIRE CDEFS.BLI[7,107355];
  REQUIRE FDEFS.BLI[7,107355];

  BIND
    BUFNO    = 0,
    BUFLEN   = 1,
    BUFDISP  = 2,
    BUFLINK  = 3;
  STRUCTURE BUFFER[FIELD] = CASE .FIELD OF
      SET
    (@.BUFFER  )<28,8>;         % BUFFER-INCREMENT NUMBER   %
    (@.BUFFER  )<12,16>;        % BUFFER LENGTH             %
    (@.BUFFER  )<0,12>;         % DISPLACEMENT TO THE NEXT AVAILABLE
                                  BUFFER ENTRY
                                %
    (@.BUFFER+1)<0,36>;         % LINK TO THE NEXT BUFFER-INCREMENT    %
      TES;

  UNDECLARE $GIBUF, $GNBUF,$GRBUF,$GWBUF,$GMBUF,$GDBUF,$GCBUF,$GFBUF,$GFREC,$GLREC;


%***
  INITIALIZE BUFFER MAINTENANCE
      INIT. THE FREE INDEX QUEUE WITH ALL VALID INDEX VALUES. THIS ROUTINE IS CALLED BY
        $GEXEC EXCLUSIVELY.
***%
  GLOBAL ROUTINE  $GIBUF =
    BEGIN
    INCR I FROM 0 TO (GV$EBUFX * 2 + 1)
      DO
        GBUFX$[.I] := 0;
    GQUEH$ := 1;
    GQUET$ := GV$EBUFX;
    INCR I FROM 0 TO GV$EBUFX
      DO
        GQUE$[.I] := .I;
    END;

%***
  GET A NEW BUFFER
      DETERMINE IF THERE ARE ANY MORE BUFFER INDEXES AVAILABLE. IF NOT THEN
      RETURN THE VALUE -1. OTHERWISE, GET A BLOCK OF MEMORY AND SAVE ITS 
      ADDRESS AS BOTH THE FIRST AND LAST BUFFER INCREMENT IN GBUFX$.
      INITIALIZE THE STANDARD BUFFER INFORMATION. UPDATE THE QUEUE HEAD
      POINTER AND RETURN THE BUFFER'S INDEX VALUE.
***%

  GLOBAL ROUTINE  $GNBUF(BUFSIZE) =
    BEGIN
    LOCAL CURIX;
    LOCAL BUFFER CBUFPTR;       % CURRENT BUFFER POINTER  %

    BUFSIZE := .BUFSIZE + 2;
    IF .GQUEH$ EQL .GQUET$
      THEN     % BUFFER ALLOCATION CAPACITY EXCEEDED  %
        $FATAL(#074)
      ELSE
        BEGIN
        CURIX := .GQUE$[.GQUEH$] * 2;  % TWO POINTERS PER BUFFER %
        CBUFPTR := GBUFX$[.CURIX] := GBUFX$[.CURIX +1] := $CGTZM(.BUFSIZE);
        CBUFPTR[BUFNO] := 1;
        CBUFPTR[BUFLEN] := .BUFSIZE;
        CBUFPTR[BUFDISP] := 2;
        CBUFPTR[BUFLINK] := 0;
        IF .GQUEH$ EQL GV$EBUFX
          THEN
            GQUEH$ := 1
          ELSE
            GQUEH$ := .GQUEH$ +1;
        END;

    .CURIX
    END;

%***
  RELEASE A BUFFER
     INSURE THAT THE INDEX VALUE IS VALID. TRAVERSE THE LIST OF BUFFER
     INCREMENTS WHICH DEFINE THE LOGICAL BUFFER AND FREE THE MEMORY ASSIGNED
     TO EACH. INSURE THAT THE INDEX QUEUE IS NOT FULL. ADD THE INDEX TO THE
     QUEUE OF AVAILABLE INDEXES.
***%

  GLOBAL ROUTINE $GRBUF(CURIX) =
    BEGIN
    LOCAL BUFFER CBUFPTR;       % CURRENT-BUFFER POINTER    %
    LOCAL BUFFER NBUFPTR;       % NEXT-BUFFER POINTER       %

    IF .CURIX LSS 2 OR .CURIX GTR GV$EBUFX * 2
      THEN    %  COMPILER ERROR; INVALID INDEX NO.  %
        $FATAL(#077)
      ELSE
        BEGIN
        CBUFPTR := .GBUFX$[.CURIX];
        WHILE .CBUFPTR NEQ 0
          DO
            BEGIN
            NBUFPTR := .CBUFPTR[BUFLINK];
            $CFREEM(.CBUFPTR);
            CBUFPTR := .NBUFPTR;
            END;
        IF (.GQUET$ + 1 EQL .GQUEH$)        OR
           (.GQUET$ EQL GV$EBUFX  AND  .GQUEH$ EQL 1)
          THEN   %  COMPILER ERROR;  BUFFER-INDEX QUEUE IS FULL AND
                    IT SHOULDN'T BE
                 %
            $FATAL(#076)
          ELSE
            BEGIN
            GQUET$ := .GQUET$ + 1;
            IF .GQUET$ GTR GV$EBUFX
              THEN
                GQUET$ := 1;
            GQUE$[.GQUET$] := .CURIX/2
            END;

         END;
    .CURIX
    END;

%***
  WRITE TO A BUFFER
      INSURE THAT THE INDEX IS VALID. IF IT IS ZERO THEN WRITE THE RECORD
      TO THE GAMMA FILE. OTHERWISE, PUT THE RECORD INTO THE APPROPRIATE
      BUFFER. A POINTER TO THE RECORD IS RETURNED. IF THE RECORD WAS WRITTEN
      TO THE GAMMA FILE THEN THE RECORD POINTER EQUALS ZERO.
***%

  GLOBAL ROUTINE  $GWBUF(SOURCE, CURIX) =
    BEGIN
    LOCAL BUFFER CBUFPTR;       % CURRENT BUFFER POINTER        %
    LOCAL BUFFER LBUFPTR;       % LAST OR PRECEDING BUFFER POINTER  %
    LOCAL G$ CRECPTR;       % POINTER TO THE CURRENT RECORD IN THE BUFFER  %
    LOCAL GRPTR$I RECORDP;
    LOCAL SIZE, CBUFEND;

    MAP G$ SOURCE;

    RECORDP := 0;
    IF .CURIX LSS 0 OR .CURIX GTR GV$EBUFX * 2
      THEN  %  COMPILER ERROR;  INVALID INDEX NUMBER  %
        $FATAL(#075);
    IF .CURIX EQL 0
      THEN  %  WRITE THE RECORD TO THE GAMMA FILE       %
        $COUTG(.SOURCE)
      ELSE  %  PUT THE RECORD INTO THE SPECIFIED HOLDING BUFFER  %
        BEGIN
        CBUFPTR := .GBUFX$[.CURIX + 1];
        CBUFEND := .CBUFPTR + .CBUFPTR[BUFLEN] ;
        CRECPTR := .CBUFPTR + .CBUFPTR[BUFDISP];
        SIZE := .SOURCE[G$LENGTH];
        IF .CRECPTR + .SIZE GTR .CBUFEND
          THEN  %  NO MORE SPACE IN THIS BUFFER INCREMENT. GET ANOTHER
                   INCREMENT.
                %
            BEGIN
            IF .CRECPTR LSS .CBUFEND
              THEN
                CRECPTR[G$LENGTH] := 0;
            IF .CBUFPTR[BUFLINK] NEQ 0
              THEN
                BEGIN
                CBUFPTR := .CBUFPTR[BUFLINK];
                CRECPTR := .CBUFPTR + 2;
                END
              ELSE
                BEGIN
                LBUFPTR := .CBUFPTR;
                CBUFPTR := $CGTZM(.CBUFPTR[BUFLEN]);
                CBUFPTR[BUFNO]  := .LBUFPTR[BUFNO] + 1;
                CBUFPTR[BUFLEN] := .LBUFPTR[BUFLEN];
                CBUFPTR[BUFDISP] := 2;
                CBUFPTR[BUFLINK] := 0;
                LBUFPTR[BUFLINK] := .CBUFPTR;
                CRECPTR := .CBUFPTR + 2;
                END;
            GBUFX$[.CURIX + 1] := .CBUFPTR;
            END;
        $UMOVE(.SIZE, .SOURCE, .CRECPTR);
        RECORDP[G$RBNO]  := .CBUFPTR[BUFNO];
        RECORDP[G$RBADR] := .CBUFPTR;
        RECORDP[G$RBDISP] := .CBUFPTR[BUFDISP];
        CBUFPTR[BUFDISP] := .CBUFPTR[BUFDISP] + .SIZE;
        END;

    .RECORDP
    END;

%***
  MOVE ONE BUFFER TO ANOTHER
      INSURE THAT BOTH BUFFER INDEXES ARE VALID.
      INSURE THAT BOTH BUFFER INDEXES ARE VALID.
***%

  GLOBAL ROUTINE  $GMBUF(SIX, DIX, FSRCREC, LSRCREC) =
    BEGIN
    LOCAL BUFFER CBUFPTR;       % CURRENT-BUFFER POINTER        %
    LOCAL BUFFER DBUFPTR;       % DESTINATION-BUFFER POINTER    %
    LOCAL BUFFER LBUFPTR;       % LAST-BUFFER POINTER           %
    LOCAL G$ LRECPTR;       % POINTER TO THE WORD FOLLOWING THE LAST RECORD
                                  TO BE MOVED.
                                %
    LOCAL G$ DRECPTR;       % DESTINATION RECORD POINTER    %
    LOCAL G$ CRECPTR;       % CURRENT RECORD POINTER        %
    LOCAL CBUFEND, DBUFEND;
    LOCAL RECSIZE;

    MAP GRPTR$I FSRCREC:LSRCREC;

    IF .SIX LSS 2 OR .DIX LSS 0 OR .SIX GTR GV$EBUFX*2 OR .DIX GTR GV$EBUFX*2
      THEN
        $FATAL(#075);
    CBUFPTR := @GBUFX$[.SIX];
    WHILE .CBUFPTR[BUFNO] LSS .FSRCREC[G$RBNO]
      DO
        BEGIN
        IF .CBUFPTR[BUFLINK] EQL 0
          THEN  %  FIRST SOURCE RECORD IS NOT IN THE BUFFER INDICATED  %
            $FATAL(#073);
        CBUFPTR := .CBUFPTR[BUFLINK];
        END;
    WHILE .CBUFPTR[BUFNO] LSS .LSRCREC[G$RBNO]
      DO
        BEGIN
        IF .CBUFPTR[BUFLINK] EQL 0
          THEN  %  LAST SOURCE RECORD IS NOT IN THE BUFFER INDICATED  %
            $FATAL(#072);
        CBUFPTR := .CBUFPTR[BUFLINK];
        END;
    % SET POINTERS FOR THE RECORD TO BE MOVED %
    CBUFPTR := .FSRCREC[G$RBADR];
    CBUFEND := .CBUFPTR + .CBUFPTR[BUFLEN];
    CRECPTR := .CBUFPTR + .FSRCREC[G$RBDISP];
%***
     CALCULATE THE ADDRESS OF THE WORD FOLLOWING THE LAST RECORD TO BE
  MOVED.
***%
    LRECPTR := .LSRCREC[G$RBADR] + .LSRCREC[G$RBDISP];   
    LRECPTR := .LRECPTR + .LRECPTR[G$LENGTH];
    IF .DIX EQL 0
      THEN  %  MOVE TO THE GAMMA FILE  %
        BEGIN
        DO
          BEGIN
          IF .CRECPTR GEQ .CBUFEND OR .CRECPTR[G$LENGTH] EQL 0
            THEN
              BEGIN
              CBUFPTR := .CBUFPTR[BUFLINK];
              CBUFEND := .CBUFPTR + .CBUFPTR[BUFLEN];
              CRECPTR := .CBUFPTR + 2
              END;
          $COUTG(.CRECPTR);
          RECSIZE := .CRECPTR[G$LENGTH];
          CRECPTR := .CRECPTR + .RECSIZE;
          END
        UNTIL .CRECPTR EQL .LRECPTR OR .CRECPTR  EQL 2
        END
      ELSE  %  MOVE TO ANOTHER HOLDING BUFFER  %
        BEGIN
        DBUFPTR := @GBUFX$[.DIX + 1];
        DBUFEND := .DBUFPTR + .DBUFPTR[BUFLEN];
        DRECPTR := .DBUFPTR + .DBUFPTR[BUFDISP];
        DO
          BEGIN
          IF .CRECPTR GEQ .CBUFEND OR .CRECPTR[G$LENGTH] EQL 0
            THEN
              BEGIN
              CBUFPTR := .CBUFPTR[BUFLINK];
              CBUFEND := .CBUFPTR + .CBUFPTR[BUFLEN];
              CRECPTR := .CBUFPTR + 2;
              END;
          RECSIZE := .CRECPTR[G$LENGTH];
          $GWBUF(.CRECPTR,.DIX);
          CRECPTR := .CRECPTR + .RECSIZE;
          END
        UNTIL .CRECPTR EQL .LRECPTR OR .CRECPTR EQL 2
        END
    END;

%***
  DELETE ALL BUFFERS
***%

  GLOBAL ROUTINE $GDBUF =
    BEGIN
    LOCAL CURIX, TEMP;

    IF GQUEH$ NEQ GQUET$
      THEN
        BEGIN
        CURIX := .GQUEH$ - 1;
        WHILE .CURIX NEQ .GQUET$
          DO
            BEGIN
            CURIX := .CURIX + 1;
            IF .CURIX GTR GV$EBUFX
              THEN
                CURIX := 1;
            TEMP := .GQUE$[.CURIX] * 2;
            GBUFX$[.TEMP]    := 0;
            GBUFX$[.TEMP+1]  := 0;
            END;
          END;
    INCR I FROM 1 TO GV$EBUFX
      DO
        IF @GBUFX$[.I * 2] NEQ 0
          THEN
            $GRBUF(.I * 2);
    END;
%****
  CLEAR A BUFFER 
****%

  GLOBAL ROUTINE $GCBUF(BUFIX) =
    BEGIN
    LOCAL BUFFER CBUFPTR;
    LOCAL BUFFER NBUFPTR;
    LOCAL        CRECPTR;

    IF .BUFIX LSS 2 OR .BUFIX GTR GV$EBUFX * 2
      THEN
        $FATAL(#071);
    CBUFPTR := @GBUFX$[.BUFIX];
    WHILE .CBUFPTR NEQ 0
      DO
        BEGIN
        NBUFPTR := .CBUFPTR[BUFLINK];
        CBUFPTR[BUFDISP] := 2;
        CRECPTR := .CBUFPTR + 2;   % SET THE LENGTH TO ZERO FOR THE FIRST 
                                    RECORD IN EACH BUFFER INCREMENT
                                  %
        .CRECPTR := 0;
        CBUFPTR := .NBUFPTR;
        END;
    GBUFX$[.BUFIX + 1] := @GBUFX$[.BUFIX]
    END;

%*****
  FETCH THE NEXT RECORD FROM A BUFFER
*****%

  GLOBAL ROUTINE $GFBUF(RECP,DEST) =
    BEGIN
    LOCAL BUFFER CBUFPTR;
    LOCAL G$     CRECPTR;
    LOCAL RECSIZE;
    MAP   GRPTR$I RECP;

  % GET THE ADDRESS OF THE BUFFER CONTAINING THE RECORD %
    CBUFPTR := .RECP[G$RBADR];
    CRECPTR := .CBUFPTR + .RECP[G$RBDISP];
    RECSIZE := .CRECPTR[G$LENGTH];
    $UMOVE(.RECSIZE,.CRECPTR,.DEST);
    CRECPTR := .CRECPTR + .RECSIZE;
    IF .CRECPTR GTR .CBUFPTR + .CBUFPTR[BUFLEN] - 1 OR .CRECPTR[G$LENGTH] EQL 0
      THEN  % NEXT RECORD IS IN THE CONTINUATION BUFFER INCREMENT %
        BEGIN
        CBUFPTR := .CBUFPTR[BUFLINK];
        IF .CBUFPTR EQL 0
          THEN  % NO MORE RECORDS %
            RECP := 0
          ELSE  % FIRST RECORD OF THE NEXT BUFFER INCREMENT %
            BEGIN
            RECP[G$RBNO] := .CBUFPTR[BUFNO];
            RECP[G$RBADR] := .CBUFPTR;
            RECP[G$RBDISP] := 2;
            END
        END
      ELSE  % NEXT RECORD IS IN THIS BUFFER INCREMENT %
        IF .CRECPTR GTR .CBUFPTR + .CBUFPTR[BUFDISP] -1
          THEN
            RECP := 0
          ELSE
            RECP[G$RBDISP] := .CRECPTR - .CBUFPTR;

    .RECP
    END;


%****
  GET THE RECORD POINTER FOR THE FIRST RECORD IN THE INDICATED BUFFER.
****%
  GLOBAL ROUTINE $GFREC(IX)=
    BEGIN

    LOCAL GRPTR$I RECP;
    LOCAL BUFFER BUFPTR;

    BUFPTR := .GBUFX$[.IX];
    IF .BUFPTR[BUFDISP] EQL 2
      THEN
        RECP := 0
      ELSE
        BEGIN
        RECP[G$RBNO]   := 1;
        RECP[G$RBADR]  := .BUFPTR;
        RECP[G$RBDISP] := 2;
        END;

    .RECP

    END;


%****
  GET THE RECORD POINTER FOR THE LAST RECORD IN THE INDICATED BUFFER
****%
  GLOBAL ROUTINE $GLREC(IX)=
    BEGIN

    LOCAL GRPTR$I RECP;
    LOCAL BUFFER BUFPTR;
    LOCAL G$ CRECPTR;
    LOCAL DATAEND;

    BUFPTR := .GBUFX$[.IX+1];
    DATAEND := .BUFPTR + .BUFPTR[BUFDISP];
    CRECPTR := .BUFPTR + 2;
    WHILE .CRECPTR + .CRECPTR[G$LENGTH] LSS .DATAEND
      DO
        CRECPTR := .CRECPTR + .CRECPTR[G$LENGTH];
    RECP[G$RBNO]    := .BUFPTR[BUFNO];
    RECP[G$RBADR]   := .BUFPTR;
    RECP[G$RBDISP]  := .BUFPTR[BUFDISP] - .CRECPTR[G$LENGTH];

    .RECP

    END;


  END
ELUDOM
  