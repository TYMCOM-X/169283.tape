C
C                             DISCLAIMER
C
C    THIS PROGRAM AND ITS DOCUMENTATION HAVE BEEN PROVIDED BY THE
C    DIVISION OF COMPUTER RESEARCH AND TECHNOLOGY, NIH.  NO WARRANTY
C    IS EXPRESSED OR IMPLIED AS TO THE DOCUMENTATION, FUNCTION OR
C    PERFORMANCE OF THE PROGRAM.  THE USER OF THE PROGRAM IS EXPECTED
C    TO MAKE THE FINAL EVALUATION AS TO THE USEFULNESS OF THE PROGRAM
C    IN HIS OWN ENVIRONMENT.  THERE IS NO COMMITTED MAINTENANCE FOR
C    THE PROGRAM.
C
C
C
C   ANALYSIS  -  RIA  MAIN PROGRAM
C
C   COMMON BLOCK
C
      COMMON SUMXX,SUMYY,SUMXY,ARNDX,Z1,
     X       ARNDY,TCOUNT,BCOUNT,TIME,TBOUND,V1,V2,V3,IBACK,
     X       MODEL,STDN,N,VOL,IADJ,T6,T7,T8,ANTI,RVOL,WEIGHT,TEMP,
     X       IMACH,BEGBT,TRUCNT,SLOPE,YINT,RESVAR,SUMX,SUMY,XMEAN,
     X       YMEAN,SIGMAX,SIGMAY,RHO,ERRSLP,ERRINT,ADJ1,ADJ2,ADJ3,
     X       KK1,KK,MARK,DELH,HALF,HLINE(61),PT(9),X(200),Y(200),
     X       XLN(200),YLOGIT(200),TRUEY(200),W(200),RY(200),OVRLY(600)
C
C   DATA INITIALIZATION
C
C   FOR COMMON
      DOUBLE PRECISION SUMXX,SUMYY,SUMXY,ARNDX,ARNDY,Z1
      REAL*8 ASSAY,USER,TYPE,ANUM
      LOGICAL MARK
C   FOR ANALYSIS
      DIMENSION UNIT(3)
      DIMENSION MATCH(6)
      DIMENSION MACH(7)
      REAL MATCH
      DATA DOT/'.'/,SYMI/'I'/
      DATA MATCH/'GRAM','MILL','MICR','NANO','PICO','PHAN'/
      DATA UMIU/'MIU '/
      DATA MACH/'ANUC','BNUC','PICK','PACK','BECK','HAND','IDS '/
C
C     READ IN RUN DATA
	CALL IFILE(22,'RUNDA')
C
      READ (22,1000) MACHNE,ASSAY,TYPE,ANUM,USER,ANTI,RVOL,WEIGHT,
     X              (UNIT(I),I=1,3),TEMP,TCOUNT,BCOUNT,TIME,TBOUND,
     X              V1,V2,V3,IBACK,MODEL,STDN,N,VOL,IADJ,T6,T7,T8
 1000 FORMAT (A4/,4(A8/),3(F11.4/),3(A4)/,8(F11.4/),2(I1/),F11.4/,I3/,
     X        F11.4/,I1/,2(F11.4/),F11.4)
	CONTINUE
C
C     READ IN STANDARDS
	CALL IFILE(23,'STAND')
	CALL IFILE(24,'STAN1')
C
      J = 1
      DO 1 I=1,200
      READ (23,1001,END=2) XIN
 1001 FORMAT (F11.4)
      IF(XIN.EQ.0.0) GO TO 1
      X(J) = XIN
      J = J+1
    1 CONTINUE
2	CONTINUE
      II = J
      J = 1
      DO 3 I=1,200
      READ (24,1001,END=4) YIN
	IOUT=5
      IF (YIN.EQ.0.0) GO TO 3
      RY(J) = YIN
      J = J+1
    3 CONTINUE
4	CONTINUE
      IF (J-II) 900,5,900
C
C     ERROR ROUTINE - ENTRIES FOR X AND Y DO NOT MATCH
C
  900 WRITE(IOUT,901) J
  901 FORMAT ('1RIA-Y1 CONTAINS ',I3, 'VALUES FOR COUNTS BOUND')
      WRITE(IOUT,902)  II
  902 FORMAT (' RIA-XI CONTAINS ', I3, 'VALUES FOR DOSE(X)')
      STOP
C
C     SET NUMBER OF STANDARDS TO BE PLOTTED
C
    5 J = J-1
      IF(N) 6,7,6
    6 IF(N-J) 8,7,7
    7 N=J
    8 DO 9 I = 1,7
      IF(MACHNE.NE.MACH(I)) GO TO 9
      IMACH = I
      GO TO 10
    9 CONTINUE
      WRITE(IOUT,950)
  950 FORMAT('1  INVALID MACHINE SPECIFIED')
      STOP
C
C  HEADING AND CONTROL INFORMATION PRINT OUT
C
   10 WRITE(IOUT,2000)
 2000 FORMAT ('1',T23,'ANALYSIS OF RADIOIMMUNOASSAY'/,
     X        ' ',T23,'-------- -- ----------------')
      WRITE(IOUT,2001) ASSAY,TYPE,ANUM,USER
 2001 FORMAT('0',T5,'NAME OF ASSAY: ',A8/,
     X       ' ',T5,'TYPE OF ASSAY: ',A8/,
     X       ' ',T5,'NO. OF ASSAY:  ',A8/,
     X       ' ',T5,'PREPARED BY:   ',A8)
      WRITE(IOUT,2002)
 2002 FORMAT('-',T21,'CONTROL INFORMATION FOR ANALYSIS'/,
     X       ' ',T21,'------- ----------- --- --------')
      WRITE(IOUT,2003) TCOUNT,BCOUNT,TIME,TBOUND,STDN,N
 2003 FORMAT ('0',T5,'TOTAL CPM =',T40,F8.1/,
     X        ' ',T5,'NONSPECIFIC CPM (MEAN) =',T40,F8.1/,
     X        ' ',T5,'COUNTING TIME FOR ASSAY =',T40,F8.1/,
     X        ' ',T5,'COUNTS PPT IN TIME =',T40,F8.1/,
     X        ' ',T5,'STANDARD DEVIATIONS USED FOR C.L. =',T40,F8.1/,
     X        ' ',T5,'NO. OF POINTS ON STANDARD CURVE =',T40,I6)
      WRITE(IOUT,2004) V1,V2,V3
 2004 FORMAT('0',T5,'COEFFICIENTS OF VARIATION'/,
     X       ' ',T8,'DUE TO PIPETTING ERROR =',T51,F11.4/,
     X   ' ',T8,'FRACTION OF SUPERNATANT LEFT WITH PPT =',T51,F11.4/,
     X   ' ',T8,'FRACTION OF PPT REMOVED WITH SUPERNATANT =',T51,F11.4)
      IF (IBACK - 1) 205,205,206
  205 WRITE(IOUT,2005)
 2005 FORMAT('0',T5,'COUNTER SUBTRACTED BACKGROUND')
      GO TO 207
  206 WRITE(IOUT,2006)
 2006 FORMAT('0',T5,'COUNTER DID NOT SUBTRACT BACKGROUND')
  207 WRITE(IOUT,2007) MODEL
 2007 FORMAT(' ',T5,'MODEL USED =',T20,I4)
      WRITE(IOUT,2013) MACH(IMACH)
 2013 FORMAT(' ',T5,'MACHINE CODE FOR UNKNOWNS IS ',A4)
      IF (VOL.LE.0.0) GO TO 208
      WRITE(IOUT,2008) VOL
 2008 FORMAT('0',T5,'SAMPLE VOLUME =',T20,F11.4)
      IF (IADJ.EQ.0) GO TO 250
  208 IF(IADJ - 2) 209,210,211
  209 WRITE(IOUT,2009)
 2009 FORMAT('0',T5,'SAMPLE VOLUME IS VARIABLE')
      GO TO 250
  210 WRITE(IOUT,2010)
 2010 FORMAT(' ',T5,'RECOVERY IS VARIABLE')
      GO TO 212
  211 WRITE(IOUT,2011)
 2011 FORMAT('0',T5,'BOTH SAMPLE VOLUME AND RECOVERY ARE VARIABLE')
  212 WRITE(IOUT,2012) T6,T7,T8
 2012 FORMAT (' ',T8,'TOTAL COUNTS =  ',F11.4/,
     X        ' ',T8,'BACKGROUND =    ',F11.4/,
     X        ' ',T8,'ALIQUOT FACTOR =',F11.4)
C
C  CONTROL INFORMATION FOR SCATCHARD PLOT
C
  250 IF(ANTI.LE.0.0) GO TO 20
      UNIT1 = UNIT(1)
      IF(UNIT1.EQ.UMIU) GO TO 262
      DO 260 I=1,6
      IF(UNIT1.EQ.MATCH(I)) GO TO 262
      WEIGHT=WEIGHT*1000.
  260 CONTINUE
      WEIGHT=WEIGHT/10.E18
      WRITE(IOUT,903) (UNIT(I),I=1,3)
  903 FORMAT(' INVALID UNIT RECORDED ****  ',3A4)
  262 SPA = TCOUNT*WEIGHT/ANTI
      WRITE(IOUT,3001) ANTI,RVOL,WEIGHT,SPA,(UNIT(I),I=1,3),TEMP
 3001 FORMAT('0',T5,'DOSE OF LABELLED ANTIGEN =    ',F11.4/,
     X       ' ',T5,'REACTION VOLUME =             ',F11.4/,
     X       ' ',T5,'MOLECULAR WEIGHT =            ',E12.5/,
     X       ' ',T5,'SPECIFIC ACTIVITY (CPM/MOLE) =',E12.5/,
     X       ' ',T5,'UNITS OF DOSE(X) =            ',3A4/,
     X       ' ',T5,'TEMPERATURE = ',F11.4,' DEGREES CENTIGRADE')
      TEMP=(TEMP+273.16) * 1.986E-3
C
C      ARRANGE X AND Y FILES INTO ASCENDING SEQUENCE
C
   20 CALL ORDER(X,RY)
C
C     CALCULATE INITIAL B/T
C
      TCOUNT = TCOUNT * TIME
      BCOUNT = BCOUNT * TIME
C  COMPUTE CONSTANT VALUES TO BE USED IN VAR - ERROR SUBROUTINE
      ADJ1 =(BCOUNT * V1)**2
      ADJ2 = ALOG(1.0 + V1)
      ADJ3 = TBOUND*TBOUND
      TRUCNT = TCOUNT - BCOUNT
      BEGBT = TBOUND/TRUCNT
      WRITE(IOUT,4000) BEGBT
 4000 FORMAT('1STARTING B/T =',F9.6//)
C
C
      RLAST = 0.0
      SUMX = 0.0
      SUMXX = 0.0
      SUMY = 0.0
      SUMYY = 0.0
      SUMXY = 0.0
      J = 0
      NUM = 0
      DO 280 I = 1,N
      XLN(I) = ALOG(X(I))
      IF (IBACK.EQ.1) GO TO 275
      TRUEY(I) = RY(I) - BCOUNT
      GO TO 276
  275 TRUEY(I) = RY(I)
  276 Y(I) = TRUEY(I)/TBOUND
      Y1 = Y(I)
      IF (ABS(Y1 - 0.5).GE.0.5) GO TO 280
      D1 = ALOG(Y1/(1.0-Y1))
      NUM = NUM + 1
C   DO SUMMING FOR UNWEIGHTED REGRESSION
      CALL REGRES(XLN(I),D1)
  280 CONTINUE
      W1 = NUM
C   PERFORM UNWEIGHTED REGRESSION
	IPLACE=2
      CALL CAL(C1,D1,W1,W1,YINT,SLOPE,RESVAR,IPLACE)
C
C   PRINT RESULTS OF UNWEIGHTED REGRESSION
C
  450 WRITE(IOUT,907)
  907   FORMAT (' UNWEIGHTED REGRESSION'/' ---------------------'//)
        GO TO 465
C   PERFORM WEIGHTED REGRESSION FOR UP TO 50 ITERATIONS
  285 DO 400 J = 2,50
C
C     INITIALIZE VARIABLES FOR EACH ITERATION
C
        W1 = 0.0
        SUMX = 0.0
        SUMXX = 0.0
        SUMY = 0.0
        SUMYY = 0.0
        SUMXY = 0.0
C
C       SPECIFIC CODE FOR WEIGHTED REGRESSION
C
      DO 300 I = 1,N
        C1 = XLN(I)
        E3 = 1.0/(1.0 + EXP(-YINT-SLOPE*C1))
        E4 = 1.0 - E3
        W2 = VAR(E3)/((E3*E4)**2)
        W2 = 1.0/W2
        W(I) = W2
        D1 = ((Y(I) - E3)/(E3*E4)) + YINT+SLOPE*C1
        YLOGIT(I) = D1
C
C  BEGIN WEIGHTED REGRESSION
C
        SUMX = SUMX + C1 *W2
        SUMXX = SUMXX + C1 * C1 * W2
        SUMY = SUMY + D1 * W2
        SUMYY = SUMYY + D1 * D1 * W2
        SUMXY = SUMXY + C1 * D1 * W2
  300   W1 = W1 + W2
C
C       END OF SUMMING
C
      RN=N
	IPLACE=2
      CALL CAL(C1,D1,W1,RN,YINT,SLOPE,RESVAR,IPLACE)
C
C     TEST FOR CONVERGENCE
C
        DEL = ABS (RLAST - RHO)
        RLAST = RHO
        IF (DEL.LE.0.001) GO TO 460
        IF (J.GE.50) GO TO 460
  400 CONTINUE
C
C       PRINTOUT FOR WEIGHTED REGRESSION - WILL ALSO PRINT VARIABLES
C
  460 WRITE(IOUT,910) J
  910   FORMAT ('-WEIGHTED REGRESSION'/' -------------------'//
     X          ' NUMBER OF ITERATIONS = ',I5)
C
C   PRINTOUT FOR BOTH WEIGHTED AND UNWEIGHTED
C
  465   WRITE(IOUT,917) N
  917   FORMAT (' NUMBER OF STANDARDS = ',I6)
        WRITE(IOUT,911) XMEAN,SIGMAX
  911   FORMAT (' MEAN X = ',14X,F12.6,5X,'SIGMA X = ',8X,F9.6)
        WRITE(IOUT,912) YMEAN,SIGMAY
  912   FORMAT (' MEAN Y = ',14X,F12.6,5X,'SIGMA Y = ',8X,F9.6)
        WRITE(IOUT,913) W1
  913   FORMAT (' SUM OF WEIGHTS = ',6X,F12.6)
        WRITE(IOUT,914) SLOPE,ERRSLP
  914   FORMAT (' SLOPE = ',15X,F12.6,5X,'SIGMA SLOPE = ',4X,F9.6)
        WRITE(IOUT,915) YINT,ERRINT
  915   FORMAT (' INTERCEPT Y = ',9X,F12.6,5X,'SIGMA INTERCEPT = ',F9.6)
        WRITE(IOUT,916) RESVAR,RHO
  916   FORMAT (' RESIDUAL VARIANCE =    ',F12.6/
     X          ' RHO = ',17X,F12.6//)
        WRITE(IOUT,918) ARNDX,ARNDY
  918   FORMAT(' SUM OF SQUARES OF X AROUND MEAN X =',F12.6/
     X         ' SUM OF SQUARES OF Y AROUND MEAN Y =',F12.6//)
      IF (J.EQ.0) GO TO 285
        WRITE(IOUT,927)
  927 FORMAT ('1 VALUES USED DURING THE REGRESSION ANALYSIS')
        WRITE(IOUT,904)
  904   FORMAT ('0',2X,'I',5X,'X(I)',6X,'COUNTS',7X,'Y(I)',5X,
     X         'LN(X)',4X,'LOGIT(Y)',5X,'WEIGHT')
        WRITE(IOUT,905)
  905   FORMAT ('  ---',4X,'----',5X,'--------',6X,'----',5X,'-----',4X,
     X         '--------',5X,'------')
      DO 476 I = 1,N
  476 WRITE(IOUT,906) I,X(I),RY(I),Y(I),XLN(I),YLOGIT(I),W(I)
  906 FORMAT (' ',I3,2X,F8.2,3X,F7.0,6X,F7.4,3X,F6.3,5X,F6.3,5X,F7.2)
C
C  FILL HORIZONTAL AXIS LABEL ARRAY
C
  480 DO 510 I=1,61
      IF(MOD(I,5).EQ.1) GO TO 502
  501 HLINE(I) = DOT
      GO TO 510
  502 HLINE(I) = SYMI
  510 CONTINUE
      CALL POINTS(1,YLOGIT)
      CALL POINTS(2,Y)
      CALL POINTS(3,Y)
      CALL DOSE1
      CALL LIMIT
      CALL SCAT
       STOP
       END


C
C                             DISCLAIMER
C
C    THIS PROGRAM AND ITS DOCUMENTATION HAVE BEEN PROVIDED BY THE
C    DIVISION OF COMPUTER RESEARCH AND TECHNOLOGY, NIH.  NO WARRANTY
C    IS EXPRESSED OR IMPLIED AS TO THE DOCUMENTATION, FUNCTION OR
C    PERFORMANCE OF THE PROGRAM.  THE USER OF THE PROGRAM IS EXPECTED
C    TO MAKE THE FINAL EVALUATION AS TO THE USEFULNESS OF THE PROGRAM
C    IN HIS OWN ENVIRONMENT.  THERE IS NO COMMITTED MAINTENANCE FOR
C    THE PROGRAM.
C
C
      SUBROUTINE DOSE1
C
C  COMMON BLOCK
C
      COMMON SUMXX,SUMYY,SUMXY,ARNDX,Z1,
     X       ARNDY,TCOUNT,BCOUNT,TIME,TBOUND,V1,V2,V3,IBACK,
     X       MODEL,STDN,N,VOL,IADJ,T6,T7,T8,ANTI,RVOL,WEIGHT,TEMP,
     X       IMACH,BEGBT,TRUCNT,SLOPE,YINT,RESVAR,SUMX,SUMY,XMEAN,
     X       YMEAN,SIGMAX,SIGMAY,RHO,ERRSLP,ERRINT,ADJ1,ADJ2,ADJ3,
     X       KK1,KK,MARK,DELH,HALF,HLINE(61),PT(9),X(200),Y(200),
     X       XLN(200),YLOGIT(200),TRUEY(200),DOSE(1000)
C
C   DATA INITIALIZATION
C   FOR COMMON
C
      DOUBLE PRECISION SUMXX,SUMYY,SUMXY,ARNDX,ARNDY,Z1
      LOGICAL MARK
C
C  THIS ROUTINE READS IN AN UNKNOWN COUNT UNDER THE
C  FORMAT DEFINED FOR THE MACHINE SPECIFIED BY IMACH.
C        IMACH                 MACHINE
C
C          1                 NUCLEAR CHICAGO A
C          2                 NUCLEAR CHICAGO B
C          3                 PACKARD
C          4                 PICKER
C          5                 BECKMAN
C          6                 DATA ENTERED BY HAND - NO IDS
C          7                 DATA ENTERED BY HAND - WITH IDS
C
C  ANY ASSOCIATED VOLUME OR RECOVERY DATA IS READ IN AFTER
C  THE POTENCY ESTIMATE IS MADE AND THE RESULTS PRINTED
C  BEFORE A NEW UNKNOWN IS READ IN.  THE UNKNOWN DATA MAY BE
C  GROUPED INTO BLOCKS SEPARATED BY 999 999 RECORDS IN THE
C  CORRECT DATA FIELDS FOR THE SPECIFIED FORMAT.
C  AFTER ALL POTENCY ESTIMATES HAVE BEEN MADE, THE SEGMENT
C  TO GRAPH THE RUNNING AVERAGE OF THE ESTIMATES (FOR PEAKS)
C  BEGINS.  A NEW GRAPH IS PLOTTED FOR EACH BLOCK OF DATA.
C
C
C  DIMENSION ARRAYS USED BY THIS ROUTINE
C
      DIMENSION SYM(2)
      DIMENSION LABH(5)
      DIMENSION FARRAY(21),FMT(3)
C
C  INITIALIZE DATA
C
      REAL LN10
      LN10 = ALOG(10.0)
      DATA IPAGE/1/,IBLK/1/,NUNK/0/
      DATA SYM/'1','2'/
C
C  ARRAY OF VARIABLE FORMATS
C
      DATA FARRAY/'(I5,','7X,I','6)  ',
     X            '(I5,','14X,','I6) ',
     X            '(I3,','1X,I','6)  ',
     X            '(I8,','3X,I','6/) ',
     X            '(I3,','12X,','I6) ',
     X            '(F9.','1)  ','    ',
     X            '(F9.','1,F9','.1) '/
      IF (IADJ.EQ.0) IADJ = 4
      ICODE = 1
      WRITE(IOUT,3000) IPAGE
 3000 FORMAT('1******',T30,'-',I2,'-'/)
      GO TO 109
    1 ICODE = 2
C
C  GET CORRESPONDING FORMAT FOR MACHINE SPECIFIED
C
      J = ((IMACH - 1) * 3) + 1
      DO 2 I = 1,3
      FMT(I) = FARRAY(J)
      J = J+1
    2 CONTINUE
C
C  BEGIN INTERPOLATION OF UNKNOWNS
C
      DO 300 IN = 1,1000
      XLO = 0.0
      XHI = 9999.
C
C  READ IN UNKNOWN UNDER SPECIFIED FORMAT
C
      IF(IMACH - 6) 401,402,403
  402 READ(12,FMT,END=40) Y1
      IF(Y1.EQ.999.0) GO TO 103
      NUM = IN-IBLK+1
      GO TO 404
  403 READ(12,FMT,END=40) UNUM,Y1
      IF((UNUM.EQ.999.0).AND.(Y1.EQ.999.0)) GO TO 103
      NUM=UNUM
      GO TO 404
  401 READ (12,FMT,END = 40)  NUM,IY1
      IF ((NUM.EQ.999).AND.(IY1.EQ.999)) GO TO 103
      Y1 = IY1
  404 NUNK = NUNK + 1
      GO TO (5,7,5,6),IADJ
C  READ IN VARIABLE SAMPLE VOLUME WHEN IADJ=1 OR 3
    5 READ(13,151) VOL
  151 FORMAT(F11.4)
    6 XVOL=1.0/VOL
      IF (IADJ - 3) 8,7,8
C  READ IN VARIABLE PERCENT RECOVERY
    7 READ(14,151) RECVRY
      RECVRY = T8*(RECVRY-T7)/(T6-T7)
      XVOL = 1.0/RECVRY/VOL
    8 IF(IBACK.EQ.1) GO TO 9
      Y2 = (Y1-BCOUNT)/TBOUND
      GO TO 3
    9 Y2 = Y1/TBOUND
    3 IF(ABS(Y2-0.5)-0.5) 10,104,104
C  COMPUTE LN(X) USING REGRESSION EQUATION
   10 XXLN=(ALOG(Y2/(1.0-Y2))-YINT)/SLOPE
C
C  COMPUTE UPPER AND LOWER LIMITS FOR X
C
      STD = STDN * SQRT(VAR(Y2) * RESVAR)
      Y5 = Y2 + STD
      IF (Y5.GE.1.0) GO TO 11
      XLO = (ALOG(Y5/(1.0-Y5))-YINT)/SLOPE
      XLO = XVOL * EXP(XLO)
   11 Y6 = Y2 - STD
      IF (Y6.LE.0.0) GO TO 12
      XHI = (ALOG(Y6/(1.0-Y6))-YINT)/SLOPE
      XHI = XVOL*EXP(XHI)
   12 DOSE(IN) = XVOL * EXP(XXLN)
C
C  PRINT RESULTS OF INTERPOLATION
C
      GO TO (13,14,14,15),IADJ
   13 WRITE(IOUT,1020) NUNK,NUM,Y2,DOSE(IN),XLO,XHI,Y1,VOL
      GO TO 200
   14 WRITE(IOUT,1020) NUNK,NUM,Y2,DOSE(IN),XLO,XHI,Y1,VOL,RECVRY
      GO TO 200
   15 WRITE(IOUT,1020) NUNK,NUM,Y2,DOSE(IN),XLO,XHI,Y1
 1020 FORMAT(' ',I3,I6,T13,F7.4,T21,F9.3,T30,2(F10.4),T50,F7.0,
     X       T58,F7.3,T65,F8.3)
      GO TO 200
C
C  PRINT HEADING FOR EACH PAGE AND NEW BLOCK
C
  101 IPAGE = IPAGE + 1
  102 WRITE(IOUT,1000) IPAGE
  109 WRITE(IOUT,3001) IBLK
 3001 FORMAT('0',T20,'BLOCK OF DATA NUMBER',I3//)
 1000 FORMAT('1',T30,'-',I2,'-'/)
      LINE=0
      WRITE(IOUT,1001)
 1001 FORMAT (' ',T22,'POTENCY    LOWER     UPPER',
     X        T59,'SAMPLE  FRACTION'/'  N0    ID  UNKNOWN  ESTI',
     X        'MATE   LIMIT     LIMIT   COUNTS  VOLUME  RECOVERY'//)
      IF (ICODE-1) 1,1,300
C
C  END OF BLOCK ROUTINE
C
  103 IPAGE = 1
      IBLK = IBLK + 1
      DOSE(IN) = 99999.
      GO TO 102
C
C  PRINT OUT WHEN Y2 IS UNACCEPTABLE
C
  104 GO TO (105,106,106,107),IADJ
  105 WRITE(IOUT,1002) NUNK,NUM,Y2,Y1,VOL
 1002 FORMAT(' ',I3,I6,T13,F7.4,T50,F7.0,T58,F7.3,T65,F8.3)
      GO TO 108
  106 WRITE(IOUT,1002) NUNK,NUM,Y2,Y1,VOL,RECVRY
      GO TO 108
  107 WRITE(IOUT,1002) NUNK,NUM,Y2,Y1
  108 DOSE(IN) = 0.0
      GO TO 200
C
C  CHECK FOR END OF PAGE
C
  200 LINE = LINE +1
      IF (LINE.LT.50) GO TO 300
      GO TO 101
  300 CONTINUE
C
C  BEGIN GRAPH OF DOSE PEAK
C
   40 WRITE(IOUT,1031)
 1031 FORMAT(' ******')
      IBLK=1
      IBEG = 1
   42 IEND = NUNK
      HHI = 1.0
C  INITIALIZE PLOT VARIABLES
      CALL QKPLOT(SYM,6,51,0.0,2)
C
C  FIND THE GREATEST DOSE VALUE FOR THIS BLOCK
C
      DO 41 I = IBEG,NUNK
      IF (DOSE(I).EQ.99999.) GO TO 43
      IF (DOSE(I).LT.HHI) GO TO 41
      HHI = DOSE(I)
   41 CONTINUE
      GO TO  52
   43 IEND=I-1
C
C  SET THE HORIZONTAL MAX BASED ON THE MAX DOSE VALUE FOR THIS BLOCK
C
   52 F1 = ALOG(HHI)/LN10
      IF1 = F1
      F2 = EXP((F1 - IF1) * LN10)
      HHI = 10 * EXP(IF1 * LN10)
      IF (F2.GT.5.0) GO TO 48
      IF (F2.GT.2.0) GO TO 45
      HHI = HHI/5.0
      GO TO 48
   45 IF (F2.GT.2.5) GO TO 46
      HHI = HHI/4.0
      GO TO 48
   46 HHI = HHI/2.0
   48 DELH = HHI/50.
C  FILL HORIZONTAL LABEL ARRAY
      DO 50 I = 1,5
   50 LABH(I) = (I*10.*DELH) + 0.5
      I1 = IBEG - IBLK + 1
      I2 = IEND - IBLK + 1
      WRITE(IOUT,2000) IBLK,I1,I2
 2000 FORMAT('1',T25,'GRAPH FOR BLOCK OF DATA NUMBER',I4/,
     X      '0',T28,'UNKNOWNS NUMBER ',I3,' TO ',I4)
      WRITE(IOUT,2001) (LABH(I),I=1,5)
 2001 FORMAT ('0',T16,'0',T19,5(I10))
      WRITE(IOUT,2002) (HLINE(I),I=1,51)
 2002 FORMAT (15X,51A1)
      LINE = 1
C
C  CALCULATE THE RUNNING AVERAGE
C
      DO 60 I = IBEG,IEND
      PT(1) = DOSE(I)
      IF (I.EQ.IBEG) GO TO 54
      IF (I.EQ.IEND) GO TO 55
      PT(2) = (DOSE(I-1) + DOSE(I) + DOSE(I+1))/3.0
      GO TO 500
   54 PT(2) = (DOSE(I) + DOSE(I+1))/2.0
      GO TO 500
   55 PT(2) = (DOSE(I) + DOSE(I-1))/2.0
  500 IVAL=I-IBLK+1
C  IS THERE A VERTICAL LABEL FOR THIS LINE?
      IF (MOD(IVAL,5).EQ.0) GO TO 501
      MARK=.FALSE.
      GO TO 502
  501 VVAL=IVAL
      MARK=.TRUE.
  502 CALL LPLOT(VVAL)
   60 CONTINUE
      WRITE(IOUT,2002) (HLINE(I),I=1,51)
      WRITE(IOUT,2001) (LABH(I),I=1,5)
      IF (IEND-NUNK) 61,900,61
   61 IBEG = IEND + 2
      IBLK=IBLK + 1
      NUNK = NUNK + 1
      GO TO 42
  900 RETURN
      END


C
C                             DISCLAIMER
C
C    THIS PROGRAM AND ITS DOCUMENTATIVE BEEN PROVIDED BY THE
C    DIVISION OF COMPUTER RESEARCH AND TECHNOLOGY, NIH.  NO WARRANTY
C    IS EXPRESSED OR IMPLIED AS TO THE DOCUMENTATION, FUNCTION OR
C    PERFORMANCE OF THE PROGRAM.  THE USER OF THE PROGRAM IS EXPECTED
C    TO MAKE THE FINAL EVALUATION AS TO THE USEFULNESS OF THE PROGRAM
C    IN HIS OWN ENVIRONMENT.  THERE IS NO COMMITTED MAINTENANCE FOR
C    THE PROGRAM.
C
C
      SUBROUTINE LIMIT
C
C  COMMON BLOCK
C
      COMMON SUMXX,SUMYY,SUMXY,ARNDX,Z1,
     X       ARNDY,TCOUNT,BCOUNT,TIME,TBOUND,V1,V2,V3,IBACK,
     X       MODEL,STDN,N,VOL,IADJ,T6,T7,T8,ANTI,RVOL,WEIGHT,TEMP,
     X       IMACH,BEGBT,TRUCNT,SLOPE,YINT,RESVAR,SUMX,SUMY,XMEAN,
     X       YMEAN,SIGMAX,SIGMAY,RHO,ERRSLP,ERRINT,ADJ1,ADJ2,ADJ3,
     X       KK1,KK,MARK,DELH,HALF,HLINE(61),PT(9),X(200),Y(200),
     X       XLN(200),YLOGIT(200),TRUEY(200),OVRLY(1000)
C
C   DATA INITIALIZATION
C   FOR COMMON
C
      DOUBLE PRECISION SUMXX,SUMYY,SUMXY,ARNDX,ARNDY,Z1
      LOGICAL MARK
C
C  THIS SUBROUTINE PREPARES VALUES FOR THE GRAPH OF UPPER
C  AND LOWER 95 PERCENT CONFIDENCE LIMITS.  Y RANGES FROM
C  0.00 TO 1.00 IN INCREMENTS OF 0.05
C
C
C  INITIALIZE DATA
C
      DIMENSION SYM(2)
      DIMENSION HLAB(3)
      DATA HLAB/' 0.0',' 1.0',' 2.0'/
      DATA SYM/'(',')'/
C
C  BEGIN CALCULATIONS
C
      WRITE(IOUT,1001)
 1001 FORMAT('1',T15,'GRAPH OF UPPER AND LOWER 95 PERCENT CONFIDENCE ',
     X       'LIMITS'/,
     X       ' ',T18,'EXPRESSED AS A FRACTION OF THE POTENCY ESTIMATE'/,
     X       ' ',T18,'VERSUS THE POSITION ON THE DOSE-RESPONSE CURVE'/,
     X       ' ',T23,'IN TERMS OF THE RESPONSE VARIABLE Y'///)
      WRITE (IOUT,1002) (HLAB(I),I=1,3)
 1002 FORMAT(' ',T14,3(A4,21X))
      WRITE(IOUT,1003) (HLINE(I),I=1,51)
 1003 FORMAT(15X,51A1)
C  INITIALIZE PLOT VARIABLES
      CALL QKPLOT(SYM,5,51,0.0,2)
      DELH = 0.04
      DO 100 I=1,21
      YY = (I-1) * 0.05
      IF(I.GT.1.AND.I.LT.21) GO TO 5
      PT(1) = 0.0
      PT(2) = 999999.
      GO TO 40
C  INTERPOLATE FOR X
    5 X1 = EXP((ALOG(YY/(1.0-YY))-YINT)/SLOPE)
      STD = SQRT(VAR(YY)*RESVAR)*STDN
C  CALCULATE UPPER AND LOWER Y
      YHI = YY + STD
      YLO = YY - STD
C  INTERPOLATE XLO USING YHI
      IF (YHI.LT.1.0) GO TO 10
      XLO = 0.0
      GO TO 11
   10 YHI = ALOG(YHI/(1.0-YHI))
      XLO = EXP((YHI-YINT)/SLOPE)
C  INTERPOLATE XHI USING YLO
   11 IF (YLO.GT.0.0) GO TO 20
      XHI = 999999.
      GO TO 30
   20 YLO = ALOG(YLO/(1.0-YLO))
      XHI = EXP((YLO - YINT)/SLOPE)
C  CALCULATE FRACTION OF THE POTENCY ESTIMATE
   30 PT(1) = XLO/X1
      PT(2) = XHI/X1
C  IS THERE A LABEL FOR THIS LINE
   40 IF (MOD(I,5).EQ.1) GO TO 42
      MARK=.FALSE.
      GO TO 43
   42 MARK=.TRUE.
      YY = YY + 0.005
   43 CALL LPLOT(YY)
      IF (I.NE.11) GO TO 100
      WRITE(IOUT,1004)
 1004 FORMAT('+  Y')
  100 CONTINUE
      WRITE(IOUT,1003) (HLINE(I),I=1,51)
      WRITE (IOUT,1002) (HLAB(I),I=1,3)
      RETURN
      END


C
C                             DISCLAIMER
C
C    THIS PROGRAM AND ITS DOCUMENTATION HAVE BEEN PROVIDED BY THE
C    DIVISION OF COMPUTER RESEARCH AND TECHNOLOGY, NIH.  NO WARRANTY
C    IS EXPRESSED OR IMPLIED AS TO THE DOCUMENTATION, FUNCTION OR
C    PERFORMANCE OF THE PROGRAM.  THE USER OF THE PROGRAM IS EXPECTED
C    TO MAKE THE FINAL EVALUATION AS TO THE USEFULNESS OF THE PROGRAM
C    IN HIS OWN ENVIRONMENT.  THERE IS NO COMMITTED MAINTENANCE FOR
C    THE PROGRAM.
C
C
      SUBROUTINE ORDER(XX,YY)
C
C  COMMON AREA
C
      COMMON SUMXX,SUMYY,SUMXY,ARNDX,Z1,
     X       ARNDY,TCOUNT,BCOUNT,TIME,TBOUND,V1,V2,V3,IBACK,
     X       MODEL,STDN,N,VOL,IADJ,T6,T7,T8,ANTI,RVOL,WEIGHT,TEMP,
     X       IMACH,BEGBT,TRUCNT,SLOPE,YINT,RESVAR,SUMX,SUMY,XMEAN,
     X       YMEAN,SIGMAX,SIGMAY,RHO,ERRSLP,ERRINT,ADJ1,ADJ2,ADJ3,
     X       KK1,KK,MARK,DELH,HALF,HLINE(61),PT(9),X(200),Y(200),
     X       XLN(200),YLOGIT(200),TRUEY(200),OVRLY(1000)
C
C   DATA INITIALIZATION
C   FOR COMMON
C
      DOUBLE PRECISION SUMXX,SUMYY,SUMXY,ARNDX,ARNDY,Z1
      LOGICAL MARK
C
C  THIS SUBROUTINE ARRANGES THE VALUES IN AN ARRAY XX INTO
C  ASCENDING ORDER.  THE VALUES IN XX AND YY ARE RELATED PAIRS,
C  SO WHENEVER AN XX IS RE-POSITIONED, THE RELATED VALUE IN YY
C  IS MOVED ACCORDINGLY.
C
      DIMENSION XX(200),YY(200)
      LOOP1 = N - 1
      DO 10 I = 1,LOOP1
      JJ = I + 1
      DO 10 J = JJ,N
         IF (XX(J) - XX(I)) 1,10,10
    1    HOLD = XX(I)
         XX(I) = XX(J)
         II = I + 1
         DO 2  K = II,J
            HOLD2 = XX(K)
            XX(K) = HOLD
            HOLD = HOLD2
    2       CONTINUE
         HOLD = YY(I)
         YY(I) = YY(J)
         DO 3 K = II,J
            HOLD2 = YY(K)
            YY(K) = HOLD
            HOLD= HOLD2
    3       CONTINUE
   10       CONTINUE
      RETURN
      END


C
C                             DISCLAIMER
C
C    THIS PROGRAM AND ITS DOCUMENTATION HAVE BEEN PROVIDED BY THE
C    DIVISION OF COMPUTER RESEARCH AND TECHNOLOGY, NIH.  NO WARRANTY
C    IS EXPRESSED OR IMPLIED AS TO THE DOCUMENTATION, FUNCTION OR
C    PERFORMANCE OF THE PROGRAM.  THE USER OF THE PROGRAM IS EXPECTED
C    TO MAKE THE FINAL EVALUATION AS TO THE USEFULNESS OF THE PROGRAM
C    IN HIS OWN ENVIRONMENT.  THERE IS NO COMMITTED MAINTENANCE FOR
C    THE PROGRAM.
C
C
      SUBROUTINE POINTS(ITYPE,/YY/)
C
C  DIMENSION ARRAYS
C
      DIMENSION YLAB1(7),YLAB2(6)
      DIMENSION NINT(3),BEG(3),END(3)
      DIMENSION SYM(9)
      DIMENSION LAB(7)
      DIMENSION ARITHX(7)
      DIMENSION YY(200)
C
C  COMMON BLOCK
C
      COMMON SUMXX,SUMYY,SUMXY,ARNDX,Z1,
     X       ARNDY,TCOUNT,BCOUNT,TIME,TBOUND,V1,V2,V3,IBACK,
     X       MODEL,STDN,N,VOL,IADJ,T6,T7,T8,ANTI,RVOL,WEIGHT,TEMP,
     X       IMACH,BEGBT,TRUCNT,SLOPE,YINT,RESVAR,SUMX,SUMY,XMEAN,
     X       YMEAN,SIGMAX,SIGMAY,RHO,ERRSLP,ERRINT,ADJ1,ADJ2,ADJ3,
     X       KK1,KK,MARK,DELH,HALF,HLINE(61),PT(9),X(200),Y(200),
     X       XLN(200),YLOGIT(200),TRUEY(200),XHOLD(200),YHOLD(200),
     X       OVRLY(600)
C
C   DATA INITIALIZATION
C   FOR COMMON
C
      DOUBLE PRECISION SUMXX,SUMYY,SUMXY,ARNDX,ARNDY,Z1
      LOGICAL MARK
C
C  THIS SUBROUTINE PREPARES THE VALUES TO BE PLOTTED FOR THE
C  STANDARD CURVES.
C
C       ITYPE             GRAPH ID
C
C          1        LOG10(X) VS. LOGIT(Y)
C          2        LOG10(X) VS. ARITHMETIC Y
C          3        ARITHMETIC X VS. ARITHMETIC Y
C
C  YY IS THE Y VALUE ARRAY CONTAINING THE STANDARD VALUES
C  TO BE PLOTTED AROUND THE REGRESSION LINE FOR THE CURRENT
C  GRAPH.  IT WILL BE PASSED TO QKPLOT.
C
C
C  SPECIFY VARIABLE TYPES
C
      REAL LN10,LABEL
      LOGICAL SKIP
C
C  VARIABLES INITIALIZED ON ENTRY
C
      DATA NINT/60,50,50/,BEG/-3.0,0.0,0.0/,END/3.0,1.0,1.0/
      DATA SYM/'+',')','(','*','*','*','*','*','*'/
      DATA YLAB1/'-3.0','-2.0','-1.0',' 0.0',' 1.0',' 2.0',' 3.0'/
      DATA YLAB2/'  0 ','  20','  40','  60','  80',' 100'/
      LN10 = ALOG(10.0)
      B110 = SLOPE * LN10
      SKIP=.FALSE.
C
C  INDENTIFY CURRENT ENTRY
C
      IF(ITYPE-2) 1,2,3
    2 SKIP=.TRUE.
      GO TO 13
C
C  SET CONSTANTS FOR GRAPH 1 AND 2
C  XMIN AND XMAX ARE LOG10 VALUES
C
    1 XMIN = (INT(20.*(3.0-YINT)/B110))/20.
      XMAX = (INT(20.*(-3.0-YINT)/B110))/20.
      DELX = 0.05
      HALF = (0.05 * LN10)/2.0
   13 IXAV = XMIN
      IF (XMIN) 15,14,14
   14 IXAV = IXAV + 1
   15 INC = 1
      GO TO 10
C
C  SET CONSTANTS FOR GRAPH 3
C  XMIN AND XMAX ARE ARITHMETIC VALUES
C
    3 XMIN = 0
      ESTMAX = ((-1.5-YINT)/B110) - ALOG10(50.0)
      IESTMX = ESTMAX
      DELX = EXP((ESTMAX-IESTMX)*LN10)
      IDELX = DELX/2.5
      IF (IDELX - 1) 6,7,8
    6 DELX = EXP(LN10 * IESTMX)
      GO TO 9
    7 DELX = 2.5 * EXP(LN10 * IESTMX)
      GO TO 9
    8 DELX = 5.0 * EXP(LN10*IESTMX)
    9 HALF = DELX/2.0
      XMAX = 50. * DELX
C
C  SET CONSTANTS USED BY ALL GRAPH ROUTINES
C
   10 INTX = ((XMAX-XMIN)/DELX) + 1.5
      LABX = INTX/2
      KK1 = 1
      KK=1
      INTY = NINT(ITYPE)
      YLO=BEG(ITYPE)
      DELH = (END(ITYPE)-YLO)/INTY
      INTY=INTY+1
C
C  PRINT OUT HEADER LABELS
C
      IF(ITYPE-2)  111,119,119
  111 WRITE(IOUT,1020)
 1020 FORMAT ('1',41X,'LOGIT(Y)')
  120 WRITE(IOUT,1001) (YLAB1(I),I=1,7)
      GO TO 121
  119 WRITE(IOUT,1021)
 1021 FORMAT ('1',39X,'Y')
      WRITE(IOUT,1001) (YLAB2(I),I=1,6)
 1001 FORMAT(13X,7(A4,6X))
  121 WRITE(IOUT,1003) (HLINE(I),I=1,INTY)
 1003 FORMAT(15X,61A1)
C  CALL QKPLOT TO SET CONTROL VARIABLES FOR PLOT
      CALL QKPLOT(SYM,ITYPE,INTY,YLO,4)
C
C  INCREMENT FROM XMIN TO XMAX BY DELX TO GET POINTS FOR GRAPH
C
      DO 100 I = 1,INTX
      IF (SKIP) GO TO 203
      XP1 = XMIN +(I-1)*DELX
      IF(ITYPE-3) 23,21,23
   21 IF(I-1) 22,22,26
C  CONVERT ARITH-X TO LN(X)
   26 XP=ALOG(XP1)
      GO TO 27
   22 ARITHY = 1.0
      GO TO 28
  203 XP=XHOLD(I)
      ARITHY=YHOLD(I)
      XP1 = XP
      GO TO 28
C  CONVERT LOG10(X) TO LN(X)
   23 XP = XP1*LN10
      XP1 = XP1 + 0.005
      IF (XP1.LT.IXAV) GO TO 27
      LAB(INC) = I
      ARITHX(INC) = EXP(XP)
C
C  COMPUTE LOGIT(Y) AND ARITH-Y
C
   27 YLOG=YINT+SLOPE*XP
      ARITHY = 1.0/(1.0+EXP(-YLOG))
      IF(ITYPE.EQ.1) GO TO 25
   28 PT(1) = ARITHY
      GO TO 24
   25 PT(1) = YLOG
      YHOLD(I) = ARITHY
      XHOLD(I) = XP
C
C  CALCULATE UPPER AND LOWER BOUND USING ARITHMETIC Y
C
   24 STD = SQRT(VAR(ARITHY)*RESVAR) * STDN
      PT(2) = ARITHY +STD
      PT(3) = ARITHY - STD
C
C  TEST BOUNDS FOR ACCEPTABLE Y AND LOGIT-Y WHEN ITYPE=1
C
      IF(ITYPE-1) 30,30,40
   30 PT2 = PT(2)
      PT3 = PT(3)
      IF(PT2-1.0) 32,31,31
   32 PT2 = ALOG(PT2/(1.0-PT2))
      GO TO 33
   31 PT2 = 100000.
   33 IF(PT3.GT.0.0) GO TO 34
      PT3 = 100000.
      GO TO 39
   34 PT3 = ALOG(PT3/(1.0-PT3))
   39 PT(2) = PT2
      PT(3) = PT3
C
C  PRINT OUT THE GRAPH
C
   40 MARK=.FALSE.
      IF (ITYPE.EQ.3) GO TO 137
C
C  PRINT ROUTINE FOR GRAPHS 1 AND 2
C
      IF(I.NE.LAB(INC)) GO TO 132
      MARK=.TRUE.
  132 CALL LPLOT(ARITHX(INC),XP,XLN,YY)
      IF (.NOT.MARK) GO TO 135
      IF (ITYPE.EQ.2) GO TO 133
      WRITE(IOUT,1031) IXAV
 1031 FORMAT('+',T78,I2,'.00')
      GO TO 134
  133 WRITE(IOUT,1032) IXAV
 1032 FORMAT ('+',T68,I4,'.00')
  134 IXAV = IXAV + 1
      INC = INC + 1
      IF (I.EQ.LABX) LABX = LABX + 1
      GO TO 100
  135 IF(I.NE.LABX) GO TO 100
      IF (ITYPE.EQ.2) GO TO 136
      WRITE(IOUT,1034)
 1034 FORMAT('+  X',T78,'LOG10(X)')
      GO TO 100
  136 WRITE(IOUT,1035)
 1035 FORMAT('+  X',T70,'LOG10(X)')
      GO TO 100
C
C  PRINT ROUTINE FOR GRAPH 3
C
  137 IF(MOD(I,5).NE.1) GO TO 139
      MARK = .TRUE.
      XVAL = (I-1) * DELX +0.005
  139 CALL LPLOT(XVAL,XP1,X,Y)
      IF (I.NE.23) GO TO 100
      WRITE(IOUT,1044)
 1044 FORMAT('+  X')
  100 CONTINUE
C
C  PRINT TRAILER LABELS
C
      WRITE(IOUT,1003) (HLINE(I),I=1,INTY)
      IF (ITYPE.EQ.1) GO TO 141
      WRITE(IOUT,1001) (YLAB2(I),I=1,6)
      GO TO 143
  141 WRITE(IOUT,1001) (YLAB1(I),I=1,7)
  143 RETURN
      END


C
C                             DISCLAIMER
C
C    THIS PROGRAM AND ITS DOCUMENTATION HAVE BEEN PROVIDED BY THE
C    DIVISION OF COMPUTER RESEARCH AND TECHNOLOGY, NIH.  NO WARRANTY
C    IS EXPRESSED OR IMPLIED AS TO THE DOCUMENTATION, FUNCTION OR
C    PERFORMANCE OF THE PROGRAM.  THE USER OF THE PROGRAM IS EXPECTED
C    TO MAKE THE FINAL EVALUATION AS TO THE USEFULNESS OF THE PROGRAM
C    IN HIS OWN ENVIRONMENT.  THERE IS NO COMMITTED MAINTENANCE FOR
C    THE PROGRAM.
C
C
      SUBROUTINE QKPLOT(SYM,ID,INTH,HLO,M)
C
C  COMMON BLOCK
C
      COMMON SUMXX,SUMYY,SUMXY,ARNDX,Z1,
     X       ARNDY,TCOUNT,BCOUNT,TIME,TBOUND,V1,V2,V3,IBACK,
     X       MODEL,STDN,N,VOL,IADJ,T6,T7,T8,ANTI,RVOL,WEIGHT,TEMP,
     X       IMACH,BEGBT,TRUCNT,SLOPE,YINT,RESVAR,SUMX,SUMY,XMEAN,
     X       YMEAN,SIGMAX,SIGMAY,RHO,ERRSLP,ERRINT,ADJ1,ADJ2,ADJ3,
     X       KK1,KK,MARK,DELH,HALF,HLINE(61),PT(9),X(200),Y(200),
     X       XLN(200),YLOGIT(200),TRUEY(200),OVRLY(1000)
C
C   DATA INITIALIZATION
C   FOR COMMON
C
      DOUBLE PRECISION SUMXX,SUMYY,SUMXY,ARNDX,ARNDY,Z1
      LOGICAL MARK
C
C  THIS SUBROUTINE IS CALLED BY ALL THE GRAPH ROUTINES TO PLOT
C  THE VALUES IN ARRAY PT FOR A SUNGLE LINE.  ENTRY POINT QKPLOT
C  IS A DUMMY ENTRY TO INITIALIZE THE CONTROL VARIABLES FOR THE
C  CURRENT GRAPH.  ENTRY POINT LPLOT IS CALLED TO ACTUALLY PLOT
C  THE LINE.
C
C        SYM         ARRAY OF PLOT SYMBOLS TO BE USED FOR THIS GRAPH
C
C        VVAL        THE VERTICAL SCALE VALUE (NUMERIC) TO BE PRINTED
C                    AS A LABEL FOR THE LINE
C
C        ID          GRAPH IDENTIFIER
C                    1   LOG10(X) VS. LOGIT(Y)
C                    2   LOG10(X) VS. ARITHMETIC Y
C                    3   ARITHMETIC X VS. ARITHMETIC Y
C                    4   SCATCHARD PLOT
C                    5   C.L. GRAPH
C                    6   RUNNING AVERAGE OF DOSE
C
C        INTH        NUMBER OF INTERVALS ON HORIZONTAL AXIS
C
C        HLO         MINIMUM HORIZONTAL VALUE
C
C        M           FOR GRAPHS 5-6, THE NUMBER OF POINTS TO BE
C                    PLOTTED ON THE LINE.
C                    FOR GRAPHS 1-4, THE NEXT INDEX AVAILABLE IN PT
C                    MM IS SET TO M ON ENTRY.  MM WILL BE RESET FOR
C                    GRAPHS 1-4 TO INDICATE THE TOTAL NUMBER OF POINTS
C                    TO BE PLOTTED ON THE LINE.
C
C             PARAMETERS USED FOR GRAPHS 1-4 ONLY
C
C        POINT       THE CURRENT COMPUTED X(VERTICAL) VALUE
C
C        XX          THE X ARRAY CONTAINING OBSERVED VALUES
C                    FOR THIS GRAPH.
C
C        YY          THE Y ARRAY OF OBSERVED VALUES FOR THIS GRAPH.
C
      DIMENSION SYM(2)
      DIMENSION XX(200),YY(200)
      DIMENSION XPLOT(61)
      DATA SYMX/'X'/,DASH/'-'/,BLNK/' '/,DOT/'.'/
      DATA STAR/'*'/
      RETURN
C
C  ENTRY POINT TO PRINT A LINE
C
      ENTRY LPLOT(VVAL,/POINT/,/XX/,/YY/)
C
C  CLEAR XPLOT ARRAY FOR THIS LINE
C
      MM=M
      DO  1 I = 1,INTH
    1 XPLOT(I) = BLNK
      IF (ID - 5) 4,8,11
C
C  GET OBSERVED VALUES TO BE PLOTTED FOR GRAPHS 1-4
C
    4 DO 6 I = KK1,N
      IF (MM.EQ.10) GO TO 7
      IF (XX(I) - POINT.GT.HALF) GO TO 7
      IF (POINT - XX(I).GE.HALF) GO TO 5
      PT(MM) = YY(I)
      MM = MM + 1
    5 KK = I + 1
    6 CONTINUE
    7 KK1 = KK
      MM = MM-1
      GO TO 11
C  SET CONSTANT STAR FOR GRAPH 5
    8 XPLOT(26) = STAR
C
C  POSITION Y VALUES ACROSS THE LINE
C
   11 DO 20 I = 1,MM
      IF(PT(I) .EQ. 100000.0) GO TO 20
      K = INT((PT(I) - HLO + (DELH/2.0))/DELH) + 1
      IF (K.LT.1) GO TO 20
      IF (INTH.LT.K) GO TO 20
      IF (XPLOT(K).NE.BLNK) GO TO 14
      XPLOT(K) = SYM(I)
      GO TO 20
   14 XPLOT(K) = SYMX
   20 CONTINUE
C  IS THERE A HORIZONTAL LABEL FOR THIS LINE?
      IF (MARK) GO TO 45
      WRITE(IOUT,3000) DOT,(XPLOT(I),I = 1,INTH),DOT
 3000 FORMAT(14X,63A1)
      RETURN
   45 WRITE(IOUT,3001) VVAL,DASH,(XPLOT(I),I = 1,INTH),DASH
 3001 FORMAT(4X,F9.2,1X,63A1)
      RETURN
      END


C
C                             DISCLAIMER
C
C    THIS PROGRAM AND ITS DOCUMENTATION HAVE BEEN PROVIDED BY THE
C    DIVISION OF COMPUTER RESEARCH AND TECHNOLOGY, NIH.  NO WARRANTY
C    IS EXPRESSED OR IMPLIED AS TO THE DOCUMENTATION, FUNCTION OR
C    PERFORMANCE OF THE PROGRAM.  THE USER OF THE PROGRAM IS EXPECTED
C    TO MAKE THE FINAL EVALUATION AS TO THE USEFULNESS OF THE PROGRAM
C    IN HIS OWN ENVIRONMENT.  THERE IS NO COMMITTED MAINTENANCE FOR
C    THE PROGRAM.
C
C
      SUBROUTINE REGRES(C1,D1)
C
C  COMMON BLOCK
C
      COMMON SUMXX,SUMYY,SUMXY,ARNDX,Z1,
     X       ARNDY,TCOUNT,BCOUNT,TIME,TBOUND,V1,V2,V3,IBACK,
     X       MODEL,STDN,N,VOL,IADJ,T6,T7,T8,ANTI,RVOL,WEIGHT,TEMP,
     X       IMACH,BEGBT,TRUCNT,SLOPE,YINT,RESVAR,SUMX,SUMY,XMEAN,
     X       YMEAN,SIGMAX,SIGMAY,RHO,ERRSLP,ERRINT,ADJ1,ADJ2,ADJ3,
     X       KK1,KK,MARK,DELH,HALF,HLINE(61),PT(9),X(200),Y(200),
     X       XLN(200),YLOGIT(200),TRUEY(200),OVRLY(1000)
C
C   DATA INITIALIZATION
C   FOR COMMON
C
      DOUBLE PRECISION SUMXX,SUMYY,SUMXY,ARNDX,ARNDY,Z1
      LOGICAL MARK
C
C  THIS SUBROUTINE PERFORMS THE CALCULATIONS FOR THE REGRESSION
C  ANALYSIS.  IT HAS THREE ENTRY POINTS.
C
C     REGRES    -    PERFORMS THE NECESSARY SUMMING FOR AN UNWEIGHTED
C                    REGRESSION THROUGH REPEATED CALLS.
C
C     CAL       -    PERFORMS THE REGRESSION ANALYSIS FOR A SINGLE
C                    ITERATION. (WEIGHTED OR UNWEIGHTED)
C
C     SCTCAL    -    A SEPARATE ENTRY FOR THE SCATCHARD PLOT ROUTINE.
C                    USES THE PREVIOUSLY CALCULATED RESULTS TO
C                    COMPLETE THE REGRESSION FOR AMOUNT BOUND ON B/F.
C                    (WHEN CAL IS CALLED BY SCAT, THE REGRESSION IS
C                    PERFORMED FOR B/F ON AMOUNT BOUND.)
C
	IF(IPLACE.EQ.1)CONTINUE
	IF(IPLACE.EQ.2)GO TO 10
	IF(IPLACE.EQ.3)GO TO 20
      SUMX = SUMX + C1
      SUMXX = SUMXX + C1 * C1
      SUMY = SUMY + D1
      SUMYY = SUMYY + D1 * D1
      SUMXY = SUMXY + C1 * D1
      RETURN
C
C  SECOND ENTRY POINT - CAL
C
10      XMEAN = SUMX/W1
      YMEAN = SUMY/W1
      ARNDX = SUMXX - SUMX * XMEAN
      ARNDY = SUMYY -SUMY * YMEAN
      Z1 = SUMXY - SUMX * YMEAN
      SIGMAX = DSQRT(ARNDX/(RNUM-1.0))
      SIGMAY = DSQRT(ARNDY/(RNUM-1.0))
      B2 = Z1/ARNDX
      A2 = YMEAN - B2 * XMEAN
      R2 = (ARNDY - B2*B2*ARNDX)/(RNUM-2.0)
      RHO = Z1/DSQRT(ARNDX*ARNDY)
       ERRSLP = DSQRT(R2/ARNDX)
       ERRINT = DSQRT(R2 * (1.0/W1 + XMEAN*XMEAN/ARNDX))
      RETURN
C
C  COMPLETE EXTRA CALCULATIONS FOR SCATCHARD PLOT
C  THIRD ENTRY POINT - SCTCAL
C
   20 B2 = Z1/ARNDY
      A2 = XMEAN - B2*YMEAN
      R2 = (ARNDX - B2*B2*ARNDY)/(RNUM-2.0)
      ERRSLP = DSQRT(R2/ARNDY)
      ERRINT = DSQRT(R2 *(1.0/W1 + YMEAN*YMEAN/ARNDY))
      RETURN
      END


C
C                             DISCLAIMER
C
C    THIS PROGRAM AND ITS DOCUMENTATION HAVE BEEN PROVIDED BY THE
C    DIVISION OF COMPUTER RESEARCH AND TECHNOLOGY, NIH.  NO WARRANTY
C    IS EXPRESSED OR IMPLIED AS TO THE DOCUMENTATION, FUNCTION OR
C    PERFORMANCE OF THE PROGRAM.  THE USER OF THE PROGRAM IS EXPECTED
C    TO MAKE THE FINAL EVALUATION AS TO THE USEFULNESS OF THE PROGRAM
C    IN HIS OWN ENVIRONMENT.  THERE IS NO COMMITTED MAINTENANCE FOR
C    THE PROGRAM.
C
C
      SUBROUTINE SCAT
C
C  COMMON BLOCK
C
      COMMON SUMXX,SUMYY,SUMXY,ARNDX,Z1,
     X       ARNDY,TCOUNT,BCOUNT,TIME,TBOUND,V1,V2,V3,IBACK,
     X       MODEL,STDN,N,VOL,IADJ,T6,T7,T8,ANTI,RVOL,WEIGHT,TEMP,
     X       IMACH,BEGBT,TRUCNT,SLOPE,YINT,RESVAR,SUMX,SUMY,XMEAN,
     X       YMEAN,SIGMAX,SIGMAY,RHO,ERRSLP,ERRINT,ADJ1,ADJ2,ADJ3,
     X       KK1,KK,MARK,DELH,HALF,HLINE(61),PT(9),X(200),Y(200),
     X       XLN(200),YLOGIT(200),TRUEY(200),BND(200),BFREE(200),
     X       OVRLY(600)
C
C   DATA INITIALIZATION
C   FOR COMMON
C
      DOUBLE PRECISION SUMXX,SUMYY,SUMXY,ARNDX,ARNDY,Z1
      LOGICAL MARK
C
C  THIS SUBROUTINE PERFORMS UNWEIGHTED REGRESSION OF B/F RATIO
C  ON AMOUNT BOUND AND AMOUNT BOUND ON B/F RATIO.  THE RESULTS
C  OF THE REGRESSION OF B/F ON AMOUNT BOUND ARE USED TO OBTAIN
C  THE SCATCHARD PLOT.
C
      REAL K1,K2,LOG2
      DIMENSION HLAB(5),SYM(9)
      DATA HEND/0.25/
      DATA SYM/'+',8*'*'/
      LOG2 = ALOG(2.0)
C  CLEAR SUM VARIABLES
      SUMX = 0.0
      SUMXX = 0.0
      SUMY = 0.0
      SUMYY = 0.0
      SUMXY = 0.0
      WRITE(IOUT,3000)
 3000 FORMAT('1',T13,'TABLE OF VALUES COMPUTED FOR SCATCHARD PLOT'//,
     X  '0',T5,'             B/T       B/F       AMOUNT    AMOUNT'/,
     X  ' ',T5,'DOSE(X)     RATIO     RATIO      BOUND     UNBOUND',
     X         '     TOTAL'/,
     X  ' ',T5,'-------     -----     -----      ------    -------',
     X         '     -----'/)
C  COMPUTE RATIOS AND AMOUNT BOUND FOR ZERO DOSE
      HOLD1 = 0.0
      BFVAL = BEGBT/(1.0-BEGBT)
      BNDVAL = BEGBT * ANTI
      UNBND = ANTI - BNDVAL
      WRITE(IOUT,3001) HOLD1,BEGBT,BFVAL,BNDVAL,UNBND,ANTI
C  READ ADJUSTED Y - (WITH BACKGROUND SUBTRACTED)
      DO 100 I = 1,N
      YY = TRUEY(I)/TRUCNT
      BFVAL = YY/(1.0-YY)
      TOTAL=X(I) + ANTI
      BNDVAL = YY * TOTAL
      UNBND = TOTAL - BNDVAL
      BFREE(I) = BFVAL
      BND(I) = BNDVAL
C  GET NECESSARY SUMS FOR THE REGRESSION
      CALL REGRES (BNDVAL,BFVAL)
      WRITE (IOUT,3001) X(I),YY,BFVAL,BNDVAL,UNBND,TOTAL
 3001 FORMAT(' ',T3,F8.1,T13,2(F10.5),2(F11.5),F12.5)
  100 CONTINUE
      W1 = N
	IPLACE=2
      CALL CAL(C1,D1,W1,W1,A3,B3,R3,IPLACE)
C
C  PRINT RESULTS OF REGRESSION  - B/F ON BOUND
C
      K1 = (-B3*WEIGHT*RVOL)/1000.
      Q1 = A3/K1
      FEC = (TEMP*ALOG(K1))
      WRITE(IOUT,1000)
 1000 FORMAT('1UNWEIGHTED REGRESSION OF B/F RATIO ON AMOUNT BOUND')
      WRITE(IOUT,1001) K1,Q1,FEC
 1001 FORMAT('0',T5,'ESTIMATE OF K-EQ = ',E12.5,' LITERS/MOLE'/
     X       ' ',T5,'ESTIMATE OF BINDING CAPACITY Q =',E12.5,
     X       ' MOLES/LITER'/,
     X       ' ',T5,'DELTA F = R T LN(K) = FREE ENERGY CHANGE =',
     X       F12.5,' KCAL/MOLE')
      WRITE(IOUT,1002) YMEAN,SIGMAY
 1002 FORMAT('0MEAN B/F = ',12X,F12.6,5X,'SIGMA B/F =       ',F12.6)
      WRITE(IOUT,1003) XMEAN,SIGMAX
 1003 FORMAT(' MEAN BOUND = ',10X,F12.6,5X,'SIGMA BOUND =     ',F12.6)
      WRITE(IOUT,1004) RHO
 1004 FORMAT(' CORRELATION COEFFICIENT - RHO =',T60,F12.6)
      HOLD2 = ERRSLP/B3
      WRITE(IOUT,1005)  B3,ERRSLP,HOLD2
 1005 FORMAT('0SLOPE = ',15X,F12.6,5X,'SIGMA SLOPE =     ',F12.6/,
     X       ' COEFFICIENT OF VARIATION OF SLOPE =',T60,F12.6)
      WRITE(IOUT,1006) A3,ERRINT
 1006 FORMAT(' B/F INTERCEPT = ',7X,F12.6,5X,'SIGMA INTERCEPT = ',F12.6)
      BINT = -A3/B3
      WRITE(IOUT,1007) BINT
 1007 FORMAT(' BOUND INTERCEPT = ',5X,F12.6)
      WRITE(IOUT,1008) R3
 1008 FORMAT(' RESIDUAL VARIANCE = ',3X,F12.6)
C
C  PRINT RESULTS OF REGRESSION - BOUND ON B/F
C
	IPLACE=3
      CALL SCTCAL(C1,D1,W1,W1,A2,B2,R2,IPLACE)
      WRITE(IOUT,1009)
 1009 FORMAT('-UNWEIGHTED REGRESSION OF AMOUNT BOUND ON B/F RATIO')
      HOLD1 = (WEIGHT*RVOL)/1000.
      K2 = -HOLD1/B2
      Q2 = A2/HOLD1
      FEC = -(TEMP*ALOG(K2))
      WRITE(IOUT,1001) K2,Q2,FEC
      KK1 = 1
      KK = 1
C  FILL HORIZONTAL LABEL ARRAY
      DO 110 I = 1,5
  110 HLAB(I) =(I * DELH10) + 0.005
      WRITE(IOUT,2000)
 2000 FORMAT('1',31X,'SCATCHARD PLOT'//,34X,'B/F RATIO'/)
      WRITE(IOUT,2001) (HLAB(I),I=1,5)
 2001 FORMAT(14X,'0.00',T23,5(F6.2,4X))
      WRITE(IOUT,2002) (HLINE(I),I = 1,51)
 2002 FORMAT(15X,51A1)
C  INITIALIZE PLOT VARIABLES
      CALL QKPLOT(SYM,4,51,0.0,2)
      DO 200 I = 1,INTV
      MM = 2
      XX = (I-1) * DELV
      PT(1) = A3 + (B3*XX)
C  IS THERE A VERTICAL LABEL FOR THIS LINE
      IF (MOD(I,5).EQ.1) GO TO 135
      MARK=.FALSE.
      GO TO 140
  135 MARK = .TRUE.
      VVAL = XX + 0.005
  140 CALL LPLOT(VVAL,XX,BND,BFREE)
      IF(I.NE.14) GO TO 200
      WRITE(IOUT,2003)
 2003 FORMAT('+AMOUNT BOUND')
  200 CONTINUE
      WRITE(IOUT,2002) (HLINE(I),I=1,51)
      WRITE(IOUT,2001) (HLAB(I),I=1,5)
      RETURN
      END


C
C                             DISCLAIMER
C
C    THIS PROGRAM AND ITS DOCUMENTATION HAVE BEEN PROVIDED BY THE
C    DIVISION OF COMPUTER RESEARCH AND TECHNOLOGY, NIH.  NO WARRANTY
C    IS EXPRESSED OR IMPLIED AS TO THE DOCUMENTATION, FUNCTION OR
C    PERFORMANCE OF THE PROGRAM.  THE USER OF THE PROGRAM IS EXPECTED
C    TO MAKE THE FINAL EVALUATION AS TO THE USEFULNESS OF THE PROGRAM
C    IN HIS OWN ENVIRONMENT.  THERE IS NO COMMITTED MAINTENANCE FOR
C    THE PROGRAM.
C
C
      FUNCTION VAR(YP)
C
C  COMMON BLOCK
C
      COMMON SUMXX,SUMYY,SUMXY,ARNDX,Z1,
     X       ARNDY,TCOUNT,BCOUNT,TIME,TBOUND,V1,V2,V3,IBACK,
     X       MODEL,STDN,N,VOL,IADJ,T6,T7,T8,ANTI,RVOL,WEIGHT,TEMP,
     X       IMACH,BEGBT,TRUCNT,SLOPE,YINT,RESVAR,SUMX,SUMY,XMEAN,
     X       YMEAN,SIGMAX,SIGMAY,RHO,ERRSLP,ERRINT,ADJ1,ADJ2,ADJ3,
     X       KK1,KK,MARK,DELH,HALF,HLINE(61),PT(9),X(200),Y(200),
     X       XLN(200),YLOGIT(200),TRUEY(200),OVRLY(1000)
C
C   DATA INITIALIZATION
C   FOR COMMON
C
      DOUBLE PRECISION SUMXX,SUMYY,SUMXY,ARNDX,ARNDY,Z1
      LOGICAL MARK
C
C  THIS FUNCTION RETURNS AN ADJUSTED Y VALUE DEPENDING ON THE
C  MODEL USED.
C
      IF (MODEL.EQ.2) GO TO 545
      E4 = 1.0 - YP
      B7 = YP * TBOUND
      B10 = B7 + BCOUNT
      VAR = (B10*V1*E4)**2 + ADJ1 + (B7*V1)**2 + B10
      VAR = VAR + (V2*(TRUCNT-B10))**2 + (V3*B10)**2
      VAR = VAR + (SLOPE*ADJ2*B7*E4)**2
      VAR = VAR/ADJ3
      RETURN
  545 VAR = V2 + V3*YP
  550 RETURN
      END
C
C    ENDECK
   m#$x