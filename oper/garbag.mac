        PAGE
;**********************************************************
;
;       FILE - GARBAG.MAC
;       PACKAGE - GARBAGE COLLECTOR AND REBUILDER
;       CODED BY JOHN STALLINGS, 1/24/73
;
;**********************************************************
        PAGE
        INTERN  GARBAG,REBULD
; VARIABLES AND BUFFERS USED
ALTHED: BLOCK   SYNLEN
ALTSTG=ALTHED+HEADL
LSTBID: Z
FROUT:  Z
ALTNXT: Z
NXTADD: Z
INADD:  Z
OUTADD: Z
IND:    Z
INP:    Z
OUTD:   Z
OUTP:   Z
SAVLST: Z
NWORDS: Z
TABBL=^D256
TABBUF: BLOCK   TABBL
        PAGE
;** FUNCTION GARBAG
; THIS FUNCTION PERFORMS GARBAGE COLLECTION ON A DICTIONARY.
; ARGUMENTS:
;       R1 = INPUT DICT NUMBER
;       R2 = FATAL ERROR RETURN
;       R3 = NON-FATAL ERROR RETURN
;       R4 = OUTPUT DICT NUMBER
GARBAG: JSP     16,DINIT        ; INITIALIZE FUNCTION

        PUSHJ   17,GINIT        ; MORE INITIALIZATION

        MOVEI   1,FNEXT1        ; NEXT BID ROUTINE FOR GARBAG
        MOVEM   1,FROUT

        PUSHJ   17,BULD         ; GO DO IT..

        PUSHJ   17,FDWRIT       ; WRITE OUT NEW FD (TO CATCH HUSED)

        SETZ    1,              ; RETURN
        JRST    RETURN

        PAGE
;** THIS SUBROUTINE DOES ALL THE WORK FOR GARBAG AND MOST OF
; IT FOR REBULD.. THEY EACH SET UP DIFFERENT CALLS TO FIND THE
; NEXT BASIC ID....
BULD:   MOVE    1,NXTSYN        ; BUILD BYTE POINTER FOR NEXT SYN FIELD
        ADD     1,[ALTHED-SYNDAT]; IN ALTERNATE SYN STORAGE BLOCK
        MOVEM   1,ALTNXT

        PUSHJ   17,SETIN        ; SET UP INPUT DICT

; CALCULATE DESIRED NEW HASH TABLE LENGTH.
; LENGTH=(USED-DELETABLE)/.85
        MOVE    1,HUSED(PBLOCK) ; PICK UP ENTRIES USED
        SUB     1,DCNT2(PBLOCK) ; SUBTRACT DELETABLE ENTRIES
        MULI    1,20            ; DIVIDE BY .85
        DIVI    1,17

        MOVE    2,MAXBID(PBLOCK); MOVE OVER MAX BID IN USE
        PUSHJ   17,SETOUT
        MOVEM   2,MAXBID(PBLOCK)

; SEARCH OUR TABLE OF PRIMES FOR THE FIRST ONE GREATER
; THAN OR EQUAL TO OUR DESIRED HASH TABLE LENGTH. THAT WILL BE THE
; NEW LENGTH.
        HRLZI   2,-HINTL
        CAMG    1,HINT(2)
        JRST    .+3
        AOBJN   2,.-2
        MOVEI   2,HINTL-1       ; IF WE CANT FIND ONE, USE LARGEST
        MOVE    1,HINT(2)
        MOVEM   1,HLEN(PBLOCK)

;****************************************
;*
;*
; NOW WE GO INTO A BIG LOOP WHERE WE ACTUALLY MOVE THE BASIC DATA 
; THE INPUT DICTIONARY TO THE OUTPUT DICTIONARY.
        SETZM   NXTADD          ; NEXT ENTRY NUMBER IN SUB-FILE 2
        SETOM   LSTBID          ; MINUS ONE FOR LAST BID.

GLP1:   PUSHJ   17,@FROUT       ; FIND NEXT BID TO WORK ON
        POPJ    17,             ; NO MORE FOUND

        MOVE    1,XENTRY+1      ; TRY TO READ IN HEAD OF LINKED  LIST
        PUSHJ   17,RHEAD
        JRST    GLP1            ; LIST NOT ACTIVE

        SKIPG   3,XENTRY+2      ; IS THERE AN ASSOCIATED DATA BLOCK?
        JRST    GLP5
        SUBI    3,1             ; GET TRUE ADDRESS OF DATA BLOCK
        PUSHJ   17,DCOPY        ; COPY BLOCK

GLP5:   PUSHJ   17,SETOUT
        MOVE    1,EOF1(PBLOCK)  ; ADDRESS FOR THIS LIST ELEMENT
        MOVEM   1,XENTRY+1      ; POINT XENTRY TO IT

        MOVEI   1,2             ; WRITE OUT SUB-FILE 2 ENTRY
        MOVEI   2,XENTRY
        MOVE    3,EOF2(PBLOCK)
        MOVEI   4,XENTL
        PUSHJ   17,WRITE

        MOVEI   1,IDT1          ; FLAG LIST ELEMENT AS HEAD OF LIST
        DPB     1,IDT
        MOVE    1,MAXSID        ; PUT MAX SID COUNT INTO ELEMENT
        DPB     1,SYNMAX

        JRST    GLP8            ; JUMP INTO MIDDLE OF LOOP

;********************
;*
;*
; HERE WE MOVE OVER THE ELEMENTS IN A LINKED LIST AND RE-STRING
; THEM AS WE GO. WE ALSO GENERATE AND WRITE OUT THE HASH CODES FOR
; EACH ELEMENT.
GLP6:   PUSHJ   17,SETIN
        PUSHJ   17,RNEXT        ; READ IN NEXT ELEMENT
        JRST    GLP1            ; THIS LIST DONE.

; POINT LAST ELEMENT TO THIS NEW ONE
        PUSHJ   17,SETOUT
        MOVE    1,EOF1(PBLOCK)  ; ADDRESS FOR NEW ELEMENT
        ADDI    1,1             ; INCREASE BY ONE
        DPB     1,ALTNXT        ; PUT IN HEADER OF LAST ELEMENT
        MOVEI   1,1             ; RE-WRITE HEADER OF LAST ELEMENT
        MOVEI   2,ALTHED
        MOVE    3,SAVLST        ; ADDRESS OF LAST ELEMENT
        MOVEI   4,HEADL
        PUSHJ   17,WRITE

GLP8:   SETZ    1,              ; POINT THIS ELEMENT TO NO-ONE
        DPB     1,NXTSYN

        LDB     1,WCNT          ; SAVE WORD COUNT
        MOVEM   1,NWORDS

        MOVE    1,[XWD SYNDAT,ALTHED]; MOVE ELEMENT TO ANOTHER BUFFER..
        BLT     1,ALTHED+SYNLEN-1

        MOVE    1,[POINT 7,ALTSTG-1,35]; LOOK FOR STRING..
        PUSHJ   17,FIND
        JRST    .+2
        ERROR   -104            ; STRING ALREADY DEFINED

        MOVE    1,HCODE         ; PICK UP HASH CODE (DONE BY FIND)
        MOVEM   1,HENTRY        ; BUILD HASH TABLE ENTRY
        MOVE    1,XENTRY        ; GET BASIC ID FROM XENTRY
        MOVEM   1,HENTRY+1
        AOS     HUSED(PBLOCK)   ; INCREMENT NUMBER OF HASH ENTRIES
        MOVEI   1,3             ; AND WRITE OUT HASH ENTRY
        MOVEI   2,HENTRY
        MOVE    3,PROBE         ; HASH ENTRY FROM FIND
        IMULI   3,HENTL         ; CALCULATE ADDRESS
        MOVEI   4,HENTL
        PUSHJ   17,WRITE

        MOVEI   1,1             ; WRITE OUT LIST ELEMENT
        MOVEI   2,ALTHED
        MOVE    3,EOF1(PBLOCK)
        MOVEM   3,SAVLST        ; SAVE ADDRESS FOR STRINGING
        MOVE    4,NWORDS
        PUSHJ   17,WRITE

        JRST    GLP6
;*
;*
;********************
;*
;*
;****************************************

        PAGE
;** REBULD FUNCTION
; THIS FUNCTION ATTEMPTS TO REBUILD A CLOBBERED DICT.
; ACTUALLY, WE JUST SUBSTITUTE ANOTHER ROUTINE FOR THE ONE
; THAT GARBAG USES TO FIND THE NEXT BID. GARBAG SCANS SUB-FILE TWO,
; WE SCAN SUB-FILE ONE. NATURALLY THIS MEANS THAT WE DON'T FIND
; THE ASSOCIATED DATA POINTERS. SO WE MAKE AN EXTRA SCAN OF
; SUB-FILE ONE TO LINK THEM BACK IN.
; ARGUMENTS:
;       R1 = INPUT DICT NUMBER
;       R2 = FATAL ERROR RETURN
;       R3 = NON-FATAL ERROR RETURN
;       R4 = OUTPUT DICT NUMBER
REBULD: JSP     16,DINIT        ; INITIALIZE FUNCTION

        PUSHJ   17,GINIT        ; MORE INITIALIZATION

        MOVEI   1,FNEXT2        ; SET UP CALL TO OUR ROUTINE
        MOVEM   1,FROUT

        PUSHJ   17,BULD         ; GO MAKE FIRST PASS OVER FILES

        PUSHJ   17,FDWRIT       ; WRITE OUT NEW FD (TO CATCH HUSED)

; NOW WE GO BACK OVER TRYING TO PUT INT ASSOCIATED DATA

        SETZM   NXTADD

REB2:   PUSHJ   17,SETIN
        MOVEI   1,1             ; SET UP READ PARAMETERS
        MOVEI   2,TABBUF
        MOVEI   4,2
        MOVE    5,DATCON        ; THIS FLAGS DATA BLOCKS
        MOVE    3,NXTADD

REB3:   CAMGE   3,EOF1(PBLOCK)  ; CHECK FOR EOF
        JRST    REB4
        SETZ    1,              ; ALL DONE, FINALLY!!! I'M SURE..
        JRST    RETURN

REB4:   PUSHJ   17,READ         ; READ NEXT WORD OFF OF SUB-FILE ONE
        CAMN    5,TABBUF        ; DOES IT LOOK LIKE A DATA BLOCK?
        JRST    REB5
        ADDI    3,1             ; NOPE
        JRST    REB3

REB5:   MOVEI   4,3             ; READ IN REST OF POSSIBLE HEADER
        PUSHJ   17,READ

        MOVE    6,TABBUF+1      ; CHECK NUMBER OF WORDS
        CAILE   6,3
        JRST    REB6            ; LOOKS GOOD
        MOVEI   4,1             ; KEEP GOING
        ADDI    3,1
        JRST    REB3

REB6:   MOVEM   3,NXTADD        ; BUILD NEXT ADDRESS FOR SCAN
        ADDM    6,NXTADD
        MOVEM   3,INADD         ; SAVE ADDRESS FOR POSSIBLE COPY

        MOVE    1,TABBUF+2      ; SEE IF WE CAN FIND BID FOR DATA
        PUSHJ   17,SETOUT
        PUSHJ   17,SEARCH
        JRST    REB2            ; GO LOOK SOME MORE

        MOVE    1,EOF1(PBLOCK)  ; ADDRESS TO COPY TO
        ADDI    1,1             ; INCREASE BY ONE
        MOVEM   1,XENTRY+2      ; POINT FILE 2 ENTRY TO DATA
        MOVEI   1,1             ; WRITE OUT SUB-FILE 2 ENTRY
        MOVEI   2,XENTRY
        MOVEI   4,XENTL
        PUSHJ   17,WRITE

        MOVE    3,INADD         ; COPY DATA OVER
        PUSHJ   17,DCOPY

        JRST    REB2            ; GO LOOK FOR MORE DATA..
        PAGE
;** SUBROUTINE FOR REBULD TO USE IN FINDING NEXT BASIC ID
FNEXT2: PUSHJ   17,SETIN
        MOVEI   1,1
        MOVEI   2,SYNDAT
        MOVEI   4,1
        MOVE    5,SYNCON
        MOVE    3,NXTADD
FN1:    CAML    3,EOF1(PBLOCK)
        POPJ    17,
        PUSHJ   17,READ
        CAMN    5,SYNDAT
        JRST    FN2
        ADDI    3,1
        JRST    FN1
FN2:    MOVEI   4,HEADL
        PUSHJ   17,READ
        LDB     6,IDT
        CAIE    6,IDT1
        CAIN    6,IDT1+IDT3
        JRST    .+2
        JRST    FN3
        LDB     7,WCNT
        CAIG    7,SYNLEN
        CAIG    7,HEADL
        JRST    FN3
        LDB     1,SYNBID
        CAMG    1,LSTBID
        JRST    FN3
        MOVEM   1,LSTBID
        MOVEM   1,XENTRY
        MOVEM   3,XENTRY+1
        MOVEM   3,NXTADD
        ADDM    7,NXTADD
        SETZM   XENTRY+2
        AOS     0(17)
        POPJ    17,
FN3:    MOVEI   4,1
        ADDI    3,1
        JRST    FN1
        PAGE
;** ROUTINE FOR COPYING ASSOCIATED DATA BLOCK FROM ONE
; DICT TO ANOTHER
DCOPY:  MOVEI   1,1             ; READ IN DATA HEADER
        MOVEI   2,TABBUF
        MOVEI   4,2
        PUSHJ   17,READ

        MOVE    5,TABBUF        ; A LITTLE ERROR CHECKING
        MOVE    6,TABBUF+1
        CAMN    5,DATCON
        CAIGE   6,2
        ERROR   -15

        CAIG    6,2             ; IF ONLY A HEADER, DONT MOVE DATA..
        JRST    GLP3
        SETZM   XENTRY+2
        POPJ    17,

GLP3:   MOVEM   6,NWORDS        ; WORD COUNT OF DATA TO MOVE
        MOVEM   3,INADD         ; DISC INPUT ADDRESS
        PUSHJ   17,SETOUT
        MOVE    5,EOF1(PBLOCK)
        MOVEM   5,OUTADD        ; DISC OUTPUT ADDRESS
        MOVEM   5,XENTRY+2      ; POINT XENTRY TO NEW DATA

;**********
;*
;*
; ACTUAL DATA READ/WRITE LOOP FOR MOVING DATA BLOCK
GLP4:   PUSHJ   17,SETIN
        MOVE    4,NWORDS        ; CALCULATE NUMBER OF WORDS TO READ
        CAILE   4,TABBL
        MOVEI   4,TABBL
        MOVN    5,4             ; REDUCE WORD COUNT BY WORDS READ
        ADDM    5,NWORDS
        MOVE    3,INADD         ; PICK UP INPUT ADDRESS
        ADDM    4,INADD         ; ADD WORDS READ TO INPUT ADDRESS
        PUSHJ   17,READ         ; READ PART OF DATA BLOCK

        PUSHJ   17,SETOUT
        MOVE    3,OUTADD        ; PICK UP OUTPUT ADDRESS
        ADDM    4,OUTADD        ; ADD WORDS WRITTEN TO OUTPUT ADDRESS
        PUSHJ   17,WRITE        ; WRITE PART OF A BLOCK

        SKIPG   NWORDS          ; IS THERE MORE TO MOVE?
        JRST    GLP4
        POPJ    17,
;*
;*
;**********
        PAGE
;** SUBROUTINES FOR SWITCHING BETWEEN THE DICTIONARIES
SETIN:  MOVE    PBLOCK,IND
        MOVEM   PBLOCK,DNUM
        MOVE    PBLOCK,INP
        POPJ    17,
SETOUT: MOVE    PBLOCK,OUTD
        MOVEM   PBLOCK,DNUM
        MOVE    PBLOCK,OUTP
        POPJ    17,

        PAGE
;** ROUTINE FOR GARBAG AND REBULD TO USE FOR FURTHER INITIALIZATION
GINIT:  CAIL    4,0             ; CHECK SECOND DICT NUMBER
        CAILE   4,NDICT-1
        ERROR   -11

        MOVEM   PBLOCK,INP      ; SAVE INPUT PARAMETER BLOCK ADDRESS
        MOVEM   1,IND           ; SAVE INPUT DICT NUMBER
        MOVEM   4,OUTD          ; SAVE OUTPUT DICT NUMBER
        MOVE    4,FTAB(4)       ; PICK UP OUTPUT PARAMETER BLOCK ADDRESS
        MOVEM   4,OUTP          ; SAVE OUTPUT PARAMETER BLOCK ADDRESS
        POPJ    17,
        PAGE
;** SUBROUTINE FOR GARBAG TO USE FOR FINDING NEXT BID
FNEXT1: PUSHJ   17,SETIN        ; SET UP INPUT DICT

        MOVE    3,NXTADD        ; CALCULATE NEXT ENTRY ADDRESS
        AOS     NXTADD          ; INCREMET ENTRY NUMBER
        IMULI   3,XENTL         ; CALCULATE DISC ADDRESS
        CAML    3,EOF2(PBLOCK)  ; ARE WE PAST EOF?
        POPJ    17,
        MOVEI   1,2             ; READ IN SUB-FILE TWO ENTRY
        MOVEI   2,XENTRY
        MOVEI   4,XENTL
        PUSHJ   17,READ
        AOS     0(17)           ; SKIP RETURN
        POPJ    17,
   