TITLE	CMNGEN FOR COBOL 5(107)		
SUBTTL	COMMON ROUTINES USED BY CODE GENERATORS		AL BLACKINGTON/CAM

;COPYRIGHT 1970,1971,1972, DIGITAL EQUIPMENT CORP, MAYNARD, MA

TWOSEG
RELOC	400000

ENTRY CMNGEN
CMNGEN:

EXTERNAL XPNLIT,XPNTAG,XPNEOP,FATAL,WARN,KILL,DEVDED,ERATYP
EXTERNAL LNKSET,GETTAG,PUTAS1,PUTAS2,PUTAS3,ADJDP.
EXTERNAL MXAC.,MACX.,MXX.,CFPCX.,CC1C2.

;ROUTINES INCLUDED HERE

INTERNAL SZERO.,SQUOT.,ASRJ.,AZRJ.,AQRJ.,FPLOV.
INTERNAL M.IA,M.IB,SETUUO,STASHL,GETEMP,SETEMP,PUTEMP,PUTTAG,SETOPA,SETOPB,SETOPN
INTERNAL VALLIT,VLIT2,CONVNL,CONVFP,SCANL,MBYTEA,MBYTEB,DPDIV.

INTERNAL PUTASY,PUTASN,FORCX0,BMPEOP,GENFPL,PUSEOP,PUSH12
INTERNAL NEGATL,CREATL,MAKEL,MAKEL2,ROUND,SIZERA,B1PAR,B2PAR
INTERNAL SWAPAB,ADJSL.,JOUT,SUBSCR,BYTE.A,BYTE.B,BYTE.C
INTERNAL SUBSCA,SUBSCB,SUBSCC,SUBSCD,SUBSCE
INTERNAL PUT.A,PUT.AA,PUT.B,PUT.BA,PUT.L,PUT.LA,PUT.LB,PUT.LC,PUT.LD
INTERNAL PUT.P,PUT.PA,PUT.PC,PUT.XA,PUT.XB,PUT.EX


;****************************************************************

;CONSTANTS INCLUDED HERE

INTERNAL BYTE.S,BYTE.W,CHAC,CHOP,W1LN,W1CP,TCLN,TCCP,POWR10,DPWR10
INTERNAL ACMODE,ACSIZE,TESUBC,W2SUBC,TASUBC

;****************************************************************

;ERROR ROUTINES INCLUDED HERE

INTERNAL OPNWRN, OPWRN, OPNFAT, OPFAT
INTERNAL BADEOP, NOTNUM, NOTDAT, NOTDEF
;PUT A WORD ONTO THE CURRENT ASYFIL AND BUMP APPROPRIATE PC

PUTASY:	TSWT	FAS3		;ARE WE CURRENTLY IN A NON-RESIDENT SEGMENT?
	AOSA	EAS2PC		;NO--BUMP RESIDENT PC
	AOSA	EAS3PC		;YES--BUMP NON-RESIDENT PC
	JRST	PUTAS2		;WRITE ONTO AS2FIL
	JRST	PUTAS3		;WRITE ONTO AS3FIL


;PUT A WORD ONTO THE CURRENT ASYFIL, BUT DON'T BUMP PC

PUTASN:	TSWT	FAS3		;CURRENTLY IN NON-RESIDENT SEGMENT?
	JRST	PUTAS2		;NO--USE AS2FIL
	JRST	PUTAS3		;YES--USE AS3FIL
;CREATE THE LITERAL <SIXBIT "000000">

SZERO.:	SKIPE	ESZERO		;HAS IT ALREADY BEEN GENERATED?
	POPJ	PP,		;YES--RETURN

	MOVE	TB,[SIXBIT "000000"]	;NO
	PUSHJ	PP,SLITX.
	MOVEM	TB,ESZERO	;SET ADDRESS
	POPJ	PP,

;CREATE THE LITERAL <SIXBIT '""""""'>

SQUOT.:	SKIPE	ESQUOT		;HAS IT ALREADY BEEN GENERATED?
	POPJ	PP,		;YES--RETURN

	MOVE	TB,[SIXBIT '""""""']	;NO
	PUSHJ	PP,SLITX.
	MOVEM	TB,ESQUOT
	POPJ	PP,


SLITX.:	MOVE	TA,[XWD SIXLIT,1]
	PUSHJ	PP,STASHL
	MOVE	TA,TB
	PUSHJ	PP,STASHL
	MOVEI	TB,1
	EXCH	TB,ELITPC
	ADDM	TB,ELITPC
	IORI	TB,AS.LIT

CPOPJ:	POPJ	PP,
;CREATE THE LITERAL <ASCII "00000">, AND THE SAME LITERAL
;	SHIFTED RIGHT 1 BIT.

AZRJ.:	SKIPE	EAZRJ		;HAVE THEY ALREADY BEEN GENERATED?
	POPJ	PP,		;YES--RETURN

	MOVE	TB,[ASCII "00000"]	;NO
	PUSHJ	PP,AXRJ.
	MOVEM	TB,EAZRJ
	POPJ	PP,


;CREATE THE LITERAL <ASCII "     ">, AND THE SAME LITERAL
;	SHIFTED RIGHT 1 BIT.

ASRJ.:	SKIPE	EASRJ		;HAVE THEY ALREADY BEEN GENERATED?
	POPJ	PP,		;YES--RETURN

	MOVE	TB,[ASCII "     "]	;NO
	PUSHJ	PP,AXRJ.
	MOVEM	TB,EASRJ
	POPJ	PP,


;CREATE THE LITERAL <ASCII '"""""'>, AND THE SAME LITERAL
;	SHIFTED RIGHT 1 BIT.

AQRJ.:	SKIPE	EAQRJ		;HAVE THEY ALREADY BEEN GENERATED?
	POPJ	PP,		;YES--RETURN

	MOVE	TB,[ASCII '"""""']	;NO
	PUSHJ	PP,AXRJ.
	MOVEM	TB,EAQRJ
	POPJ	PP,


AXRJ.:	MOVE	TA,[XWD ASCLIT,1]
	PUSHJ	PP,STASHL
	MOVE	TA,TB
	PUSHJ	PP,STASHL
	MOVE	TA,[XWD OCTLIT,1]
	PUSHJ	PP,STASHL
	MOVE	TA,TB
	LSH	TA,-1
	PUSHJ	PP,STASHL
	MOVEI	TB,2
	EXCH	TB,ELITPC
	ADDM	TB,ELITPC
	IORI	TB,AS.LIT

	POPJ	PP,
;CREATE TWO-WORD "HIGH-VALUE" LITERAL

HIVAL::	SKIPE	EHIVAL		;IS THERE ONE ALREADY?
	POPJ	PP,		;YES--QUIT

	HRLOI	TC,377777	;NO
	PUSHJ	PP,HILO.
	MOVEM	TE,EHIVAL
	POPJ	PP,

;CREATE TWO-WORD "LOW-VALUE" LITERAL

LOVAL::	SKIPE	ELOVAL		;IS THERE ONE ALREADY?
	POPJ	PP,		;YES--QUIT

	HRLZI	TC,1B18		;NO
	PUSHJ	PP,HILO.
	MOVEM	TE,ELOVAL
	POPJ	PP,

;CREATE LOW-VALUE FOE FLOATING-POINT

FPLOV.:	SKIPE	EFPLOV		;IS THERE ONE ALREADY?
	POPJ	PP,		;YES--QUIT

	MOVE	TA,[XWD OCTLIT,1]	;NO
	PUSHJ	PP,STASHL
	MOVE	TA,[EXP 1B0!1B35]
	PUSHJ	PP,STASHL
	MOVE	TA,ELITPC
	IORI	TA,AS.LIT
	MOVEM	TA,EFPLOV

	AOS	ELITPC
	POPJ	PP,

;COMMON ROUTINE FRO HIVAL. & LOVAL.

HILO.:	MOVE	TA,[XWD OCTLIT,2]
	PUSHJ	PP,STASHL
	MOVE	TA,TC
	PUSHJ	PP,STASHL
	PUSHJ	PP,STASHL

	MOVEI	TE,2
	EXCH	TE,ELITPC
	ADDM	TE,ELITPC

	IORI	TE,AS.LIT
	POPJ	PP,
;INCREMENT PARAMETERS OF "A" OPERAND BY THE NUMBER OF BYTES
;	WHOSE VALUE IS IN "TE".

M.IA:	MOVE	TC,EMODEA
	IDIV	TE,BYTE.W(TC)	;ADJUST INCREMENT
	ADDM	TE,EINCRA
	HLRZ	TE,ERESA
	PUSHJ	PP,M.IB5
	JUMPG	TE,M.IA1	;TO BIT 35 OR BEYOND?

	AOS	EINCRA		;YES--INCREMENT THE INCREMENT
	ADDI	TE,^D36		;RESET RESIDUE

M.IA1:	HRLM	TE,ERESA
	POPJ	PP,

;INCREMENT PARAMETERS OF "B" OPERAND BY THE NUMBER OF BYTES
;	WHOSE VALUE IS IN "TE".

M.IB:	HRRZ	TC,EMODEB
	IDIV	TE,BYTE.W(TC)
	ADDM	TE,EINCRB
	PUSHJ	PP,M.IB4
	JUMPG	TE,M.IB1

	AOS	EINCRB
	ADDI	TE,^D36

M.IB1:	HRLM	TE,ERESB
	POPJ	PP,

M.IB4:	HLRZ	TE,ERESB
M.IB5:	IMUL	TD,BYTE.S(TC)
	SUB	TE,TD
	CAML	TE,BYTE.S(TC)
	POPJ	PP,

	CAIN	TC,D7MODE
	SUBI	TE,1
	POPJ	PP,
;GET A BYTE POINTER TO "A", IN ASYFIL XWD FORMAT, INTO TA&TB

BYTE.A:	MOVEI	TE,EBASEA

BYTE.X:	HRRZ	TC,EMODEX(TE)
	HLRZ	TA,ERESX(TE)
	LSH	TA,6
	ADD	TA,BYTE.S(TC)
	ROT	TA,-14

BYTE.Y:	HRRI	TA,AS.CNB
	MOVE	TB,EBASEX(TE)
	HRL	TB,EINCRX(TE)

	POPJ	PP,


;SIMILAR TO BYTE.A, EXCEPT FOR "B"

BYTE.B:	MOVEI	TE,EBASEB
	JRST	BYTE.X

;SIMILAR TO BYTE.B, EXCEPT SIZE PUT INTO BITS 6-17

BYTE.C:	MOVEI	TE,EBASEB
	HLRZ	TA,ERESB
	LSH	TA,14
	ADD	TA,ESIZEZ
	HRLZS	TA

	JRST	BYTE.Y
;SET A BIT IN UUOBIT TABLE

SETUUO:	LDB	TD,CHOP		;GET OP-CODE FIELD
	CAIL	TD,140
	CAIN	TD,177
	POPJ	PP,

	CAIL	TD,172
	JRST	SETUU2

	MOVEI	TE,1B31
	LSH	TE,-140(TD)
	IORM	TE,UUOBIT+6
	POPJ	PP,

SETUU2:	LDB	TE,CHAC		;GET AC FIELD
	CAIN	TD,172		;IF OPEN OR CLOSE,
	ANDI	TE,1		;  THROW AWAY ALL BUT LOW BIT

	MOVEI	TD,1		;ROTATE A 1-BIT BY
	ROT	TD,(TE)		;  AMOUNT OF AC-FIELD

	LDB	TE,CHOP		;GET OP-CODE BACK
	IORM	TD,UUOBIT-172(TE); OR IN THAT 1-BIT

	POPJ	PP,
;PUT A SINGLE WORD INTO EOPTAB.
;ENTER AT PUSEOP WITH WORD IN 'CH'.

PUSEO1:	PUSHJ	PP,XPNEOP	;EXPAND EOPTAB
PUSEOP:	MOVE	EACA,EOPNXT
	CAML	EACA,[XWD -1,0]	;ENOUGH ROOM?
	JRST	PUSEO1		;NO
	PUSH	EACA,CH		;YES--STASH IT
	MOVEM	EACA,EOPNXT	;SAVE EACA
	POPJ	PP,


;STASH W1&W2 IN EOPTAB.
;ENTER AT PUSH12.

PUS12A:	PUSHJ	PP,XPNEOP	;EXPAND EOPTAB
PUSH12:	MOVE	EACA,EOPNXT	;GET END OF TABLE
	CAML	EACA,[XWD -2,0]	;ENOUGH ROOM FOR TWO WORDS?
	JRST	PUS12A		;NO
	PUSH	EACA,W1		;YES--STASH W1
	PUSH	EACA,W2		;  AND W2
	MOVEM	EACA,EOPNXT	;SAVE EACA
	POPJ	PP,
;PUT A WORD INTO AS.LIT

;IF LITAB IS FULL AND < FULLIT WORDS, EXPAND AS.LIT
;IF LITAB FULL AND > FULLIT WORDS, WRITE OUT SOME WORDS
;  ONTO LITFIL, AND MOVE REMAINDER TO TOP OF AS.LIT

	FULLIT==10*200	;NUMBER OF WORDS WRITTEN OUT EACH TIME.
			;THIS MUST BE > ^D768 (SEE EBURPL IN XFRGEN),
			;YET SMALL ENOUGH SO THAT CURRENT LITERAL GROUP
			;BEING STASHED WILL NOT BE WRITTEN OUT.
			;LARGEST LITERAL GROUP IS ASCII, SIZE 120, OR
			;  A MULTI-DIMENSION SUBSCRIPT CALL.

STASHL:	MOVE	TE,LITNXT	;GET NEXT HOLE ADDRESS
	AOBJP	TE,STSHL0	;IF NO ROOM, JUMP
	MOVEM	TA,(TE)		;STORE WORD
	MOVEM	TE,LITNXT	;RESTORE LITNXT
	POPJ	PP,

;TABLE IS FULL

STSHL0:	HLRE	TE,LITLOC	;IS
	MOVMS	TE		;  LITAB
	CAILE	TE,FULLIT	;  AS BIG AS IT GETS?
	JRST	STSHL2		;YES

STSHL1:	PUSHJ	PP,XPNLIT	;NO--EXPAND LITAB
	JRST	STASHL		;TRY AGAIN

;LITAB IS FULL, AND IS AS BIG AS IT SHOULD GET

STSHL2:	MOVEM	TA,SAVEAC	;SAVE
	MOVE	TA,[XWD TD,SAVEAC+1]; AC'S
	BLT	TA,SAVEAC+3	;  TD THRU TA

	SKIPLE	LITBLK		;IS LITFIL ALREADY OPEN?
	JRST	STSHL3		;YES
	SKIPL	LITBLK		;WAS ANYTHING EVER WRITTEN?
	CLOSE	LIT,		;YES--CLOSE INPUT

	MOVE	TE,LITHDR	;GET FILE NAME
	HLLZ	TD,LITHDR+1	;  AND EXTENSION
	SETZB	TC,TB		;CLEAR PROTECTION, PROJ-PROG
	ENTER	LIT,TE		;OPEN FILE FOR OUTPUT
	JRST	STSHL5		;CANNOT--TROUBLE

	SETZM	LITBLK		;CLEAR WORD COUNT
;PUT WORD INTO LITAB (CONT'D)

;LITFIL IS NOW OPEN FOR OUTPUT

STSHL3:	MOVEI	TE,FULLIT	;BUMP WORD COUNT
	ADDM	TE,LITBLK

	MOVSI	TE,-FULLIT	;CREATE
	HRR	TE,LITLOC	;  IOWD LIST FOR
	SETZ	TD,		;  OUTPUT

	OUT	LIT,TE		;WRITE IT
	JRST	STSHL4		;OK
	MOVEI	CH,LITDEV	;ERROR--KILL
	JRST	DEVDED

STSHL4:	MOVE	TD,LITLOC	;MOVE
	MOVSI	TE,FULLIT+1(TD)	;  WORDS
	HRRI	TE,1(TD)	;  UP
	MOVN	TD,[XWD FULLIT,FULLIT]; FROM
	ADDB	TD,LITNXT	;  BOTTOM
	BLT	TE,(TD)		;  OF TABLE

	MOVNI	TE,FULLIT	;UPDATE
	SKIPE	CURLIT		;  ANY NON-ZERO
	ADDM	TE,CURLIT	;  CURLIT

	MOVE	TA,[XWD SAVEAC+1,TD]
	BLT	TA,TB
	MOVE	TA,SAVEAC

	JRST	STASHL

;ENTER FAILURE

STSHL5:	TTCALL	3,[ASCIZ "?CANNOT ENTER "]
	MOVEI	DA,LITDEV
	HRRZ	I2,TD		;GET ERROR CODE
	JRST	ERATYP
;GET SOME TEMPORARY LOCATIONS
;ENTER WITH DESIRED NUMBER OF WORDS IN "TE".

GETEMP:	MOVE	EACC,ETEMPC
	ADDB	TE,ETEMPC
	CAMLE	TE,ETEMAX
	MOVEM	TE,ETEMAX
	IORI	EACC,AS.TMP
	ADD	EACC,TEMBAS
	POPJ	PP,


;SET UP "B" PARAMETERS TO REPRESENT AN ASCII TEMP.
;ENTER WITH SIZE IN "TD", RELATIVE ADDRESS IN "TA".

SETEMP:	IORI	TA,AS.TMP
	MOVEM	TA,EINCRB
	MOVEI	TE,AS.MSC
	MOVEM	TE,EBASEB
	MOVEI	TE,^D36
	HRLM	TE,ERESB
	MOVEM	TD,ESIZEB
	SETZM	EDPLB
	MOVEI	TE,D7MODE
	MOVEM	TE,EMODEB

	SWOFF	FBNUM!FBSIGN
	POPJ	PP,
;MOVE AC'S TO %TEMP.

PUTEMP:	SWON	FANUM!FASIGN;
	SWOFF	FASUB!FAINAC;
	HRRZ	TD,EMODEA
	MOVEI	TE,1
	CAIN	TD,D2MODE
	MOVEI	TE,2
	PUSHJ	PP,GETEMP

	MOVEM	EACC,EINCRA
	MOVEI	TE,AS.MSC
	MOVEM	TE,EBASEA
	MOVSI	CH,MOVEM.
	PUSHJ	PP,PUT.AA

	CAIE	TD,D2MODE
	POPJ	PP,

	MOVSI	CH,MOVEM.
	AOS	EINCRA
	AOS	EAC
	PUSHJ	PP,PUT.AA
	SOS	EAC
	SOS	EINCRA
	POPJ	PP,
;PUT A TAG ONTO ASYFIL,  AND RESOLVE ADDRESS

PUTTAG:	ANDI	CH,77777
	IORI	CH,AS.TAG
	HRLI	CH,720000	;WRITE IT OUT
	PUSHJ	PP,PUTASN

	TSWF	FAS3		;ARE WE IN NON-RESIDENT SEGMENT?
	SKIPA	TE,EAS3PC	;YES
	SKIPA	TE,EAS2PC	;NO--RESIDENT
	IORI	TE,1B18

	ANDI	CH,77777	;GET LOW 15 BITS ONLY
	ROT	CH,-1		;HALVE IT
	MOVE	TD,TAGLOC
	ADDI	CH,(TD)
	JUMPL	CH,EIFG1	;WAS IT AN ODD NUMBER?
	HRLM	TE,0(CH)	;NO--PUT IT IN LEFT HALF
	POPJ	PP,
EIFG1:	HRRM	TE,0(CH)	;YES--PUT IT IN RIGHT-HALF
	POPJ	PP,
;SET UP "A" PARAMETERS.
;ENTER WITH "TC" POINTING TO AN OPERAND.
;IF ANY ERRORS DETECTED, POP OFF ONE EXIT FROM PUSH-DOWN LIST, SUCH THAT
;	WE EXIT TO THE ROUTINE WHICH CALLED THE CALLING ROTUINE.

SETOPA:	MOVEI	LN,EBASEA

STOPA1:	PUSHJ	PP,SETOPN
	TSWF	FERROR;
	POP	PP,TE
	POPJ	PP,

;SIMILAR FOR "B"

SETOPB:	MOVEI	LN,EBASEB
	JRST	STOPA1
;SET UP OPERAND PARAMETERS.
;ENTER WITH ADDRESS OF 2-WORD OPERAND IN TC, ADDRESS OF
;	EITHER EBASEA OR EBASEB IN LN.

SETOPN:	MOVE	TB,0(TC)
	MOVE	TA,1(TC)
	HRRZM	TA,ETABLX(LN)
	LDB	TE,LNKCOD
	CAIE	TE,TB.DAT
	JRST	SETOP1
	ANDI	TA,LMASKB
	IORI	TA,AS.DAT

SETOP1:	HRRZM	TA,EBASEX(LN)	;STASH BASE ADDRESS
	TLNE	TB,GNLIT	;IS THIS A LITERAL?
	JRST	SETOP4		;YES

	TLNE	TA,GNNOTD	;IS OPERAND EITHER TEMP OR AC'S?
	JRST	SETOP9

	MOVEI	DW,^D101	;GET READY FOR "NOT DATA-NAME" ERROR
	LDB	TE,[POINT 3,TA,20]
	CAIE	TE,TB.DAT	;IS IT A DATA-NAME?
	JRST	OPERA		;NO--ERROR

	SETZM	EINCRX(LN)	;YES--CLEAR INCREMENT
	SETZM	EFLAGX(LN)	;CLEAR FLAGS

	MOVE	TA,ETABLX(LN)
	PUSHJ	PP,LNKSET	;SET UP TABLE ADDRESS

	LDB	TE,DA.USG
	SUBI	TE,1
	CAIN	TE,IXMODE	;INDEX MODE?
	MOVEI	TE,D1MODE	;YES--PRETEND IT'S 1-WORD COMP
	MOVEM	TE,EMODEX(LN)

	LDB	TD,DA.RES	;GET RESIDUE
	HRLM	TD,ERESX(LN)	;	AND STASH
	LDB	TD,DA.NDP	;GET DECIMAL PLACES
	LDB	TE,DA.DPR	;IS DECIMAL POINT
	SKIPE	TE		;  TO RIGHT OF FIELD?
	MOVNS	TD		;YES--NEGATE
	MOVEM	TD,EDPLX(LN)	;NO--STASH DECIMAL PLACES
	LDB	TE,DA.INS	;GET INTERNAL SIZE
	MOVEM	TE,ESIZEX(LN)

	MOVEI	DW,^D104	;GET READY FOR "UNDEFINED" ERROR
	LDB	TD,DA.DEF	;IF DEFINED,
	JUMPN	TD,SETOP0	;  GO ON


	SWON	FERROR		;SET ERROR FLAG
	HRRZ	TD,DATLOC	;CK FOR DUMMY DATAB ENTRY
	SUBI	TD,-1(TA)
	JUMPN	TD,OPERA	;IF NOT, PUT OUT ?NOT DEFINED
	POPJ	PP,		;IF DUMMY, EXIT NOW
;SET UP OPERAND PARAMETERS  (CONT'D).

SETOP0:	MOVE	TE,1(TC)	;ANY
	LDB	TE,TESUBC	;  SUBSCRIPTS?
	JUMPE	TE,SETOP2	;NO IF JUMP
	LDB	TD,DA.SUB	;SHOULD
	JUMPN	TD,SETOP2	;  THERE BE?
	MOVEI	DW,^D275	;YES
	PUSHJ	PP,OPERA	;  ERROR

SETOP2:	CAIN	LN,EBASEA	;"A" OPERAND?
	JRST	SETOP3		;YES

;"B" OPERAND

	LDB	TD,DA.SGN	;IS 'B'
	SKIPE	TD		;  SIGNED?
	SWONS	FBSIGN;		;YES
	SWOFF	FBSIGN;		;NO
	LDB	TE,DA.EDT
	LDB	TD,DA.CLA
	SKIPN	TE
	CAIE	TD,2
	SWOFFS	FBNUM		;EDITED OR NOT NUMERIC
	SWON	FBNUM		;NUMERIC AND NOT EDITED

	LDB	TD,DA.SUB	;SHOULD ITEM
	SKIPN	TD		;  BE SUBSCRIPTED?
	SWOFFS	FBSUB;		;NO
	SWON	FBSUB		;YES

	LDB	TD,DA.LKS##	;LINKAGE SECTION?
	SKIPE	TD		;NO
	SWON	FBSUB		;YES

	POPJ	PP,

;"A" OPERAND

SETOP3:	LDB	TD,DA.SGN	;IS 'A'
	SKIPE	TD		;  SIGNED?
	SWONS	FASIGN;		;YES
	SWOFF	FASIGN		;NO
	LDB	TE,DA.EDT
	LDB	TD,DA.CLA
	SKIPN	TE
	CAIE	TD,2
	SWOFFS	FANUM		;EDITED OR NOT NUMERIC
	SWON	FANUM		;NUMERIC AND NOT EDITED

	LDB	TD,DA.SUB	;IS IT
	SKIPN	TD		;  SUBSCRIPTED?
	SWOFFS	FASUB		;NO
	SWON	FASUB		;YES

	LDB	TD,DA.LKS	;LINKAGE SECTION?
	SKIPE	TD		;NO
	SWON	FASUB		;YES

	POPJ	PP,
;SET UP OPERAND PARAMETERS  (CONT'D).

;OPERAND IS A LITERAL.

SETOP4:	CAIE	LN,EBASEA
	SWOFFS	FBSUB;
	SWOFF	FASUB;

	TLNE	TB,GNFIGC
	JRST	SETOP6

	MOVEI	TE,LTMODE
	MOVEM	TE,EMODEX(LN)

	PUSHJ	PP,LNKSET
	HRLI	TA,350700
	MOVEM	TA,EBYTEX(LN)
	LDB	TD,TA
	MOVEM	TD,ESIZEX(LN)
	SETZM	EDPLX(LN)
	CAIE	LN,EBASEA
	JRST	SETOP5

	TLNE	TB,GNNUM	;IS IT NUMERIC?
	SWONS	FANUM!FASIGN;
	SWOFF	FANUM!FASIGN;
	POPJ	PP,

SETOP5:	TLNE	TB,GNNUM	;IS IT NUMERIC?
	SWONS	FBNUM!FBSIGN;
	SWOFF	FBNUM!FBSIGN;
	POPJ	PP,
;SET UP OPERAND PARAMETERS  (CONT'D).

;OPERAND IS A FIGURATIVE CONSTANT

SETOP6:	TLNE	TB,GNTALY
	JRST	SETOP7

	MOVEI	TE,FCMODE
	MOVEM	TE,EMODEX(LN)

	TLNE	TB,GNTODY
	MOVEI	TE,0
	TLNE	TB,GNFCS
	MOVEI	TE,1
	TLNE	TB,GNFCZ
	MOVEI	TE,2
	TLNE	TB,GNFCQ
	MOVEI	TE,3
	TLNE	TB,GNFCHV
	MOVEI	TE,4
	TLNE	TB,GNFCLV
	MOVEI	TE,5
	MOVEM	TE,EFLAGX(LN)

	JRST	SETOP8
;SET UP OPERNAD (CONT'D).

;OPERAND IS "TALLY"

SETOP7:	MOVEI	TE,D1MODE
	MOVEM	TE,EMODEX(LN)
	MOVEI	TA,TALLY.##
	MOVEM	TA,EBASEX(LN)
	SETZM	EINCRX(LN)
	SETZM	EDPLX(LN)
	MOVEI	TE,5
	MOVEM	TE,ESIZEX(LN)
	CAIE	LN,EBASEA
	SWONS	FBSIGN!FBNUM;
	SWON	FASIGN!FANUM;
	TLZ	TB,GNFIGC!GNLIT
	MOVEM	TB,0(TC)
	TSWT	FAS3		;ARE WE IN NON-RESIDENT SEGMENT?
	JRST	SETOP8		;NO

	MOVE	TD,TA		;YES--SET FLAG IN EXTAB ENTRY FOR TALLY
	ANDI	TD,77777
	ADD	TD,EXTLOC
	MOVSI	TE,1B18
	IORM	TE,1(TD)

SETOP8:	MOVEM	TA,1(TC)
	POPJ	PP,
;SET UP OPERAND  (CONT'D).
;OPERAND IS A TEMP OR THE AC'S.

SETOP9:	CAIE	LN,EBASEA
	SWOFFS	FBSUB;
	SWOFF	FASUB;

	MOVE	TD,TA
	LDB	TE,ACMODE
	MOVEM	TE,EMODEX(LN)
	LDB	TE,ACSIZE
	MOVEM	TE,ESIZEX(LN)
	HRREM	TD,EDPLX(LN)

	MOVEI TE,(TB)		;IS IT THE AC'S?

	CAIG	TE,17
	JRST	STOP10		;YES

	MOVEI	TE,AS.MSC	;NO--TEMP
	MOVEM	TE,EBASEX(LN)
	HRRZM	TB,EINCRX(LN)
	JRST	STOP11

STOP10:	SETZM	EBASEX(LN)	;YES
	SETZM	EINCRX(LN)

STOP11:	TLNE	TB,GNOPNM	;IS IT NUMERIC?
	JRST	STOP12		;YES

	CAIE	LN,EBASEA	;NO--"A"?
	SWOFFS	FBSIGN!FBNUM	;NO--MUST BE "B"
	SWOFF	FASIGN!FANUM	;YES
	POPJ	PP,

STOP12:	CAIE	LN,EBASEA	;IS THIS "A" OPERAND?
	SWONS	FBNUM!FBSIGN		;NO
	SWON	FANUM!FASIGN;
	POPJ	PP,
;GENERATE CODE TO ROUND THE AC'S

ROUND:	SWON	FROUND		;TURN ON "WE'RE ROUNDING"

	HRRZ	TE,EMODEB
	CAIN	TE,FPMODE
	JRST	ROUND5

	HRRZ	TE,EMODEA
	CAIN	TE,FPMODE
	JRST	ROUND9

ROUND0:	MOVE	TC,EDPLA	;COMPUTE DIFFERENCE IN DECIMAL PLACES
	SUB	TC,EDPLB
	JUMPLE	TC,NOROUN	;IF NOT POSITIVE--NO NEED FOR ROUNDING

	MOVEM	TC,ESAVAC

	CAIG	TC,^D10		;MORE THAN 10?
	JRST	ROUND1		;NO

	PUSHJ	PP,FORCX0	;YES--INSURE AC'S ARE 0&1
	MOVEI	TC,^D10		;GENERATE <DIV.21 [10**10]>
	MOVSI	CH,DIV.21
	PUSHJ	PP,PUT.PC

	MOVNI	TE,^D10		;RESET SIZE AND DECIMAL PLACES
	ADDM	TE,ESIZEA
	ADDM	TE,EDPLA

ROUND1:	MOVSI	CH,SKIPL.	;GENERATE <SKIPL AC>
	HRR	CH,EAC
	PUSHJ	PP,PUTASY

	MOVE	TC,ESAVAC	;IS LITERAL ALREADY CREATED?
	SKIPN	CH,RPWR10-1(TC)
	PUSHJ	PP,ROUND4	;NO--CREATE IT
	MOVEM	CH,ESAVAC
	MOVEM	CH,RPWR10-1(TC)

	MOVE	CH,[XWD SKIPA.+AC4,AS.MSC]	;GENERATE <SKIPA 4,[LIT]>
	PUSHJ	PP,PUTASY
	MOVE	CH,ESAVAC
	PUSHJ	PP,PUTASN

	MOVE	CH,[XWD MOVN.+AC4,AS.MSC]	;GENERATE <MOVN 4,[LIT]>
	PUSHJ	PP,PUTASY
	MOVE	CH,ESAVAC
	PUSHJ	PP,PUTASN

	HRRZ	TE,EMODEA
	CAIN	TE,D2MODE
	JRST	ROUND3
;GENERATE CODE TO ROUND AC'S  (CONT'D).

;AC'S CONTAIN 1-WORD COMP OR INDEX

ROUND2:	MOVE	CH,[XWD AD,4]
	JRST	PUT.XA
;AC'S CONTAIN A 2-WORD COMP

ROUND3:	PUSHJ	PP,FORCX0
	MOVE	CH,[XWD ADD.21,4]
	PUSHJ	PP,SETUUO
	JRST	PUTASY


;GET ROUNDING VALUE INTO LITERAL POOL

ROUND4:	MOVE	TA,[XWD D1LIT,1]
	PUSHJ	PP,STASHL
	MOVE	TA,ROUNDR-1(TC)
	PUSHJ	PP,STASHL
	HRRZ	CH,ELITPC
	IORI	CH,AS.LIT
	AOS	ELITPC
	POPJ	PP,

;ROUNDING NOT ALLOWED WITH COMP-1 RECEIVING FIELDS

ROUND5:	MOVEI	DW,^D300
	JRST	OPNWRN

;AC'S ARE FLOATING POINT, "B" IS NOT.
;CONVERT AC'S TO TWO-WORD COMP LEAVING 1 EXTRA DECIMAL PLACE.

ROUND9:	MOVE	TD,EDPLB
	AOSE	TD
	PUSHJ	PP,GENFPL
	MOVSI	CH,FIX.
	HRR	CH,EAC
	DPB	CH,CHAC
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASY

	MOVE	TE,[XWD ESIZEB,ESIZEA]
	BLT	TE,EBASAX
	AOS	ESIZEA
	AOS	EDPLA
	MOVEI	TE,D2MODE
	MOVEM	TE,EMODEA

	JRST	ROUND0
;GENERATE "SIZE ERROR" CODING

SIZERA:	SWON	FSZERA		;SET 'DON'T WORRY ABOUT TOO BIG'
	MOVE	TE,EDPLA
	CAMLE	TE,EDPLB
SIZER0:	PUSHJ	PP,ADJDP.

	HRRZ	TE,EMODEB	;IS RESULT FIELD FLOATING-POINT?
	CAIN	TE,FPMODE
	JRST	MACX.		;YES--FORGET SIZE ERROR

	HRRZ	TD,EMODEA	;NO--IS "A" FLOATING-POINT?
	CAIN	TD,FPMODE
	PUSHJ	PP,CFPCX.	;YES--CONVERT

	MOVE	TC,ESIZEB	;FIND POWER OF 10 REQUIRED
	SUB	TC,EDPLB
	ADD	TC,EDPLA
	JUMPL	TC,SIZER0

	CAILE	TC,^D10		;NEED A 2-WORD LITERAL?
	JRST	SIZER6		;YES

	HRRZ	TD,EMODEA	;NO
	CAIE	TD,D1MODE
	JRST	SIZER4


;AC'S CONTAIN ONE WORD COMP OR INDEX, LITERAL IS ONE WORD.

	MOVSI	CH,SIZE.1

SIZER2:	HRR	CH,EAC
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUTASY

	PUSHJ	PP,CREATL

	MOVE	CH,[XWD AS.XWD,1]
	PUSHJ	PP,PUTASN

	SKIPN	EMULSZ
	SKIPA	CH,ESZERA
	PUSHJ	PP,GETTAG
	MOVEM	CH,ESAVAC
	PUSHJ	PP,PUTASY

	HRRZI	CH,AS.MSC
	HRL	CH,EPWR10(TC)
	PUSHJ	PP,PUTASN

	SKIPN	EMULSZ		;MORE THAN ONE RESULT?
	JRST	MACX.		;NO--GENERATE STASH AND RETURN

	PUSHJ	PP,MACX.
	MOVE	CH,ESAVAC
	JRST	PUTTAG
;GENERATE "SIZE ERROR" CODING  (CONT'D).

;AC'S CONTAIN TWO WORDS, LITERAL IS ONE WORD

SIZER4:	MOVSI	CH,SIZE.2
	JRST	SIZER2

;LITERAL IS TWO WORDS

SIZER6:	HRRZ	TE,EMODEA	;IS AC ONE WORD?
	TE,D2MODE
	PUSHJ	PP,CC1C2.	;YES--CONVERT TO TWO WORDS

	MOVSI	CH,SIZE.3
	JRST	SIZER2
;MOVE A LITERAL FROM VALTAB TO LITAB (DISPLAY ONLY)
;THE HEADER WORD HAS ALREADY BEEN PUT OUT.

VALLIT:	HRRZ	TC,EMODEB
	PUSHJ	PP,VLIT5

VLIT2:	ILDB	TE,EBYTEA	;GET A CHARACTER
	TLNN	TB,100		;SIXBIT?
	SUBI	TE,40		;YES--CONVERT
	IDPB	TE,TB		;STASH IT INTO TA
	SOJLE	TD,VLIT3	;QUIT IF ALL HAVE BEEN TRANSFERRED

	TLNN	TB,760000	;IS "TA" FULL?
	PUSHJ	PP,VLIT4	;YES--PUT IT INTO LITAB
	JRST	VLIT2


VLIT3:	TLNE	TB,760000	;JUST ENOUGH TO FIT WORD?
	POPJ	PP,		;NO--QUIT

VLIT4:	PUSHJ	PP,STASHL	;PUT THAT WORD INTO LITAB

VLIT5:	MOVEI	TA,0		;CLEAR LITAB WORD
	CAIN	TC,D6MODE	;IS THIS TO BE SIXBIT?
	SKIPA	TB,[POINT 6,TA]	;YES
	MOVE	TB,[POINT 7,TA]	;NO--ASCII

	POPJ	PP,
;CONVERT A NUMERIC LITERAL INTO 2-WORD COMP.
;ENTER WITH EITHER "BASEA" OR "EBASEB" IN "LN".
;RETURN WITH RESULT IN TD&TC.

CONVNL:	PUSHJ	PP,FDIGIT	;GET FIRST DIGIT
	TSWF	FERROR		;ANY ERRORS SO FAR?
	POPJ	PP,		;YES--QUIT

	SETZB	TC,TD
	HRRZI	TE,1
	JRST	CNVNL2

CNVNL1:	SOSGE	ESIZEX(LN)
	JRST	CNVNL4

	ILDB	CH,EBYTEX(LN)	;GET NEXT CHARACTER
	CAIN	CH,"."
	JRST	CNVNL3

	CAIG	CH,"9"
	CAIGE	CH,"0"
	JRST	BADLK

	CAILE	TE,^D18
	JRST	TOOBIG

	ADDI	TE,1
CNVNL2:	TSWF	FLITDP		;ANY DECIMAL POINT?
	AOS	EDPLX(LN)	;YES--INCREMENT DECIMAL PLACES

	IMULI	TD,^D10
	MULI	TC,^D10
	ADD	TD,TC
	MOVE	TC,TB

	ADDI	TC,-"0"(CH)
	TLZN	TC,1B18
	JRST	CNVNL1
	AOJA	TD,CNVNL1

CNVNL3:	CAIE	LN,EBASEA
	JRST	CNVNL5
	TSWT	FANUM;
	JRST	BADLK
	JRST	CNVNL6
CNVNL5:	TSWT	FBNUM;
	JRST	BADLK
CNVNL6:	SWON	FLITDP		;YES--SET "DECIMAL POINT SEEN"
	JRST	CNVNL1		;LOOP

CNVNL4:	MOVEM	TE,ESIZEX(LN)
	POPJ	PP,
;CREATE A FLOATING POINT LITERAL.
;EXIT WITH EXPONENT IN TD, MANTISSA IN TC.

CONVFP:	PUSHJ	PP,FDIGIT	;GET FIRST DIGIT
	TSWF	FERROR		;ANY ERRORS?
	POPJ	PP,		;YES

	MOVEI	TC,0
	MOVN	TD,EDPLX(LN)
	HRRZI	TE,1
	MOVE	TB,[POINT 4,TC,3]
	JRST	CNVFP2

CNVFP1:	SOSGE	ESIZEX(LN)
	POPJ	PP,

	ILDB	CH,EBYTEX(LN)
	CAIN	CH,"."
	JRST	CNVFP3

	CAIG	CH,"9"
	CAIGE	CH,"0"
	JRST	BADLK

	CAILE	TE,^D8
	JRST	CNVFP7

	ADDI	TE,1
CNVFP2:	TSWT	FLITDP;
	AOS	TD

	IDPB	CH,TB
	JRST	CNVFP1

CNVFP3:	CAIE	LN,EBASEA
	JRST	CNVFP5
	TSWT	FANUM;
	JRST	BADLK
	JRST	CNVFP6
CNVFP5:	TSWT	FBNUM;
	JRST	BADLK
CNVFP6:	SWON	FLITDP;
	JRST	CNVFP1

CNVFP7:	CAIE	CH,"0"
	JRST	TOOBIG
	TSWT	FLITDP		;IS THIS A DECIMAL PLACE?
	AOJA	TD,CNVFP1	;NO--BUMP INTEGRAL SIZE
	JRST	CNVFP1		;YES--LOOP WITHOUT BUMPING
;SCAN A LITERAL TO GET SIZE AND DECIMAL PLACES

SCANL:	HLRZ	TE,OPERND	;IS "ALL" FLAG UP?
	MOVE	TE,0(TE)
	TLNE	TE,GNALL
	JRST	BADALL		;YES--ERROR

	MOVEI	LN,EBASEA
	PUSHJ	PP,FDIGIT	;GET FIRST DIGIT
	TSWF	FERROR		;ANY ERROR?
	POPJ	PP,		;YES--QUIT

	MOVE	TD,[POINT 6,LITHLD]
	HRRZI	TC,0		;CLEAR SIZE
	JRST	SCANL3

SCANL2:	SOSGE	ESIZEA		;ANYTHING LEFT?
	JRST	SCANL5		;NO

	ILDB	CH,EBYTEA
	CAIN	CH,"."
	JRST	SCANL4

	CAIG	CH,"9"
	CAIGE	CH,"0"
	JRST	BADLK

SCANL3:	ADDI	TC,1
	TSWF	FLITDP
	AOS	EDPLA
	CAILE	TC,^D18
	JRST	TOOBIG
	SUBI	CH,40
	IDPB	CH,TD
	JRST	SCANL2

SCANL4:	TSWT	FANUM		;DECIMAL POINT SEEN
	JRST	BADLK
	TSWT	FBNUM
	JRST	BADDP
	SWON	FLITDP
	JRST	SCANL2

SCANL5:	MOVEM	TC,ESIZEA
	POPJ	PP,
;GET FIRST SIGNIFICANT DIGIT OF LITERAL IN VALTAB
;RETURN WITH THAT FIRST DIGIT IN "CH"

FDIGIT:	SWOFF	FLITDP!FLNEG!FERROR;
	SETZM	EDPLX(LN)
	SOSGE	ESIZEX(LN)
	JRST	LNOSIZ
	ILDB	CH,EBYTEX(LN)

	CAIN	CH,"+"
	JRST	FDIG4
	CAIN	CH,"-"
	JRST	FDIG3

FDIG1:	CAILE	CH,"9"
	JRST	BADLK
	CAIL	CH,"1"
	POPJ	PP,

	CAIN	CH,"0"
	JRST	FDIG6
	CAIE	CH,"."
	JRST	BADLK

	SWONS	FLITDP;

FDIG3:	SWON	FLNEG;

FDIG4:	CAIE	LN,EBASEA
	JRST	FDIG5
	TSWT	FANUM;
	JRST	BADLK
	JRST	FDIG7

FDIG5:	TSWT	FBNUM;
	JRST	BADLK
	JRST	FDIG7

FDIG6:	SKIPN	ESIZEX(LN)
	POPJ	PP,
	TSWF	FLITDP;
	AOS	EDPLX(LN)

FDIG7:	SOSGE	ESIZEX(LN)
	JRST	LNOSIZ
	ILDB	CH,EBYTEX(LN)
	JRST	FDIG1
;MULTIPLY A LITERAL BY SOME POWER OF 10.
;ENTER WITH THE POWER IN "TE", A PARAMETER TABLE BASE IN "LN".

ADJSL.:	JUMPLE	TE,CPOPJ	;REFUSE ANY NEGATIVE OR ZERO POWERS

	ADDM	TE,EDPLX(LN)
	MOVE	TA,TE
	ADDB	TA,ESIZEX(LN)
	CAILE	TA,MAXSIZ
	JRST	TOOBIG

	CAILE	TE,^D10
	JRST	ADJSL1

	IMUL	TD,POWR10(TE)
	MUL	TC,POWR10(TE)
	ADD	TD,TC
	MOVE	TC,TB
	POPJ	PP,

ADJSL1:	SUBI	TE,^D11
	LSH	TE,1
	MOVEM	TC,ELITLO

	IMUL	TD,DPWR10+1(TE)
	MUL	TC,DPWR10(TE)
	ADD	TD,TB
	MOVE	TC,ELITLO
	MUL	TC,DPWR10+1(TE)
	ADD	TD,TC
	MOVE	TC,TB

	POPJ	PP,
;SWAP THE TWO OPERANDS.

SWAPAB:	MOVE	TE,[XWD EBASEA,ESAVEB]
	BLT	TE,ESAVBX
	MOVE	TE,[XWD EBASEB,EBASEA]
	BLT	TE,EBASAX
	MOVE	TE,[XWD ESAVEB,EBASEB]
	BLT	TE,EBASBX

	MOVE	TA,SW
	TSWTZ	FBSIGN;
	SWOFFS	FASIGN;
	SWON	FASIGN;
	TSWTZ	FBNUM;
	SWOFFS	FANUM;
	SWON	FANUM;
	TSWTZ	FBSUB;
	SWOFFS	FASUB;
	SWON	FASUB;

	TRNE	TA,FASIGN
	SWON	FBSIGN;
	TRNE	TA,FANUM
	SWON	FBNUM;
	TRNE	TA,FASUB
	SWON	FBSUB;

	MOVSS	OPERND

	POPJ	PP,
;CREATE A BYTE POINTER TO "A" AND PUT IT INTO LITAB

MBYTEA:	MOVEI	TB,EBASEA
	JRST	MBYTEX


;LIKEWISE FOR "B"

MBYTEB:	MOVEI	TB,EBASEB

MBYTEX:	HRRZ	TA,EBASEX(TB)
	PUSHJ	PP,STASHL

	HLRZ	TA,ERESX(TB)
	ROT	TA,-6
	HRRZ	TC,EMODEX(TB)
	MOVE	TC,BYTE.S(TC)
	DPB	TC,[POINT 6,TA,11]
	HRR	TA,EINCRX(TB)
	JRST	STASHL
;WRITE OUT <OP AC,EBASEA+EINCRA>

PUT.AA:	MOVE	TE,EAC
	DPB	TE,CHAC

;WRITE OUT <OP EBASEA+EINCRA>

PUT.A:	TSWF	FASUB		;IS IT SUBSCRIPTED?
	JRST	PUT.A2		;YES

PUT.A1:	HRR	CH,EBASEA
	SKIPN	EINCRA
	JRST	PUTASY

	TLO	CH,ASINC
	PUSHJ	PP,PUTASY
	HRRZ	CH,EINCRA
	JRST	PUTASN

PUT.A2:	LDB	TE,[POINT 3,EBASEA,20]
	CAIE	TE,TB.DAT
	JRST	PUT.A1

	TLO	CH,SXR
	HRR	CH,EINCRA
	JRST	PUTASY
;WRITE OUT <OP AC,EBASEB+EINCRB>

PUT.BA:	MOVE	TE,EAC
	DPB	TE,CHAC

;WRITE OUT <OP EBASEB+EINCRB>

PUT.B:	TSWF	FBSUB		;IS IT SUBSCRIPTED?
	JRST	PUT.B2		;YES

PUT.B1:	HRR	CH,EBASEB
	SKIPN	EINCRB
	JRST	PUTASY

	TLO	CH,ASINC
	PUSHJ	PP,PUTASY
	HRRZ	CH,EINCRB
	JRST	PUTASN

PUT.B2:	LDB	TE,[POINT 3,EBASEB,20]
	CAIE	TE,TB.DAT
	JRST	PUT.B1

	TLO	CH,SXR
	HRR	CH,EINCRB
	JRST	PUTASY
;WRITE OUT <OP AC,[LITERAL]>.
;LITERAL VALUE IS IN TC.

PUT.LA:	MOVE	TE,EAC
	DPB	TE,CHAC

	TLNE	TC,-1
	JRST	PUT.L

	ADD	CH,[1B8]
	TRNE	TC,7B20
	JRST	PUT.L1
	HRR	CH,TC
	JRST	PUTASY

PUT.L1:	HRRI	CH,AS.CNB
	TLO	CH,ASINC
	PUSHJ	PP,PUTASY
	HRRZ	CH,TC
	JRST	PUTASN

;WRITE OUT <OP X,[LITERAL]>.
;PUT LITERAL INTO AS.LIT
;LITERAL VALUE IS IN TC

PUT.L:	MOVE	TA,[XWD D1LIT,1]
	PUSHJ	PP,STASHL
	MOVE	TA,TC
	PUSHJ	PP,STASHL
	HRRZ	EACC,ELITPC
	AOS	ELITPC

;WRITE OUT <OP X,[LITERAL]>
;ADDRESS OF LITERAL IS IN EACC

PUT.LB:	HRRI	CH,AS.MSC
	TLO	CH,ASINC
	PUSHJ	PP,PUTASY
	HRRZ	CH,EACC
	IORI	CH,AS.LIT
	JRST	PUTASN
;GENERATE <OP AC,[POWER OF 10]>,  OR <OPI AC,POWER OF 10>.
;ENTER WITH OP SET UP IN CH, THE POWER IN TC.

PUT.PA:	MOVE	TE,EAC		;SET AC FIELD

	DPB	TE,CHAC

PUT.P:	CAIG	TC,5		;CAN IT BE IMMEDIATE MODE?
	JRST	PUT.P1		;YES

;SIMILAR TO GENOPL, EXCEPT THAT AC-FIELD NOT TOUCHED, AND
;	NO IMMEDIATE MODE.

PUT.PC:	PUSHJ	PP,CREATL	;CREATE THE LITERAL, IF NEEDED

	HRRI	CH,AS.MSC	;CREATE INSTRUCTION
	TLO	CH,ASINC
	PUSHJ	PP,PUTASY	;WRITE OUT FIRST OF TWO WORDS
	HRRZ	CH,EPWR10(TC)
	JRST	PUTASN		;WRITE OUT INCREMENT AND RETURN

PUT.P1:	ADD	CH,[1B8]	;IMMEDIATE MODE USED
	CAILE	TC,4		;IS IT LESS THAN 77777?
	JRST	PUT.P2

	HRR	CH,POWR10(TC)	;YES
	JRST	PUTASY

PUT.P2:	HRRI	CH,AS.CNB	;NO
	TLO	CH,ASINC
	PUSHJ	PP,PUTASY
	HRRZ	CH,POWR10(TC)
	JRST	PUTASN
;GENERATE AN INSTRUCTION REFERENCING CURRENT LITERAL.
;OP-CODE IS IN "CH", AC-FIELD IN EAC.

PUT.LC:	MOVE	TE,EAC
	DPB	TE,CHAC

;SIMILAR TO PUT.LC, EXCEPT THAT AC-FIELD UNALTERED.

PUT.LD:	HRRI	CH,AS.MSC
	TLO	CH,ASINC
	PUSHJ	PP,PUTASY

	HRRZ	CH,ELITPC
	IORI	CH,AS.LIT
	JRST	PUTASN


;SET AC-FIELD TO "EAC", AND WRITE OUT INSTRUCTION.

PUT.XA:	MOVE	TE,EAC
PUT.X1:	DPB	TE,CHAC
	JRST	PUTASY

;SET AC-FIELD TO EAC+1, AND WRITE OUT INSTRUCTION.

PUT.XB:	MOVE	TE,EAC
	AOJA	TE,PUT.X1


;PUT OUT REFERENCE TO EXTERNAL AND CHECK FOR NON-RESIDENT

PUT.EX:	PUSHJ	PP,PUTASY
	TSWT	FAS3
	POPJ	PP,

	ANDI	CH,77777
	ADD	CH,EXTLOC
	MOVSI	TE,1B18
	IORM	TE,1(CH)
	POPJ	PP,
;ADJUST DECIMAL PLACES OF FLOATING-POINT ITEM IN AC'S.

GENFPL:	MOVM	TC,TD
	SKIPE	TD
	CAILE	TC,MAXSIZ
	POPJ	PP,

	MOVSI	CH,FMP.
	SKIPG	TD
	MOVSI	CH,FDV.

	SKIPE	TB,EFPCNV(TC)
	JRST	GENFP2

	MOVE	TB,ELITPC
	IORI	TB,AS.LIT
	AOS	ELITPC
	MOVEM	TB,EFPCNV(TC)

	MOVE	TA,[XWD FLTLIT,2]
	PUSHJ	PP,STASHL
	MOVEI	TA,1(TC)
	PUSHJ	PP,STASHL
	MOVSI	TA,1B<^D18+7>
	PUSHJ	PP,STASHL

GENFP2:	HRRI	CH,AS.MSC
	TLO	CH,ASINC
	PUSHJ	PP,PUT.XA
	HRRZ	CH,TB
	JRST	PUTASN
;PUT A POWER OF 10 IN THE LITERAL POOL, AND PUT ENTRY ADDRESS INTO "EPWR10".
;ENTER WITH POWER IN "TC".

CREATL:	SKIPE	EPWR10(TC)
	POPJ	PP,

	CAILE	TC,^D10		;2 WORDS?
	JRST	CREAT2		;YES

	MOVE	TA,[XWD D1LIT,1];NO--1 WORD
	PUSHJ	PP,STASHL
	MOVE	TA,POWR10(TC)
	PUSHJ	PP,STASHL

	MOVE	TE,ELITPC	;SAVE ADDRESS OF THE LITERAL
	AOS	ELITPC		;BUMP THE ADDRESS

CREAT1:	IORI	TE,AS.LIT	;SET TABLE ENTRY WITH ADDRESS
	MOVEM	TE,EPWR10(TC)

	CAILE	TC,^D20
	SKIPE	EPWR10-^D20(TC)
	POPJ	PP,
	ADDI	TE,1
	MOVEM	TE,EPWR10-^D20(TC)
	POPJ	PP,

CREAT2:	MOVE	TA,[XWD D2LIT,2]	;GENERATE 2-WORD LITERAL
	PUSHJ	PP,STASHL

	CAILE	TC,^D20
	JRST	CREAT4

	MOVE	TE,TC
	SUBI	TE,^D11
	LSH	TE,1
	MOVE	TA,DPWR10(TE)
	MOVE	TD,DPWR10+1(TE)
	PUSHJ	PP,STASHL
	MOVE	TA,TD
CREAT3:	PUSHJ	PP,STASHL

	MOVEI	TE,2		;BUMP UP LITERAL ADDRESS
	EXCH	TE,ELITPC
	ADDM	TE,ELITPC
	JRST	CREAT1

CREAT4:	MOVEI	TA,0
	PUSHJ	PP,STASHL
	MOVE	TA,POWR10-^D20(TC)
	JRST	CREAT3
;INSURE THAT AC'S ARE 0&1.
;IF NOT, GENERATE A MOVE.

FORCX0:	SKIPN	CH,EAC
	POPJ	PP,

	HRLI	CH,MOV
	PUSHJ	PP,PUTASY

	MOVE	CH,EAC
	SETZM	EAC
	HRRZ	TE,EMODEA
	CAIE	TE,D2MODE
	POPJ	PP,

	HRLI	CH,MOV+AC1
	AOJA	CH,PUTASY
;PUT OUT A "JRST" TO A MISCELLANEOUS ADDRESS.
;ENTER WITH ADDRESS INCREMENT IN "TC".

JOUT:	MOVE	CH,[XWD JRST.+ASINC,AS.MSC]
	PUSHJ	PP,PUTASY
	MOVEI	CH,(TC)
	JRST	PUTASN
;DOUBLE PRECISION DIVIDE.  "TE" SPECIFIES SOME POWER OF 10.

DPDIV.:	CAILE	TE,^D10
	JRST	DPDIV1

	MOVE	TA,POWR10(TE)
	JRST	DPD21

DPDIV1:	SUBI	TE,^D11
	LSH	TE,1
	MOVE	TB,DPWR10(TE)
	MOVE	TA,DPWR10+1(TE)
	JRST	DPD22
;DIVIDE A DOUBLE PRECISION NUMBER BY A SINGLE PRECISION NUMBER..

;ENTER WITH DIVIDEND IN TD&TC, DIVISOR IN TA.
;EXIT WITH QUOTIENT IN TD&TC, REMAINDER IN TB&TA.

DPD21:	JOV	.+1
	DIV	TD,TA
	JOV	DPD21A

	MOVE	TA,TC
	MOVE	TC,TD
	SETZB	TD,TB
	POPJ	PP,

;QUOTIENT IS DOUBLE PRECISION.

DPD21A:	MOVE	TE,TD
	IDIV	TE,TA
	DIV	TD,TA

	MOVE	TA,TC
	MOVE	TC,TD
	MOVE	TD,TE
	HRRZI	TB,0
	POPJ	PP,
;DIVIDE A DOUBLE PRECISION NUMBER BY A DOUBLE PRECISION NUMBER.
;ENTER WITH DIVIDEND IN TD&TC, DIVISOR IN TB&TA.
;EXIT WITH QUOTIENT IN TD&TC, REMAINDER IN TB&TA.

DPD22:	MOVE	LN,TD
	MOVE	CP,TC
	IDIV	TD,TB

	MOVE	CH,TD

DPDIV3:	MUL	TD,TA
	MOVE	TE,TB
	IMUL	TE,CH
	ADD	TD,TE

	SUBM	LN,TD
	SUBM	CP,TC
	TLZE	TC,1B18
	SUBI	TD,1
	TLNE	TD,1B18
	TLO	TC,1B18

	JUMPGE	TD,DPDIV5
	MOVEI	TD,-1(CH)
	SOJA	CH,DPDIV3

DPDIV5:	MOVE	TA,TC
	MOVE	TB,TD
	HRRZI	TD,0
	MOVE	TC,CH

	POPJ	PP,
;SET CUREOP TO THE NEXT OPERAND IN EOPTAB.

BMPEOP:	MOVE	TE,CUREOP
	MOVE	TD,0(TE)
	MOVE	TE,1(TE)

	TLNN	TE,GNNOTD
	TLNE	TD,GNLIT
	TDCA	TD,TD
	LDB	TD,TESUBC

	LSH	TD,1
	ADDI	TD,2
	ADDB	TD,CUREOP

	HRRZ	TE,EOPNXT
	CAILE	TE,(TD)
	AOS	(PP)
	POPJ	PP,
;NEGATE THE 2-WORD LITERAL TO BE FOUND IN TD&TC.

NEGATL:	SETCA	TD,
	MOVNS	TC
	JUMPN	TC,CPOPJ
	ADDI	TD,1
	TLNN	TD,1B18
	TLZA	TC,1B18
	TLO	TC,1B18
	POPJ	PP,
;PUT A LITERAL INTO %LIT.
;ENTER WITH VALUE OF LITERAL IN TD&TC.

MAKEL:	HRRZ	TA,ELITPC	;GET %LIT ADDRESS
	IORI	TA,AS.LIT
	MOVEM	TA,EINCRX(LN)
	MOVEI	TA,AS.MSC
	MOVEM	TA,EBASEX(LN)

	MOVE	TE,ESIZEX(LN)		;IS IT TWO WORDS?
	CAILE	TE,^D10
	JRST	MAKL1A		;YES

MAKEL1:	MOVE	TA,[XWD D1LIT,1]	;NO--CREATE A 1-WORD LITERAL
	PUSHJ	PP,STASHL
	TSWT	FLNEG		;LITERAL NEGATIVE?
	SKIPA	TA,TC		;NO--USE POSITIVE VALUE
	MOVN	TA,TC		;YES--USE NEGATIVE VALUE
	PUSHJ	PP,STASHL

	MOVEI	TA,D1MODE
	MOVEM	TA,EMODEX(LN)
	AOS	ELITPC
	POPJ	PP,

MAKL1A:	JUMPE	TD,MAKEL3

MAKL1B:	MOVE	TA,[XWD D2LIT,2]
	PUSHJ	PP,STASHL
	TSWF	FLNEG;
	PUSHJ	PP,NEGATL
	MOVE	TA,TD
	PUSHJ	PP,STASHL
	MOVE	TA,TC
	PUSHJ	PP,STASHL

	MOVEI	TE,2
	ADDM	TE,ELITPC
	MOVEI	TE,D2MODE
	MOVEM	TE,EMODEX(LN)

	POPJ	PP,

MAKEL3:	MOVEI	TE,^D10
	MOVEM	TE,ESIZEX(LN)
	JRST	MAKEL1

MAKEL2:	HRRZ	TA,ELITPC
	IORI	TA,AS.LIT
	MOVEM	TA,EINCRX(LN)
	MOVEI	TA,AS.MSC
	MOVEM	TA,EBASEX(LN)
	JRST	MAKL1B
;BUILD A SINGLE PARAMETER FROM "A" DATA.
;IF "A" IS SUBSCRIPTED, CALL SUBSCRIPT GENERATOR.
;IF "A" NOT SUBSCRIPTED, LEAVE PARAMETER IN %LIT.

B1PAR:	PUSHJ	PP,SUBSCD
	TSWF	FASUB		;IS "A" SUBSCRIPTED NOW?
	POPJ	PP,		;YES--RETURN

	MOVE	TA,[XWD XWDLIT,2]	;NO--PUT PARAMETER INTO %LIT
	PUSHJ	PP,STASHL

	HLRZ	TA,ERESA
	LSH	TA,14
	ADD	TA,SUBCON
	HRLZS	TA
	HRRI	TA,AS.CNB
	PUSHJ	PP,STASHL

	MOVE	TA,EBASEA
	HRL	TA,EINCRA
	PUSHJ	PP,STASHL

	MOVE	EACC,ELITPC
	AOS	ELITPC
	IORI	EACC,AS.LIT

	POPJ	PP,
;SET UP TWO PARAMETERS (FOR MOVE OR IF).
;IF BOTH FIELDS ARE SUBSCRIPTED, PARAMETERS ARE PUT INTO %TEMP.
;IF ONLY ONE FIELD IS SUBSCRIPTED, PARAMETERS ARE PUT INTO %PARAM.
;IF NEITHER FIELD IS SUBSCRIPTED, PARAMETERS ARE PUT INTO %LIT.

B2PAR:	PUSHJ	PP,SUBSCA	;SUBSCRIPT "A" IF NECESSARY
	TSWF	FASUB		;IS IT SUBSCRIPTED NOW?
	JRST	B2PAR3		;YES

	PUSHJ	PP,SUBSCC	;NO--SUBSCRIPT "B" IF NECESSARY
	TSWF	FBSUB		;IS "B" SUBSCRIPTED?
	JRST	B2PAR6		;YES

;NEITHER IS SUBSCRIPTED

	MOVEI	EACC,2
	EXCH	EACC,ELITPC
	ADDM	EACC,ELITPC
	IORI	EACC,AS.LIT

	MOVE	TA,[XWD BYTLIT,2]
	PUSHJ	PP,STASHL
	PUSHJ	PP,BYTE.A
	EXCH	TB,TA
	HLR	TB,TA
	HRRZS	TA
	PUSHJ	PP,STASHL
	MOVE	TA,TB
	PUSHJ	PP,STASHL

	MOVE	TA,[XWD XWDLIT,2]
	PUSHJ	PP,STASHL
	PUSHJ	PP,BYTE.C

	TSWF	FBSIGN;
	TLO	TA,SYNBIT
	PUSHJ	PP,STASHL
	MOVE	TA,TB
	JRST	STASHL
;SET UP TWO PARAMETERS (CONT'D).

;"A" IS SUBSCRIPTED

B2PAR3:	TSWT	FAS3		;ARE WE IN NON-RESIDENT SEGMENT?
	TSWF	FBSUB		;NO--IS "B" ALSO SUBSCRIPTED?
	JRST	B2PAR8		;YES

	MOVE	CH,[XWD AS.OCT,1]	;NO--USE IMPPAR
	PUSHJ	PP,PUTAS1
	HRRZI	CH,0
	PUSHJ	PP,PUTAS1

	MOVE	CH,MOVSAC
	PUSHJ	PP,PUTASY
	HRRZ	CH,EAS1PC
	IORI	CH,AS.PAR
	PUSHJ	PP,PUTASN

	PUSHJ	PP,BYTE.C
	TSWF	FBSIGN;
	TLO	TA,SYNBIT
	MOVE	CH,[XWD AS.XWD,1]
	PUSHJ	PP,PUTAS1
	MOVE	CH,TA
	PUSHJ	PP,PUTAS1
	MOVE	CH,TB
	PUSHJ	PP,PUTAS1

B2PAR4:	MOVEI	EACC,2
	EXCH	EACC,EAS1PC
	ADDM	EACC,EAS1PC
	IORI	EACC,AS.PAR
	POPJ	PP,
;SET UP PARAMETERS (CONT'D).

;"B" IS SUBSCRIPTED, "A" ISN'T

B2PAR6:	TSWF	FAS3		;ARE WE IN NON-RESIDENT SEGMENT?
	JRST	B2PAR7		;YES
	PUSHJ	PP,BYTE.A
	MOVSI	CH,AS.BYT
	HRR	CH,TB
	PUSHJ	PP,PUTAS1

	MOVS	CH,TB
	HLL	CH,TA
	PUSHJ	PP,PUTAS1

	MOVE	CH,[XWD AS.OCT,1]
	PUSHJ	PP,PUTAS1
	MOVEI	CH,0
	PUSHJ	PP,PUTAS1

	MOVE	CH,MOVSAC
	PUSHJ	PP,PUTASY
	HRRZ	CH,EAS1PC
	ADDI	CH,1
	IORI	CH,AS.PAR
	PUSHJ	PP,PUTASN
	JRST	B2PAR4

B2PAR7:	MOVEI	TE,2
	PUSHJ	PP,GETEMP
	PUSH	PP,EACC
	MOVE	CH,MOVSAC
	PUSHJ	PP,PUTASY
	HRRZ	CH,0(PP)
	ADDI	CH,1
	PUSHJ	PP,PUTASN

	PUSHJ	PP,B2PR9A
	MOVE	CH,MOVSAC
	PUSHJ	PP,PUTASY
	POP	PP,CH
	JRST	PUTASN
;SET UP TWO PARAMETERS (CONT'D).

;WE ARE GOING TO USE %TEMP TO HOLD PARAMETERS.
;EITHER BOTH ITEMS WERE SUBSCRIPTED, OR WE ARE IN NON-RESIDENT SEGMENT.

B2PAR8:	MOVEI	TE,2
	PUSHJ	PP,GETEMP
	PUSH	PP,EACC		;SAVE ADDRESS
	TSWT	FASUB		;IS "A" SUBSCRIPTED?
	PUSHJ	PP,B2PR9A

B2PR8A:	MOVE	CH,MOVSAC
	PUSHJ	PP,PUTASY
	HRRZ	CH,(PP)
	PUSHJ	PP,PUTASN

	PUSHJ	PP,SUBSCC
	TSWT	FBSUB		;"B" SUBSCRIPTED?
	JRST	B2PAR9		;NO--MUST HAVE HAD LITERALS

B2PR8B:	MOVE	CH,MOVSAC
	PUSHJ	PP,PUTASY
	POP	PP,EACC
	HRRZI	CH,1(EACC)
	JRST	PUTASN

B2PAR9:	MOVE	TA,[XWD XWDLIT,2]
	PUSHJ	PP,STASHL
	PUSHJ	PP,BYTE.C
	TSWF	FBSIGN
	TLO	TA,SYNBIT
	PUSHJ	PP,STASHL
	MOVE	TA,TB
	PUSHJ	PP,STASHL

	MOVSI	CH,MOV+SAC
	PUSHJ	PP,PUT.LD

	AOS	ELITPC
	JRST	B2PR8B

B2PR9A:	MOVE	TA,[XWD BYTLIT,2]
	PUSHJ	PP,STASHL
	PUSHJ	PP,MBYTEA

	MOVSI	CH,MOV+SAC
	PUSHJ	PP,PUT.LD
	AOS	ELITPC
	POPJ	PP,
;GENERATE SUBSCRIPT CALL FOR "A"
SUBSCA:	TSWT	FASUB		;IS IT SUBSCRIPTED?
	POPJ	PP,		;NO--NO ACTION

	HRRZ	TE,EMODEA
	CAILE	TE,D7MODE
	TDCA	TE,TE
	MOVE	TE,BYTE.S(TE)
	LSH	TE,6
	MOVEM	TE,SUBCON
SBSCA1:	MOVEI	DT,ESAVES
	HLRZ	TE,OPERND
	MOVEM	TE,CUREOP
	PUSHJ	PP,SUBSCR
	SWOFFS	FASUB		;LITERAL SUBSCRIPTS
	POPJ	PP,		;NON-LITERAL SUBSCRIPTS

	HRRZM	TE,EINCRA
	LSH	TE,-14
	HLLM	TE,ERESA
	POPJ	PP,

;GENERATE SUBSCRIPT CALL FOR "B"
SUBSCB:	TSWT	FBSUB;
	POPJ	PP,

	HRRZ	TE,EMODEB
	CAILE	TE,DSMODE
	TDCA	TE,TE
	MOVE	TE,BYTE.S(TE)
	LSH	TE,6
SUBSB0:	MOVEM	TE,SUBCON
SUBSB1:	MOVEI	DT,ESAVSB
	HRRZ	TE,OPERND
	MOVEM	TE,CUREOP
	PUSHJ	PP,SUBSCR
	SWOFFS	FBSUB		;LITERAL SUBSCRIPTS
	POPJ	PP,		;NON-LITERAL SUBSCRIPTS

	HRRZM	TE,EINCRB
	LSH	TE,-14
	HLLM	TE,ERESB
	POPJ	PP,

;GENERATE SUBSCRIPT CALL FOR "B", WITH SIZE IN SUBCON
SUBSCC:	TSWT	FBSUB		;IS IT SUBSCRIPTED?
	POPJ	PP,		;NO
	HRRZ	TE,ESIZEB
	TSWF	FBSIGN;
	IORI	TE,SYNBIT
	JRST	SUBSB0
;GENERATE SUBSCRIPT CALL FOR "A", WITH "ESIZEZ" IN SUBCON.

SUBSCD:	HRRZ	TE,ESIZEZ
	TSWF	FASIGN;
	IORI	TE,SYNBIT
	MOVEM	TE,SUBCON
	TSWT	FASUB;
	POPJ	PP,
	JRST	SBSCA1


;GENERATE SUBSCRIPT CALL FOR "B", ASSUMING "SUBCON" IS SET UP

SUBSCE:	TSWT	FBSUB		;IS "B" SUBSCRIPTED?
	POPJ	PP,		;NO

	JRST	SUBSB1		;YES
;GENERATE CODE FOR SUBSCRIPTING.
;ENTER WITH "CUREOP" POINTING TO THE ITEM, A CONSTANT IN "SUBCON",
;	AND "DT" POINTING TO EITHER ESAVES (FOR A), OR ESAVSB (FOR B).
;EXIT TO CALL+1 IF ALL SUBSCRIPTS ARE LITERALS, OR IF ERRORS FOUND
;	WITH "TE" CONTAINING THE BYTE POINTER.
;EXIT TO CALL+2 IF NOT ALL SUBSCRIPTS WERE LITERALS, AFTER GENERATING UUO CALL.

SUBSCR:	MOVEM	SW,ESAVSW
	SWOFF	FASUB!FBSUB;
	MOVEM	DT,ESAVDT
	MOVE	TE,[XWD EBASEA,ESAVES]	;SAVE "A" AND "B" PARAMS
	BLT	TE,ESAVSX

	MOVE	TC,CUREOP		;SAVE CUREOP
	MOVEM	TC,ESAVOP

	MOVSI	TE,(LKSFLG)		;GET OPERAND'S L.S. FLAG
	AND	TE,(TC)
	MOVEM	TE,ELNKSF##		;REMEMBER SETTING

	MOVE	TE,1(TC)		;ANY SUBSCRIPTS WAITING?
	LDB	TE,TESUBC
	SKIPN	ELNKSF			;LINKAGE SECTION ARGUMENT?
	JUMPE	TE,BADSB3		;NO -- ERROR
	MOVEM	TE,ENOCC2		;YES -- SAVE COUNT

	PUSHJ	PP,EXMSUB		;LOOK AT THE SUBSCRIPTS
	JRST	SUBS20			;THEY ARE ALL LITERALS

SUBSC0:	TSWF	FERROR			;ANY ERRORS?
	JRST	SUBS10			;YES -- QUIT
	AOS	(PP)			;EXIT WILL BE TO CALL+2
	MOVE	TC,ESAVOP		;RESET CUREOP
	MOVEM	TC,CUREOP
	MOVEM	TC,HLDEOP##		;SAVE PTR FOR SUBS15
	SETZM	ENOCC1			;CLEAR COUNTER
;GENERATE CODING FOR SUBSCRIPT  (CONT'D).

;CREATE BYTE POINTER TO (1,...,1) ELEMENT

	MOVE	DT,ESAVDT
	MOVE	TA,[XWD BYTLIT,2]
	PUSHJ	PP,STASHL
	HRRZ	TA,EBASEX(DT)		;ADDRESS PORTION
	PUSHJ	PP,STASHL
	HLRZ	TE,ERESX(DT)		;GET RESIDUE
	ROT	TE,-6
	HRRZ	TD,EMODEX(DT)		;GET USAGE
	PUSHJ	PP,SUBSCK		;CHECK FATHER OF COMP ITEMS
	CAIE	TD,D7MODE		;IS IT ASCII?
	TLOA	TE,600			;NO -- PRETEND IT'S SIXBIT
	TLO	TE,700			;YES
	HLLZ	TA,TE
	HRR	TA,EINCRX(DT)
	PUSHJ	PP,STASHL

;SET UP SECOND WORD OF PARAMETER

	MOVSI	TA,XWDLIT		;WE DON'T KNOW SIZE YET
	PUSHJ	PP,STASHL
	HRRZM	TE,CURLIT	;SAVE LOCATION OF LITAB ENTRY

	MOVEI	TA,AS.CNB
	PUSHJ	PP,STASHL
	HRRZ	TA,SUBCON
	ANDI	TA,7777
	PUSHJ	PP,STASHL

	SKIPN	ENOCC2
	JRST	SUBSC9
;GENERATE CODING FOR SUBSCRIPT (CONT'D).

;PUT TWO WORDS IN LITAB FOR EACH SUBSCRIPT

	MOVE	TA,CUREOP
	MOVE	TA,1(TA)
	PUSHJ	PP,LNKSET

	LDB	TE,DA.OCC	;IS THERE AN
	JUMPN	TE,SUBSC1	;  OCCURS AT THIS LEVEL?

	LDB	TA,DA.OCH	;NO--BACK UP ONE LEVEL
	PUSHJ	PP,LNKSET

SUBSC1:	HRRZM	TA,CURDAT	;SAVE ADDRESS OF THIS LEVEL

	LDB	TE,DA.NOC	;GET NUMBER OF OCCURENCES
	MOVEM	TE,ESMAX

	LDB	TA,DA.DEP	;PUT 'DEPENDING' ITEM OUT AS LH OF WORD 1
	JUMPE	TA,SUBS1A
	ANDI	TA,TM.DAT	;CHANGE
	IORI	TA,AS.DAT	;  CODE
SUBS1A:	PUSHJ	PP,STASHL

	MOVEI	TC,2		;BUMP UP TO NEXT SUBSCRIPT
	ADDB	TC,CUREOP

	MOVEI	LN,EBASEA	;SET UP "A" PARAMS
	PUSHJ	PP,SETOPN

	HRRZ	TE,EMODEA	;IS IT A LITERAL?
	CAIN	TE,LTMODE
	JRST	SUBSC4		;YES

	SKIPE	EDPLA		;NO -- ANY DECIMAL PLACES?
	JRST	BADSUB		;YES--THAT'S A NO-NO

	MOVE	TA,EBASEA	;PUT IT OUT AS RH OF WORD 1
	HRL	TA,EINCRA
	PUSHJ	PP,STASHL

SUBSC2:	HRRZ	TA,CURDAT	;GET BACK TO OCCURENCE ITEM
	LDB	TC,DA.USG	;GET SIZE
	XCT	SUBSIZ(TC)
	MOVE	TA,TE
	PUSHJ	PP,STASHL	;WRITE IT OUT A LH OF WORD 2

	HRLZ	TA,ESMAX
	HRRZ	TE,EMODEA
	CAIE	TE,LTMODE
	TLO	TA,1B18
	HRRI	TA,AS.CNB
	PUSHJ	PP,STASHL	;WRITE IT OUT AS RH OF WORD 2
	JRST	SUBSC6
;SUBSCRIPT IS A LITERAL
SUBSC4:	PUSHJ	PP,CONVNL	;GET IT'S VALUE
	SKIPN	EDPLA
	TSWF	FLNEG;
	JRST	BADSUB
	JUMPN	TD,BADSB5
	JUMPE	TC,BADSUB
	CAMLE	TC,ESMAX
	JRST	TOOBIG

	MOVS	TA,TC			;WRITE OUT VALUE AS RH OF WORD 1
	HRRI	TA,AS.CNB
	PUSHJ	PP,STASHL
	JRST	SUBSC2

;THAT SUBSCRIPT TAKEN CARE OF -- CHECK FOR MORE

SUBSC6:	AOS	TD,ENOCC1	;BUMP COUNT

	MOVE	TE,CUREOP	;DID
	MOVE	TE,1(TE)	;  THAT
	TLNN	TE,BSUBSC	;  SUBSCRIPT
	JRST	SUBS6A		;  HAVE ADDITIVE
	AOS	TD,ENOCC1	;YES--BUMP COUNT AGAIN
	MOVEI	TE,2		;STEP PAST
	ADDM	TE,CUREOP	;  ONE OPERAND

SUBS6A:	MOVE	TA,CURDAT
	LDB	TA,DA.OCH	;GET LINK TO NEXT HIGHER LEVEL
	CAML	TD,ENOCC2	;ANY SUBSCRIPTS LEFT?
	JRST	SUBSC7		;NO

	JUMPE	TA,SUBSC8	;ANY MORE LEVELS?
	PUSHJ	PP,LNKSET	;YES -- GET ADDRESS
	MOVE	DT,TA
	JRST	SUBSC1		;LOOP

SUBSC7:	JUMPE	TA,SUBSC9	;NO SUBSCRIPTS LEFT -- ANY MORE LEVELS?
SUBSC8:	PUSHJ	PP,NOTNUF	;YES -- ERROR

SUBSC9:	SKIPE	ELNKSF		;LINKAGE SECTION?
	PUSHJ	PP,SUBS15	;YES
	HRRZ	TE,LITNXT	;GET LAST LITAB LOCATION
	HRRZ	TD,CURLIT	;GET FIRST LITAB LOCATION
	SUB	TE,TD		;COMPUTE DIFFERENCE
	HRRM	TE,0(TD)	;SET RH OF LITAB HEADER

	LSH	TE,-1		;DIVIDE DIFFERENCE BY 2
	MOVEI	EACC,1(TE)	;ADD 1 TO IT (AMOUNT TO BUMP ELITPC)
	SUBI	TE,1
	LSH	TE,-1
	HRLM	TE,1(TD)	;PUT # SUBSCRIPTS IN APPROPRIATE WORD

	MOVSI	CH,SUBSC.	;WRITE OUT UUO CALL
	PUSHJ	PP,SETUUO
	PUSHJ	PP,PUT.LD

	EXCH	EACC,ELITPC	;BUMP ELITPC
	ADDM	EACC,ELITPC

SUBS10:	MOVE	TA,[XWD ESAVES,EBASEA];RESTORE "A" AND "B"
	BLT	TA,EBASBX
	MOVE	TA,ESAVOP	;RESET CUREOP
	MOVEM	TA,CUREOP

	TSWF	FERROR		;ANY ERRORS?
	MOVEI	TE,0		;YES -- RETURN 0

	MOVE	SW,ESAVSW

	POPJ	PP,
;PUT OUT EXTERNAL LINKAGE "SUBSCRIPT"

SUBS15:	MOVEI	TA,0		;NO DEPENDING ITEM
	PUSHJ	PP,STASHL
	MOVE	TA,HLDEOP	;GET DUMMY INDEX LOC
	MOVE	TA,1(TA)
	PUSHJ	PP,LNKFA##	;GET GRANDFATHER'S TABLE ADDRESS
	LDB	TB,DA.RBE##	;REFERENCED BY AN ENTRY OR PD USING?
	JUMPE	TB,SUBS19	;NO

SUBS18:	LDB	TB,DA.ARG##
	JUMPN	TB,SUBS16

	MOVE	TB,EAS1PC	;NONE SET UP, HAVE TO GET ONE
	AOS	EAS1PC
	DPB	TB,DA.ARG

SUBS16:	IORI	TB,AS.PAR
	HRLZI	TA,(TB)
	HRRI	TA,AS.MSC
	PUSHJ	PP,STASHL

	MOVEI	TA,0
	PUSHJ	PP,STASHL
	MOVSI	TA,200000
	HRRI	TA,AS.CNB
	JRST	STASHL

SUBS19:	HRRZI	DW,^D401	;?NOT DECLARED BY ENTRY OR PD USING
	PUSHJ	PP,OPNFAT
	JRST	SUBS18
;ALL SUBSCRIPTS WERE NUMERIC LITERALS -- GENERATE INCREMENT

SUBS20:	SETZM	EREMAN
	SETZM	ENOCC1
	MOVE	TC,ESAVOP
	MOVEM	TC,CUREOP

	MOVE	DT,ESAVDT
	HLRZ	TE,ERESX(DT)
	ROT	TE,-6
	HRRZ	TD,EMODEX(DT)
	PUSHJ	PP,SUBSCK	;IF COMP, GET GRANDFATHER'S USAGE
	CAIE	TD,D7MODE
	TLOA	TE,600
	TLO	TE,700
	HRR	TE,EINCRX(DT)
	MOVEM	TE,EWORDB

	MOVE	TC,CUREOP
	MOVE	TA,1(TC)
	PUSHJ	PP,LNKSET

	LDB	TE,DA.OCC	;IS THERE AN OCCURS AT THIS LEVEL?
	JUMPN	TE,SUBS21	;YES, IF JUMP

	LDB	TA,DA.OCH	;NO--BACK UP ONE LEVEL
	PUSHJ	PP,LNKSET	;GET IT'S ADDRESS

SUBS21:	HRRZM	TA,CURDAT	;SAVE ADDRESS OF ITEM

	LDB	TE,DA.DEP	;ANY 'DEPENDING' ITEM?
	JUMPN	TE,SUBSC0	;YES--WE HAVE TO CALL SUBSCRIPT UUO

	LDB	TE,DA.NOC	;GET NUMBER OF OCCURENCES
	MOVEM	TE,ESMAX	;SAVE IT

	MOVEI	TC,2		;KICK UP TO NEXT SUBSCRIPT
	ADDB	TC,CUREOP

	MOVEI	LN,EBASEA	;SET UP "A" TO BE SUBSCRIPT
	PUSHJ	PP,SETOPN
	PUSHJ	PP,CONVNL	;GET VALUE
	JUMPN	TD,BADLSB	;> 10**10?
	SKIPN	EDPLA		;NO -- ANY DECIMAL PLACES?
	TSWF	FLNEG		;NO -- NEGATIVE?
	JRST	BADLSB		;YES -- TOUGH
	CAMLE	TC,ESMAX	;LARGER THAN MAXIMUM?
	JRST	BADSB6		;YES -- ERROR

	SOJL	TC,BADLSB	;NO -- DECREMENT AND IF IT WAS ZERO, ERROR
	PUSH	PP,TC
	MOVE	TA,CURDAT	;GET BACK TO OCCURENCE ITEM
	LDB	TC,DA.USG	;GET SIZE IN BYTES
	XCT	SUBSIZ(TC)

	POP	PP,TC		;GET LITERAL VALUE BACK
	IMUL	TE,TC		;MULTIPLY BY <LITERAL VALUE -1>
	ADDM	TE,EREMAN	;ADD TO SUM

SUBS23:	AOS	TE,ENOCC1	;KICK UP COUNT
	MOVE	TA,CURDAT
	LDB	TA,DA.OCH	;BACK UP TO PREVIOUS LEVEL
	CAML	TE,ENOCC2	;DONE?
	JRST	SUBS24		;YES

	JUMPE	TA,SUBS25	;NO -- ANY LEVELS LEFT?

	PUSHJ	PP,LNKSET	;YES -- GET NEXT LEVEL'S ADDRESS
	JRST	SUBS21		;LOOP

SUBS24:	JUMPE	TA,SUBS26	;NO SUBSCRIPTS LEFT--ANY LEVELS LEFT?
SUBS25:	PUSHJ	PP,NOTNUF	;YES -- ERROR
SUBS26:	MOVE	TD,EREMAN	;GET COMPUTED OFFSET

	LDB	TE,[POINT 6,EWORDB,11];COMPUTE BYTES/WORD
	MOVEI	TB,^D36
	IDIV	TB,TE

	IDIV	TD,TB		;COMPUTE NUMBER OF WORDS
	MOVE	TE,EWORDB	;GET POINTER TO (1,...,1) BACK
	ADD	TE,TD		;PUT #WORDS IN RH
SUBS27:	SOJL	TC,SUBS28	;ANY BYTES LEFT OVER?
	IBP	TE		;YES -- BUMP POINTER
	JRST	SUBS27		;LOOP


SUBS28:	MOVE	TD,SUBCON
	DPB	TD,[POINT 12,TE,17]
	JRST	SUBS10
BADSUB:	MOVEI	DW,^D251
BADSB0:	PUSHJ	PP,NOTNF1
	MOVEI	TA,0
	PUSHJ	PP,STASHL
	JRST	SUBSC2

NOTNUF:	MOVEI	DW,^D250
NOTNF1:	SWON	FERROR
	JRST	OPNFAT

BADLSB:	MOVEI	DW,^D251
	JRST	BADSB7

BADSB1:	MOVEI	DW,^D251
BADSB2:	PUSHJ	PP,NOTNF1
	JRST	EXMS9

;NO SUBSCRIPTS WHEN THERE SHOULD BE

BADSB3:	MOVEI	DW,^D274
BADSB4:	PUSHJ	PP,NOTNF1
	JRST	SUBS10

;SUBSCRIPTS LARGER THAN OCCURS

BADSB5:	MOVEI	DW,^D252
	JRST	BADSB0

BADSB6:	MOVEI	DW,^D252
BADSB7:	PUSHJ	PP,NOTNF1
	JRST	SUBS23

BADSB8:	POP	PP,DW		;REMOVE ONE FROM STACK
	MOVEI	DW,^D251
	PUSHJ	PP,NOTNF1
	JRST	EXMS8A

;IMPROPER 'DEPENDING' VARIABLE

BADDEP:	MOVEI	DW,^D347
	PUSHJ	PP,NOTNF1
	MOVEI	TA,0
	JRST	SUBS1A
;A TABLE WHICH DETERMINES SIZE OF ITEM (ALWAYS IN BYTES)
SUBSIZ:	PUSHJ	PP,BADBAD	;0
	PUSHJ	PP,SUBSZX	;1 SIXBIT
	PUSHJ	PP,SUBSZX	;2 ASCII
	PUSHJ	PP,BADBAD	;3
	MOVEI	TE,6		;4 1-WORD COMP
	MOVEI	TE,^D12		;5 2-WORD COMP
	MOVEI	TE,6		;6 COMP-1
	MOVEI	TE,6		;7 INDEX


BADBAD:	TTCALL	3,[ASCIZ "COMPILER ERROR--BAD USAGE AT 'SUBSIZ'
"]
	JRST	KILL

SUBSZX:	LDB	TE,DA.EXS
	LDB	TD,DA.SYL
	JUMPN	TD,SUBSZY
	LDB	TD,DA.SYR
	JUMPN	TD,SUBSZY
	LDB	TD,DA.SLL	;SYNC AT LOWER LEVEL?
	JUMPE	TD,SUBSZZ

SUBSZY:	IDIV	TE,BYTE.W-1(TC)
	SKIPE	TD
	ADDI	TE,1
	IMUL	TE,BYTE.W-1(TC)
SUBSZZ:	POPJ	PP,


;CHECK FATHER OF BINARY ITEMS TO SEE IF ASCII OR SIXBIT
;  LEAVE USAGE IN TD

SUBSCK:	PUSH	PP,TE		;SAVE AC'S
	HRRZ	TA,ERESX(DT)
	PUSHJ	PP,LNKFA##
	LDB	TD,DA.USG
	SUBI	TD,1
	POP	PP,TE
	POPJ	PP,
;SCAN THRU SUBSCRIPTS LOOKING FOR OBVIOUS ERRORS.
;IF ALL ARE LITERALS--RETURN TO CALL+1.
;IF ANY NON-LITERALS--RETURN TO CALL+2.

EXMSUB:	SWOFF	FERROR!FSDAT	;CLEAR SOME FLAGS
	SKIPE	ELNKSF		;LINKAGE SECTION REFERENCE
	SWON	FSDAT		;YES, FORCE NON-CONSTANT SUBSCRIPT ACTION
	SETZM	ENOCC1
	SKIPN	ENOCC2
	JRST	EXMS9A

EXMS1:	MOVEI	TC,2		;LOOK AT NEXT SUBSCRIPT
	ADDB	TC,CUREOP
	MOVEI	LN,EBASEA	;SET UP "A" PARAMETERS
	PUSHJ	PP,SETOPN


	TSWT	FANUM		;IS IT NUMERIC?
	JRST	BADSB1		;NO -- ERROR

	HRRZ	TE,EMODEA	;IS IT A LITERAL?
	CAIN	TE,LTMODE
	JRST	EXMS9		;YES -- NO WORK NEEDED NOW

	SWON	FSDAT		;NO -- SET FLAG

	HRRZ	TE,EBASEA	;TALLY?
	CAIN	TE,AS.MSC
	JRST	EXMS9		;YES -- NO WORK NEEDED NOW

	SKIPE	TE,EDPLA	;ANY DECIMAL PLACES?
	JRST	BADSB1		;YES -- ERROR

	MOVE	TE,ESIZEA	;SIZE>10?
	CAILE	TE,^D10
	JRST	BADSB1		;YES -- ERROR

	MOVE	TE,CUREOP	;DOES THIS
	MOVE	TE,1(TE)	;  SUBSCRIPT HAVE
	TLNE	TE,BSUBSC	;  ADDITIVE?
	JRST	EXMS2		;YES--TEMP NEEDED

	HRRZ	TE,EMODEA		;1-WORD COMP?
	CAIN	TE,D1MODE
	JRST	EXMS9			;YES -- NO WORK NEEDED NOW
;PUT SUBSCRIPT INTO TEMP; EITHER BECAUSE IT IS NOT COMP, OR
;   BECAUSE IT HAS AN ADDITIVE.

EXMS2:	MOVEI	TE,1		;GET A TEMPORARY LOCATION
	PUSHJ	PP,GETEMP
	MOVEI	TE,0(EACC)
	TLO	TE,GNOPNM
	MOVEM	TE,0(TC)

	MOVSI	TD,GNNOTD
	MOVE	TE,ESIZEA
	DPB	TE,ACSIZE
	MOVEI	TE,D1MODE
	DPB	TE,ACMODE
	MOVE	TE,1(TC)
	TLNE	TE,ASUBSC
	TLO	TD,ASUBSC
	TLNE	TE,SSUBSC
	TLO	TD,SSUBSC
	MOVEM	TD,1(TC)


	PUSH	PP,ESIZEZ
	PUSH	PP,SUBCON
	PUSH	PP,EAC		;SAVE CURRENT SETTING OF AC'S
	PUSH	PP,CUREOP	;SAVE CURRENT CUREOP
	MOVEI	TE,4		;SET AC'S
	MOVEM	TE,EAC		;  TO 4&5
	PUSHJ	PP,MXAC.	;GET OPERAND INTO AC'S
	HRRZ	TC,CUREOP	;DOES SUBSCRIPT
	MOVE	TE,1(TC)	;  HAVE
	TLNN	TE,BSUBSC	;  ADDITIVE?
	JRST	EXMS8		;NO

	AOS	ENOCC1		;YES--BUMP COUNT ONCE
	ADDI	TC,2		;STEP TO NEXT OPERAND
	MOVEM	TC,CUREOP
	MOVEI	LN,EBASEB	;GET ADDITIVE AS
	PUSHJ	PP,SETOPN	;  'B' OPERAND
	TSWF	FERROR		;IF ERROR,
	JRST	EXMS8		;  FORGET IT

	PUSHJ	PP,CONVNL	;CONVERT LITERAL
	SKIPE	EDPLB		;IF DECIMAL PLACES,
	JRST	BADSB8		;  ERROR

	MOVSI	CH,AD		;ASSUME 'ADD'
	MOVE	TE,CUREOP	;IS
	MOVE	TE,-1(TE)	;  IT
	TLNN	TE,ASUBSC	;  REALLY 'ADD'?
	MOVSI	CH,SUB.		;NO--MUST BE SUBTRACT
	PUSHJ	PP,PUT.LA	;GENERATE <ADD/SUB LITERAL>
;PUT SUBSCRIPT IN TEMP (CONT'D)

EXMS8:	POP	PP,TC		;GET CUREOP BACK
	MOVE	TD,1(TC)
	LDB	TE,ACMODE
	MOVEM	TE,EMODEB
	LDB	TE,ACSIZE
	MOVEM	TE,ESIZEB
	SETZM	EDPLB
	MOVE	TE,[XWD ^D36,AS.MSC]
	MOVEM	TE,EBASEB
	MOVE	TE,0(TC)
	HRRZM	TE,EINCRB
	SWON	FBSIGN
	PUSHJ	PP,MACX.	;STASH OPERAND INTO TEMP

EXMS8A:	POP	PP,EAC		;RESET AC'S
	POP	PP,SUBCON
	POP	PP,ESIZEZ

EXMS9:	AOS	TE,ENOCC1	;BUMP COUNT
	CAMGE	TE,ENOCC2	;DONE?
	JRST	EXMS1		;NO--LOOP

EXMS9A:	TSWT	FERROR		;YES--ANY ERRORS?
	TSWF	FSDAT		;NO--ANY NON-LITERALS?
	AOS	(PP)		;YES--EXIT TO CALL+2
	POPJ	PP,
;IMPROPER "ALL"

BADALL:	MOVEI	DW,^D273
	JRST	BADLIT

;LITERAL HAS ZERO SIZE

LNOSIZ:	MOVEI	DW,^D183
	JRST	BADLIT


;BAD CHARACTER FOR NUMERIC LITERAL

BADLK:	MOVEI	DW,^D211
	JRST	BADLIT


;LITERAL IS BEING MOVED TO ALPHANUMERIC FIELD, AND HAS DECIMAL PLACES

BADDP:	MOVEI	DW,^D96
	JRST	BADLIT


;LITERAL IS TOO LARGE TO BE NUMERIC

TOOBIG:	MOVEI	DW,^D56

BADLIT:	SWON	FERROR;
	CAIN	LN,EBASEB
	SKIPA	TC,OPERND
	MOVS	TC,OPERND
	MOVE	TC,0(TC)
	LDB	LN,TCLN
	LDB	CP,TCCP
	JRST	FATAL

;"ROUNDED" CLAUSE SEEN, BUT NO NEED FOR ROUNDING.

NOROUN:	MOVEI	DW,^D218
	JRST	OPNWRN

;"SIZE ERROR" SEEN, BUT A SIZE ERROR CAN'T HAPPEN.

NOSERA:	MOVEI	DW,^D217
	MOVE	W1,OPLINE
	JRST	OPWRN
;COMMON ERROR ROUTINES
;PUT OUT A FATAL DIAG AT OPERAND

OPNFAT:	SWON	FERROR;
	MOVE	TC,CUREOP
	MOVE	TC,0(TC)
	LDB	CP,TCCP
	LDB	LN,TCLN
	JRST	FATAL

;PUT OUT A FATAL DIAG AT OPERATOR

OPFAT:	SWON	FERROR;
	LDB	CP,W1CP
	LDB	LN,W1LN
	JRST	FATAL

;PUT OUT A WARNING DIAG AT OPERAND

OPNWRN:	MOVE	TC,CUREOP
	MOVE	TC,(TC)
	LDB	CP,TCCP
	LDB	LN,TCLN
	JRST	WARN

;PUT OUT A WARNING DIAG AT OPERATOR

OPWRN:	LDB	CP,W1CP
	LDB	LN,W1LN
	JRST	WARN


;OPERAND IS NOT NUMERIC

NOTNUM:	MOVEI	DW,^D211
	JRST	OPNFAT

;WRONG NUMBER OF OPERANDS

BADEOP:	MOVEI	DW,^D214
	JRST	OPFAT

;NOT A DATA-NAME
NOTDAT:	MOVEI	DW,^D101
	JRST	OPNFAT
;COMMON ERROR ROUTINES (CONT'D)

;ERROR DETECTED DURING "SETOPN"

OPERA:	SWON	FERROR;
	PUSH	PP,LN
	LDB	CP,TBCP
	LDB	LN,TBLN
	PUSHJ	PP,FATAL
	POP	PP,LN
	POPJ	PP,

;ITEM NOT DEFINED
NOTDEF:	MOVEI	DW,^D104
	JRST	OPNFAT
;TABLE OF ONE-WORD POWERS OF 10

POWR10:	DEC	1		;0
	DEC	10		;1
	DEC	100		;2
	DEC	1000		;3
	DEC	10000		;4
	DEC	100000		;5
	DEC	1000000		;6
	DEC	10000000	;7
	DEC	100000000	;8
	DEC	1000000000	;9
	DEC	10000000000	;10

;TABLE OF TWO-WORD POWERS OF 10
DPWR10:	OCT	2		;11
	OCT	351035564000
	OCT	35		;12
	OCT	032451210000
	OCT	443		;13
	OCT	011634520000
	OCT	5536		;14
	OCT	142036440000
	OCT	70657		;15
	OCT	324461500000
	OCT	1070336		;16
	OCT	115760200000
	OCT	13064257	;17
	OCT	013542400000
	OCT	157013326	;18
	OCT	164731000000


;TABLE OF ROUNDING VALUES

ROUNDR:	5
	^D50
	^D500
	^D5000
	^D50000
	^D500000
	^D5000000
	^D50000000
	^D500000000
	^D5000000000
;SOME CONSTANTS

CHAC:	POINT 4,CH,12	;AC-FIELD IN "CH"
CHOP:	POINT 7,CH,8	;OP-CODE FIELD IN "CH"
TCLN:	POINT 13,TC,28	;LINE NUMBER FIELD
TCCP:	POINT 7,TC,35	;CHARACTER POSITION FIELD
TBLN:	POINT 13,TB,28
TBCP:	POINT 7,TB,35
W1LN:	POINT 13,W1,28	;LINE-NUMBER FIELD
W1CP:	POINT 7,W1,35	;CHARACTER-POSITION FIELD
TASUBC:	POINT 6,TA,17
TESUBC:	POINT 6,TE,17	;SUBSCRIPT COUNT IN OPERAND
W2SUBC:	POINT 6,W2,17	;SUBSCRIPT COUNT IN W2
ACMODE:	POINT 3,TD,2
ACSIZE:	POINT 6,TD,17

BYTE.S:	OCT 6	;SIXBIT BYTE SIZE
	OCT 7	;ASCII BYTE SIZE
	OCT -6	;SIXBIT (NEGATIVE)
	OCT -7	;ASCII (NEGATIVE)

BYTE.W:	OCT 6	;SIXBIT BYTES PER WORD
	OCT 5	;ASCII BYTES PER WORD


AC1==1B30
AC2==2B30
AC3==3B30
AC4==4B30

;'ADDITIVE SUBSCRIPT' BITS IN OPERAND

ASUBSC==1B29	;ADD LITERAL TO SUBSCRIPT
SSUBSC==2B29	;SUBTRACT LITERAL FROM SUBSCRIPT
BSUBSC==ASUBSC!SSUBSC
;DEFINITION OF ASYFIL OPERATOR CODES

	DEFINE SETVAL (X,Y),<
	X=Y'B26
	INTERNAL X
	>

SETVAL MOV,000
SETVAL MOVEI.,001
SETVAL MOVEM.,002
SETVAL MOVM.,003
SETVAL MOVMM.,004
SETVAL MOVN.,005
SETVAL MOVNI.,006
SETVAL MOVSI.,011
SETVAL AD,012
SETVAL ADDI.,013;
SETVAL ADDM.,014;
SETVAL ADDB.,015
SETVAL SUB.,016
SETVAL SUBI.,017;
SETVAL SUBM.,020;
SETVAL MUL.,021
SETVAL MULI.,022
SETVAL IMUL.,023
		;NO 025
SETVAL DIV.,026
SETVAL IDIV.,031
SETVAL IDIVI.,032
SETVAL FAD.,034;
SETVAL FADM.,035;
SETVAL FSB.,036;
SETVAL FSBM.,037
SETVAL FMP.,040;
SETVAL FMPM.,041;
SETVAL FDV.,042;
SETVAL FDVM.,043;

SETVAL DPB.,044
SETVAL LDB.,045
SETVAL IDPB.,046;
SETVAL ILDB.,047

SETVAL AOS.,050;
SETVAL SOS.,051;
SETVAL SOSGE.,052;
SETVAL SOSLE.,053;
SETVAL CAM.,052
SETVAL CAI.,053
SETVAL CAME.,054
SETVAL CAIE.,055
SETVAL CAMG.,056
SETVAL CAIG.,057;
SETVAL CAMGE.,060
SETVAL CAIGE.,061
SETVAL CAML.,062
SETVAL CAIL.,063
SETVAL CAMLE.,064
SETVAL CAILE.,065
SETVAL CAMN.,066
SETVAL CAIN.,067

SETVAL JUMP.,067;
SETVAL JUMPE.,070
SETVAL JUMPG.,071;
SETVAL JMPGE.,072
SETVAL JUMPL.,073
SETVAL JMPLE.,074
SETVAL JUMPN.,075
SETVAL JRST.,076

SETVAL SKIP.,076
SETVAL SKIPE.,077
SETVAL SKIPG.,100
SETVAL SKPGE.,101
SETVAL SKIPL.,102
SETVAL SKPLE.,103
SETVAL SKIPN.,104
SETVAL SKIPA.,105

SETVAL TRNE.,106;
SETVAL TRNN.,107;
SETVAL TLNE.,110;
SETVAL TLNN.,111;
SETVAL JSA.,112
SETVAL PUSHJ.,113;
SETVAL BLT.,114
SETVAL SETZM.,115
SETVAL SETOM.,116
SETVAL TDCA.,117
SETVAL ANDM.,120
SETVAL ORCAM.,121
SETVAL HRLOI.,122
SETVAL HRROI.,123
SETVAL HRLZI.,124
SETVAL HRRZI.,125
SETVAL SETZB.,126
SETVAL ARG.,127
SETVAL SOJG.,130
SETVAL EXCH.,131;
SETVAL CALLI.,132;
SETVAL TLZ.,133;
SETVAL TLO.,134;
SETVAL SETCA.,135;
SETVAL SETCM.,136;
SETVAL POPJ.,137;
;DEFINITION OF UUO CALLS

	DEFINE SETVAL (X,Y,Z),<
	X=Y'B26+Z'B30
	INTERNAL X
	>

SETVAL OPCLS.,172,0
SETVAL OPN,172,0
SETVAL OPEN.I,172,4;
SETVAL OPEN.O,172,10;
SETVAL CLOS,172,1;

SETVAL IO.,173,0
SETVAL DSPLY.,173,0;
SETVAL ACEPT.,173,1;
SETVAL READ,173,2;
SETVAL WRITE,173,3;
SETVAL WADV.,173,4;
SETVAL SEEK,173,5;
SETVAL DELETE,173,6;
SETVAL RERIT.,173,7;
SETVAL PURGE.,173,10;
SETVAL INITT,173,11;
SETVAL TERM,173,12;

SETVAL COMP,174,0
SETVAL CMP.76,174,1
SETVAL SPAC.6,174,2
SETVAL NUM.6,174,3
SETVAL ALF.6,174,4
SETVAL ZERO.6,174,5
SETVAL POS.6,174,6
SETVAL NEG.6,174,7
SETVAL SPAC.7,174,10
SETVAL NUM.7,174,11
SETVAL ALF.7,174,12
SETVAL ZERO.7,174,13
SETVAL POS.7,174,14
SETVAL NEG.7,174,15
SETVAL COMP.D,174,16
;UUO CALLS  (CONT'D).

SETVAL C.DD,175,0;
SETVAL C.D6D7,175,1;
SETVAL C.D7D6,175,2;
SETVAL CMP.,175,2	;BASE OF CMP.X UUO'S
			; CMP.E=3,CMP.G=4,CMP.GE=5,CMP.L=6,CMP.LE=7,CMP.N=10

SETVAL EDIT.S,176,0
SETVAL EDIT.U,176,1
SETVAL EXAM.,176,2

SETVAL SUBSC.,176,3;
SETVAL SIZE.1,176,4
SETVAL SIZE.2,176,5
SETVAL SIZE.3,176,6

SETVAL E.C3C1,176,7;
SETVAL E.C3C3,176,10;

SETVAL OVLAY.,176,11;
SETVAL XIT,176,12;
SETVAL	ARGS.,176,13	;ROUTINE TO PICK UP ARGS AT ENTRY
SETVAL	PUTF.,176,14	;PUT FIXED ITEMS INTO LIBIMP
SETVAL	RESF.,176,15	;RESTORE CALLER'S FIXED ITEMS
;176,16 IS USED BY COBDDT
SETVAL	ILLC.,176,17	;KILL RECURSIVE CALL ERROR
;MORE UUO CALLS

	DEFINE SETVAL (X,Y),<
	X=Y'B26
	INTERNAL X
	>

		;140 NOT USED
		;141 NOT USED
SETVAL FIX.,142;
		;143 RESERVED FOR COMP.D
SETVAL PERF.,144;

SETVAL FLOT.1,145;
SETVAL FLOT.2,146;

SETVAL PD6.,147;
SETVAL PD7.,150;

SETVAL GD6.,151;
SETVAL GD7.,152;

SETVAL NEG.,153;
SETVAL MAG.,154;

SETVAL ADD.12,155;
SETVAL ADD.21,156;
SETVAL ADD.22,157;

SETVAL SUB.12,160;
SETVAL SUB.21,161;
SETVAL SUB.22,162;

SETVAL MUL.12,163;
SETVAL MUL.21,164;
SETVAL MUL.22,165;

SETVAL DIV.11,166;
SETVAL DIV.12,167;
SETVAL DIV.21,170;
SETVAL DIV.22,171;
	DEFINE SETVAL (X,Y),<
	X=Y
	INTERNAL X
	>

;DEFINITION OF MODES

SETVAL D6MODE,0		;SIXBIT
SETVAL D7MODE,1		;ASCII
SETVAL DSMODE,1		;HIGHEST MODE FOR DISPLAY

SETVAL D1MODE,3		;1-WORD DECIMAL
SETVAL D2MODE,4		;2-WORD DECIMAL
SETVAL FPMODE,5		;FLOATING POINT
SETVAL IXMODE,6	;INDEX
SETVAL EDMODE,7		;EDITED
SETVAL LTMODE,10	;LITERAL
SETVAL FCMODE,11	;FIG. CONST.

SETVAL ZERO,2		;EFLAG VALUE FOR "ZERO"

SETVAL CORR,1B<^D18+^D12>	;"CORRESPONDING" FLAG IN OPERATOR
SETVAL INVKEY,1B29	;"INVALID KEY" FLAG IN SPIF OPERATOR
SETVAL ATEND,1B27	;"AT END" FLAG IN SPIF OPERATOR
SETVAL	OVERFL,1B31	;"ON OVERFLOW" FLAG IN SPIF
SETVAL ATINVK,INVKEY!ATEND!OVERFL
SETVAL FLOBIT,1B20	;BIT IN 2ND WORD OF OPERAND TO DENOTE "FLOTAB"
SETVAL SPIF.,23	;OPERATOR CODE FOR SPIF



;MISCELLANEOUS CONSTANTS
SETVAL EPJPP,PUSHJ.+17B30	;"PUSHJ 17,"
SETVAL SAC,12B30	;AC USED FOR SUBSCRIPTING
SETVAL SXR,12		;INDEX USED FOR SUBSCRIPTING
SETVAL MAXSIZ,^D20	;LARGEST ALLOWED NUMERIC ITEM
SETVAL XWDLIT,1		;LITAB CODE FOR XWD GROUP
SETVAL BYTLIT,2		;LITAB CODE FOR BYTE POINTER GROUP
SETVAL ASCLIT,3		;LITAB CODE FOR ASCII CONSTANT
SETVAL SIXLIT,4		;LITAB CODE FOR SIXBIT CONSTANT
SETVAL D1LIT,5		;LITAB CODE FOR 1-WORD DECIMAL CONSTANT
SETVAL D2LIT,6		;LITAB CODE FOR 2-WORD DECIMAL CONSTANT
SETVAL FLTLIT,7		;LITAB CODE FOR FLOATING-POINT CONSTANT
SETVAL OCTLIT,10	;LITAB CODE FOR OCTAL CONSTANT

	INTERNAL MOVSAC
MOVSAC:	XWD	MOVEM.+SAC+ASINC,AS.MSC	;FIRST HALF OF INSTRUCTION TO STASH AC12

SETVAL SYNBIT,1B<^D18+6>	;SIGN FLAG IN PARAMETERS
EXTERNAL LITBLK,LITNXT,LITLOC,CURLIT,LITDEV,LITHDR
EXTERNAL ESZERO,ESQUOT,EAZRJ,EASRJ,EAQRJ,ELOVAL,EHIVAL,EFPLOV,EFPCNV
EXTERNAL ELITPC,ELITLO,ESIZEZ,ETEMPC,ETEMAX,TEMBAS,OPERND,LITHLD,EPWR10,RPWR10
EXTERNAL EBASEA,EMODEA,ERESA,EINCRA,ESIZEA,EDPLA,EFLAGA,EBYTEA
EXTERNAL EBASEB,EMODEB,ERESB,EINCRB,ESIZEB,EDPLB,EFLAGB,EBYTEB
EXTERNAL EBASEX,EMODEX,ERESX,EINCRX,ESIZEX,EDPLX,EFLAGX,EBYTEX,ETABLX
EXTERNAL ESAVEA,ESAVAX,ESAVEB,ESAVBX,EBASAX,EBASBX,ESAVES,ESAVSB,ESAVSX
EXTERNAL EXTLOC,UUOBIT,DATLOC
EXTERNAL TAGLOC,TAGCNT,EAC,EOPLOC,EOPNXT,CUREOP,EAS1PC,EAS2PC,EAS3PC,OPLINE
EXTERNAL ESAVAC,ESZERA,ESAVOP,ENOCC1,ENOCC2,SUBCON
EXTERNAL ESMAX, EREMAN,EWORDB,EMULSZ,ESAVDT,ESAVSW,SAVEAC

EXTERNAL DA.USG,DA.NDP,DA.DPR,DA.INS,DA.EXS,DA.RES,DA.CLA,CURDAT
EXTERNAL DA.EDT,DA.SYR,DA.SYL,DA.SLL,DA.SGN,DA.DEF,DA.SUB,DA.OCC,DA.NOC,DA.OCH,DA.DEP

EXTERNAL AS.DAT,AS.TAG,AS.CNB,AS.MSC,AS.PAR,AS.LIT,AS.TMP
EXTERNAL AS.BYT,AS.XWD,AS.OCT

EXTERNAL TB.DAT,TM.DAT

EXTERNAL LNKCOD,LMASKB,LMASKS

	END
pNe:}