      SUBROUTINE ANALYZ
      DIMENSION HORI(7),VERT(7),VIMP(30,2),FRST(30),IBAND(3),DUMMY(27)
      DIMENSION EPLOT(7,7),GR(15),SEND(15),VARI(7),SENDE(15),ILTGT(3)
      DIMENSION DC1(50),DC2(50),DC3(50),COL1(50),COL2(50),RIND(50)
      DIMENSION COL3(50),INC1(50),INC2(50),INC3(50),PS(30,2,4),ALTGT(3)
      DIMENSION VAL(5),KX(15),KY(15),VARX(17),VARY(17),OUT(2,4)
      REAL*8 PERT,ERRSD,GGD(15),ERRD1,ERRD,S21(3),WI(3,3)
      COMPLEX U11,U12,U21,U22,UN1,UN2
      COMPLEX AAA(30,2,2),A(2,2),AB1(2,2),AB2(2,2),AB3(2,2),AB4(2,2)
      COMPLEX AB5(2,2),AB6(2,2),AB7(2,2),AB8(2,2)
      COMPLEX BBB(30,2,2),YIN,ZIN,YMAT(30,2,2),ABCD(2,2)
      COMMON W,FR,NT
      COMMON /CO1/ KODE,IFLAG,CTIM,ITRAP,ISENS,IPRIN,MKODE,PCODE,FNXYZ
      COMMON /CO2/ SEND,GR,ERR,NOPT,CONV
      COMMON /CO3/ DATA(50,5),V1,V2,V3,V4,IXX
      DATA PERT/.0001D0/
      DATA VARX/.0001,.2,.5,1.,2.,5.,100.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
      DATA VARY/0.,0.,0.,0.,0.,0.,0.,.2,.5,1.,2.,5.,-.2,-.5,-1.,-2.,-5./
      DATA VARI/10.,2.5,1.25,1.,.8,.4,.1/
      DATA TWOPI/6.28318/
      DATA AALT,AAGT/'LT','GT'/,RJXXX/'RJX'/
      DATA END1,TWO,PRI/'END','TWO','PRI'/,S2/'S2'/,ZIMP/'IMP'/
      DATA RPD/1.7453292E-2/,YM/'YM'/
C  **ARRAY "COL1" IS WHERE YOU SHOULD DEFINE THE NAME OF A NEW ELEMENT**
C  **"NEW" IS USED TO ILLUSTRATE THE PROCESS**
      DATA (COL1(I),I=1,41)/'RES','IND','CAP','CAS','PAR','SER','PRI',
     &'SRL','PRL',
     &'CAX','SRC','PRC','SLC','PLC','SRX','PRX','TWO','TRF','TRL','OST',
     &'SST','CCS','CVS','OPA','SBR','PBR','RJX','CAB','QDC','IMP','INV',
     &'CST','QLA','QLB','QLC','QLD','QLE','EQU','XAC','CHA','NEW'/
      DATA (COL2(I),I=1,38)/'PA','SE','AA','BB','CC','DD','EE','FF',
     &'GG','HH','II',
     &'JJ','KK','LL','MM','NN','OO','PP','QQ','RR','SS','TT','UU','VV','
     &WW','XX','YY','ZZ','S1','S2','YM','OR','IR','VG','TR','CU','VO','I
     &M'/
      DATA (COL3(I),I=1,38)/'PA','SE','AA','BB','CC','DD','EE','FF',
     &'GG','HH','II',
     &'JJ','KK','LL','MM','NN','OO','PP','QQ','RR','SS','TT','UU','VV','
     &WW','XX','YY','ZZ','S1','S2','YM','OR','IR','VG','TR','CU','VO','I
     &M'/
      TAN(DUMTAN)=SIN(DUMTAN)/COS(DUMTAN)
        CALL VALPRI(1,PCODE,FNXYZ)
      IF(KODE.GT.1.AND.KODE.LT.5) GOTO 19
      IPRI=0
      NBAND=0
      NFOPT=0
      NF=0
      DO 299 I=1,3
      ILTGT(I)=1
      DO 299 J=1,3
299   WI(I,J)=0.0
      DO 300 I=1,50
      RIND(I)=0.0
      DO 300 J=1,5
300   DATA(I,J)=0.0
      NBB=0
      CAIND=0
      MCODE=0
      NCO=0
      INDF=0
      INDTR=0
      NSTAR=0
      NT=0
      IJII=0
      IKII=0
      KLM=0
      IRJX=0
      KFREQ=0
      KYM=0
      NOIT=0
      MOPT=0
      MODE=0
      NIMP=0
      KIMP=0
C  **READ AND INTERPRET UNTIL 'END' FOUND IN FIRST COLUMN**
      DO 8 KI=1,50
      I=KI
      READ(2,1)DC1(I),DC2(I),DC3(I),(DATA(I,K),K=1,5)
      DO 301 KO=1,5
      IF(DATA(I,KO).GE.0.) GOTO 301
      MODE=MODE+1
      KX(MODE)=I
      KY(MODE)=KO
      DATA(I,KO)=-DATA(I,KO)
301   NOPT=MODE
      IF(DC1(I).EQ.RJXXX) IRJX=1
1     FORMAT(A4,A3,A3,5G)
      IF(DC1(I).EQ.ZIMP)NIMP=NIMP+1
      IF(DC1(I).NE.TWO) GOTO 302
C  **TWO-PORT DATA WILL BE GIVEN FOR ELEMENT "TWO". INCREASE TRANSISTOR
C  **INDEX NT**
      NT=NT+1
      IF(DC3(I).EQ.S2) KFREQ=1
      IF(DC3(I).EQ.YM) KYM=1
302   IF(DC1(I).EQ.PRI) IPRI=I
      IF(DC1(I).EQ.END1) GOTO 1301
      NCO=NCO+1
C  **CONVERT COLUMN ONE TO NUMBER CODES AND STORE IN INC1**
      DO 2 J=1,50
      IF(DC1(I).EQ.COL1(J)) GO TO 3
2     CONTINUE
      GOTO 35
3     INC1(I)=J
C  **CONVERT COLUMN TWO TO NUMBER CODES AND STORE IN INC2**
      DO 5 J=1,50
      IF(DC2(I).EQ.COL2(J))GOTO 6
5     CONTINUE
      GOTO 37
6     INC2(I)=J
C  **CONVERT COLUMN THREE TO NUMBER CODES AND STORE IN INC3**
      DO 7 J=1,50
      IF(DC3(I).EQ.COL3(J))GOTO 8
7     CONTINUE
      GOTO 39
8     INC3(I)=J
      WRITE(5,1303)
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
C  **READ INITIAL, FINAL AND STEP FREQUENCIES**
1301  IF(KODE.EQ.6.AND.IRJX.EQ.0) GOTO 624
      IF(IRJX.NE.0.AND.KODE.NE.6) GOTO 624
      IF(IPRI.NE.0) GOTO 9
      WRITE(5,1302)
1302  FORMAT(1H0,'ERROR IN DATA FILE: NO PRINTOUT INSTRUCTION!!!')
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
1303  FORMAT(1H0,'ERROR IN DATA FILE: "END" MISSING')
624   WRITE(5,625)
625   FORMAT(1H0,'MAP OPTION CAN ONLY BE USED WITH "RJX" ELEMENT AND VIC
     &E VERSA')
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
9     NF=NF+1
      L=NF+14
      READ(2,11)(DUMMY(I),I=1,27)
11    FORMAT(26A3,A2)
      IF(DUMMY(1).EQ.END1) GOTO 1310
      WRITE(29,11)(DUMMY(I),I=1,27)
      IF(NBAND.GT.3) GOTO 2308
      REREAD 10,(FRST(I),I=NF,L)
      NBAND=NBAND+1
10    FORMAT(15G)
      IF(FRST(NF).EQ.0.0) GOTO 1308
      IF(FRST(NF+1).EQ.0.) GOTO 1307
      IF(FRST(NF+2).EQ.0.) GOTO 1508
      IF(FRST(NF+3).EQ.0.0) GOTO 1304
      M=NF+4
      DO 1305 KI=M,L
      IF(FRST(KI).EQ.0.0) GOTO 1306
1305  CONTINUE
      NF=15
1306  NF=KI-1
      GOTO 1307
1304  IF(FRST(NF+2).GT.FRST(NF+1)) GOTO 1509
      FI=FRST(NF)
      FF=FRST(NF+1)
      FS=FRST(NF+2)
      NFR=IFIX((FF-FI)/FS)+1
      QA=FI-FS
      NK=NF+NFR-1
      DO 1507 KI=NF,NK
      QA=QA+FS
1507  FRST(KI)=QA
      NF=NK
      GOTO 1307
1508  NF=NF+1
      GOTO 1307
1509  NF=NF+2
1307  CONTINUE
C  **STORE THE NUMBER OF FREQUENCIES OF EACH BANDS IN "IBAND(I)"**
      IF(NBAND.EQ.1) IBAND(1)=NF
      IF(NBAND.EQ.2) IBAND(2)=NF
      IF(NBAND.EQ.3) IBAND(3)=NF
      GOTO 9
1308  WRITE(5,1309)
1309  FORMAT(1H0,'MISSING FREQUENCY LINE IN DATA FILE')
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
2308  WRITE(5,2309)
2309  FORMAT('THE SECOND "END" IS MISSING IN DATA FILE')
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
1310  NF=NF-1
      FF=FRST(NF)
C  **DETERMINE DESIRED PRINT OPTION AND ASSIGN VALUE TO NSTAR**
      NSTAR=35-INC3(IPRI)
C  **IF NT=0 DO NOT READ TRANSISTOR PARAMETERS**
      IF(NT.EQ.0) GOTO 14
      NSD=NF*NT
      IF(KYM.EQ.1) GOTO 402
      IF(KFREQ.EQ.1) NSD=NT
C  **READ POLAR S-PARAMETERS AND STORE IN PS**
      DO 12 I=1,NSD
12    READ(2,13)((PS(I,K,J),J=1,2),K=1,2),((PS(I,K,J),J=3,4),K=1,2)
13    FORMAT(8G)
      IF(KFREQ.EQ.0) GOTO 14
      NSD=NF*NT
      NT1=NT+1
      DO 401 IQ=NT1,NSD
      L=IQ-NT
      DO 401 I=1,2
      DO 401 J=1,4
401   PS(IQ,I,J)=PS(L,I,J)
      KFREQ=0
      GOTO 14
C **READ Y-PARAMETERS AND STORE IN YMAT**
402   DO 403 KO=1,NSD
403   READ(2,404)((YMAT(KO,I,J),I=1,2),J=1,2)
404   FORMAT(8G)
14    IF(KODE.EQ.6) WRITE(5,303)
303   FORMAT(1H0,9X,'DEVICE PARAMETERS WITH VARIOUS IMPEDANCES IN TWO-PO
     &RT "RJX"',/)
      IF(NIMP.EQ.0) GOTO 410
C  **READ DATA FOR TWO-PORT "IMP" **
      NFIMP=NIMP*NF
      DO 405 I=1,NFIMP
      READ(2,406)(VIMP(I,J),J=1,2)
405   CONTINUE
406   FORMAT(2G)
410   IF(KODE.EQ.1.OR.KODE.EQ.5) GOTO 15
      IF(IPRIN.EQ.1) GOTO 350
      GOTO 19
C  **READ OPT. DATA AND SET INITIAL PARAMETERS**
15    READ(2,13) CONV
      DO 1320 KI=1,NBAND
      READ(2,1321) (WI(KI,I),I=1,3),S21(KI),ALTGT(KI)
      IF(ALTGT(KI).EQ.AALT) ILTGT(KI)=2
1320  IF(ALTGT(KI).EQ.AAGT) ILTGT(KI)=3
1321  FORMAT(4G,A2)
      NFOPT=IBAND(1)
      SUM2=WI(2,1)+WI(2,2)+WI(2,3)
      SUM3=WI(3,1)+WI(3,2)+WI(3,3)
      IF(SUM2.NE.0.0) NFOPT=IBAND(2)
      IF(SUM3.NE.0.0) NFOPT=IBAND(3)
      IF(INC3(IPRI).LT.31.OR.INC3(IPRI).GT.34) GOTO 1323
      DO 1322 I=1,3
1322  WI(I,3)=0.0
1323  IF(KODE.LT.3.AND.NOPT.EQ.0) GOTO 411
      IF(KODE.EQ.5.AND.NOPT.EQ.0) GOTO 411
      IF(IPRIN.EQ.1) GOTO 350
      IF(KODE.EQ.1.AND.MKODE.NE.1.AND.ISENS.EQ.0) GOTO 350
      IF(KODE.EQ.1.AND.ISENS.EQ.0) WRITE(5,16)NOPT
      IF(KODE.EQ.1.AND.ISENS.EQ.1) WRITE(5,17) NOPT
16    FORMAT(1H0,18X,'CIRCUIT OPTIMIZATION WITH ',I2,' VARIABLES',//,
     &2X,'INITIAL CIRCUIT ANALYSIS:')
17    FORMAT(1H0,18X,'SENSITIVITY ANALYSIS WITH ',I2,' VARIABLES',//,
     &2X,'INITIAL CIRCUIT ANALYSIS:')
19    IF(KODE.EQ.3.AND.MKODE.EQ.0) GOTO 415
      IF(KODE.GT.1.AND.KODE.LT.6) GOTO 350
415   GOTO(304,306,1406,308,310,310),NSTAR
411   WRITE(5,412)
412   FORMAT(1H0,'PLEASE INDICATE IN YOUR DATA FILE THE VARIABLE ELEMENT
     &S')
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
304   WRITE(5,305) DATA(IPRI,1),DATA(IPRI,2)
305   FORMAT(1H0,9X,'VOLTAGE GAIN FROM',F6.1,' OHM SOURCE INTO',F6.1,' O
     &HM LOAD',/,3X,'F(MHZ)      GAIN(DB)')
      GOTO 350
306   WRITE(5,307) DATA(IPRI,1),DATA(IPRI,2)
307   FORMAT(1H0,'INPUT REFL. COEF. AND VSWR IN',F5.0,' OHM SYSTEM WITH'
     &,F7.1,' OHM LOAD',//,3X,'F(MHZ)    GAMMA(MAGN)      VSWR',2X,'MISM
     &ATCH LOSS(DB)',/)
      GOTO 350
1406  WRITE(5,1407) DATA(IPRI,1),DATA(IPRI,2)
1407  FORMAT(1H0,'OUTPUT REFL. COEF. AND VSWR IN',F5.0,' OHM SYSTEM WITH
     &',F7.1,' OHM SOURCE',//,3X,'F(MHZ)    GAMMA(MAGN)      VSWR',2X,'M
     &ISMATCH LOSS(DB)',/)
      GOTO 350
308   WRITE(5,309)
309   FORMAT(1H0,21X,'TWO-PORT Y-PARAMETER MATRIX',//,'F(MHZ)',8X,'Y11',
     &13X,'Y21',13X,'Y12',13X,'Y22',/)
      GOTO 350
310   WRITE(5,320) DATA(IPRI,1)
320   FORMAT(1H0,18X,'POLAR S-PARAMETERS IN',F5.0,' OHM SYSTEM',//,4X,
     &'F',8X,'S11',10X,'S21',10X,'S12',9X,'S22',7X,'S21',5X,'K',/,
     &4X,'MHZ',2X,'(MAGN<ANGL) ( MAGN<ANGL) ( MAGN<ANGL) (MAGN<ANGL)',
     &3X,'DB    FACTOR',/)
350   IF(KODE.GT.4) GOTO 850
      ERRD=0.
      IF (KODE.NE.1) GOTO 801
      DO 809 I=1,NOPT
      SEND(I)=ALOG(DATA(KX(I),KY(I)))
809   CONTINUE
      GO TO 815
801   DO 814 I=1,NOPT
      SENDE(I)=EXP(SEND(I))
      DATA(KX(I),KY(I))=SENDE(I)
814   CONTINUE
815   CONTINUE
      IPRAM=0
      IF(KODE.EQ.5.OR.MOPT.NE.1) GOTO 850
      IF(KODE.EQ.1.OR.MCODE.EQ.0) GOTO 850
      WRITE(5,1234)( SENDE(I),I=1,NOPT)
1234  FORMAT(5F12.4)
      GO TO 850
820   IPRAM=IPRAM+1
      MCODE=1
      I88=KX(IPRAM)
      I99=KY(IPRAM)
      SAVEC=DATA(I88,I99)
      DATA(I88,I99)=DATA(I88,I99)+PERT*DATA(I88,I99)
      ERRD=0.
850   CONTINUE
      IF(KODE.EQ.6) GOTO 21
      IF(KODE.NE.5) GOTO 20
      COM1=DATA(KX(1),KY(1))
      COM2=DATA(KX(2),KY(2))
C  **BEGIN LOOP FOR MAPPING WITH VARIOUS IMPEDANCES**
8001  IJII=IJII+1
      DATA(KX(1),KY(1))=VARI(IJII)*COM1
      VERT(IJII)=DATA(KX(1),KY(1))
8002  IKII=IKII+1
      DATA(KX(2),KY(2))=VARI(IKII)*COM2
      IF(IJII.GT.1)GOTO 20
      HORI(IKII)=DATA(KX(2),KY(2))
      GOTO 20
21    CONTINUE
C  **BEGIN LOOP FOR SWEEP OPTION. COMPUTE ERRORS**
8003  KLM=KLM+1
      VARX(KLM)=VARX(KLM)*DATA(IPRI,1)
      VARY(KLM)=VARY(KLM)*DATA(IPRI,1)
20    CONTINUE
C **BEGIN FREQUENCY DO-LOOP**
      DO 999 INDFF=1,NF
      FR=FRST(INDFF)
      W=TWOPI*FR
C  **BEGIN INTERCONNECTION DO-LOOP**
      DO 989 IXX =1,NCO
      IN1=INC1(IXX)
      IN2=INC2(IXX)
      IN3=INC3(IXX)
      GOTO 413
35    WRITE(5,36) DC1(I),I
36    FORMAT(1H ,'NON-STANDARD CODE--',A3,'--USED IN COLUMN 1, LINE',I3)
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
37    WRITE(5,38) DC2(I),I
38    FORMAT(1H ,'NON-STANDARD CODE--',A2,'--USED IN COLUMN 2, LINE',I3)
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
39    WRITE(5,40) DC3(I),I
40    FORMAT(1H ,'NON-STANDARD CODE--',A2,'--USED IN COLUMN 3, LINE',I3)
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
C  **DIRECT EXECUTION TO APPROPRIATE SECTION  DEFINED BY FIRST COLUMN**
C  **
C  **
C  **ADD THE STATEMENT NUMBER OF THE COMPUTATIONS FOR THE NEW ELEMENT
C  **TO THE END OF THE STATEMENT NUMBERS IN THE PARANTHESIS**
C  **THE NUMBERS FROM 3001 THROUGH 3099 ARE RESERVED FOR THIS PURPOSE**
C  **STATEMENT NUMBER 3000 IS USED FOR THE ILLUSTRATION**
413   GOTO(41,46,49,90,91,94,97,52,53,106,60,61,69,70,77,78,101,83,86,87
     &,88,84,84,89,110,112,113,125,130,132,135,137,140,142,144,146,148,
     &150,152,155,3000),IN1
C  **COMPUTE ABCD MATRIX FOR RESISTOR**
   41 IF(2-IN3)42,43,44
   42 WRITE(5,45)DC3(IXX),IXX
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
   43 CALL SIMP(A,DATA(IXX,1),0.)
      GO TO 980
   44 G=1./DATA(IXX,1)
      CALL PIMP(A,G,0.)
      GO TO 980
   45 FORMAT(1H ,'INCORRECT ELEMENT CODE "',A3,'" IN LINE NUMBER:',I3,/,
     &'MUST BE "SE" OR "PA" ! ! !')
C  **COMPUTE ABCD MATRIX FOR INDUCTOR**
46    IF(2-IN3) 42,47,48
   47 WL=W*DATA(IXX,1)*1.E-3
      IF(DATA(IXX,2).EQ.0.0.OR.INDFF.GT.1) GOTO 1047
      RIND(IXX)=TWOPI*DATA(IXX,1)*1.E-3*DATA(IXX,3)/DATA(IXX,2)
1047  CALL SIMP(A,RIND(IXX),WL)
      GO TO 980
48    IF(DATA(IXX,2).EQ.0.0) GOTO 1049
      IF(INDFF.GT.1) GOTO 1048
      RIND(IXX)=TWOPI*DATA(IXX,1)*1.E-3*DATA(IXX,3)/DATA(IXX,2)
1048  B=W*DATA(IXX,1)*1.E-3
      D=1./(RIND(IXX)*RIND(IXX)+B*B)
      Z=RIND(IXX)*D
      WL=-B*D
      CALL PIMP(A,Z,WL)
      GOTO 980
 1049 WL=-1.E3/(W*DATA(IXX,1))
      CALL PIMP(A,0.,WL)
      GO TO 980
C  **COMPUTE ABCD MATRIX FOR CAPACITOR**
  49  IF(2-IN3) 42,50,51
   50 WC=-1.E6/(W*DATA(IXX,1))
      IF(DATA(IXX,2).EQ.0.0.OR.INDFF.GT.1) GOTO 1050
      RIND(IXX)=1.E6/(TWOPI*DATA(IXX,1)*DATA(IXX,2)*DATA(IXX,3))
1050  CALL SIMP(A,RIND(IXX),WC)
      GO TO 980
51    IF(DATA(IXX,2).EQ.0.0) GOTO 1052
      IF(INDFF.GT.1) GOTO 1051
      RIND(IXX)=1.E6/(TWOPI*DATA(IXX,1)*DATA(IXX,2)*DATA(IXX,3))
1051  B=W*DATA(IXX,1)*1.E-6
      B2=B*B
      D=1./(1.+B2*RIND(IXX)*RIND(IXX))
      Z=B2*RIND(IXX)*D
      WC=B*D
      CALL PIMP(A,Z,WC)
      GOTO 980
 1052 WC=W*DATA(IXX,1)*1.E-6
      CALL PIMP(A,0.,WC)
      GO TO 980
C  **COMPUTE ABCD MATRIX FOR SERIES RL**
52    R=DATA(IXX,1)
      X=DATA(IXX,2)*1.E-3
      IF(2-IN3)42,56,57
C  **COMPUTE ABCD MATRIX FOR PARALLEL RL**
53    R=DATA(IXX,1)
      X=DATA(IXX,2)*1.E-3
      IF(2-IN3)42,54,55
   54 B=W*X
      B2=B*B
      D=1./(R*R+B2)
      Z=R*B2*D
      WL=R*R*B*D
      GOTO 59
   55 B=W*X
      D=1./(R*B)
      Z=B*D
      WL=-R*D
      GOTO 58
   56 WL=W*X
      Z=R
      GOTO 59
   57 B=W*X
      D=1./(R*R+B*B)
      Z=R*D
      WL=-B*D
   58 CALL PIMP(A,Z,WL)
      GO TO 980
   59 CALL SIMP(A,Z,WL)
      GO TO 980
C  **COMPUTE ABCD MATRIX FOR SERIES RC**
60    C=1.E-6*DATA(IXX,2)
      R=DATA(IXX,1)
      IF(2-IN3)42,65,66
C  **COMPUTE ABCD MATRIX FOR PARALLEL RC**
   61 C=1.E-6*DATA(IXX,2)
      R=DATA(IXX,1)
      IF(2-IN3)42,63,64
   63 B=W*C
      D=1./(1.+R*R*B*B)
      Z=R*D
      WC=-R*R*B*D
      GOTO 68
   64 Z=1./R
      WC=W*C
      GOTO 67
   65 Z=R
      WC=-1./(W*C)
      GOTO 68
   66 B=W*C
      B2=B*B
      D=1./(1.+B2*R*R)
      Z=B2*R*D
      WC=B*D
   67 CALL PIMP(A,Z,WC)
      GO TO 980
   68 CALL SIMP(A,Z,WC)
      GO TO 980
C  **COMPUTE ABCD MATRIX FOR SERIES LC**
  69  X=DATA(IXX,1)*1.E-3
      Y=DATA(IXX,2)
      IF(2-IN3)42,73,74
C  **COMPUTE ABCD MATRIX FOR PARALLEL LC**
70    IF(DATA(IXX,3).EQ.0.0) GOTO 1070
      IF(2-IN3)42,1079,1080
1079  X=DATA(IXX,1)*1.E-3
      Y=DATA(IXX,2)*1.E-6
      RIND(IXX)=TWOPI*X*DATA(IXX,4)/DATA(IXX,3)
      B=1.-W*W*X*Y
      B1=W*W*RIND(IXX)*RIND(IXX)*Y
      D=1./(B*B+B1*Y)
      Z=(RIND(IXX)*B+B1/RIND(IXX)*X)*D
      WX=(W*X*B-B1/W)*D
      GOTO 76
1080  X=DATA(IXX,1)*1.E-3
      Y=DATA(IXX,2)*1.E-6
      RIND(IXX)=TWOPI*X*DATA(IXX,4)/DATA(IXX,3)
      D=1./(RIND(IXX)*RIND(IXX)+X*X*W*W)
      Z=RIND(IXX)*D
      WX=W*Y-W*X*D
      GOTO 75
1070  X=DATA(IXX,1)*1.E-3
      Y=DATA(IXX,2)
      IF(2-IN3)42,71,72
   71 WX=W*X/(1.-W*W*X*Y*1.E-6)
      Z=0.0
      GOTO 76
   72 WX=(W*W*X*Y*1.E-6-1.)/(W*X)
      Z=0.0
      GOTO 75
   73 WX=W*X-1.E6/(W*Y)
      Z=0.0
      IF(DATA(IXX,3).EQ.0.0) GOTO 76
      IF(INDFF.GT.1) GOTO 1073
      RIND(IXX)=TWOPI*X*DATA(IXX,4)/DATA(IXX,3)
1073  Z=RIND(IXX)
      GOTO 76
   74 WX=(W*Y)/(1.E6-W*W*X*Y)
      Z=0.0
      IF(DATA(IXX,3).EQ.0.0) GOTO 75
      IF(INDFF.GT.1) GOTO 1074
      RIND(IXX)=TWOPI*X*DATA(IXX,4)/DATA(IXX,3)
1074  Y=DATA(IXX,2)*1.E-6
      B=1./W/Y-W*X
      D=1./(RIND(IXX)*RIND(IXX)+B*B)
      Z=RIND(IXX)*D
      WX=B*D
75    CALL PIMP(A,Z,WX)
      GO TO 980
   76 CALL SIMP(A,Z,WX)
      GO TO 980
C  **COMPUTE ABCD MATRIX FOR SERIES RLC (RX)**
77    C=1.E-6*DATA(IXX,3)
      R=DATA(IXX,1)
      X=DATA(IXX,2)*1.E-3
      IF(2-IN3)42,81,82
C  **COMPUTE ABCD MATRIX FOR PARALLEL RLC (RX)**
78    C=1.E-6*DATA(IXX,3)
      R=DATA(IXX,1)
      X=DATA(IXX,2)*1.E-3
      IF(2-IN3)42,79,80
   79 W2=W*W
      DA=R*(W2*X*C-1.)
      D=1./(W2*X*X+DA*DA)
      Z=R*W2*X*X*D
      WC=-(R*W*X*DA*D)
      GOTO 68
   80 Z=1./R
      WC=W*C-1./(W*X)
      GOTO 67
   81 Z=R
      WC=W*X-1./(W*C)
      GOTO 68
   82 W2=W*W
      D=1./(W2*(C*(R*R*C+W2*X*X*C-2.*X))+1.)
      Z=R*W2*C*C*D
      WC=W*C*(1.-W2*X*C)*D
      GO TO 67
C  **COMPUTE ABCD MATRIX FOR IDEAL TRANSFORMER**
83    IF(IN3.EQ.35) TURN=DATA(IXX,1)
      IF(IN3.EQ.38) TURN=SQRT(DATA(IXX,1)/DATA(IXX,2))
      A(1,1)=CMPLX(TURN,0.)
      A(2,2)=CMPLX(1./TURN,0.)
      A(1,2)=CMPLX(0.,0.)
      A(2,1)=CMPLX(0.,0.)
      GO TO 980
C  **COMPUTE ABCD MATRIX FOR CONTROLLED CURRENT SOURCE**
84    IF(IN3.NE.36.AND.IN3.NE.37) GOTO 184
      IF(IN3.EQ.37) GOTO 85
C  **CURRENT CONTROLLED CURRENT SOURCE**
      Q=-1./DATA(IXX,3)
      X=DATA(IXX,1)
      Q1=Q/DATA(IXX,2)
      A(1,1)=CMPLX(X*Q1,0.)
      A(2,1)=CMPLX(Q1,0.)
      A(1,2)=CMPLX(Q*X,0.)
      A(2,2)=CMPLX(Q,0.)
      GO TO 980
184   WRITE(5,185) IXX,DC3(IXX)
185   FORMAT(1H0,'IN LINE ',I2,' , ',A2,' IS THE WRONG CODE, SHOULD BE "
     &CU" OR "VO"')
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
C  **COMPUTE ABCD MATRIX FOR VOLTAGE CONTROLLED CURRENT SOURCE**
85    Q=-1./DATA(IXX,3)
      X=DATA(IXX,1)
      Q1=Q/DATA(IXX,2)
      A(1,1)=CMPLX(Q1,0.)
      A(2,1)=CMPLX(Q1/X,0.)
      A(1,2)=CMPLX(Q,0.)
      A(2,2)=CMPLX(Q/X,0.)
      GO TO 980
C  **COMPUTE ABCD MATRIX FOR LOSSLESS FRANSMISSION LINE**
86    ANL=W*DATA(IXX,2)*SQRT(DATA(IXX,3))/118.08E5
      X=COS(ANL)
      Y=SIN(ANL)
      A(1,1)=CMPLX(X,0.)
      A(2,2)=A(1,1)
      A(1,2)=CMPLX(0.,Y*DATA(IXX,1))
      A(2,1)=CMPLX(0.,Y/DATA(IXX,1))
      GOTO 980
C  **COMPUTE ABCD MATRIX FOR OPEN CIRCUIT STUB**
87    ANL=W*DATA(IXX,2)*SQRT(DATA(IXX,3))/118.08E5
      IF(2-IN3) 42,286,287
286   ZOS=-DATA(IXX,1)/TAN(ANL)
      CALL SIMP(A,0.,ZOS)
      GOTO 980
287   YOS=TAN(ANL)/DATA(I
      CALL PIMP(A,0.,YOS)
      GOTO 980
C  **COMPUTE ABCD MATRIX FOR SHORT CIRCUIT STUB**
88    ANL=W*DATA(IXX,2)*SQRT(DATA(IXX,3))/118.08E5
      IF(2-IN3) 42,288,289
288   ZSS=DATA(IXX,1)*TAN(ANL)
      CALL SIMP(A,0.,ZSS)
      GOTO 980
289   YSS=-1./(DATA(IXX,1)*TAN(ANL))
      CALL PIMP(A,0.,YSS)
      GOTO 980
C  **COMPUTE ABCD MATRIX FOR IDEAL OP. AMP.**
89    A(1,1)=CMPLX(1./DATA(IXX,1),0.)
      A(2,2)=A(1,1)
      A(1,2)=CMPLX(0.,0.)
      A(2,1)=A(1,2)
      GOTO 980
C  **CASCADE TWO ABCD MATRICES**
90    A(1,1)=AAA(IN2,1,1)*AAA(IN3,1,1)+AAA(IN2,1,2)*AAA(IN3,2,1)
      A(2,1)=AAA(IN2,2,1)*AAA(IN3,1,1)+AAA(IN2,2,2)*AAA(IN3,2,1)
      A(1,2)=AAA(IN2,1,1)*AAA(IN3,1,2)+AAA(IN2,1,2)*AAA(IN3,2,2)
      A(2,2)=AAA(IN2,2,1)*AAA(IN3,1,2)+AAA(IN2,2,2)*AAA(IN3,2,2)
      GOTO 980
C  **PARALLEL TWO ABCD MATRICES THROUGH Y-PARAMETERS**
91    DO 92 I=1,2
      DO 92 J=1,2
      AB1(I,J)=AAA(IN2,I,J)
92    AB2(I,J)=AAA(IN3,I,J)
      AB1R=REAL(AB1(1,2))
      AB1I=AIMAG(AB1(1,2))
      AB2R=REAL(AB2(1,2))
      AB2I=AIMAG(AB2(1,2))
      IF(AB1R.EQ.0.AND.AB1I.EQ.0) GOTO 187
      IF(AB2R.EQ.0.AND.AB2I.EQ.0) GOTO 187
      CALL ABCDY(AB1,AB3)
      CALL ABCDY(AB2,AB4)
      DO 93 I=1,2
      DO 93 J=1,2
93    AB1(I,J)=AB3(I,J)+AB4(I,J)
      CALL YABCD(AB1,A)
      GOTO 980
187   WRITE(5,188) IXX
188   FORMAT( 'THE CONNECTION OF LINE ',I2,' IS NOT PERMITTED^^^ CHECK Y
     &OUR DATA FILE FOR',/,'ILLEGAL PARALLEL OR SERIES CONNECTION')
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
C  **SERIES TWO ABCD MATRICES THROUGH Z-PARAMETERS**
94    DO 95 I=1,2
      DO 95 J=1,2
      AB1(I,J)=AAA(IN2,I,J)
95    AB2(I,J)=AAA(IN3,I,J)
      AB1R=REAL(AB1(2,1))
      AB1I=AIMAG(AB1(2,1))
      AB2R=REAL(AB2(2,1))
      AB2I=AIMAG(AB2(2,1))
      IF(AB1R.EQ.0.AND.AB1I.EQ.0) GOTO 187
      IF(AB2R.EQ.0.AND.AB2I.EQ.0) GOTO 187
      CALL ABCDZ(AB1,AB3)
      CALL ABCDZ(AB2,AB4)
      DO 96 I=1,2
      DO 96 J=1,2
96    AB1(I,J)=AB3(I,J)+AB4(I,J)
      CALL ABCDZ(AB1,A)
      GOTO 980
C  **PRINT RESULTS**
97    IF(IN3.NE.31) GOTO 190
C  **PRINT OPTION "YM"; PRINT Y-MARIX**
      DO 191 I=1,2
      DO 191 J=1,2
191   A(I,J)=AAA(IN2,I,J)
      AB1R=REAL(AB1(1,2))
      AB1I=AIMAG(AB1(1,2))
      AB2R=REAL(AB2(1,2))
      AB2I=AIMAG(AB2(1,2))
      IF(AB1R.EQ.0.AND.AB1I.EQ.0) GOTO 187
      IF(AB2R.EQ.0.AND.AB2I.EQ.0) GOTO 187
      CALL ABCDY(A,AB1)
      WRITE(5,192) FR,((AB1(I,J),I=1,2),J=1,2)
192   FORMAT(1H0,F6.1,4(F9.3,F7.3))
      GOTO 989
C  **TEST FOR NON-ZERO CHARACTERISTIC IMPEDANCE**
190   IF(DATA(IXX,1).EQ.0.) GOTO 960
C  **PRINT OPTION "IR","OR", OR "VG"**
      NSTNS=35-IN3
      GOTO (193,197,195,9990,199,199),NSTNS
C  **COMPUTE VOLTAGE GAIN**
193   ZIN=AAA(IN2,1,1)*DATA(IXX,2)+AAA(IN2,1,2)
      ZIN=ZIN/(AAA(IN2,2,1)*DATA(IXX,2)+AAA(IN2,2,2))
      U11=ZIN/(ZIN+DATA(IXX,1))
      OUT(2,1)=U11*DATA(IXX,2)
      OUT(2,1)=CABS(OUT(2,1)/(AAA(IN2,1,2)+AAA(IN2,1,1)*DATA(IXX,2)))
      IF(CAIND.EQ.1) OUT(2,1)=ATTN*OUT(2,1)
      IF(KODE.EQ.1.AND.MKODE.NE.1) GOTO 9989
      IF(KODE.EQ.2.OR.KODE.EQ.5) GOTO 9989
      GAINDB=20.*ALOG10(OUT(2,1))
      WRITE(5,194) FR,GAINDB
194   FORMAT(1H ,2X,F7.1,F14.2)
      GOTO 9990
C  **COMPUTE Z(OUT)**
195   U22=AAA(IN2,2,2)*DATA(IXX,2)+AAA(IN2,1,2)
      U22=U22/(AAA(IN2,2,1)*DATA(IXX,2)+AAA(IN2,1,1))
      OUT(2,3)=CABS((U22-DATA(IXX,1))/(U22+DATA(IXX,1)))
      IF(OUT(2,3).GE.1.) GOTO 4004
      DBL=-10.*ALOG10(1.-OUT(2,3)*OUT(2,3))
4004  IF(KODE.EQ.1.AND.MKODE.NE.1) GOTO 9989
      IF(KODE.EQ.2.OR.KODE.EQ.5) GOTO 9989
C  **TEST FOR INFINITE VSWR**
      IF(OUT(2,3).GE.1.) GOTO 179
      VSWR=(1.+OUT(2,3))/(1.-OUT(2,3))
      WRITE(5,196) FR,OUT(2,3),VSWR,DBL
196   FORMAT(1H ,2X,F7.1,4X,F6.3,6X,F8.2,':1',5X,F6.2)
      GOTO 9990
C  **COMPUTE Z(IN)**
197   U22=AAA(IN2,1,1)*DATA(IXX,2)+AAA(IN2,1,2)
      U22=U22/(AAA(IN2,2,1)*DATA(IXX,2)+AAA(IN2,2,2))
      OUT(1,1)=CABS((U22-DATA(IXX,1))/(U22+DATA(IXX,1)))
      IF(OUT(1,1).GE.1.) GOTO 4006
      DBL=-10.*ALOG10(1.-OUT(1,1)*OUT(1,1))
4006  IF(KODE.EQ.1.AND.MKODE.NE.1) GOTO 9989
      IF(KODE.EQ.2.OR.KODE.EQ.5) GOTO 9989
      IF(OUT(1,1).GE.1.) GOTO 181
      VSWR=(1.+OUT(1,1))/(1.-OUT(1,1))
      WRITE(5,196) FR,OUT(1,1),VSWR,DBL
198   FORMAT(1H ,2X,F7.1,4X,F6.3,6X,F8.2,':1',5X,F6.2)
      GOTO 9990
179   WRITE(5,180) FR,OUT(2,3)
180   FORMAT(1H ,2X,F7.1,6X,F6.3,6X,'INFINITE',5X,F6.2)
      GOTO 9990
181   WRITE(5,180) FR,OUT(1,1)
      GOTO 9990
199   IF(KODE.NE.2.AND.KODE.NE.5) GOTO 99
C  **PRINT OPTION "S1" OR "S2"**
C  **COMPUTE MAGNITUDES OF S11,S21 AND S22 FOR OPTIMIZATION**
      CHARI=DATA(IXX,1)
      U11=AAA(IN2,1,1)
      U12=AAA(IN2,1,2)/CHARI
      U21=AAA(IN2,2,1)*CHARI
      U22=AAA(IN2,2,2)
      UDEN=CABS(1./(U11+U12+U21+U22))
      UN1=U12-U21
      UN2=U11-U22
      UN3=CABS(UN1+UN2)
      UN4=CABS(UN1-UN2)
      OUT(1,1)=UN3*UDEN
      OUT(2,1)=2.*UDEN
      OUT(2,3)=UN4*UDEN
      IF(CAIND.EQ.1) OUT(2,1)=ATTN*OUT(2,1)
      GOTO 989
99    DO 100 I=1,2
      DO 100 J=1,2
100   A(I,J)=AAA(IN2,I,J)
      CALL SWRIT(A,OUT,IN3,DATA(IXX,1),CAIND,ATTN,NF,FRST,INDFF)
      GOTO 989
C  **CONVERT POLAR S- OR RECT. Y-PARAMETERS TO ABCD PARAMETERS**
101   INDTR=INDTR+1
      IF(NOIT.GT.0) GOTO 104
      IF(KYM.EQ.0) GOTO 505
      DO 502 I=1,2
      DO 502 J=1,2
502   AB1(I,J)=YMAT(INDTR,I,J)
      CALL YABCD(AB1,A)
      DO 503 I=1,2
      DO 503 J=1,2
503   BBB(INDTR,I,J)=A(I,J)
      GOTO 980
505   IF(DATA(IXX,1).EQ.0.) GOTO 960
      DO 102 I=1,2
      DO 102 J=1,2
      PPRD=RPD*PS(INDTR,I,2*J)
      M=2*J-1
102   AB1(I,J)=CMPLX(PS(INDTR,I,M)*COS(PPRD),PS(INDTR,I,M)*SIN(PPRD))
      CALL SABCD(AB1,A,DATA(IXX,1))
      DO 103 I=1,2
      DO 103 J=1,2
103   BBB(INDTR,I,J)=A(I,J)
      GOTO 980
104   DO 105 I=1,2
      DO 105 J=1,2
105   AAA(IN2,I,J)=BBB(INDTR,I,J)
      GOTO 989
C  **CASCADE IN3-IN2+1 ABCD MATRICES**
106   I=IN2
      J=IN2+1
      AB5(1,1)=AAA(I,1,1)*AAA(J,1,1)+AAA(I,1,2)*AAA(J,2,1)
      AB5(2,1)=AAA(I,2,1)*AAA(J,1,1)+AAA(I,2,2)*AAA(J,2,1)
      AB5(1,2)=AAA(I,1,1)*AAA(J,1,2)+AAA(I,1,2)*AAA(J,2,2)
      AB5(2,2)=AAA(I,2,1)*AAA(J,1,2)+AAA(I,2,2)*AAA(J,2,2)
      NCB=IN3-IN2-1
      J=J+1
      DO 108 IJJ=1,NCB
      IJ=IJJ
      A(1,1)=AB5(1,1)*AAA(J,1,1)+AB5(1,2)*AAA(J,2,1)
      A(1,2)=AB5(1,1)*AAA(J,1,2)+AB5(1,2)*AAA(J,2,2)
      A(2,1)=AB5(2,1)*AAA(J,1,1)+AB5(2,2)*AAA(J,2,1)
      A(2,2)=AB5(2,1)*AAA(J,1,2)+AB5(2,2)*AAA(J,2,2)
      IF(IJ.EQ.NCB) GOTO 980
      DO 107 M=1,2
      DO 107 N=1,2
107   AB5(N,M)=A(N,M)
108   J=J+1
      GOTO 980
110   ZIN=(AAA(IN3,1,1)*DATA(IXX,1)+AAA(IN3,1,2))/(AAA(IN3,2,1)*DATA(IXX
     &,1)+AAA(IN3,2,2))
      ZINR=REAL(ZIN)
      ZINI=AIMAG(ZIN)
      CALL SIMP(A,ZINR,ZINI)
      GOTO 980
112   YIN=(AAA(IN3,2,1)*DATA(IXX,1)+AAA(IN3,2,2))/(AAA(IN3,1,1)*DATA(IXX
     &,1)+AAA(IN3,1,2))
      YINR=REAL(YIN)
      YINI=AIMAG(YIN)
      CALL PIMP(A,YINR,YINI)
      GOTO 980
113   R=VARX(KLM)
      WX=VARY(KLM)
      IF(IN3.EQ.1)GOTO 114
      CALL SIMP(A,R,WX)
      IF(WX)117,115,119
114   DENO=R*R+WX*WX
      G=R/DENO
      B=-WX/DENO
      CALL PIMP(A,G,B)
      IF(WX)117,115,119
115   WRITE(5,116) R,WX
116   FORMAT(1H0,3X,'IMP.=(',F6.1,1H,,F6.1,') OHMS')
      GOTO 980
117   C=1.E6/(W*ABS(WX))
      WXX=ABS(WX)
      WRITE(5,118) R,WXX,C
118   FORMAT(1H0,3X,'IMP.=(',F6.1,3H,-J,F6.1,') OHMS',5X,'C=',F10.2,' PF
     &')
      GOTO 980
119   QL=1000.*WX/W
      WRITE(5,120) R,WX,QL
120   FORMAT(1H0,3X,'IMP.=(',F6.1,3H, J,F6.1,') OHMS',5X,'L=',F10.2,' NH
     &')
      GOTO 980
C  **COMPUTE ATTENUATION AND ABCD MATRIX OF LOSSY COAX. CABLE**
125   IF(CAIND.EQ.1) GOTO 126
      CALEN=DATA(IXX,1)/(DATA(IXX,2)*SQRT(FF)+DATA(IXX,3)*FF)
      CAIND=1
126   ATTN=-.11513*CALEN*(DATA(IXX,2)*SQRT(FR)+DATA(IXX,3)*FR)
      ATTN=EXP(ATTN)
      AAA(IN2,1,1)=CMPLX(1.,0.)
      AAA(IN2,1,2)=CMPLX(0.,0.)
      AAA(IN2,2,1)=CMPLX(0.,0.)
      AAA(IN2,2,2)=CMPLX(1.,0.)
      GOTO 989
C  **COMPUTE ABCD MATRIX OF COUPLED RESONATOR**
130   ANL=W*DATA(IXX,3)*SQRT(DATA(IXX,4))/118.08E5
      ZOE=DATA(IXX,1)
      ZOO=DATA(IXX,2)
      ZP=ZOE*ZOO
      ZD=ZOE-ZOO
      XJ=(ZOE+ZOO)*(ZOE+ZOO)/(2.*SQRT(ZP)*ZD)
      YJ=ZD/2.
      EJ=2.*ZP/ZD
      SSQ=SIN(ANL)*SIN(ANL)
      CSQ=COS(ANL)*COS(ANL)
      AAA(IN2,1,1)=CMPLX(XJ*SIN(ANL)*COS(ANL),0.)
      AAA(IN2,1,2)=CMPLX(0.,SSQ*YJ-CSQ*EJ)
      AAA(IN2,2,1)=CMPLX(0.,SSQ/YJ-CSQ/EJ)
      AAA(IN2,2,2)=AAA(IN2,1,1)
      GOTO 989
C  **COMPUTE ABCD MATRIX OF SER. OR PAR. IMPEDANCE DEFINED BY THE
C  **DATA GIVEN IN DATA FILE**
132   KIMP=KIMP+1
      IF(2-IN3) 42,133,134
133   CALL SIMP(A,VIMP(KIMP,1),VIMP(KIMP,2))
      GOTO 980
134   AB=VIMP(KIMP,1)
      AC=VIMP(KIMP,2)
      AD=1./(AB*AB+AC*AC)
      AE=AB*AD
      AF=-AC*AD
      CALL PIMP(A,AE,AF)
      GOTO 980
C  **COMPUTE ABCD MATRIX IN THE "IN2" LOCATION THAT IS THE INVERSE OF
C  THE SERIES IMPEDANCE IN LOCATION "IN3"**
135   AAA(IN2,1,1)=CMPLX(1.,0.)
      AAA(IN2,1,2)=CMPLX(0.,0.)
      AAA(IN2,2,1)=AAA(IN3,1,2)/DATA(IXX,1)/DATA(IXX,1)
      AAA(IN2,2,2)=CMPLX(1.,0.)
      GOTO 989
C  **COMPUTE ABCD MATRIX FOR CIRCULAR OPEN STUB**
137   CALL CSTUB(ZCST,DATA(IXX,1),DATA(IXX,2),DATA(IXX,3),DATA(IXX,4),DA
     &TA(IXX,5),W)
      AAA(IN2,1,1)=CMPLX(1.,0.)
      AAA(IN2,1,2)=CMPLX(0.,0.)
      AAA(IN2,2,1)=CMPLX(0.,ZCST)
      AAA(IN2,2,2)=CMPLX(1.,0.)
      GOTO 989
C  **COMPUTE ABCD MATRIX FOR RESONATOR QLA**
140   DS=TAN(FR/DATA(IXX,1)*1.570796)
      DS2=DS*DS
      DX=1./SQRT(1.+DS2)
      AAA(IN2,1,1)=CMPLX(DX,0.)
      AAA(IN2,2,2)=CMPLX(DX*(1.-DS2*DATA(IXX,3)/DATA(IXX,2)),0.)
      AAA(IN2,1,2)=CMPLX(0.,DX*DS*(DATA(IXX,3)+DATA(IXX,2)))
      AAA(IN2,2,1)=CMPLX(0.,DS*DX/DATA(IXX,2))
      GOTO 989
C  **COMPUTE ABCD MATRIX FOR RESONATOR QLB**
142   DS=TAN(FR/DATA(IXX,1)*1.570796)
      DX=1./SQRT(1.+DS*DS)
      AAA(IN2,1,1)=CMPLX(DX*(1.+DATA(IXX,2)/DATA(IXX,4)),0.)
      AAA(IN2,2,2)=CMPLX(DX*(1.+DATA(IXX,2)/DATA(IXX,3)),0.)
      AAA(IN2,1,2)=CMPLX(0.,DX*DS*DATA(IXX,2))
      AAA(IN2,2,1)=CMPLX(0.,DX*(DS/DATA(IXX,2)-(DATA(IXX,3)+DATA(IXX,4)+
     &DATA(IXX,2))/(DATA(IXX,3)*DATA(IXX,4)*DS)))
      GOTO 989
C  **COMPUTE ABCD MATRIX FOR RESONATOR QLC**
144   DS=TAN(FR/DATA(IXX,1)*1.570796)
      DX=1./SQRT(1.+DS*DS)
      AAA(IN2,1,1)=CMPLX(DX*(1.+1./(DATA(IXX,2)*DATA(IXX,3))),0.)
      AAA(IN2,2,2)=CMPLX(DX*(1.+1./(DATA(IXX,2)*DATA(IXX,4))),0.)
      AAA(IN2,1,2)=CMPLX(0.,DX*(DS*DATA(IXX,2)-(1.+DATA(IXX,2)*(DATA
     &(IXX,3)+DATA(IXX,4)))/(DATA(IXX,2)*DATA(IXX,3)*DATA(IXX,4)*DS)))
      AAA(IN2,2,1)=CMPLX(0.,DX*DS/DATA(IXX,2))
      GOTO 989
C  **COMPUTE ABCD MATRIX FOR RESONATOR QLD**
146   DS=TAN(FR/DATA(IXX,1)*1.570796)
      AAA(IN2,1,1)=CMPLX(1.+DATA(IXX,4)/DATA(IXX,3),0.)
      AAA(IN2,2,2)=CMPLX(1.+DATA(IXX,4)/DATA(IXX,2),0.)
      AAA(IN2,1,2)=CMPLX(0.,DS*DATA(IXX,4))
      AAA(IN2,2,1)=CMPLX(0.,-(DATA(IXX,2)+DATA(IXX,3)+DATA(IXX,4))
     &/(DATA(IXX,2)*DATA(IXX,3)*DS))
      GOTO 989
C  **COMPUTE ABCD MATRIX FOR RESONATOR QLE**
148   DS=TAN(FR/DATA(IXX,1)*1.570796)
      AAA(IN2,1,1)=CMPLX(1.+DATA(IXX,4)/DATA(IXX,3),0.)
      AAA(IN2,2,2)=CMPLX(1.+DATA(IXX,4)/DATA(IXX,2),0.)
      AAA(IN2,1,2)=CMPLX(0.,-(DATA(IXX,2)+DATA(IXX,3)+DATA(IXX,4))
     &/(DATA(IXX,2)*DATA(IXX,3)*DS))
      AAA(IN2,2,1)=CMPLX(0.,DS*DATA(IXX,4))
      GOTO 989
C  **SET UP ANOTHER ABCD MATRIX FOR CODE "EQU"**
150   AAA(IN2,1,1)=AAA(IN3,1,1)
      AAA(IN2,2,2)=AAA(IN3,2,2)
      AAA(IN2,2,1)=AAA(IN3,2,1)
      AAA(IN2,1,2)=AAA(IN3,1,2)
      GOTO 989
C  **CASCADE IN2-IN3+1 MATRICES (XAC) **
C  **CASCADE IN2-IN3+1 ABCD MATRICES**
152   I=IN2
      J=IN2-1
      AB5(1,1)=AAA(I,1,1)*AAA(J,1,1)+AAA(I,1,2)*AAA(J,2,1)
      AB5(2,1)=AAA(I,2,1)*AAA(J,1,1)+AAA(I,2,2)*AAA(J,2,1)
      AB5(1,2)=AAA(I,1,1)*AAA(J,1,2)+AAA(I,1,2)*AAA(J,2,2)
      AB5(2,2)=AAA(I,2,1)*AAA(J,1,2)+AAA(I,2,2)*AAA(J,2,2)
      NCB=IN2-IN3-1
      J=J-1
      DO 154 IJJ=1,NCB
      IJ=IJJ
      A(1,1)=AB5(1,1)*AAA(J,1,1)+AB5(1,2)*AAA(J,2,1)
      A(1,2)=AB5(1,1)*AAA(J,1,2)+AB5(1,2)*AAA(J,2,2)
      A(2,1)=AB5(2,1)*AAA(J,1,1)+AB5(2,2)*AAA(J,2,1)
      A(2,2)=AB5(2,1)*AAA(J,1,2)+AB5(2,2)*AAA(J,2,2)
      IF(IJ.EQ.NCB) GOTO 980
      DO 153 M=1,2
      DO 153 N=1,2
153   AB5(N,M)=A(N,M)
154   J=J-1
      GOTO 980
C  **DOUBLE-TRANSPOSE THE IN3-TH MATRIX INTO IN2-ND**
155   DO 156 I=1,2
      DO 156 J=1,2
156   A(I,J)=AAA(IN3,I,J)
      CALL ABCDS(A,AB1,50.)
      AB2(1,1)=AB1(2,2)
      AB2(2,2)=AB1(1,1)
      AB2(2,1)=AB1(1,2)
      AB2(1,2)=AB1(2,1)
      CALL SABCD(AB2,A,50.)
      GOTO 980
C  **THIS IS THE SAMPLE CALCULATION OF THE ABCD MATRIX OF ELEMENT "NEW"*
C  **THE FOUR EXPRESSIONS TO COMPUTE THE ELEMENTS OF THE ABCD MATRIX ARE
C  **  A=P
C  **  B=2RS-JP
C  **  C=WQ+JR
C  **  D=-JS
C  ** WHERE W=6.2829*FREQ(MHZ)
C  **       J IS THE IMAGINARY NUMBER
C  **       P,Q,R,S ARE THE VARIABLES FOR WHICH DATA IS PROVIDED IN THAT
C  **ORDER ON THE SAME LINE WHERE "NEW" IS PLACED IN THE DATA FILE, OR
C  **  V1=P, V2=Q, V3=R, V4=S **
C  **
C  **THE FOLLOWING FOUR LINES COMPUTE THE ABCD MATRIX**
C  **THE CALCULATIONC MUST BE FOLLOWED BY : GOTO 965 **
C  **THE FIRST LINE MUST HAVE THE STATEMENT NUMBER DEFINED EARLIER IN **
C  **STATEMENT NUMBER 413**
3000  CALL FILL
      ABCD(1,1)=CMPLX(V1,0.)
      ABCD(1,2)=CMPLX(2.*V3*V4,-V1)
      ABCD(2,1)=CMPLX(W*V2,V3)
      ABCD(2,2)=CMPLX(0.,-V4)
      GOTO 965
960   CONTINUE
      WRITE(5,961) COL1(IN1)
961   FORMAT('CHARACTERISTIC IMPEDANCE NEEDED FOR ',A3,' IN DATA FILE')
        CALL VALPRI(4,PCODE,FNXYZ)
      STOP
965   AAA(IN2,1,1)=ABCD(1,1)
      AAA(IN2,2,2)=ABCD(2,2)
      AAA(IN2,2,1)=ABCD(2,1)
      AAA(IN2,1,2)=ABCD(1,2)
      GOTO 989
C  **FILL ELEMENT ABCD MATRIX INTO THE "IN3"-TH. LOCATION OF AAA**
980   CONTINUE
      DO 988 I=1,2
      DO 988 J=1,2
988   AAA(IN2,I,J)=A(I,J)
C  **STATEMENT 989 IS THE END OF THE INTERCONNECTION DO-LOOP**
989   CONTINUE
      IF(KODE.NE.2.AND.KODE.NE.5) GOTO 9990
9989  CALL ERRORF(OUT,ERRD1,ERRD,S21,WI,NBAND,IBAND,NF,INDFF,ILTGT)
9990  CONTINUE
C  **STATEMENT 999 IS THE END OF THE FREQUENCY DO-LOOP**
999   CONTINUE
      IF(KODE.EQ.2.OR.KODE.EQ.5) ERRD=ERRD1/NFOPT
      KIMP=0
      INDTR=0
      IF(KLM.LT.17.AND.KODE.EQ.6) GOTO 8003
      KLM=0
      IF(KODE.NE.5) GOTO 1012
      EPLOT(IJII,IKII)=ERRD
1009  ERRD=0.
      IF(IKII.LT.7) GOTO 8002
      IKII=0
      DATA(KX(2),KY(2))=COM2
1010  NOIT=NOIT+1
      IF(IJII.LT.7) GOTO 8001
      IJII=0
      DATA(KX(1),KY(1))=COM1
      WRITE(5,2001) (HORI(I),I=1,7)
2001  FORMAT( 12X,'ERROR FUNCTION VALUES WITH TWO COMPONENTS VARYING'
     &,//,'  VAR.1',33X,'VAR.2',/,1H ,'*-----*    *---------------------
     &--------------------------------------*',/,1H ,11X,7(F7.2,2X),//)
      DO 2011 I=1,7
2011  WRITE(5,1011)VERT(I),(EPLOT(I,J),J=1,7)
1011  FORMAT(1H ,F7.2,4X,7(F7.2,'  '))
1012  CONTINUE
      IF(KODE.NE.2) GOTO 873
      IF(IPRAM.NE.0) GO TO 870
      ERRSD=ERRD
      GO TO 820
C  **COMPUTE GRADIENTS (DOUBLE PRECISION) AND STORE IN GGD**
870   DATA(I88,I99)=SAVEC
      GGD(IPRAM)=(ERRD-ERRSD)/PERT
872   IF(IPRAM.LT.NOPT) GO TO 820
      ERR=ERRSD
873   INDTR=0
      DO 874 IJ=1,NOPT
C **TRANSFER GRADIENTS INTO GR (SINGLE PRECISION)**
874   GR(IJ)=GGD(IJ)
      KIMP=0
1000  RETURN
      END
C  **CONVERT ABCD MATRIX TO Y MATRIX**
    G 	#