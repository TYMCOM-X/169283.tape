
UCP-2.1 						December 1971



















		    REDUCE 2 IMPLEMENTATION GUIDE

		      FOR STANFORD AI LISP 1.6

			    ON THE PDP-10



				 by


			  Anthony C. Hearn

			 University of Utah
















*This research was sponsored by the Advanced Research Projects Agency
of the Office  of  the  Department  of  Defense  under  Contract  No.
F30602-70-C-0300 at the University of Utah.

1.  INTRODUCTION

	This memo describes the REDUCE system DECtape and  procedures
for  generating  a dump file of REDUCE and testing it.  REDUCE can be
generated and run on any PDP-10 with the DEC  operating  system,  the
Stanford  LISP 1.6 system (interpreter and compiler) and at least 36K
of user core.

2. DESCRIPTION OF THE REDUCE SYSTEM DECTAPE

	The  system  tape  contains  twelve  ASCII files with a total
length of about 450 blocks. REDC contains functions used in compiling
REDUCE  source  programs,  RED0 contains functions used in assembling
the LAP (LISP Assembly Program) generated by the LISP  compiler,  and
REDL  contains  the  Stanford LAP program plus REDUCE functions which
have been written directly in LAP. The REDUCE source program (written
in LISP) is found in files RED1, RED2, RED3 and REDP; RED1 containing
those functions peculiar to the PDP-10 version of  REDUCE  and  RED2,
RED3  and  REDP  those  functions which are common to all versions of
REDUCE. RED2 contains the functions which  translate  between  REDUCE
and  LISP,  RED3  the  algebraic  processing functions and REDP those
functions which are  used  in  high  energy  physics  problems.  REDH
contains  some  useful  debugging functions, and REDT contains REDUCE
programming  examples  which  may  be  used  to  test	the   system.
BIGNUM.LSP  and  BIGNUM.MAC  are  updated  versions of the equivalent
files on the LISP source tape, and GUIDE, finally, is this guide.
	Most files on the tape have  sequence  numbers,  and  may  be
listed  with  PIP. The files may also be edited with LINED or similar
line-oriented editors.

3. VERSIONS OF REDUCE AVAILABLE

	Because various users of REDUCE have differing  requirements,
the  assembly procedure is designed to allow for the easy creation of
three basic versions of REDUCE from the source files. These  versions
are as follows:

Version 1:	Standard system without high energy physics routines

Version 2:	Full system with high energy physics routines

Version 3:	REDUCE to LISP translator only

	During  assembly  of the system, information on which version
is  required  must  be supplied at various points as indicated in the
text.

4. ASSEMBLY OF REDUCE

	The  generation of a REDUCE dump file proceeds in two stages.
In the first stage, the LAP equivalents of the files RED1,  REDP  and
RED2  are  produced.  In the second, the LAP is assembled into a LISP
core image.  In  describing  these  processes,  we  assume  that  the
Stanford  AI  LISP  1.6  interpreter  and  compiler  core  images are
available on SYS: with names LISP and COMPLR respectively.   We  also
adopt the following device conventions.

DEV1: device from which the REDUCE system source files are read
DEV2: device on which the LAP files are written
DEV3: device on which compilation output is written
DEV4: device on which the LAP assembly output is written.

	All  these  devices  have the default value DSK:, so the most
convenient way to assemble the system is to copy  the  REDUCE  system
source  tape onto the disk and proceed from there, using the disk for
all output.

5. GENERATING THE REDUCE LAP FILES

	The following job will generate equivalent LAP files  of  the
source files RED1, RED2 and REDP with the same name and the extension
LAP on device DEV2:.

GET SYS: COMPLR 35<cr>
JOB SETUP
^C

.REE<cr>

*(INC (INPUT <dev1:> REDC))<cr> [where <dev1:> is the value of DEV1:,
				e.g. DSK:]


NIL

***
*[at this point devices should be set unless the disk is used
   e. g. (SETQ DEV2: (QUOTE DTA2:))  ]
*(CMPL <number>)<cr>

***

*

	The <number> in the call of CMPL is the  version  number  and
may be 1,2 or 3 as explained in Section 3.

	The  above  job  has  a maximum run time of about 11 minutes.
The file LST1.RED written on DEV3:  may be useful if an error  occurs
during the assembly.  Otherwise, it may be deleted.

6. GENERATING A REDUCE DUMP FILE

	In Sections 6 through 9 we describe how systems with  varying
facilities  can  be built.  The core assignments which we suggest may
be  increased  if  the  implementor feels that the needs of his users
will exceed the suggested allocations. However, the author should  be
contacted  for  advice  on core assignments if it proves necessary to
assemble the systems in less core than recommended.

	The following job will  generate  a  REDUCE  dump  file.   If
devices  other  than the disk are used, they should be set before the
call of BUILD.

.R LISP 37<cr>

ALLOC? Y
FULL WDS=2000<space>
BIN.PROG.SP=35000<space>
SPEC.PDL=1000<space>
REG.PDL=1000<space>
HASH=475<space>
AUXILIARY FILES?<cr>

DECIMAL?
STANFORD AI LISP 1.6  9-DEC-69

*(INC (INPUT DSK: RED0))<cr>
NIL

***

*(BUILD 1)<cr>

*(INITL)<cr>

***

*^C

.SAVE DSK REDUCE<cr>
JOB SAVED
^C
.

	This  job  has  a  run  time  of  about  3 minutes.  The file
LST2.RED written on DEV4: may be useful if an error occurs during the
assembly.  Otherwise it may be deleted.

7. ASSEMBLY OF REDUCE FOR APPLICATIONS IN HIGH ENERGY PHYSICS

	The version of REDUCE generated in the previous section  does
not  contain  the  functions  and  operators  necessary  for  solving
problems in high energy physics.  If you need these functions, it  is
necessary  to  use at least a 40K core partition.  To assemble such a
system, you should first run Step 5 specifying version  2,  and  then
proceed as follows:

.R LISP 40<cr>

ALLOC? Y
FULL WDS=2200<space>
BIN.PROG.SP=42000<space>
SPEC.PDL=1000<space>
REG.PDL=1000<space>
HASH=475<space>
AUXILIARY FILES?<cr>

DECIMAL?
STANFORD AI LISP 1.6  1-DEC-70

*(INC (INPUT DSK: RED0))<cr>
NIL

***

*(BUILD 2)<cr>

*(INITL)<cr>

***

*^C
.SAVE DSK REDUCE<cr>
JOB SAVED
^C

.

8. REDUCE WITH ARBITRARY PRECISION ARITHMETIC

	The  versions  of  REDUCE  generated  by  the  procedures  in
Sections  6  and 7 do not have the facilities for arbitrary precision
integer arithmetic required in some problems.  To  include  these  in
the  system,  one  should  first  build  a LISP system with 4000 full
words, and 2000 more words of binary  program  space.	For  example,
without the functions for high energy physics, one would build a LISP
as follows:

.R LISP 39<cr>

ALLOC? Y
FULL WDS=4000<space>
BIN.PROG.SP=37000<space>
SPEC.PDL=1000<space>
REG.PDL=1000<space>
HASH=475<space>
AUXILIARY FILES?<cr>

DECIMAL?
STANFORD AI LISP 1.6  1-DEC-70

*(INC (INPUT DSK: RED0))<cr>
NIL

***

*(BUILD 1)<cr>

*(INITL)<cr>

***

*^C

.SAVE DSK REDUCE<cr>
JOB SAVED
^C
.

	Assuming that the files BIGNUM.LSP and BIGNUM.REL (made  from
the  updated  files on the REDUCE source tape) are available on SYS:,
one would then run the following program:

.RUN DSK REDUCE<cr>
*(INC (INPUT SYS: (BIGNUM.LSP)))<cr>

NIL

...

*(LOAD T<alt mode>SYS:BIGNUM<alt mode>

LOADER 2K CORE

*(APNINIT)<cr>
NIL

*^C

.SAVE DSK REDUCE<cr>
JOB SAVED

^C

.

9. ASSEMBLY OF REDUCE FOR SYMBOLIC USE ONLY

	Besides  its  effectiveness  as  a  program   for   algebraic
manipulation, REDUCE also provides a useful higher level language for
the development of symbolic programs. If you  require  a  system  for
this  use  only,  then  it is not necessary to assemble the algebraic
simplification routines as well. As a consequence, the program may be
assembled in a much smaller sized core partition, and the compilation
and assembly of the core image takes much less time.  To  build  this
system,  you  should  specify  version  3 in step 5, and then run the
following job:

.R LISP 22<cr>

ALLOC? Y
FULL WDS=1000<space>
BIN.PROG.SP=14000<space>
SPEC.PDL=1000<space>
REG.PDL=1000<space>
HASH=377<space>
AUXILIARY FILES?<cr>

DECIMAL?
STANFORD AI LISP 1.6  1-DEC-70

*(INC (INPUT DSK: RED0))<cr>
NIL

***

*(BUILD 3)<cr>

*(INITL)<cr>

***

*^C

.SAVE DSK REDUCE<cr>
JOB SAVED
^C
.

10. TESTING THE REDUCE SYSTEM

	A  series  of  tests  of  the  assembled  REDUCE  system  are
available on the file REDT on the REDUCE system tape.  To  use  these
tests,  the following job should be run, preferably in 45K of core as
shown:

.GET DSK REDUCE<cr>

.CORE 45<cr>

.REE<cr>

*(BEGIN)<cr>

*IN REDT;<cr>

...

	The output from these tests should be self- explanatory.  The
various options  on  directing  output  from  REDUCE  jobs  to  other
devices,  as explained in Appendix B.1 of the REDUCE 2 User's Manual,
may be followed if desired.  The tests have a total run time of about
5 minutes.


11. PROGRAM CHANGES

Any person receiving the REDUCE 2 program should send  his  (or  her)
name and address to

			  ANTHONY C. HEARN
			DEPARTMENT OF PHYSICS
			 UNIVERSITY OF UTAH
		     SALT LAKE CITY, UTAH 84112

		      TELEPHONE (801) 581-8502

It is most important that this be done so  that  we  can  advise  you
direct of any changes which are made to the system.


12. INQUIRIES AND REPORTING OF ERRORS

Any inquiries regarding the assembly or operation  of  REDUCE  should
also  be  directed  to the above address.  Suspected errors should be
accompanied by the relevant job  output  and  a  copy  of  the  input
program, preferably on punched paper tape.
 