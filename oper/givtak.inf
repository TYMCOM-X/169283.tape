I)	GENERAL INTRODUCTION

1.	IN GENERAL, THE FLOW OF DATA LOOKS LIKE:

   DONOR						RECIPIENT
   -----						---------

	BLOCK NO.)
	     DATA)----------------------------------->(COMPUTE CHECKSUM
	 CHECKSUM)				      (COMPARE WITH
						      (CHECKSUM SENT
						  IF CHKSUM WAS OK:
		<-----------------------------------(BLOCK NO.

2.	THE DONOR AND RECIPIENT EACH KEEP TRACK OF WHICH BLOCKS IN
	THE RECIPIENT FILE ARE GOOD BY MEANS OF A TABLE CALLED
	HDCNT. HDCNT CONSISTS OF 1 BIT PER BLOCK IN THE FILE.
	IT IS INITIALIZED TO ALL ZEROES.
	A. AS THE RECIPIENT DISCOVERS EACH GOOD BLOCK, IT SETS THE APP-
	   ROPRIATE BIT TO 1. WHEN ALL BITS ARE 1, THE RECIPIENT IS
	   "HAPPY", HE TELLS THE MIDDLEMAN, AND THE MIDDLEMAN EXITS,
	   KILLING ALL CIRCUITS.
	B. AS THE DONOR IS TOLD OF EACH BLOCK BEING GOOD, HE ALSO
	   SETS THE APPROPRIATE BIT IN HIS HDCNT, AND NEVER SENDS
	   THAT BLOCK AGAIN.

3.	THE "OLD" FILE:
	A. WHEN THE DONOR TALKS ABOUT THE "OLD" FILE, IT MEANS THE FILE
	   NAMED BY THE USER TO BE THE SOURCE FILE.
	B. WHEN THE RECIPIENT TALKS ABOUT THE "OLD" FILE, IT MEANS THE
	   FILE NAMED BY THE USER TO BE THE DESTINATION FILE.

4.	THE "BAD" FILE REFERS TO THE FILE CALLED FILE.BAD, WHERE 
	FILE IS THE FILENAME PART OF THE DESTINATION FILE NAMED BY
	THE USER.
	THE RECIPIENT USES THE BAD FILE WHILE WRITING OUT THE
	DESTINATION FILE. WHEN ALL BLOCKS ARE GOOD (AS INDICATED BY
	HDCNT), THE RECIPIENT RENAMES THE FILE TO THE NAME THE USER
	SPECIFIED.
	IF THE USER HAPPENED TO HAVE A FILE.BAD ON HIS DISK AREA,
	HE WILL LOSE IT.
	IF THE RECIPIENT SYSTEM CRASHES OR THERE IS ANY KIND OF
	ABORTIONS, THE BAD FILE MAY BE OF SOME USE TO THE USER AS
	IT IS.
	THE NEXT TIME TCOPY IS BEGUN, AND THE DONOR KNOWS THAT THERE
	IS A BAD FILE, THE DONOR WILL TRY TO USE THOSE BLOCKS ALL-
	READY IN THE BAD FILE BY JUST SENDING THEIR CHKSUMS.  IF THEY
	WERE GOOD BLOCKS, THE RECIPIENT WILL TELL HIM.

5.	THE CHECKSUM FOR THE 1100 DATA BYTES AND THE BLOCK NO. IS 
	COMPUTED AS FOLLOWS:

	CHKSUM=BLOCK NO.
REPEAT		(ROTATE CHKSUM 11. BITS TO THE LEFT (SEE ROT INSTR.)
1100 TIMES	(XOR NEXT DATA BYTE		(SEE XOR INSTRUCTION)
	CHKSUM=CHKSUM*111,111111
	CHKSUM=REMAINDER OF(CHKSUM/16777213.)

6.	BEFORE DATA BEGINS TO FLOW FROM THE DONOR TO THE RECIPIENT,
	INFORMATION IS PASSED BACK AND FORTH BETWEEN THE TWO,
	SO THAT BOTH KNOW THE SIZES OF ALL FILES.

7.	THE "ESCAPE" CHARACTER 252 IS USED TO PREVENT CONFUSION
	WITH X-ON'S AND X-OFF'S. WHENEVER A 21 OR A 223(OR 252)
	IS ACTUALLY DATA, A CODE IS PASSED INSTEAD (SEE TABLE OF
	CODES).  THEREFORE, THE PROGRAM CAN DISTINGUISH A REAL
	X-ON OR X-OFF. NORMALLY THE MIDDLEMAN WILL DETECT THEM
	AND DO THE APPROPRIATE THING.
II)	MIDDLEMAN TASKS FOR DONOR PDP10

1.	SHAKE HANDS.

2.	SEND:
	'10'
	USERNAME (0-12 SIXBIT CHARACTERS)

3.	SEND:
	'11'
	FILE NAME (9 SIXBIT CHARACTERS)

4.	SEND:
	'3'

5.	ACCEPT A CHARACTER. IF IT=
	1	IT MEANS THE FILE WAS FOUND
		ACCEPT THE SIZE OF THE FILE IN 3 8-BIT BYTES(SIZE IN WORDS)
	142-162	IT MEANS THE FILE WAS NOT FOUND. USE THE ERROR BITS AS
		EXPLAINED ABOVE, TELL USER AND EXIT

6.	SEND:
	'1'	IF OLD FILE EXISTS ON RECIPIENT SYSTEM THEN,
		SEND:
		SIZE OF OLD FILE [OR MAX(OLDSIZ,BADSIZ) IF BAD FILE
		ALSO EXISTS] IN 2 8 BIT BYTES (SIZE IN BLOCKS)

	'2'	IF BAD FILE ONLY EXISTS ON RECIPIENT SYSTEM, THEN
		SEND:
		SIZE OF BAD FILE (2 8-BIT BYTES - SIZE IN WORDS)

	'3'	IF NEITHER BAD NOR OLD FILE EXIST ON RECIPIENT SYSTEM.

7.	BEGIN TO PASS ALL CHARACTERS RECIEVED FROM THE DONOR SYSTEM ON 
	TO THE RECIPIENT AND ALL CHARACTERS RECIEVED FROM THE RECIP-
	IENT ON TO THE DONOR EXCEPT:
	- 21'S AND 223'S (APPROPRIATE ACTION MUST BE TAKEN)
	- 252 FOLLOWED BY N, WHERE N>100 (TYPE ERROR MESSAGE AND EXIT)
	- 252 FOLLOWED BY 5 (RECIPIENT HAPPY) - COPY COMPLETE - TYPE
		MESSAGE AND EXIT

	- 252 FOLLOWED BY 4 (DONOR HAPPY)
III)	MIDDLEMAN TASKS FOR RECIPIENT PDP10

1.	SHAKE HANDS.

2.	SEND
	'10'
	USERNAME (0-12 SIXBIT CHARACTERS)

3.	SEND 
	'11'
	FILE NAME (9 SIXBIT CHARACTERS)

4.	SEND:
	'4'

5.	ACCEPT A CHARACTER. IF IT=
	1	IT MEANS THAT THE OLD FILE EXISTS.
		ACCEPT THE SIZE OF THE OLD FILE(IN BLOCKS)
	2	MEANS THAT THE BAD FILE EXISTS
		ACCEPT THE SIZE OF THE BAD FILE(IN BLOCKS)
	3	MEANS THAT NEITHER THE OLD OR THE BAD FILE EXISTS.

6.	SEND:
	SIZE OF DONOR FILE IN WORDS

7.	BEGIN TO PASS ALL CHARACTERS AS IN II.7.
IV)	INTERNAL DONOR LOGIC

1.	NORMALLY (THE CASE WHEN THERE IS NO OLD OR BAD FILE ON THE
	RECIPIENT) THE DONOR WILL BEGIN TO TRANSMIT BLOCK
	NUMBERS, DATA (1100 8-BIT BYTES), AND CHECKSUMS FOR CONSECUTIVE
	BLOCKS OF THE OLD FILE.  AFTER EACH BLOCK IS SENT,
	THE DONOR CHECKS FOR ANY INPUT. IF NONE, HE GOES TO SEND THE
	NEXT BLOCK. IF THERE WAS INPUT, AND IT WAS THE RECIPIENT
	SAYING THAT A BLOCK WAS GOOD, THE DONOR SETS THE APPROPRIATE
	BIT IN HDCNT AND CONTINUES.  AFTER EACH BLOCK IN THE DONOR
	FILE HAS BEEN SENT ONCE, THE DONOR DELAYS FOR A FEW SECONDS,
	THEN CHECKS FOR INPUT AGAIN. IF HIS HDCNT IS STILL NOT ALL
	ONES, HE TRIES TO RETRANSMIT ALL THOSE BLOCKS THAT HE STILL
	HAS A ZERO FOR. IF THE TOTAL NUMBER OF BLOCKS THE DONOR SENDS
	EVER EXCEEDS 1.1*(SIZE OF OLD FILE)+5, HE QUITS AND SENDS
	THE APPROPRIATE ERROR MESSAGE TO THE MIDDLEMAN.

2.	IF AN OLD OR BAD FILE DID EXIST ON THE RECIPIENT SYSTEM,
	THE DONOR HAS THE SIZE OF IT (OR THE BIGGER OF THE 2) AND
	SENDS A BLOCK NUMBER AND CHECKSUM (NO DATA) FOR EACH
	BLOCK ALLREADY WRITTEN. THEN THE DONOR CONTINUES AS IN 1.

3.	ON INPUT:
	DONOR MUST CHECK FOR A 252 IN THE BLOCK NUMBER TO SEE IF ACTUAL
	DATA WAS A 21 (X-ON) OR A 223 (X-OFF). THE MIDDLEMAN SHOULD
	BE SCREENING OUT ALL ACTUAL X-ON'S AND X-OFF'S.
	ON OUTPUT:
	DONOR MUST CHECK FOR 252'S, 21'S AND 223'S IN THE DATA, THE
	BLOCK NUMBER AND THE CHECKSUM, AND SEND THE APPROPRIATE
	REPLACEMENT.

4.	THE DONOR SHOULD NEVER GET HDCNT COMPLETELY FULL, AS THE
	RECIPIENT'S HDCNT WILL BECOME FULL FIRST AND NOTIFY THE MIDDLE-
	MAN.
V)	INTERNAL RECIPIENT LOGIC

1.	THE RECIPIENT ACCEPTS INFORMATION FROM THE DONOR AND CHECKS IT.
	IF THE CHECKSUM IS CORRECT, THE RECIPIENT SETS A BIT IN HDCNT
	AND TELLS THE DONOR THAT THE BLOCK WAS GOOD.  IF IT IS
	NOT CORRECT, THE RECIPIENT JUST GOES TO GET THE NEXT SET OF
	INFORMATION. IF DATA IS INCLUDED IN THE INFORMATION, THE
	RECIPIENT COMPUTES HIS OWN CHECKSUM AND COMPARES IT WITH THE ONE
	SENT. IF DATA IS NOT INCLUDED IN THE INFORMATION SENT, THE
	RECIPIENT LOOKS AT THE APPROPRIATE BLOCK ON THE DISK (EITHER
	IN THE OLD OR BAD FILE, OR EVENTUALLY BOTH) AND COMPARES
	THE CHECKSUM WITH THE CHECKSUM OF THE BLOCK READ.
	WHEN THE RECIPIENT'S HDCNT IS FULL, THE BAD FILE IS RENAMED
	TO THE NAME THE USER TYPED IN.

2.	IF ANY INFORMATION IS LOST, THE RECIPIENT CAN ALWAYS GET
	BACK INTO SYNCHRONIZATION SINCE A 252 PRECEEDES EVERY BLOCK
	NUMBER COMING FROM THE DONOR.

3.	ON INPUT:
	RECIPIENT MUST CHECK FOR A 252 ALWAYS. DEPENDING ON THE
	CHARACTER FOLLOWING IT, A NEW BLOCK IS BEING STARTED, OR
	DATA MUST BE REPLACED BY 252,21 OR 223.
	ON OUTPUT:
	RECIPIENT MUST CHECK FOR BLOCK NUMBERS CONSISTING OF A 
	252,21 OR 223 AND REPLACE THEN WITH THE APPROPRIATE CHAR-
	ACTER.

4.	THE RECIPIENT ALWAYS WRITES THE BLOCK TRANSMITTED OUT TO
	THE DISK, WHETHER IT WAS GOOD OR NOT.

5.	WHEN THE RECIPIENT SEES THAT THE LAST PHYSICAL BLOCK OF THE
	FILE IS BEING SENT, INSTEAD OF WRITING OUT 128 WORDS, IT
	WRITES OUT ONLY THE NUMBER OF WORDS NEEDED TO COMPLETE THE
	FILE.  THE RECIPIENT KNOWS HOW MANY ARE NEEDED, SINCE AT THE
	BEGINNING IT WAS SENT THE SIZE OF THE FILE IN WORDS.

VI)	CODES USED IN TCOPY

ALL CODES ARE PRECEEDED BY A 252

CODE	MEANING
----	-------

1	DATA WAS ACTUALLY A 252
2	DATA WAS ACTUALLY A 21
3	DATA WAS ACTUALLY A 223 
4	DONOR IS HAPPY (SHOULD NOT HAPPEN)
5	RECIPIENT IS HAPPY (THIS MESSAGE IS SENT 2000. TIMES IN CASE
	A 940 BUFFER WAS LOST, THEN THE RECIPIENT EXITS)
6	BLOCK NO. (ONLY) FOLLOWS - (USED FROM R TO D)
7	BLOCK NO. & CHECKSUM FOLLOW - (USED FROM D TO R)
10	BLOCK NO., DATA & CHECKSUM FOLLOW - (USED FROM D TO R)
11	ERROR CODE FOLLOWS
ERROR
CODE
----

100-137	I/O ERROR OCCURRED ON THE OLD FILE. (FOR EXPLANATION OF INDIVID-
	UAL BITS, SUBTRACT 100,SHIFT LEFT 15, AND USE FILE STATUS
	TABLE.)
142-162	LOOKUP, ENTER OR RENAME ERROR OCCURRED ON OLD FILE. (FOR EXPLAN-
	ATION OF INDIVIDUAL ERRORS, SUBTRACT 142 AND USE APPENDIX E IN
	PDP10 MONITOR HANDBOOK.)
163	MISCELLANEOUS SYSTEM ERROR OCCURRED. (EX. ILLEGAL GETTAB,
	CAN'T INIT DSK,ETC.)
164	MISCELLANEOUS PROGRAM SYNCHRONIZATION ERROR OCCURRED.
165	FILE TO BIG. (FILE IS MORE THAN 65535. BLOCKS)
166	TOO MANY RETRIES. (THE NUMBER OF BLOCKS SENT EXCEEDS THE
	NUMBER OF BLOCKS IN THE FILE +10% +5)
167	USER NAME IS INVALID ON THIS SYSTEM
300-337	I/O ERROR OCCURRED ON THE BAD FILE. (FOR EXPLANATION OF INDIVID-
	UDAL BITS, SUBTRACT 300, SHIFT LEFT 15, AND USE THE FILE STATUS
	TABLE.)
342-362 LOOKUP, ENTER OR RENAME ERROR OCCURRED ON BAD FILE. (FOR EXPLAN-
	ATION OF INDIVIDUAL ERRORS, SUBTRACT 342 AND USE APPENDIX E IN
	PDP10 MONITOR HANDBOOK.)

    