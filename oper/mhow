The File Control Block

     File names used in slave commands are entered in the symbol table
with a symbol type of file (S.T.File).  The symbol value type is ptr
(S.V.T.ptr) and the value is the file control block pointer.

     The file control block (or F.C.B.) contains the information
necessary to define the status of a file for use by the slave
command routines.

     The f.c.b. is usually created at open time.  All fields are
filled with some value, either given or defaulted.

     The fields of the f.c.b. are discussed below:

     1.  fn.  The file number is returned by the 940 open BRS or
              or the PDP-10 IOCS open routine, and is used by the
              slave in subsequent file operations.

     2.  cp.  The cursor position is a byte count, initially or
              zero at open time.  The cp is changed implicitly by
              each read, write or erase command, or set explicitly
              by the setcur command.

     3.  Open/close indicator.  True if file open, false if not.

     4.  Open mode.  If the file is open then the mode is one of
                     the three:

                        .read
                        .write
                        .update  (read and write)

     5.  Block size.  The block size is a byte command, initially
                      set to the value of the 'std.blk.size' slave
                      variable at open time.  The 'setbs' (set block
                      size) command is used to change this value.
                      The 'sendbs' command is used to request this
                      value.

     6.  File Type.  This is the problem area - what properties are
                     the same or isomorphic between 940 - PDP10?
                     See Codie's proposals for file standardization.

     7.  File name.  The bufferlet string ptr to the filename char-
                     acter string.


Variables associated with files

     1.  std.block.size - assigned as block size (in bytes) in 
              file.control.block when f.c.b is set up.

     2.  curfile - curfile is a fact variable (initially nil) that
              is used as the default filemane.  

     The following slave command set curfile to filename buf ctr 
ptr of the filename is specified:

              open
              sblks
              erase
              write
              rblks
              setcur
              sendfs
              setbs
              setfs
              rename *

     *Curfile is set to the new name (which must be specified)

     The following slave commands set curfile to nil:

              close
              closea

* send file size

     [SENDFS command] ::=  SENDFS  [identifier]

          The file size in bytes of the file woth name [identifier]
     is to the requestor via a FSDATA command.  If the file does not
     exist, then a zero is sent.

* Set file size

     [SETFS command] ::=  SETFS  [identifier], [integer]

          The file size in bytes of the file with name [identifier]
     is the value of [integer].

* Send Blocks  (Read)

     [SBLKS command] ::=  SBLKS  [identifier],[integer]

          The SBLKS command requests that [integer] number of
     blocks be sent from file with name [identifier].  The
     blocks are sent via the RBLKS command.  The cursor position
     and block size are taken from the files f.c.b.

 *Receive Blocks

     [RBLKS command] ::=  RBLKS  [idnetifier],[integer],[data]
          The RBLKS command is generated in response to SBLKS or
     STEST commands.  The blocks from file with name [identifier]
     (or a pseudonym if generated by STEST) are sent [integer.]
     blocks per RBLKS command.  The [integer]'s are:

          1.  Number of blocks in this RBLKS



          Each block has a header with

          1.  Seq # of this block within SBLKS request or
              STEST request.

          2.  Cursor position

* Set Block Size

     [SETBS command] ::=  SETBS  [identifier],[integer]

          The block size in the fcb of the file with name [identifier]
     is set to the value of [integer].

          If the file does not exist, then an error message is sent
     to the master.

* Send Block Size

     [SENDBS command] ::=  SENDBS [identifier]

          The block size from the file control block (ficib) of
     the file with name [identifier] is sent to the requestor
     via a 'BSDATA' command.

* BS DATA Command

     [BSDATA command] ::= BSDATA [identifier],[integer]

          The block size in bytes of the file with name [identifier]
     is the value of [integer].


* Send File Control Block

     [SENDFCB command] ::=  SENDFCB[identifier]

          The file control block (f.c.b.) of the file with name
     [identifier] is sent to the requestor via the FCB command.

          If the file does not exist, an error message is sent
     in the FCB command.

          If the file exists, but has no f.c.b. then the file is
     opened and closed in order to create one.

* File Control Block

     [FCBDATA command] ::= FCBDATA [identifier],[varval]

          The file control block of the file with name [identifier]
     follows in the [varval] list of integers.  The [varval] has
     the following format:

          [integer1],[integer2], . . . ,[integer4],
     Where integer
          1.  True/false if the file exists
          2.  File number
          3.  Cursor position
          4.  Open/close status
          5.  Open mode
          6.  Block size
          7.  File type
          8.  File size

* Set Cursor Position

     [setcur command] ::= SETCUR  [identifier],[integer]

          The byte cursor position in the file control block (f.c.b.)
     of the file with name [identifier] is set to the value of
     [integer].  If the new cursor position if larger than the file
     size, then the file size is used and an error message sent to
     the master.

* Send Cursor Position

     [sendcp command] ::= SENDCP [idnetifier]

          The cursor position in the file control block (f.c.b.) of
     the file with name [identifier] is returned to the sender via
     a SETCUR command.

          If the file does not exist, a 0 is sent as the value.

* Erase Block (set cursor and erase)

     [ERASE command] ::= ERASE [identifier],[integer],[integer]

          The cursor position of the file with name [identifier]
     is set to the value of the first [integer], after which the
     second [integer] number of blocks are erased.  After the
     erase operation, the cursor position remains at the value
     of the first [integer].


* RENAME File

     [RENAME command] ::= RENAME [identifier],[identifier]

          The file name given in the first [identifier] is renamed
     to the name given in the second [identifier].  The file
     retains its file control block with new name.

* CREATE FILE

     [CREATE command] ::= CREATE [identifier],[integer]

          The 'CREATE' command creates a new file with the name
     [identifier] and the file type [integer] (*** need to specify
     file types, e.g. symbolic, data, etc.)

          If a file already exists then an error message is sent
     to the master.

* CLOSE ALL FILES

     [CLOSEA command] ::= CLOSEA

          The CLOSEA command closes all files that are open.
     There are no operands.

* CLOSE FILE

     [close command] ::= CLOSE [identifier]

          The existing opened file with filename [identifier] is
     closed.

          The 'CLOSE' command will send an error message to the
     master (1) if the file is already closed or (2) if the file
     does not exist.

          If [identifier] is defaulted, then the filename in the
     slave variable 'curfile' is used.

* OPEN FILE

     [open command] ::= OPEN [identifier],[integer]

          The already existing file with filename [identifier] will
     be opened in READ,WRITE, or UPDATE mode if [integer] is
     1, 2, or 3 respectively.  A new file is created by the CREATE
     command; the OPEN command will send an error message to the
     master if the given file does not exist.

          If [identifier] is defaulted, then the filename in
     the slave variable 'curfile' is used.

 