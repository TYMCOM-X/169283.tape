MODULE DEXEC(DOLLAR,ENTRIES=($DEXEC),FSAVE,TIMING,TIMER=EXTERNAL(SIX12))
        =
BEGIN

REQUIRE CDEFS.BLI[7,107355];
REQUIRE DDEFS.BLI[7,107355];
REQUIRE DVDEFS.BLI[7,107355];
REQUIRE FPDEFS.BLI[7,107355];
REQUIRE GDEFS.BLI[7,107355];
REQUIRE UDEFS.BLI[7,107355];
REQUIRE RDEFS.BLI[7,107355];
UNDECLARE $DEXEC;


MAP U$DYNARY DBASE$;
MAP G$ DGAM$;
MAP DL$ DLIST$;
MAP DR$ DREGS$;
MAP U$DYNARY DPOOL$;
MAP U$DYNARY DEFER$;
MAP U$DYNARY DRACK$;

GLOBAL ROUTINE $DEXEC =
BEGIN
        LOCAL P; %FOR G$OPND PURPOSES%
        MAP G$OPND P;
        LOCAL PLACES; %TOTAL PRECISION%
        LOCAL T1,T2;
        MAP FP$I T1;
        MAP FP$I T2;
        $D$$();   %INVOKE DTBDEF INTO EXISTENCE%
        $DR$$();  %INVOKE RTBL$ INTO EXISTENCE%
        DBASE$_$CGTZM(15);
        DGAM$_$CGTZM(31);
        P_.DGAM$+1;
        DREGS$_$CGTZM(63);
        DLIST$_$CGTZM(200);
        DPOOL$_$CGTZM(63);
        DEFER$_$CGTZM(511);
        DRACK$_$CGTZM(127);
        DFLAG$_0;
        $CSTART(CV$GAMMAIN);
        $CSTART(CV$DELTAOUT);
        T1_0; T2_0; %BUILD STANDARD FP'S%
        T1[FP$XI]_T2[FP$XI]_1; %1N%
        T1[FP$FS]_T2[FP$FS]_FPV$Z; %Z CONV%
        T1[FP$SP2]_T2[FP$SP2]_0; %DECIMAL POINT%
        T1[FP$FI]_2;
        T2[FP$FI]_4;    %COMPLETES FORMATS%
        DXFP2ZN$ _ .T1;   %MAKE IT GLOBAL NOW%
        DXFP4ZN$ _ .T2; %LIKEWISE%
        DXMAPMAX$_1;   %64 TEMPS FOR NOW%
        DXMAP$(0)_DXMAP$(1)_#37777777777; %INIT. BIT MAP%
        DXLSTCT$_-1;
        DXPDBSZ$_5; %PDB SIZE FOR NOW%
        DXCOMMA$_","; %DEFAULT SEPARATOR%
        DXCRETURN$_ "?M";%DEFAULT TERMINATOR%
        DXSCBSIZE$ _ 9; %CURRENT SCB SIZE%
        DXRBSIZE$ _ 11; %CURRENT REPORT BLOCK SIZE%
        DXLASTRB$ _ DXLASTRSB$ _ DXLASTSCB$ _ -1; %MARK UNUSED%
        DXSBASE$_1;
        DXSOURCE$_DXSINK$_0; %MARK SINK AND SOURCE AS UNUSED%
        DXEX$_-1; %INDICATES NO ABORTS%
        DXPARAM$_ -1; %NO PARAMETERS YET%
        DXCRSTP$_$DMKST(1,'?M    ');
        PLACES _ 0;

        %INITIALIZE DREGS$ OF INTEREST%
        $DSETLIT(#36,0);
        $DSETLIT(#35,1);
        $DSETAC(#34,15); %R34 = AC 17%
        $DSETAC(#33,14); %R33 = AC 16%
        $DSETAC(#31,13); %R31 = AC 15%
        $DSETLIT(#32,#400000); %R32 = BITMASK FOR DBL PREC%
        $CING(.DGAM$);  %READ FIRST RECORD%
        UNTIL .DGAM$[G$TYPE] EQL GV$EOF DO
           BEGIN
           %MAIN PROCESS LOOP%
           IF ((.DGAM$[G$TYPE] EQL GV$ADD) OR
               (.DGAM$[G$TYPE] EQL GV$ALIGN) OR
               (.DGAM$[G$TYPE] EQL GV$SUB) OR
               (.DGAM$[G$TYPE] EQL GV$MUL)) AND
              (.DGAM$[G$ICNT]+.DGAM$[G$DCNT]) GTR .PLACES THEN
                PLACES _ (.DGAM$[G$ICNT]+.DGAM$[G$DCNT]);
           CASE .DGAM$[G$TYPE] OF
                SET
%EMPTY%         $DIVER('G$TYPE=0 ');
%EMPTY%         $DIVER('G$TYPE=1 ');
%EMPTY%         $DIVER('G$TYPE=2 ');
%EMPTY%         $DIVER('G$TYPE=3 ');
%EMPTY%         $DIVER('G$TYPE=4 ');
%EMPTY%         $DIVER('G$TYPE=5 ');
%EMPTY%         $DIVER('G$TYPE=6 ');
%EMPTY%         $DIVER('G$TYPE=7 ');
%EMPTY%         $DIVER('G$TYPE=8 ');
%GV$ALIGN%      $DALIGN(); %MIGHTY ALIGN%
%GV$ADD%        $DADD();  %EMIT AN ADD SEQUENCE OF SORTS (+)%

%END OF FIRST TEN..NOW 11 THRU 20%


%GV$SUB%        $DSUB(); %PROCESS ONE EACH SUBTRACT%
%GV$MUL%        $DMUL(); %EMIT ONE EACH MULTIPLY SEQUENCE%
%GV$DIV%        $DDIV(); %DIVIDE%
%GV$MIN%        $DMIN();  %EMIT UNARY MINUS%
%GV$NOT%        $DBOOL(); %PROCESS THE NOT IN $DBOOL%
%GV$EQ%         $DCON(); %PROCESS "="%
%GV$NE%         $DCON(); %PROCESS "#"%
%GV$LT%         $DCON(); %PROCESS "<"%
%GV$GT%         $DCON(); %PROCESS ">"%
%GV$LE%         $DCON();  %PROCESS <= %

%NOW FOR 21-30%


%GV$GE%         $DCON(); %PROCESS ONE EACH >=%
%GV$AND%        $DBOOL(); %PROCESS ONE EACH "AND"%
%GV$OR%         $DBOOL(); %PROCESS ONE EACH "OR"%
%GV$STORE%      $DLET();  %PROCESS A LET IN ALL ITS MANY RECIDIVISMS%
%GV$OPEN%       $DOPEN(.P[1,G$OPVAL],GV$OPEN); %OPEN A SCB OR A RCB%
%GV$CLOSE%      $DOPEN(.P[1,G$OPVAL],GV$CLOSE); %CLOSE A CONTROL BLK%
%GV$VIA%        $DOPEN(.P[1,G$OPVAL],GV$VIA); %A VIA ON A REL INC%
%GV$SETKEY%     $DSETK(GV$SETKEY,.P[1,G$OPVAL],.DGAM$[G$OPND2]);
%GV$READ%       $DOPEN(.P[1,G$OPVAL],GV$READ); %SEQ READ A RELATION%
%GV$BRNEOF%     $DEOF(GV$BRNEOF,.P[1,G$OPVAL],.P[2,G$OPVAL]);

%NOW FOR 31-40%


%GV$BREOF%      $DEOF(GV$BREOF,.P[1,G$OPVAL],.P[2,G$OPVAL]);
%GV$FETCH%      $DFTCH(GV$FETCH); %PROCESS A FETCH LIST%
%GV$FETCHN%     $DIVER('GV$FETCHN ');
%GV$STUFF%      $DFTCH(GV$STUFF); %PROCESS A STUFF%
%GV$STUFFU%     $DUSTF(); %SPIN OFF STUFF USING'S%
%GV$INSORT%     $DOPEN(.P[1,G$OPVAL],GV$INSORT); %FROSTING FOR STRAUSS%
%GV$RELEASE%    $DOPEN(.P[1,G$OPVAL],GV$RELEASE); %ONE TO BE SORTED%
%GV$ALTER%      $DOPEN(.P[1,G$OPVAL],GV$ALTER); %AN ALTER%
%GV$INSERT%     $DOPEN(.P[1,G$OPVAL],GV$INSERT);
%GV$DELETE%     $DOPEN(.P[1,G$OPVAL],GV$DELETE); %DELETE A REL INC%


%NOW FOR 41-50%


%GV$INPUT%      $DINPT(.P[1,G$OPVAL]); %NEW CALL..2/11/75%
%GV$ACCEPT%     $DIVER('G$TYPE = 42 ');
%GV$PRINT%      $DPRNT(.P[1,G$OPTYP],.P[1,G$OPVAL],.DGAM$[G$OPND2]);
%GV$ABORT%      $DABRT(); %FANCY ABORT%
%GV$SORT%       $DOPEN(.P[1,G$OPVAL],GV$SORT); %SORT!SORT!%
%GV$LABEL%      $DPLBL(.P[1,G$OPVAL]);     %PROCESS STUPID LABEL%
%GV$BRANCH%     $DGOTO(GV$BRANCH,.P[1,G$OPVAL],0);
%GV$BRCHF%      $DGOTO(GV$BRCHF,.P[2,G$OPVAL],.P[1,G$OPVAL]);
%GV$BRCHT%      $DGOTO(GV$BRCHT,.P[2,G$OPVAL],.P[1,G$OPVAL]);
%GV$CALL%       $DCALL(.P[1,G$OPVAL],.P[2,G$OPVAL]); %EMIT A PUSHJ%

%NOW FOR 51-60%

%GV$STRPET%     $DIVER('G$TYPE = 51 ');
%GV$TAB%        $DPROP(GV$TAB); % A TAB OF N SPACES%
%GV$CHGD%       $DOPEN(.P[1,G$OPVAL],GV$CHGD); %CHANGED TEST%
%GV$RESET%      $DRSET(.P[2,G$OPVAL]); %GENERATE FLAG RESET CODE%
%GV$CHGFLS%     $DIVER('G$TYPE = 55 ');
%GV$TEST%       $DTFLG(.P[2,G$OPVAL],.P[3,G$OPVAL]); %A CHNGED FLG TEST%
%GV$SIN%        $DSIN(.P[1,G$OPVAL],.P[2,G$OPVAL]); %A "TSEQI" IS IN ORDER%
%GV$SOUT%       $DSOUT(.P[1,G$OPVAL],GV$SOUT);  %EMIT A $TSEQO%
%GV$ESIN%       $DESIN(.P[1,G$OPVAL],.P[2,G$OPVAL]); %A "TESQI" IS REQID%
%GV$ESOUT%      $DRNCL(RTRV$TESQO,0); %END SEQUENTIAL OUTPUT%

%NOW FOR 61-70%


%GV$CR%         $DCRET(); %EMIT A CARRIAGE RETURN..EITHER I/O%
%GV$TOP%        $DIVER('GV$TOP ');
%GV$SKIP%       $DPROP(GV$SKIP); %SKIP N LINES%
%GV$SKIPTO%     $DPROP(GV$SKIPTO); %SKIP TO LINE N%
%GV$TABTO%      $DPROP(GV$TABTO);
%GV$TIME%       $DNOW(RTRV$VCTIM); %CURRENT TIME%
%GV$TODAY%      $DNOW(RTRV$VDAY);  %CURRENT DATE%
%GV$TRIM%       $DTRIM(.P[1,G$OPVAL]); %NEW IMPROVED TRIM CALL%
%GV$COUNT%      $DRCNT(.P[1,G$OPVAL],.P[2,G$OPVAL]); % "COUNT(RELNAME)"%
%GV$FETCHALL%   $DOPEN(.P[1,G$OPVAL],GV$FETCHALL); %FETCH ALL INSTS%

%NOW FOR 71-80%

%GV$STUFFALL%    $DFTCH(GV$STUFFALL) ; %IMPROVED STUFF%
%GV$LRESULT%    $DGOOSE(.P[1,G$OPVAL]);  %FORCE LOGICAL RESULT%
%GV$INIT%       $DINSC(.P[1,G$OPVAL],.DGAM$[G$OPND2]);
%GV$LSBSORT%    $DOPEN(.P[1,G$OPVAL],GV$LSBSORT); %LEFT SUBSET SORT%
%GV$DRCHK%      $DCON(); %PROCESS ONE EACH GV$DRCHK%
%GV$DELALL%     $DOPEN(.P[1,G$OPVAL],GV$DELALL); %DELETE ALL%
%GV$PROC%       $DPNTR(.P[1,G$OPVAL]); %PROCESS A PROC%
%GV$ENTRY%      $DSRTIN(.P[1,G$OPVAL]);  %PROCESS A SUBROUTINE ENTRY%
%GV$PEXIT%      $DEPDB(.P[1,G$OPVAL]); %EMIT 1 EACH RETURN+PDB%
%GV$SEXIT%      $DEXIT(.DGAM$[G$RETURNF],.DGAM$[G$RESULT]);

%NOW FOR 81%

%GV$NEWLINE%    $DELNE(.DGAM$[G$OPNDN]);   %GENERATE A LNE%
%GV$RCHK%       $DCON(); %$DCON HANDLES RCHK'S AS WELL%
%GV$INPERR%     $DTERR(.P[2,G$OPVAL]); 
%GV$ERROR%      $DERR(.P[1,G$OPTYP],.P[1,G$OPVAL],.DGAM$[G$OPND2]);
%GV$IS%         $DIVER('GV$IS    ');
%GV$SNCVRT%     $DCONV(.P[1,G$OPTYP],.P[1,G$OPVAL],RTRV$TCVSN);
                %STRING->NUMERIC%
%GV$NSCVRT%     $DTNS(.P[1,G$OPTYP],.P[1,G$OPVAL],.DGAM$[G$OPND2],
                RTRV$TICNV);  %NUMERIC->STRING%
%GV$DSCVRT%     $DCVDS(.P[1,G$OPTYP],.P[1,G$OPVAL],
        $FPCNT(.DGAM$[G$OPND2]),.DGAM$[G$OPND3],.DGAM$[G$OPND4]);
        %EMIT ONE EACH DATE-'AS'-STRING CONVERSION%
%GV$SDCVRT%     $DCVSD(.P[1,G$OPTYP],.P[1,G$OPVAL]);
                %STRING-->DATE CONVERSION%
%TODAY IS 2/15/75%
%GV$SNTEST%     $DCONV(.P[1,G$OPTYP],.P[1,G$OPVAL],RTRV$TCTST); %'IS' S N?%


%NOW VALUES FROM 91-??%

%GV$NSTEST%     $DTNS(.P[1,G$OPTYP],.P[1,G$OPVAL],.DGAM$[G$OPND2],
                RTRV$TCTNT); %NUMERIC-IS-STRING TEST..4/8/75%
%GV$DSTEST%     $DDST(); %GENERATE A POSRCHK TO INSURE DATE IS O.K.%
%GV$SDTEST%     $DCVSD(.P[1,G$OPTYP],.P[1,G$OPVAL]);
%TODAY IS 3/20/75%



           TES; 
%.................END OF CASE.............%
           DFLAG$_0;   %CLEAR FLAGS FOR NEXT TIME AROUND%
           DXFOUR$_0; %AND RESET DXFOUR$%
           $CING(.DGAM$);
        END;
        $DELNE(0);      %EMIT FINAL LINE NUMBER ENTRY%
%TEMPORARY PRINTOUT FOR PRECISION%
   BEGIN
   EXTERNAL JOBDDT;
!  IF .JOBDDT NEQ 0 THEN
        BEGIN
        $DIVOT(' MAX NUMBER OF DIGITS = ');
        $UAPDC(.PLACES);
        $UOUTL(0);
        END;
   END;
%END OF TEMP%
        $DEFER();   %PROCESS DEFERED DD'S, INIT'S, AND RCB'S%
        DBASE$[DBV$TEMPBASE]_.DXTMPHWM$+1; %HIGN WATER MARK%
        DBASE$[DBV$STEMPBASE]_.DXSTMPSIZE; %SET STRING TEMP SIZE%
        $DEM1W(DV$END,0,DBV$PROGBASE,0); 
        %END FILE THE DELTA FILE%
        $CFREEM(.DPOOL$);
        $CFREEM(.DLIST$);
        $CFREEM(.DREGS$);
        $CFREEM(.DGAM$);
        $CFREEM(.DEFER$);
        $CFREEM(.DRACK$);
        $CSTOP(CV$GAMMAIN);
        $CSTOP(CV$DELTAOUT);
        .DBASE$
END;

END ELUDOM
   