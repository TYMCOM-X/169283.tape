To:  Norm Hardy

From:  Ken Jones

CC:

SUBJECT:  NCSS/CMS EDIT COMPARISON

     The NCSS and CMS editors are quite similar having
evolved from the same base.  The CMS edit has several significant
non-trivial enhancements to commend it.  Namely, the Edit macro
capability via EXEC files, the line number oriented capabilities
(LINEMODE, PROMPT,nnnnn), and the backspace handling options (IMAGE).
The unique NCSS features on the other hand, are quite easily
implemented.  Their most notable features are the command suffix "."
which toggles the VERIFY mode for one command and the ability to
store multiple commands in the X,Y,XX, and YY "MACROS".

     Attachment 1 provides a detailed comparison.  Attachment 2
contains some previous notes on possible EDIT enhancements.
                        ATTACHMENT 1

EDIT Comparison

Command or   NCSS   CMS                    Comment
Feature

AGAIN         X      X     Note 1:  There are equivalent capabilities
ALTER                X     Note 2
BACKSPACE     X            Notes 3, 10:  CMS has better facilities
BLANK         X            Note 4:  Capability available
BOTTOM        X      X     
BRIEF         X            Function incorporated in VERIFY
CASE                 X     A CMS enhancement
CHANGE        X      X     
CMS   _              X     Note 5:  CMS command subset mode
CSS           X            Note 5
DELETE        X      X     Note 6:  NCSS extension
DOWN          X      X     Note 7
ERASE         X            Note 5:  No additional capability
FILE          X      X     Note 8:  CMS extension
FIND          X      X
FMODE                X     Specify filemode and
FNAME                X     filename for subsequent FILE or SAVE
GET           X            NCSS GET and
GETFILE              X     CMS GETFILE provide the same function
GOTO          X            Note 9:  CMS has superior capabilities
IMAGE               X     Notes 3, 10:  No corresponding NCSS feature
INPUT         X      X     
INSERT        X            Included in function of CMS INPUT
LINEMODE             X     Note 11
LINENO        X            Notes 9, 11:  Returns current rel. line mo.
LOCATE        X      X     
LONG                 X
NEXT          X      X
OVERLAY       X      X
PRESERVE             X     Note 12
PRINT         X            Corresponds to CMS TYPE
PROMPT               X     Note 11
PUT           X            Note 13
QUIT          X      X     
RECFM                X     Allows setting of record format
REPEAT               X     Note 1
REPLACE       X      X     
RESTORE              X     Note 12
RETURN               X     Note 5
REUSE (=)            X     Note 1
SAVE          X      X     CMS extensions for filetype and filemode
SBRIEF        X            Marginal value
SERIAL        X      X     
SETBREAK      X            Note 14
SETCHAR       X            Note 15:  Capability generalized in CMS
SHORT                X
STACK                X     Note 16
TABDEF        X            Marginal value; CMS uses TAB char. as tab
TABSET        X      X
TOP           X      X
TRUNC                X     Note 17
TYPE                 X     Replacement for PRINT
UP            X      X     Note 18
VERIFY        X      X     CMS VERIFY extended
X, Y          X      X     NCSS extensions for multiple commands
XX, YY        X            Function same as X and Y
ZONE          X      X
?             X      X     Note 19
nnnnn                X     Note 20, 11
EDIT MACROS          X     Note 21
the Verify
Toggle        X            Note 22
$DUP                 X     Note 23
$MOVE                X     Note 23
                            NOTES

1)    AGAIN is nearly equivalent to the CMS REPEAT command.  AGAIN
      repeats the preceding rather than the subsequent line.  The
      CMS REUSE (=) can be used to execute the preceding EDIT command.

2)    NCSS can provide the ALTER function through the SETCHAR and
      CHANGE commands.

3)    NCSS BACKSPACE command specifies the logical backspace char-
      acter.  The CMS IMAGE command provides three optional handlings
      of backspaces.  These options are not available with NCSS.  The
      standard CMS line editing for character delete, line delete,
      and logical line end symbols, of course, applies.

4)    The NCSS BLANK command is easily accomplished in CMS using
      OVERLAY and ALTER.

5)    The CMS and CSS commands provide roughly the same
      capabilities.  The "CSS" must be prefixed to each CMS command
      and the user is not prevented from issuing CMS commands that
      use editor core.  The new CMS command causes the editor
      to enter CMS subset mode in which the following commands are
      valid:  RENAME, DISK, ERASE, EXEC, QUERY, LISTFILE, PRINT,
      PUNCH, READCARD, TYPE, ACCESS, STATE and SET.  The user resumes
      editing by typing the RETURN command.

6)    NCSS has extended DELETE to delete lines through a line con-
      taining a specified substring.  An added convenience.

7)    NCSS DOWN extended to accept a string operand.  This option is
      functionally equivalent to the LOCATE command.

8)    NCSS allows only a filename operand.  CMS optionally allows
      filetype and filemode.

9)    The NCSS GOTO command positions the editor to a specified line
      numbered relative to the first line in the file.  This number
      is not unique, but varies as lines are inserted and deleted.
      The CMS LINEMODE and nnnnn commands provide a superior
      capability.

10)   Three IMAGE options:
      ON - Backspaces and tabs used in algorithm to "expand"
           input line.
      OFF - Backspaces and tabs treated like any other character.
      CANON - Backspaces can be used to produce compound
              characters as in underlining.

11)   The CMS LINEMODE command allows line numbering on the left
      or right or no line numbering.  The user will be prompted with
      the line number in INPUT mode.  The line increment is set with
      the PROMPT command.

12)   CMS has capability to preserve and restore the editing en-
      vironment.  E.g., tab settings, verify mode, record format, etc.

13)   One of the uses of the NCSS PUT and PUTD commands was to move
      lines within a file.  This capability is provided by the CMS
      $MOVE Edit macro.

14)   NCSS SETBREAK defines a separator which allows storing multiple
      edit commands under the names X, Y, XX, and YY.  The correspond-
      ing capability isn't available in CMS.  It is a nice con-
      venience.

15)   CMS has generalized the NCSS Edit SETCHAR command.  The function
      is provided more generally as the set INPUT and set OUTPUT
      options of the CMS set command.

16)   Allows stacking lines in terminal input buffer.  Provides a
      powerful capability when used within an EDIT macro although 
      its application is unfortunately unclear in the IBM documenta-
      tion.

17)   CMS allows the user to specify the input truncation column
      while with the NCSS editor the truncation column is a fixed
      function of the filetype.

18)   NCSS extension to search "up" to a specified string.

19)   The NCSS and CMS ? commands are disimilar.  The CMS ? allows
      one to display the last edit command.  The NCSS ? requests
      typing of the complete edit diagnostic on the last command
      entered.  The NCSS "?I" option is provided via the CMS REUSE
      command.

20)   The CMS nnnnn command allows one to enter lines or search files
      by line number.  This can be an invaluable command for
      BASIC, COBOL or any other file in which the lines contain
      sequence numbers.

21)   The CMS Edit macro capability provides a very powerful exten-
      sion to the EDIT program.  Unfortunately, the IBM documentation
      is inadequate in its description.

22)   The VERIFY mode can be taggled for one command by appending a
      "." to the command name.  This is a very desirable NCSS
      feature.

23)   The $DUP EXEC and $MOVE EXEC are edit macros distributed as
      part of CMS.  They are used to duplicate and move lines within
      a file.
                        ATTACHMENT 2

1.  Introduction

     The CMS EDIT program is tightly coupled to the CMS monitor
through its intrinsic knowledge of record formats and tab stop
positions for various filetypes as well as through its use of the
CMS EXEC facility via edit macros.  These facilities indicate that
it will remain the primary CMS editor.  Within Tymshare the
importance of the editor requires no motivation and we therefore
simply propose the following EDIT enhancements which improve the
useability of CMS EDIT.

2.  Verification

     EDIT operates with verification on or off as specified by
the VERIFY command.  With VERIFY ON, lines which are located and/or
changed are typed out on the user's terminal.  VERIFY OFF suppresses
this verification.  It is useful to be able to reverse the verifica-
tion mode for a single command.  We propose that a command prefix
of "." reverse the verification setting for that command.  For 
example, assume that verification is ON and we wish to locate a line
containing SUBROUTINE, but without the typing of that line on our
terminal.  We simply enter,

          .L  /SUBROUTINE/

3.  Extension to UP subcommand

     The UP subcommand allows the current line pointer to be moved
"up"     lines.  We propose that the syntax be revised as follows,

          UP    [/string/ !1!n]

so that we can move up to a preceding line containing a given string.

     If this same extension were made to the DOWN command for
consistency, then the function of the down command becomes identical,
to the LOCATE function.  As an alternative to the UP and DOWN exten-
sions we might leave them as they are and introduce a suffix modifier
on the LOCATE command.  For example,

          LOCATE/UP    /string/

would search "UP" in the file rather than down.

4.  Extension to DELETE Subcommand

     Accept a string of characters as an argument and delete from
the current line through but not including, the line which 
contains the given string.  E.g.,

          DELETE   /END/

5.  Extension to LOCATE Subcommand

     Search for any one of several given strings.  E.g.,

          LOCATE   /string1/.../stringn/

6.  AFTER Subcommand

     This is a new subcommand supplemental to the CHANGE command
so that the string used to uniquely locate the position of an
insertion will not require retyping as in the CHANGE command.  For
example,

          AFTER   /ECA/F/

will change the line

          ACABCACCADCAECACA

to

          ACABCADCAECAFCA

7.  BEFORE Subcommand

     This is a new subcommand analogous to the AFTER subcommand
with the exception that the second string is to be inserted before
the first string.

8.  Short-Term Memory

     Considerable user convenience is added if EDIT will remember
the parameter strings of the commands which have string parameters.
In the existing EDIT program, these would be ALTER, CHANGE, FIND,
LOCATE, and OVERLAY.  Whenever one of these commands is typed with
no parameters, the previously specified parameter will be supplied.

To:  Norm Hardy

From:  Ken Jones

CC:

Subject:  COMPARISON OF CMS EXEC AND NCSS EXEC

     The two EXEC languages have a common ancestor and are very
similar as should be expected.  As usual, each version of the EXEC
language has unique features.  CMS has added some features which 
make the EXEC language more general and powerful while NCSS has 
added some desirable features of user convenience which do little
to enhance the general capabilities of the control language.

     CMS has added a gnereal assignment statement.  Similar capa-
bilities in NCSS EXEC are overly restrictive in both function and
syntax.  CMS has added built-in functions &CONCAT, &DATATYPE,
&LENGTH, &LITERAL, and &SUBSTR which provide interesting possibilities
in string manipulation.  The &READFLAG and &TYPEFLAG provide some
new opportunities for decision making in an EXEC procedure.  The
NCSS EXEC has several useful variables related to the virtual machine
environment:  &TOD, &USERID, &DATE, &ACENFO, &TERM, &MIOCNT, &SIOCNT,
and &CPU.

     The CMS EXEC is clearly superior to the NCSS EXEC although NCSS
provides several useful machine environment variables.  NCSS EXEC
procedures in general will not move directly to CMS with no conver-
sion.  Conversion problems in most cases will be non-existent or
trivial.  The two EXEC languages are compared in some detail in 
attachment 1.

                         ATTACHMENT 1

A comparison of NCSS EXEC and CMS EXEC Languages

Sources:  VP/CSS EXECUTIVE LANGUAGE (EXEC)
          Form 109                   May 1971

          IBM Virtual Machine Facility/370:
          Command Language User's Guide
          Release 1
          GC20-1804-0

Feature      NCSS   CMS                    Comment

                           CONTROL STATEMENTS

&ARGS         X      X
&BEGPUNCH            X
&BEGSTACK     X      X     CMS has a minor extension.
&BEGTYPE             X
&CONTINUE     X      X
&CONTROL             X
&ERROR        X      X
&EXIT         X      X
&IF           X      X
&GOTO         X      X     CMS extended to also GOTO a line number.
&LOOP         X      X     CMS extended to also LOOP until a condition
                           is satisfied.
&DO           X            Function is identical to &LOOP.
&PUNCH        X      X  
&READ         X      X     CMS extension to read values for variables
                           (VARS)
&SKIP         X      X
&SPACE        X      X
&STACK        X      X
&TIME         X      X     CMS extension
&TYPE                X     Terminal Output
&TYPE         X            NCSS function incorporated in CMS &CONTROL.
&PRINT       X            Corresponds to CMS &TYPE
&CONCAT              X     Concatenate tokens into a single token.
&DATATYPE            X     Determine data type of a token (NUM or CHAR).
&LENGTH              X     Determine the number of nonblank characters
                           in token.
&LITERAL             X     Use literal value of token without substitu-
                           tion for any EXEC variables appearing in it.

&SUBSTR              X     Extract that part of a token which starts
                           at character i with length j.

&0            X      X     
&1,&2..,E30   X      X
&INDEX        X      X
&INDEX1       X      X     &INDEX1,...,&INDEX9 are built in variable
                           in NCSS EXEC which assume only numeric values.
                           In CMS they are simply user specified variables.
                           The NCSS use is upwards compatible with CMS
                           except that the initial default value is
                           blank not 1.

&RETCODE             X     
&INDEX0       X            Functionally equivalent to CMS &RETCODE
&LINENUM      X      X     
&GLOBAL       X      X
&GLOBALi      X      X
&READFLAG            X     Value is CONSOLE or STACK.
&TYPEFLAG            X     Value is RT or HT.

&name         X      X

&TOD          X            Time of day
&USERID       X   
&DATE         X
&ACINFO       X            Accounting code
&TERM         X            Terminal type
&MIOCNT       X            Multiplexor channel SIO count
&SIOCNT       X            Selector channel SIO count
&CPU          X            CPU time since logon
*                    X     Comments start with *.
&COMMENT      X            Replaced with *.
&QUIT         X            Marginal value; didn't work in IBM CP67/CMS
                           releases.
&$            X      X
&*            X      X
%             X      X
"             X      X
'             X            Requirement for this feature is very very
                           marginal.

PROFILE       X      X     
PROTECT       X            A psuedo-security feature for mini-disk
                           attaching.

ASSIGNMENT           X     CMS allows assignment statements of a
                           general form.  Very much stronger than
                          NCSS EXEC here.
