        FIND %ADDID,%FNDID,%ADDSYN,%FNDSTG,%MODID,%LSTSYN,%DELID
        FIND %CREATE,%SETUP,%DELSYN,FCNVL1,FCNVL2,%READF2
        FIND %GARBAG,%REBULD
        LOCAL INPTR,I,%CSTG,LANG,BID,DUM,%RLANG,OFLAG,C1,C2,IFN
        LOCAL NENT,SID,TAB(0:199),PTAB(0:1999),%RLINE,SPTR1,SPTR2
        LOCAL FERR:,NFERR:,OPERR:,%INIT,%TRANS,K,%LIST,DIS:
        LOCAL FILNAM(0:100),%FLANG,%RONE,TFN,TFNF,%OUTM
        LOCAL XPTR,PTAB2(0:1999)

        DEF CVADD(X) AS BYT(X,18,0)+1

        TABLE LNG(0:2)["ENGLISH","SPANISH","FRENCH"]
        TABLE LV(0:2)[1,2,4]
        TABLE NLNG[2]
        TABLE COMS(0:13)["ADD ID","ADD SYN","MOD SYN","DEL ID", &
                "DEL SYN","TRANS","LIST","HELP","QUIT","CREATE", &
                "LIST ALL","BUILD","GARBAGE","REBUILD"]
        DEF NC AS 13

START:  OFLAG_TFNF_-1
        IOCS(1)
        MSG("DICTIONARY FILE: ")
        INPTR_RLINE(TEL)
        SPTR1_CHPT(FILNAM,-1)
        LOOP IF NCHV SPTR1_ NCHV INPTR = EOLIT THEN GO DIS

DIS:    IF TFNF#-1 THEN [CLOSE (TFN); TFNF_-1]
        PUT($+)

        INPTR_RLINE(TEL)
        FOR I_0 TO NC IF CSTG(CHPT(COMS(I),-1),INPTR) = 0 THEN DO
        DO I OF 0:NC
0:      INIT
        MSG("LANGUAGE: ")
        IF LANG_RLANG < 0 THEN GO ERR
        MSG("ID: ")
        ADDID(0,FERR,NFERR,CVADD(RLINE(TEL)),LANG,-1)

1:      INIT
        MSG("LANGUAGE: ")
        IF LANG_RLANG <0 THEN GO ERR
        MSG("FOR: ")
        BID_FNDID(0,FERR,NFERR,CVADD(RLINE(TEL)),@DUM,-1)
        MSG("SYN: ")
        ADDSYN(0,FERR,NFERR,CVADD(RLINE(TEL)),BID,LANG)

2:      INIT
        MSG("OLD SYN: ")
        [BID;SID]_DOUBLE FNDID(0,FERR,NFERR,CVADD(RLINE(TEL)),@DUM,-1)
        MSG("NEW LANGUAGE: ")
        IF LANG_RLANG <0 THEN GO ERR
        MSG("NEW SYN: ")
        MODID(0,FERR,NFERR,CVADD(RLINE(TEL)),BID,SID,LANG)

3:      INIT
        MSG("ID: ")
        BID_FNDID(0,FERR,NFERR,CVADD(RLINE(TEL)),@DUM,-1)
        DELID(0,FERR,NFERR,BID)

4:      INIT
        MSG("SYN: ")
        [BID;SID]_DOUBLE FNDID(0,FERR,NFERR,CVADD(RLINE(TEL)),@DUM,-1)
        IF DELSYN(0,FERR,NFERR,BID,SID,-1) # 0 THEN DO
        MSG("DELETE LAST SYN, OK? ")
        INPTR_GETLINE(TEL)
        IF NOT (CARRET # NCHV INPTR # $Y) THEN &
         DELSYN(0,FERR,NFERR,BID,SID,0) ELSE GO ERR
        END

5:      INIT
        TRANS

6:      INIT
        MSG("ID: ")
        BID_FNDID(0,FERR,NFERR,CVADD(RLINE(TEL)),@DUM,-1)
        LSTSYN(0,FERR,NFERR,BID,TAB,200,-1,-1,@NENT)
        LIST(TEL)
        GO DIS

7:      FOR I_ 0 TO NC DO
         PRINT(COMS(I))
         MSG("$")
        END

8:      IF OFLAG = -1 THEN EXIT
        CLOSE(IFN)
        OFLAG_-1
        EXIT

9:      IFN_OPEN(FILNAM,OUTPUT+DIRECT+WORD,OPERR)
        CREATE(0,FERR,NFERR,IFN,PTAB,-1,2000,200)
        OFLAG_0

10:     INIT
        MSG("TO FILE: ")
        TFN_OPEN(CVADD(RLINE(TEL)),OUTPUT+SEQUEN+CHARACTER,OPERR)
        TFNF_0
        I_0
        MSG("$")

        LOOP [ [BID;I]_DOUBLE READF2(0,FERR,NFERR,I,DIS); &
               LSTSYN(0,FERR,NFERR,BID,TAB,200,-1,-1,@NENT); &
               LIST(TFN); OUTM(TFN,"$")]

11:     INIT
        MSG("FROM FILE: ")
        TFN_OPEN(CVADD(RLINE(TEL)),INPUT+SEQUEN+CHARACTER,OPERR)
        TFNF_0
        SETRWE(TFN,DIS)
        XPTR_CHPT(TAB,-1)

        LOOP DO
          IF RONE = 0 THEN DO
            BID_ADDID(0,FERR,NFERR,TAB,LANG,-1)
            WHILE RONE =0 THEN ADDSYN(0,FERR,NFERR,TAB,BID,LANG)
          END
        END

12:     INIT
        MSG("TO FILE: ")
        TFN_OPEN(CVADD(RLINE(TEL)),OUTPUT+DIRECT+WORD,OPERR)
        TFNF_0
        CREATE(1,FERR,NFERR,TFN,PTAB2,-1,2000,200)
        GARBAG(0,FERR,NFERR,1)

13:     INIT
        MSG("TO FILE: ")
        TFN_OPEN(CVADD(RLINE(TEL)),OUTPUT+DIRECT+WORD,OPERR)
        TFNF_0
        CREATE(1,FERR,NFERR,TFN,PTAB2,-1,2000,200)
        REBULD(0,FERR,NFERR,1)

        END
        GO DIS
        END
ERR:    MSG("?$")
        GO DIS

FERR:   DO -FCNVL1 OF 1:16
1:      MSG("READ ERROR")
2:      MSG("CHECKSUM FAIL")
3:      MSG("BADDR1 FAIL")
4:      MSG("FN CHECK FAIL")
5:      MSG("BT CHECK FAIL")
6:      MSG("BAD VERSION NUMBER")
7:      MSG("BADDR2 CHECK FAIL")
8:      MSG("WRITE ERROR")
9:      MSG("BAD SYN STRING IN FILE ONE")
10:     MSG("BAD SYN ELEMENT")
11:     MSG("BAD DICT NUMBER")
12:     MSG("NEG. ADDRESS OR ADDRESS OVERFLOW")
13:     MSG("PARAMETER BLOCK IS TOO SMALL")
14:     MSG("UNDEFINED ERROR")
15:     MSG("BAD BDB DATA")
16:     MSG("BASIC ID DEFINED TWICE")
        END
        MSG("$")
        GO DIS
NFERR:  DO -FCNVL1 OF 100:109
100:    MSG("DICT NOT OPENED FOR OUTPUT")
101:    MSG("STRING TOO LONG")
102:    MSG("CANNOT FIND BASIC ID")
103:    MSG("CANNOT FIND SYN ID")
104:    MSG("STRING ALREADY DEFINED")
105:    MSG("HASH TABLE FULL")
106:    MSG("CANNOT SATISFY REQUIREMENTS")
107:    MSG("FATAL ERROR LAST TIME DICT OPENED FOR OUTPUT")
108:    MSG("CANNOT IDENTIFY STRING")
109:    MSG("BDB TOO SMALL")
        END
        MSG("$")
        GO DIS
OPERR:  MSG("ERROR OPENING FILE$")
        GO DIS

        %INIT
        IF OFLAG = 0 THEN RETURN
        IFN_OPEN(FILNAM,UPDATE+DIRECT+WORD,OPERR)
        DO SETUP(0,FERR,NFERR,IFN,PTAB,-1,2000) OF 0:2
0:        NULL
1:        MSG("SHOULD GARBAGE COLLECT DICTIONARY$")
2:        MSG("MUST GARBAGE COLLECT PRIOR TO ADDING NEW SYN ID$")
        END
        OFLAG_0
        RETURN
        END INIT

        %RLANG
        INPTR_RLINE(TEL)
        RETURN (FLANG)
        END RLANG

        %FLANG
        LOCAL TPTR,TBUFF(0:20),TV,SPTR,C1,I
        TV_0
        SPTR_CHPT(TBUFF,-1)

HERE1:  TPTR_SPTR

HERE2:  IF $A <= C1_NCHV INPTR <= $Z THEN [NCHV TPTR_C1; GO HERE2]
        NCHV TPTR_EOLIT


        FOR I_0 TO NLNG IF CSTG(CHPT(LNG(I),-1),SPTR) = 0 THEN GO HERE3
        RETURN (-1)
HERE3:  TV_TV BOR LV(I)
        IF C1 # EOLIT THEN GO HERE1 ELSE RETURN (TV)
        END FLANG

        %CSTG(IN,OUT)
        WHILE C1_NCHV IN#EOLIT THEN IF C1#C2_NCHV OUT THEN RETURN (-1)
        IF C2_NCHV OUT = EOLIT THEN RETURN (0)
        RETURN (-1)
        END CSTG

        %RLINE(FN)
        SPTR1_SPTR2_GETLINE(FN)
HERE:   IF C1_NCHV SPTR2#CARRET THEN GO HERE &
                ELSE [CHV SPTR2_EOLIT; RETURN (SPTR1)]
        END RLINE

        %TRANS
        LOCAL C1,TPTR,TBUFF(0:100),SPTR,SID
        MSG("INTO: ")
        IF LANG_RLANG < 0 THEN GO ERR

        MSG("SENTENCE: ")
        INPTR_RLINE(TEL)
        SPTR_CHPT(TBUFF,-1)

TR1:    C1_NCHV INPTR
TR2:    IF C1 = EOLIT THEN [MSG("$"); RETURN]
        IF $A <= C1 <= $Z THEN GO TR3
        PUT (C1)
        GO TR1

TR3:    TPTR_SPTR
        NCHV TPTR_C1

TR4:    IF $A <= C1_NCHV INPTR <= $Z THEN [NCHV TPTR_C1; GO TR4]
        NCHV TPTR_EOLIT

        BID_FNDID(0,FERR,NFERR,CVADD(SPTR),@DUM,-1)
        LSTSYN(0,FERR,NFERR,BID,@SID,1,-1,LANG,@DUM)
        PRINT(FNDSTG(0,FERR,NFERR,BID,BYT(SID,18,0),@DUM,@DUM,-1))
        GO TR2
        END TRANS

        %LIST(OFN)
        LOCAL I
         FOR I_0 TO NENT-1 DO
          OUTM(OFN,FNDSTG(0,FERR,NFERR,BID,BYT(TAB(I),18,0), &
           @DUM,@LANG,-1))
          OUTM(OFN," -")
          FOR K_0 TO NLNG IF (LANG BAND LV(K)) # 0 THEN &
           [OUTM(OFN," "); OUTM(OFN,LNG(K))]
          OUTM(OFN,"$")
         END
        RETURN
        END LIST

        %RONE
        LOCAL TPTR
        INPTR_RLINE(TFN); TPTR_XPTR
        LOOP WHILE EOLIT#NCHV TPTR_NCHV INPTR#$:
        IF CHV TPTR=EOLIT THEN RETURN (-1) ELSE CHV TPTR_EOLIT
        IF LANG_FLANG <0 THEN GO ERR ELSE RETURN (0)
        END RONE

        %OUTM(FN,ADDR)
        LOCAL PTR,C1
        PTR_CHPT(ADDR,-1)
        WHILE C1_NCHV PTR # EOLIT THEN &
          W(FN,IF C1=$$ THEN CARRET ELSE C1)
        RETURN
        END OUTM

\\->START
