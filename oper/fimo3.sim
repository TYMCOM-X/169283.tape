!13 MAR 73  FIMO3.SIM   OCCASIONAL INPUT ROUTINES FOR MODEM   *CW

LOCAL %SF
GLOBAL.PROC(T.IN.TEXT,H.T.IN.TEX)
GLOBAL.PROC(T.IN.FREE,H.T.IN.FREE)

DEF A.L.B AS 0 !***
DEF A.EQ.B AS 1 !***
DEF A.G.B AS 2  !***
DEF POS AS 1    !***
DEF NEG AS 0    !***

FIND OUT.H.Q
FIND WORKSPACE(0)
FIND MAX.LINE
FIND LOCAL.NAME

FIND CUR.I.C.B
FIND CUR.I.LINE
FIND CUR.I.VECTOR()
FIND CUR.CH.CNT
FIND CUR.CK.SM

FIND SEQ.NO.Q
FIND ACK.LIST
FIND OUT.Q

FIND %S.SP.AR
FIND %F.SP.AR
FIND %E.SP.AR
FIND %MSG   !***
FIND %Q.DELETE
FIND %FM.FR.INT
FIND %LN.OR.C.B
FIND %G.BUFFERLET
FIND %OUT.BUF
FIND %L.W.H.SEQ.NO
FIND %WORK.TO.BUF
FIND %FM.STRING
FIND %MAKE.DEL
FIND %R.R.C.B.NOT.H.T
FIND %OUT.RKD
FIND %S.LN.IN.R.C.B
FIND %INC.S.N
FIND %R.C.B.ADDR
FIND %R.C.B.SEND
FIND %R.C.B.SEQ.NO
FIND %R.C.B.LENGTH
FIND %R.C.B.HEAD
FIND %R.C.B.TEXT
FIND %R.C.B.CK.SM
FIND %LOCAL.Q
FIND %L.C.B.INCOMP.P
FIND %BUF.LENGTH
FIND %R.RCB
FIND %R.ELMT
FIND %BLD.C.B
FIND %L.W.H.ADDR
FIND %L.W.H.SEND
FIND %L.W.H.CK.SM
FIND %R.C.B.F.SW.P
FIND %APP.CH
FIND %APP.LIST
FIND %C.B.CK.SM
FIND %F.CB.ON.Q
FIND %Q.POP
FIND %L.C.B.SEQ.NO
FIND %IS.RCB
FIND %POST.OUT
FIND %P.R.LIST
FIND %L.C.B.HEAD
FIND %COMP.SEQ.NUM
FIND %P.APPEND.LIST
!BRANCH VECTORS (CODED)
!TABLE FIRST (0:10) [NIL,XOFF.PROC,3(I.IN.FREE.DO.FREE),I.N.D.R,&
                    5(I.IN.FREE.DO.FREE)]
TABLE FIRST (0:0) ['5Q333233333']

!
PROC(T.IN.TEXT,H.T.IN.TEX,'T.IN.TEX',)  !TERM INPUT OF TEXT
!#########
LOCAL %TEND.ACK,  %TEND.GOOD.IN
LOCAL ADDRESSEE, SENDER, SEQ.NUM, LENGTH,  HEAD,  TEXT,  CK.SM

!INIT THESE VARIABLES
ADDRESSEE _ R.C.B.ADDR(CUR.I.C.B)
SENDER _ R.C.B.SEND(CUR.I.C.B)
SEQ.NUM _ R.C.B.SEQ.NO(CUR.I.C.B)
LENGTH _ R.C.B.LENGTH(CUR.I.C.B)
HEAD _ R.C.B.HEAD(CUR.I.C.B)
TEXT _ R.C.B.TEXT(CUR.I.C.B)
CK.SM _ R.C.B.CK.SM(CUR.I.C.B)

IF NOT LOCAL.Q(ADDRESSEE) &
 THEN &
  DO
  L.C.B.INCOMP.P(CUR.I.C.B,FALSE)
  CUR.I.C.B _ E.O.L
  RETURN(SF)
  END
IF LENGTH # 0 &
 THEN &
  DO
  IF CUR.CH.CNT # LENGTH THEN RETURN(T.IN.FREE)
  END
IF CK.SM # 0 &
 THEN &
  DO
  IF CK.SM # CUR.CK.SM THEN RETURN(T.IN.FREE)
  END
IF SEQ.NUM BAND OCT 100 &
 THEN &
  DO            !WE HAVE AN ACKNOWLEDGEMENT
  IF (NOT ADDRESSEE BAND 200) AND BUF.LENGTH(TEXT)#0 &
   THEN RETURN(T.IN.FREE) &
   ELSE RETURN(TEND.ACK)
  END
RETURN(TEND.GOOD.IN)
                        !BLOCK ENDS AFTER ASSOC PROC


%TEND.ACK               !TEND TO + AND - ACKNOWLEDGEMENTS
!########
LOCAL %TEND.P.ACK,  %TEND.N.ACK,  %IGNORE,  LAST.S.N
                !FIND LAST S.N SENT TO THIS GUY
LAST.S.N _ F.SP.AR(2,SEQ.NO.Q,ADDRESSEE,SENDER)
                !IDENTIFY THE VARIOUS CASES
IF (SEQ.NUM BAND OCT 200) = POS &
 THEN RETURN(TEND.P.ACK) &
 ELSE RETURN(TEND.N.ACK)
                !BLOCK ENDS AFTER ASSOCIATED ROUTINES


%TEND.P.ACK             !TEND TO + ACKNOWLEDGEMENTS
!##########
LOCAL LAST.OUT,  LAST.ACK,  %PURGE
                        !FIND LAST P.ACK FROM THIS GUY
LAST.ACK _ F.SP.AR(2,ACK.LIST,ADDRESSEE,SENDER)

IF COMP.SEQ.NUM(SEQ.NUM,LAST.ACK,LAST.S.N) # A.L.B &
 THEN RETURN(IGNORE)     !WE HAVE ALREADY TENDED TO ONE OF THESE

!WHAT WAS THE LAST RECORD WE SENT TO THIS GUY?
LAST.OUT _ F.SP.AR(2,SEQ.NO.Q,ADDRESSEE,SENDER)

!IGNORE A P.ACK GREATER THAN OUR LAST OUT RECORD
IF COMP.SEQ.NUM(SEQ.NUM,LAST.OUT,LAST.S.N) = A.G.B &
 THEN RETURN(IGNORE)

!THERE SHOULD BE ONE OR MORE RECORDS IN THE OUTPUT MECHANISM
!SOMEWHERE,  DELETE THEM.
RETURN(PURGE)
                        !BLOCK ENDS DOWN BELOW


%IGNORE                 !GET OUT
!######
R.R.C.B(CUR.I.C.B)               !GARBAGE COLLECT THE ACK RKD
CUR.I.C.B _ E.O.L                 !REMOVE FROM THE LINE
RETURN(TRUE)
END IGNORE


%PURGE                  !ZAP A BATCH OF RECORDS BEING HELD
!#####
LOCAL THIS.S.N,  %PURGE.IT

!ITERATE OVER ALL RECORDS FROM INC.S.N(LAST.S.N) TO <SEQ.NUM>,
!TRACK EACH ONE DOWN AND ELIDE IT OR SET IT TO BE ELIDED WHEN
!OUTPUT IN PROGRESS IS FINISHED.
THIS.S.N _ LAST.S.N
WHILE COMP.SEQ.NUM(THIS.S.N _ INC.S.N(THIS.S.N),SEQ.NUM,LAST.S.N) &
 # A.G.B THEN PURGE.IT

S.SP.AR(2,ACK.LIST,SEQ.NUM,ADDRESSEE,SENDER)   !NOTE LAST P.ACK

RETURN(TRUE)
                        !BLOCK ENDS DOWN BELOW


%PURGE.IT               !PURGE JUST ONE RKD
!########
!PURGE THE RECORD SOMEWHERE IN THE OUTPUT MECHANISM,
!WHICH IS TO <SENDER>, FROM <ADDRESSEE>, WITH SEQUENCE NUMBER
!<THIS.S.N>.  MAY BE IN OUT HOLD Q.
!THIS MAY ALSO BE ON OUT.Q, OR TAGGED ON TO SOME OUT LINE.

LOCAL %F.C.B.ON.OUT.LINES      !FIND R.C.B ON OUT LINE
LOCAL OLD.LIST, OLD.Q,  C.B
!SEARCH OUT HOLD Q FIRST
IF C.B _ E.SP.AR(3,OUT.H.Q,0,SENDER,ADDRESSEE,THIS.S.N) = 0 &
 THEN &
  DO    !NOT FOUND IN OUT HOLD Q
                !TRY OUT.Q
  OLD.Q _ E.O.L
  IF C.B _ F.C.B.ON.Q(OUT.Q,SENDER,ADDRESSEE,THIS.S.N,@OLD.Q) &
   THEN &
    DO          !FOUND ON OUT.Q
    IF OLD.Q = E.O.L &
     THEN Q.POP(OUT.Q)    !FIRST.EL OF Q! &
     ELSE Q.DELETE(OLD.Q)
    END &
   ELSE &
    DO          !LAST CHANCE, TRY OUTPUT LINES
    IF C.B _ F.C.B.ON.OUT.LINES(SENDER,ADDRESSEE,THIS.S.N) &
     THEN &
      DO                !FOUND ON LINE.  MARK FOR EVENTUAL DISPOSAL
      L.C.B.SEQ.NO(C.B,0)
      RETURN
      END &
     ELSE RETURN                !OH,WELL
    END
  END
R.R.C.B(C.B)            !GARBAGE COLLECT RCB, ETC
RETURN
                        !BLOCK ENDS DOWN BELOW


%F.C.B.ON.OUT.LINES(ADDRESSEE,SENDER,S.N)
!##################
!SEARCHES OUTPUT LINES R.C.B-S FOR A MATCH.
!WILL RETURN FALSE IF NOT FOUND; ELSE PTR TO R.C.B
LOCAL LINE, C.B
LINE _ 0
WHILE INC LINE <= MAX.LINE &
 THEN &
  DO            !FOR EACH LINE
  IF IS.R.C.B(C.B _ LN.O.R.C.B(LINE),ADDRESSEE,SENDER,S.N) &
   THEN RETURN(C.B)
  END

!NOT FOUND
RETURN(FALSE)
END F.C.B.ON.OUT.LINES
END PURGE.IT
END PURGE
END TEND.P.ACK


%TEND.N.ACK             !TEND TO - ACKNOWLEDGEMENT
!##########
!WE WILL BE SATISFIED TO SEARCH THE OUT HOLD QUEUE FOR THE RECORD.
!IF FOUND, THEN WE WILL POST IT TO THE OUTPUT QUEUE;
!ELSE WE ASSUME IT TO BE ON THE WAY OUT.

LOCAL C.B
IF C.B _ E.SP.AR(3,OUT.H.Q,0,SENDER,ADDRESSEE,LAST.S.N) # 0 &
 THEN &
  DO            !FOUND ON OUT HOLD Q
  POST.OUT(C.B)           !POST FOR OUTPUT
  END
RETURN(IGNORE)          !SCAVENGE CUR.I.C.B
END TEND.N.ACK
END TEND.ACK


%TEND.GOOD.IN           !TEND TO GOOD INPUT RECORD
!############
LOCAL P.ACK.NUM,  %ACCEPT,  %DISCARD,  %HOLD,  %P.ACK,  %N.ACK
LOCAL %T.G.I.1,  LAST.S.N
CUR.I.VECTOR _ FIRST
!GARBAGE COLLECT HEAD
P.R.LIST(HEAD)
HEAD _ L.C.B.HEAD(CUR.I.C.B,E.O.L)

IF NOT (SEQ.NUM BAND OCT 200) &
 THEN RETURN(T.G.I.1)   !NO SEQUENCE NUMBER; EASY CASE
                        !WORRY ABOUT SEQUENCE NUMBER
SEQ.NUM _ SEQ.NUM BAND OCT 77    !GET RID OF FLAG BIT
LAST.S.N _ F.SP.AR(2,SEQ.NO.Q,SENDER,ADDRESSEE)
DO COMP.SEQ.NUM(SEQ.NUM,INC.S.N(LAST.S.N),LAST.S.N) OF 0:2
A.L.B:  RETURN(DISCARD) !WE ALREADY HAVE THIS RECORD
A.EQ.B: RETURN(ACCEPT)  !THIS IS THE ONE WE EXPECTED
A.G.B:  RETURN(HOLD)    !A FUTURE ONE; HOLD FOR LATER USE
END
                        !BLOCK ENDS AFTER ASSOC ROUTINES


%ACCEPT         !ACCEPT A NET DATA RECORD
!######
!WE ARE GOING TO ACCEPT THE CURRENT RECORD, AT LEAST.
!PERHAPS WE CAN ACCEPT SOME FROM THE HOLD, ALSO.
LOCAL %S.ACC.1
MSG('$ACCEPT')
S.ACC.1                !ACCEPT THIS ONE
WHILE CUR.I.C.B _ E.SP.AR(3,OUT.H.Q,0,SENDER,ADDRESSEE, &
              SEQ.NUM _ INC.S.N(LAST.S.N)) # 0 &
 THEN &
  DO            !ACCEPT THIS ONE
  S.ACC.1
  END
P.ACK(P.ACK.NUM)
RETURN(TRUE)


%S.ACC.1
!########
!ACCEPT THE CONTROL BLOCK POSTED IN CUR.I.C.B
LAST.S.N _ P.ACK.NUM _ SEQ.NUM    !POST SEQ.NUM FOR LATER P.ACK
                        !AND AS LAST ONE ACCEPTED
S.SP.AR(2,SEQ.NO.Q,SEQ.NUM,SENDER,ADDRESSEE) !NOTE THIS ONE ACCEPTED
RETURN(T.G.I.1)             !POST TO APPROPRIATE QUEUE
END S.ACC.1
END ACCEPT


%T.G.I.1
!#######
P.APPEND.LIST(LOCAL.Q(ADDRESSEE),CUR.I.C.B);RETURN(TRUE)
END T.G.I.1


%DISCARD                !DISCARD AN IN-RECORD
!#######
!RECORD PTR IS IN CUR.I.C.B
!RECORD SEQUENCE NUMBER IS IN SEQ.NUM
MSG('$DISCARD')
R.R.C.B(CUR.I.C.B)              !GARBAGE COLLECT
P.ACK(LAST.S.N)      !SEND POSITIVE ACKNOWLEDGEMENT
RETURN(TRUE)
END DISCARD


%HOLD
!####
!WE HAVE AN OUT-OF-SEQUENCE RECORD
!THE SEQUENCE NUMBER IS IN THE RANGE EXPECTED IN THE FUTURE
!WE WILL HOLD IT IN THE HOLD QUEUE (ARRAY).
!IF WE ALREADY HAVE A COPY OF THIS RECORD, THEN WE DISCARD IT.
!WE SEND A NEGATIVE ACKNOWLEDGEMENT FOR THE RECORDS WHICH SHOULD
!HAVE PRECEDED THIS ONE, AND WHICH HAVE NOT BEEN RECEIVED OR
!NEGATIVELY ACKNOWLEDGED RECENTLY.
!THE LAST SEQUENCE NUMBER ACCEPTED IS POSTED BY TEND.GOOD.IN,
!AS IS SENDER, ADDRESSEE, SEQ.NUM, AND CUR.I.C.B
LOCAL LARGEST.S.N,  RUN.S.N,  THIS.S.N

MSG('$HOLD')   !***
THIS.S.N _ SEQ.NUM BAND OCT 77
!FIND LARGEST ENTRY IN HOLD Q
RUN.S.N _ LARGEST.S.N _ LAST.S.N
REPEAT 32 &
 DO
 IF F.SP.AR(3,OUT.H.Q,SENDER,ADDRESSEE,RUN.S.N _ INC.S.N(RUN.S.N))#0&
  THEN &
   DO
   LARGEST.S.N _ RUN.S.N
   END
 END

!GENERATE N.ACKS
!TWO CASES: THIS.S.N <= LARGEST.S.N; THIS.S.N > LARGEST.S.N
IF COMP.SEQ.NUM(THIS.S.N,LARGEST.S.N,LAST.S.N)=A.G.B &
 THEN &
  DO            !THIS.S.N > LARGEST.S.N
  RUN.S.N _ LARGEST.S.N
  END &
 ELSE &
  DO            !THIS.S.N <= LARGEST.S.N
  RUN.S.N _ LAST.S.N
  END
!N.ACK THOSE RECORDS FROM INC.S.N(RUN.S.N) THRU DEC.S.N(THIS.S.N)
!WHICH WE DON'T HAVE YET
WHILE RUN.S.N _ INC.S.N(RUN.S.N) # THIS.S.N &
 THEN &
  DO
  IF F.SP.AR(3,OUT.H.Q,SENDER,ADDRESSEE,RUN.S.N) = 0 &
   THEN &
    DO
    N.ACK(RUN.S.N)
    END
  END

IF F.SP.AR(3,OUT.H.Q,SENDER,ADDRESSEE,THIS.S.N) # 0 &
 THEN &
  DO            !WE ALREADY HAVE A COPY OF THIS ONE
  R.R.C.B(CUR.I.C.B)     !DISCARD IT
  END &
 ELSE &
  DO            !HOLD THIS ONE
  S.SP.AR(3,OUT.H.Q,CUR.I.C.B,SENDER,ADDRESSEE,THIS.S.N)
  END
RETURN
END HOLD


%P.ACK(N)               !SEND A POSITIVE ACKNOWLEDGEMENT
!#####
!INPUT: NUMBER OF RECORD TO P.ACK
!VALUE: NONE
!ORIGINAL SENDER OF MESSAGE IS IN <SENDER>
!ORIGINAL ADDRESSEE IS IN <ADDRESSEE>
LOCAL %SUB.ACK
MSG('$P.ACK ')   !***
SUB.ACK(SENDER,ADDRESSEE,N,POS)
RETURN


%N.ACK(N)               !SEND A NEGATIVE ACKNOWLEDGEMENT
!#####
!INPUT: NUMBER OF RECORD TO ACKNOWLEDGE
!VALUE: NONE
MSG('$N.ACK ')  !***
SUB.ACK(SENDER,ADDRESSEE,N,NEG)
RETURN
END N.ACK


%SUB.ACK(ADDRESSEE,SENDER,SEQ.NO,TYPE)  !SEND AN ACKNOWLEDGEMENT
!#######
LOCAL ACK.C.B
LOCAL TEMP   !***
TEMP _ G.BUFFERLET   !***
OUT.BUF(0,FM.FR.INT(TEMP,SEQ.NO))   !***
R.ELMT(TEMP)   !***
MSG('$')   !***
                        !OBTAIN A RECORD CONTROL BLOCK FOR THE ACK
ACK.C.B _ BLD.C.B(E.O.L,ADDRESSEE,SENDER,FALSE)
                        !CONSTRUCT THE HEADER
                        !LAY IT OUT IN THE WORKSPACE FIRST
WORK.NUM.CHARS _ 6
L.W.H.ADDR(ADDRESSEE)
L.W.H.SEND(SENDER)
L.W.H.SEQ.NO( (SEQ.NO BAND OCT 77) + OCT 100 !ACK BIT! + (TYPE SHL 7))
                        !LENGTH IS NIL
LOCAL TEMP1
TEMP1 _ C.B.CK.SM(ACK.C.B)
L.W.H.CKSM(1,BYT(TEMP1,8,16))
L.W.H.CKSM(2,BYT(TEMP1,8,8))
L.W.H.CKSM(3,BYT(TEMP1,8,0))
!MAKE A BUFFERLET STRING FROM HEADER AND POST TO CONTROL BLOCK
L.C.B.HEAD(ACK.C.B,WORK.TO.BUF(E.O.L))
                !POST TO OUTPUT QUEUE FOR TRANSMISSION
POST.OUT(ACK.C.B)
RETURN
END SUB.ACK
END P.ACK
END TEND.GOOD.IN
END.PROC(T.IN.TEXT,H.T.IN.TEXT)



PROC(T.IN.FREE,H.T.IN.FREE,'T.IN.FREE',)  !TERM INPUT OF FREE TEXT
!#########                       ALSO USED FOR TERM OF SYNC
LOCAL BUF,  OUT.STR,  HEAD, TEXT
IF NOT R.C.B.F.SW.P(CUR.I.C.B) &
 THEN &
  DO            !NOT BEING FORWARD SWITCHED.
                !SEND THIS MESS TO MASTER
                !GATHER TOGETHER THE BITS AND PIECES OF INPUT
  BUF _ E.O.L
  IF HEAD _ R.C.B.HEAD(CUR.I.C.B) # E.O.L &
   THEN &
    DO          !THERE EXISTS A HEAD
    BUF _ APP.CH(BUF,XSOH)  !THERE MUST HAVE BEEN AN XSOH
    APP.LIST(BUF,HEAD)
    IF R.C.B.TEXT(CUR.I.C.B) # E.O.L &
     THEN APP.CH(BUF,XSTX)  !WE MUST HAVE HAD AN XSTX
    END
  IF TEXT _ R.C.B.TEXT(CUR.I.C.B) # E.O.L &
   THEN BUF _ APP.LIST(BUF,TEXT) !TAG ON ANY TEXT
                !MAKE OUTPUT STRING
  OUT.STR _ FM.STRING(E.O.L,CHPT('RTEXT '))
  MAKE.DEL(OUT.STR,BUF)
                !GARBAGE COLLECT
  R.RCB.NOT.H.T(CUR.I.C.B)
                !SEND TO MASTER
  OUT.RKD(OUT.STR,0,LOCAL.NAME BOR OCT 200,TRUE,TRUE)
  END &
 ELSE L.C.B.INCOMP.P(CUR.I.C.B,FALSE) !MARK COMPLETE
S.LN.IN.R.C.B(CUR.I.LINE,E.O.L)
RETURN(SF)
END.PROC(T.IN.FREE,H.T.IN.FREE)



%SF                     !SET FIRST
!##
CUR.I.VECTOR _ FIRST;RETURN(TRUE)
END SF
 