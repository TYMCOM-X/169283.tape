      SUBROUTINE OUTPUT
C
C DECLARATION STATEMENTS
C
      REAL J,JS,K,KT,J1,KF,M1,M2,MS,MU,MUZERO,N,NS,L,MAXAX,MLOCAL
      REAL MAPBX,MAPBY
      INTEGER R,W
      COMMON /PAGE/ NP,HEAD
      COMMON /KEY/ KEY,KAXLE,KROAD
      COMMON /MAPB/ KMAPB,NOMAPB,MAPBX,MAPBY
      COMMON /SAFB/ KSAFB,ONTIME,TMAX,RISET
      COMMON /PAR/ AA1,AA2,AA3,AA4,AA5,AA6,AA7,AA8,AA9,AA10,AA11,AA12,
     1  AA13,AA14,AA15,AA16,A1,A2,A3,A4,ALPHA,BB,C,CF,CS,D,D1,DELTA,FA,
     2  J,J1,JS,K,KF,KT,MUZERO,PERCNT,PW,PJ,PX,PZ,W1,W2,WS,M1,M2,MS,PM
      COMMON /BLOCK1/ R,W
      COMMON /BLOCK2/ XPRINT,XDOT,FX,SZERO,SLOPE,MLOCAL,XDD
      COMMON /BLOCK3/ ICOUNT,NOGEAR,GEARV,GRAT,NUMEB,EBX,EBY,EBPER,
     1  EMINUS
      COMMON /BLOCK5/ N,SLIP,XLAM,MU,SLO,TT,OMEGAD,L
      COMMON /BLOCK6/ TQ,XX,YY,NUM
      COMMON /BLOCK7/ NS,SF,P,POLD,T,PROP,RR
      COMMON /BLOCK8/ KPROP,MAXAX,EMPTY
      COMMON /BLOCK9/ V,VS,H
      DIMENSION WS(5)
      DIMENSION AC(5)
      DIMENSION Y(20),DERY(20),PRMT(5),AUX(16,20)
      DIMENSION KEY(2),PERCNT(2)
      DIMENSION MAPBX(5),MAPBY(5)
      DIMENSION TMAX(5),HEAD(20)
      DIMENSION ALPHA(3),C(6),CF(3),CS(5),DELTA(3),FA(5),JS(5),K(3),
     1  KT(5),MUZERO(5),MS(5)
      DIMENSION FX(5),SZERO(5),SLOPE(5),MLOCAL(5)
      DIMENSION GEARV(10),GRAT(10),EBX(5),EBY(5)
      DIMENSION N(5),SLIP(5),MU(5),SLO(5),TT(5),OMEGAD(5),L(5),XLAM(5)
      DIMENSION XX(225),YY(225),NUM(9),TQ(5,2)
      DIMENSION NS(5),SF(5),P(5),POLD(5),T(5),PROP(5),RR(5)
      DIMENSION MAXAX(5),EMPTY(5)
      DIMENSION PRINT(10,12,45)
  200 FORMAT('1',T51,'HSRI DYNAMIC VEHICLE SIMULATION'//T26,20A4//T60,
     1  'PAGE ',F5.2//)
C
C READ TIME INCREMENT
C
      READ (R,1000) TINC
 1000 FORMAT(F14.4)
      WRITE (W,146) TINC
  146 FORMAT(//'0TIME INCREMENT TO BE PRINTED OUT IS',F5.2)
C
C INITIALIZE CONSTANTS
C
      KEY1 = KEY(1) + 1
      KEY2 = KEY(2) + 1
      RADIAN = 57.295779
      CFACT=60./(3.1415926*2.0)
C
C INITIALIZE VARIABLES
C
      PAGE = NP
      DO 5 I=1,KAXLE
      POLD(I) = 0.0
    5 SLOPE(I) = CS(I)/NS(I)
      IF(KAXLE.EQ.5) GO TO 508
      IJ=KAXLE+1
      DO 509 I=IJ,5
      SLIP(I) = 0.0
      FX(I) = 0.0
      P(I) = 0.0
  509 T(I) = 0.0
  508 CONTINUE
      SLIP(2) = 0.0
      RR(2) = ALPHA(2)
      LINE = 0
      STEP = 0.0
C
C OPTION 6
C DO INITIZATIONS IN BRAKE SUBROUTINE
C
      IF(NUM(2).LT.0) CALL BINIT(KAXLE)
C
C RETURN TO MAIN AND BEGIN SIMULATION
C
      WRITE (W,100)
  100 FORMAT('0 *** BEGIN OUTPUT ***')
      RETURN
C
C ENTER OUTP, CALLED FROM HPCG
C
C
C ENTER OUTP, CALLED FROM HPCG
      ENTRY OUTP(X,Y,DERY,IHLF,NDIM,PRMT)
C
C CHECK IHLF  ...EXIT FROM HPCG IF HPCG HAS HALVED THE TIME STEP MORE
C THAN ONCE
C
      IF(IHLF.GT.2) PRMT(5) = 1.0
C
C UPDATE NECESSARY VARIABLES
C
      XPRINT = X
      XDD = DERY(6)
      XDOT = Y(6)
      DO 10 I=1,KAXLE
      POLD(I) = P(I)
      SLOPE(I) = SLO(I)
      MLOCAL(I) = MU(I)
   10 SZERO(I) = SLIP(I)
C
C CALCULATE AC(I),I=1,KAXLE
C
      AC(1) = DERY(8)
      IJ=3
      GO TO (500,501,502),KEY1
  500 IJ=2
      AC(2) = DERY(10)
      GO TO 503
  501 AC(2) = (-AA1*DERY(12) + DERY(10))
      AC(3) = (AA2*DERY(12) + DERY(10))
      GO TO 503
  502 AC(2) = DERY(10)
      AC(3) = DERY(12)
  503 GO TO (504,505,506),KEY2
  504 AC(IJ+1) = DERY(18)
      GO TO 507
  505 AC(IJ+1) = (-AA9*DERY(20) + DERY(18))
      AC(IJ+2) = (AA10*DERY(20) + DERY(18))
      GO TO 507
  506 AC(IJ+1) = DERY(18)
      AC(IJ+2) = DERY(20)
  507 CONTINUE
C
C RETURN IF Y(6) (VELOCITY) IS GREATER THAN OR EQUAL TO 0.0001 AND
C IF STEP IS GREATER THAN X (TIME)
C OTHERWISE WRITE INTO NEXT LINE OF OUTPUT BUFFER
C
      IF(Y(6).LT.0.0001) GO TO 15
      IF(STEP.GT.X) RETURN
   15 LINE = LINE + 1
      STEP = STEP + TINC
      DO 20 I=1,10
   20 PRINT(I,1,LINE) = X
      PRINT(1,2,LINE) = Y(1)*12.
      PRINT(1,3,LINE) = Y(3)*RADIAN
      PRINT(1,4,LINE) = Y(13)*12.
      PRINT(1,5,LINE) = Y(15)*RADIAN
      PRINT(1,6,LINE) = Y(5)
      PRINT(1,7,LINE) = Y(6)
      PRINT(1,8,LINE) = DERY(6)
      SUM = 0.0
      DO 30 I=1,5
      SUM = SUM + FX(I)
      PRINT(2,I+1,LINE) = SLIP(I)
      PRINT(2,I+6,LINE) = FX(I)
      IF(N(I).EQ.0.0) N(I) = 1.0
   30 CONTINUE
      IF(SUM.EQ.0.0) SUM = 1.0
      DO 35 I=1,KAXLE
      PRINT(I+2,2,LINE) = TT(I)*12.
      PRINT(I+2,3,LINE) = MS(I)*AC(I) - WS(I) + N(I)
      PRINT(I+2,4,LINE) = SLIP(I)
      PRINT(I+2,5,LINE) = OMEGAD(I)
      PRINT(I+2,6,LINE) = FX(I)
      PRINT(I+2,7,LINE) = ABS(FX(I)/N(I))
      PRINT(I+2,8,LINE) = 100.*(FX(I)/SUM)
   35 CONTINUE
      PRINT(8,2,LINE) = Y(1)*12.
      PRINT(8,3,LINE) = Y(2)*12.
      PRINT(8,4,LINE) = DERY(2)*12.
      PRINT(8,5,LINE) = Y(13)*12.
      PRINT(8,6,LINE) = Y(14)*12.
      PRINT(8,7,LINE) = DERY(14)*12.
      PRINT(8,8,LINE) = V + VS
      PRINT(8,9,LINE) = H
      PRINT(9,2,LINE) = Y(3)
      PRINT(9,3,LINE) = Y(4)
      PRINT(9,4,LINE) = DERY(4)
      PRINT(9,5,LINE) = Y(15)
      PRINT(9,6,LINE) = Y(16)
      PRINT(9,7,LINE) = DERY(16)
      CALL TABLE(1,NUMB,XX,YY,X,Q)
      PRINT(10,2,LINE) = Q
      DO 40 I=1,5
      PRINT(10,2*I+1,LINE) = P(I)
   40 PRINT(10,2*I+2,LINE) = T(I)*12.
C
C IF VELOCITY IS LESS THAN 0.0001 SET PRMT(5)=1.0, DUMP OUTPUT BUFFER,
C AND END SIMULATION
C
      IF(Y(6).LE.0.0) GO TO 45
C
C IF LINE = 45 DUMP OUTPUT BUFFER, OTHERWISE RETURN AND CONTINUE
C SIMULATION
C
      IF(LINE.LT.45) RETURN
      GO TO 50
   45 PRMT(5) = 1.0
      GO TO 50
      ENTRY OUTP1
   50 PAG = PAGE
      WRITE (W,200) HEAD,PAG
      WRITE (W,8000)
      WRITE (W,8001) ((PRINT(1,JJ,KK),JJ=1,8),KK=1,LINE)
      PAG=PAG+0.01
      WRITE (W,200) HEAD,PAG
      WRITE (W,8003)
      WRITE (W,8002) ((PRINT(2,JJ,KK),JJ=1,11),KK=1,LINE)
      PAG = PAG+0.01
      I=0
      DO 55 JAXLE=1,KAXLE
      I=I+1
      WRITE (W,200) HEAD,PAG
      GO TO (111,112,113,114,115), I
  111 WRITE (W,8004)
      GO TO 152
  112 IF(KEY(1).GT.0) GO TO 8400
      WRITE (W,8005)
      I=I+1
      GO TO 152
 8400 WRITE (W,8006)
      GO TO 152
  113 WRITE (W,8007)
      GO TO 152
  114 IF(KEY(2).GT.0) GO TO 8401
      WRITE (W,8008) JAXLE
      GO TO 152
 8401 WRITE (W,8009) JAXLE
      GO TO 152
  115 WRITE (W,8010) JAXLE
  152 WRITE (W,8011)
      WRITE (W,8001) ((PRINT(JAXLE+2,JJ,KK),JJ=1,8),KK=1,LINE)
      PAG = PAG + 0.01
   55 CONTINUE
      DO 8450 I=8,10
      WRITE (W,200) HEAD,PAG
      IPAG = I - 7
      GO TO (8451,8452,8453), IPAG
 8451 WRITE (W,8012)
      WRITE (W,8017) ((PRINT(I,JJ,KK),JJ=1,9),KK=1,LINE)
      GO TO 8450
 8452 WRITE (W,8014)
      WRITE (W,8013) ((PRINT(I,JJ,KK),JJ=1,7),KK=1,LINE)
      GO TO 8450
 8453 WRITE (W,8016)
      WRITE (W,8015) ((PRINT(I,JJ,KK),JJ=1,12),KK=1,LINE)
 8450 PAG=PAG+0.01
      LINE=0
      PAGE=PAGE+1.0
      RETURN
C
C FORMATS
C
 8000 FORMAT(T13,'TIME',T26,'TRACTOR',T42,'TRACTOR',T56,'TRAILER',T71,
     1  'TRAILER',T84,'LONGITUDINAL',T99,'LONGITUDINAL',T114,
     2  'LONGITUDINAL'/T13,'(SEC)',T26,'BOUNCE',T43,'PITCH',T56,'BOUNCE'
     3  ,T72,'PITCH',T86,'POSITION',T101,'VELOCITY',T114,'ACCELERATION'/
     4  T27,'(IN)',T43,'(DEG)',T57,'(IN)',T72,'(DEG)',T88,'(FT)',T101,
     5  '(FT/SEC)',T114,'(FT/SEC**2)'/)
 8001 FORMAT(45(7X,F10.2,7(5X,F10.3)/))
 8002 FORMAT(45(4X,F6.2,5F11.3,5F13.2/))
 8003 FORMAT(T6,'TIME',T39,'SLIP',T99,'FX'/T6,'(SEC)',T16,'----------',
     1  '----------------------------------------',5X,'----------',
     2  '------------------------------------------------'/T16,'AXLE 1',
     3  T27,'AXLE 2',T38,'AXLE 3',T49,'AXLE 4',T60,'AXLE 5',T71,'AXLE 1'
     4  ,T84,'AXLE 2',T97,'AXLE 3',T110,'AXLE 4',T123,'AXLE 5'/)
 8004 FORMAT(T54,'TRACTOR FRONT AXLE (AXLE 1)'/)
 8005 FORMAT(T54,'TRACTOR REAR AXLE (AXLE 2)'/)
 8006 FORMAT(T51,'TRACTOR FRONT TANDEM AXLE (AXLE 2)'/)
 8007 FORMAT(T51,'TRACTOR REAR TANDEM AXLE (AXLE 3)'/)
 8008 FORMAT(T57,'TRAILER AXLE (AXLE',I2,')'/)
 8009 FORMAT(T51,'TRAILER FRONT TANDEM AXLE (AXLE',I2,')'/)
 8010 FORMAT(T51,'TRAILER REAR TANDEM AXLE (AXLE',I2,')'/)
 8011 FORMAT(T13,'TIME',T28,'TT',T38,'VERTICAL LOAD',T58,'WHEEL',T69,
     1  'WHEEL ANG.',T87,'FX',T100,'ABS(FX)/FZ',T115,'% BRAKING'/T13,
     2  '(SEC)',T25,'(IN*LBS)',T41,'ON AXLE',T58,'SLIP',T68,
     3  'ACCELERATION',T116,'ON AXLE'/T68,'(RAD/SEC**2)'/)
 8012 FORMAT(T10,'TIME',T37,'TRACTOR',T78,'TRAILER',T106,'FIFTH WHEEL ',
     1  'FORCES'/T10,'(SEC)',T24,'------------------------------------',


     2  5X,'-------------------------------------',2X,'----------',
     3  '-------------'/T26,'Z',T38,'Z-DOT',T51,'Z-DDOT',T67,'Z1',T77,
     4  'Z1-DOT',T93,'Z1-DDOT',T108,'V',T122,'H'/T25,'(IN)',T37,'(IN/SEC
     5)',T49,'(IN/SEC**2)',T66,'(IN)',T78,'(IN/SEC)',T91,'(IN/SEC**2)'/)
 8013 FORMAT(45(13X,F5.2,6F18.3/))
 8014 FORMAT(T14,'TIME',T49,'TRACTOR',T102,'TRAILER'/T14,'(SEC)',T31,
     1  '---------------------------------------------',T85,
     2  '--------------------------------------------'/T32,'THETA',T48,
     3  'THETA-DOT',T65,'THETA-DDOT',T85,'THETA1',T101,'THETA1-DOT',T119
     4  ,'THETA1-DDOT'/T32,'(RAD)',T48,'(RAD/SEC)',T64,'(RAD/SEC**2)',
     5  T85,'(RAD)',T101,'(RAD/SEC)',T118,'(RAD/SEC**2)'/)
 8016 FORMAT(T61,'BRAKE SUMMARY'/2X,'TIME',T10,'PRESSURE',T27,'BRAKE 1',
     1  T50,'BRAKE 2',T73,'BRAKE 3',T96,'BRAKE 4',T119,'BRAKE 5'/2X,
     2  '(SEC)  OUTPUT OF  --------------------   --------------------
     3 --------------------   --------------------   -------------------
     4-'/T11,'TREADLE   PRESSURE   ATTEMPTED   PRESSURE   ATTEMPTED   PR
     5ESSURE   ATTEMPTED   PRESSURE   ATTEMPTED   PRESSURE   ATTEMPTED'/
     6  T12,'VALVE',T33,'TORQUE',T56,'TORQUE',T79,'TORQUE',T102,'TORQUE'
     7  ,T125,'TORQUE'/)
 8015 FORMAT(45(2X,F5.2,F10.3,5(F10.3,F13.2)/))
 8017 FORMAT(45(9X,F5.2,8F14.3/))
C
C ENTER TORQUE
C
      ENTRY TORQUE(X)
      NO=1
      NUMB=NUM(1)
      TIME=X-XPRINT
      DO 1250 I=1,KAXLE
      Z=XPRINT-TQ(I,1)
C
C TABLE LOOK-UP FOR TIME VS PRESSURE
      CALL TABLE(1,NUMB,XX,YY,Z,Q)
C
C
C OPTION 2
C STATIC LOAD SENSING BRAKE PROPORTIONING
      Q=Q*PROP(I)
C
C PRESSURE EQUATION
C
      P(I)=(POLD(I)-Q)*EXP(-TIME/TQ(I,2))+Q
C
C OPTION 6
C BRAKE SUBROUTINE TO BE CALLED
C ONLY USE THIS LOOP TO CALCULATE P(I)
      IF(NUM(2).LT.0) GO TO 1250
C
      Z=P(I)
      NO=NO+25
      NUMC=NO+NUM(I+1)-1
C
C TABLE LOOK-UP FOR PRESSURE VS TORQUE
      CALL TABLE(NO,NUMC,XX,YY,Z,Q)
C
      T(I)=Q
 1250 CONTINUE
C
C OPTION 6
C CALL BRAKE SUBROUTINE TO CALCULATE TORQUE (ENTRY BCALCU)
C
      IF(NUM(2).GT.0) GO TO 11250
      CALL BCALCU(KAXLE,P,T)
      DO 9100 I=1,KAXLE
 9100 T(I)=T(I)/12.
11250 CONTINUE
      OMEGA = XDOT*(1.0 - SLIP(2))/RR(2)*CFACT
C
C OPTION 3
C ENGINE BRAKING AND/OR PROP SHAFT BRAKING AND/OR AUXILIARY RETARDERS
C
      IF(ICOUNT.EQ.0) GO TO 17002
      GEAR=1
      IJ=NOGEAR+1
      DO 8300 I=1,NOGEAR
      IJ=IJ-1
      IF(XDOT.GE.GEARV(IJ)) GO TO 8310
 8300 CONTINUE
 8310 GRATIO = GRAT(IJ)
      RPM = OMEGA*GRATIO
      CALL TABLE(1,NUMEB,EBX,EBY,RPM,TEB)
      IF(KEY(1).EQ.0) GO TO 8301
      T(2) = T(2) + EBPER*TEB
      T(3) = T(3)+EMINUS*TEB
      GO TO 17002
 8301 T(2) = T(2) + TEB
17002 CONTINUE
C
C OPTION 4

C
      IF(KMAPB.EQ.0) GO TO 9000
      CALL TABLE(1,NOMAPB,MAPBX,MAPBY,X,TMAPB)
      T(2) = T(2) + TMAPB
 9000 CONTINUE
C
C OPTION 5
C SPRING ACTUATION OF FOUNDATION BRAKES
C
      IF(KSAFB.EQ.0 .OR. X.LT.ONTIME) GO TO 9001
      EXPO = 1. - 2.71828**((ONTIME - X)/RISET)
      DO 8303 I=2,KAXLE
 8303 T(I) = T(I) + TMAX(I)*EXPO
 9001 CONTINUE
C
C RETURN TO FUNCTION
C
      RETURN
      END
   