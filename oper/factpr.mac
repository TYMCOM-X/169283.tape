TITLE FACTPR - PREPROCESSOR FOR FACT FILES - V001(3) - 16 DEC 71
SUBTTL R CLEMENTS /RCC/PFC

VFACTP==01
VEDIT==3
VMINOR==0
VWHO==0

JOBVER=137
LOC JOBVER
	BYTE	(3)VWHO(9)VFACTP(6)VMINOR(18)VEDIT
RELOC

;ACCUMULATOR DEFINITIONS

F=0	;FOR FLAGS
A=1	;A THROUGH D ARE GP REGISTERS, E G LOOKUPS.
B=2
C=3
D=4
E=5

X=7	;INDEX OF CURRENT FACT ENTRY TYPE
BP=10	;BYTE POINTER
WD=11	;WORD
M=12	;FOR MESSAGES
N=13	;FOR NUMBERS
N1=N+1
R=15	;RADIX PRINT RADIX
CH=16	;CHARS
P=17	;PUSHDOWN STACK

;FLAGS IN LH OF F
FL.HIA==1		;HIATUS ENTRY HAS BEEN SEEN
FL.SIX==10		;TEMP FLAG IN SIXBIT PRINTER
FL.EOF==20		;LAST FACT ENTRY WAS EOF CODE

FR.LY==1		;USED TO REMEMBER LEAP YEAR IN DATE OUTPUTTER

EXTERN JOBFF,JOBSA,JOBREN,JOBREL
;DEVICE CHANNELS
MFD==1
DSK==2
LPT==3

;CALLI DEFINITIONS

RESET=0
GETCHR==1
CORE==11
EXIT==12
DATE==14
TIMER==22
MSTIME==23
GETTTY==34
GETTAB==41
DEVPPN==55

;MISC PARAMETERS

MAXENT==76		;MAXIMUM NUMBER OF WORDS IN A FACT ENTRY
MAXJOB==200		;MAXIMUM JOB NUMBER IN SYSTEM
PDLL==40		;STACK LENGTH
LINLEN==^D120		;LENGTH OF OUTPUT PRINT LINE
;THE FOLLOWING ARE THE DEFINITIONS AND CONVENTIONS
; OF THE FACT ENTRY TYPE CODES AND DATA.
;
;CODES 400-776 ARE RESERVED FOR CUSTOMERS, 1-377 ARE FOR DEC.
;CODE 777 IS THE EOF CODE.
;ENTRY CODES GO IN BITS 0-8 OF WORD 0 OF FACT ENTRY.

;FOR DEC'S ENTRIES, AN EVEN NUMBERED ENTRY HAS OLD FORMAT (12-24)
; DATE AND TIME WORD, AND TIME INFO MAY BE JIFSEC-DEPENDENT.
;FOR AN ODD-NUMBERED ENTRY, THE DATE AND TIME IS NEW (18-18) FORMAT,
; AND JIFSEC-DEPENDENCY IS ILLEGAL. THE CODES OTHERWISE MEAN THE
; SAME AS THE CORRESPONDING EVEN NUMBERED CODE (I.E., CODE-1).

;ARGUMENTS TO THE M.M MACRO ARE:
;	1 - THREE-LETTER ABBREVIATION FOR ENTRY TYPE
;	2 - CODE VALUE (OCTAL)
;	3 - UP TO SIX CHARACTERS, SIXBIT, FOR LISTING LABEL

;WORD 0 OF ALL FACT ENTRIES HAS THE FOLLOWING REQUIRED FORMAT:
;	BITS 0-8 ARE THE FACT TYPE CODE
;	BITS 9-17 ARE THE JOB NUMBER. THIS SHOULD NEVER BE ZERO. PLUG
;		IN THE REPORTING CUSP'S JOB IF NOTHING ELSE IS
;		APPROPRIATE, SO BILLING CAN BE INDIRECTED.
;	BITS 18-23 ARE THE TTY LINE NUMBER (BINARY). SAME COMMENT
;		AS FOR JOB NUMBER. -1 MEANS THE CTY. -2 MEANS DETACHED
;
;WORD 1 IS THE (REQUIRED) PPN, IN THE DEC STANDARD
; FORMAT. THOSE INSTALLATIONS WHICH HAVE MODIFIED THE PPN SYSTEM
; ARE ON THEIR OWN, BUT THE 36 BIT VALUE IN JBTDIR (NEE PRJPRG) SHOULD
; APPEAR IN THIS WORD.
;
;WORD 2 IS THE DATE AND TIME WORD. DAEMON WILL FILL THIS IN FOR YOU
; IF YOU MAKE THE ENTRY VIA DAEMON UUO, FACT SUBFUNCTION, AND YOU
; SUPPLY A ZERO IN THIS WORD.
;
;THE REMAINDER OF THE ENTRIES ARE DESCRIBED ON THE NEXT FEW PAGES.
;THIS IS THE DEFINING MACRO OF ALL KNOWN FACT ENTRY TYPES.
;
;ORDER IS NOT SIGNIFICANT.
;
DEFINE M.FE <
;HEADER FOR A CKPNT ENTRY
M.M(CHK,200,CHK)
;HEADER FOR A LOGIN ENTRY
M.M(LGI,100,ON)
;HEADER FOR A LOGOUT ENTRY
M.M(LGO,140,OFF)
;HEADER FOR SPACE'S DISK STATISTICS
M.M(SPC,160,SPACE)
;HEADER FOR AN ATTACH ENTRY
M.M(ATT,240,ATT)
;HEADER FOR SPOOLER STATISTICS
M.M(SPL,250,SPOOL)
;HEADER FOR SYSTEM RESTART
M.M(SRS,370,RESTRT)
;HEADER FOR SCHEDULED SHUTDOWN
M.M(SSD,372,SHUTDN
;HEADER FOR HIATUS IN FACT FILE
M.M(HIA,377,HIATUS)
;END OF FACT-FILE CODE
M.M(EOF,777,ENDFIL)
>

DEFINE M.M(A,B,C)<
FE.'A=B
>

	M.FE
				;ASSIGN THE FE. VALUES
;DESCRIPTIONS OF FACT ENTRIES....THIS LISTING IS THE OFFICIAL
; DEFINITION OF THESE ITEMS. (AND THUS THE "SIGN-OUT" PROCEDURE FOR
; DEC IN-HOUSE DEVELOPMENT CONSISTS OF UPDATING THIS SOURCE'S MASTER.)
;
;CODES		WORD	CONTENTS
;-----		----	--------
;
;100 LGI	0	STANDARD
;		1	PPN, STANDARD
;		2	DATE/TIME, STANDARD
;
;140 LGO	0	STANDARD
;		1	PPN, STANDARD
;		2	DATE/TIME, STANDARD
;		3	RUNTIME IN MILLISECONDS
;		4	KILO-CORE-TICKS, OR 
;			 FOR CODE 141, 100*KILO-CORE-SECONDS
;		5	DSK READS, IN 128 WORD BLOCKS
;		6	DSK WRITES, IN 128 WORD BLOCKS
;
;160 SPACE	0	STANDARD
;		1	PPN, STANDARD
;		2	DATE/TIME, STANDARD
;		3	STRUCTURE NAME IN SIXBIT
;		4	STATUS WORD FROM USER'S UFD .RBSTS
;		5	QUOTA FCFS - .RBQTF
;		6	LOGGED OUT QUOTA - .RBQTO
;		7	RESERVED QUOTA - .RBQTR
;		10	BLOCKS USED - .RBUSD
;		11	FREE ON STRUCTURE (ALL USERS) - .STTAL
;		12	SIXBIT IN, OUT, OR RECOMP - AS TYPED BY SPACE
;
;200 CHK	0	STANDARD
;		1	PPN, STANDARD
;		2	DATE/TIME, STANDARD
;		3	RUNTIME, IN MILLISECONDS
;		4	KILO-CORE TICKS (OR SECONDS*100) AS IN LGO
;		5	DSK READS
;		6	DSK WRITES
;		7	PROGRAM NAME CURRENTLY RUNNING (JBTPRG, SIXBIT)
;240 ATT	0	STANDARD
;		1	PPN, STANDARD
;		2	DATE/TIME, STANDARD
;
;250 SPOOL	0	STANDARD
;		1	PPN, STANDARD
;		2	DATE/TIME, STANDARD
;		3	BYTE(12)QUE NAME SIXBIT(6)STATION NUMBER(18)SERIAL
;		4	SPOOLER RUNTIME
;		5	KILO-CORE-TICKS/SECONDS AS ABOVE
;		6	DSK READS
;		7	DSK WRTS
;		10	SPOOLED DEVICE PHYSICAL NAME IN SIXBIT
;		11	SPOOLER SEQUENCE NUMBER
;		12	SPOOLER UNITS USED
;
;377 HIATUS	HOPEFULLY OBSOLETE. A ONE-WORD NULL ENTRY CAUSED IN THE
;			PAST BY DISK LENGTH ERRORS
;
;370 RESTART		UNDEFINED, WILL CONTAIN SERIAL AND STATION AND
;			AND THE WHY-RESTART DATA
;
;372 SHUTDN		ALSO UNDEFINED SO FAR
;
;777 ENDFIL		A ONE-WORD ENTRY, CONTAINING EXACTLY THE OCTAL
;			VALUE 777000000000 AND MARKING THE END
;			OF THE FACT FILE.
;STARTS HERE

FACTPR:	CALLI	RESET
	MOVE	P,PDP
	MOVEI	F,0

IF1,<
	PRINTX	%% WARNING *********************
	PRINTX	%%  THIS IS AN EXPERIMENTAL PROGRAM
	PRINTX	%%  AND IS AVAILABLE FOR INFORMATIONAL
	PRINTX	%%  PURPOSES ONLY.  THIS PROGRAM IS
	PRINTX	%%  UNSUPPORTED AND IS DISTRIBUTED
	PRINTX	%%  IN ORDER TO SOLICIT COMMENTS UPON
	PRINTX	%%  ITS DESIGN.
	PRINTX	%%  *********************************
>

	OUTSTR	WRNMSG

	INIT	MFD,14
	SIXBIT	/DSK/
	XWD	0,MFDB
	CALLI	EXIT
	INIT	DSK,14
	SIXBIT	/DSK/
	XWD	0,DSKB
	CALLI	EXIT
	INIT	LPT,0
	SIXBIT	/LST/
	XWD	LPTB,0
	SKIPA
	JRST	FCTPR1
	INIT	LPT,0
	SIXBIT	/DSK/
	XWD	LPTB,0
	CALLI	EXIT
FCTPR1:	MOVSI A,(SIXBIT .SYS.)
	CALLI A,DEVPPN		;GET PPN FOR SYS
	  JRST .+2		;NOT IMPLEMENTED, USE 1,1
	MOVEM A,SYSPP
	INBUF	MFD,1
	INBUF	DSK,1
	OUTBUF	LPT,2
	HRRZ	A,JOBFF
	HRRZM	A,SJOBFF
	MOVE	A,[SIXBIT /FACTPR/]
	MOVSI	B,(SIXBIT /TXT/)
	SETZB	C,D
	ENTER	LPT,A
	CALLI	EXIT
	MOVE	A,[XWD 17,11]
	CALLI	A,GETTAB
	  MOVEI	A,0	;ERROR RETURN
	MOVEI	B,^D60
	TLNE	A,4000
	MOVEI	B,^D50
	MOVEM	B,JIFSEC
MONEY1:	MOVSI	B,(SIXBIT /SYS/)	;FIRST DUMP ACCT.SYS
	MOVEM	B,EXTEN
	PUSHJ	P,DUMP
	MOVE	A,SYSPP
	MOVSI	B,(SIXBIT /UFD/)	;NOW GET ANY OTHER FACT.XXX
	MOVEI	C,0
	MOVE	D,MFDPPN		;LOOK IN MFD
	LOOKUP	MFD,A
	CALLI	EXIT		;MUST BE THERE
MONEY3:
ML1:	PUSHJ	P,RDM
	JFCL
	MOVE	A,WD
	PUSHJ	P,RDM
	JRST	EOJ		;END OF THE JOB
	MOVE	B,WD
	CAME	A,[SIXBIT /FACT/]
	JRST	ML1
	HLLZM	B,EXTEN
	HLRZS	B
	CAIN	B,(SIXBIT /SYS/)
	JRST	ML1
	PUSHJ	P,DUMP		;FOUND ONE. GO DUMP IT
	JRST	ML1		;SEARCH FOR MORE

EOJ:	CALLI 12		;MAYBE THIS SHOULD DO SOME MORE?

WRNMSG:	ASCIZ	\
%% WARNING ******************************
%%  THIS IS AN EXPERIMENTAL PROGRAM
%%  AND IS AVAILABLE FOR INFORMATIONAL
%%  PURPOSES ONLY.  THIS PROGRAM IS
%%  UNSUPPORTED AND IS DISTRIBUTED
%%  IN ORDER TO SOLICIT COMMENTS UPON
%%  ITS DESIGN.
%%  *********************************
\
DUMP:	MOVE	A,[SIXBIT /FACT/]	;LOOKUP THE FILE
	HLLZ	B,EXTEN
	MOVEI	C,0
	MOVE	D,SYSPP
	LOOKUP	DSK,A
	  JRST	DUMPX1
DUMP01:
NXTENT:	SETZM	ENTRY		;CLEAR DATA TABLE FOR THE ENTRY
	MOVE	A,[XWD ENTRY,ENTRY+1]
	BLT	A,ENTRY+MAXENT-1
	MOVSI	A,-MAXENT
	PUSHJ	P,DSKRD		;READ HEADER OF ENTRY
	  POPJ P,0		;RETURN FROM DUMP
	MOVEM	WD,ENTRY
	LDB	A,[POINT 9,ENTRY,8]
	MOVSI B,-FETABL		;SEARCH FOR THIS TYPE CODE
DMP5L:	HLRZ C,FETAB(B)		;GET A CODE
	CAMN A,C		;MATCH?
	JRST DMP5F		;YES
	AOBJN B,DMP5L		;NO. LOOP THRU TABLE
	JRST BADENT		;NO SUCH CODE KNOWN

DMP5F:	HRRZ X,FETAB(B)		;GET THE INDEX
	ANDI	WD,77
	JUMPE	WD,EOFQ
	CAIL	WD,MAXENT
	JRST	BADEND
	MOVNS	WD
	HRLZ	A,WD
	JRST	DUMP03
DUMP02:	PUSHJ	P,DSKRD		;READ DATA FOR THIS ENTRY
	  POPJ P,0		;RETURN FROM DUMP
	MOVEM	WD,ENTRY(A)
DUMP03:	AOBJN	A,DUMP02
	PUSHJ P,CNVENT		;CONVERT A FACT ENTRY
	MOVE	BP,[POINT 7,LINE]
DMP4L:	ILDB	CH,BP		;GET A CHAR FROM PRINT LINE
	JUMPE	CH,DUMP04	;END?
	PUSHJ	P,LISTCH	;NO. LIST IT.
	JRST	DMP4L		;LOOP THRU END OF LINE
DUMP04:	JRST NXTENT		;NOW GO ON FOR MORE FACT ENTRIES
CNVENT:	MOVEI	CH," "		;FIRST, BLANK THE PRINT LINE
	MOVNI	N,LINLEN
	MOVE	BP,[POINT 7,LINE]
	IDPB	CH,BP		;CLEAR A SPACE IN THE LINE
	AOJL	N,.-1		;LOOP FOR WHOLE LINE
	MOVEI	CH,15		;ADD A CARRIAGE RETURN
	IDPB	CH,BP
	MOVEI	CH,12		;AND A LINEFEED
	IDPB	CH,BP
	MOVEI	CH,0		;AND CAP IT OFF WITH A NULL FOR ASCIZ

	MOVEI	E,0		;CODE
	PUSHJ	P,CNVITM
	MOVEI	E,1		;JOB NUMBER
	PUSHJ	P,CNVITM
	MOVEI	E,2		;TTY
	PUSHJ	P,CNVITM
	MOVEI	E,3		;PROJECT NUMBER
	PUSHJ	P,CNVITM
	MOVEI	E,4		;PROGRAMMER NUMBER
	PUSHJ	P,CNVITM
	LDB	A,CODEP		;GET THE CODE TO SEE IF ODD OR EVEN
	MOVEI	E,5		;OLD STYLE DATE AND TIME
	TRNE	A,1		;WHICH ONE?
	MOVEI	E,6		;NEW STYLE DATE AND TIME
	PUSHJ	P,CNVITM
	MOVEI	D,@XLATAB-1(X)	;GET THE TRANSLATION LIST
CNVEL1:	SKIPGE	E,0(D)		;END OF LIST?
	JRST	CNVE8		;YES. FINISH UP ITEM
	PUSHJ	P,CNVITM	;NO, GO CONVERT THIS ONE
	AOJA	D,CNVEL1	;AND LOOP TO SEE IF MORE

CNVE8:	POPJ	P,0		;THROUGH WITH THIS ENTRY

CNVITM:	HLRZ	N,FET2(E)	;GET CHARACTERS TO SKIP OVER
	IDIVI	N,5		;FIVE CHARS PER WORD
	MOVEI	BP,LINE(N)	;ADDRESS IN THE LINE BUFFER
	HRL	BP,BPTAB(N1)	;AND THE BYTE WITHIN THE ADDRESS
	MOVEM	BP,LINEBP	;FOR OUTPUT CHARACTER ROUTINE "OUCH"
	LDB	A,FET1(E)	;GET THE RAW DATUM FROM FACT ENTRY
	HRRZ	N,FET2(E)	;AND THE CONVERSION ROUTINE'S ADDRESS
	JRST	0(N)		;GO DO IT

BPTAB:	440700			;TABLE OF LEFT-HALVES OF BYTE POINTERS
	350700
	260700
	170700
	100700
;THIS IS A TABLE OF BYTE POINTERS TO ITEMS IN THE FACT ENTRY BLOCK
;THE USE MADE OF THE DATA IS DETERMINED BY THE NEXT TABLE,FET2.
;THE INDEX INTO THIS TABLE IS HELD IN AC "E" IN THE CONVERT-
; ITEM ROUTINE (CNVITM)
;
FET1:	POINT 9,ENTRY+0,8	;0 CODE
	POINT 9,ENTRY+0,17	;1 JOB NUMBER
	POINT 12,ENTRY+0,29	;2 TTY NUMBER IN SOME FORMAT
	POINT 18,ENTRY+1,17	;3 PROJECT NUMBER
	POINT 18,ENTRY+1,35	;4 PROGRAMMER NUMBER
	POINT 36,ENTRY+2,35	;5 DATE AND TIME, OLD STYLE
	POINT 36,ENTRY+2,35	;6 DATE AND TIME, NEW STYLE
	POINT 36,ENTRY+3,35	;7 RUNTIME, MILLISECONDS
	POINT 36,ENTRY+4,35	;10 RUNTIME, MS, SPOOLERS
	POINT 12,ENTRY+3,11	;11 QUE NAME
	POINT 6,ENTRY+3,17	;12 STATION NUMBER
	POINT 18,ENTRY+3,35	;13 APR SERIAL NUMBER
	POINT 36,ENTRY+4,35	;14 KILO CORE TICKS
	POINT 36,ENTRY+4,35	;15 KILO CORE SECONDS*100
	POINT 36,ENTRY+5,35	;16 KILO CORE TICKS
	POINT 36,ENTRY+5,35	;17 KILO CORE SECONDS*100
	POINT 36,ENTRY+5,35	;20 DISK BLOCKS READ
	POINT 36,ENTRY+6,35	;21 DISK BLOCKS READ
	POINT 36,ENTRY+6,35	;22 DISK BLOCKS WRITTEN
	POINT 36,ENTRY+7,35	;23 DISK BLOCKS WRITTEN
	POINT 36,ENTRY+7,35	;24 PROGRAM NAME
	POINT 36,ENTRY+10,35	;25 SPOOLED DEVICE NAME
	POINT 36,ENTRY+11,35	;26 SEQUENCE NUMBER
	POINT 36,ENTRY+12,35	;27 SPOOLER UNITS USED
	POINT 36,ENTRY+3,35	;30 SPACE STRUCTURE NAME
	POINT 36,ENTRY+4,35	;31 SPACE STATUS WORD FROM UFD
	POINT 36,ENTRY+5,35	;32 SPACE FCFS QUOTA
	POINT 36,ENTRY+6,35	;33 SPACE QTA OUT
	POINT 36,ENTRY+7,35	;34 SPACE QTA RSRVD
	POINT 36,ENTRY+10,35	;35 SPACE USED BLOCKS
	POINT 36,ENTRY+11,35	;36 SPACE STRUCTURE FREE
	POINT 36,ENTRY+12,35	;37 SPACE IN/OUT/RECOMP SIXBIT
FETL==.-FET1

CODEP==FET1+0			;POINTER TO THE 9-BIT CODE TYPE
SIZEP:	POINT 6,ENTRY+0,35	;POINTER TO THE LENGTH IN WORDS OF ENTRY
;THIS TABLE DIRECTS THE CONVERSION OF A PARTICULAR ITEM IN
; A FACT ENTRY BLOCK. IT PARALLELS TABLE FET1
;
;LEFT HALF IS COLUMNS TO SKIP BEFORE PRINTING, I.E., COLUMN NUMBER-1
;RIGHT HALF IS THE ADDRESS OF THE CONVERSION ROUTINE.
;NOTE THAT THE CONVERSION ROUTINES KNOW HOW MANY COLUMNS THEY SHOULD USE

	RADIX 10

FET2:	XWD	0,OCTP3		;0 CODE
	XWD	3,DECP3		;1 JOB NUMBER
	XWD	6,TTYCNV	;2 TTY NUMBER IN SOME FORMAT
	XWD	9,OCTP6		;3 PROJECT NUMBER
	XWD	15,OCTP6	;4 PROGRAMMER NUMBER
	XWD	21,ODATIM	;5 DATE AND TIME, OLD STYLE
	XWD	21,NDATIM	;6 DATE AND TIME, NEW STYLE
	XWD	42,MST7		;7 RUNTIME, MILLISECONDS
	XWD	42,MST7		;10 RUNTIME, MS, SPOOLERS
	XWD	99,SIXBP2	;11 QUE NAME
	XWD	40,DECP2	;12 STATION NUMBER
	XWD	34,DECP6	;13 APR SERIAL NUMBER
	XWD	49,KCT11	;14 KILO CORE TICKS
	XWD	49,KCS11	;15 KILO CORE SECONDS
	XWD	49,KCT11	;16 KILO CORE TICKS
	XWD	49,KCS11	;17 KILO CORE SECONDS*100
	XWD	60,DECP8	;20 DISK BLOCKS READ
	XWD	60,DECP8	;21 DISK BLOCKS READ
	XWD	68,DECP8	;22 DISK BLOCKS WRITTEN
	XWD	68,DECP8	;23 DISK BLOCKS WRITTEN
	XWD	76,SIXBP6	;24 PROGRAM NAME
	XWD	76,SIXBP6	;25 SPOOLED DEVICE NAME
	XWD	82,DECP6	;26 SEQUENCE NUMBER
	XWD	88,DECP11	;27 SPOOLER UNITS USED
	XWD	76,SIXBP6	;30 SPACE STR NAME
	XWD	82,OCTP12	;31 SPACE UFD STATUS WORD
	XWD	34,DECP11	;32 SPACE QTA FCFS
	XWD	45,DECP11	;33 SPACE QTA OUT
	XWD	56,DECP8	;34 SPACE RSRVD
	XWD	64,DECP11	;35 SPACE BLKS USED
	XWD	94,DECP11	;36 SPACE STR FREE
	XWD	105,SIXBP6	;37 SPACE IN/OUT/RECOMP
IFN <.-FET2-FETL>,<PRINTX TABLES DONT MATCH>

	RADIX 8
	RADIX 8


;ALL FACT ENTRY BLOCKS ARE ASSUMED TO HAVE ITEMS 0 THRU 4, AND EITHER
;5 OR SIX AS APPROPRIATE (CODE EVEN OR ODD RESPECTIVELY).
;THE FOLLOWING TABLES DETERMINE WHAT OTHER DATA IS TO BE CONVERTED
;AND OUTPUT FOR EACH FACT ENTRY TYPE
;

DEFINE M.M(A,B,C)<
IFDEF T.'A,<	EXP T.'A>
IFNDEF T.'A,<	EXP T.LGI>;	MINIMAL LISTING
>

XLATAB:	M.FE;			;TRANSLATION TABLE

T.LGI:	-1

T.LGO:	7
	14
	20
	22
	-1

T.CHK:	7
	14
	20
	22
	24
	-1

T.SPL:	11
	12
	13
	10
	16
	21
	23
	25
	26
	27
	-1
T.SPC:	30
	31
	32
	33
	34
	35
	36
	37
	-1

TTYCNV:	TRNE	A,4000		;EXTEND BIT 24 INTO SIGN
	ORCMI	A,7777		; ..
	JUMPGE	A,TTYCN1	;IF PLUS, TREAT AS OCTAL NUMBER
	MOVEI	WD,(SIXBIT /DET/)
	TRNE	A,1		;CTY OR DET?
	MOVEI	WD,(SIXBIT /CTY/)
	HRRZ	A,WD
	JRST	SIXBP3

TTYCN1:	CAIGE	A,2000		;OLD SIXBIT HACK?
	JRST	OCTP3		;NO. ASSUME OCTAL NUMBER
TTYCN3:	TRNE	A,77		;YES. MAKE IT 3 DIGITS
	JRST	TTYCN2
	LSH	A,-6
	JRST	TTYCN3

TTYCN2:	TRO	A,'000'		;MAKE SIXBIT
	JRST	SIXBP3		;AND PRINT IT
;SUBROUTINE TO CONVERT STANDARD SYSTEM DATE TO INTERNAL FORMAT=DAYS SINCE NOV 13,1857
;THIS IS CONTINUOUS INCREASING BY DATE; SYSTEM DATE IS DISCONTINUOUS AT END OF MONTHS
;ARGS	B=DATE IN SYSTEM FORMAT
;VALUES	B=DATE IN INTERNAL FORMAT
;SAVES A, USES B,C,D,E

	RADIX	10

DATOFS==38395		;DATE OFFSET FOR JAN 1, 1964=DAYS SINCE NOV 13, 1857

INTDAT:	PUSH	P,A		;SAVE A
	IDIVI	B,12*31		;B=YEARS-1964
	IDIVI	C,31		;C=MONTHS-JAN, D=DAYS-1
	ADD	D,DAYTAB(C)	;D=DAYS-JAN 1
	MOVEI	E,0		;LEAP YEAR ADDITIVE IF JAN, FEB
	CAIL	C,2		;CHECK MONTH
	MOVEI	E,1		;ADDITIVE IF MAR-DEC
	MOVE	A,B		;SAVE YEARS FOR REUSE
	ADDI	B,3		;MAKE LEAP YEARS COME OUT RIGHT
	IDIVI	B,4		;HANDLE REQULAR LEAP YEARS
	CAIE	C,3		;SEE IF THIS IS LEAP YEAR
	MOVEI	E,0		;NO--WIPE OUT ADDITIVE
	ADDI	D,DATOFS(B)	;D=DAYS BEFORE JAN 1,1964 +SINCE JAN 1
				; +ALLOWANCE FOR ALL LEAP YEARS SINCE 64
	MOVE	B,A		;RESTORE YEARS SINCE 1964
	IMULI	B,365		;DAYS SINCE 1964
	ADD	D,B		;D=DAYS EXCEPT FOR 100 YR. FUDGE
	HRREI	B,64-99(A)	;B=YEARS SINCE 2000
	JUMPLE	B,INTDT1	;ALL DONE IF NOT YET 2000
	IDIVI	B,100		;GET CENTURIES SINCE 2000
	SUB	D,B		;ALLOW FOR LOST LEAP YEARS
	CAIE	C,99		;SEE IF THIS IS A LOST L.Y.
INTDT1:	ADD	D,E		;ALLOW FOR LEAP YEAR THIS YEAR

;HERE WITH D CONTAINING CORRECT NUMBER OF DAYS

	MOVE	B,D		;RETURN IN B
	POP	P,A		;RESTORE A
	POPJ	P,		;RETURN

DAYTAB:	EXP	0,31,59,90,120,151,181,212,243,273,304,334
	RADIX	8
DUMPX1:	JSP	M,MSG		;POPJ FROM DUMP
	ASCIZ	/
LOOKUP FAILURE
/
BADENT:
BADEND:
EOFQ:	MOVE	N,ENTRY
	CAMN	N,[XWD 777000,0]
	JRST	ENDDMP
	JUMPE	N,NXTENT
	MOVEI	M,[ASCIZ /
BAD FACT WORD: /]
	PUSHJ	P,MSG
	PUSHJ	P,OCTPRT
	PUSHJ	P,CRLF
	JRST	NXTENT

ENDDMP:	POPJ	P,0		;EXIT FROM DUMP

RDM:	SOSLE	MFDB+2
	JRST	MFDOK
	INPUT	MFD,0
	STATZ	MFD,760000
	POPJ	P,0
MFDOK:	ILDB	WD,MFDB+1
CPOPJ1:	AOS	0(P)
CPOPJ:	POPJ	P,0

DSKRD:	SOSLE	DSKB+2
	JRST	DSKOK
	INPUT	DSK,0
	STATZ	DSK,760000
	POPJ P,0
DSKOK:	ILDB	WD,DSKB+1
	JRST CPOPJ1
HR2OUT:	IDIVI	A,^D60*^D60
	PUSHJ	P,DECP2
	MOVE	A,B
	JRST	MINOUT

MST7:	IDIVI	A,^D1000	;TO SECONDS
	CAIL	B,^D500
	ADDI	A,1		;ROUND TO NEAREST SECOND
				;AND PRINT IN SEVEN COLUMNS
HR3OUT:	IDIVI A,^D60*^D60
	PUSHJ	P,DECP3
	MOVE	A,B
MINOUT:	IDIVI	A,^D60
	PUSHJ	P,DECP2
	MOVE	A,B
	JRST	DECP2

LISTCH:	SOSLE	LPTB+2
	JRST	LISTOK
	OUTPUT	LPT,0
	STATZ	LPT,760000
	  JRST	LISTER
LISTOK:	IDPB	CH,LPTB+1
	POPJ	P,0

LISTER:	OUTSTR [ASCIZ /?OUTPUT ERROR/]
	CALLI	12

KCT11:	MOVE	C,JIFSEC
	IDIV	A,C
	ASH	C,-1
	CAML	B,C
	ADDI	A,1
	JRST	DECP11

KCS11:	IDIVI	A,^D100
	CAIL	B,^D50
	ADDI	A,1
	JRST	DECP11
TICDAY:	IMULI	A,^D1000
	IDIV	A,JIFSEC
MSTOUT:	SKIPGE A
	MOVEI A,0		;PROTECT AGAINST NEGATIVE VALUES
	IDIV	A,[EXP ^D60000*^D60]
	MOVE	N,A
	PUSHJ	P,DECP2
	MOVE	A,B
	IDIVI	A,^D60000
	MOVE	N,A
	PUSHJ	P,DECP2
	MOVE	N,B
	IDIVI	N,^D1000
	JRST	DECP2

DECP11:	CAMG	A,[^D9999999999]
	PUSHJ P,ZEROUT
DECP10:	CAMG	A,[^D999999999]
	PUSHJ P,ZEROUT
DECP9:	CAMG	A,[^D99999999]
	PUSHJ P,ZEROUT
DECP8:	CAMG	A,[^D9999999]
	PUSHJ	P,ZEROUT
DECP7:	CAMG	A,[^D999999]
	PUSHJ	P,ZEROUT
DECP6:	CAIG	A,^D99999
	PUSHJ	P,ZEROUT
DECP5:	CAIG	A,^D9999
	PUSHJ	P,ZEROUT
DECP4:	CAIG	A,^D999
	PUSHJ	P,ZEROUT
DECP3:	CAIG	A,^D99
	PUSHJ	P,ZEROUT
DECP2:	CAIG	A,11
	PUSHJ	P,ZEROUT
DECPRT:	SKIPA	R,[12]
OCTPRT:	MOVEI	R,10
	MOVEI	CH,"-"
	SKIPGE	A
	PUSHJ	P,OUCH
	MOVMS	A
	MOVE	N,A
RDXPRT:	IDIVI	N,(R)
	HRLM	N1,0(P)
	SKIPE	N
	PUSHJ	P,RDXPRT
	HLRZ	CH,0(P)
	ADDI	CH,"0"
OUCH:	IDPB	CH,LINEBP	;PUT IN LINE BUFFER
	POPJ	P,0
MSG:	HRLI	M,440700
MSG1:	ILDB	CH,M
	JUMPE	CH,CPOPJ
	PUSHJ	P,OUCH
	JRST	MSG1

CORLOS:	OUTSTR	[ASCIZ /
?NOT ENOUGH CORE/]
	CALLI	EXIT

CRLF2:	PUSHJ	P,CRLF
CRLF:	JSP	M,MSG
	ASCIZ /
/

ZEROUT:	MOVEI	CH,"0"
	JRST	OUCH

RNTOUT:	IMULI	A,^D1000
	JRST	MSTOUT

OCTP12:	MOVE	BP,[440300,,A]
	JRST	OCTPL

OCTP6:	SKIPA	BP,[220300,,A]
OCTP3:	MOVE	BP,[110300,,A]
OCTPL:	ILDB	CH,BP
	ADDI	CH,"0"
	PUSHJ	P,OUCH
	TLNE	BP,770000
	JRST	OCTPL
	POPJ	P,0
SIXBP5:	SKIPA	BP,[360600,,A]
SIXBP4:	MOVE	BP,[300600,,A]
	JRST	SIXBPL
SIXBP3:	SKIPA	BP,[220600,,A]
SIXBP2:	MOVE	BP,[140600,,A]
	JRST	SIXBPL
SIXBP6:	MOVE	BP,[XWD	440600,A]
SIXBPL:	ILDB	CH,BP
	TLNN F,FL.SIX
	JUMPE	CH,CPOPJ
	ADDI	CH,40
	PUSHJ	P,OUCH
	TLNE	B000
	JRST	SIXBPL
	POPJ	P,0

ODATIM:	PUSH	P,A		;SAVE WHOLE WORD
	LDB	A,[POINT 12,0(P),11]	;GET DATE FIELD
	IDIVI	A,^D31*^D12	;GET YEAR-1964
	TRNN	A,3		;LEAP YEAR?
	TRO	F,FR.LY		;YES. REMEMBER IT
	PUSH	P,B		;SAVE DAY
	ADDI	A,^D1964
	PUSHJ	P,DECP4		;PRINT YEAR
	POP	P,B
	IDIVI	B,^D31		;MONTH NUMBER TO B, DAY NUMBER TO C.
	MOVE	A,DAYTAB(B)	;FIRST OF THE MONTH TO A
	ADDI	A,1(C)		;LET JAN 1 BE ONE.
	MOVEI	D,1		;MIGHT NEED A LEAP YEAR
	CAIGE	B,2		;IF JAN OR FEB, NO FUDGE
	MOVEI	D,0		; ..
	TRZE	F,FR.LY		;LEAP YEAR?
	ADDI	A,(D)		;YES. ADD A DAY IF APPROPRIATE.
	PUSHJ	P,DECP3		;OUTPUT DAY NUMBER, 3 DIGITS
	POP	P,A		;GET BACK DAY AND TIME
	TLZ	A,777700	;CLEAR OUT DAY
	MOVE	C,JIFSEC	;FROM JIFFIES TO SECONDS
	IDIV	A,C
	ASH	C,-1
	CAML	B,C		;ROUND UP?
	ADDI	A,1		; YES
	JRST	HR2OUT		;AND OUTPUT


NDATIM:	JSP	M,MSG		;THIS ISN'T DONE YET
	ASCIZ	/?????????????/	;YEAR4,DAY3,HR2,MIN2,SEC2
;STORAGE AND STUFF

PDP:	XWD	-PDLL,PDL-1
PDL:	BLOCK PDLL

MFDB:	BLOCK	3
LPTB:	BLOCK	3
DSKB:	BLOCK	3

MFDPPN:	XWD	1,1
SYSPP:	XWD	1,1
JIFSEC:	0

EXTEN:	0
SJOBFF:	0		;SAVE JOBFF

;CONVERT CODES TO SMALL INDECES

DEFINE M.M(A,B,C)<
X..==X..+1
X.'A==X..
	XWD FE.'A,X.'A
>
X..==0

FETAB:	M.FE
FETABL==.-FETAB

LINEBP:	0			;POINTER INTO THE OUTPUT STRING
LINE:	BLOCK	<LINLEN/5>+2	;THE ACTUAL OUTPUT LINE TEXT GOES HERE.

ENTRY:	BLOCK	MAXENT

	XLIST	;LITERALS
	LIT
	LIST
FEND:	END FACTPR
  @R