!PUB  - PRODUCT UPDATE BILLING  -  04 JAN 73  (BARB)
!LAST ID # USED WAS 4583
GLOBAL %PIN, G:
G:  IOCS(5); PIN; EXIT
\\->G

DEF UNTIL(X) AS WHILE NOT X THEN NULL
DEF TABCHAR AS ($I-OCT 100)
DEF FORM.FEED AS ($L-OCT 100)

LOCAL %DOUT, %CK.LIST, %DOL.IN, %RJ.DOL, %ERMS, %BMP.DOWN, %NAM.ADR
LOCAL %GET.FILE.NAME

%GET.FILE.NAME
LOCAL P
  P _ GET.LINE(TEL); LOOP WHILE NCHV P#CARRET
  CHV P _ EOLIT; RETURN
END GET.FILE.NAME

%DOL.IN(N, NUTS:)
  LOCAL SGN, DPNT, I, R, C, DCNT, V

  I _ SGN _ DCNT _ R _ C _ 0
  EIF V _ NCHV N = $- THEN SGN _ I
  ORIF V = $+ THEN NULL
  ELSE PCHV N
  DPNT _ 0
  WHILE V _ NCHV N # CARRET THEN DO
    INC I
    EIF V = $. THEN [DPNT _ I; INC DCNT]
    ORIF NOT $0 <= V <= $9 THEN GO NUTS
    ELSE [C _ V-$0; R _ C + R*10]
  END
  IF DCNT>1 OR I_(IF DPNT = 0 THEN 0 ELSE I-DPNT)>2 THEN GO NUTS
  REPEAT 2-I  R _ R*10
  IF SGN # 0 THEN R _ -R
  RETURN R
END DOL.IN

%CK.LIST(PTR, TBL(), CNT)
LOCAL I,P1,C1,C2,FD,F,P2
  I _ -1; FD _ 0
  WHILE INC I # CNT THEN DO
    P1 _ CHPT(TBL(I),-1); P2 _ PTR
    WHILE C2 _ NCHV P2 # CARRET THEN DO
      IF C1 _ NCHV P1 = CARRET THEN GO NOFD
      IF C2#C1 THEN GO NOFD
    END
    INC FD; F _ I
NOFD: NULL
  END
  IF FD=1 THEN RETURN INC F ELSE RETURN 0
END CK.LIST

%DOUT(N)
  LOCAL H, L, S, D, C
C _  H _ L _ 0;  S _ [N<0];  N_ ABS N
  WHILE N>0 THEN DO
    [ N; D] _ N DIVMOD 10; INC C
    [ H; L] _ [ H; L] DSHL 4;  L BOR _ D
  END
  PUT($ );  IF S#0 THEN PUT($-)
  WHILE DEC C >= 0 THEN DO
    PUT( L BAND HEX F + $0);  [ H; L] _ [ H; L] DSHR 4
  END
  RETURN
END DOUT

LOCAL %FORM.LINES, %SET.LINE, %LJLIT, %RJINT, %WRITE.LINE, %PUTCH
%FORM.LINES

  DEF CPL AS 132
  LOCAL B( 0: CPL),  P, C, HPTR
  LOCAL %TRIM

  %SET.LINE
    MOVE CPL+2 FROM ALL $  TO B;  HPTR _ 0;  RETURN
  END SET.LINE

  %PUTCH( L, T)
    IF 0<=T<=CPL THEN [B(T) _ L; HPTR _ HPTR MAX T]
    RETURN
  END PUTCH

  %LJLIT( L(), T)
    P _ CHPT( L, -1);  DEC T;  T _ T MAX 0
    WHILE C_NCHV P # EOLIT AND INC T<=CPL THEN B(T) _ C
    HPTR _ HPTR MAX T;  RETURN
  END LJLIT

  %TRIM
    B(0) _ 1;  HPTR _ HPTR MIN CPL;  WHILE NOT TABCHAR#B(HPTR)#$  THEN DEC HPTR
    RETURN
  END TRIM

  %WRITE.LINE(FILE)
    TRIM;  FOR P_1 TO HPTR W( FILE, B(P));  RETURN
  END WRITE.LINE

  %RJINT( N, T)
    LOCAL S

    S _ [N<0];  N _ABS N;  HPTR _ HPTR MAX T
    LOOP DO
      WHILE 1<=T<=CPL
      [ N; B(T)] _ N DIVMOD 10;  B(T) +_ $0;  DEC T
      WHILE N>0
    END
    IF S#0 AND 1<=T<=CPL THEN B(T) _ $-
    RETURN
  END RJINT
END FORM.LINES


%RJ.DOL(N, L)
LOCAL H,S,D,C
  C _ H _ 0; S _ [N<0]; H _ ABS N
  IF S # 0 THEN PUTCH($-,L)
  REPEAT 2 DO
        [H; D] _ H DIVMOD 10; PUTCH(D+$0, DEC L)
  END
  PUTCH($., DEC L)
  WHILE H>0 THEN DO
        [H;D] _ H DIVMOD 10
        PUTCH(D+$0, DEC L)
  END
  RETURN
END RJ.DOL

DEF TYP.CR AS MSG("$")


LOCAL %BINSRCH, %SRCH, %YNQ

%YNQ(LIT)
TABLE YNQT(0:2)['YES','NO','QUIT']
LOCAL P,T
A:  MSG(LIT); T _ CK.LIST(P _ GETLINE(TEL), YNQT, 3)
  IF T=0 THEN [MSG('TYPE YES OR NO.'); GO A] 
  RETURN T
END YNQ
FIND %LOG

%SRCH(TARGET, A(), N)
LOCAL I
  I _ -1
  WHILE INC I < N THEN DO
  IF A(I)=TARGET THEN RETURN INC I
  END
  RETURN 0
END  SRCH

%BINSRCH(TARGET, B(), N, SZ)
 LOCAL C,M,STEP
  DEF A(I) AS B(SZ*I)
  IF TARGET>A(N) THEN RETURN [N+1; 0]
  C _ IF N<4 THEN 1 ELSE LOG(N)-1
  [STEP; M] _ [0; HEX 80.00.00.00.1] DSHL C; DEC M
  REPEAT C DO
    IF M<N AND TARGET > A(M) THEN  M _ M+STEP ELSE M_ M-STEP
    STEP _ STEP SHR 1
  END
  IF A(M) < TARGET OR M=0 THEN INC M
  RETURN [M; [A(M)=TARGET]]
END BINSRCH

LOCAL %SIC

%SIC(P, BADC:)
  LOCAL N,C
  N _ 0
  WHILE C _ NCHV P # CARRET THEN DO
    IF C=EOLIT THEN RETURN N
    IF -1<C_C-$0<=9 THEN N _ N*10+C ELSE GO BADC
  END
  RETURN N
END SIC

%BMP.DOWN(F(), T())
LOCAL J,K,X
  K _ T-F; J_0; X_F(0)
  WHILE DEC K>=0 THEN X<=> F(INC J)
RETURN
END BMP.DOWN



!PUB  - PRODUCT UPDATE BILLING

%PIN

DEF SZ3 AS 3

TABLE MSTBL(0:6)[' MAN','SUPP','MAIN','FRGT','INST','CRED','SALE']
LOCAL %PRIT, %MK.LIT, %RDNAM, %PRNORM, %PRSPEC, %PITM
LOCAL TFN, TNPN:, IFN, INPN:, IBLK, IEOF:, B.DATE, B.LAST, PTYP
DEF IMOD AS ITEM(0)
DEF ISN AS @ITEM(1)
DEF ITS1 AS ITEM(1)
DEF ITS2 AS ITEM(2)
DEF ISCH AS ITEM(3)
DEF IOWN AS ITEM(4)
DEF IDDT AS ITEM(5)
DEF ITDT AS ITEM(6)
DEF ICST AS ITEM(7)
DEF ITRA AS ITEM(8)

DEF I.SZ AS 9   !NO OF WDS / ITEM
LOCAL TITEMS(0:I.SZ)
DEF TMOD AS TITEMS(0)
DEF TSN AS @TITEMS(1)
DEF TTS1 AS TITEMS(1)
DEF TTS2 AS TITEMS(2)
DEF TSCH AS TITEMS(3)
DEF TOWN AS TITEMS(4)
DEF TDDT AS TITEMS(5)
DEF TTDT AS TITEMS(6)
DEF TCST AS TITEMS (7)
DEF TITRA AS TITEMS(8)

LOCAL %WR.THDR, %RD.THDR, %RD.TR, %WR.TR, %R.IBLK
LOCAL  %RJ.STR, %MSP, %PRDATE, %CK.SM
LOCAL %SKP, %MOV.CHARS, %CNV.DATE, %W.IBLK
LOCAL TR.CP, TR.BL1(0:128), TR.BLK(0:255), BL, BILB

DEF TR.SZ AS 20   !SIZE OF TRANSACTION RECORDS
LOCAL TEM.TR(0:TR.SZ), SAV.TR(0:TR.SZ), PREV.TR
DEF TRID AS TEM.TR(0)           !CUST ID INCLUDING P&L IN HIGH ORDER
DEF TR.LBILL AS TEM.TR(1)       !LAST BILLING DATE
DEF TR.DATE AS TEM.TR(2)
DEF TR.FDT AS TEM.TR(3)
DEF TR.TAX AS TEM.TR(4)        !TAX IS 0 FOR MAIN, FREIGHT, INSTAL
DEF TR.PR AS TEM.TR(4)  !PRODUCT IF MAIN, FREIGHT, INSTAL
DEF TR.PRICE AS TEM.TR(5)
DEF TR.PO AS @TEM.TR(6)
DEF TR.SM AS TEM.TR(10)
DEF TR.USE AS @TEM.TR(11)
DEF TR.ST AS TEM.TR(14)
DEF TR.STAT AS TEM.TR(15)
DEF TR.SERIAL AS TEM.TR(15)     !SERIAL # FOR MAIN, FR, INS, MAN, SUP
DEF TR.PTR AS TEM.TR(17)
DEF TR.UPDT AS TEM.TR(18)

DEF TR.PROD AS  TITEMS
DEF TR.SN AS TITEMS(1)


DEF TR.EOF AS HD.BL(1)          !LOGICAL EOF
DEF FR.BEG AS HD.BL(0)          !PTR TO FIRST FRRE BLK-0IF NONE
DEF HD.SZ AS 4

DEF SZ AS 199   !FOR HASH
LOCAL TRANS(), HD.BL(0:HD.SZ), ITEM(), H(SZ), NAFN
LOCAL P, P1, P2, P3, P4, KIL:, NAD (3000), NABUF(1280)
LOCAL ITM.BLK(0:256), CP, JNADR, NAD.MAX, NEW.TR, BLKNO
LOCAL NAM.BF(0:128), NOUT:, OUTFN

DEF T.ID AS TRANS(0)
DEF T.LBIL AS TRANS(1)
DEF T.DATE AS TEM.TR(2)
DEF T.FDT AS TRANS(3)
DEF T.TAX AS TRANS(4)
DEF T.PRICE AS TRANS(5)
DEF T.PO AS @TRANS(6)
DEF T.SM AS TRANS(10)
DEF T.USE AS @TRANS(11)
DEF T.ST AS TRANS(14)
DEF T.STAT AS TRANS(15)
DEF T.PTR AS TRANS(17)
DEF T.BPTR AS HW(@TRANS(17),0)
DEF T.FPTR AS HW(@TRANS(17),1)
DEF T.UPDT AS TRANS(18)

DEF BIL.BIT AS HEX 4000.0000.0
DEF GSA.BIT AS HEX 8000.0000.0

NEW.TR _ 0; NAD.MAX _ 1000
IFN _ OPEN('ITEM.DAT', DIRECT+WORD+INPUT, INPN)
TFN _ OPEN('TRANS.DAT', DIRECT+WORD+UPDATE, TNPN)
MSG('$OUTPUT FILE:  '); GET.FILE.NAME
OUTFN _ OPEN(IMAGE, SEQUEN+OUTPUT+CHARACTER, NOUT,1)
RDNAM(NAD, NABUF, 10)

SET.RWE(IFN, IEOF)
  IBLK _ 1
BST: MSG('$TYPE BILLING DATE:  '); P _ GETLINE(TEL)
     IF B.DATE _ CNV.DATE=0 THEN GO BST

ST: R.IBLK(IBLK); IF IMOD=0 THEN GO ENDI
    PTYP _ CKLIST(CHPT(ITEM,-1), MSTBL, 7)
    PRIT; INC IBLK; GO ST

TNPN: ERMS('CANT OPEN TRANS.DAT')
ENDI: CLOSE.ALL; ERMS('$$E O J$$'); EXIT
INPN:  ERMS('CANT OPEN ITEM.DAT'); GO ENDI
KIL: ERMS('CANT READ ITEM/TRANS'); GO ENDI
IEOF: GO ENDI
NOUT: MSG('CANT OPEN OUTPUT FILE.'); GO ENDI

%PRIT
LOCAL CP, NBUF(0:127), PL, ID, SERN
TABLE SN.TBZ(0:1)['AA','  ']


  IF ITRA#0 THEN RD.TR(BL_ITRA) ELSE [PITM; RETURN]
PDI: BILB _ [T.UPDT BAND BIL.BIT]

  IF BILB>0 THEN T.LBIL _ 721130 ELSE T.LBIL _ 0; WR.TR(BL); PRNORM


NXTR:  IF T.BPTR =0 THEN RETURN
  RD.TR(BL_T.BPTR); GO PDI
END PRIT

%PRNORM
LOCAL SLOT, FND
  [SLOT; FND] _ DOUBLE BINSRCH(TID, NAD, JNADR, 3)
  SETLINE; IF FND=1 THEN [RJINT(TID, 6); RJINT(NAD(SLOT*3+1),18)]
  LJLIT(MKLIT(@IMOD),19)
  LJLIT(MKLIT(ISN),23)
  RJINT(T.LBIL,38)
  RJINT(T.FDT,44); RJINT(T.TAX,50); RJINT(T.PRICE,61)
  [ ;T.SM] _T.SM DIVMOD 10000; RJINT(T.SM,64)
  RJINT(T.DATE,70); LJLIT(MKLIT(@T.STAT),71); LJLIT(MKLIT(T.PO),81)
  IF T.UPDT BAND GSA.BIT <0 THEN LJLIT('Y',101) ELSE LJLIT('N',101)
  LJLIT(MKLIT(@IOWN),102); RJINT(I.DDT, 110)
  RJINT(ICST, 121); IF BILB>0 THEN LJLIT('Y',123) ELSE LJLIT('N',123)
  PUTCH(CARRET, 132); WRITELINE(OUTFN)
 RETURN
END PRNORM

%PITM
  MSG('$MISSING TRANSACTION FOR '); MSG(@I.MOD); MSG('  ')
  MSG(MKLIT(ISN)); RETURN
END PITM

%PRSPEC
END PRSPEC
%MKLIT(LIT)
LOCAL P,C,BUF(0:20),P1
  P _ CHPT(LIT,-1); P1 _ CHPT(BUF,-1)
  IF CH(LIT,0)=0 THEN [NCHV P1 _ EOLIT; RETURN BUF]
A:  IF C_ NCHV P = CARRET THEN [NCHV P1 _ EOLIT; RETURN BUF]
    IF NCHV P1 _ C = EOLIT THEN RETURN BUF ELSE GO A
END MK.LIT



%NAM.ADR(ID)  !GET NAME AND ADR AND PUT IN NAM.BF
LOCAL SLOT, FND, CP
  [SLOT; FND] _ DOUBLE BINSRCH(ID, NAD, JNADR, SZ3)
  IF FND = 0 THEN RETURN 0
  CP _ NAD(SLOT*SZ3+1); SETCP(NAFN, CP)
  RB(NAFN, 128, NAM.BF)
 RETURN 1
END NAM.ADR

%ERMS(LIT)
  MSG("\G"); CLIBUF; MSG(LIT); RETURN
END ERMS

%RJ.STR(LIT,NCHAR)
 LOCAL P3,P2,P1
 [P1; P2] _ DOUBLE MSP(LIT); P3 _ CHPT(LIT,NCHAR-1); CHV P3 _ CARRET
  NCHV P1
 WHILE P1#P2 THEN PCHV P3 _ PCHV P2
 WHILE P1 # P3 THEN PCHV P3 _ $ 
RETURN
END RJ.STR

%MSP(BF())
 LOCAL P3,P4
  P4_P3_CHPT(BF,-1)
  UNTIL(NCHV P4 = CARRET)
  RETURN [P3; P4]
END MSP




%PRDATE(DATE)
LOCAL D,M,Y
  [M; Y] _ DATE DIVMOD 1000
  [D; M] _ M DIVMOD 100
  DOUT(M); PUT($/); DOUT(D); PUT($/); DOUT(Y); RETURN
END PRDATE



%CK.SM
  IF ITS1#TTS1 OR ITS2#TTS2 THEN RETURN 0
  IF IMOD = TMOD THEN RETURN 1 ELSE RETURN 0
END CK.SM

  


%SKP(CHAR)
  UNTIL (NCHV P1 # CHAR); PCHV P1
  RETURN
END SKP

%MOV.CHARS(CHAR,CNT,CAR.XIT:)
LOCAL I,C
  I _ 0
  WHILE C _ NCHV P1 # CHAR THEN DO
    IF INC I <= CNT THEN NCHV P2 _ C
    IF C=CARRET THEN GO CAR.XIT
  END
  NCHV P2 _ CARRET; RETURN
END MOV.CHARS

%CNV.DATE
LOCAL NM(0:4), M, SS:, P4
  IF GLCNT # 9 THEN GO SS; P1 _ P
  P2 _ P4 _ CHPT(NM,-1)
  MOV.CHARS( $/, 10, SS); M _SIC(P4,SS); P2 _ P4
  MOV.CHARS( $/, 10, SS); M _ M*100+SIC(P4,SS)
  RETURN M+(SIC(P1, SS))*10000

SS: ERMS('INCORRECT DATE FORMAT. USE MM/DD/YY$'); RETURN 0
END CNV.DATE


%R.IBLK(N)
LOCAL R, EOF:
  SET.RWE(IFN, EOF)
  [CP; R] _ (N-1)*I.SZ DIVMOD 128  !GET DISC BLOCK CONTAINING ITEM
  SET.CP(IFN, CP _  CP*128); RB(IFN, 256, ITMBLK)
A:    ITEM _ @ITMBLK(R); RETURN
EOF: GO A
END R.IBLK

%W.IBLK(CP)
  SET.CP(IFN, CP); WB(IFN, 256, ITMBLK); RETURN
END W.IBLK

%RD.THDR(T)
!T=1  PUT HEADER (HD.BL) INTO TRBL1 FOR WRITE
!T=0  MOVE HEADER FROM FILE TO (HD.BL)
  SET.RWE(TFN,KIL)
  SET.CP(TFN, 0); RB(TFN, 128, TR.BL1)
  EIF T > 0 THEN MOVE HD.SZ FROM HD.BL TO TR.BL1
  ELSE MOVE HD.SZ FROM TR.BL1 TO HD.BL
  RETURN
END RD.THDR

%RD.TR(N)
  LOCAL R, TEOFR:
  SET.RWE(TFN, TEOFR); MOVE 256 FROM ALL 0 TO TR.BLK
  [TRCP; R] _ (N-1)*TR.SZ DIVMOD 128; SET.CP(TFN, TRCP*128)
  RB(TFN, 256, TR.BLK)
A: TRANS _ @TR.BLK(R+HD.SZ); RETURN
TEOFR:  IF ERRNUM = 10 THEN GO A ELSE GO KIL
END RD.TR

%WR.TR(N)
LOCAL CP, R
  [CP; R] _ (N-1)*TR.SZ DIVMOD 128; SET.CP(TFN, CP*128)
  SET.RWE(TFN, KIL); WB(TFN, 256, TR.BLK)
  IF NEW.TR > 0 THEN WR.THDR; RETURN
END WR.TR

%WR.THDR
  RD.THDR(1); SET.CP(TFN,0); MOVE HD.SZ FROM HD.BL TO TR.BL1
  WB(TFN, 128, TR.BL1); RETURN
END WR.THDR



!READS NAME & ADDRESS FILE AND STORES ID,CP IN ARRAY NAD
!USES BUFFER STARTING AT N

LOCAL %CK.I
LOCAL J2,J1
%RD.NAM(NAD(), N(), Z)
  LOCAL BLKN, NOPN:, NEOF:, B.MAX, I, BTOT, SLOT, FND,J, SFN, P3,EFT
  LOCAL C:
  NAFN _ OPEN ('NAME.ADR', INPUT+DIRECT+WORD, NOPN); SET.RWE(NAFN,NEOF)
  B.MAX _ 128*Z; MOVE NAD.MAX*3 FROM ALL 0 TO NAD

  BLKN _ J _ BTOT _ EFT _ 0; I _ -1; RB(NAFN, B.MAX, N)
A:  UNTIL(N(CK.I)=-1)
    IF N(CK.I)=-1 THEN [JNADR _ J; RETURN BMAX*BLKN+I]
    [SLOT; FND] _ DOUBLE BINSRCH( N(I), NAD, J, 3)
    IF FND>0 THEN GO A ! [MSG('$DUPLICATE ID IN NAME FILE.'); DOUT(N(I));  
!       GO A]
    J1_SLOT*3-1; J2_J*3+2
    IF SLOT<=J THEN REPEAT 3 BMP.DOWN(@NAD(INC J1), @NAD(INC J2))
    NAD(SLOT*3) _ N(I); NAD(SLOT*3+1) _BMAX*BLKN+I; NAD(SLOT*3+2)_0; INC J
    IF J>=NAD.MAX THEN RETURN 0; GO A

%CK.I
    IF INC I # B.MAX THEN RETURN I
  IF EFT=1 THEN GO C; RB(NAFN, B.MAX,N)
B:  BTOT_BTOT+B.MAX; INC BLKN; RETURN I_0
NEOF:  IF ERRNUM =10 THEN [B.MAX _ SIZE(NAFN)-BTOT; INC EFT; GO B]
       MSG('CANT READ FILE NAME.ADR$'); EXIT
NOPN:  MSG('CANT OPEN NAME/ADR FILE.$'); EXIT
END CK.I
C:  RETURN J

END RD.NAM

END PIN
