BLISS  V. 1.0-2.12	13-JUN-73  17:48:52	CGSTM1	CGSTH1.BLI		PAGE 1-1

BC	 !COPYRIGHT 1972,1973, DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS
BMODULECGSTMNSREGVREGFREGBREGDREGSRESERVC	 MODULE	CGSTMNT(SREG=#17,VREG=#15,FREG=#16,BREG=#14,DREGS=4,RESERVE(0,1,2,3)) =
BBEGINC	 BEGIN
BC	 
BC	 
BFORWARDBC	 	FORWARD
BCGASMNCGAGOCGCGOCGLOGICGARIFCGASSICGCMNSC	 		CGASMNT(0),CGAGO(0),CGCGO(0), CGLOGIF(0),CGARIF(0),CGASSI(0),CGCMNSUB(0),
BCGPAUSCGSTOPC	 		CGPAUSE(0),CGSTOP(0),
BCGIOLSCGIOCAC	 		CGIOLST(0),CGIOCALL(1),
BCGIOLACGDCALCGSLISBLDIOIC	 		CGIOLARGS(0),CGDCALL(0),CGSLIST(0),BLDIOIMWD(1),
BCGMTOPCGREADCGWRITCGDECOCGENCOCGRERECGFINDC	 		CGMTOP(0),CGREAD(0),CGWRIT(0),CGDECO(0),CGENCO(0),CGRERE(0),CGFIND(0),
BCGCLOSCGOPENCGENDCGINTRC	                 CGCLOS(0),CGOPEN(0),CGEND(0),CGINTR(0);
BC	 
BC	 
BEXTERNCGERROUTMODPEEPOPCGFNCACGARREC	 	EXTERNAL CGERR,OUTMOD, PEEPOPTIMZ,  CGFNCALL, CGARREF, 
BOPCMGEOPGETAOPGETIOPGARIOPGARAOPGSTAOPGSTIC	 		OPCMGET,OPGETA,OPGETI,OPGARI,OPGARA,OPGSTA,OPGSTI,
BOPGPAUOPGSTPOPGEXIOPGIOLOPGRELOPGBOOOPGCGOOPGCGIC	 		OPGPAU,OPGSTP,OPGEXI,OPGIOL,OPGREL,OPGBOOL,OPGCGO,OPGCGI,
BOPGASROPGVTSOPGAIFZERBLKC	 		OPGASR,OPGVTS,OPGAIF,ZERBLK,
BOPGENDOPGSRROPGSSROPGSRAOPGSSAOPGSESOPGSPRC	                 OPGENDISP,OPGSRR,OPGSSR,OPGSRA,OPGSSA,OPGSES,OPGSPR,
BOPGSKPOPGSKNOPGSLEOPGSKLOPGSKGOPGSGEC	                 OPGSKP,OPGSKN,OPGSLE,OPGSKL,OPGSKG,OPGSGE;
BC	 
BEXTERNC	 	EXTERNAL
BCGETVACGOPGEC	 		CGETVAL,CGOPGEN,
BCGARGETREEPTA1NODEA2NODEA1LABEC1HOPDSPIREGFORCSTMNTC	 		CGARGEVAL,TREEPTR,A1NODE,A2NODE,A1LABEL,C1H,OPDSPIX,REGFORCOMP,CSTMNT;
BC	 
BEXTERNC	 	EXTERNAL
BCGCBOOGENLABDEFLABCGREL1C	 		CGCBOOL,GENLAB,DEFLAB,CGREL1;
BEXTERNCGDOLOCGDOENCGPROECGSFNCGSBPRCGRETUCGARGSC	 	EXTERNAL CGDOLOOP,CGDOEND,CGPROEPI,CGSFN,CGSBPRGM,CGRETURN,CGARGS;
BEXTERNC	 	EXTERNAL
BPBOPWDPSYMPTOBUFFOBUFFAC	 		PBOPWD,PSYMPTR,OBUFF,OBUFFA;
BEXTERNOPGASAOPGASIOPASINC	 EXTERNAL OPGASA,OPGASI,OPASIN;
BEXTERNOPGAI1OPGAI2C	 EXTERNAL OPGAI1,OPGAI2;
BC	 !**COPYRIGHT 1972,1973, DIGITAL EQUIPMENT CORPORATION, MAYNARD, MA**
BC	 !EDITED SEPT 14,1972 - FI
BC	 !EDITED AUG 29,1972 - SRM
BC	 !EDITED AUG 27,1972 - SRM
BC	 !EDITED AUG 18,1972 - SRM
BC	 !EDITED 8/11/72 SRM
BC	 !LAST CHANGED 8/7/72 SRM.
BC	 !FIRST VERSION #40
BGLOBALBINDFIRSVC	 GLOBAL BIND FIRSV = #74;	!11-APRIL-73
BC	 
BC	 !FIRST MUST BE COMPILED IN THE ORDER ...,FIRST,TABLES,...
BC	 !TO SAVE SPACE AND INCREASE COMPILATION SPEED, ALL MACRO DEFINITIONS
BC	 !OF THE FORM "NAME = NUMBER$" HAVE BEEN CHANGED TO BIND'S.
BC	 
BBINDTBLMAXC	 BIND	TBLMAX=3,
BTBLSIZC	 	TBLSIZ=10;
BSTRUCTC	 STRUCTURE
BMATRIXMATRIXIIJIJMATRIXITBLSIZJC	 	MATRIX[I,J]=[I*J](.MATRIX+(.I-1)*TBLSIZ+.J);
BEXTERNMATRIXCHNLTBCHNLTBTBLMAXTBLSIZC	 EXTERNAL MATRIX CHNLTBL[TBLMAX,TBLSIZ];
BBINDBINC	 BIND	BIN=1,
BLSTC	 	LST=2,
BSRCC	 	SRC=3;
BMACROSTATUSIC	 MACRO	STATUS(I)=CHNLTBL[I,0]$,
BDEVICEIC	 	DEVICE(I)=CHNLTBL[I,1]$,
BBUFFERIC	 	BUFFERS(I)=CHNLTBL[I,2]$,
BLISS  V. 1.0-2.12	13-JUN-73  17:48:57	CGSTMNT	FIRST1.BLI		PAGE 1-2

BBUFHDRIC	 	BUFHDR(I)=CHNLTBL[I,3]$,
BBUFPNTIC	 	BUFPNT(I)=CHNLTBL[I,4]$,
BBUFCNTIC	 	BUFCNT(I)=CHNLTBL[I,5]$,
BFILENAIC	 	FILENAME(I)=CHNLTBL[I,6]$,
BEXTENSIC	 		EXTENSION(I)=CHNLTBL[I,7]<18,18>$,
BDSKERRIC	 		DSKERR(I)=CHNLTBL[I,7]<0,18>$,
BPROTIC	 		PROT(I)=CHNLTBL[I,8]<27,9>$,
BDIRECTIC	 	DIRECTORY(I)=CHNLTBL[I,9]$;
BMACROFOUNDFFIRSTSC	 MACRO	FOUNDFLG=	35,1$,	FIRSTSTA=	17,1$,
BTTYDEVENDFILC	 	TTYDEV=	34,1$,	ENDFILE=	16,1$,
BNOWARNWILDLSC	 	NOWARNING=	33,1$,	WILDLSTFIL=	15,1$,
BBIT3INIOLIC	 	BIT3=	32,1$,	INIOLIST=	14,1$,
BBIT4OBJECTC	 	BIT4=	31,1$,	OBJECT=	13,1$,
BBIT5WILDOBC	 	BIT5=	30,1$,	WILDOBJFIL=	12,1$,
BBIT6KA10C	 	BIT6=	29,1$,	KA10=	11,1$,
BBIT7LISTINC	 	BIT7=	28,1$,	LISTING= 10,1$,
BBIT8TAPENDC	 	BIT8=	27,1$,	TAPEND=	9,1$,
BFATALEWINDC	 	FATALERR=	26,1$,	WIND=	8,1$,
BPEEPFLZEROC	 	PEEPFL=	25,1$,	ZERO=	7,1$,
BBTTMSTCROSSRC	 	BTTMSTFL=	24,1$,	CROSSREF=	6,1$,
BCKA10DEBUGC	 	CKA10=	23,1$,	DEBUG=	5,1$,
BSYNONLEXPANDC	 	SYNONLY=	22,1$,	EXPAND=	4,1$,
BERRSWINCLUDC	 	ERRSW=	21,1$,	INCLUDE=	3,1$,
BEOPMACROCC	 	EOP=	20,1$,	MACROCODE=	2,1$,
BSTATFLNOERROC	 	STATFLG=	19,1$,	NOERRORS=	1,1$,
BFELFLGOPTIMIC	 	FELFLG=	18,1$,	OPTIMIZE=	0,1$;
BREGISTCR2R1C	 	REGISTER C = 3, R2 = 2, R1 = 1;
BBINDCHRCFLGREGC	 	BIND CHR = C,FLGREG=0;	!NEEDED FOR BETTER CODE
BC	 !
BC	 
BC	 	%(***DEFINE THE FLAGS USED BY PHASE 2 SKEL AND PHASE 3***)%
BMACROBTTMSTC	 MACRO	BTTMSTFNFLG=FLGREG<BTTMSTFL>$,		!SET FOR BOTTOMOST ROUTINES
BCKA10FC	 	CKA10FLG=FLGREG<CKA10>$,		!SET FOR COMPILING ON KA10
BKA10FLC	 	KA10FLG=FLGREG<KA10>$,			!SET FOR COMPILING FOR KA10
BPEEPFLC	 	PEEPFLG=FLGREG<PEEPFL>$;		!SET FOR PEEPHOLE OPTIMIZER
BC	 						! SHOULD BE USED
BC	 		
BBINDDEGUGC	 	BIND DEGUG = 0;	!FOR DEBUG OPTIONS
BC	 !
BMACROXTRACC	 	MACRO XTRAC = IF DEGUG THEN IF .DTRACE NEQ 0 THEN XCALL()$;
BBINDOPTIMIC	 	BIND OPTIMIZER = 0;
BMACHOPJRSTJRSTLSHCADDC	 	MACHOP JRST = #254,LSHC = #246,ADD=#270;
BMACHOPTTCALLCALLIC	 	MACHOP TTCALL = #051, CALLI = #047;
BMACHOPASHCADDBTLZEAOSMOVEIMOVEIC	 	MACHOP ASHC = #244, ADDB = #273, TLZE = #623, AOS = #350,MOVEI = #201;
BC	 !
BMACROSIGCHAC	 	MACRO SIGCHAR = (DO CHAR() WHILE .C  LEQ " "; .C)$;
BMACROOUTCHRXC	 	MACRO OUTCHR(X) = TTCALL(1,X)$,
BINCHWLXC	 		INCHWL(X) = TTCALL(4,X)$,
BOUTSTRXC	 		OUTSTR(X) = TTCALL(3,X)$;
BC	 !THE MACROS BELOW IMPLEMENT THE FOLLOWING ALGORITHM WITH 2 INSTRUCTIONS
BC	 !
BC	 !	((VREG_(.C - START OF RANGE) MOD 1^18) MOD 1^36) LEQ (END OF RANGE - START OF RANGE)
BC	 !
BMACROC	 MACRO
BALPHAXC	 	ALPHA(X) = MOVEI(VREG,-"A",X) LEQ ("Z"-"A")$,
BDIGITXC	 	DIGIT(X) = MOVEI(VREG,-"0",X) LEQ 9$,
BLCALPHXC	 	LCALPHA(X) = MOVEI(VREG,-("A"+" "),X) LEQ ("Z"-"A")$;
BLISS  V. 1.0-2.12	13-JUN-73  17:49:04	CGSTMNT	FIRST1.BLI		PAGE 1-3

BC	 !
BC	 !	THE MODULE GLOBL CONTAINS ALL THE ARRAY DECLARATIONS AND TABLE (PLIT)
BC	 !	DEFINITIONS THAT WILL BE USED BY SUBSEQUENT ROUTINES THAT ARE
BC	 !	IN SEPARATE FILES. THE PURPOSE OF THAT FILE IS TO PROVIDE ONE 
BC	 !	PLACE WHERE ALL DECLARATIONS THAT ARE GLOBAL TO THE SCOPE OF
BC	 !	THE ENTIRE COMPILER CAN BE FOUND EASILY.
BC	 !
BC	 !
BC	 !	THE FOLLOWING MACROS AND DECLARATIONS PERTAIN TO THE TABLE MANAGEMENT
BC	 !	ROUTINE TBLSEARCH() AND ALSO THE CORE MANAGEMENT ROUTINE CORMAN().
BC	 !
BC	 !	THE FOLLOWING MACROS ARE USED TO DEFINE THE PARAMETERS FOR THE
BC	 !	STRUCTURE DECLARATIONS USED TO DEFINE THE ACCESSING ALGOITHMS
BC	 !	FOR THE DYNAMIC TABLES USED BY THE FORTRAN COMPILER.
BC	 !	THESE MACROS DEFINE FIELDS AND SUB-FIELDS IN TABLE ENTRIES.
BC	 !	FIELDS MAY BE A FULL WORD OR HALF WORD OR LESS.
BC	 !
BMACROFULLC	 	MACRO   FULL = 0,36$;
BMACRORIGHTC	 	MACRO	RIGHT = 0,18$;
BMACROLEFTC	 	MACRO	LEFT = 18,18$;
BMACROC	 	MACRO
BCLINKC	 		CLINK = 0,0,RIGHT$,	%CURRENT LINK FIELD%
BNLINKC	 		NLINK = 1,0,RIGHT$,	%NEW (NEXT) LINK FIELD%
BCW0LC	 		CW0L =	0,0,LEFT$,	%LEFT HALF LINK WORD%
BCW0RC	 		CW0R = 0,0,RIGHT$,
BCW1LC	 		CW1L = 0,1,LEFT$,	%LEFT HALF WORD 1%
BCW1RC	 		CW1R = 0,1,RIGHT$,	%RIGHT HALF WORD1; 1%
BCW1C	 		CW1 =	0,1,FULL$,	%CURRENT FIRST WORD IN ENTRY%
BCW2C	 		CW2 = 0,2,FULL$,	%SECOND WORD%
BCW2RC	 		CW2R =  0,2,RIGHT$,	% "	SECOND WORD (RIGHT HALF)%
BCW2LC	 		CW2L =  0,2,LEFT$,	% "	SECOND WORD LEFT HALF%
BCW3C	 		CW3  =  0,3,FULL$,	% THIRD WORD%
BCW3LC	 		CW3L =	0,3,LEFT$,
BCW3RC	 		CW3R = 	0,3,RIGHT$,
BCW4C	 		CW4  =  0,4,FULL$,	%FOURTH WORD%
BCW4LC	 		CW4L = 	0,4,LEFT$,
BCW4RC	 		CW4R =  0,4,RIGHT$,
BCW5C	 		CW5 = 0,5,FULL$,
BCW5RC	 		CW5R =  0,5,RIGHT$,		!FIFTH WORD
BCW5LC	 		CW5L =  0,5,LEFT$,
BCW6LC	 		CW6L =  0,6,LEFT$,
BCW6RC	 		CW6R =  0,6,RIGHT$,
BCW7LC	 		CW7L =	0,7,LEFT$,
BCW7RC	 		CW7R =	0,7,RIGHT$;
BLISS  V. 1.0-2.12	13-JUN-73  17:49:09	CGSTMNT	FIRST1.BLI		PAGE 2-1

BC	 !	THE FOLLOWING MACROS DEFINE THE IDATTRIBUTES OF AN IDENTIFIER
BC	 !	IDATTRIBUT(X). WHERE X IS ONE OF THE FOLLOWING:
BC	 !
BMACROALLOFTC	 	MACRO	ALLOFTHEM=	18,18$,
BDEFINDC	 		DEFIND	=	#576000$,! *        !101 111 110 000 000 000
BNOTFUNC	 		NOTFUNC	=	#437400$,!    @     !100 011 111 100 000 000
BNOTVARC	 		NOTVAR	=	#500000$,!       +  !101 000 000 000 000 000
BC	 
BNAMNAMC	 		NAMNAM  =	35,1$,	 ! *  @  +  !NAMELIST NAME
BCOMBLC	 		COMBL	=	34,1$,	 ! *  @  +  !COMMON BLOCK NAME
BSFNC	 		SFN	=	33,1$,	 ! *     +  !STATEMENT FUNCTION NAME
BINUSEC	 		INUSE	=	32,1$,	 ! *        !IN USE IN SUBPROGRAM
BSTORDC	 		STORD	=	31,1$,	 ! *  @     !VARIABLE IS STORED INTO
BINASSIC	 		INASSI	=	30,1$,	 ! *  @     !IN ASSIGN STATMENT
BINNAMC	 		INNAM	=	29,1$,	 ! *  @     !IN NAMELIST
BFENTRYC	 		FENTRYNAME 	=	28,1$,	 ! *  @     !NAME IS AN ENTRY INTO A FUNCTION OR SUBROUTINE
BINEQVC	 		INEQV	=	27,1$,	 !    @     !IN EQUIVALENCE
BINCOMC	 		INCOM	=	26,1$,	 !    @     !IN COMMON BLOCK
BINGLOBC	 		INGLOB  =	25,1$,	!INGLOBAL
BSFDUMMC	 		SFDUMMY	=	25,1$,	 !USED AS DUMMY IN STATEMENT FUNCTION
BINDATAC	 		INDATA	=	24,1$,	 !          !IN DATA STATEMENT
BINEXTEC	 		INEXTERN =	23,1$,	 !	    !IN EXTERNAL STATEMENT
BDUMMYC	 		DUMMY =		22,1$,	 !	    !DUMMY PARAMETER
BISPROTC	 		ISPROT = 	21,1$,	 !	    !ARRAY IS TO BE PROTECTED
BLIBRFUC	 		LIBRFUN = 	20,1$,	!	!IDENTIFIER IS A LIBRARY FUNCTION
BISDEFIBC	 		ISDEFIND(B)=(.B[IDATTRIBUT(ALLOFTHEM)] AND DEFIND) NEQ 0$,
BISNOTFBC	 		ISNOTFUNC(B)=(.B[IDATTRIBUT(ALLOFTHEM)] AND NOTFUNC) NEQ 0$,
BISNOTVBC	 		ISNOTVAR(B)=IF (.B[IDATTRIBUT(ALLOFTHEM)] AND NOTVAR) NEQ 0 THEN
BC	 				BEGIN
BC	 					ENTRY[0]_@ISN;
BC	 					IF .B[IDATTRIBUT(SFN)] THEN
BC	 						(ENTRY[1]_SFPLIT;ENTRY[2]_B[IDSYMBOL];ENTRY[3]_ARGPLIT;ERROUT(E4))
BC	 							ELSE (ENTRY[1]_B[IDSYMBOL];ERROUT(E6))
BC	 				END$;
BC	 !
BC	 !
BC	 !THE STRUCTURE ACCESS FOR A SYMBOL TABLE ENTRY
BC	 !
BMACROIDLINKC	 MACRO	IDLINK	 = CLINK$,
BIDOPTIC	 	IDOPTIM	= CW0L$,	!FOR OPTIMIZATION
BIDDIMC	 	IDDIM	= CW0L$,	!PTR TO DIMENSIONS
BIDOPERC	 	IDOPER	= CW1R$,	!OPERATOR FIELD
BIDCHOSC	 	IDCHOS	=0,2,20,5$,	!LOOP #  USED IN DEF PT CALCULATION
BIDUSEDC	 	IDUSED = 0,2,19,1$,	!FLAG USED IN DEF PT CALCULATION
BIDDEFC	 	IDDEF	=0,2,18,1$,
BIDATTRXC	 	IDATTRIBUT(X) = 0,1,X$,
BIDTARGC	 	IDTARGET = CW2$,	!TARGET FOR ADDRESSING IN CODE GEN
BIDADDRC	 	IDADDR  = CW2R$,	!FOR ADDRESSING
BIDSYMBC	 	IDSYMBOL  = CW3$,	!SYMBOL IN SIXBIT
BIDCOMMC	 	IDCOMMON  = CW4L$,	!PTR TO COMMON BLOCK NAME IF IN COMMON
BC	 				!ALSO PTR TO NAMELIST ARG BLK IF NAMELIST
BIDDATVC	 	IDDATVAL=CW4R$,		!FOR DATASTMNT PROCESSING: THIS WD IS USED TO HOLD THE
BC	 				! THE CURRENT *VALUE* OF THIS VARIABLE IF IT IS
BC	 				! A LOOP INDEX FOR A DATA STATEMNT 
BIDFNATC	 	IDFNATTRIB= CW4$,	!ATTRIBUTE-FIELD FOR A FUNCTION NAME (THIS
BC	 				! WORD IS USED FOR IDDATA,IDCOMMON FOR VARS)
BC	 				! THIS FIELD CONTINUES THE ATTRIBUTES OF A
BLISS  V. 1.0-2.12	13-JUN-73  17:49:20	CGSTMNT	FIRST1.BLI		PAGE 2-2

BC	 				! LIBRARY FUNCTION
BC	 				!THE FOLLOWING ARE SUBFIELDS OF IDFNATTRIB FIELD:
BIDINLIC	 	IDINLINFLG=0,4,35,1$,	!FLAG FOR "THIS FN CAN BE EXPANDED IN LINE"
BIDINLIC	 	IDINLINOPR=CW4R$,	!OPERATOR TO BE USED FOR THE IN-LINE FN
BC	 				! NODE THAT CAN BE SUBSTITUTED FOR THIS FN (IF
BC	 				! THERE IS ONE)
BIDSFNLC	 	IDSFNLAB=CW5L$,		!LOCAL LABEL ASSIGNED TO A STATEMENT FUNCTION
BIDCOLIC	 	IDCOLINK = CW5R$;	!LINK TO NEXT SYMBOL IN COMMON BLOCK THAT
BC	 				!THIS SYMBOL IS IN
BC	 
BC	 
BC	 !
BC	 !THE STRUCTURE ACCESS FOR CONSTANT TABLE
BC	 !
BMACROCONLINC	 MACRO	CONLINK	 = CLINK$,
BCONOPEC	 	CONOPER  = CW1R$,	!OPERATOR FIELD
BCNTOBEC	 	CNTOBEALCFLG= 0,1,35,1$,	!FLAG FOR "THIS CONSTANT NEEDS TO BE IN CORE"
BCONADDC	 	CONADDR = CW2R$,	!HISEG ADDR OF THIS CONSTANT
BCONST1C	 	CONST1   = CW3$,	!HIGH ORDER VALUE(CONTAINS REAL PART OR HI ORDER OF DP OR SINGLE REAL )
BCONST2C	 	CONST2	 = CW4$;	!LOW ORDER VALUE (CONTAINS INTEGER VALUE)
BC	 !
BC	 !THE STRUCTURE FOR THE LITERAL TABLE
BC	 !
BMACROLITSIZC	 MACRO	LITSIZ	 = CW0L$,	!SIZ OF LITERAL IN WORDS
BLITLINC	 	LITLINK	 = CLINK$,	!LINK TO NEXT LITERAL
BLITOPEC	 	LITOPER	= CW1R$,	%OPER FIELD OF LITERAL%
BLITFLGC	 	LITFLGS = CW1L$,	!LITERAL FLAG FIELD
BLITEXWC	 	LITEXWDFLG=0,1,34,1$,	!FLAG INDICATING THAT THIS LITERAL HAS AN EXTRA
BC	 				! WD ON THE END CONTAINING ONLY  A NULL (THIS
BC	 				! IS NECESSARY IF THE NUMBER OF CHARS FITTED INTO AN
BC	 				! EXACT NUMBER OF WDS)
BLITADDC	 	LITADDR = CW2$,	!ADDR OF LIT STRING
BLIT1C	 	LIT1=CW3$,	!1ST WD OF THE LITERAL STRING (ASCII - LEFT JUSTIF)
BLIT2C	 	LIT2=CW4$,	!2ND WD OF THE LITERAL STRING (WILL BE FILLED WITH NULLS IF
BC	 			! STRING IS ONLY 1 WD
BC	 			!SUCCESSIVE WDS OF THE LITERAL WILL BE STORED IN WDS FOLLOWING
BLITWDIXC	 	LITWD(IX)=0,2+IX,FULL$,	!TO ACCESS THE NTH WORD OF  A LITERAL
BC	 					! (NOTE THAT THE 1ST WD IS WORD 1)
BFIRSTLC	 	FIRSTLIT = LITTBL[0]$;
BC	 
BC	 	%(***DEFINE A SPECIAL STRUCTURE TO ACCESS THE NTH WORD OF  A LITERAL***)%
BSTRUCTLITERALITERACTCTC	 	STRUCTURE LITERALENTRY[CT]=
BLITERACTC	 	(@.LITERALENTRY + 3 + .CT-1)<0,36>;
BC	 !
BC	 !THE STRUCTURE ACCESS FOR THE COMMON BLOCK NAME TABLE
BC	 !
BMACROCOMSIZC	 MACRO	COMSIZE	 = CW0L$,	!SIZ OF THIS COMMON BLOCK IN WORDS
BCOMLINC	 	COMLINK	 = CLINK$,	!LINK TO NEXT BLOCK
BCOMNAMC	 	COMNAME  = CW1$,	!BLOCK NAME IS SIXBIT
BCOMFIRC	 	COMFIRST  = CW2L$,	!FIRST ENTRY IN BLOCK PTR
BCOMLASC	 	COMLAST  = CW2R$,	!LAST ENTRY IN BLOCK PTR
BCOMADDC	 	COMADDR = CW3L$,	!THE RELATIVE LOCATION OF THIS BLOCK IN COMMON
BNEXCOMC	 	NEXCOMBLK  =CW3R$;	!PTR TO NEXT COMMON BLOCK IN SEQUENCE AS DEFINED
BC	 					!FOR ALLOCATION PURPOSES
BLISS  V. 1.0-2.12	13-JUN-73  17:49:25	CGSTMNT	FIRST1.BLI		PAGE 3-1

BC	 !THE STRUCTURE ACCESS FOR THE EQIVALENCE GROUP TABLE ENTRY
BC	 !
BMACROEQVINCC	 MACRO	EQVINCOM  = 0,0,35,1$,	!IS GROUP IN COMMON BIT
BEQVAVAC	 	EQVAVAIL = 0,0,33,2$,	!AVAILABLE FOR SEARCHING BIT 0=AVAIL
BC	 				!1=OK FOR SEARCH, 2=NOT AVAIL
BEQVLINC	 	EQVLINK  = CLINK$,	!LINK TO NEXT GROUP
BEQVLIMC	 	EQVLIMIT = CW1R$,	!LIMIT VALUE OF EQUIV CLASS
BEQVLASC	 	EQVLAST = CW2R$,	!PTR TO LAST LIST ENTRY IN GROUP
BEQVHEAC	 	EQVHEAD  = CW1L$,	!PTR TO ACTUAL HEAD OF GROUP
BEQVFIRC	 	EQVFIRST = CW2L$,	!PTR TO FIRST ITEM IN GROUP
BEQVADDC	 	EQVADDR = CW3$;	!DISPLACEMEN OF CLASS 'HEAD' FROM 0
BC	 !
BC	 !THE STRUCTURE ACCES FOR THE EQUIVALENCE LIST ENTRY
BC	 !
BMACROEQLINDC	 MACRO	EQLINDIC  = 0,0,35,1$,	!INDICATES SYMBOL NOT DIMENSIONED YET
BEQLLINC	 	EQLLINK  = CLINK$,	!LINK TO NEXT SYMBOL
BEQLIDC	 	EQLID	 = CW1R$,	!PTR TO SYMBOLTABLE
BEQLDISC	 	EQLDISPL  = CW2$,	!DISPLACEMENT OF THIS SYMBOL FROM GROUP HEAD
BEQLLISC	 	EQLLIST = CW1L$;	!PTR TO LIST OF SUBSCRIPTS (CONSTANTS)
BC	 !
BC	 !THE STRUCTURE ACCESS FOR  ENCODED SOURCE (EXECUTABLE PROGRAM) TREE
BC	 !
BMACROSRCIDC	 MACRO	SRCID	 = 0,1,1,7$,	!ID CODE OF STATEMENT
BSRCLINC	 	SRCLINK	 = CLINK$,	!LINK PTR TO NEXT STATEMENT HEADER
BSRCISNC	 	SRCISN	 = CW0L$,	!INTERNAL SEQUENCE NUMBER OF STAEMENT
BSRCFLAC	 	SRCFLAGS = CW1L$,	!FLAGS FOR LABEL TABLE
BINNERDC	 	INNERDOFLG = 0,1,35,1$,	!FLAGS INNERMOST DO STATEMENTS
BSRCOPEC	 	SRCOPER  = CW1R$,	!OPER FIELD- OPERCLS = STATEMENT
BC	 				!OPERSPC = SRCID
BSRCLBLC	 	SRCLBL	 = CW3L$,	!LABEL TABLE POINTER (0 IF NO LABEL)
BSRCOPTC	 	SRCOPT	 = CW2R$,	!PTR TO OPTIMIZATION WORDS USED BY PHAZ 2
BSRCCOMC	 	SRCCOMNSUB = CW2R$,		!COMMON SUBEXPRESSION HERE
BSRCCMPC	 	SRCCMPLX=CW2L$,			!NUMBER OF REGS USED FOR THIS STMNT.
BC	 
BC	 
BC	 	%(***DEFINE A MACRO TO USE IN SPECIFYING OPERATOR FIELDS OF STATEMENT NODES-
BC	 		FOR A STMNT NODE THE OPRCLS FIELD IS IN BITS 23-27, THE SRCID IS
BC	 		IN BITS 28-34
BC	 	******)%
BSTOPEROPCLSOPSRCIC	 	STOPERC(OPCLS,OPSRCID)=
BC	 		(OPCLS^8 OR OPSRCID^1)$,
BC	 
BC	 
BC	 !
BC	 !THE FOLLOWING STRUCTURES ARE AN INTEGRAL PART OF THE STAEMENT HEADER
BC	 !FOR EACH KIND OF EXECUTABLE STATEMENT, ONLY THE ABOVE FIELDS
BC	 !CONTAIN INFORMATION COMMON FOR EACH STAEMENT NODE
BC	 !
BC	 !
BC	 !GO TO STATEMENT FIELDS
BC	 !
BGOTOLBC	 	GOTOLBL	 = CW3R$,	!PTR TO LABEL TABLE
BAGOTOLC	 	AGOTOLBL = CW3R$,	!ASSIGNED GO TO LABEL PTR
BCGOTOLC	 	CGOTOLBL = CW3R$,	!COMPUTED GO TO PTR TO PSEUDO EXPRESSION NODE
BGOTOLIC	 	GOTOLIST = CW4R$,	!PTR TO LIST OF LABELS (OR 0) IF NO LIST
BGOTONUC	 	GOTONUM = CW4L$,	!NUMBER OF LABELL INLIST
BC	 !
BLISS  V. 1.0-2.12	13-JUN-73  17:49:28	CGSTMNT	FIRST1.BLI		PAGE 3-2

BC	 !IF STATEMENT FIELDS
BC	 !
BLIFEXPC	 	LIFEXPR  = CW3R$,	!PTR TO EXPR NODE FOR LOGICAL IF
BLIFSTAC	 	LIFSTATE = CW4R$,	!PTR TO STATEMENT NODE IF TRUE CONDITON
BAIFEXPC	 	AIFEXPR = LIFEXPR$,	!SAME  AS FOR LOGICAL IF
BAIFLESC	 	AIFLESS  = CW4R$,	!LABEL PTR IF LESS
BAIFEQLC	 	AIFEQL  = CW4L$,	!LABEL TO GO TO IF EQUAL
BAIFGTRC	 	AIFGTR  = CW5R$,	!LTO GO TO IF GTR
BAIFREGC	 	AIFREG = 0,5,23,4$,	!REG TO HOLD THE VAL TO BE TESTED
BC	 	!BITS WITHIN THE FLAGS FIELD USED BY ARITHMETIC IF ONLY
BC	 	! (THESE BITS ARE ALL USED ELSEWHERE AS FLAGS DESCRIBING ARG2 OF AN EXPRESSION) 
BAIFLBEC	 	AIFLBEQV=0,EXOPWD,21,2$,	!VAL OF THIS FIELD INDICATES WHCH (IF ANY)
BC	 					! OF THE 3 LABELS ARE EQUAL TO EACHOTHER
BC	 					!(THESE BITS ARE USED IN EXPRS AS A2NEGFLG AND A2NOTFLG)
BAIFLBNC	 	AIFLBNXT=0,EXOPWD,19,2$,	!VAL OF THIS FIELD INDICATES WHICH (IF ANY)
BC	 					! OF THE LABELS INDICATES THE FOLLOWING STATEMENT
BAIFFLGC	 	AIFFLGS=0,EXOPWD,19,4$,		!THE CONCATENATION OF THE AIFLBEQV AND AIFLBNXT FIELDS
BC	 					!(THESE BITS ARE A2SAMEFLG AND A2IMMEDFLG IN EXPRS)
BC	 !
BC	 !ASSIGN STATEMENT FIELDS
BC	 !
BASILBLC	 	ASILBL  = CW3R$,	!PTR TO LABEL IN ASSIGN
BASISYMC	 	ASISYM  = CW4L$,	!PTR TO SYMBOL TABLE
BASILINC	 	ASILINK = CW4R$,	!LINKS ASSIGN STATEMENTS
BC	 !
BC	 !DO STATEMENT FIELDS
BC	 !
BDOPREDC	 	DOPRED	= CW6L$,	!PTR TO DO STATEMENT PREDECESSOR
BDOLBLC	 	DOLBL  = CW3R$,	!PTR TO DO LABEL TERMINUS ENTRY
BDOSYMC	 	DOSYM	 = CW4R$,	!POINTER TO DO INDEX VARIABLE
BDOM1C	 	DOM1	 = CW4L$,	!POINTER TO INITIAL VALUE
BDOM2C	 	DOM2	 = CW5L$,	!POINTER TO UPPER LIMIT
BDOM3C	 	DOM3	 = CW5R$,	!POINTER TO STEP SIZE
BDOSSIZC	 	DOSSIZE = DOM3$,	!ANOTHER NAME FOR STEP SIZE
BDOLPCTC	 	DOLPCTL = CW7R$,	!POINTER TO CONTROL EXPRESSION
BDOCTLVC	 	DOCTLVAR = CW7L$,	!POINTER TO CONTROL VARIABLE
BDOCREGC	 	DOCREG=0,6,0,4$,	!DO LOOP CONTROL REG
BDOIREGC	 	DOIREG=0,6,4,4$,	!DO LOOP INDUCTION VARIABLE REGISTER; 0 IS NONE
BC	 !
BC	 !THE STRUCTURE OF DO LOOP TREE NODES
BC	 !
BPARLVLC	 	PARLVL = CW0L$,	!PTR TO PARALLEL LEVEL DO LOOP
BNEXTDOC	 	NEXTDO = CW0R$,	!PTR TO NEXT DEEPER NESTED DO
BPREVDOC	 	PREVDO = CW1L$,	!PTR TO ENCLOSING DO LOOP
BLEVLC	 	LEVL   = CW1R$,	!NEST LEVEL OF LOOP 
BDOSRCC	 	DOSRC	= CW2R$,	!PTR TO SOURCE TREE OF THE DO
BDONODEC	 	DONODESIZ = 3$,
BC	 	!
BC	 !I/O STATEMENT FIELDS
BC	 !
BIOLINKC	 	IOLINK	= CW1L$,	!LINK I/O STMTS FOR GENERATION OF ARG BLOCKS
BIOARGLC	 	IOARGLBL = CW4L$,	!POINTER TO LABEL FOR STMT ARG BLOCK
BIODODPC	 	IODODPTH = CW4R$,	!DO DEPTH ANALYSIS TREE
BIOUNITC	 	IOUNIT	=  CW5L$,	!POINTER TO UNIT OR CODE FOR UNIT
BIORECOC	 	IORECORD = CW5R$,	!POINTER TO RECONRD FOR RANDOM ACCESS
BIOCNTC	 	IOCNT	= CW5R$,	!FOR ENCODE AND ECODE
BIOLISTC	 	IOLIST	= CW6L$,	!POINTER TO I/O LIST
BLISS  V. 1.0-2.12	13-JUN-73  17:49:32	CGSTMNT	FIRST1.BLI		PAGE 3-3

BIOFORMC	 	IOFORM	= CW6R$,	!POINTER TO FORMAT OR 0 IF UNFORMATTED
BIONAMEC	 	IONAME	= CW6R$,	!POINTER TO NAME LIST FOR NAMELIST 
BIOERRC	 	IOERR	= CW7L$,	!ERR LABEL POINTER
BIOENDC	 	IOEND	= CW7R$,	!END LABEL POINTER
BIOVARC	 	IOVAR	= CW5L$,	!FOR ENCODE/ DECODE
BIOREPTC	 	IOREPT	= CW5R$,	!FOR REPEAT FACTOR ON BACKSPACE ETC.
BC	 !
BC	 !FORMAT STATEMENT FIELDS
BC	 !
BFORSIZC	 	FORSIZ  = CW4L$,	!SIZE OF STRING IN WORDS
BFORLINC	 	FORLINK = CLINK$,
BFOROPEC	 	FOROPER = CW1R$,
BFORADDC	 	FORADDR = CW4R$,	!ADDR OF STRING (IN LOW SEG)
BFMTLINC	 	FMTLINK	= CW5L$,	!LINK TO NEXT FORMAT STATEMENT
BFORSTRC	 	FORSTRING = CW5R$,	!PTR TO CHARACTER STRING
BC	 !
BC	 !DATA STATEMENT NODE
BC	 !
BDATALNC	 	DATALNK = CLINK$,	!LINKS NODES TOGETHER
BDATISNC	 	DATISN = CW0L$,
BDATCOUC	 	DATCOUNT = CW1$,		!NUMBER OF WORDS SPECIFIED FOR INITIALIZATION
BDATITEC	 	DATITEMS = CW2L$,	!PTR LINKED LIST OF DATAITEM NODES
BDATCONC	 	DATCONS = CW2R$,	!PTR TO LINKED LIST OF CONSTANT NODE PTRS
BC	 
BC	 	%(***DEFINE THE FIELDS IN THE LINKED LIST OF CONSTANTS UNDER A DATA STMNT***)%
BDCONSTC	 	DCONST=CW1R$,		!PTR TO CONSTANT TABLE ENTRY
BDATARPC	 	DATARPT=CW1L$,		!CT OF NUMBER OF TIMES THIS CONSTANT IS TO BE STORED
BC	 !
BC	 !
BC	 !NAMELIST NODE
BC	 !
BNAMLINC	 	NAMLINK	=CLINK$,	!LINK TO NEXT NODE
BNAMLIDC	 	NAMLID	=CW2L$,		!PTR TO NAMELIST NAME
BNAMADDC	 	NAMADDR	=CW2R$,		!ALLOCATED ADDRESS OF NAMELIST ARGLIST
BNAMCNTC	 	NAMCNT	=CW1L$,		!NUMBER OF ITEMS IN NAMLIST
BNAMLISC	 	NAMLIST =CW1R$,		!PTR TO LIST OF NAMELIST NAMES
BC	 !
BC	 !OPEN STATEMENT
BC	 !
BOPSIZC	 	OPSIZ=	IOCNT$,		!NUMBER OF OPEN PARAMETERS
BOPLSTC	 	OPLST=	IOLIST$,		!LOCATION OF PARAMETER LIST
BC	 !
BC	 !ASSIGNMENT STATEMENT
BC	 !
BLHEXPC	 	LHEXP	 = CW4R$,	!PTR TO LEFT SIDE EXPRESSION
BRHEXPC	 	RHEXP	 = CW3R$,	!PTR TO RIGHT SIDE EXPR
BASMNTRC	 	ASMNTREG = 0,4,23,4$,
BC	 !
BC	 !STATEMENT FUNCTION FIELDS
BC	 !
BSFNNAMC	 	SFNNAME	= CW3R$,
BSFNLISC	 	SFNLIST = CW4R$,
BSFNEXPC	 	SFNEXPR	= CW4L$,
BC	 !
BC	 !CALL STATEMENT FIELDS
BC	 !
BCALSYMC	 	CALSYM   = CW3R$,	!PTR TO SUBROUTINE NAME SYMBOL
BLISS  V. 1.0-2.12	13-JUN-73  17:49:35	CGSTMNT	FIRST1.BLI		PAGE 3-4

BCALLISC	 	CALLIST	 = CW4R$,	!PTR TO LIST OF ARGS  OR 0
BCALNUMC	 	CALNUM	 = CW4L$,	!NUMBER OF ARGS IN CALL
BC	 !
BC	 !RETURN STATEMENT
BC	 !
BRETEXPC	 	RETEXPR	= CW3R$,		!PARAMETER NUMBER TO RETURN THRU
BC	 !
BC	 !STOP STATEMENT
BC	 !
BSTOPIDC	 	STOPIDENT = CW3R$,	!STOP LOCATION IDENTIFIER
BSTOPLBC	 	STOPLBL=CW4L$,		!LABEL ASSOCIATED WITH THE ARGLIST TO
BC	 				! FOROTS USED FOR THIS STMNT
BC	 !
BC	 !PAUSE STATEMENT
BC	 !
BPAUSIDC	 	PAUSIDENT = CW3R$,	!PAUSE LOCATION IDENTIFIER
BPAUSLBC	 	PAUSLBL=CW4L$,		!LABEL ASSOCIATED WITH THE ARGLIST FOR FOROTS USED
BC	 				! FOR THIS STMNT
BC	 
BC	 !
BC	 !INTERRUPT STATEMENT 
BC	 !
BINTRARC	         INTRARG =  CW3R$,       !PTR TO ARG LIST CONTAINING LABEL
BC	                                 !FOR THIS STATEMENT
BC	 
BC	 !
BC	 !ENTRY STATEMENT FIELDS (ALSO GOOD FOR SUBROUTINE AND FUNCTION)
BC	 !
BENTSYMC	 	ENTSYM	 = CW3R$,	!PTR TO ENTRY NAME
BENTLISC	 	ENTLIST	 = CW4R$,	!PTR TO LIST OF ARGS OR 0
BENTNUMC	 	ENTNUM	 = CW4L$;	!NUM OF ARGS INLIST
BC	 !
BC	 !THE STRUCTURE ACCESS FOR STATEMENT NUMBER TABLE ENTRY
BC	 !
BMACROC	 MACRO	
BSNLINKC	 	SNLINK	 = CLINK$,	!LINK TO NEXT TABLE ENTRY
BSNNXTLC	 	SNNXTLAB = CW0L$,	!PTR TO INTERNAL LABEL WITH SAME ADDR FIELD
BSNOPERC	 	SNOPER	= CW1R$,	!OPER FIELD FOR STATEMENT NUMBER
BSNMADEC	 	SNMADELABL = CW1L$,	!FLAG FOR MADE LABEL
BSNFLAGC	 	SNFLAGS = CW1L$,	!NON-ZERO INDICATES A MADE LABEL
BSNEXTNC	 	SNEXTND = CW2L$,	!FOR EXTENDED DO CONSTRUCTION
BSNREFC	 	SNREF	= CW2$,		!WHOLE WORD USED FOR ADDING 0NE IN TESTENTRY
BSNREFNC	 	SNREFNO = CW2R$,	!NUMBER OF TIMES LABEL REFERENCED
BSNDEFIC	 	SNDEFINED = CW2L$,	!-1 IF DEFINED
BSNADDRC	 	SNADDR = CW2R$,		!THE ABSOLUTE ADDRESS OF THIS LABEL
BSNHDRC	 	SNHDR	 = CW3L$,	!PTR TO SOURCE STATEMENT TREE OF DEFINING STATEMENT
BSNUMBEC	 	SNUMBER	 = CW3R$,	!ACTUAL STATEMENT LABEL
BSNDOLVC	 	SNDOLVL	= CW4R$,	!COUNT OF NESTED DO'S REFERENCING THIS LABEL
BSNDOLNC	 	SNDOLNK	= CW4L$,	!PTR TO LIST OF 1 WORD POINTERS TO DO LOOPS
BSNCADDC	 	SNCADDRWD = CW5$,	!WD OF ENTRY USED BY PEEPHOLER
BSN1STLC	 	SN1STLAB = CW5R$,	!PTR TO 1ST LABEL THAT HAS SAME ADDR
BSNSTATC	 	SNSTATUS = CW5L$;	!STATUS OF THIS LABEL:
BC	 				! 0 - UNRESOLVED
BC	 				! 1 - IN PEEPHOLE BUFFER
BC	 				! 2 - OUT OF PEEPHOLE BUFFER
BC	 				!REFERENCING THIS LABEL
BC	 !
BLISS  V. 1.0-2.12	13-JUN-73  17:49:38	CGSTMNT	FIRST1.BLI		PAGE 3-5

BC	 !
BC	 !
BMACRODOUBLEC	 MACRO	DOUBLE = .SYMTYPE GTR REAL$;	%FOR TESTING DOUBLE OR COMPLEX MODE%
BC	 !
BC	 !	THE FOLLOWING DEFINES THE TABLE NUMBERS AND ENTRY SIZES
BC	 !	FOR THE VARIOUS TABLES BUILT BY THE COMPILER
BC	 !	LEFT HALF IS ENTRY SIZE AND RIGHT HALF IS TABLE NUMBER THAT
BC	 !	IS USED TO IDENTIFY A SPECIFIC TABLE TO THE TABLE SEARCH ROUTINE
BC	 !
BBINDIDSIZC	 	BIND	IDSIZ	= 6,	%SYMBOL TABLE ENTRY LENGTH%
BPOOLSIC	 		POOLSIZ=#2000,	%SIZE OF BUFFER FOR CARD INPUT%
BC	 				%SAME DECLARATION AS IN GLOBAL.BLI%
BEXSIZC	 		EXSIZ	= 4,	%EXPRESSION TABLE ENTRY%
BSNSIZC	 		SNSIZ	= 6,	%STATEMENT NUMBER TABLE ENTRY%
BCONSIZC	 		CONSIZ	= 5,	!CONSTANT SIZ
BLTLSIZC	 		LTLSIZ	= 3,	!LITERAL SIZ
BCOMSIZC	 		COMSIZ	= 4,	!COMMON BLOCK NAME TABLE SIZ
BEQVSIZC	 		EQVSIZ	= 4,	!EQUIV GROUP SIZ
BEQLSIZC	 		EQLSIZ	= 3,	!EQUIV LIST SIZ
BDATSIZC	 		DATSIZ  = 3,	!DATANODE SIZE
BNAMSIZC	 		NAMSIZ	= 3,	!NAMELIST NODE SIZE
BSRCSIZC	 		SRCSIZ	= 4,	!SOURCE TREE HDR SIZ
BGOSIZC	 		GOSIZ	= 1,	!GO TO PART SIZ
BIFSIZC	 		IFSIZ	= 3,	!IF PART
BASISIZC	 		ASISIZ	= 1,	!ASSIGN PART
BDOSIZC	 		DOSIZ	= 4,	!DO PART
BFORMSIC	 		FORMSIZ = 2,	!FORMAT STATEMENT PART
BIOSIZC	 		IOSIZ	= 4,	!IO LIST PART
BASGNSIC	 		ASGNSIZ	= 1,	!ASSIGNMENT PART
BSFSIZC	 		SFSIZ	= 1,	!STATEMENT FUNCTION SIZ
BCALLSIC	 		CALLSIZ	= 1,	!CALL PART
BENTSIZC	 		ENTSIZ	= 1,	!ENTRY PART
BDIMSIZC	 		DIMSIZ	= 4,	!DIMENSION TABLE SIZ
BASSISIC	 		ASSISIZ = 1,
BBACKSIC	 		BACKSIZ = 4,
BCONTSIC	 		CONTSIZ = 0,
BDECOSIC	 		DECOSIZ	= 4,
BOPENSIC	 		OPENSIZ = 4,
BCLOSSIC	 		CLOSSIZ = 4,
BENCOSIC	 		ENCOSIZ = 4,
BENDFSIC	 		ENDFSIZ = 4,
BFINDSIC	 		FINDSIZ = 3,
BREADSIC	 		READSIZ = 4,
BWRITSIC	 		WRITSIZ = 4,
BGOTOSIC	 		GOTOSIZ = 1,
BAGOSIZC	 		AGOSIZ	= 1,
BCGOSIZC	 		CGOSIZ	= 1,
BIFASIZC	 		IFASIZ	= 2,
BIFLSIZC	 		IFLSIZ	= 2,
BINPUSIC	 		INPUSIZ = 4,
BOUTPSIC	 		OUTPSIZ = 4,
BRETUSIC	 		RETUSIZ = 1,
BSTOPSIC	 		STOPSIZ = 2,
BPAUSSIC	 		PAUSSIZ = 2;
BC	 !
BBINDIDTABIDSIZC	 	BIND	IDTAB	= IDSIZ^18 + 0,
BCONTABCONSIZC	 		CONTAB	= CONSIZ^18 + 1,
BLISS  V. 1.0-2.12	13-JUN-73  17:49:40	CGSTMNT	FIRST1.BLI		PAGE 3-6

BCXPTABEXSIZC	 		CXPTAB	= EXSIZ^18 + 2,
BLABTABSNSIZC	 		LABTAB  = SNSIZ^18 +3,
BCOMTABCOMSIZC	 		COMTAB  = COMSIZ^18 + 4,
BSORTABSRCSIZC	 		SORTAB  = SRCSIZ^18 + 5,
BDIMTABDIMSIZC	 		DIMTAB  = DIMSIZ^18 +6,
BEXPTABEXSIZC	 		EXPTAB  = EXSIZ^18 + 7,
BIOLTABC	 		IOLTAB  = 2^18 + 8,
BLITTABC	 		LITTAB  =  9,	!# OF WDS PER ENTRY VARIES DEPENDING ON THE SIZE OF STRING
BC	 !
BC	 !THE FOLLOWING TABLES ARE STATIC AND ALLOCATED TO THE HISEG
BC	 !
BLFUTABC	 		LFUTAB	= 10,	%LIBRARY FUNCTION ID TABLE%
BEQVTABEQVSIZC	 		EQVTAB  = EQVSIZ^18 + 11,	%EQUIVALENCE GROUP TABLE%
BEQLTABEQLSIZC	 		EQLTAB  = EQLSIZ^18 +12,	%EQUIVALENCE LIST TABLE%
BDATATADATSIZC	 		DATATAB = DATSIZ^18 +13,	%DATA GROUP NODE%
BNAMTABNAMSIZC	 		NAMTAB	= NAMSIZ^18+14;	%NAMELIST GROUP TABLE%
BC	 !
BC	 !
BC	 !DEFINE THE ID OF DIFFERENT FORTRAN STATEMENTS
BC	 !
BC	 	!START OF FIRST GROUP (REGULAR)
BBINDASGNIDC	 BIND	ASGNID	= 000,	!ASSIGNMENT
BASSIIDC	 	ASSIID	= 001,	!
BCALLIDC	 	CALLID	= 002,	!
BCONTIDC	 	CONTID	= 003,	!
BDOIDC	 	DOID	= 004,	!
BENTRIDC	 	ENTRID	= 005,	!
BCOMNSUC	 	COMNSUB	= 006,	!
BC	 	!END OF FIRST GROUP
BC	 	!START OF REGULAR BRANCHING
BGOTOIDC	 	GOTOID	= 007,	!
BAGOIDC	 	AGOID	= 008,	!
BCGOIDC	 	CGOID	= 009,	!
BIFAIDC	 	IFAID	= 010,	!
BIFLIDC	 	IFLID	= 011,	!
BRETUIDC	 	RETUID	= 012,	!
BSTOPIDC	 	STOPID	= 013,	!
BC	 	!END OF SECOND GROUP
BC	 	!START OF I/O BRANCHING
BREADIDC	 	READID	= 014,	!
BWRITIDC	 	WRITID	= 015,	!
BDECOIDC	 	DECOID	= 016,	!
BENCOIDC	 	ENCOID	= 017,	!
BREREDIC	 	REREDID	= 018,	!
BFINDIDC	 	FINDID	= 019,	!
BCLOSIDC	 	CLOSID	= 020,
BINPUIDC	 	INPUID	= 021,	!
BOUTPIDC	 	OUTPID	= 022,	!
BC	 	!END OF THIRD GROUP
BC	 	!START OF I/O NON-BRANCHING
BBACKIDC	 	BACKID	= 023,
BBKFILIC	 	BKFILID	= 024,
BREWDIDC	 	REWDID	= 025,
BSKFILIC	 	SKFILID	= 026,
BSKRECIC	 	SKRECID	= 027,
BUNLODIC	 	UNLODID	= 028,
BRELSIDC	 	RELSID	= 029,
BLISS  V. 1.0-2.12	13-JUN-73  17:49:43	CGSTMNT	FIRST1.BLI		PAGE 3-7

BENDFIDC	 	ENDFID	= 030,
BC	 	!END OF FOURTH GROUP
BC	 	!START OF MISC.
BENDIDC	 	ENDID	= 031,
BPAUSIDC	 	PAUSID	= 032,
BOPENIDC	 	OPENID	= 033,
BSFNIDC	 	SFNID	= 034,
BFORMIDC	 	FORMID	= 035,	!
BBLTIDC	 	BLTID	= 036,	!
BOVRLYIC	 	OVRLYID	= 037, !
BINTRIDC	         INTRID  = 038; !INTERRUPT STATEMENT ID
BC	 !
BC	 !DEFINE DATA FOR BUILDING SOURCE TREE ENTRIES FOR STATEMENTS
BC	 !	LEFT HALF IS NUMBER OF WORDS FOR EACH TYPE OF STATEMENT
BC	 !	RIGHT HALF IS ID OF STATEMENT
BC	 !
BBINDASGNDAASGNSISRCSIZASGNIDC	 BIND	ASGNDATA	= (ASGNSIZ+SRCSIZ)^18 + ASGNID,
BSFNDATSFSIZSRCSIZSFNIDC	 	SFNDATA		= (SFSIZ+SRCSIZ)^18 + SFNID,
BASSIDAASSISISRCSIZASSIIDC	 	ASSIDATA	= (ASSISIZ+SRCSIZ)^18 + ASSIID,
BBACKDABACKSISRCSIZBACKIDC	 	BACKDATA	= (BACKSIZ+SRCSIZ)^18 + BACKID,
BBKFILDIOSIZSRCSIZBKFILIC	 	BKFILDATA	= (IOSIZ+SRCSIZ)^18 + BKFILID,
BSKIPDAIOSIZSRCSIZSKRECIC	 	SKIPDATA	= ( IOSIZ+SRCSIZ)^18 + SKRECID,
BSKIPFDIOSIZSRCSIZSKFILIC	 	SKIPFDATA	= (IOSIZ+SRCSIZ)^18 + SKFILID,
BREWIDAIOSIZSRCSIZREWDIDC	 	REWIDATA	= (IOSIZ + SRCSIZ)^18 + REWDID,
BUNLODAIOSIZSRCSIZUNLODIC	 	UNLODATA	= (IOSIZ +SRCSIZ)^18 + UNLODID,
BREREDAIOSIZSRCSIZREREDIC	 	REREDATA	= (IOSIZ + SRCSIZ)^18 + REREDID,
BCALLDACALLSISRCSIZCALLIDC	 	CALLDATA	= (CALLSIZ+SRCSIZ)^18 + CALLID,
BCONTDACONTSISRCSIZCONTIDC	 	CONTDATA	= (CONTSIZ+SRCSIZ)^18 + CONTID,
BDECODADECOSISRCSIZDECOIDC	 	DECODATA	= (DECOSIZ+SRCSIZ)^18 + DECOID,
BOPENDAOPENSISRCSIZOPENIDC	 	OPENDATA	= (OPENSIZ+SRCSIZ)^18 + OPENID,
BCLOSDACLOSSISRCSIZCLOSIDC	 	CLOSDATA	= (CLOSSIZ+SRCSIZ)^18 + CLOSID,
BDODATADOSIZSRCSIZDOIDC	 	DODATA		= (DOSIZ+SRCSIZ)^18 + DOID,
BENCODAENCOSISRCSIZENCOIDC	 	ENCODATA	= (ENCOSIZ+SRCSIZ)^18 + ENCOID,
BENDFDAENDFSISRCSIZENDFIDC	 	ENDFDATA	= (ENDFSIZ+SRCSIZ)^18 + ENDFID,
BENTRDAENTSIZSRCSIZENTRIDC	 	ENTRDATA	= (ENTSIZ+SRCSIZ)^18 + ENTRID,
BFINDDAFINDSISRCSIZFINDIDC	 	FINDDATA	= (FINDSIZ+SRCSIZ)^18 + FINDID,
BREADDAREADSISRCSIZREADIDC	 	READDATA	= (READSIZ+SRCSIZ)^18 + READID,
BWRITDAWRITSISRCSIZWRITIDC	 	WRITDATA	= (WRITSIZ+SRCSIZ)^18 + WRITID,
BGOTODAGOTOSISRCSIZGOTOIDC	 	GOTODATA	= (GOTOSIZ+SRCSIZ)^18 + GOTOID,
BAGODATAGOSIZSRCSIZAGOIDC	 	AGODATA		= (AGOSIZ+SRCSIZ)^18 + AGOID,
BCGODATCGOSIZSRCSIZCGOIDC	 	CGODATA		= (CGOSIZ+SRCSIZ)^18 + CGOID,
BIFADATIFASIZSRCSIZIFAIDC	 	IFADATA		= (IFASIZ+SRCSIZ)^18 + IFAID,
BIFLDATIFLSIZSRCSIZIFLIDC	 	IFLDATA		= (IFLSIZ+SRCSIZ)^18 + IFLID,
BINPUDAINPUSISRCSIZINPUIDC	 	INPUDATA	= (INPUSIZ+SRCSIZ)^18 + INPUID,
BOUTPDAOUTPSISRCSIZOUTPIDC	 	OUTPDATA	= (OUTPSIZ+SRCSIZ)^18 + OUTPID,
BENDDATSRCSIZENDIDC	 	ENDDATA		= SRCSIZ^18+ENDID,
BRETUDARETUSISRCSIZRETUIDC	 	RETUDATA	= (RETUSIZ+SRCSIZ)^18 + RETUID,
BSTOPDASTOPSISRCSIZSTOPIDC	 	STOPDATA	= (STOPSIZ+SRCSIZ)^18 + STOPID,
BFORMDAFORMSISRCSIZFORMIDC	 	FORMDATA	= (FORMSIZ+SRCSIZ)^18 + FORMID,
BPAUSDAPAUSSISRCSIZPAUSIDC	 	PAUSDATA	= (PAUSSIZ+SRCSIZ)^18 + PAUSID;
BC	 
BC	 
BC	 !
BC	 !	BIND	ENTRSIZ = PLIT(IDTAB,CONTAB,EXPTAB,LABTAB,COMTAB,
BC	 !				SORTAB,DIMTAB,IOLTAB,LITTAB);
BC	 !
BC	 !	THE FOLLOWING MACROS MAY BE NEEDED FOR INDEFINITE SIZE ENTRIES
BLISS  V. 1.0-2.12	13-JUN-73  17:49:56	CGSTMNT	FIRST1.BLI		PAGE 3-8

BC	 !	AND FOR INDEFINITE LEVEL OF INDIRECT REFERENCE
BC	 !
BMACROCWDLNC	 	MACRO	CWD(L,N) = L,N,FULL$;
BC	 !
BC	 !	L - MEANS LEVEL OF INDIRECTION
BC	 !	N - MEANS THE N-TH WORD IN THE ENTRY
BC	 !
BC	 !
BC	 !!	THE FOLLOWING STRUCTURE DECLARATION DEFINES THE HASH TABLES
BC	 !	FOR THE SYMBOL TABLE THE CONSTANT TABLE,EXPRESSION TABLE AND
BC	 !
BC	 !
BSTRUCTHTABLEHTABLEIIHTABLEIRIGHTC	 	STRUCTURE HTABLE[I] = (.HTABLE +.I)<RIGHT>;
BC	 
BC	 !	DEFINE THE TABLE SIZES
BBINDSSIZC	 	BIND	SSIZ =	79,	%SYMBOL HASH TABLE%
BCSIZC	 		CSIZ =	37,	%CONSTANTS HASH TBLE%
BESIZC	 		ESIZ =	79,	%EXPRESSION HASH%
BLASIZC	 		LASIZ = 37,	%STATMENT NUMBER HASH SIZE%
BNSIZC	 		NSIZ = 17,	%NAMELIST HASH SIZE%
BSOSIZC	 		SOSIZ = 1,	%NO HASH TABLE FOR ENCODED SOURCE%
BDISIZC	 		DISIZ = 1,	%NO HASH TABLE FOR DIMENSIONS%
BDASIZC	 		DASIZ = 1,	%NO HASH TABLE FOR DATA STATEMENT%
BLISIZC	 		LISIZ = 1;	%LITERAL TABLE IS NOT HASHED%
BC	 !
BEXTERNSYMTBLSSIZCONTBLCSIZEXPTBLLABTBLLASIZC	 	EXTERNAL SYMTBL[SSIZ],CONTBL[CSIZ],EXPTBL[1],LABTBL[LASIZ],
BLITTBLLISIZNAMTBLNSIZSRCTBLSOSIZC	 		LITTBL[LISIZ],NAMTBL[NSIZ],SRCTBL[SOSIZ],
BDIMTBLDISIZDATTBLDASIZC	 		DIMTBL[DISIZ],DATTBL[DASIZ];
BC	 !
BC	 !	BIND LISTX = PLIT(SYMTBL,CONTBL,EXPTBL,LABTBL,SRCTBL,
BC	 !			DIMTBL,DATTBL,NAMTBL,LITTBL);
BMAPHTABLESYMTBLSYMTBLCONTBLLABTBLNAMTBLC	 	MAP	HTABLE SYMTBL: CONTBL: LABTBL:  NAMTBL;
BC	 !
BC	 !
BC	 !	THE NEXT STRUCTURE DEFINES THE ACCESSING ALGORITHM FOR THE
BC	 !	LINKED LIST STRUCTURES THAT ARE THE ACTUAL TABLES CONTAINING
BC	 !	SYMBOL ENTRIES,CONSTANT ENTRIES,EXPRESSION ENTRIES ETC.
BC	 !
BSTRUCTBASEBASEIIJKLC	 	STRUCTURE BASE[I,J,K,L] =
BCASEIOFSETC	 			CASE .I OF SET
BBASEJKLC	 	%0%	 (@.BASE +.J)<.K,.L>;	%LEVEL 1 ENTRY POINTED TO BY BASE%
BBASEJKLC	 	%1%	(@@.BASE +.J)<.K,.L>	%LEVEL 2 ENTRY%
BTESC	 			TES;
BC	 !
BC	 !!	THE PARAMETERS ARE DEFINED AS FOLLOWS
BC	 !	I - THE LEVEL OF INDIRCTION
BC	 !		0 - MEANS CONTENTS OF BASE
BC	 !		1 - MEANS CONTENTS OF ENTRY POINTED TO BY BASE
BC	 !		2 - CONTENTS OF ENTRY POINTED TO BY RIGHT HALF OF
BC	 !			ADDRESS POINTED TO BY BASE
BC	 !
BC	 !	J - THE J-TH WORD IN THE TABLE ENTRY POINTED TO
BC	 !		CURRENT RANGE IS 0 TO 4
BC	 !		J=0 MEANS POINT TO CHAIN FIELD (RIGHT HALF OF FIRST WORD)
BC	 !
BC	 !	MAP THE POINTERS TO THE BASE
BC	 !
BLISS  V. 1.0-2.12	13-JUN-73  17:50:00	CGSTMNT	FIRST1.BLI		PAGE 3-9

BEXTERNBASEBASEPTBASEPTC	 	EXTERNAL BASE BASEPTR;
BC	 !
BC	 !******
BC	 
BC	 !
BC	 !
BC	 !******
BC	 
BC	 !
BC	 !
BC	 !THE FOLLOWING GLOBALS ARE USED FOR SEMANTICS CHECKING
BC	 !THEY CONTAIN POINTERS TO TABLE ENTRIES FOR THE LAST COMMON BLOCK
BC	 !NAME, THE LAST LITERAL, THE LAST SYMBOL ENTERED ETC.
BC	 !
BEXTERNDTRACEJOBFFJOBRELXAREAXCALLXSTAKXALTXTYPTABC	 	EXTERNAL DTRACE,JOBFF,JOBREL,XAREA,XCALL,XSTAK,XALTX,TYPTAB;
BC	 !
BEXTERNC	 	EXTERNAL
BCOMBLKC	 		COMBLKPTR,	!POINTERS FOR LAST AND FIRST COMMMON BLOCKS
BLITPOIC	 		LITPOINTER,	!LAST AND FIRST LITERALS
BSYMPTRC	 		SYMPTR,	!LAST AND FIRST SYMBOLS
BSORCPTC	 		SORCPTR,	!LAST AND FIRST SOURCE ENTRIES
BLASTEXC	 		LASTEXP,	!LAST EXPRESSION ENTRY
BLASTDIC	 		LASTDIM,	!LAST DIMENSION ENTRY
BCONSPTC	 		CONSPTR,	!LAST AND FIRST CONSTANTS
BLABLPTC	 		LABLPTR,	!FIRSTAND LAST STATEMENT LABELS
BSPACEFC	 		SPACEFREE;	!AMOUNT OF FREE LOWSEG SPACE
BEXTERNC	 	EXTERNAL
BSRCHONC	 		SRCHONLY,	!FLAG FOR TBLSEARCH FOR SEARCH ONLY MODE
BISNC	 		ISN,		!INTERNAL SOURCE SEQUENCE NUMBER
BIDOFSTC	 		IDOFSTATEMENT,	!IDENTIFICATION OF EXECUTABLE STEMENT IN TREE
BLABLOFC	 		LABLOFSTATEMENT;!SOURCE STATEMENT NUMBER POINTER
BC	 				!IF CURRENT STATEMENT HAS ONE - OR 0
BEXTERNC	 	EXTERNAL
BDLOOPTC	 		DLOOPTREE,	!PTR TO DO LOOP NEST TREE
BLASLVLC	 		LASLVL0,	!PTR TO LAST LEVEL 0 NEST SEEN
BDELETPC	 		DELETPTR;	!PTR TO DELETED TABLE ENTRY FOR DELETE ROUTINE
BEXTERNC	 	EXTERNAL
BSYMTYPC	 		SYMTYPE,	!TYPE OF CRRENT SYMBOL
BPOINTEC	 		POINTER	,	!USEFUL POINTER
BLIBFUNC	 		LIBFUNTAB,	!DEFINES THE FUNCTION NAMES IN LIBRARY
BLIBATTC	 		LIBATTRIBUTES,	!DEFINES THE LIBRARY ATTRIBURES
BONEAFTC	 		ONEAFTERLIB,	!END OF THE LIB TABLE ADDRESS
BNAMEC	 		NAME,		!NAME OF THE TABLE FOR TBLSEARCH
BC	 				!AND SIZ OF ENTRY IN LEFT HALF
BEQVPTRC	 		EQVPTR,		!PTR TO FIRST AND LAST EQIV GROUPS
BFORMPTC	 		FORMPTR,	!PTR TO FIRST AND LAST FORMAT TABLE ENTRIES
BDATASPC	 		DATASPTR,	!PTR TO LINKED LIST OF DATA STATEMENT NODES
BIOLSPTC	 		IOLSPTR,	!PTR TO LINKED IO STATEMENTS
BENTRYC	 		ENTRY;		!THE GLOBAL PARAMETER VECTOR FOR TBLSEARCH
BC	 
BC	 !*****
BMACROFIRSTSC	 	MACRO	FIRSTSRC = SORCPTR<LEFT>$,
BLASTSRC	 		LASTSRC = SORCPTR<RIGHT>$,
BIOFIRSC	 		IOFIRST = IOLSPTR<LEFT>$,	!POINTS TO FIRST IO STATEMENT
BIOLASTC	 		IOLAST = IOLSPTR<RIGHT>$,	!POINTS TO LAST IO STATEMENT SEEN SO FAR
BDATFIRC	 		DATFIRST	= DATASPTR<LEFT>$,
BDATLASC	 		DATLAST	= DATASPTR<RIGHT>,
BLISS  V. 1.0-2.12	13-JUN-73  17:50:06	CGSTMNT	FIRST1.BLI		PAGE 3-10

BC	 		FIREQVGROUP = EQVPTR<LEFT>$,
BLASEQVC	 		LASEQVGROUP = EQVPTR<RIGHT>$,
BLASCOMC	 		LASCOMBLK = COMBLKPTR<RIGHT>$,
BFIRCOMC	 		FIRCOMBLK = COMBLKPTR<LEFT>$,
BDELETFC	 		DELETFIELD = CW0L$,	!IF LEFT HALF OF FIRST WORD OF ENTRY IS -1 THEN ENTRY IS DELETED
BFOUNDC	 		FOUND = -1$,
BNOTFOUC	 		NOTFOUND = 0$,
BFLAGC	 		FLAG = FLGREG<FOUNDFLG>$,	!FLAG FOR TBLSEARCH FOUND(-1) OR NOTFOUND(0)
BSIZOFEC	 		SIZOFENTRY = NAME<LEFT>$,
BBASEPOC	 		BASEPOINT = BASEPTR$;
BC	 !
BBINDBPRBASEPTC	 	BIND	BPR = BASEPTR,	!FOR THE ENCLOSING ROUTINES
BXCONSTC	 		XCONSTANT = 12,
BXSYMBOC	 		XSYMBOL = 8,
BXLABLLC	 		XLABLL = 4,
BEXPRESC	 		EXPRES = 0;
BC	 !
BGLOBALBINDTABLVC	 GLOBAL BIND TABLV=105;		!VERSION DATE 20-APRIL-73
BC	 !EDITED 2-OCT-72 -FI
BC	 !EDITED AUG 30,1972 - SRM
BC	 !EDITED AUG 25,1972 - SRM
BC	 !EDITED AUG 24,1972 (22:45) - SRM
BC	 !EDITED AUG 24,1972 - SRM
BC	 !EDITED AUG 18, 1972 (21:15) - SRM
BC	 !EDITED AUG 14,1972 - SRM
BC	 !EDITED AUG 10, 1972 - SRM
BC	 !EDITED AUG 9,1972 - SRM
BC	 
BC	 
BC	 !COPYRIGHT 1972,1973, DIGITAL EQUIPMENT CORPORATION, MAYNARD MA**
BC	 !AUTHOR: S. MURPHY
BC	 !
BC	 
BBINDDEBUGFC	 BIND DEBUGFLG=1;			!COMPILE SWITCH TO LEAVE CONSISTENCY CHECKS IN
BLISS  V. 1.0-2.12	13-JUN-73  17:50:07	CGSTMNT	TABLES.BLI		PAGE 4-1

BC	 
BC	 %(****************************************
BC	 	TO OPTIMALLY TEST WHOLE-WD FLAGS FOR TRUE AND FALSE
BC	 ****************************************)%
BBINDTRUEC	 BIND	TRUE= -1,
BFALSEC	 	FALSE= 0;
BMACROTRUTHXC	 MACRO	TRUTH(X)= X NEQ 0$,
BFALSITXC	 	FALSITY(X)= X EQL 0$;
BC	 
BBINDAOBINCC	 BIND	AOBINCR=#1000001;			!INCREMENT FOR AOBJN
BC	 
BC	 
BC	 %(****************************************
BC	 	DEFINE BYTES FOR WHOLE, LEFT HALF, AND RIGHT HALF
BC	 ****************************************)%
BMACROWHOLEC	 MACRO 	WHOLE=0,36$ ;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:50:08	CGSTMNT	TABLES.BLI		PAGE 5-1

BC	 		
BC	 %(**********************************************************************
BC	 	STRUCTURE FOR AN EXPRESSION NODE
BC	 ************************************************************************)%
BC	 
BC	 
BC	 
BC	 %(************************************************************
BC	 	DEFINE THE FIELDS AND SUBFIELDS IN AN EXPRESSION NODE
BC	 ************************************************************)%
BC	 
BBINDEXOPWDC	 BIND EXOPWD=1;			!WORD IN WHICH THE OPERATOR FIELD
BC	 					! AND FLAGS FIELD
BC	 					! ARE CONTAINED (USE A MACRO ONLY BECAUSE
BC	 					! WHEN THIS NUMBER CHANGES A LARGE
BC	 					! NUMBER OF SUBFIELD DEFINITIONS
BC	 					! MUST BE CHANGED)
BC	 %(*****DEFINE MAIN FIELDS****************************)%
BMACROC	 MACRO
BFIRSTWC	 	FIRSTWORD=0,0,FULL$,
BPARENTC	 	PARENT=0,0,RIGHT$,		!PTR TO PARENT-NODE
BOPERATC	 	OPERATOR=0,EXOPWD,RIGHT$,		!OPERATOR FIELD
BEXPFLAC	 	EXPFLAGS=0,EXOPWD,LEFT$,	
BOPERWOC	 	OPERWORD=0,EXOPWD,WHOLE$,
BTARGETC	 	TARGET=0,2,WHOLE$,
BARGWDC	 	ARGWD=0,3,WHOLE$,			!WD HOLDING PTRS TO THE 2 ARGS
BARGWDOC	 	ARGWDOFFSET=3$,
BARG1PTC	 	ARG1PTR=0,3,LEFT$,
BARG2PTC	 	ARG2PTR=0,3,RIGHT$;
BMACROC	 MACRO
BCOMPLEC	 	COMPLEXITY=0,0,LEFT$;		!THIS FIELD IS USED ONLY DURING REGISTER ALLOCATION
BC	 
BC	 %(**********SUBFIELDS IN OPERATOR FIELD*************************)%
BMACROC	 MACRO
BVALTYPC	 	VALTYPE=0,EXOPWD,13,5$,		!TYPE FOR VALUE
BOPRCLSC	 	OPRCLS=0,EXOPWD,8,5$,		!CLASS OF OPERATOR
BOPERSPC	 	OPERSP=0,EXOPWD,5,3$,		!SPECIFIC OPERATOR WITHIN CLASS
BC	 
BC	 
BC	 	%(***NOTE THAT OF THE 3 FREE BITS AT THE RIGHT END OF THE OPERATOR FIELD,
BC	 		BIT 35 IS USED AS A SPECIAL FLAG BIT IN
BC	 		1. TYPE-CONVERSION NODES: FLAG FOR NO CONVERSION
BC	 	*******)%
BC	 
BC	 	%(***SUBFIELDS OF OPERSP FIELD*****)%
BOPRSP1C	 	OPRSP1=0,EXOPWD,6,2$,		!1ST 2 BITS OF OPERSP (THIS FIELD IS 00 FOR
BC	 					! ADD AND SUB, 01 FOR MUL AND DIV
BOPRSP2C	 	OPRSP2=0,EXOPWD,5,2$,		!LAST 2 BITS OF OPERSP FIELD -
BC	 					! USED TO DIFFERENTIATE ADD,SUB,MUL,DIV
BC	 					! ALSO USED IN TYPE CONVERSION NODES TO DIFFERENTIATE
BC	 					! FROMINT, FROMREL, FROMDBLPRC,
BC	 					! FROMCMPLX
BOPRSBIC	 	OPRSBIT0=0,EXOPWD,7,1$,		!1ST BIT OF OPERSP FIELD - FOR AN ARITH
BC	 					! NODE, THIS BIT IS SET ONLY FOR OPERSP EXPONEN
BC	 					! FOR A TYPE-CONVERSION NODE THIS BIT IS SET
BC	 					! FOR FROMINT,FROMREAL,FROMDBLPRC,FROMCMPLX
BC	 					!  AND NOT SET FOR FROMOCT,FROMCTL,FROMLIT,FROMDOCT
BLISS  V. 1.0-2.12	13-JUN-73  17:50:12	CGSTMNT	TABLES.BLI		PAGE 5-2

BOPRSBIC	 	OPRSBIT2=0,EXOPWD,5,1$,		!3RD BIT OF OPERSP FIELD - FOR AN ARITH
BC	 					! NODE, THIS BIT IS SET ONLY FOR SUB AND MUL
BOPR1C	 	OPR1=0,EXOPWD,5,8$,		!OPRCLS AND OPERSP FIELDS CONCATENATED
BOPR2C	 	OPR2=0,EXOPWD,6,7$;		!OPRCLS FIELD AND 1ST 2 BITS OF OPERSP FIELD
BC	 
BC	 	%(***SUBFIELDS OF THE ABOVE "MAIN" SUBFIELDS***)%
BMACROC	 MACRO
BVALTP1C	 	VALTP1=0,EXOPWD,15,2$,		!MIDDLE 2 BITS OF VALTYPE ARE
BC	 					! ALL THATS NEEDED FOR GETA1OPIX AND ARITHOPIX
BVALTP2C	 	VALTP2=0,EXOPWD,15,3$,		!FIRST 3 BITS OF VALTYPE ARE
BC	 					! IDENTICAL TO THE OPERSP FIELD FOR A TYPECNV
BC	 					! NODE TO CONVERT FROM THAT VALTYPE
BDBLFLGC	 	DBLFLG=0,EXOPWD,16,1$,		!THE 2ND BIT OF VALTYPE IS FLAG
BC	 					! FOR 2 WD VAL (DOUBLE PREC OR COMPLEX)
BSDBLFLC	 	SDBLFLG=0,EXOPWD,6,1$;		!THE 2ND BIT OF OPERSP FOR A
BC	 					!NODE OF OPRCLS "TYPECNV" IS FLAG FOR SOURCE
BC	 					!IS A 2 WD VAL
BC	 
BMACROC	 MACRO
BBOOLOPC	 	BOOLOPR=0,EXOPWD,5,2$,		!BOOLEAN OPERATOR IS SPECIFIED BY RIGHT
BC	 					! 2 BITS OF OPERSP FIELD
BBOOLCLC	 	BOOLCLS=0,EXOPWD,6,1$,		!BOOLEAN CLASS (AND/OR OR XOR/EQV) IS
BC	 					! SPECIFIED BY THE LEFTMOST OF THESE 2
BBOPRFLC	 	BOPRFLG=0,EXOPWD,5,1$;		!THE 2ND DIVIDES BOOLEANS INTO 2 OTHER
BC	 					! CLASSES - OR/XOR AND AND/EQV
BC	 
BMACROPARENLC	 MACRO	PARENLSTFLG=0,EXOPWD,7,1$;	!FLAG FOR NAME WHICH SHOULD HAVE
BC	 					! AN ARGLST FOLLOWING (THIS BIT IS
BC	 					! 1ST BIT OF OPERSP FIELD OF A DATA ITEM)
BMACROFORMLFC	 MACRO	FORMLFLG=0,EXOPWD,5,1$;	!IN OPERSP FIELD FOR A DATA ITEM, FLAG
BC	 					! FOR "FORMAL" (NOTE HOWEVER THAT THIS BIT
BC	 					! IS ALSO SET IN THE OPERSP FIELD OF A TEMPORARY)
BC	 
BC	 	%(****MACRO TO CONSTRUCT AN "OPR1" FIELD*****)%
BMACROC	 MACRO
BOPR1COPCLSOPSPC	 	OPR1C(OPCLS,OPSP)=(OPCLS^3 OR OPSP)$;
BMACROOPR2COPCLSOPSPC	 MACRO	OPR2C(OPCLS,OPSP)=(OPCLS^2 OR OPSP^(-1))$;
BC	 
BC	 	%(****TO CONSTRUCT AN OPERATOR FIELD****)%
BMACROOPERCVTYPOPCLSOPSPC	 MACRO OPERC(VTYP,OPCLS,OPSP)=(VTYP^13 OR OPCLS^8 OR OPSP^5)$;
BC	 
BC	 	%(***TO GET A VALTP1 FIELD FROM A VALTYPE****)%
BMACROVTP1VLTPC	 MACRO	VTP1(VLTP)=(VLTP^(-2) AND (#3))$;
BC	 
BC	 
BC	 	%(***TO GET A VALTP2 FIELD (FIRST 3 BITS) FROM A VALTYPE***)%
BMACROVTP2VLTPC	 MACRO	VTP2(VLTP)=(VLTP^(-2))$;
BC	 
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:50:14	CGSTMNT	TABLES.BLI		PAGE 6-1

BC	 
BC	 
BC	 
BC	 %(*******FLAGS IN EXPFLAG FIELD (THESE ARE SET BY PHASE 2 SKEL AND USED BY PHASE 3*******)%
BMACROC	 MACRO
BPARENFC	 	PARENFLG=0,EXOPWD,35,1$,		!FLAG FOR PARENS AROUND THIS NODE (IN SOURCE)
BRVRSFLC	 	RVRSFLG=0,EXOPWD,33,1$,			!"VAL OF 2ND SON SHOULD BE
BC	 						! COMPUTED BEFORE 1ST SON
BSTOREFC	 	STOREFLG=0,EXOPWD,32,1$,		!RESULT MUST BE STORED AFTER IT IS COMPUTED
BRESRFFC	 	RESRFFLG=0,EXOPWD,31,1$,		!FLAG FOR "UNDER THIS NODE THERE IS A
BC	 						! REFERENCE TO THE VAR INTO WHICH THE RESULT
BC	 						! OF THE WHOLE EXPRESSION WILL BE STORED
BFNCALLC	 	FNCALLSFLG=0,EXOPWD,30,1$,		!FLAG FOR "FN CALLS OCCUR UNDER THIS
BC	 						! NODE
BALCRETC	 	ALCRETREGFLG=0,EXOPWD,29,1$,		!VAL OF THIS NODE IS TO BE COMPUTED
BC	 						! IN THE "FN RETURN REG" 
BA1VALFC	 	A1VALFLG=0,EXOPWD,28,1$,		!FIRST ARG IS A COMMON SUBEXPR THAT 
BC	 						! WAS ALREADY COMPUTED ELSEWHERE
BC	 						! OR A LEAF
BA1NOTFC	 	A1NOTFLG=0,EXOPWD,27,1$,		!APPLY 'NOT' TO 1ST ARG
BA1NEGFC	 	A1NEGFLG=0,EXOPWD,26,1$,		!NEGATE 1ST ARG
BA1SAMEC	 	A1SAMEFLG=0,EXOPWD,25,1$,		!LOC OF COMPUTATION FOR PARENT EQLS
BC	 						! LOC OF VALUE OF FIRST ARG
BA1IMMEC	 	A1IMMEDFLG=0,EXOPWD,24,1$,		!1ST ARG IS IMMED CONSTANT
BA2VALFC	 	A2VALFLG=0,EXOPWD,23,1$,		!2ND ARG IS A COMMON SUBEXPR THAT WAS ALREADY
BC	 						! COMPUTED ELSEWHERE
BC	 						! OR A LEAF
BA2NOTFC	 	A2NOTFLG=0,EXOPWD,22,1$,		! APPLY NOT TO 2ND ARG
BA2NEGFC	 	A2NEGFLG=0,EXOPWD,21,1$,		!NEGATE 2ND ARG
BA2SAMEC	 	A2SAMEFLG=0,EXOPWD,20,1$,		!LOC OF COMPUTATION FOR PARENT EQLS 
BC	 						! LOC OF VALUE OF 2ND ARG
BA2IMMEC	 	A2IMMEDFLG=0,EXOPWD,19,1$,		!2ND ARG IS AN IMMED CONSTANT
BMEMCMPC	 	MEMCMPFLG=0,EXOPWD,18,1$;		!VALUE COMPUTED TO MEMORY
BC	 
BMACROCSFULLC	 MACRO	CSFULLWDFLG=RVRSFLG$;		!IN A COMMON SUBEXPR NODEWHERE THE
BC	 					! COMMON-SUBEXPR IS A SINGLE VARIABLE (EG A
BC	 					! VAR USED IN RELATIONALS OR SUBSCRIPTS)
BC	 					! THIS FLAG IS SET IF THE WHOLE VARIABLE MUST BE LOADED
BC	 					! (EG IT IS USED IN A RELATIONAL), RATHER
BC	 					! THAN THE RIGHT-HALF BEING USABLE REGARDLESS OF
BC	 					! WHATS IN THE LEFT HALF (EG IT IS USED AS A SS ONLY)
BC	 
BC	 
BC	 	%(***DEFINE SUBFIELDS OF THE FLAGS FIELD***)%
BC	 
BC	 	%(*****FLAGS FOR EACH OF THE 2 ARGS***)%
BMACROC	 MACRO
BA1FLGSC	 	A1FLGS=0,EXOPWD,24,5$,
BA2FLGSC	 	A2FLGS=0,EXOPWD,19,5$;
BC	 
BC	 	%(****LAST 4 FLAGS - NEG, NOT, SAME, IMMED****)%
BMACROC	 	MACRO
BA1FLG1C	 		A1FLG1=0,EXOPWD,24,4$,
BA2FLG1C	 		A2FLG1=0,EXOPWD,19,4$;
BC	 	%(***A2IMMEDFLG CONCATENATED WITH MEMCMPFLG***)%
BMACROA2IMMEC	 	MACRO A2IMMEMCMPFLGS=0,EXOPWD,18,2$;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:50:24	CGSTMNT	TABLES.BLI		PAGE 6-2

BC	 	%(***NEG AND NOT FLAGS******************)%
BMACROC	 	MACRO
BA1NGNTC	 		A1NGNTFLGS=0,EXOPWD,26,2$,
BA2NGNTC	 		A2NGNTFLGS=0,EXOPWD,21,2$;
BC	 
BC	 	%(****TO CLEAR THE FLAGS FOR ARG1, OR FOR ARG2*****)%
BMACROCLRA1FANODEC	 	MACRO CLRA1FLGS(ANODE)=
BC	 		ANODE[EXPFLAGS]_.ANODE[EXPFLAGS] AND (NOT #003700)$;
BC	 
BMACROCLRA2FANODEC	 	MACRO CLRA2FLGS(ANODE)=
BC	 		ANODE[EXPFLAGS]_.ANODE[EXPFLAGS] AND (NOT  #000076)$;
BC	 
BC	 	%(******TO SWAP THE FLAGS FOR ARG1 AND ARG2 (WHEN ARE ALSO SWAPPIG THE 2 ARGS******)%
BC	 
BC	 	%(***VALUE FOR A1FLGS OR A2FLGS FIELD WHEN ONLY THE VAL FLG IS SET***)%
BBINDVLFLSEC	 BIND	VLFLSET=#20;
BC	 
BMACROC	 MACRO
BSWAPFLNODEC	 	SWAPFLGS(NODE) =
BC	 	BEGIN
BC	 		REGISTER T1;
BC	 		T1_.NODE[A1FLGS];
BC	 		NODE[A1FLGS]_.NODE[A2FLGS];
BC	 		NODE[A2FLGS]_.T1;
BC	 	END $;
BC	 
BC	 	%(****TO SET THE FLAGS FOR ARG1 TO THOSE FOR ARG2 AND CLEAR THOSE FOR ARG2 ****)% 
BMACROA2TOA1NODEC	 	MACRO A2TOA1FLGS(NODE)=
BC	 	BEGIN
BC	 		NODE[A1FLGS]_.NODE[A2FLGS];
BC	 		CLRA2FLGS(NODE);
BC	 	END$;
BC	 
BC	 	%(***TO MOVE FLAGS FOR A SON INTO THE FLAG FIELD OF ITS PARENT (WHEN
BC	 		LINKING THE SON DIRECTLY UP TO THE PARENT'S PARENT***)%
BMACROC	 MACRO
BRAISEFPARFLGSONFLGC	 	RAISEFLGS(PARFLGS,SONFLGS)=
BC	 	BEGIN
BC	 		REGISTER T1;
BC	 		T1_(PARFLGS XOR SONFLGS) AND NGNTFLGMSK;	!TAKE XOR OF NEGFLGS AND 
BC	 								! NOTFLGS OF PARENT AND SON
BC	 		.T1 OR (SONFLGS AND VLIMSMMSK)		!USE VALFLG, SAMEFLG 
BC	 								! AND IMMEDFLG FOR SON
BC	 	END$;
BC	 
BC	 	%(***MASK FOR NEG AND NOT FLAGS WITHIN A1FLGS/A2FLGS FIELDS***)%
BBINDNGNTFLC	 BIND	NGNTFLGMSK=#14;
BC	 
BC	 	%(***MASK FOR VALFLG,SAMEFLG, AND IMMEDFLG FIELDS WITHIN A1FLG/A2FLG FIELDS***)%
BBINDVLIMSMC	 BIND	VLIMSMMSK=#23;
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:50:27	CGSTMNT	TABLES.BLI		PAGE 7-1

BC	 
BC	 
BC	 %(*********SUBFIELDS OF TARGET FIELD***********)%
BMACROC	 MACRO
BINREGFC	 	INREGFLG=0,2,35,1$,		!FLAG FOR VAL LEFT IN A REG
BTARGTAC	 	TARGTAC=0,2,23,4$,		!AC TO BE COMPUTED IN
BTARGAUC	 	TARGAUX=0,2,27,4$,		!EXTRA AC TO COMPUTE IN, USED FOR
BC	 					! RELATIONALS (WHICH ARE "COMPUTED" IN A DIFFERENT
BC	 					! REG FROM THE ONE THAT HOLDS THE VALUE)
BTARGTMC	 	TARGTMEM=0,2,0,23$,		!MEMORY REF TO GET AT FINAL RESULT
BTARGADC	 	TARGADDR=0,2,0,18$,		!ADDRESS FIELD FOR RETRIEVING RESULT
BTARGXFC	 	TARGXF=0,2,18,4$,		!INDEX FIELD FOR RETRIEVING RESULT
BTARGIFC	 	TARGIF=0,2,22,1$;		!INDIRECT FIELD FOR RETRIEVING RESULT
BC	 %(***TO GET TARGTAC, TARGXF,  OR TARGAUX FIELD FROM A TARGET WD INTO THE AC BITS OF AN INSTR***)%
BC	 %(****OR TO GET TARGET-REG FOR AN ASSIGNMENT-STATEMENT NODE INTO THE AC BITS OF AN INSTR***)%
BMACROGETTACNODEC	 MACRO	GETTAC(NODE)=(.NODE[TARGET] AND #17^23)$,
BGETTXFNODEC	 	GETTXF(NODE)=((.NODE[TARGET] AND #17^18)^5)$,
BGETTAUNODEC	 	GETTAUX(NODE)= ((.NODE[TARGET] AND #17^27)^(-4))$,
BGETASMSTMNTNC	 	GETASMNREG(STMNTNODE)= (.STMNTNODE[CW4] AND #17^23)$,
BGETAIFAIFNODC	 	GETAIFREG(AIFNODE)=(.AIFNODE[CW5] AND #17^23)$;
BC	 
BC	 	%(***GET THE INDEX AND INDIRECT BITS OF A TARGET WD***)%
BMACROGETTXFNODEC	 MACRO GETTXFI(NODE)=(.NODE[TARGET] AND #37^18)$;
BC	 
BC	 
BMACROIXFLDREGC	 MACRO	IXFLD(REG)=REG^18$;
BC	 
BC	 
BC	 
BC	 %(************************************************************
BC	 	DEFINE THE STRUCTURE FOR AN EXPRESSION NODE
BC	 ************************************************************)%
BSTRUCTPEXPRNPEXPRNFTPFTPWDPOSSIZEC	 STRUCTURE PEXPRNODE[FTP,WD,POS,SIZE]=
BC	 
BC	 	%(***THE ARG "FTP" SELECTS THE ACCESSING ALGORITHM***)%
BCASEFTPOFSETC	 	CASE .FTP OF SET
BC	 
BC	 		%(****FOR MOST FIELDS****)%
BPEXPRNWDPOSSIZEC	 		(@.PEXPRNODE+.WD)<.POS,.SIZE>
BC	 
BC	 
BTESC	 		TES;
BC	 
BC	 
BC	 
BC	 
BC	 
BC	 %(********************************************************
BC	 	VALUES FOR SUBFIELDS OF OPERATOR FIELD
BC	 ************************************************************)%
BC	 
BC	 %(*******VALUES FOR VALTYPE FIELD*****)%
BBINDC	 BIND
BOCTALC	 	OCTAL=0,		!00000
BLOGICAC	 	LOGICAL=1,		!00001
BCONTROC	 	CONTROL=4,		!00100 - CONTROL-TYPE BOOLEAN
BDOUBLOC	 	DOUBLOCT=8,		!01000
BLISS  V. 1.0-2.12	13-JUN-73  17:50:30	CGSTMNT	TABLES.BLI		PAGE 7-2

BLITERAC	 	LITERAL=12,		!01100
BSTRINGC	         STRING=15,              !01111
BINTEGEC	 	INTEGER=16,		!10000
BBYTEC	 	BYTE=17,		!10001
BINDEXC	 	INDEX=18,		!10010
BREALC	 	REAL=20,		!10100
BDOUBLPC	 	DOUBLPREC=24,		!11000
BCOMPLEC	 	COMPLEX=28;		!11100 
BC	 
BC	 	%(**NOTE THAT IN THE ABOVE THE 2ND BIT IS A FLAG FOR
BC	 		DOUBLE WD***)%
BC	 	%(***NOTE ALSO THAT THE 2ND AND 3RD  BITS DETERMINE THE CODE TO BE
BC	 		GENERATED IN MANY CASES (WHERE INDEX,BYTE,LOG ARE 
BC	 		TREATED AS INTEGER); AND THAT THESE 2 BITS ARE
BC	 		REFERENCED AS THE FIELD "VALTP1" *******)%
BC	 	%(***NOTE ALSO THAT IF THE FIRST 3 BITS OF THE VALTYPES OF 2 NODES
BC	 		ARE IDENTICAL, NO TYPE-CONVERSION OPERATION IS  NECESSARY
BC	 		WHEN COMBINING THE 2 NODES ARITHMETICALLY 
BC	 	*****)%
BC	 	%(***NOTE ALSO THAT THE OPERSP FIELD FOR A TYPE CONVERSION NODE IS EQUAL
BC	 		TO THE FIRST 3 BITS OF THE ORIGINAL TYPE
BC	 	****)%
BC	 
BC	 
BC	 	%(***VALUES FOR VALTP1 FIELD (BITS 2 AND 3  OF VALTYPE)***)%
BBINDC	 BIND
BINTEG1VTP1INTEGEANDC	 	INTEG1=VTP1(INTEGER);	!00
BC	 
BC	 	%(***VALUES FOR VALTP2 FIELD (BITS 1,2,3 OF VALTYPE)***)%
BBINDC	 BIND
BLOGICALOGICAC	 	LOGICAL2=LOGICAL^(-2);
BC	 
BC	 	%(***TO TEST WHETHER A GIVEN VALTYPE IS DOUBLE-WD***)%
BMACRODBLFROVLTPC	 MACRO	DBLFROMVAL(VLTP)=
BC	 	(VLTP^(-3) AND 1)$;
BC	 
BC	 
BC	 
BC	 %(******VALUES FOR OPRCLS FIELD********)%
BBINDC	 BIND
BBOOLEAC	 	BOOLEAN=0,		!00000
BDATAOPC	 	DATAOPR=1,		!00001
BRELATIC	 	RELATIONAL=2,		!00010
BFNCALLC	 	FNCALL=3,		!00011
BARITHMC	 	ARITHMETIC=4,		!00100
BTYPECNC	 	TYPECNV=5,		!00101
BARRAYRC	 	ARRAYREF=6,		!00110
BCMNSUBC	 	CMNSUB=7,		!00111
BNEGNOTC	 	NEGNOT=8,		!01000
BSPECOPC	 	SPECOP=9,		!01001		;A SPECIAL CASE TO BE OPTIMIZED
BC	 						!(P2MUL,SQUARE,...)
BFIELDRC	 	FIELDREF=10,		!01010
BSTORECC	 	STORECLS=11,		!01011
BREGCONC	 	REGCONTENTS=12,		!01100
BLABOPC	 	LABOP=13,		!01101
BSTATEMC	 	STATEMENT=14,		!01110
BIOLSCLC	 	IOLSCLS=15,		!01111		;ELEMENT IN AN IOLIST
BLISS  V. 1.0-2.12	13-JUN-73  17:50:34	CGSTMNT	TABLES.BLI		PAGE 7-3

BINLINFC	         INLINFN=16,             !10000		;A FN TO BE GENERATED IN LINE
BSTRINGC	         STRINGEXP=17;           !10001          ;A STRING EXPRESSION
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:50:34	CGSTMNT	TABLES.BLI		PAGE 8-1

BC	 
BC	 %(********VALUES FOR OPERSP FIELD**************)%
BC	 
BC	 	%(****FOR OPRCLS BOOLEAN****)%
BBINDC	 BIND
BANDOPC	 	ANDOP=0,		!000
BOROPC	 	OROP=1,		!001
BEQVOPC	 	EQVOP=2,		!010
BXOROPC	 	XOROP=3;		!011
BC	 
BC	 	%(***BIT 35 OF EXOPWD IS USED AS A FLAG IN A BOOLEAN NODE FOR "ARG2HAS VALTYPE
BC	 		CONTROL, ARG1 IS A MASK" ****)%
BC	 
BC	 
BC	 
BC	 	%(****FOR OPRCLS DATA ITEM****)%
BBINDC	 BIND
BCONSTAC	 	CONSTANT=0,		!000
BTEMPORC	 	TEMPORARY=1,		!001
BVARIABC	 	VARIABLE=2,		!010
BFORMLVC	 	FORMLVAR=3,		!011
BARRAYNC	 	ARRAYNAME=4,		!100
BFORMLAC	 	FORMLARRAY=5,		!101
BFNNAMEC	 	FNNAME=6,		!110
BFORMLFC	 	FORMLFN=7;		!111
BC	 
BC	 	%(***DEFINE SUBFIELD OF OPERSP FOR DATA-ITEMS THAT DIFFERENTIATES
BC	 		FN AND FORMAL FN FROM ARRAY AND FORML ARRAY FROM VAR AND FORML VAR***)%
BMACRODATOPSC	 	MACRO	DATOPS1=OPRSP1$;	!FIRST 2 BITS OF OPERSP
BC	 
BC	 	%(***DEFINE VALUES OF DATOPS1 FIELD***)%
BBINDVARIABC	 BIND	VARIABL1=1,
BARRAYNC	 	ARRAYNM1=2,
BFNNAMEC	 	FNNAME1=3;
BC	 
BC	 	%(***TO TEST FOR AN DATA ITEM AN ENTRY IN THE SYMBOL TABLE (AS OPPOSED TO A 
BC	 		CONSTANT OR TEMPORARY*****)%
BMACROSYMBOLNODEC	 MACRO	SYMBOL(NODE)=(.NODE[OPERSP] GEQ VARIABLE)$;
BC	 
BC	 	%(****FOR OPRCLS RELATIONAL****)%
BBINDC	 BIND
BLC	 	L=1,			!001
BEC	 	E=2,			!010
BLEC	 	LE=3,			!011
BGEC	 	GE=5,			!101
BNC	 	N=6,			!110
BGC	 	G=7;			!111
BC	 
BMACROC	 MACRO
BEQRELMODEC	 	EQREL(MODE) = (MODE AND #1) EQL 0$;		!E AND N  HAVE LAST BIT=0
BC	 
BMACROC	 MACRO
BREVRELMC	 	REVREL(M) = M XOR #6$;			!"REVERSE" RELATIONAL FROM M (EG FOR
BC	 						! REVREL(GE) GET LE )
BMACROC	 MACRO
BCMRELMC	 	CMREL(M)= M XOR 4$;			!TO GET "COMPLEMENT" OF A CONDITION
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:50:41	CGSTMNT	TABLES.BLI		PAGE 8-2

BC	 	%(****FOR OPRCLS FNCALL****)%
BBINDC	 BIND
BNONLIBC	 	NONLIBARY=0,		!NOT A LIBRARY FUNCTION
BLIBARYC	 	LIBARY=1;		!A LIBARY FUNCTION
BC	 
BC	 	%(****FOR OPRCLS ARITHMETIC****)%
BBINDC	 BIND
BADDOPC	 	ADDOP=0,		!000
BSUBOPC	 	SUBOP=1,		!001
BMULOPC	 	MULOP=2,		!010
BDIVOPC	 	DIVOP=3,		!011
BEXPONOC	 	EXPONOP=4;		!100
BC	 
BC	 	%(***TO TRANSFORM ADD TO SUB, SUB TO ADD; MUL TO DIV, DIV TO MUL***)%
BMACROC	 MACRO
BCMPLSPNODEC	 	CMPLSP(NODE)=
BC	 		(NODE[OPERATOR]_.NODE[OPERATOR] XOR #40)$;	!CHANGE RIGHTMOST BIT OF OPERSP
BC	 								! (RIGHTMOST BIT OF OPERSP IS 
BC	 								! 5 BITS FROM RIGHT END OF
BC	 								! OPERATOR FIELD
BC	 
BC	 	%(***TEST FOR OPERATOR EITHER ADD OR SUB****)%
BMACROC	 MACRO
BADDORSNODEC	 	ADDORSUB(NODE) = .NODE[OPR2] EQL OPR2C(ARITHMETIC,ADDOP)$;
BC	 	%(***TEST FOR OPERATOR FIELD EITHER MUL OR DIV***)%
BMACROC	 MACRO
BMULORDNODEC	 	MULORDIV(NODE) = .NODE[OPR2] EQL OPR2C(ARITHMETIC,MULOP)$;
BC	 
BC	 	%(***TO TEST FOR OPERATOR (*KNOWN TO BE ARITH*) EQUAL TO EXPONENTIATION***)%
BMACROC	 MACRO
BEXPONENODEC	 	EXPONEN(NODE) = .NODE[OPRSBIT0]$;	!FIRST BIT OF OPERSP FIELD
BC	 
BC	 	%(***TO TEST FOR OPERATOR (*KNOWN TO BE ARITH*) EQUAL TO SUB OR DIV****)%
BMACROC	 MACRO
BSUBORDNODEC	 	SUBORDIV(NODE)= (.NODE[OPRSBIT2])$;	!3RD BIT OF OPERSP FIELD IS SET FOR
BC	 						! DIV AND SUB
BC	 
BC	 	%(***TO TEST FOR AN OPERATOR (OF UNKNOWN OPRCLS) EQUAL TO ADD OR MUL****)%
BMACROC	 MACRO 
BC	 	%(***OPRCLS MUST BE ARITHMETIC, OPERSP MUST HAVE ITS 1ST AND 3RD BITS 0****)%
BADDORMNODEC	 	ADDORMUL(NODE)=((.NODE[OPERWORD] AND (#37^8 OR #5^5)) EQL (ARITHMETIC^8))$;
BC	 
BC	 
BC	 	%(*****TO TEST FOR A NODE OF UNKNOWN OPRCLS TO BE COMMUTATIVE - 
BC	 		VAL IS TRUE FOR ALL BOOLEANS AND FOR ADD AND MUL*********)%
BMACROCOMMUTNODEC	 MACRO	COMMUTATIVE(NODE)=
BC	 	(.NODE[OPRCLS] EQL BOOLEAN OR ADDORMUL(NODE) )$;
BC	  
BLISS  V. 1.0-2.12	13-JUN-73  17:50:48	CGSTMNT	TABLES.BLI		PAGE 9-1

BC	 
BC	 
BC	 	%(****FOR OPRCLS TYPECNV****)%
BBINDC	 BIND
BFROMOCC	 	FROMOCT=0,		!000
BFROMCTC	 	FROMCTL=1,		!001
BFROMDOC	 	FROMDOCT=2,		!010
BFROMLIC	 	FROMLIT=3,		!011
BFROMINC	 	FROMINT=4,		!100
BFROMREC	 	FROMREAL=5,		!101
BFROMDBC	 	FROMDBLPRC=6,		!110
BFROMCMC	 	FROMCMPLX=7;		!111
BC	 
BC	 	%(***NOTE THAT THIS FIELD IS EQUAL TO THE FIRST 3 BITS OF THE VALTYPE
BC	 		FIELD FOR THE VALUE BEING CONVERTED FROM(THE VALTYPE FIELD 
BC	 		ON THIS NODE SPECIFIES THE TYPE TO CONVERT TO)****)%
BC	 
BC	 
BMACROC	 MACRO
BNOCNVFC	 	NOCNVFLG=0,EXOPWD,0,1$;		!BIT 35 OF EXOPWD IS USED AS A FLAG FOR "NO ACTUAL
BC	 					! CONVERSION TAKES PLACE"
BC	 
BC	 	%(***TEST WHETHER ANY CODE MUST BE GENERATED FOR A GIVEN TYPE-CONVERSION NODE***)%
BMACRONOCNVTPCNODC	 	MACRO NOCNV(TPCNODE)=
BC	 	BEGIN
BC	 		(
BC	 		(.TPCNODE[NOCNVFLG])		!IF FLAG WAS SET TO NOT ACTUALLY CONVERT
BC	 		OR
BC	 		(.TPCNODE[VALTP2] EQL .TPCNODE[OPERSP])
BC	 		OR
BC	 		(	(.TPCNODE[OPERSP] LSS FROMINT)	!CONVERTING FROM LOGICAL/OCTAL
BC	 							! OR DOUBLE-OCTAL OR CONTROL OR LITERAL
BC	 			AND
BC	 			( (NOT .TPCNODE[DBLFLG]) OR .TPCNODE[SDBLFLG])	!AND IF THE DESTIN IS
BC	 									!DBL WD, SO IS THE SRC
BC	 		)
BC	 		)
BC	 		AND (NOT .TPCNODE[A2IMMEDFLG])	!IF THE ARG UNDER THE TYPE-CNV
BC	 						! IS THE RIGHT HALF OF AN AOBJN VAR,
BC	 						! MUST LOAD IT
BC	 	END$;
BC	 
BC	 
BC	 
BC	 	%(***FOR OPRCLS NEGNOT***************************)%
BBINDC	 BIND
BNEGOPC	 	NEGOP=0,
BNOTOPC	 	NOTOP=1;
BC	 
BC	 	%(****FOR OPRCLS SPECOP (SPECIAL OPS INTRODUCED BY PHASE 2 SKEL)***)%
BBINDC	 BIND
BP2MULOC	 	P2MULOP=0,		!MULTIPLY BY A POWER OF 2
BP2DIVOC	 	P2DIVOP=1,		!DIVIDE BY A POWER OF 2
BP2PL1OC	 	P2PL1OP=2,		!MULTIPLY BY A POWER OF 2 PLUS 1
BSQROPC	 	SQROP=3,		!SQUARE (RAISE TO POWER OF 2)
BCUBOPC	 	CUBOP=4,		!CUBE (RAISE TO POWER OF 3)
BP4OPC	 	P4OP=5,			!RAISE TO POWER OF 4
BLISS  V. 1.0-2.12	13-JUN-73  17:50:50	CGSTMNT	TABLES.BLI		PAGE 9-2

BEXPCIOC	 	EXPCIOP=6;		!RAISE TO A  CONSTANT INTEGER POWER
BC	 				! (NOT HANDLED IN RELEASE 1)
BC	 
BC	 
BC	 	%(***FOR OPRCLS STORECLS****************************)%
BBINDC	 BIND
BSTARVAC	 	STARVAL=0,		!STORE CONTENTS OF AN ARRAY ELEM
BSTARADC	 	STARADDR=1;		!STORE PTR TO AN ARRAY ELEMENT
BC	 
BC	 
BC	 	%(***FOR OPRCLS IOLSCLS (FOR IOLIST ELEMENTS)***)%
BBINDC	 BIND
BDATACAC	 	DATACALL=0,
BSLISTCC	 	SLISTCALL=1,
BIOLSTCC	 	IOLSTCALL=2,
BS1LISTC	 	S1LISTCALL=3,			!AN SLISTCALL DETECTED IN PHASE 2 SKEL -
BC	 					! MAY HAVE MORE THAN ONE ARRAYREF
BC	 					! (NOT IN RELEASE 1)
BELISTCC	 	ELISTCALL=4;			! NOT IN RELEASE 1
BC	 
BC	 
BC	 	%(***FOR OPRCLS INLINFN (FNS TO BE GENERATED IN LINE)****)%
BBINDC	 BIND
BABSFNC	 	ABSFN=0,
BIABSFNC	 	IABSFN=1,
BSIGNFNC	 	SIGNFN=2,
BDIMFNC	 	DIMFN=3,
BMODFNC	 	MODFN=4,
BMAXFNC	 	MAXFN=5,
BMINFNC	 	MINFN=6;
BC	 
BC	 	%(***MACRO TO DETERMINE FOR A GIVEN IN-LINE-FN WHETHER THE ARG SHOULD BE PUT
BC	 		INTO THE REG-FOR-COMPUTATION BEFORE THE VAL IS COMPUTED (FOR ABS,IABS
BC	 		AND SIGN, DO NOT WANT TO LOAD THE ARG IN ADVANCE) ****)%
BMACROILFINROPSPC	 	MACRO ILFINRFC(OPSP)=(OPSP GEQ DIMFN)$;
BC	 
BC	 
BC	 
BC	 
BC	 	%(****VALS FOR OPR1 FIELD FOR SOME OF THE OPERATORS*****)%
BBINDC	 BIND
BADDOPFOPR1CARITHMORADDOPC	 	ADDOPF=OPR1C(ARITHMETIC,ADDOP),
BSUBOPFOPR1CARITHMORSUBOPC	 	SUBOPF=OPR1C(ARITHMETIC,SUBOP),
BMULOPFOPR1CARITHMORMULOPC	 	MULOPF=OPR1C(ARITHMETIC,MULOP),
BDIVOPFOPR1CARITHMORDIVOPC	 	DIVOPF=OPR1C(ARITHMETIC,DIVOP),
BEXPONOOPR1CARITHMOREXPONOC	 	EXPONOPF=OPR1C(ARITHMETIC,EXPONOP),
BCONSTFOPR1CDATAOPORCONSTAC	 	CONSTFL=OPR1C(DATAOPR,CONSTANT),
BVARFLOPR1CDATAOPORVARIABC	 	VARFL=OPR1C(DATAOPR,VARIABLE),
BNEGFLOPR1CNEGNOTORNEGOPC	 	NEGFL=OPR1C(NEGNOT,NEGOP),
BMODFNFOPR1CINLINFORMODFNC	 	MODFNFL=OPR1C(INLINFN,MODFN),
BSTARVLOPR1CSTORECORSTARADC	 	STARVLFL=OPR1C(STORECLS,STARADDR),
BSLISTCOPR1CIOLSCLORSLISTCC	 	SLISTCLFL=OPR1C(IOLSCLS,SLISTCALL);
BC	 
BC	 
BBINDC	 BIND
BP2MULOOPR1CSPECOPORP2MULOC	 	P2MULOPF=OPR1C(SPECOP,P2MULOP),
BP2DIVOOPR1CSPECOPORP2DIVOC	 	P2DIVOPF=OPR1C(SPECOP,P2DIVOP),
BLISS  V. 1.0-2.12	13-JUN-73  17:50:55	CGSTMNT	TABLES.BLI		PAGE 9-3

BP2PL1OOPR1CSPECOPORP2PL1OC	 	P2PL1OPF=OPR1C(SPECOP,P2PL1OP);
BBINDC	 BIND
BSQROPFOPR1CSPECOPORSQROPC	 	SQROPF=OPR1C(SPECOP,SQROP),
BCUBOPFOPR1CSPECOPORCUBOPC	 	CUBOPF=OPR1C(SPECOP,CUBOP),
BP4OPFOPR1CSPECOPORP4OPC	 	P4OPF=OPR1C(SPECOP,P4OP);
BBINDC	 BIND
BEXPCIFOPR1CSPECOPOREXPCIOC	 	EXPCIF=OPR1C(SPECOP,EXPCIOP);
BC	 
BC	 
BC	 	%(***VALUES OF OPERATOR FIELD FOR SOME OF THE OPERATORS***)%
BBINDREALCOOPERCREALORDATAOPORCONSTAC	 BIND	REALCONST=OPERC(REAL,DATAOPR,CONSTANT),
BINTCONOPERCINTEGEORDATAOPORCONSTAC	 	INTCONST=OPERC(INTEGER,DATAOPR,CONSTANT),
BDOUBLCOPERCDOUBLPORDATAOPORCONSTAC	 	DOUBLCONST=OPERC(DOUBLPREC,DATAOPR,CONSTANT),
BCPLXCOOPERCCOMPLEORDATAOPORCONSTAC	 	CPLXCONST=OPERC(COMPLEX,DATAOPR,CONSTANT),
BLITCONOPERCLITERAORDATAOPORCONSTAC	 	LITCONST=OPERC(LITERAL,DATAOPR,CONSTANT),
BINTVAROPERCINTEGEORDATAOPORVARIABC	 	INTVAR=OPERC(INTEGER,DATAOPR,VARIABLE),
BINDEXVOPERCINDEXORDATAOPORVARIABC	 	INDEXVAR=OPERC(INDEX,DATAOPR,VARIABLE);
BBINDINTDIVOPERCINTEGEORARITHMORDIVOPC	 BIND	INTDIVIDE=OPERC(INTEGER,ARITHMETIC,DIVOP);
BC	 
BBINDABSFNOOPERCREALORINLINFORABSFNC	 BIND	ABSFNOP=OPERC(REAL,INLINFN,ABSFN),
BIABSFNOPERCINTEGEORINLINFORIABSFNC	 	IABSFNOP=OPERC(INTEGER,INLINFN,IABSFN),
BSIGNFNOPERCREALORINLINFORSIGNFNC	 	SIGNFNOP=OPERC(REAL,INLINFN,SIGNFN),
BISIGNFOPERCINTEGEORINLINFORSIGNFNC	 	ISIGNFNOP=OPERC(INTEGER,INLINFN,SIGNFN),
BDIMFNOOPERCREALORINLINFORDIMFNC	 	DIMFNOP=OPERC(REAL,INLINFN,DIMFN),
BIDIMFNOPERCINTEGEORINLINFORDIMFNC	 	IDIMFNOP=OPERC(INTEGER,INLINFN,DIMFN),
BMODFNOOPERCINTEGEORINLINFORMODFNC	 	MODFNOP=OPERC(INTEGER,INLINFN,MODFN),
BMAXFNOOPERCINTEGEORINLINFORMAXFNC	 	MAXFNOP=OPERC(INTEGER,INLINFN,MAXFN),
BMINFNOOPERCINTEGEORINLINFORMINFNC	 	MINFNOP=OPERC(INTEGER,INLINFN,MINFN),
BAMAXFNOPERCREALORINLINFORMAXFNC	 	AMAXFNOP=OPERC(REAL,INLINFN,MAXFN),
BAMINFNOPERCREALORINLINFORMINFNC	 	AMINFNOP=OPERC(REAL,INLINFN,MINFN);
BC	 
BBINDCMPLXOOPERCCOMPLEORTYPECNORFROMREC	 BIND	CMPLXOP=OPERC(COMPLEX,TYPECNV,FROMREAL),
BDBLEOPOPERCDOUBLPORTYPECNORFROMREC	 	DBLEOP=OPERC(DOUBLPREC,TYPECNV,FROMREAL),
BDFLOATOPERCDOUBLPORTYPECNORFROMINC	 	DFLOATOP=OPERC(DOUBLPREC,TYPECNV,FROMINT),
BFLOATOOPERCREALORTYPECNORFROMINC	 	FLOATOP=OPERC(REAL,TYPECNV,FROMINT),
BIDINTOOPERCINTEGEORTYPECNORFROMDBC	 	IDINTOP=OPERC(INTEGER,TYPECNV,FROMDBLPRC),
BINTOPOPERCINTEGEORTYPECNORFROMREC	 	INTOP=OPERC(INTEGER,TYPECNV,FROMREAL),
BIFIXOPOPERCINTEGEORTYPECNORFROMREC	 	IFIXOP=OPERC(INTEGER,TYPECNV,FROMREAL),
BREALOPOPERCREALORTYPECNORFROMCMC	 	REALOP=OPERC(REAL,TYPECNV,FROMCMPLX),
BSNGLOPOPERCREALORTYPECNORFROMDBC	 	SNGLOP=OPERC(REAL,TYPECNV,FROMDBLPRC);
BC	 
BC	 
BBINDLTOPOPERCCONTROORRELATIORLC	 BIND	LTOP=OPERC(CONTROL,RELATIONAL,L),
BEQOPOPERCCONTROORRELATIOREC	 	EQOP=OPERC(CONTROL,RELATIONAL,E),
BLEOPOPERCCONTROORRELATIORLEC	 	LEOP=OPERC(CONTROL,RELATIONAL,LE),
BGEOPOPERCCONTROORRELATIORGEC	 	GEOP=OPERC(CONTROL,RELATIONAL,GE),
BNEOPOPERCCONTROORRELATIORNC	 	NEOP=OPERC(CONTROL,RELATIONAL,N),
BGTOPOPERCCONTROORRELATIORGC	 	GTOP=OPERC(CONTROL,RELATIONAL,G);
BC	 
BBINDFIXOPOPERCINTEGEORTYPECNORFROMREC	 BIND	FIXOP=OPERC(INTEGER,TYPECNV,FROMREAL);
BBINDIOLSTCOPERCORIOLSCLORIOLSTCC	 BIND	IOLSTCFL=OPERC(0,IOLSCLS,IOLSTCALL),
BDATACLOPERCORIOLSCLORDATACAC	 	DATACLFL=OPERC(0,IOLSCLS,DATACALL);
BC	 
BBINDDOSTATSTOPERSTATEMORDOIDC	 BIND	DOSTATEMENT=STOPERC(STATEMENT,DOID);
BBINDCONTSTSTOPERSTATEMORCONTIDC	 BIND	CONTSTATEMENT=STOPERC(STATEMENT,CONTID);
BC	 
BC	 	
BLISS  V. 1.0-2.12	13-JUN-73  17:51:21	CGSTMNT	TABLES.BLI		PAGE 9-4

BC	 
BC	 
BC	 %(********VALUES FOR SPECIAL OPERATOR SUBFIELDS***********)%
BC	 
BC	 	%(****USED FOR OPRCLS BOOLEAN*****)%
BBINDC	 BIND
BANDORCC	 	ANDORCLS=0,		!VALUE OF BOOLCLS FOR AND/OR NODES
BANDOPFC	 	ANDOPF=0,		!VALUE OF BOPRFLG FOR AND/EQV NODES
BXOROROC	 	XOROROPF=1;		!VALUE OF BOPRFLG FOR OR/XOR NODES
BC	 
BC	 
BC	 
BC	 %(****************************************
BC	 	TO CHECK FOR VALUES THAT FIT IN SINGLE WD
BC	 ****************************************)%
BMACROSINGLWNODEC	 MACRO	SINGLWD(NODE)= NOT (.NODE[DBLFLG])$;
BC	 
BC	 
BC	 %(***************************************************************************
BC	 	TO TEST A CONSTANT NODE FOR BEING AN IMMEDIATE-SIZE CONSTANT
BC	 ***************************************************************************)%
BC	 
BC	 
BMACROIMMEDCNODEC	 MACRO IMMEDCNST(NODE)=
BC	 BEGIN
BC	 	EXTERNAL KDPRL;		!THESE GLOBALS ARE USED IN CALLING THE MACRO MODULE
BC	 	EXTERNAL C1H,C1L,C2H,COPRIX;	! THAT ROUNDS REAL NUMBERS
BC	 	EXTERNAL CNSTCM;
BC	 
BC	 	CASE .NODE[VALTP1] OF SET
BC	 	%(***INTEGER CONSTANTS ARE IMMED SIZE IFF ABSOLUTE VAL IS LESS THAN 777777***)%
BC	 	(ABS(.NODE[CONST2]) LEQ #777777);
BC	 	%(***REAL CONSTANTS ARE IMMED SIZE IFF THE RIGHT HALF WD IS
BC	 		ALL 0'S*******)%
BC	 	BEGIN
BC	 		%(***BECAUSE WE KEEP 2 WDS OF PRECISION THRUOUT COMPILE TIME,
BC	 			WE MUST EXAMINE WHAT THE ROUNDED CONSTANT WILL BE***)%
BC	 		C1H_.NODE[CONST1]; C1L_.NODE[CONST2]; COPRIX_KDPRL;	!ROUND THE NUMBER IN C1H-C1L
BC	 		CNSTCM();						! LEAVING THE RESULT IN C2H
BC	 		(.C2H AND #777777) EQL 0
BC	 	END;
BC	 	%(***DOUBLE-PREC CONSTANTS CAN NOT BE TREATED IMMED MODE***)%
BC	 	FALSE;
BC	 	%(***COMPLEX CONSTANTS CAN BE TREATED IMMED MODE IFF THE REAL PART IS
BC	 		IMMED SIZE AND THE IMAGINARY PART IS 0***)%
BC	 	((.NODE[CONST1] AND #777777) EQL 0) AND (.NODE[CONST2] EQL 0)
BC	 	TES
BC	 END$;
BC	 
BC	 %(***TO TEST FOR A CONSTANT NEGATIVE***********)%
BMACRONEGATICNNODEC	 MACRO NEGATIVC(CNNODE)=
BC	 	BEGIN
BC	 		IF .CNNODE[VALTP1] EQL INTEG1
BC	 		THEN
BC	 		.CNNODE[CONST2] LSS 0
BC	 		ELSE
BC	 		.CNNODE[CONST1] LSS 0
BLISS  V. 1.0-2.12	13-JUN-73  17:51:24	CGSTMNT	TABLES.BLI		PAGE 9-5

BC	 	END$;
BC	 
BC	 
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:51:24	CGSTMNT	TABLES.BLI		PAGE 10-1

BC	 
BC	 
BC	 %(*****************OPCODE FIELDS USED EXPLICITLY***************************)%
BBINDC	 BIND
BJRSTOCC	 	JRSTOC=#254^27,
BJUMPOCC	 	JUMPOC=#320^27,
BSKIPOCC	 	SKIPOC=#330^27,
BSKIPGEC	 	SKIPGEOC=#335^27;
BBINDC	 BIND
BINDBITC	 	INDBIT=1^22;		!INDIRECT BIT
BC	 
BBINDC	 BIND	
BADDBOCC	 	ADDBOCD=#273,
BADDIOCC	 	ADDIOCD=#271,
BADDMOCC	 	ADDMOCD=#272,
BAOJAOCC	 	AOJAOCD=#344,
BAOSOCDC	 	AOSOCD=#350,
BASHOCDC	 	ASHOCD=#240,
BCAIOCDC	 	CAIOCD=#300,
BCAMOCDC	 	CAMOCD=#310,
BDMOVEOC	 	DMOVEOCD=#120,
BDMOVEMC	 	DMOVEMOCD=#124,
BFADRBOC	 	FADRBOCD=#147,
BFADRMOC	 	FADRMOCD=#146,
BFDVRMOC	 	FDVRMOCD=#176,
BFIXOCDC	 	FIXOCD=#122,
BFLTROCC	 	FLTROCD=#127,
BFSCOCDC	 	FSCOCD=#132,
BHRLZIOC	 	HRLZIOCD=#515,
BIDIVMOC	 	IDIVMOCD=#232,
BIMULMOC	 	IMULMOCD=#222,
BJRSTOCC	 	JRSTOCD=#254,
BJUMPOCC	 	JUMPOCD=#320,
BJUMPGEC	 	JUMPGEOCD=#325,
BJUMPLOC	 	JUMPLOCD=#321,
BMOVEIOC	 	MOVEIOCD=#201,
BMOVEOCC	 	MOVEOCD=#200,
BMOVEMOC	 	MOVEMOCD=#202,
BMOVNIOC	 	MOVNIOCD=#211,
BMOVNMOC	 	MOVNMOCD=#212,
BMOVNSOC	 	MOVNSOCD=#213,
BMOVSIOC	 	MOVSIOCD=#205,
BSETCAMC	 	SETCAMOCD=#452,
BSETCMBC	 	SETCMBOCD=#463,
BSETZBOC	 	SETZBOCD=#403,
BSETOBOC	 	SETOBOCD=#477,
BSKIPOCC	 	SKIPOCD=#330,
BSOJAOCC	 	SOJAOCD=#364,
BSOSOCDC	 	SOSOCD=#370,
BSUBIOCC	 	SUBIOCD=#275,
BSUBMOCC	 	SUBMOCD=#276;
BLISS  V. 1.0-2.12	13-JUN-73  17:51:31	CGSTMNT	TABLES.BLI		PAGE 11-1

BC	 
BC	 %(***************************************************************************	
BC	 	DEFINE THE FIELDS OF THE NODES USED FOR IOLISTS (OPRCLS=IOLSCLS)
BC	 ***************************************************************************)%
BC	 
BC	 	%(***FIELDS IN ALL IOLSCLS NODES***)%
BMACROC	 MACRO
BIOLSTLC	 	IOLSTLBL=0,0,LEFT$;
BC	 	%(***FIELDS IN DATACALL NODES***)%
BMACROC	 MACRO
BDCALLEC	 	DCALLELEM=0,1,LEFT$;
BC	 
BC	 	%(***FIELDS IN SLISTCALL NODES***)%
BMACROC	 MACRO
BSCALLEC	 	SCALLELEM=0,1,LEFT$,
BSCALLCC	 	SCALLCT=0,2,RIGHT$;
BC	 
BC	 	%(****NOTE THAT FOR IOLSTCALL NODES, S1LISTCALL NODES, AND ELISTCALL NODES,
BC	 		THE 3RD WORD (0,2,LEFT AND 0,2,RIGHT) IS USED FOR SRCCMPLX AND
BC	 		SRCCOMNSUB *****)%
BC	 
BC	 
BC	 
BC	 	%(***FIELDS IN IOLSTCALL NODES***)%
BMACROC	 MACRO
BIOLSTPC	 	IOLSTPTR=0,1,LEFT$;
BC	 
BC	 	%(***FIELDS IN S1LISTCALL AND ELISTCALL NODES***)%
BMACROC	 MACRO
BECNTPTC	 	ECNTPTR=0,3,LEFT$,		!PTR TO EXPRESSION FOR NUMBER OF ELEMS
BC	 					! OF EACH ARRAY TO BE PROCESSED
BC	 
BELSTPTC	 	ELSTPTR=0,1,LEFT$;
BC	 
BC	 	%(***FIELDS IN S1LIST NODES***)%
BMACROC	 MACRO
BS1INCRC	 	S1INCR=0,3,RIGHT$;
BC	 
BC	 	%(***FIELDS OF THE ELEMENTS OF THE LINKED LIST UNDER AN E2LISTCALL***)%
BMACROC	 MACRO
BE2INCRC	 	E2INCR=0,1,LEFT$,		!PTR TO EXPRESSION FOR INCREMENT TO BE
BC	 					! USED FOR THIS ARRAY
BE2ARREC	 	E2ARREFPTR=0,1,RIGHT$;		!PTR TO ARRAYREF NODE
BC	 
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:51:33	CGSTMNT	TABLES.BLI		PAGE 12-1

BC	 
BC	 %(***************************************************************************
BC	 	DEFINE AN OBJECT-CODE WORD AS A STRUCTURE.
BC	 	DEFINE THE FIELDS OF THAT WORD FOR FOROTS ARG BLOCKS.
BC	 ***************************************************************************)%
BC	 
BSTRUCTOBJECTOBJECTWDWDPOSSIZEC	 STRUCTURE OBJECTCODE[WD,POS,SIZE]=
BOBJECTWDPOSSIZEC	    (.OBJECTCODE+.WD)<.POS,.SIZE> ;
BC	 
BC	 
BC	 	%(***DEFINE THE FIELDS USED FOR FOROTS ARG BLOCKS***)%
BMACROC	 MACRO
BOTSWHOC	 	OTSWHOLE=0,0,36$,
BOTSCNTC	 	OTSCNT=0,27,9$,
BOTSTYPC	 	OTSTYPE=0,23,4$,		!VALUE-TYPE ALWAYS GOES IN BITS 9-12
BOTSINXC	 	OTSINX=0,18,4$,		!INDEX FIELD
BOTSINDC	 	OTSIND=0,22,1$,		!INDIRECT BIT
BOTSADDC	 	OTSADDR=0,0,18$,		!ADDRESS FIELD
BOTSUNIC	 	OTSUNIT=0,0,18$,		!UNIT NUMBER ALWAYS GOES INTO BITS 18-35
BOTSFORC	 	OTSFORM=0,0,18$,		!PTR TO FORMAT 
BOTSARRC	 	OTSARRFMTFLG=0,35,1$,		!FLAG FOR "FORMAT STMNT IS AN ARRAY"
BOTSFSIC	 	OTSFSIZ=0,18,17$,	!FORMAT SIZE
BOTSIDNC	 	OTSIDN=0,27,9$,		!FOR AN IOLIST ELEMENT - IDENTIFIES THE CLASS OF ELEM
BOTSMEMC	 	OTSMEMRF=0,0,23$;		!THE 23 BITS DESCRIBING MEMORY REFERENCE
BC	 
BC	 
BC	 	%(***DEFINE VALUES FOR IDN FIELD FOR IOLIST ELEMENTS***)%
BBINDC	 BIND
BOTSZERC	 	OTSZER=0,
BOTSDATC	 	OTSDATA=1,
BOTSSLIC	 	OTSSLIST=2,
BOTSFINC	 	OTSFIN=4,
BOTSELIC	 	OTSELIST=3;
BC	 
BC	 
BBINDC	 BIND
BOTSZEROTSZERC	 	OTSZERWD=OTSZER^27,
BOTSFINOTSFINC	 	OTSFINWD=OTSFIN^27;
BC	 
BC	 
BC	 	%(***DEFINE ARG TYPE CODES THAT ARE USED FOR FOROTS CALLS***)%
BBINDADDRTYC	 BIND	ADDRTYPE=#7,		!TYPE CODE FOR A LABEL
BIMMEDTC	 	IMMEDTYPE=0;		!TYPE CODE INDICATING TO PICK UP ARG IMMED MODE
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:51:39	CGSTMNT	TABLES.BLI		PAGE 13-1

BC	 
BC	 %(***************************************************************************
BC	 	SPECIFIC VALUES FOR FIELDS IN AN ARITHMETIC-IF NODE
BC	 ***************************************************************************)%
BC	 
BC	 	%(***VALUES FOR AIFLBEQV FIELD****)%
BBINDC	 BIND
BNOLBEQC	 	NOLBEQV=0,
BLELBEQC	 	LELBEQV=1,		!LSS LABEL SAME AS EQL LABEL
BLGLBEQC	 	LGLBEQV=2,		!LSS LABEL SAME AS GTR LABEL
BGELBEQC	 	GELBEQV=3;		!GTR LABEL SAME AS EQL LABEL
BC	 
BC	 	%(***VALUES FOR AIFLBNXT FIELD*******)%
BBINDC	 BIND
BNOLBNXC	 	NOLBNXT=0,
BLLBNXTC	 	LLBNXT=1,		!LSS LABEL IS NEXT STMNT
BELBNXTC	 	ELBNXT=2,		!EQL LABEL IS NEXT STMNT
BGLBNXTC	 	GLBNXT=3;		!GTR LABEL IS NEXT STMNT
BC	 
BC	 
BC	 	%(***WHEN SWAP THE GTR AND LESS LABELS (BECAUSE MULTIPLY BY -1), USE THE
BC	 		FOLLOWING MACRO TO ADJUST THE "AIFLBNXT" AND "AIFLBEQV"  FIELDS***)%
BMACROSWPAIFSTMNTC	 	MACRO SWPAIFFLGS(STMNT)=
BC	 	BEGIN
BC	 		IF .STMNT[AIFLBNXT]		!IF LAST BIT OF AIFLBNXT IS ON
BC	 		THEN
BC	 		STMNT[AIFLBNXT]_.STMNT[AIFLBNXT] XOR #2;	!THEN COMPLEMENT 1ST BIT
BC	 		IF .STMNT[AIFLBEQV]				!IF LAST BIT OF AIFLBEQV ON
BC	 		THEN
BC	 		STMNT[AIFLBEQV]_.STMNT[AIFLBEQV] XOR #2;	!THEN COMPLEMENT 1ST BIT
BC	 	END$;
BLISS  V. 1.0-2.12	13-JUN-73  17:51:41	CGSTMNT	TABLES.BLI		PAGE 14-1

BC	 
BC	 
BC	 %(***************************************************************************
BC	 	DEFINE THE STRUCTURE OF AN ARGUMENT LIST.
BC	 	CERTAIN FIXED FIELDS ON THE LIST WILL BE REFERENCED SIMPLY BY NAME.
BC	 	FIELDS CORRESPONDING TO THE NTH ARG WILL BE REFERENCED BY [N,NAME]
BC	 	NOTE THAT THE FIRST ARG HAS N=1 (NOT!!!! 0)
BC	 	NOTE THAT THE COUNT FIELD OF THE LIST WILL BE POSITIVE AND EQUAL
BC	 	TO THE NUMBER OF ARGS.
BC	 ***************************************************************************)%
BC	 
BSTRUCTARGUMEARGUMEARGINDARGINDWDPOSSIZEC	 STRUCTURE ARGUMENTLIST[ARGINDEX,WD,POS,SIZE]=
BARGUMEARGINDWDPOSSIZEC	 	(@.ARGUMENTLIST+2+(.ARGINDEX-1)+.WD)<.POS,.SIZE>;
BC	 
BC	 
BC	 	%(***DEFINE THE FIXED FIELDS THAT OCCUR AT THE START OF EVERY ARGUMENT LIST - 
BC	 		DEFINE ALL THESE FIELDS IN TERMS OF A NEGATIVE NUMBER OF WDS FROM THE
BC	 		ENTRY FOR THE FIRST ARGUMENT (HENCE HAVE THE ARGINDEX FIELD=1) ***)%
BMACROC	 MACRO
BARGLABC	 	ARGLABEL=1,-2,LEFT$,
BARGLINC	 	ARGLINK=1,-2,RIGHT$,
BARGCOUC	 	ARGCOUNT=1,-1,RIGHT$;
BC	 
BC	 	%(***DEFINE THE FIELDS THAT ARE REPEATED FOR EACH ARGUMENT. 
BC	 		WILL ALWAYS REFERENCE THESE FIELDS BY A REF OF THE FORM:
BC	 			ALIST[N,FIELDNAME]
BC	 		WHERE N IS THE NUMBER OF THE ARGUMENT DESIRED
BC	 	*********)%
BMACROC	 MACRO
BARGNPTC	 	ARGNPTR=0,RIGHT$,		!PTR TO THE EXPRESSION NODE FOR THE ARG
BAFLGFLC	 	AFLGFLD=0,LEFT$,		!FLAGS
BAVALFLC	 	AVALFLG=0,35,1$;		!FLAG IS SET IF ARG IS A DATA ITEM OR
BC	 					! COMMON SUBEXPR
BC	 
BC	 
BC	 	%(***DEFINE THE FOLLOWING FIELD SO THAT PHASE 1 CAN REFERENCE THE AVALFLG
BC	 		BY USING A "BASE" STRUCTURE ON A GIVEN WORD*****)%
BMACROP1AVALC	 MACRO	P1AVALFLG=0,0,35,1$;
BC	 
BC	 
BC	 	%(***DEFINE MACRO THAT DESCRIBES NUMBER OF WDS NECESSARY IN AN ARGLIST THAT
BC	 		INCLUDES "ACT" NUMBER OF ARGS***)%
BMACROARGLSTACTC	 MACRO	ARGLSTSIZE(ACT)=(2+ACT)$;
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:51:45	CGSTMNT	TABLES.BLI		PAGE 15-1

BC	 
BC	 
BC	 %(***************************************************************************
BC	 	DEFINE THE STRUCTURE THAT WILL BE MAPPED ON THE LIBRARY FN ATTRIBUTE
BC	 	TABLE.
BC	 	FOR EACH LIBRARY-FN WILL HAVE A "LIBRARY-FN-INDEX" THAT INDICATES ITS
BC	 	POSITION IN THIS TABLE. THE FIRST ENTRY HAS INDEX =0.
BC	 ***************************************************************************)%
BSTRUCTLIBATTLIBATTFNINDEFNINDEWDPOSSIZECODEARGTYPC	 STRUCTURE LIBATTSTR[FNINDEX,WD,POS,SIZE,CODE,ARGTYP1]=
BC	 	%(***FOR MOST FIELDS BOTH "CODE" AND "ARGTYP1" ARE 0***)%
BIFCODEEQLC	 	IF .CODE EQL 0
BTHENC	 	THEN
BLIBATTFNINDEWDPOSSIZEC	 	(.LIBATTSTR+2*.FNINDEX+.WD)<.POS,.SIZE>
BC	 
BC	 	%(***FOR GENERIC FUNCTIONS ONLY - TO PICK UP THE NAME OF THE ACTUAL
BC	 		FUNCTION TO USE FOR A GIVEN ARG-TYPE.
BC	 		HAVE "CODE" EQUAL TO 1, "ARGTYP1" EQUAL TO THE VALTP1
BC	 		FIELD OF THE ARGUMENT.
BC	 	**********)%
BELSEC	 	ELSE
BC	 	%(***GO INDIRECT THRU  THE "ATTGENPTR" FIELD - ADD "ARGTYP1" TO
BC	 		THE PTR IN THAT FIELD TO GET A PTR TO THE WD THAT
BC	 		INDICATES THE ACTUAL FN TO USE (THAT WD WILL ITSELF CONTAIN
BC	 		A PTR BACK TO A FUNCTION-TABLE ENTRY)
BC	 	*******)%
BLIBATTFNINDEWDPOSSIZEARGTYPC	 	(.(.LIBATTSTR+2*.FNINDEX+.WD)<.POS,.SIZE> + .ARGTYP1)<0,36>;
BC	 
BC	 	%(***DEFINE MACROS THAT DESCRIBE THE FIELDS FOR A GIVEN FUNCTION INDEX***)%
BMACROC	 MACRO
BATTFNAC	 	ATTFNATTRIB=0,0,36,0,0$,	!THE FIRST WORD OF THE ENTRY WILL BE
BC	 					! COPIED INTO THE SYMBOL TABLE ENTRY
BC	 					! FOR THE FUNCTION NAME (INTO THE IDFNATTRIB FIELD)
BATTINLC	 	ATTINLINFLG=0,35,1,0,0$,	!BIT 0 OF 1ST WD IS FLAG FOR IN-LINE-FN
BATTGENC	 	ATTGENERFLG=0,33,1,0,0$,	! GENERIC FN FLAG
BATTARGC	 	ATTARGTYP=0,28,5,0,0$,	! VALTYPE FOR EXPECTED ARG
BATTRESC	 	ATTRESTYPE=0,23,5,0,0$,	! VALTYPE OF RESULT
BATTARGC	 	ATTARGCT=0,18,5,0,0$,	! NUMBER OF ARGS EXPECTED
BATTNEWC	 	ATTNEWOPR=0,0,18,0,0$,	!OPERATOR TO BE SUBSTITUTED FOR FN CALL
BC	 				! IF THIS FN IS TO BE GENERATED IN LINE
BATTGENC	 	ATTGENPTR=1,0,18,0,0$,	!FOR GENERIC FNS ONLY - PTR TO SUBTABLE
BC	 				! DESCRIBING WHICH FNS TO USE FOR EACH ARG TYPE
BATTACTC	 	ATTACTFN=1,0,18,1$;	!FOR GENERIC FNS ONLY - TO GET A PTR TO
BC	 				! THE ACTUAL FN TO USE WILL GO INDIRECT THRU
BC	 				! THE "ATTGENPTR" FIELD AND THEN ADD ON THE TYPE OF THE ARG
BC	 
BC	 
BBINDILGARGC	 	BIND	ILGARGTYPE=-1;	!FOR GENERIC FNS - IF A GIVEN ARG TYPE IS ILLEGAL
BC	 				! THE "ATTACTFN" FIELD FOR THAT TYPE WILL CONTAIN THIS CODE
BBINDVARGCTC	 	BIND	VARGCTFLG=#37;	!FUNCTIONS THAT CAN TAKE AN ARBITRARY NUMBER OF
BC	 				! ARGS (EG MAX,MIN) HAVE THE "ATTARGCT" SET TO THIS VAL
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:51:51	CGSTMNT	TABLES.BLI		PAGE 16-1

BC	 
BC	 
BC	 %(***************************************************************************
BC	 	DEFINE THE STRUCTURE TO BE MAPPED ON THE LIST OF ARG-CODES
BC	 	AND CORRESPONDING  VALUES THAT OCCURS UNDER AN OPEN STATEMENT
BC	 ***************************************************************************)%
BC	 
BSTRUCTOPENLIOPENLIARGINDARGINDWDPOSSIZEC	 STRUCTURE OPENLIST[ARGINDEX,WD,POS,SIZE]=
BOPENLIARGINDWDPOSSIZEC	 	(@.OPENLIST+.ARGINDEX+.WD)<.POS,.SIZE>;
BC	 
BC	 
BC	 	%(***DEFINE THE FIELDS USED FOR A GIVEN INDEX***)%
BMACROOPENLCC	 MACRO	OPENLCODE=0,LEFT$,	!CODE FOR FOROTS FOR THIS ARG
BOPENLPC	 	OPENLPTR=0,RIGHT$;	!PTR TO THE CONSTANT TABLE OR SYMBOLTABLE
BC	 				! ENTRY FOR THE VALUE FOR THIS ARG TO FOROTS
BC	 
BC	 	%(***DEFINE VALUES FOR OPENLCODE***)%
BBINDOPNCDIC	 BIND	OPNCDIALOG=01,		!DIALOG
BOPNCACC	 	OPNCACCESS=02,		!ACCESS
BOPNCDEC	 	OPNCDEVICE=03,		!DEVICE
BOPNCBUC	 	OPNCBUFCOUNT=04,	!BUFFER COUNT
BOPNCBLC	 	OPNCBLOCKSIZE=05,	!BLOCK SIZE
BOPNCFIC	 	OPNCFILENAME=06,	!FILE NAME
BOPNCPRC	 	OPNCPROTECTION=07,	!PROTECTION
BOPNCDIC	 	OPNCDIRECTORY=#10,	!DIRECTORY
BOPNCLIC	 	OPNCLIMIT=#11,		!LIMIT
BOPNCMOC	 	OPNCMODE=#12,		!MODE
BOPNCFIC	 	OPNCFILESIZE=#13,	!FILE SIZE
BOPNCREC	 	OPNCRECORDSIZE=#14,	!RECORD SIZE
BOPNCDIC	 	OPNCDISPOSE=#15,	!DISPOSE
BOPNCVEC	 	OPNCVERSION=#16,	!VERSION
BOPNCREC	 	OPNCREELS=#17,		!REELS
BOPNCMOC	 	OPNCMOUNT=#20,		!MOUNT
BOPNCERC	 	OPNCERROR=#21,		!ERROR
BOPNCASC	 	OPNCASSOCIATE=#22;	!ASSOCIATE
BLISS  V. 1.0-2.12	13-JUN-73  17:51:54	CGSTMNT	TABLES.BLI		PAGE 17-1

BC	 
BC	 %(***************************************************************************
BC	 	DEFINE THE STRUCTURE OF THE SYMBOL TABLE
BC	 ***************************************************************************)%
BSTRUCTSYMTABSYMTABDMYDMYWDPOSSIZEC	 STRUCTURE SYMTABENTRY[DMY,WD,POS,SIZE]=
BSYMTABWDPOSSIZEC	 	(@.SYMTABENTRY+.WD)<.POS,.SIZE>;
BC	 
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:51:58	CGSTMNT	TABLES.BLI		PAGE 18-1

BC	 
BC	 %(***************************************************************************
BC	 	DEFINE THE STRUCTURE OF THE DIMENSION TABLE
BC	 ***************************************************************************)%
BSTRUCTDIMENTDIMENTDMYDMYWDPOSSIZEC	 STRUCTURE DIMENTRY[DMY,WD,POS,SIZE]=
BDIMENTWDPOSSIZEC	 	(@.DIMENTRY+.WD)<.POS,.SIZE>;
BMACRODIMNUMC	 MACRO DIMNUM=0,0,18,16$;			!NUMBER OF DIMENSIONS
BMACROADJDIMC	 MACRO	ADJDIMFLG=0,0,35,1$;			!FLAG FOR ADJUSTABLY DIMENSIONED
BMACROARASIZC	 MACRO 	ARASIZ=0,0,RIGHT$;			!NUMBER OF WDS IN THE ARRAY
BC	 						!PTR TO A CONSTANT TABLE ENTRY UNLESS
BC	 						! ARRAY IS ADJ DIMENSIONED,
BC	 						! IN WHICH CASE, HAVE PTR TO A TMP
BMACROARAOFFC	 MACRO	ARAOFFSET=0,1,LEFT$;			!VALUE OF OFFSET FOR THIS
BC	 						! ARRAY IF DIMENSIONS ARE
BC	 						! CONSTANT; POINTER TO LOC
BC	 						! IN WHICH THE OFFSET WILL
BC	 						! BE STORED IF DIMENSIONS
BC	 						! ARE VARIABLE
BMACROARADDRC	 MACRO	ARADDRVAR=0,1,RIGHT$;		!FOR FORMAL ARRAYS THAT ARE NOT ADJUSTABLY
BC	 						! DIMENSIONED, THIS FIELD POINTS 
BC	 						! TO A "PSEUDO" SYMBOL TABLE ENTRY
BC	 						! FOR THE ARRAY NAME WITH THE TYPE
BC	 						! FIELD SET TO INTEGER. IT IS THIS SYMBOL
BC	 						! THAT IS USED IN THE ADDRESS CALC
BMACRODIMENSXC	 MACRO	DIMENS(X)=0,2+2*X,FULL$,		!DIMENSIONS FOR THE XTH DIMENSION
BDIMENLXC	 	DIMENL(X)=0,2+2*X,LEFT$,		!LOWER BOUND OF DIMENSION X
BDIMENUXC	 	DIMENU(X)=0,2+2*X,RIGHT$,		!UPPER BOUND OF DIMENSION X
BDVARLBXC	 	DVARLBFLG(X)=0,3+2*X,34,1$,		!FLAG FOR LOWER BOUND A  VARIABLE
BDVARUBXC	 	DVARUBFLG(X)=0,3+2*X,33,1$,		! FOR UPPER BOUND A VARIABLE
BDVARFAXC	 	DVARFACTFLG(X)=0,3+2*X,35,1$,		! FOR FACTOR A VARIABLE
BDFACTOXC	 	DFACTOR(X)=0,3+2*X,RIGHT$;		!FACTOR THAT SS FOR THIS
BC	 						! DIMENSION IS MULTIPLIED BY
BC	 						! THIS IS A PTR TO A CONSTANT TABLE ENTRY
BC	 						! IF PRECEEDING DIMENSIONS WERE CONSTANT,
BC	 						! A PTR TO A SYMBOL TABLE ENTRY FOR A
BC	 						! VAR IN WHICH THE VAL IS STORED IF VARIABLE
BMACROFIRSTDC	 MACRO FIRSTDIM=0,2,WHOLE$;
BC	 
BC	 	%(***THE SUBENTRY FOR A GIVEN DIMENSION***)%
BSTRUCTDIMSUBDIMSUBWDWDPOSSIZEC	 STRUCTURE DIMSUBENTRY[WD,POS,SIZE]=
BDIMSUBWDPOSSIZEC	 	(@.DIMSUBENTRY+.WD)<.POS,.SIZE>;
BC	 
BMACROC	 MACRO
BDIMLBC	 	DIMLB=0,LEFT$,
BDIMUBC	 	DIMUB=0,RIGHT$,
BVARLBFC	 	VARLBFLG=1,34,1$,			!FLAG FOR "LOWER BOUND ON THIS DIMENSION
BC	 						! A VARIABLE
BVARUBFC	 	VARUBFLG=1,33,1$,			!UPPER BOUND A VARIABLE
BVARFACC	 	VARFACTFLG=1,35,1$;			!FACTOR FOR THIS DIMENSION A VARIABLE
BMACRODIMFACC	 MACRO	DIMFACTOR=1,RIGHT$;		!FACTOR TO MULTIPLY SS OF THIS DIMENSION
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:52:01	CGSTMNT	TABLES.BLI		PAGE 19-1

BC	 
BC	 
BC	 
BC	 %(*********
BC	 	DEFINE VALUES OF LABEL TABLE FIELDS USED FOR PEEPHOLING
BC	 **********)%
BC	 
BC	 	%(***VALUES FOR SNSTATUS FIELD***)%
BBINDOUTPBUC	 BIND	OUTPBUFF=2,			!LABEL IS OUT OF THE PEEPHOLE BUFFER
BINPBUFC	 	INPBUFF=1,			!LABEL IS STILL IN THE PEEPHOLE BUFFER
BUNRESOC	 	UNRESOLVED=0;			!LABEL IS UNRESOLVED
BBINDLBTBENC	 BIND	LBTBENDMK=0;				!VALUE OF NXTLAB FIELD
BC	 						! FOR LAST LINK
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:52:02	CGSTMNT	TABLES.BLI		PAGE 20-1

BC	 
BC	 %(**************
BC	 	DEFINE STRUCTURE FOR PEEPHOLE BUFFER
BC	 ****************)%
BC	 
BC	 	%(***SIZE OF PEEPHOLE BUFFER ENTRIES****)%
BBINDPBFENTC	 BIND PBFENTSIZE=3;			!NUMBER OF WORDS IN EACH PEEPHOLE BUFFER ENTRY
BBINDPBFSIZPBFENTC	 BIND PBFSIZE=25*PBFENTSIZE + 2;		!NUMBER OF WORDS IN THE PEEPHOLE BUFFER
BC	 					! (KEEP 1 WD AFTER THE LAST ENTRY TO HOLD
BC	 					! A POSSIBLE LABEL AND A POSSIBLE ISN)
BC	 
BC	 
BC	 	%(****STRUCTURE FOR LOOKING AT A PEEPHOLE*******)%
BC	 	%(*******THE ARG INST INDICATES WHICH INSTRUCTION OF THE PEEPHOLE***)%
BSTRUCTPEEPHOPEEPHOINSTINSTWDPOSSIZEC	 STRUCTURE	PEEPHOLE[INST,WD,POS,SIZE]=
BPEEPHOPBFENTINSTWDPOSSIZEC	 	(@.PEEPHOLE + PBFENTSIZE*.INST +.WD)<.POS,.SIZE>;
BC	 
BC	 
BC	 	%(****STRUCTURE FOR A PEEPHOLE BUFFER ENTRY***)%
BSTRUCTPEEPFRPEEPFRWDWDPOSSIZEC	 STRUCTURE PEEPFRAME[WD,POS,SIZE]=
BPEEPFRWDPOSSIZEC	 	(.PEEPFRAME+.WD)<.POS,.SIZE>;
BC	 
BC	 	%(***STRUCTURE FOR A PTR TO  A PEEPHOLE BUFFER ENTRY*****)%
BSTRUCTPPEEPFPPEEPFWDWDPOSSIZEC	 STRUCTURE PPEEPFRAME[WD,POS,SIZE]=
BPPEEPFWDPOSSIZEC	 	(@.PPEEPFRAME+.WD)<.POS,.SIZE>;
BC	 
BC	 
BC	 %(*****DEFINE FIELDS FOR PEEPHOLE BUFFER FRAME*****)%
BMACROPBFISNC	 MACRO	PBFISN=0,WHOLE$,		!ISN FOR STMNT BEGUN BY THIS INSTR
BC	 					! -1 FOR INSTRS THAT DO NOT START STMNTS
BPBFLABC	 	 PBFLABEL=1,LEFT$,			!PTR TO LABEL TABLE ENTRY FOR THE 1ST
BC	 						!  LABEL ASSOCIATED WITH THIS
BC	 						! LOC
BPBFSYMC	 	PBFSYMPTR=1,RIGHT$,			!0 IF ADDR FIELD IS A LABEL
BC	 						!1 IF ADDR FIELD HAS NO SYMBOLIC REPR
BC	 						!2 IF ADDR FIED IS A PTR TO THE SIXBIT
BC	 						! FOR AN IMPLICITLY CALLED FUNCTION
BC	 						!3 IF ADDR IS A PTR TO A SYMBOL TABLE ENTRY
BC	 						! FOR AN EXPLICITLY CALLED FN
BC	 						! OTHERWISE A PTR TO THE SYMBOL TABLE,CONSTANT
BC	 						! TABLE OR TEMP TABLE ENTRY FOR THIS ADDR FIELD
BPBFINSC	 	PBFINSTR=2,WHOLE$,
BPBFADDC	 	PBFADDR=2,RIGHT$,		!ADDRESS FIELD OF THE INSTR
BPBFOPCC	 	PBFOPCOD=2,27,9$,		! OP-CODE
BPBFOPKC	 	PBFOPKEY=2,27,5$,		! LAST 5 BITS OF OPCODE, USED AS
BC	 					! KEY IN PEEPHOLE OPTIMIZER
BPBFREGC	 	PBFREG=2,23,4$,			!REG FIELD
BPBFINDC	 	PBFINDEX=2,18,4$,		!INDEX AND INDIRECT FIELDS
BPBFMEMC	 	PBFMEMREF=2,0,23$;		!ADDRESS,INDIRECT, AND INDEX FIELDS
BBINDNOLABEC	 BIND	NOLABEL=0;				!FLAG FOR "NO LABEL YET ASSOCIATED
BC	 						! WITH THIS LOC"
BBINDNOISNC	 BIND	NOISN=-1;		!CODE FOR "NO ISN ASSOCIATED WITH THIS INSTR"
BC	 				! (IE THE INSTR IS IN THE MIDDLE OF A STMNT)
BC	 
BC	 %(*******SPECIAL VALS FOR PBFSYMPTR FIELD*******)%
BBINDC	 BIND
BPBFLABC	 	PBFLABREF=0,			!ADDRESS FIELD IS A LABEL, RH IS AN INSTRUCTION
BLISS  V. 1.0-2.12	13-JUN-73  17:52:04	CGSTMNT	TABLES.BLI		PAGE 20-2

BPBFNOSC	 	PBFNOSYM=1,			!ADDRESS FIELD IS AN OCTAL CONSTANT, RH IS AN INSTR
BPBFIMFC	 	PBFIMFN=2,			!ADDR FIELD IS A PTR TO AN IMPLICITLY CALLED FN
BPBFEXFC	 	PBFEXFN=3,			!ADDR FIELD IS A PTR TO AN EXPLICITLY CALLED FN
BPBF2LAC	 	PBF2LABREF=4,			!BOTH HALVES OF WD ARE PTRS TO LABEL TABLE
BC	 					! ENTRIES
BPBF2NOC	 	PBF2NOSYM=5,			!BOTH HALVES OF WD ARE OCTAL CONSTANTS WITH
BC	 					! NO SYMBOLIC REPRESENTATION
BPBFFORC	 	PBFFORMAT=6,			!RIGHT HALF WORD IS FORMAT ADDRESS
BPBFLLAC	 	PBFLLABREF=7,			!LEFT HALF IS A LABEL REFERENCE
BC	 					!USED PRIMARILY FOR ARGUMENT BLOCKS TO
BC	 					!FOROTS FOR THE END=,ERR= WORD
BPBFENTC	 	PBFENTRY=8;			!FOR A GLOBAL ENTRY (AS SUBROUTINE
BC	 					!OR ENTRY NAME).
BC	 
BC	 
BBINDPBFCODC	 BIND	PBFCODMAX=16;		!CAN NEVER USE ANY NUMBER GTR THAN 16 AS A SPECIAL
BC	 				! CODE VALUE FOR PSYMPTR, BECAUSE ANY NUMBER GTR
BC	 				! THAN 16 MIGHT BE THE ADDRESS OF A NODE
BLISS  V. 1.0-2.12	13-JUN-73  17:52:04	CGSTMNT	TABLES.BLI		PAGE 21-1

BC	 
BC	 
BC	 %(***************************************************************************
BC	 	TO GENERATE A JRST INSTRUCTION
BC	 ***************************************************************************)%
BMACROJRSTGEADDRC	 MACRO JRSTGEN(ADDR)=
BC	 BEGIN
BC	 	PBOPWD_JRSTOC OR ADDR;
BC	 	PSYMPTR_PBFLABREF;			!FLAG FOR "ADDRESS FIELD OF THIS INSTR IS
BC	 						! A LABEL"
BC	 	OBUFF();
BC	 END$;
BC	 
BC	 
BC	 	%(***TO GENERATE JRST INDIRECT***)%
BMACROJRSTIGADDRC	 MACRO JRSTIGEN(ADDR)=
BC	 BEGIN
BC	 	PBOPWD_JRSTOC OR INDBIT OR ADDR;
BC	 	PSYMPTR_PBFLABREF;
BC	 	OBUFF();
BC	 END$;
BLISS  V. 1.0-2.12	13-JUN-73  17:52:04	CGSTMNT	TABLES.BLI		PAGE 22-1

BC	 %(***************************************************************************
BC	 	DEFINE THE VARIOUS WAYS OF BUILDING INDICES INTO THE OPGENDISPATCH TABLE.
BC	 	EACH KIND OF INDEX IS COMPOSED OF SOME COMBINATION OF THE FLAG AND OPERATOR
BC	 	FIELDS OF THE NODES FOR WHICH CODE IS TO BE GENERATED.
BC	 ***************************************************************************)%
BC	 
BC	 
BC	 	%(****TO GET THE VAL OF AN ARGNODE INTO THE REG FOR COMPUTATION OF THE PARENT (WHEN
BC	 		THE VAL OF THE SON IS WITHIN REACH OF 1 INSTR.
BC	 		DEPENDS ON THE VALS OF NEGFLG,NOTFLG,SAMEFLG,IMMEDFLG
BC	 		FOR THE ARG INVOLVED, ALSO ON THE VALUE-TYPE OF THE ARG.
BC	 	*******)%
BMACROGETA1OPNODEANODEC	 MACRO	GETA1OPIX(PNODE,ANODE)=
BC	 	BEGIN
BC	 		(.PNODE[A1FLG1]^2 + .ANODE[VALTP1] +(IF .KA10FLG THEN OPGETA ELSE OPGETI))
BC	 	END$;
BC	 
BMACROGETA2OPNODEANODEC	 MACRO	GETA2OPIX(PNODE,ANODE)=
BC	 	BEGIN
BC	 		(.PNODE[A2FLG1]^2 + .ANODE[VALTP1] + (IF .KA10FLG THEN OPGETA ELSE OPGETI))
BC	 	END$;
BC	 
BC	 	%(***FOR DO-LOOPS - DONT ACTUALLY HAVE AN EXPRESSION NODE BUT WANT TO GET VAL
BC	 		HOW TO DO SO DEPENDS ON VAL OF IMMEDFLG, VALTYPE AND NEGATE FLAG***)%
BMACRODOGETAIMFLGVLTPNEGFLAC	 MACRO	DOGETAOPIX(IMFLG,VLTP,NEGFLAG)=
BC	 	(NEGFLAG^4+IMFLG^2 + VLTP + (IF .KA10FLG THEN OPGETA ELSE OPGETI))$;
BC	 
BC	 
BC	 
BC	 
BC	 
BC	 	%(****TO COMPUTE THE VALUE OF A NON-CONTROL BOOLEAN NODE. CODE TO BE GENERATED
BC	 		DEPENDS ON A2NOTFLG, A2IMMEDFLG, AND MEMCMPFLG AND THE OPERSP***)%
BMACROBOOLOPPNODEC	 MACRO	BOOLOPIX(PNODE)=
BC	 	(.PNODE[A2NOTFLG]^4 + .PNODE[A2IMMEMCMPFLGS]^2 + .PNODE[OPERSP] + OPGBOO)$;
BC	 
BC	 
BC	 	%(******TO SKIP THE NEXT INSTRUCTION WHEN A RELATIONAL HAS THE VAL INDICATED
BC	 		BY 'SKPCND'. CODE TO BE GENERATED DEPENDS ON WHETHER THE ARGS
BC	 		OF THE RELATIONAL ARE SINGLE OR DOUBLE WD AND WHETHER
BC	 		THE 2ND ARG IS IMMED*******)%
BC	 	%(*****(NOTE THAT IF THIS IS EVER CHANGED, THEN DPIMMRELOPIX DEFINED
BC	 		BELOW SHOULD ALSO BE CHANGED)***)%
BMACRORELOPIPNODEANODESKPCNDC	 	MACRO RELOPIX(PNODE,ANODE,SKPCND)=
BC	 	BEGIN
BC	 		REGISTER MODE;			!MODE ON WHICH TO SKIP
BC	 		MODE_.PNODE[OPERSP];		!MODE SPECIFIED IN RELATIONAL
BC	 		IF FALSITY(SKPCND)
BC	 		THEN MODE_CMREL(.MODE);		!IF WANT TO SKIP ON REL FALSE
BC	 
BC	 		.ANODE[DBLFLG]^4 + .PNODE[A2IMMEDFLG]^3 + .MODE + OPGREL
BC	 	END$;
BC	 
BC	 
BC	 	%(****FOR A RELATIONAL BETWEEN A DOUBLE-PREC AND ZERO. CAN USE SAME
BC	 		CODE AS USE TO COMPARE A REAL TO ZERO (SEE RELOPIX ABOVE)***)%
BMACRODPIMMRPNODESKPCNDC	 	MACRO	DPIMMRELOPIX(PNODE,SKPCND)=
BLISS  V. 1.0-2.12	13-JUN-73  17:52:09	CGSTMNT	TABLES.BLI		PAGE 22-2

BC	 	BEGIN
BC	 		REGISTER MODE;	!MODE ON WHICH TO SKIP
BC	 		MODE_.PNODE[OPERSP];
BC	 		IF FALSITY(SKPCND)
BC	 		THEN MODE_CMREL(.MODE);	!IF WANT TO SKIP ON RELATIONAL FALSE
BC	 
BC	 		1^3 + .MODE + OPGREL	!HAVE A2IMMEDFLG (SINCE COMPARE TO 0)
BC	 					! AND DO NOT HAVE DOUBLE-WD COMPARE)
BC	 	END$;
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:52:10	CGSTMNT	TABLES.BLI		PAGE 23-1

BC	 
BC	 	%(*****TO COMPUTE THE VAL OF AN ARITHMETIC NODE.
BC	 		DEPENDS ON THE VALS A2IMMEDFLG,MEMCMPFLG,VALTYPE, AND OPERSP OF THE PARENT
BC	 		NOTE THAT EXPONENTIATION NODES WERE CONVERTED TO FUNCTION-CALLS DURING
BC	 		THE COMPLEXITY WALK. HENCE NEVER HAVE TO GET OPGNTA INDEX FOR EXPONEN
BC	 	********)%
BMACROARITHOPNODEC	 MACRO	ARITHOPIX(PNODE)=
BC	 	BEGIN
BC	 		(.PNODE[A2IMMEMCMPFLGS]^4+.PNODE[OPRSP2]^2+.PNODE[VALTP1]+
BC	 			(IF .KA10FLG THEN OPGARA ELSE OPGARI))
BC	 	END$;
BC	 
BC	 
BC	 	%(*********FOR THE ADD TO MEMORY FOR A DO-LOOP********)%
BMACRODOARITVLTPMCPFLGIMFLGNEGFLAC	 MACRO	DOARITHOPIX(VLTP,MCPFLG,IMFLG,NEGFLAG)=
BC	 		%(***HAVE A2IMMEDFLG=IMFLG,  MEMCMPFLG=MCPFLG,
BC	 			OPERATOR IS ADD IF NEGFLAG IS 0, SUB IF NEGFLAG IS 1***)%
BC	 	(IMFLG^5 + MCPFLG^4 + (ADDOP+NEGFLAG)^2 + VLTP + (IF .KA10FLG THEN OPGARA ELSE OPGARI))$;
BC	 
BC	 
BC	 
BC	 	%(*****TO COMPUTE THE VAL OF A TYPE CONVERSION NODE.
BC	 		WILL BE GENERATING CODE ONLY WHEN  DESTIN  TYPE
BC	 		IS REAL,INTEGER,DOUBLEPREC,OR COMPLEX (IE NEVER HAVE
BC	 		TO DEAL WITH OCTAL,DOUBLE-OCTAL,LOGICAL,LITERAL,OR CONTROL)
BC	 		THUS ONLY NEED TO DIFFERENTIATE BETWEEN THESE 4 TYPES
BC	 		THE TYPE TO BE CONVERTED TO (SPECIFIED BY THE VALTYPE FIELD OF THE
BC	 		TYPE-CONVERION NODE).
BC	 		THE OPERSP FIELD OF THE TYPE CONVERSION NODE, INDICATES
BC	 		THE ORIGINAL TYPE BEING CONVERTED.
BC	 	*******)%
BMACROTPCNVIPNODEC	 	MACRO	TPCNVIX(PNODE)= (.PNODE[OPERSP]^2 + .PNODE[VALTP1] + 
BC	 			(IF .KA10FLG THEN OPGTCA ELSE OPGTCI))$;
BC	 
BC	 
BC	 
BC	 
BC	 	%(****TO COMPUTE THE VALUE OF A NEGNOT NODE.  WHEN PHASE 2 SKELETON IS PRESENT,
BC	 		THERE WILL BE FEW OF THESE. (EG FOR F(-X), NOT(-X))*********)%
BC	 
BC	 	%(***WHEN A2NEG,A2NOT, OR A2SAMEFLG IS SET, WILL USE GETA2OPIX TO GET THE ARG
BC	 		INTO A REG, AND THEN USE THE FOLLOWING INDEX*****)%
BMACRONEGNOTPNODEC	 MACRO	NEGNOT1IX(PNODE)=
BC	 	(.PNODE[MEMCMPFLG]^3 + .PNODE[OPERSP]^2 + .PNODE[VALTP1] + (IF .KA10FLG THEN OPGN1A ELSE OPGN1I))$;
BC	 
BC	 	%(***OTHERWISE, USE AN INDEX BASED ON A2IMMED, MEMCMP, OPERSP, VALTP1****)%
BMACRONEGNOTPNODEC	 MACRO	NEGNOT2IX(PNODE)=
BC	 	(.PNODE[A2IMMEMCMPFLGS]^3 + .PNODE[OPERSP]^2 + .PNODE[VALTP1] + (IF .KA10FLG THEN OPGN2A ELSE OPGN2I))$;
BC	 
BC	 	%(***TO COMPUTE THE VALUE OF A P2MUL OR P2PL1MUL  -
BC	 		CODE TO BE GENERATED DEPENDS ON VALTYPE OF THE NODE AND
BC	 		ON WHICH OP IS TO BE PERFORMED****)%
BMACROSPECOPPNODEC	 MACRO	SPECOPIX(PNODE)=
BC	 	BEGIN
BC	 		%(***IF ARG IS IMMEDIATE AND OPERATION IS P2PLUS1-MULTIPLY OR CUBE, HAVE A
BC	 			SPECIAL CASE***)%
BC	 		IF .PNODE[A1IMMEDFLG]
BLISS  V. 1.0-2.12	13-JUN-73  17:52:14	CGSTMNT	TABLES.BLI		PAGE 23-2

BC	 		THEN
BC	 		BEGIN
BC	 			IF .PNODE[OPERSP] EQL P2PL1OP
BC	 			THEN (.PNODE[A1NEGFLG]^2 + .PNODE[VALTP1] + OPP21I)
BC	 			ELSE
BC	 			IF .PNODE[OPERSP] EQL CUBOP
BC	 			THEN (.PNODE[A1NEGFLG]^2 + .PNODE[VALTP1] + OPCUBI)
BC	 			ELSE
BC	 			(.PNODE[OPERSP]^3 + .PNODE[A1NEGFLG]^2 +.PNODE[VALTP1]
BC	 				+(IF .KA10FLG THEN OPGSPA ELSE OPGSPI))
BC	 		END
BC	 		ELSE
BC	 		(.PNODE[OPERSP]^3 + .PNODE[A1NEGFLG]^2 +.PNODE[VALTP1]
BC	 			+(IF .PNODE[MEMCMPFLG] THEN OPGSPM		!FOR OPS DONE TO MEMORY DONT CARE
BC	 									! WHETHER ARE KA OR KI
BC	 				ELSE IF .KA10FLG THEN OPGSPA ELSE OPGSPI))
BC	 	END$;
BC	 
BC	 
BC	 
BC	 	%(***TO GENERATE CODE FOR AN IN-LINE FUNCTION WHEN ARG1 FOR THAT FN IS ALREADY IN REGFORC**)%
BMACROILFIXPNODEC	 MACRO	ILFIX(PNODE)=
BC	 	BEGIN
BC	 		IF .PNODE[A2IMMEDFLG]
BC	 		THEN
BC	 		.PNODE[OPERSP] + OPGILI
BC	 		ELSE
BC	 		.PNODE[OPERSP] + OPGILF
BC	 	END$;
BC	 
BC	 	%(***TO GENERATE CODE FOR AN IN-LINE FN WHEN ARG IS NOT IN REGFORCOMP (USED FOR
BC	 		ABS,IABS (NOT IN RELEASE 1), AND SIGN ***)%
BMACROILF1IXPNODEC	 MACRO	ILF1IX(PNODE)=
BC	 	(.PNODE[OPERSP] + OPGIL1) $;
BC	 
BC	 
BC	 	%(*****TO PERFORM THE ACTION SPECIFIED FOR A "STORECLS" NODE (WHICH IS USED
BC	 		WHEN EITHER A PTR TO AN ARRAY ENTRY OR THE CONTENTS OF THAT
BC	 		ENTRY MUST BE STORED IN A TEMPORARY************)%
BMACROSTCLSOPNODEC	 MACRO	STCLSOPIX(PNODE)=
BC	 	(.PNODE[OPERSP]^1 + .PNODE[A2SAMEFLG] + OPGSTC)$;
BC	 
BC	 
BC	 	%(*****TO STORE A VALUE THAT HAS BEEN COMPUTED****)%
BMACROSTOROPPNODEC	 MACRO	STOROPIX(PNODE)=
BC	 	BEGIN
BC	 		.PNODE[DBLFLG] + (IF .KA10FLG THEN OPGSTA ELSE OPGSTI)
BC	 	END$;
BC	 
BC	 	%(******TO STORE THE VALUE OF THE RHS OF AN ASSIGNMENT STMNT
BC	 		INTO THE LHS. CODE TO BE GENERATED DEPENDS ON WHETHER THE VAL MUST
BC	 		BE NEGATED OR COMPLEMENTED, AND ON THE VALTYPE*****)%
BMACROASNOPIPNODELHSNODC	 	MACRO ASNOPIX(PNODE,LHSNODE)=
BC	 	BEGIN
BC	 		%(***IF THIS STATEMENT HAS A2IMMEDFLG AND A2SAMEFLG BOTH SET, IT
BC	 			MUST BE THAT THE RHS IS A REGCONTENTS NODE FROM WHICH WE
BC	 			ONLY WANT TO USE THE RIGHT HALF (BECAUSE IT IS AN AOBJN WD).***)%
BLISS  V. 1.0-2.12	13-JUN-73  17:52:16	CGSTMNT	TABLES.BLI		PAGE 23-3

BC	 		IF .PNODE[A2IMMEDFLG] AND .PNODE[A2SAMEFLG]
BC	 		THEN
BC	 		OPGASR
BC	 
BC	 		ELSE
BC	 		.PNODE[A1NGNTFLGS]^2 + .LHSNODE[VALTP1] + (IF .KA10FLG THEN OPGASA ELSE OPGASI)
BC	 	END$;
BC	 
BC	 
BC	 	%(****TO GENERATE CODE FOR AN ARITHMETIC-IF STATEMENT**********)%
BC	 
BMACROC	 MACRO
BAIFIXSTMNODCNEXPRC	 	AIFIX(STMNODE,CNEXPR)=
BC	 		(.STMNODE[AIFFLGS]^1 +
BC	 			(IF .CNEXPR[OPRCLS] EQL DATAOPR
BC	 			THEN 0
BC	 			ELSE .CNEXPR[INREGFLG])
BC	 			+ OPGAIF)$;
BC	 
BC	 	%(***TO INIT A LOGICAL VALUE TO TRUE OR FALSE (-1 OR 0). CODE
BC	 		TO BE GENERATED DEPENDS ON WHETHER VAL IS TO BE LEFT IN A REG AND
BC	 		ON THE VAL TO BE STORED
BC	 		NOTE THAT "LOGVAL" IS EXPECTED TO BE 777777777777 FOR "TRUE"
BC	 	*****)%
BMACROSETLOGPNODELOGVALC	 MACRO	SETLOGIX(PNODE,LOGVAL)=
BC	 	((LOGVAL AND #2) + .PNODE[INREGFLG] + OPGSET)$;
BC	 
BC	 
BC	 	%(*****TO TRANSFER CONTROL WHEN A SPECIFIED VAR HAS THE SPECIFIED VAL TRUE OR FALSE.
BC	 		CODE TO BE GENERATED DEPENDS ON WHICH CONDITION TRANSFER IS DESIRED
BC	 		AND ON WHETHER THE VAL IS IN A REG
BC	 		NOTE THAT "JMPCND" IS EXPECTED TO BE 777777777777 FOR "TRUE"
BC	 ****)%
BMACROCNDVTRNODEJMPCNDC	 MACRO	CNDVTRIX(NODE,JMPCND)=
BC	 	BEGIN
BC	 		IF .NODE[OPRCLS] EQL DATAOPR
BC	 		THEN
BC	 		((JMPCND AND #2) + OPGVTS)
BC	 		ELSE
BC	 		((JMPCND AND #2) + .NODE[INREGFLG] + OPGVTS)
BC	 	END$;
BC	 
BC	 
BC	 	%(*******TO TRANSFER TO ONE LABEL IF A SPECIFIED VALUE IS TRUE
BC	 		AND TO ANOTHER IF THE VAL IS FALSE.
BC	 		CODE TO BE GENERATED DEPENDS ON WHETHER THE VAL TO BE GENERATED
BC	 		IS IN A REG.
BC	 	********)%
BMACROALTTRINODEC	 MACRO	ALTTRIX(NODE)=
BC	 	BEGIN
BC	 		IF .NODE[OPRCLS] EQL DATAOPR
BC	 		THEN
BC	 		OPGALT
BC	 		ELSE
BC	 		(.NODE[INREGFLG] + OPGALT)
BC	 	END$;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:52:27	CGSTMNT	TABLES.BLI		PAGE 23-4

BLISS  V. 1.0-2.12	13-JUN-73  17:52:27	CGSTMNT	TABLES.BLI		PAGE 24-1

BC	 
BC	 
BC	 %(**************************************************
BC	 	DEFINE STRUCTURE FOR OPGENTABLE ENTRY - 
BC	 	FOR A GIVEN TYPE OF NODE, WILL HAVE A SERIES OF SUCH ENTRIES, ONE
BC	 	FOR EACH INSTRUCTION TO BE GENERATED
BC	 ******************************************************)%
BC	 
BC	 
BSTRUCTOPGENTOPGENTWDWDPOSSIZEC	 STRUCTURE OPGENTRY[WD,POS,SIZE]=
BOPGENTWDPOSSIZEC	 	(@.OPGENTRY+.WD)<.POS,.SIZE>;
BC	 
BC	 %(**************FIELDS FOR AN OPGENTRY***********)%
BMACROC	 MACRO
BREGSPEC	 	REGSPEC=0,LEFT$,			!SPECIFIES WHERE TO GET
BC	 						! REG TO BE USED
BMEMSPEC	 	MEMSPEC=0,RIGHT$,			!SPECIFIES WHERE TO GET
BC	 						! MEMREF TO BE USED
BPATTERC	 	PATTERN=1,WHOLE$;		!PATTERN WORD FOR INSTR TO
BC	 						! BE GENERATED
BC	 
BC	 %(*********DEFINE VALUES FOR REGSPEC AND MEMSPEC FIELDS*********)%
BBINDC	 BIND
BFRPTNC	 	FRPTN=0,		!REG OR MEMREF FIELD USED AS IS IN WD 1 OF OPGENTABLE ENTRY
BFRRFCC	 	FRRFC=1,		!REG FIELD IN THE GLOBAL "REGFORCOMP" SHOULD BE
BC	 				! ADDED IN TO THE REG FIELD IN WD 1
BC	 				! (OR THE REG SPECIFIED BY "REGFORCOMP" 
BC	 				! SHOULD BE USED AS THE MEMREF FIELD
BIMFNC	 	IMFN=2,			!USE THE IMPLICIT FN NAME PTED TO BY TREEPTR
BWD1IMFC	 	WD1IMF=3,		!USE THE IMPLICIT-FN NAME POINTED TO BY THE RH OF THE PATTERN WD
BRGIMFNC	 	RGIMFN=4,		!USE THE IMPLICIT-FN NAME POINTED TO BY THE RH OF
BC	 				! THE PATTERN WD INDEXED BY THE "REGFORCOMP"
BA1CNSTC	 	A1CNST=5,		!ARG1 IS IMMED CNST
BA2CNSTC	 	A2CNST=6,		!ARG2 IS IMMED CNST
BA1CNNGC	 	A1CNNG=7,		!USE NEG OF THE IMMED CNST ARG1
BA2CNNGC	 	A2CNNG=10,		!USE NEG OF THE IMMED CNST ARG2
BPTRA2C	 	PTRA2=#11,		!USE THE ARG2PTR FIELD IN THE PARENT
BNGPTR2C	 	NGPTR2=#12,		!USE THE NEG OF THE ARG2PTR FIELD OF THE PARENT
BP2PTR2C	 	P2PTR2=#13,		!USE 2**(VAL OF ARG2PTR) MINUS 1
BC	 				! (THIS IS USED FOR P2DIV)
BA1LABC	 	A1LAB=#14,		!USE THE LABEL INDICATED BY A1LABEL
BA2LABC	 	A2LAB=#15,		!USE THE LABEL INDICATED BY A2LABEL
BA3LABC	 	A3LAB=#16,		!USE THE LABEL INDICATED BY A3LABEL
BFROMC1C	 	FROMC1H=#17,		!USE THE CONTENTS OF THE GLOBAL C1H,
BC	 				! THERE IS NO SYMBOL ASSOCIATED WITH THIS ADDR FIELD
BPARTMPC	 	PARTMP=#20,		!USE THE TMP POINTED TO BY THE ADDR PART
BC	 				! OF THE TARGET WD OF THE PARENT NODE (IE THE NODE
BC	 				! POINTED TO BY TREEPTR); IGNORE THE INDIRECT BIT
BC	 				! OF THE TARGET WD
BFROMA1C	 	FROMA1=#21,		!TARGET FIELD OF ARG1 IS MEMREF FIELD
BFROMA2C	 	FROMA2=#22,		!TARGET FIELD OF ARG2
BFROMPAC	 	FROMPAR=#23;		!TARGET FIELD OF PARENT (IE NODE PTED TO BY TREEPTR)
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:52:37	CGSTMNT	TABLES.BLI		PAGE 25-1

BC	 
BC	 
BC	 %(***********************************************************************
BC	 	TO GET REG OR MEMREF OR OPERATOR FIELD FROM EITHER A TARGET WD IN AN EXPRESSION
BC	 	NODE OR A PATTERN WORD IN AN OPGENTABLE ENTRY
BC	 *****************************************************************)%
BC	 
BMACROC	 MACRO
BOPFLDWORDC	 	OPFLD(WORD) = WORD AND #777^27$,
BREGFLDWORDC	 	REGFLD(WORD) = WORD AND #17^23$,
BC	 
BMEMFLDWORDC	 	MEMFLD(WORD) = WORD AND #37777777$;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:52:38	CGSTMNT	TABLES.BLI		PAGE 26-1

BC	 
BC	 	%(****DEFINES SPECIFIC REGS USED FOR COMPILED CODE*****)%
BBINDRETREGC	 BIND RETREG=0;			!REG IN WHICH THE VAL OF A FN IS RETURNED
BBINDSTKREGC	 BIND STKREG=17;		!STACK REG FOR FNS/SUBRS
BBINDARGREGC	 BIND ARGREG=16;			!CONTAINS PTR TO ARGLIST FOR FNS/SUBRS
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:52:38	CGSTMNT	TABLES.BLI		PAGE 27-1

BC	 
BC	 
BC	 %(*********MACROS USED FOR REGISTER ALLOCATION***********************)%
BC	 
BC	 
BC	 
BC	 %(*****TO DETERMINE WHETHER A NODE IS EVALUATED BY MEANS OF A CALL TO A LIBRARY FN,
BC	 	(IF SO THEN IF THE 2ND ARG IS A CONSTANT WILL HAVE TO ALLOCATE CORE FOR IT)***)%
BMACROUSEFNCPNODEC	 MACRO USEFNCALL(PNODE)=
BC	 BEGIN
BC	 	%(***DOUBLE-PREC OPS ON THE KA10 ARE EVALUATED BY LIBRARY FNS***)%
BC	 	IF .PNODE[VALTYPE] EQL DOUBLPREC
BC	 	THEN
BC	 	.KA10FLG
BC	 	ELSE
BC	 	%(****EXPONENTIATION IS PERFORMED BY LIBRARY FNS***)%
BC	 	(.PNODE[OPR1] EQL EXPONOPF)
BC	 END$;
BC	 
BC	 
BC	 %(****FOR REGISTER ALLOCATION - GET THE REGISTER WHICH IS TO BE THE NTH ASSIGNED.
BC	 	FOR BOTTOMMOST ROUTINES THIS WILL BE REGISTER N+2 (FIRST ASSIGNED IS 2) 
BC	 	FOR NON-BOTTOMMOST ROUTINES THIS WILL BE REGISTER 15-N (FIRST ASSIGNED IS 15).
BC	 *********)%
BMACROASNREGN1C	 MACRO ASNREG(N1)=
BC	 BEGIN
BC	 	IF .BTTMSTFNFLG
BC	 	THEN N1+2
BC	 	ELSE #15-N1
BC	 END$;
BC	 
BC	 	%(***INVERSE OF ASNREG - TO GET THE INDEX FOR A GIVEN REG***)%
BMACROINVASNREGC	 MACRO INVASNREG(REG)=
BC	 BEGIN
BC	 	IF .BTTMSTFNFLG
BC	 	THEN REG-2
BC	 	ELSE #15-REG
BC	 END$;
BC	 
BC	 
BC	 %(****GET THE INDEX FOR THE REGISTER AFTER THE REGISTER INDICATED BY THE INDEX 'IX'****)%
BMACRONXREGIXC	 MACRO NXREG(IX)=
BC	 BEGIN
BC	 	IF .BTTMSTFNFLG
BC	 	THEN IX+1
BC	 	ELSE IX-1
BC	 END$;
BC	 
BC	 
BC	 %(***GIVEN A BIT PATTERN REPRESENTING A SET OF REGS (BIT 0 THE REG OF IX 0, BIT
BC	 	1 THE REG OF IX 1, ETC), RETURN THE PATTERN REPRESENTING THE REGS FOLLOWING THESE***)%
BMACRONXREGPBITPTNC	 MACRO	NXREGPATTERN(BITPTN)=
BC	 BEGIN
BC	 	%(***FOR BOTTOMOST FNS, BIT 0  IS REG 2, BIT 1 REG 3, ETC - 
BC	 		HENCE SHOULD SHIFT THE BITS TO THE RIGHT***)%
BC	 	IF .BTTMSTFNFLG
BC	 	THEN BITPTN^(-1)
BLISS  V. 1.0-2.12	13-JUN-73  17:52:42	CGSTMNT	TABLES.BLI		PAGE 27-2

BC	 	ELSE
BC	 	%(***FOR NON-BOTTOMOST FNS, BIT 0 IS REG 15, BIT 1 REG 14, ETC -
BC	 		HENCE SHOULD SHIFT THE BITS TO THE LEFT***)%
BC	 	BITPTN^1
BC	 END$;
BC	 
BC	 
BC	 %(***GIVEN A BIT PATTERN REPRESENTING A SET OF REGS, RETURN THE PATTERN REPRESENTING
BC	 	THE REGS PRECEEDING EACH OF THESE***)%
BMACROPREVREBITPTNC	 MACRO	PREVREGPATTERN(BITPTN)=
BC	 BEGIN
BC	 	%(***FOR BOTTOMMOST FNS, BIT 0 IS REG 2, BIT 1 REG 3 ETC - HENCE
BC	 		SHOULD SHIFT BITS TO THE LEFT TO GET BIT FOR PREVIOUS REG***)%
BC	 	IF .BTTMSTFNFLG
BC	 	THEN BITPTN^1
BC	 	ELSE
BC	 	%(***FOR NON-BOTTOMOST FNS BIT 0 IS REG 15,BIT 1 IS REG 14 ETC- HENCE SHIFT RIGHT***)%
BC	 	BITPTN^(-1)
BC	 END$;
BC	 
BC	 %(****TO DETERMINE WHETHER THE REGISTER AFTER THE REGISTER INDICATED Y THE INDEX 'IX' IS
BC	 	FREE. BITS 0-15 OF 'BSYRS' REPRESENT REGISTERS OF INDEX 0-15.
BC	 	THE BIT FOR A REGISTER IS SET IFF THAT REG IS FREE*******)%
BMACRONXREGFBSYRSIXC	 MACRO NXREGFREE(BSYRS,IX)=
BC	 BEGIN
BC	 	EXTERNAL CLRWDS;
BC	 	REGISTER NXTREG;
BC	 	%(***GET INDEX FOR REGISTER FOLLOWING THE REG WITH INDEX IX. FOR BOTTOMOST ROUTINES
BC	 		THIS WILL BE IX+1, FOR NON-BOTTOMOST ROUTINES IT WILL BE IX-1***)%
BC	 	NXTREG_IX;
BC	 	IF .BTTMSTFNFLG
BC	 	THEN NXTREG_.NXTREG+1
BC	 	ELSE NXTREG_.NXTREG-1;
BC	 
BC	 	IF .NXTREG LSS 0
BC	 	THEN FALSE
BC	 	ELSE
BC	 	%(***CHECK WHETHER THE BIT CORRESPONDING TO NXTREG IS SET IN BSYRS***)%
BC	 	(BSYRS AND NOT .CLRWDS[.NXTREG]) NEQ 0
BC	 END$;
BC	 
BC	 
BC	 %(****TO TEST WHETHER AN OPERATION 'CLOBBERS' THE REGISTER FOLLOWING THE ONE IN
BC	 	WHICH IS IS PERFORMED.
BC	 	THIS TEST DOES NOT INCLUDE DOUBLE-PREC (OR COMPLEX) OPERATIONS,
BC	 	WHICH THE REGISTER ALLOCATOR HANDLES BY SIMPLY NEVER 
BC	 	ASSIGNING ODD REGISTERS WHEN IN "DOUBLE-WD MODE"
BC	 ********)%
BMACROCLBNXRNODEC	 MACRO CLBNXREG(NODE)=
BC	 	((.NODE[OPERATOR] EQL INTDIVIDE) OR (.NODE[OPR1] EQL MODFNFL)
BC	 	OR (.KA10FLG AND ((.NODE[OPERATOR] EQL IFIXOP) OR (.NODE[OPERATOR] EQL FLOATOP))))$;
BC	 
BC	 
BC	 %(******MACROS FOR GOING BETWEEN "DOUBLE-WD MODE" REGISTER ALLOCATION AND
BC	 	"SINGLE-WD MODE" REGISTER ALLOCATION.
BC	 	FOR DOUBLE-WORD OPERATIONS, NEVER ASSIGN ODD REGISTERS TO
BC	 	ANY COMPUTATIONS.
BLISS  V. 1.0-2.12	13-JUN-73  17:52:49	CGSTMNT	TABLES.BLI		PAGE 27-3

BC	 	THE "SET OF BUSY REGS" MAY NEED TO HAVE THESE TRANSFORMATIONS PERFORMED ON IT
BC	 		1. ACROSS A TYPE CONVERSION NODE (WHEN CONVERTING BETWEEN DOUBLE-WD
BC	 			AND SINGLE-WD VALUES
BC	 		2. ACROSS A RELATIONAL NODE THAT COMPARES DOUBLE-WD VALUES (BUT
BC	 			HAS A SINGLE-WD RESULT)
BC	 		3. ACROSS AN ARRAY-REF NODE FOR A DOUBLE-PREC ARRAY (THE ADDRESS ARITHMETIC 
BC	 			IS SINGLE-WD)
BC	 		4. ACROSS A BOOLEAN  WHOSE ARGS ARE DOUBLE-WD (RESULT IS ALWAYS SINGLE-WD
BC	 *************)%
BC	 
BC	 	%(******WHEN GOING DOWN FROM SINGLE-WD CALCULATIONS TO DOUBLE-WD CALCULATIONS
BC	 		THE SET OF REGISTERS THAT CANNOT BE ASSIGNED MUST
BC	 		NOW INCLUDE
BC	 			1. ANY REGISTER THAT PRECEEDS A REGISTER HOLDING A VAL TO
BC	 				BE PRESERVED (SINCE A DOUBLE-WD COMPUTATION
BC	 				ON THE PRECEEDING REG CLOBBERS THE FOLLOWING ONE)
BC	 			2. ANY ODD REGISTER.
BC	 	***********)%
BC	 
BMACRODPBSYRSPBSYRC	 	MACRO DPBSYREGS(SPBSYRS)=
BC	 	BEGIN
BC	 		IF .BTTMSTFNFLG
BC	 		THEN
BC	 		%(***FOR BOTTOMMOST ROUTINES (FOR WHICH BIT 0 IN BUSY-WD REPRESENTS REG2,
BC	 			BIT 1 IS REG 3, BIT 2 REG 4, ....******)%
BC	 		(SPBSYRS AND SPBSYRS^1) AND #525252525252
BC	 
BC	 		ELSE
BC	 		%(***FOR NON-BOTTOMMOST ROUTINES (FOR WHICH BIT 0 REPRESENTS REG 15, BIT 1 REG 14,
BC	 			BIT 2 REG 15.....******)%
BC	 		(SPBSYRS AND SPBSYRS^(-1)) AND #252525252525
BC	 	END$;
BC	 
BC	 	%(*********WHEN GOING DOWN FROM DOUBLE-WD CALCULATION TO SINGLE-WD
BC	 		CALCULATIONS.
BC	 		THE SET OF REGISTERS AVAILABLE ONCE AGAIN CAN INCLUDE
BC	 		THEN ODD REGISTERS EXCEPT FOR THOSE REGISTERS CONTAINING THE RIGHT-HALF
BC	 		OF A DOUBLE-WD RESULT WHICH WAS BEING SAVED.
BC	 	************)%
BMACROSPBSYRDPBSYRC	 	MACRO SPBSYREGS(DPBSYRS)=
BC	 	BEGIN
BC	 		IF .BTTMSTFNFLG
BC	 		THEN
BC	 		%(***FOR BOTTOMOST ROUTINES (FOR WHICH BIT 0 REPRESENTS REG 2, BIT 1 REG 3, ETC***)%
BC	 		(DPBSYRS OR #252525252525) AND ((DPBSYRS OR #252525252525)^(-1) OR #400000000000)
BC	 		ELSE
BC	 		%(***FOR NON-BOTTOMMOST ROUTINES (BIT 0 REPRESENTS REG 15, BIT 1 REG 14,ETC***)%
BC	 		(DPBSYRS OR #525252525252) AND ((DPBSYRS OR #525252525252)^1)
BC	 	END$;
BC	 
BC	 
BC	 
BC	 %(*****WHEN COMING BACK UP FROM DOUBLE-WD OPS UP TO SINGLE-WD OPS, MUST MARK BITS
BC	 	IN "CLOBBREGS"(WD INDICATING WHICH REGS WERE CLOBBERED IN CALCULATING THE VAL
BC	 	OF AN EXPRESSION) FOR THE ODD REGS FOLLOWING EACH EVEN REG USED
BC	 *******)%
BMACROSETDPCC	 MACRO SETDPCLOBB=
BLISS  V. 1.0-2.12	13-JUN-73  17:52:56	CGSTMNT	TABLES.BLI		PAGE 27-4

BC	 	(CLOBBREGS_.CLOBBREGS OR .CLOBBREGS^(IF .BTTMSTFNFLG THEN (-1) ELSE 1))$;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:52:57	CGSTMNT	TABLES.BLI		PAGE 28-1

BC	 
BC	 
BC	 
BC	 
BC	 
BC	 %(****TO SWAP HALVES OF A WORD IN MEMORY****)%
BMACHOPMOVSSC	 MACHOP MOVSS=#207;
BMACHOPMOVEMOVEC	 MACHOP MOVE=#200;
BMACROSWAPHAPTROFFSTC	 MACRO SWAPHALVES(PTR,OFFST) =
BC	 BEGIN
BC	 	REGISTER T1;
BC	 	MOVE (T1,PTR);
BC	 	MOVSS (0,OFFST,T1)
BC	 END$;
BC	 
BC	 
BC	 %(*****TO SWAP THE 2 ARGS UNDER AN EXPRESSION NODE**************)%
BMACROC	 MACRO
BSWAPARNODEC	 	SWAPARGS(NODE)=
BC	 	BEGIN
BC	 		SWAPHALVES(NODE,ARGWDOFFSET);
BC	 		SWAPFLGS(NODE);
BC	 	END$;
BC	 
BC	 
BC	 
BC	 
BC	 %(****TO PERFORM A BLOCK TRANSFER *******)%
BMACHOPBLTBLTC	 MACHOP BLT=#251;
BC	 
BMACROBLOCKTSRCLOCDESTINBLLNTHC	 MACRO BLOCKTR(SRCLOC,DESTIN,BLLNTH)=
BC	 BEGIN
BC	 	REGISTER T1;
BC	 	T1<LEFT>_SRCLOC;
BC	 	T1<RIGHT>_DESTIN;
BC	 	BLT(T1,(DESTIN)<0,0>+BLLNTH-1);
BC	 END$;
BC	 
BC	 
BC	 %(****TO PICK UP A HALF-WD VAL WITH SIGN EXTENDED****)%
BMACHOPHRREIC	 MACHOP HRREI=#571;
BC	 
BMACROEXTSIGVALC	 MACRO	EXTSIGN(VAL)=
BC	 BEGIN
BC	 	REGISTER AA1;
BC	 	AA1_VAL;
BC	 	HRREI(AA1,0,AA1)
BC	 END$;
BC	 
BC	 
BC	 %(***TO DO AN ARITHMETIC SHIFT BY A COMPILE TIME CONSTANT***)%
BMACHOPASHC	 MACHOP ASH=#240;
BC	 
BMACROARITHSVALBITCTC	 MACRO ARITHSHIFT(VAL,BITCT)=
BC	 BEGIN
BC	 	REGISTER T1;
BC	 	T1_VAL;
BLISS  V. 1.0-2.12	13-JUN-73  17:53:00	CGSTMNT	TABLES.BLI		PAGE 28-2

BC	 	ASH(T1,(BITCT AND #777777))
BC	 END$;
BC	 
BC	 
BC	 
BC	 %(****TO COUNT THE NUMBER OF BITS THAT ARE ON IN A GIVEN WORD****)%
BMACROONESCOWDC	 MACRO ONESCOUNT(WD)=
BC	 BEGIN
BC	 	REGISTER COUNT;
BC	 	REGISTER T1;
BC	 	T1_WD;
BC	 	COUNT_0;
BC	 	UNTIL .T1 EQL 0
BC	 	DO
BC	 	BEGIN
BC	 		T1_.T1 AND (NOT(-.T1));
BC	 		COUNT_.COUNT+1;
BC	 	END;
BC	 	.COUNT
BC	 END$;
BC	 
BC	 %(*******TO CLEAR A GIVEN BIT IN A GIVEN WORD (THE ARG IX INDICATES THE BIT
BC	 	TO BE CLEARED, PTN1 IS THE WORD TO CLEAR IT FROM********)%
BMACROC	 MACRO
BCLRBITPTN1IXC	 	CLRBIT(PTN1,IX)=BEGIN
BC	 				EXTERNAL CLRWDS;
BC	 				 PTN1 AND .CLRWDS[IX]
BC	 			END $;
BC	 
BC	 %(*******TO SET A GIVEN BIT IN A GIVEN WD*******)%
BMACROC	 MACRO
BSETBITPTN1IXC	 	SETBIT(PTN1,IX) =BEGIN
BC	 				EXTERNAL CLRWDS;
BC	 				 PTN1 OR NOT(.CLRWDS[IX])
BC	 			END $;
BC	 
BC	 %(****TO TEST A GIVEN BIT OF A GIVEN WD***********)%
BMACROC	 MACRO
BBITSETPTN1IXC	 	BITSET(PTN1,IX)=BEGIN
BC	 				EXTERNAL CLRWDS;
BC	 				 ((IX GEQ 0) AND (PTN1 AND NOT(.CLRWDS[IX])) NEQ 0)
BC	 			END$;
BC	 
BC	 
BC	 
BC	 
BC	 
BC	 %(*****TO MAKE AN ENTRY IN THE CONSTANT TABLE - SET UP GLOBALS FOR
BC	 	TBLSEARCH AND CALL IT ****************)%
BC	 
BMACROMAKECNTYPECNHCNLC	 MACRO MAKECNST(TYPE,CNH,CNL) =
BC	 BEGIN
BC	 	EXTERNAL TBLSEARCH;
BC	 	NAME_CONTAB;
BC	 	ENTRY[0]_CNH;
BC	 	ENTRY[1]_CNL;
BC	 	SYMTYPE_TYPE;
BLISS  V. 1.0-2.12	13-JUN-73  17:53:02	CGSTMNT	TABLES.BLI		PAGE 28-3

BC	 	TBLSEARCH()
BC	 END$;
BC	 
BC	 %(**********TO MAKE A CONSTANT TABLE ENTRY FOR THE NEGATIVE OR THE
BC	 		COMPLEMENT("NOT") OF SOME OTHER CONSTANT TABLE ENTRY*****)%
BC	 
BMACRONEGCNSCNNODEC	 MACRO NEGCNST(CNNODE)=
BC	 	BEGIN
BC	 		IF .CNNODE[VALTYPE] EQL  DOUBLPREC OR .CNNODE[VALTYPE] EQL REAL
BC	 		THEN
BC	 		%(***FOR DOUBLE-PREC NEG - USE ASSEMBLY LANG ROUTINE**)%
BC	 		BEGIN
BC	 			EXTERNAL C1H,C1L,C2H,C2L,COPRIX,KDNEGB,CNSTCM;
BC	 			C1H_.CNNODE[CONST1];
BC	 			C1L_.CNNODE[CONST2];
BC	 			COPRIX_KDNEGB+.CKA10FLG;
BC	 			CNSTCM();
BC	 			MAKECNST(.CNNODE[VALTYPE],.C2H,.C2L)
BC	 		END
BC	 		ELSE
BC	 		 MAKECNST(.CNNODE[VALTYPE], -.CNNODE[CONST1], -.CNNODE[CONST2])
BC	 	END$;
BC	 
BMACRONOTCNSCNNODEC	 MACRO NOTCNST(CNNODE)= MAKECNST(.CNNODE[VALTYPE], NOT .CNNODE[CONST1], NOT .CNNODE[CONST2])$;
BC	 
BC	 %(****TO MAKE CONSTANT TABLE ENTRY FOR NOT(-X) - "NTNGCNST"
BC	 	OR -(NOT X) - "NGNTCNST"*********)%
BMACRONTNGCNCNNODEC	 MACRO NTNGCNST(CNNODE)=
BC	 	BEGIN
BC	 		IF .CNNODE[VALTYPE] EQL DOUBLPREC OR .CNNODE[VALTYPE] EQL REAL
BC	 		THEN
BC	 		%(***FOR DOUBLE-PREC USE ASSEMBLY LANG ROUTINE TO GET NEG**)%
BC	 		BEGIN
BC	 			%(***DNEGCNST GETS ITS ARG IN THE GLOBALS C1H,C1L***)%
BC	 			C1H_ .CNNODE[CONST1];
BC	 			C1L_.CNNODE[CONST2];
BC	 			COPRIX_KDNEGB+.CKA10FLG;
BC	 			CNSTCM();
BC	 			MAKECNST(.CNNODE[VALTYPE],NOT .C1H, NOT .C1L)
BC	 		END
BC	 		ELSE
BC	 		MAKECNST(.CNNODE[VALTYPE], NOT (-.CNNODE[CONST1]), NOT (-.CNNODE[CONST2]))
BC	 	END$;
BC	 
BMACRONGNTCNCNNODEC	 MACRO NGNTCNST(CNNODE)=
BC	 	BEGIN
BC	 		IF .CNNODE[VALTYPE] EQL DOUBLPREC OR .CNNODE[VALTYPE] EQL REAL
BC	 		THEN
BC	 		BEGIN
BC	 			%(***DNEGCNST GETS ITS ARG IN THE GLOBALS C1H,C1L***)%
BC	 			C1H_NOT .CNNODE[CONST1];
BC	 			C1L_NOT .CNNODE[CONST2];
BC	 			COPRIX_KDNEGB+.CKA10FLG;
BC	 			CNSTCM();
BC	 			MAKECNST(.CNNODE[VALTYPE],.C1H,.C1L)
BC	 		END
BC	 		ELSE
BLISS  V. 1.0-2.12	13-JUN-73  17:53:06	CGSTMNT	TABLES.BLI		PAGE 28-4

BC	 		MAKECNST(.CNNODE[VALTYPE],-(NOT .CNNODE[CONST1]), -(NOT .CNNODE[CONST2]))
BC	 	END$;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:53:06	CGSTMNT	TABLES.BLI		PAGE 29-1

BC	 
BC	 
BC	 %(******************************
BC	 	MACROES TO FORM INDICES  INTO THE TABLE FOR CONSTANT FOLDING
BC	 ********************************)%
BC	 
BC	 	%(***TO FOLD BOOLEAN OPERATIONS***)%
BMACROKBOOLOPNODEC	 MACRO	KBOOLOPIX(PNODE)=
BC	 	(.PNODE[OPERSP] + KBOOLBASE)$;
BC	 
BC	 	%(***TO FOLD ARITHMETIC OPERATIONS****)%
BMACROKARITHPNODEC	 MACRO	KARITHOPIX(PNODE)=
BC	 	(.PNODE[OPRSP2]^2 + .PNODE[VALTP1] + (IF .CKA10FLG THEN KARIAB  ELSE KARIIB) )$;
BC	 
BC	 	%(*******TO FOLD AN ARITH OP, WHEN NO EXPRESSION NODE WAS BUILT (VLTP IS THE VALTP1 FIELD)***)%
BMACROKKARITVLTPOPSPC	 MACRO	KKARITHOP(VLTP,OPSP)=
BC	 	(OPSP^2 + VLTP + (IF .CKA10FLG THEN KARIAB ELSE KARIIB))$;
BC	 
BC	 
BC	 	%(****TO CONVERT A CONSTANT OF ONE VALUE TYPE TO ANOTHER****)%
BMACROKTPCNVTPCNODC	 MACRO KTPCNVIX(TPCNODE)=
BC	 	(.TPCNODE[OPERSP]^3 + .TPCNODE[VALTP2] +KTYPCB)$;
BC	 
BC	 
BC	 	%(****TO CONVERT A CONSTANT FROM ONE VALTYPE TO ANOTHER WHEN NO EXPRESSION
BC	 		NODE WAS BUILT FOR THE TYPE CONVERSION. (VLTP IS THE VALTP2 FIELD)***)%
BMACROKKTPCNVLTPOPSPC	 MACRO	KKTPCNVIX(VLTP,OPSP)=
BC	 	(OPSP^3 + VLTP + KTYPCB)$;
BC	 
BC	 
BC	 	%(***TO FOLD SPECIAL OPERATORS (P2MUL,P2DIV)  - USED ONLY BY PHASE 2***)%
BMACROKSPECOPNODEC	 MACRO	KSPECOPIX(PNODE)=
BC	 	(.PNODE[OPERSP]^2 + .PNODE[VALTP1] + KSPECB)$;
BC	 
BC	 
BC	 	%(***TO FOLD IN-LINE FNS********)%
BMACROKILFOPPNODEC	 MACRO	KILFOPIX(PNODE)=
BC	 	(.PNODE[OPERSP] + (IF .PNODE[VALTP1] EQL INTEG1 THEN KILFBA ELSE KILFBR))$;
BLISS  V. 1.0-2.12	13-JUN-73  17:53:09	CGSTMNT	TABLES.BLI		PAGE 30-1

BC	 
BC	 	%(*****FOR CNODE ARITHMETIC OR BOOLEAN
BC	 		CHECK TO SEE IF A SKEWED TREE IS AN NARYNODE*****)%
BC	 
BMACRONARYNOCNODEAR1NODC	 	MACRO NARYNODE(CNODE,AR1NODE)=
BC	 	(.CNODE[OPR1] EQL .AR1NODE[OPR1]
BC	 	AND
BC	 	.CNODE[OPR1] LSS DIVOPF
BC	 	AND
BC	 	NOT .CNODE[A1NEGFLG] AND NOT .CNODE[A1NOTFLG]
BC	 	AND
BC	 	NOT .AR1NODE[PARENFLG])$;
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:53:12	CGSTMNT	TABLES.BLI		PAGE 31-1

BC	 
BC	 
BC	 %(***************************************************************************
BC	 	TO GET CORE TO BUILD A NODE OF A CERTAIN TYPE.
BC	 	AT PRESENT  CALL CORMAN WITH NAME<LEFT> EQUAL TO THE SIZE
BC	 	NEEDED (SRM - AUG 18,1972)
BC	 ***************************************************************************)%
BC	 
BMACROGETCORNDSIZNDTYPC	 MACRO	GETCORE(NDSIZ,NDTYP)=
BC	 BEGIN
BC	 	NAME<LEFT>_NDSIZ;
BC	 	CORMAN()
BC	 END$;
BC	 
BC	 	%(***NODE SIZES****)%
BBINDIOLCSIC	 BIND	IOLCSIZ=3;	!FOR AN IOLISTCALL NODE
BC	 
BC	 	%(***NODE TYPE CODES***)%
BBINDIOLCCDC	 BIND	IOLCCD=1;	!FOR AN IOLISTCALL NODE
BLISS  V. 1.0-2.12	13-JUN-73  17:53:16	CGSTMNT	TABLES.BLI		PAGE 32-1

BC	 
BC	 %(***************************************************************************
BC	 	MACROS USED FOR CONSISTENCY CHECKING - FOR DEBUGGING THE COMPILER
BC	 ***************************************************************************)%
BC	 
BC	 
BC	 %(***TO CHECK WHETHER ARE WALKING DOWN ONTO A LEGAL NODE***)%
BMACRODEBGNONODEC	 MACRO DEBGNODETST(NODE)=
BC	 BEGIN
BC	 	EXTERNAL NODERR;
BC	 	IF DEBUGFLG			!A COMPILE TIME CONSTANT 
BC	 	THEN
BC	 	BEGIN
BC	 		IF .NODE EQL 0
BC	 		THEN NODERR();
BC	 	END;
BC	 END$;
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:53:16	CGSTMNT	TABLES.BLI		PAGE 33-1

BC	 
BC	 
BC	 !MACROS FOR THE FLAGS ASSOCIATED WITH A DO LOOP
BC	 
BC	 
BC	 %******
BC	 	FLAGS ASSOCIATED WITH A DO LOOP FOR CODE GENERATION
BC	 	INNERDOFLG=0,1,35,1				!FLAG SET BY PHASE 1 ON INNER DO LOOP
BC	 *****%
BMACROC	 	MACRO
BFLCWDC	 		FLCWD=0,1,34,1$,			!FULL CONST WORD INITIAL VALUE AND
BC	 							!LOOP CONTROL
BC	 							!SET IN DOXPND OR BY THE OPTIMIZER
BSSIZONC	 		SSIZONE=0,1,33,1$,			!STEP SIZE ONE
BC	 							!SET IN DOXPND OR BY OPTIMIZER
BSSIZIMC	 		SSIZIMMED=0,1,32,1$,			!STEP SIZE IS AN IMMEDIATE CONSTANT (INTEGER)#1
BINITLIC	 		INITLIMMED=0,1,31,1$,			!INITIAL VALUE IS IMMEDIATE
BC	 							!SET IN DOXPN OR OPTIMIZER
BREALARC	 		REALARITH=0,1,30,1$,			!DO SYMBOL IS REAL SO ALL ARITHMETIC MUST BE
BC	 							!REAL
BINITLTC	 		INITLTMP=0,1,29,1$,			!INITL VALUE NEEDS COMPUTATION
BSSIZINC	 		SSIZINTMP=0,1,28,1$,			!STEP SIZE IN A TEMP
BIVARINC	 		IVARINREG=0,1,27,1$,			!DO INDUCTION VARIABLE IS IN A REGISTER
BC	 							!SET BY OPTIMIZER
BNEDSMAC	 		NEDSMATRLZ =0,1,26,1$,			!LOOPHAS EXIT
BCTLSAMC	 		CTLSAMEFLG=0,1,25,1$,			!CONTROL EXPR WAS COMPUTED INTO
BC	 							! THE REG IN WHICH IT WILL
BC	 							! BE USED
BNOFLCWC	 		NOFLCWDREG=0,1,23,1$,			!IF THE DO INDEX OF THIS LOOP
BC	 							! IS NOT MATERIALIZED, THEN
BC	 							! AOBJN SHOULD NOT BE USED FOR
BC	 							! THE LOOP
BSSIZNEC	 		SSIZNEGFLG=0,1,22,1$,			!STEP SIZE IS A NAGATIVE INTEGER IMMED
BC	 							! CONSTANT AND HENCE MUST BE NEGATED
BC	 							! WHEN IT IS PICKED UP (IE
BC	 							! AT LOOP END MUST DO SUBI RATHER
BC	 							! THAN ADDI)
BDOREMOC	 		DOREMOVED=0,1,21,1$,			!OPTIMIZER HAS DELETED DO LOOP
BCTLNEGC	 		CTLNEG=0,1,20,1$,			!CTL VAL MUST BE NEGATED WHEN IT IS
BC	 							! PICKED UP (THIS IS ALWAYS SET IF CTL
BC	 							! VAL IS A CONSTANT BUT NOT FLCWD
BCTLIMMC	 		CTLIMMED=0,1,19,1$,			!CTL VAL IS AN IMMED CONST
BINITLNC	 		INITLNEG=0,1,18,1$;			!INITL VALUE MUST BE NEGATED WHEN
BC	 							! IT IS PICKED UP
BC	 
BC	 %*****
BC	 	TO ACCESS RIGHT AND LEFT HALVES OF A WORD THROUGH A
BC	 	CASE,WD,POS,SIZ STRUCTURE.
BC	 	USED ON DOSP AND SNDOLNK LIST
BC	 *****%
BC	 
BMACROC	 MACRO
BRIGHTPC	 	RIGHTP = 0,0,RIGHT$,
BLEFTPC	 	LEFTP =0,0,LEFT$;
BC	 
BC	 %*****
BC	 	MACROS TO PICK UP COMBINATIONS OF THE FLAGS
BLISS  V. 1.0-2.12	13-JUN-73  17:53:39	CGSTMNT	TABLES.BLI		PAGE 33-2

BC	 *****%
BC	 
BMACROC	 MACRO
BDOFLGSC	 	DOFLGS = 0,1,28,7$,		!ALL INDEX USED FLAGS
BOTHDOFC	 	OTHDOFLGS=0,1,27,8$;		!ALL THE FLAGS EXCEPT INNERDO AND FLCWD
BC	 !******
BC	 !	FIELDS IN DOWDP USED TO DETERMINE
BC	 !	IF IT IS VALID TO KEEP THE DO INDEX VARIABLE IN A 
BC	 !	REGISTER THROUGHOUT THE LOOP
BC	 !*****
BC	 
BMACROC	 	MACRO
BDOISUBC	 		DOISUBS=0,35,1$,
BDONOAOC	 		DONOAOBJN=0,34,1$,	!FLAG FOR "DONT USE AOBJN FOR THIS LOOP
BC	 					! IF VAL OF INDEX IS NOT MATERIALIZED
BDOINDUC	 		DOINDUC=0,0,18$,
BDOREGPC	 		DOREGPTR=0,18,17$;
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:53:40	CGSTMNT	CGSTM1.BLI		PAGE 34-1

BC	 
BC	 
BC	 
BC	 !COPYRIGHT 1972,1973,  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS
BC	 !AUTHOR:S. MURPHY
BGLOBALBINDCGSTVC	 GLOBAL BIND CGSTV=91;		!VERSION DATE:APRIL 20, 1973
BLISS  V. 1.0-2.12	13-JUN-73  17:53:40	CGSTMNT	CGSTM1.BLI		PAGE 35-1

BC	 
BC	 
BMAPPEXPRNTREEPTTREEPTA1NODEA2NODEC	 MAP PEXPRNODE TREEPTR:A1NODE:A2NODE;
BC	 
BMAPBASECSTMNTCSTMNTC	 MAP BASE CSTMNT;
BC	 
BOWNBASETOPSTMTOPSTMC	 OWN BASE TOPSTMNT;	!WHEN HAVE A STATEMENT EMBEDDED INSIDE ANOTHER (EG IN 
BC	 			! LOGICAL IFS) THIS VAR PTS TO THE TOP LEVEL STMNT NODE
BC	 
BGLOBALROUTINCGSTMNCGSTMNC	 GLOBAL ROUTINE CGSTMNT=
BC	 %(***************************************************************************
BC	 	ROUTINE TO PERFORM CODE GENERATION FOR A STATEMENT.
BC	 	CALLED WITH THE GLOBAL CSTMNT POINTING TO THE STATEMENT FOR WHICH CODE
BC	 	IS TO BE GENERATED.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BEXTERNPBFPTROPDSPIOPDSPIOPGSTMPBOPWDPBOPWDC	         EXTERNAL        PBFPTR,OPDSPIX,OPGSTM,PBOPWD;
BREGISTOPGENTOPGENPOPGENPC	         REGISTER        OPGENTRY OPGENPTR;
BC	 
BC	 
BC	 
BC	 
BC	 
BMAPPPEEPFPBFPTRPBFPTRC	 	MAP PPEEPFRAME PBFPTR;
BC	 
BC	 	%(***IF THERE IS A LABEL ON THIS STATEMENT, ASSOCIATE THAT LABEL WITH THE
BC	 		CURRENT LOCATION***)%
BIFCSTMNTSRCLBLCW3LLEFTNEQC	 	IF .CSTMNT[SRCLBL] NEQ 0
BTHENDEFLABCSTMNTSRCLBLCW3LLEFTC	         THEN DEFLAB(.CSTMNT[SRCLBL]);
BC	 
BC	 
BC	   %(*****************OUTPUT THE TYMSHARE DEBUGGER LOADER BLK #31**)%
BOPDSPIOPGSTMC	         OPDSPIX _ OPGSTM;
BOPGENPOPDSPIC	         OPGENPTR_@.OPDSPIX;
BPBOPWDOPGENPPATTERWHOLEC	         PBOPWD_.OPGENPTR[PATTERN];  !PICK UP THE INSTRUCTION WORD
BPBOPWDPBOPWDCSTMNTSRCISNCW0LLEFTC	         PBOPWD _ .PBOPWD+.CSTMNT[SRCISN];
BPSYMPTC	         PSYMPTR  _  4;
BOBUFFC	         OBUFF();                !OUTPUT STMNT UUO
BC	 
BC	 
BC	 
BC	 
BC	 
BC	 	%(***SET ISN FIELD FOR NEXT INSTR TO BE GENERATED TO ISN OF THIS STMNT***)%
BPBFPTRPBFISNWHOLECSTMNTSRCISNCW0LLEFTC	 	PBFPTR[PBFISN]_.CSTMNT[SRCISN];
BC	 
BC	 	%(***GENERATE CODE FOR THE STATEMENT************)%
BCASECSTMNTSRCIDOFSETC	 	CASE .CSTMNT[SRCID] OF SET
BC	 
BCGASMNC	 	CGASMNT();		!FOR AN ASSIGNMENT
BCGASSIC	 	CGASSI();		! ASSIGN
BCGSBPRCSTMNTCALLISCW4RRIGHTCSTMNTCALSYMCW3RRIGHTC	 	CGSBPRGM(.CSTMNT[CALLIST],.CSTMNT[CALSYM]);	! CALL
BBEGINENDC	 	BEGIN END;		! CONTINUE
BCGDOLOC	 	CGDOLOOP();		! DO
BCGPROEC	 	CGPROEPI();		! ENTRY
BCGASMNC	 	CGASMNT();		! COMMON SUBEXPR - SAME AS ASMNT
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:53:53	CGSTMNT	CGSTM1.BLI		PAGE 35-2

BJRSTGEBEGINPBOPWDJRSTOCORCSTMNTGOTOLBCW3RRIGHTPSYMPTPBFLABOBUFFENDC	 	JRSTGEN(.CSTMNT[GOTOLBL]);	!GOTO
BCGAGOC	 	CGAGO();		! ASSIGNED GOTO
BCGCGOC	 	CGCGO();		! COMPUTED GOTO
BCGARIFC	 	CGARIF();		!ARITHMETIC IF
BCGLOGIC	 	CGLOGIF();		! LOGICAL IF
BCGRETUCSTMNTRETEXPCW3RRIGHTC	 	CGRETURN(.CSTMNT[RETEXPR]);	! RETURN
BCGSTOPC	 	CGSTOP();		! STOP
BC	 
BCGREADC	 	CGREAD();		! READ
BCGWRITC	 	CGWRIT();		! WRITE
BCGDECOC	 	CGDECO();		! DECODE
BCGENCOC	 	CGENCO();		! ENCODE
BCGREREC	 	CGRERE();		! REREAD
BCGFINDC	 	CGFIND();		! FIND
BCGCLOSC	 	CGCLOS();		! CLOSE
BBEGINENDC	 	BEGIN END;		! INPUT (NOT IN RELEASE 1)
BBEGINENDC	 	BEGIN END;		! OUTPUT (NOT IN RELEASE 1)
BC	 
BCGMTOPC	 	CGMTOP();		! BACKSPACE
BCGMTOPC	 	CGMTOP();		! BACKFILE
BCGMTOPC	 	CGMTOP();		! REWIND
BCGMTOPC	 	CGMTOP();		! SKIP FILE
BCGMTOPC	 	CGMTOP();		! SKIP RECORD
BCGMTOPC	 	CGMTOP();		! UNLOAD
BCGMTOPC	 	CGMTOP();		! RELEASE
BCGMTOPC	 	CGMTOP();		! ENDFILE
BC	 
BCGENDC	 	CGEND();		! END
BCGPAUSC	 	CGPAUSE();		! PAUSE
BCGOPENC	 	CGOPEN();		! OPEN
BCGSFNC	 	CGSFN();		! STATEMENT FN
BBEGINENDC	 	BEGIN END;		! FORMAT - NO CODE GENERATED
BBEGINENDC	 	BEGIN END;		! BLT (NOT IN RELEASE 1)
BBEGINENDC	 	BEGIN END;		! OVERLAY ID
BCGINTRC	         CGINTR();               !INTERRUPT STATEMENT PROCESSOR
BTESC	 	TES;
BC	 
BC	 	%(***IF THIS STMNT HAS A LABEL, CHECK FOR WHETHER IT ENDS A DO STMNT***)%
BIFCSTMNTSRCLBLCW3LLEFTNEQC	 	IF .CSTMNT[SRCLBL] NEQ 0
BTHENCGDOENCSTMNTSRCLBLCW3LLEFTC	 	THEN CGDOEND(.CSTMNT[SRCLBL]);
BC	 
BENDC	 END;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:55:00	CGSTMNT	CGSTM1.BLI		PAGE 36-1

BC	 
BGLOBALDBROUTINCGASMNC	 GLOBAL ROUTINE CGASMNT=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE CODE FOR ASSIGNMENT STATEMENTS.
BC	 	CALLED WITH THE GLOBAL CSTMNT POINTING TO THE STATEMENT FOR
BC	 	WHICH CODE IS TO BE GENERATED.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BC	 
BC	 	%(***COMPUTE THE VALUES OF ANY COMMON SUBEXPRS ASSOCIATED WITH THIS STATEMENT***)%
BIFCSTMNTSRCCOMCW2RRIGHTNEQTHENCGCMNSC	 	IF .CSTMNT[SRCCOMNSUB] NEQ 0 THEN CGCMNSUB();
BC	 
BC	 
BC	 %(***STRING HANDLING*********************************)%
BC	 
BC	         
BA1NODECSTMNTLHEXPCW4RRIGHTC	         A1NODE  _  .CSTMNT[LHEXP];
BIFA1NODEVALTYPEXOPWDEQLSTRINGC	         IF  .A1NODE[VALTYPE]  EQL  STRING
BC	 
BTHENC	         THEN
BBEGINC	         BEGIN
BC	 
BTREEPTCSTMNTC	                 TREEPTR  _  .CSTMNT;
BOPDSPIOPGSESC	                 OPDSPIX  _  OPGSES;     !OUTPUT THE START STRING CODE
BCGOPGEC	                 CGOPGEN();
BC	 
BC	 
BC	 %(*******************PROCESS RHEXP..IF A LEAF OUTPUT IT*****************)%
BC	 
BIFNOTCSTMNTA2VALFEXOPWDC	                 IF  NOT  .CSTMNT[A2VALFLG]
BC	 
BTHENC	                 THEN
BBEGINC	                 BEGIN
BTREEPTCSTMNTRHEXPCW3RRIGHTC	                         TREEPTR  _  .CSTMNT[RHEXP];
BCGETVAC	                         CGETVAL();
BENDC	                 END
BELSEC	                 ELSE
BBEGINC	                 BEGIN
BA1NODECSTMNTRHEXPCW3RRIGHTC	                         A1NODE  _  .CSTMNT[RHEXP];
BOPDSPIOPGSRRC	                         OPDSPIX  _  OPGSRR;
BCGOPGEC	                         CGOPGEN();
BENDC	                 END;
BC	 
BC	 %(********************PROCESS LHEXP..IF A LEAF OUTPUT IT**************)%
BC	 
BC	 
BIFNOTCSTMNTA1VALFEXOPWDC	                 IF  NOT  .CSTMNT[A1VALFLG]
BC	 
BTHENC	                 THEN
BBEGINC	                 BEGIN
BTREEPTCSTMNTLHEXPCW4RRIGHTC	                         TREEPTR  _  .CSTMNT[LHEXP];
BC	                         
BIFNOTTREEPTA2VALFEXOPWDC	                         IF  NOT  .TREEPTR[A2VALFLG]
BC	 
BTHENC	                         THEN
BBEGINC	                         BEGIN
BTREEPTTREEPTARG2PTRIGHTC	                                 TREEPTR  _  .TREEPTR[ARG2PTR];
BLISS  V. 1.0-2.12	13-JUN-73  17:55:35	CGSTMNT	CGSTM1.BLI		PAGE 36-2

BCGETVAC	                                 CGETVAL();
BENDC	                         END;
BC	 
BA1NODETREEPTC	                         A1NODE  _  .TREEPTR;
BREGFORGETTXFTREEPTTARGETWHOLEANDC	                         REGFORCOMP  _  GETTXF(TREEPTR);
BOPDSPIOPGSSAC	                         OPDSPIX  _  OPGSSA;
BCGOPGEC	                         CGOPGEN();
BC	 
BENDC	                 END
BELSEC	                 ELSE
BBEGINC	                 BEGIN
BOPDSPIOPGSSRC	                         OPDSPIX  _  OPGSSR;
BA1NODECSTMNTLHEXPCW4RRIGHTC	                         A1NODE  _  .CSTMNT[LHEXP];
BCGOPGEC	                         CGOPGEN();
BENDC	                 END;
BRETURNC	           RETURN;
BENDC	         END;
BC	 
BC	 
BC	 
BC	 	%(***GET THE VALUE OF THE LEFT HAND SIDE OF THE STATEMENT AND THE ADDRESS
BC	 		OF THE RIGHT HAND SIDE WITHIN REACH OF ONE INSTRUCTION***)%
BIFCSTMNTA1VALFEXOPWDC	 	IF .CSTMNT[A1VALFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFNOTCSTMNTA2VALFEXOPWDC	 		IF NOT .CSTMNT[A2VALFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BTREEPTCSTMNTRHEXPCW3RRIGHTC	 			TREEPTR_.CSTMNT[RHEXP];
BCGETVAC	 			CGETVAL();
BENDC	 		END;
BENDC	 	END
BELSEC	 	ELSE
BIFCSTMNTA2VALFEXOPWDC	 	IF .CSTMNT[A2VALFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BTREEPTCSTMNTLHEXPCW4RRIGHTC	 		TREEPTR_.CSTMNT[LHEXP];
BCGETVAC	 		CGETVAL();
BENDC	 	END
BELSEC	 	ELSE
BIFCSTMNTRVRSFLEXOPWDC	 	IF .CSTMNT[RVRSFLG]
BTHENC	 	THEN
BC	 	%(***IF RIGHT-HAND SIDE SHOULD BE EVALUATED FIRST***)%
BBEGINC	 	BEGIN
BTREEPTCSTMNTRHEXPCW3RRIGHTC	 		TREEPTR_.CSTMNT[RHEXP];
BCGETVAC	 		CGETVAL();
BTREEPTCSTMNTLHEXPCW4RRIGHTC	 		TREEPTR_.CSTMNT[LHEXP];
BCGETVAC	 		CGETVAL();
BENDC	 	END
BELSEC	 	ELSE
BC	 	%(***IF LEFT-HAND SIDE SHOULD BE EVALUATED FIRST***)%
BBEGINC	 	BEGIN
BTREEPTCSTMNTLHEXPCW4RRIGHTC	 		TREEPTR_.CSTMNT[LHEXP];
BCGETVAC	 		CGETVAL();
BTREEPTCSTMNTRHEXPCW3RRIGHTC	 		TREEPTR_.CSTMNT[RHEXP];
BCGETVAC	 		CGETVAL();
BENDC	 	END;
BLISS  V. 1.0-2.12	13-JUN-73  17:55:47	CGSTMNT	CGSTM1.BLI		PAGE 36-3

BC	 
BC	 
BC	 	%(***IN GENERAL, IF THE VAL OF THE RHS HAD TO BE NEGATED BEFORE IT WAS STORED IN THE
BC	 		LHS, WE WANT TO NEGATE ON THE STORE OPERATION ("MOVNM").
BC	 		HOWEVER IF THE RHS IS COMPUTED DIRECTLY INTO THE LOC CORRESPONDING
BC	 		TO THE LHS (EG IF LHS LIVES IN A REG), THE NEG MUST BE PERFORMED ON
BC	 		RHS COMPUTATION****)%
BIFNOTCSTMNTA1SAMEEXOPWDC	 	IF NOT .CSTMNT[A1SAMEFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BCSTMNTA1NEGFEXOPWDCSTMNTA2NEGFEXOPWDC	 		CSTMNT[A1NEGFLG]_.CSTMNT[A2NEGFLG];
BCSTMNTA1NOTFEXOPWDCSTMNTA2NOTFEXOPWDC	 		CSTMNT[A1NOTFLG]_.CSTMNT[A2NOTFLG];
BCSTMNTA2NEGFEXOPWDC	 		CSTMNT[A2NEGFLG]_0;
BCSTMNTA2NOTFEXOPWDC	 		CSTMNT[A2NOTFLG]_0;
BENDC	 	END;
BC	 
BC	 
BC	 
BC	 	%(***IF THE RHS WAS NOT COMPUTED DIRECTLY INTO THE MEMORY LOC FOR THE LHS, PICK UP THE
BC	 		RHS AND STORE IT INTO THE LHS*******)%
BIFNOTCSTMNTMEMCMPEXOPWDC	 	IF NOT .CSTMNT[MEMCMPFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BREGFORGETASMCSTMNTCW4FULLANDC	 		REGFORCOMP_GETASMNREG(CSTMNT);
BC	 		%(***GET VAL OF RIGHT-HAND SIDE INTO REG FOR COMPUTATION OF THE STMNT***)%
BA1NODECSTMNTRHEXPCW3RRIGHTC	 		A1NODE_.CSTMNT[RHEXP];
BTREEPTCSTMNTC	 		TREEPTR_.CSTMNT;
BOPDSPIGETA2OBEGINCSTMNTA2FLG1EXOPWDA1NODEVALTP1EXOPWDIFKA10FLFLGREGKA10THENOPGETAELSEOPGETIENDC	 		OPDSPIX_GETA2OPIX(CSTMNT,A1NODE);
BCGOPGEC	 		CGOPGEN();
BC	 
BC	 		%(***STORE THE VALUE FROM REG-FOR-COMPUTATION INTO THE ADDRESS
BC	 			SPECIFIED BY THE LEFT-HAND-SIDE***)%
BIFNOTCSTMNTA1SAMEEXOPWDC	 		IF NOT .CSTMNT[A1SAMEFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BTREEPTCSTMNTLHEXPCW4RRIGHTC	 			TREEPTR_.CSTMNT[LHEXP];
BOPDSPIASNOPIBEGINIFCSTMNTA2IMMEEXOPWDANDCSTMNTA2SAMEEXOPWDTHENOPGASRELSECSTMNTA1NGNTEXOPWDTREEPTVALTP1EXOPWDIFKA10FLFLGREGKA10THENOPGASAELSEOPGASIENDC	 			OPDSPIX_ASNOPIX(CSTMNT,TREEPTR);
BCGOPGEC	 			CGOPGEN();
BENDC	 		END;
BENDC	 	END;
BENDC	 END;
BC	 
BGLOBALDBROUTINCGASSIBLISS  V. 1.0-2.12	13-JUN-73  17:57:26	CGSTMNT	CGSTM1.BLI		PAGE 37-1

C	 GLOBAL ROUTINE CGASSI=
BC	 %(***************************************************************************
BC	 	GENERATE CODE FOR AN ASSIGN STATEMENT.
BC	 	NOTE THAT THE VARIABLE WILL ALWAYS BE LOADED INTO REGISTER 1
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BC	 	%(***IF THE ASSIGNED VAR IS AN ARRAYREF, GENERATE CODE TO COMPUTE ITS ADDR***)%
BTREEPTCSTMNTASISYMCW4LLEFTC	 	TREEPTR_.CSTMNT[ASISYM];
BIFTREEPTOPRCLSEXOPWDEQLARRAYRC	 	IF .TREEPTR[OPRCLS] EQL ARRAYREF
BTHENC	 	THEN
BCGETVAC	 	CGETVAL();
BC	 
BC	 	%(***COMPUTE THE ASSIGN*******)%
BA1NODECSTMNTASISYMCW4LLEFTC	 	A1NODE_.CSTMNT[ASISYM];
BA1LABECSTMNTASILBLCW3RRIGHTC	 	A1LABEL_.CSTMNT[ASILBL];
BOPDSPIOPASINC	 	OPDSPIX_OPASIN;
BCGOPGEC	 	CGOPGEN();
BENDC	 END;
BLISS  V. 1.0-2.12	13-JUN-73  17:57:28	CGSTMNT	CGSTM1.BLI		PAGE 38-1

BC	 
BGLOBALDBROUTINCGAGOC	 GLOBAL ROUTINE CGAGO=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE CODE FOR ASSIGNED GOTO STATEMENT.
BC	 	CALLED WITH "CSTMNT" POINTING TO THE STATEMENT TO BE PROCESSED.
BC	 	IF A LIST OF LABELS WAS SPECIFIED FOR THIS STMNT,
BC	 	CODE GENERATED IS:
BC	 		MOVE	1,VAR
BC	 		CAIN	1,LAB1
BC	 		JRST	LAB1
BC	 		CAIN	1,LAB2
BC	 		JRST	LAB2
BC	 		.
BC	 		.
BC	 	IF NOT, THE CODE GENERATED IS
BC	 		SKIPE	1,VAR
BC	 		JRST	0(1)
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BC	 
BC	 	%(***OPCODES NEEDED FOR CODE FOR ASSIGNED GOTO***)%
BBINDC	 	BIND
BHRRZOCC	 		HRRZOC=#550^27,
BCAINOCC	 		CAINOC=#306^27,
BSKIPEOC	 		SKIPEOC=#332^27;
BC	 
BC	 	%(***ALWAYS USE REGISTER 1 TO HOLD THE ASSIGNED VAR***)%
BBINDAGOREGC	 	BIND AGOREG=1^23;
BBINDAGORGIC	 	BIND AGORGIX=1^18;
BC	 
BOWNAGOLSTC	 	OWN AGOLSTPTR;
BOWNPEXPRNAGOVARAGOVARC	 	OWN PEXPRNODE AGOVAR;
BC	 
BC	 	%(***SET UP THE GLOBALS "PBOPWD" AND "PSYMPTR" USED BY THE OUTPUT ROUTINE 
BC	 		TO INDICATE AN ADDRESS REFERENCE TO THE ASSIGNED VARIABLE***)%
BC	 
BAGOVARCSTMNTAGOTOLCW3RRIGHTC	 	AGOVAR_.CSTMNT[AGOTOLBL];
BC	 
BC	 	%(***IF ASSIGNED VAR IS AN ARRAY REFERENCE*****)%
BIFAGOVAROPRCLSEXOPWDEQLARRAYRC	 	IF .AGOVAR[OPRCLS] EQL ARRAYREF
BTHENC	 	THEN
BBEGINC	 	BEGIN
BTREEPTAGOVARC	 		TREEPTR_.AGOVAR;
BCGETVAC	 		CGETVAL();
BC	 
BPSYMPTAGOVARARG1PTLEFTC	 		PSYMPTR_.AGOVAR[ARG1PTR];		!SYMBOL TABLE ENTRY FOR THE
BC	 							! ARRAY
BPBOPWDAGOVARTARGETWHOLEC	 		PBOPWD_.AGOVAR[TARGET];			!ADDRESS FIELD TO REF THE ARRAY
BC	 							! ELEMENT DESIRED
BENDC	 	END
BC	 
BC	 	%(***IF ASSIGNED VAR IS A SCALAR***)%
BELSEC	 	ELSE
BBEGINC	 	BEGIN
BPSYMPTAGOVARC	 		PSYMPTR_.AGOVAR;
BPBOPWDAGOVARIDADDRCW2RRIGHTC	 		PBOPWD_.AGOVAR[IDADDR];
BENDC	 	END;
BLISS  V. 1.0-2.12	13-JUN-73  17:57:34	CGSTMNT	CGSTM1.BLI		PAGE 38-2

BC	 
BC	 
BC	 	%(****IF NO LIST OF LABELS WAS SPECIFIED******)%
BIFCSTMNTGOTOLICW4RRIGHTEQLC	 	IF .CSTMNT[GOTOLIST] EQL 0
BTHENC	 	THEN
BBEGINC	 	BEGIN
BC	 		%(***GENERATE "SKIPE 1,VAR" ***)%
BPBOPWDPBOPWDORSKIPEOORAGOREGC	 		PBOPWD_.PBOPWD OR SKIPEOC OR AGOREG;
BOBUFFC	 		OBUFF();
BC	 
BC	 		%(***GENERATE JRST 0(1)***)%
BPSYMPTPBFNOSC	 		PSYMPTR_PBFNOSYM;
BPBOPWDJRSTOCORAGORGIC	 		PBOPWD_JRSTOC OR AGORGIX;
BOBUFFC	 		OBUFF();
BENDC	 	END
BC	 
BC	 	%(***IF A LIST OF LABELS WAS SPECIFIED***)%
BELSEC	 	ELSE
BBEGINC	 	BEGIN
BC	 		%(***GENERATE HRRZ 1,VAR****)%
BPBOPWDPBOPWDORHRRZOCORAGOREGC	 		PBOPWD_.PBOPWD OR HRRZOC OR AGOREG;
BOBUFFC	 		OBUFF();
BC	 
BC	 		%(***FOR EACH LABEL IN THE LIST, COMPARE REG 1 WITH THE LABEL AND
BC	 			IF IT IS EQUAL, TRANSFER TO THE LABEL*****)%
BAGOLSTCSTMNTGOTOLICW4RRIGHTC	 		AGOLSTPTR_.CSTMNT[GOTOLIST];
BDECRCTFROMCTCSTMNTGOTONUCW4LLEFTTOC	 		DECR CT FROM (.CSTMNT[GOTONUM]-1) TO 0
BDOC	 		DO
BBEGINC	 		BEGIN
BPBOPWDCAINOCORAGOREGORAGOLSTC	 			PBOPWD_CAINOC OR AGOREG OR @.AGOLSTPTR;
BPSYMPTPBFLABC	 			PSYMPTR_PBFLABREF;
BOBUFFC	 			OBUFF();
BJRSTGEBEGINPBOPWDJRSTOCORAGOLSTPSYMPTPBFLABOBUFFENDC	 			JRSTGEN(@.AGOLSTPTR);
BAGOLSTAGOLSTC	 			AGOLSTPTR_.AGOLSTPTR+1;
BENDC	 		END;
BENDC	 	END;
BENDC	 END;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:57:38	CGSTMNT	CGSTM1.BLI		PAGE 39-1

BC	 
BC	 
BGLOBALDBROUTINCGCGOC	 GLOBAL ROUTINE CGCGO=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE CODE FOR COMPUTED GOTO.
BC	 	CODE GENERATED IS:
BC	 		SKIPLE	01,VAL
BC	 		CAILE	01,CT
BC	 		JRST	Y
BC	 		JRST	@.(1)
BC	 		ARG	L1
BC	 		ARG	L2
BC	 		.
BC	 		.
BC	 	   Y:	1ST INSTR OF NEXT STMNT
BC	 	CALLED WITH THE GLOBAL CSTMNT POINTING TO THE COMPUTED GOTO STMNT
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BOWNBASENXTSTMNXTSTMC	 	OWN BASE NXTSTMNT;
BC	 
BC	 	%(***DEFINE OPCODES USED FOR COMPUTED GOTO***)%
BBINDSKIPLEC	 	BIND	SKIPLEOC=#333^27,
BCAILEOC	 		CAILEOC=#303^27,
BSKIPAOC	 		SKIPAOC=#334^27,
BARGOCJUMPOCC	 		ARGOC=JUMPOCD^27;			!USE JUMP
BC	 
BC	 	%(***ALWAYS USE REGISTER 1 TO HOLD THE COMPUTED VAL***)%
BBINDCGOREGC	 	BIND	CGOREG=1^23,
BCGORGIC	 		CGORGIX=1^18;
BC	 
BOWNPEXPRNCGOEXPCGOEXPC	 	OWN PEXPRNODE CGOEXP;
BOWNCLOCDBC	 	OWN CLOC;
BOWNCGOLSTC	 	OWN CGOLSTPTR;
BC	 
BC	 	%(***COMPUTE THE VALUES OF ANY COMMON SUBEXPRS ASSOCIATED WITH THIS STMNT***)%
BIFCSTMNTSRCCOMCW2RRIGHTNEQTHENCGCMNSC	 	IF .CSTMNT[SRCCOMNSUB] NEQ 0 THEN CGCMNSUB();
BC	 
BC	 
BCGOEXPCSTMNTCGOTOLCW3RRIGHTC	 	CGOEXP_.CSTMNT[CGOTOLBL];
BC	 
BC	 	%(***IF THE EXPRESSION IS NOT A SCALAR OR A COMMON SUB, EVALUATE IT***)%
BIFCGOEXPOPRCLSEXOPWDNEQDATAOPANDCGOEXPOPRCLSEXOPWDNEQCMNSUBC	 	IF .CGOEXP[OPRCLS] NEQ DATAOPR AND .CGOEXP[OPRCLS] NEQ CMNSUB
BTHENC	 	THEN
BBEGINC	 	BEGIN
BTREEPTCGOEXPC	 		TREEPTR_.CGOEXP;
BCGETVAC	 		CGETVAL();
BENDC	 	END;
BC	 
BC	 	%(***GENERATE THE SKIPLE, CAILE, JRST SEQUENCE***)%
BC	 
BC	 	%(******DETERMINE WHAT THE LABEL ON THE NEXT STMNT IS, IF THERE IS NONE, GENERATE ONE***)%
BC	 	%(*******(NOTE THAT IF THIS STMNT IS EMBEDDED INSIDE AN ARITH OR LOGICAL IF, MUST
BC	 		LOOK AT THE "TOP-LEVEL" STMNT NODE TO GET A PTR TO THE NEXT STMNT)***)%
BNXTSTMIFCSTMNTCLINKRIGHTNEQTHENCSTMNTCLINKRIGHTELSETOPSTMCLINKRIGHTC	 	NXTSTMNT_(IF .CSTMNT[CLINK] NEQ 0 THEN .CSTMNT[CLINK] ELSE .TOPSTMNT[CLINK]);
BA1LABEIFNXTSTMSRCLBLCW3LLEFTNEQTHENNXTSTMSRCLBLCW3LLEFTC	 	A1LABEL_(IF .NXTSTMNT[SRCLBL] NEQ 0 THEN .NXTSTMNT[SRCLBL]
BELSENXTSTMSRCLBLCW3LLEFTGENLABC	 		 ELSE (NXTSTMNT[SRCLBL]_GENLAB() )  );
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  17:57:41	CGSTMNT	CGSTM1.BLI		PAGE 39-2

BA1NODECGOEXPC	 	A1NODE_.CGOEXP;
BC1HCSTMNTGOTONUCW4LLEFTC	 	C1H_.CSTMNT[GOTONUM];
BC	 
BC	 	%(***HAVE A SPECIAL CASE WHEN THE EXPRESSION IS THE LOOP INDEX OF A LOOP IN
BC	 		WHICH THE INDEX IS STORED IN THE RIGHT HALF OF AN AC
BC	 		(IN THIS CASE GENERATE:
BC	 			MOVEI	1,0(LOOPAC)
BC	 			JUMPLE	1,Y
BC	 			CAILE	1,CT
BC	 			JRST	Y) 
BC	 	*********)%
BIFCSTMNTA1IMMEEXOPWDANDCGOEXPOPRCLSEXOPWDEQLREGCONC	 	IF .CSTMNT[A1IMMEDFLG] AND .CGOEXP[OPRCLS] EQL REGCONTENTS
BTHENOPDSPIOPGCGIC	 	THEN OPDSPIX_OPGCGI
BC	 
BELSEOPDSPIOPGCGOC	 	ELSE OPDSPIX_OPGCGO;
BCGOPGEC	 	CGOPGEN();
BC	 
BC	 
BC	 	%(***ASSOCIATE A LABEL WITH THE CURRENT LOC***)%
BCLOCGENLABC	 	CLOC_GENLAB();
BDEFLABCLOCC	 	DEFLAB(.CLOC);
BC	 
BC	 	%(***GENERATE JRST @CLOC(1)***)%
BPBOPWDJRSTOCORINDBITORCGORGIORCLOCC	 	PBOPWD_JRSTOC OR INDBIT OR CGORGIX OR .CLOC;
BPSYMPTPBFLABC	 	PSYMPTR_PBFLABREF;
BOBUFFC	 	OBUFF();
BC	 
BC	 	%(***FOR EACH LABEL LISTED, GENERTAE "ARG LAB"***)%
BPSYMPTPBFLABC	 	PSYMPTR_PBFLABREF;
BCGOLSTCSTMNTGOTOLICW4RRIGHTC	 	CGOLSTPTR_.CSTMNT[GOTOLIST];
BDECRCTFROMCTCSTMNTGOTONUCW4LLEFTTOC	 	DECR CT FROM (.CSTMNT[GOTONUM]-1) TO 0
BDOC	 	DO
BBEGINC	 	BEGIN
BPBOPWDARGOCORCGOLSTC	 		PBOPWD_ARGOC OR @.CGOLSTPTR;
BOBUFFC	 		OBUFF();
BCGOLSTCGOLSTC	 		CGOLSTPTR_.CGOLSTPTR+1;
BENDC	 	END;
BC	 
BENDC	 END;
BLISS  V. 1.0-2.12	13-JUN-73  17:57:45	CGSTMNT	CGSTM1.BLI		PAGE 40-1

BC	 
BGLOBALDBROUTINCGLOGIC	 GLOBAL ROUTINE CGLOGIF=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE CODE FOR LOGICAL IF STATEMENTS.
BC	 	CALLED WITH THE GLOBAL CSTMNT POINTING TO THE STATEMENT FOR
BC	 	WHICH CODE IS TO BE GENERATED.
BC	 	A LOGICAL IF STATEMENT NODE MAY HAVE THE FLAG "A1NOTFLG" SET, WHICH
BC	 	MEANS TO TAKE THE "NOT" (COMPLEMENT) OF THE CONDITION SPECIFIED.
BC	 	BECAUSE "NOT" PROPAGATES OVER BOTH BOOLEANS AND RELATIONALS, IT IS ASSUMED
BC	 	THAT THIS FLAG WILL NEVER BE SET WHEN THE CONDITION IS A BOOLEAN OR RELATIONAL.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BOWNTHENLAELSELAC	 	OWN THENLAB,ELSELAB;		!NEW LABEL TABLE ENTRIES
BC	 					!WHICH WILL BE CREATED TO PROCESS
BC	 					! THIS STMNT
BOWNBASESUBSTASUBSTADBC	 	OWN BASE SUBSTATMNT;		!STATEMENT TO BE EXECUTED IF CONDITION HOLDS
BOWNBASESAVSTMSAVSTMC	 	OWN BASE SAVSTMNT;		!SAVE PTR TO THE LOG IF  STATEMENT
BOWNPEXPRNCONDEXCONDEXC	 	OWN PEXPRNODE CONDEXPR;		!CONDITIONAL EXPRESSION TO BE TESTED
BC	 
BC	 	%(***EVALUATE ANY COMMON SUBEXPRESSIONS UNDER THIS STATEMENT***)%
BIFCSTMNTSRCCOMCW2RRIGHTNEQTHENCGCMNSC	 	IF .CSTMNT[SRCCOMNSUB] NEQ 0 THEN CGCMNSUB();
BC	 
BC	 
BSUBSTACSTMNTLIFSTACW4RRIGHTC	 	SUBSTATMNT_.CSTMNT[LIFSTATE];
BCONDEXCSTMNTLIFEXPCW3RRIGHTC	 	CONDEXPR_.CSTMNT[LIFEXPR];
BTREEPTCSTMNTLIFEXPCW3RRIGHTC	 	TREEPTR_.CSTMNT[LIFEXPR];
BIFCONDEXVALTYPEXOPWDEQLSTRINGC	         IF  .CONDEXPR[VALTYPE]  EQL  STRING
BC	 
BTHENC	         THEN
BBEGINC	         BEGIN
BOPDSPIOPGSESC	                 OPDSPIX  _  OPGSES;
BCGOPGEC	                 CGOPGEN();
BC	 
BIFNOTCONDEXA1VALFEXOPWDC	                 IF  NOT  .CONDEXPR[A1VALFLG]
BC	 
BTHENC	                 THEN
BBEGINC	                 BEGIN
BTREEPTCONDEXARG1PTLEFTC	                         TREEPTR  _  .CONDEXPR[ARG1PTR];
BCGETVAC	                         CGETVAL();
BENDC	                 END
BELSEC	                 ELSE
BBEGINC	                 BEGIN
BTREEPTCONDEXARG1PTLEFTC	                         TREEPTR  _  .CONDEXPR[ARG1PTR];
BA1NODECONDEXARG1PTLEFTC	                         A1NODE  _  .CONDEXPR[ARG1PTR];
BOPDSPIOPGSRRC	                         OPDSPIX  _  OPGSRR;
BCGOPGEC	                         CGOPGEN();
BENDC	                 END;
BC	 
BC	                 
BOPDSPIOPGSESC	                 OPDSPIX  _  OPGSES;
BCGOPGEC	                 CGOPGEN();
BC	 
BIFNOTCONDEXA2VALFEXOPWDC	                 IF  NOT  .CONDEXPR[A2VALFLG]
BC	 
BTHENC	                 THEN
BBEGINC	                 BEGIN
BTREEPTCONDEXARG2PTRIGHTC	                         TREEPTR  _  .CONDEXPR[ARG2PTR];
BLISS  V. 1.0-2.12	13-JUN-73  17:57:49	CGSTMNT	CGSTM1.BLI		PAGE 40-2

BCGETVAC	                         CGETVAL();
BENDC	                 END
BELSEC	                 ELSE
BBEGINC	                 BEGIN
BTREEPTCONDEXARG2PTRIGHTC	                         TREEPTR  _  .CONDEXPR[ARG2PTR];
BA1NODECONDEXARG2PTRIGHTC	                         A1NODE  _  .CONDEXPR[ARG2PTR];
BOPDSPIOPGSRRC	                         OPDSPIX  _  OPGSRR;
BCGOPGEC	                         CGOPGEN();
BENDC	                 END;
BC	 
BCASECONDEXOPERSPEXOPWDOFSETC	                 CASE  .CONDEXPR[OPERSP]  OF  SET
BC	 
BC	                         %(***NOT USED***)%
BBEGINENDC	                         BEGIN  END;
BC	 
BC	 
BC	                         %(***LESS THAN***)%
BOPDSPIOPGSKLC	                         OPDSPIX  _  OPGSKL;
BC	 
BC	                         %(***EQUAL***)%
BOPDSPIOPGSKPC	                         OPDSPIX  _  OPGSKP;
BC	 
BC	                         %(***LESS; EQUAL***)%
BOPDSPIOPGSLEC	                         OPDSPIX  _  OPGSLE;
BC	 
BC	                         %(***NOT USED****)%
BBEGINENDC	                         BEGIN  END;
BC	 
BC	                         %(***> ; =***)%
BOPDSPIOPGSGEC	                         OPDSPIX  _  OPGSGE;
BC	 
BC	                         %(*** #  ***)%
BOPDSPIOPGSKNC	                         OPDSPIX  _  OPGSKN;
BC	 
BC	                         %(***  GT ****)%
BOPDSPIOPGSKGC	                         OPDSPIX  _  OPGSKG;
BTESC	                 TES;
BCGOPGEC	                 CGOPGEN();
BC	 
BELSELAGENLABC	                         ELSELAB  _  GENLAB();
BJRSTGEBEGINPBOPWDJRSTOCORELSELAPSYMPTPBFLABOBUFFENDC	                         JRSTGEN(.ELSELAB);
BTOPSTMCSTMNTC	                         TOPSTMNT  _  .CSTMNT;
BSAVSTMCSTMNTC	                         SAVSTMNT  _  .CSTMNT;
BCSTMNTSUBSTAC	                         CSTMNT  _  .SUBSTATMNT;
BCGSTMNC	                         CGSTMNT();
BCSTMNTSAVSTMC	                         CSTMNT  _  .SAVSTMNT;
BDEFLABELSELAC	                         DEFLAB(.ELSELAB);
BENDC	         END
BELSEC	         ELSE
BC	 
BC	 
BC	 
BC	 
BC	 	%(*****WHEN THE STATEMENT TO BE EXECUTED IF  CONDITION IS TRUE IS A GOTO***)%
BIFSUBSTASRCIDEQLGOTOIDC	 	IF .SUBSTATMNT[SRCID] EQL GOTOID
BTHENC	 	THEN
BBEGINC	 	BEGIN
BLISS  V. 1.0-2.12	13-JUN-73  17:58:16	CGSTMNT	CGSTM1.BLI		PAGE 40-3

BC	 		%(****IF THE CONDITION TO BE TESTED IS A RELATIONAL***)%
BIFCONDEXOPRCLSEXOPWDEQLRELATIC	 		IF .CONDEXPR[OPRCLS] EQL  RELATIONAL
BTHENC	 		THEN
BBEGINC	 		BEGIN
BCGREL1FALSEC	 			CGREL1(FALSE);		!SKIP NEXT INSTR IF REL IS FALSE
BC	 			%(***GENERATE A JRST TO THE GOTO-LABEL***)%
BJRSTGEBEGINPBOPWDJRSTOCORSUBSTAGOTOLBCW3RRIGHTPSYMPTPBFLABOBUFFENDC	 			JRSTGEN(.SUBSTATMNT[GOTOLBL]);
BENDC	 		END
BC	 
BC	 		%(***IF THE CONDITION TO BE TESTED IS A BOOLEAN***)%
BELSEC	 		ELSE
BIFCONDEXOPRCLSEXOPWDEQLBOOLEAC	 		IF .CONDEXPR[OPRCLS] EQL BOOLEAN
BTHENC	 		THEN
BBEGINC	 		BEGIN
BELSELAGENLABC	 			ELSELAB_GENLAB();	!CREATE LABEL TABLE ENTRY FOR LABEL
BC	 						! TO GO TO IF CONDITION IS FALSE
BCGCBOOSUBSTAGOTOLBCW3RRIGHTELSELAC	 			CGCBOOL(.SUBSTATMNT[GOTOLBL],.ELSELAB);
BDEFLABELSELAC	 			DEFLAB(.ELSELAB);
BENDC	 		END
BC	 
BC	 
BELSEC	 		ELSE
BC	 		%(***IF CONDITION IS NOT A RELATIONAL OR BOOLEAN, EVALUATE THE CONDEXPR AND
BC	 			TEST WHETHER IS IS TRUE (SIGN BIT EQUAL 1) OR FALSE(SIGN=0) ***)%
BBEGINC	 		BEGIN
BCGETVAC	 			CGETVAL();
BC	 
BC	 			%(***TEST VAL OF CONDEXPR,
BC	 				IF "A1NOTFLG" IS SET, TRANSFER TO GOTO-LABEL IF ARG IS
BC	 				FALSE, OTHERWISE TRANSFER TO GOTOLABEL IF ARG IS TRUE***)%
BOPDSPICNDVTRBEGINIFCONDEXOPRCLSEXOPWDEQLDATAOPTHENIFCSTMNTA1NOTFEXOPWDTHENFALSEELSETRUEANDOPGVTSELSEIFCSTMNTA1NOTFEXOPWDTHENFALSEELSETRUEANDCONDEXINREGFOPGVTSENDC	 			OPDSPIX_CNDVTRIX(CONDEXPR,(IF .CSTMNT[A1NOTFLG] THEN FALSE ELSE TRUE));
BA1LABESUBSTAGOTOLBCW3RRIGHTC	 			A1LABEL_.SUBSTATMNT[GOTOLBL];
BTREEPTCONDEXC	 			TREEPTR_.CONDEXPR;
BREGFORGETTACTREEPTTARGETWHOLEANDC	 			REGFORCOMP_GETTAC(TREEPTR);
BCGOPGEC	 			CGOPGEN();
BENDC	 		END;
BC	 
BENDC	 	END
BC	 
BC	 
BC	 	%(****WHEN STATEMENT TO BE EXECUTED ON TRUE CONDITION IS NOT A GOTO***)%
BELSEC	 	ELSE
BBEGINC	 	BEGIN
BELSELAGENLABC	 		ELSELAB_GENLAB();		!CREATE LABEL TABLE ENTRY FOR LABEL
BC	 						! TO GO TO WHEN CONDITION IS FALSE
BC	 
BC	 		%(***IF CONDITION TO BE TESTED IS A RELATIONAL***)%
BIFCONDEXOPRCLSEXOPWDEQLRELATIC	 		IF .CONDEXPR[OPRCLS] EQL RELATIONAL
BTHENC	 		THEN
BBEGINC	 		BEGIN
BCGREL1TRUEC	 			CGREL1(TRUE);		!SKIP NEXT INSTR IF REL IS TRUE
BC	 			%(***GENERTAE CODE TO GO TO THE LABEL ON THE CODE FOLLOWING THAT
BC	 				FOR THE SUBSTATMNT OF THE IF STMNT***)%
BJRSTGEBEGINPBOPWDJRSTOCORELSELAPSYMPTPBFLABOBUFFENDC	 			JRSTGEN(.ELSELAB);
BENDC	 		END
BC	 
BC	 		%(***IF THE CONDITION TO BE TESTED IS A BOOLEAN*****)%
BLISS  V. 1.0-2.12	13-JUN-73  17:59:42	CGSTMNT	CGSTM1.BLI		PAGE 40-4

BELSEC	 		ELSE
BIFCONDEXOPRCLSEXOPWDEQLBOOLEAC	 		IF .CONDEXPR[OPRCLS] EQL BOOLEAN
BTHENC	 		THEN
BBEGINC	 		BEGIN
BTHENLAGENLABC	 			THENLAB_GENLAB();	!CREATE LABEL TABLE ENTRY FOR LABEL TO
BC	 						! GO TO WHEN CONDITION IS TRUE
BCGCBOOTHENLAELSELAC	 			CGCBOOL(.THENLAB,.ELSELAB);
BDEFLABTHENLAC	 			DEFLAB(.THENLAB);	!ASSOCIATE THIS LOC WITH THENLAB
BENDC	 		END
BC	 
BC	 		%(***IF CONDITIONAL EXPRESSION IS NOT A REL OR BOOLEAN, EVALUATE IT AND
BC	 			TEST WHETHER ITS VAL IS TRUE (SIGN=1) OR FALSE (SIGN=0)***)%
BELSEC	 		ELSE
BBEGINC	 		BEGIN
BCGETVAC	 			CGETVAL();
BC	 
BC	 			%(***TEST VAL OF CONDEXPR,
BC	 				IF "A1NOTFLG" IS SET, TRANSFER TO ELSELAB IF VAL IS TRUE
BC	 				OTHERWISE TRANSFER TO ELSELAB IF VAL IS FALSE***)%
BOPDSPICNDVTRBEGINIFCONDEXOPRCLSEXOPWDEQLDATAOPTHENIFCSTMNTA1NOTFEXOPWDTHENTRUEELSEFALSEANDOPGVTSELSEIFCSTMNTA1NOTFEXOPWDTHENTRUEELSEFALSEANDCONDEXINREGFOPGVTSENDC	 			OPDSPIX_CNDVTRIX(CONDEXPR,(IF .CSTMNT[A1NOTFLG] THEN TRUE ELSE FALSE));
BA1LABEELSELAC	 			A1LABEL_.ELSELAB;
BTREEPTCONDEXC	 			TREEPTR_.CONDEXPR;
BREGFORGETTACTREEPTTARGETWHOLEANDC	 			REGFORCOMP_GETTAC(TREEPTR);
BCGOPGEC	 			CGOPGEN();
BENDC	 		END;
BC	 
BC	 		%(****GENERATE CODE FOR THE STATEMENT TO BE EXECUTED WHEN THE CONDITION IS TRUE***)%
BTOPSTMCSTMNTC	 		TOPSTMNT_.CSTMNT;	!SAVE A PTR TO THIS "TOP-LEVEL" STMNT 
BSAVSTMCSTMNTC	 		SAVSTMNT_.CSTMNT;
BCSTMNTSUBSTAC	 		CSTMNT_.SUBSTATMNT;
BCGSTMNC	 		CGSTMNT();
BCSTMNTSAVSTMC	 		CSTMNT_.SAVSTMNT;		!RESTORE THE GLOBAL CSTMNT
BC	 
BC	 		%(***ASSOCIATE THIS LOC WITH THE LABEL TRANSFERED TO WHEN THE CONDITION
BC	 			IS FALSE****)%
BDEFLABELSELAC	 		DEFLAB(.ELSELAB);
BC	 
BENDC	 	END;
BC	 
BENDC	 END;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:00:51	CGSTMNT	CGSTM1.BLI		PAGE 41-1

BC	 
BGLOBALDBROUTINCGENDC	 GLOBAL ROUTINE CGEND=
BC	 %(*********************************************************
BC	 	TO GENERATE CODE FOR AN END STATEMENT
BC	 **********************************************************)%
BBEGINC	 BEGIN
BEXTERNPROEPIZERBLKZERBLKC	 	EXTERNAL PROEPITYP,ZERBLK;
BC	 	!AN END TRIGGERS A CALL TO EXIT ONLY IN A MAIN
BC	 	!PROGRAM, NOT FOR A SUBPROGRAM
BC	 	!IN A SUBPROGRAM THE END TRIGGERS A RETURN.
BC	 
BEXTERNPROGNAC	 	EXTERNAL PROGNAME;
BIFPROGNAEQLSIXBITC	 	IF .PROGNAME EQL SIXBIT'MAIN. ' 
BTHENC	 	THEN
BBEGINC	 	BEGIN
BA1LABEZERBLKC	 		A1LABEL_.ZERBLK;	!ARGLIST FOR CALL TO EXIT IS ALWAYS
BC	 					! 0 FOR THE END STMNT
BOPDSPIOPGEXIC	 		OPDSPIX_OPGEXI;
BCGOPGEC	 		CGOPGEN();
BENDC	 	END
BELSEC	 	ELSE
BC	 		!ALSO CHECK FOR A BLOCK DATA SUBPROGRAM
BC	 		!THESE HAVE THE NAME *.BLOCK*
BIFPROGNANEQSIXBITTHENC	 		IF .PROGNAME NEQ SIXBIT'.BLOCK' THEN
BCGRETUC	 			CGRETURN(0);
BENDC	 END;
BGLOBALDBROUTINCGINTRC	 GLOBAL ROUTINE CGINTR=
BC	 %(****************************************************************
BC	 
BC	         ROUTINE TO PROCESS THE INTERRUPT STATEMENT
BC	 
BC	 ******************************************************************)%
BC	 
BBEGINC	 BEGIN
BC	 
BEXTERNZERBLKZERBLKOPGOFIOPGONIARGLINC	         EXTERNAL        ZERBLK,OPGOFI,OPGONI,ARGLINKPT;
BLOCALARGLSTC	         LOCAL           ARGLST;
BMAPARGUMEARGLSTARGLSTC	         MAP             ARGUMENTLIST ARGLST;
BC	 
BC	 
BIFCSTMNTOPRCLSEXOPWDEQLC	         IF  .CSTMNT[OPRCLS]  EQL  0    !THEN THIS IS ON INTERRUPT 
BC	 
BTHENC	         THEN
BBEGINC	         BEGIN
BA1LABEARGLSTARGLABLEFTGENLABC	                 A1LABEL _ ARGLST[ARGLABEL] _ GENLAB(); !GEN ARG BLK LBL
BOPDSPIOPGONIC	                 OPDSPIX  _  OPGONI;
BENDC	         END
BELSEC	         ELSE
BBEGINC	         BEGIN
BA1LABEZERBLKC	                 A1LABEL  _  .ZERBLK;
BOPDSPIOPGOFIC	                 OPDSPIX  _  OPGOFI;
BENDC	         END;
BC	 
BCGOPGEC	         CGOPGEN();
BC	 
BENDC	 END;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:01:46	CGSTMNT	CGSTM1.BLI		PAGE 41-2

BGLOBALDBROUTINCGSTOPC	 GLOBAL ROUTINE CGSTOP=
BC	 %(***************************************************************************
BC	 	TO GENERATE CODE FOR A STOP STMNT
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BEXTERNZERBLKZERBLKC	 	EXTERNAL ZERBLK;
BC	 
BC	 
BIFCSTMNTSTOPIDCW3RRIGHTNEQC	         IF  .CSTMNT[STOPIDENT]  NEQ  0
BTHENC	         THEN
BA1LABEGENLABC	         A1LABEL  _  GENLAB()
BELSEC	         ELSE
BA1LABEZERBLKC	         A1LABEL  _  .ZERBLK;
BCSTMNTSTOPLBCW4LLEFTA1LABEC	         CSTMNT[STOPLBL]  _  .A1LABEL;
BOPDSPIOPGSTPC	         OPDSPIX  _  OPGSTP;
BCGOPGEC	         CGOPGEN();
BC	 
BENDC	 END;
BC	 
BC	 
BGLOBALDBROUTINCGPAUSC	 GLOBAL ROUTINE CGPAUSE=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE CODE FOR PAUSE
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BC	         
BEXTERNZERBLKZERBLKC	         EXTERNAL ZERBLK;
BC	 
BIFCSTMNTPAUSIDCW3RRIGHTNEQC	         IF  .CSTMNT[PAUSIDENT]  NEQ  0          !AN ARG LIST EXISTS
BTHENC	         THEN
BA1LABEGENLABC	         A1LABEL  _  GENLAB()
BELSEC	         ELSE
BA1LABEZERBLKC	         A1LABEL  _  .ZERBLK;
BCSTMNTPAUSLBCW4LLEFTA1LABEC	         CSTMNT[PAUSLBL]  _  .A1LABEL;
BOPDSPIOPGPAUC	         OPDSPIX  _  OPGPAU;
BCGOPGEC	         CGOPGEN();
BENDC	 END;
BC	 	
BLISS  V. 1.0-2.12	13-JUN-73  18:01:57	CGSTMNT	CGSTM1.BLI		PAGE 42-1

BC	 
BGLOBALDBROUTINCGARIFC	 GLOBAL ROUTINE CGARIF=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE CODE FOR AN ARITHMETIC IF STATEMENT.
BC	 	CALLED WITH THE GLOBAL CSTMNT POINTING TO THE STATEMENT
BC	 	FOR WHICH CODE IS TO BE GENERATED.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BEXTERNA1LABEA1LABEA2LABEA3LABEC	 	EXTERNAL A1LABEL,A2LABEL,A3LABEL;	!GLOBALS USED BY THE CODE-GENERATION
BEXTERNREGFORREGFORA1NODEA1NODEA2NODEA2NODEC	 	EXTERNAL REGFORCOMP,A1NODE,A2NODE;	! TABLE DRIVER
BEXTERNTREEPTTREEPTC	 	EXTERNAL TREEPTR;
BC	 
BMAPPEXPRNA1NODEA1NODEA2NODETREEPTC	 	MAP PEXPRNODE A1NODE:A2NODE:TREEPTR;
BC	 
BOWNBASENXTSTMNXTSTMC	 	OWN BASE NXTSTMNT;
BOWNPEXPRNCONDEXCONDEXC	 	OWN PEXPRNODE CONDEXPR;		!THE ARITHMETIC EXPRESSION UNDER THIS STMNT
BC	 
BC	 	%(***COMPUTE ANY COMMON SUBEXPRESSIONS UNDER THIS NODE***)%
BIFCSTMNTSRCCOMCW2RRIGHTNEQTHENCGCMNSC	 	IF .CSTMNT[SRCCOMNSUB] NEQ 0 THEN CGCMNSUB();
BC	 
BC	 
BC	 	%(***DETERMINE WHICH (IF ANY) OF THE 3 LABELS ASSOCIATED WITH
BC	 		THIS NODE ARE EQUAL TO THE LABEL ON THE FOLLOWING STMNT***)%
BNXTSTMCSTMNTSRCLINCLINKRIGHTC	 	NXTSTMNT_.CSTMNT[SRCLINK];
BCSTMNTAIFLBNEXOPWDC	 	CSTMNT[AIFLBNXT]_
BBEGINC	 	BEGIN
BIFCSTMNTAIFLESCW4RRIGHTEQLNXTSTMSRCLBLCW3LLEFTC	 		IF .CSTMNT[AIFLESS] EQL .NXTSTMNT[SRCLBL]
BTHENLLBNXTC	 		THEN LLBNXT
BELSEC	 		ELSE
BIFCSTMNTAIFEQLCW4LLEFTEQLNXTSTMSRCLBLCW3LLEFTC	 		IF .CSTMNT[AIFEQL] EQL .NXTSTMNT[SRCLBL]
BTHENELBNXTC	 		THEN ELBNXT
BELSEC	 		ELSE
BIFCSTMNTAIFGTRCW5RRIGHTEQLNXTSTMSRCLBLCW3LLEFTC	 		IF .CSTMNT[AIFGTR] EQL .NXTSTMNT[SRCLBL]
BTHENGLBNXTC	 		THEN GLBNXT
BELSENOLBNXC	 		ELSE NOLBNXT
BENDC	 	END;
BC	 
BC	 
BC	 	%(***GET PTR TO THE CONDITIONAL EXPRESSION***)%
BCONDEXCSTMNTAIFEXPLIFEXPCW3RRIGHTC	 	CONDEXPR_.CSTMNT[AIFEXPR];
BTREEPTCONDEXC	 	TREEPTR_.CONDEXPR;
BC	 	%(***COMPUTE THE VAL OF THE ARITH EXPR, THEN TEST IT****)%
BC	 
BC	 	%(***COMPUTE THE VAL OF THE ARITH EXPR***)%
BIFNOTCSTMNTA1VALFEXOPWDC	 	IF NOT .CSTMNT[A1VALFLG]
BTHENCGETVAC	 	THEN CGETVAL();
BC	 
BC	 	%(***IF THERE IS A NEG ON THE VALUE, EXCHANGE THE GTR AND LESS LABELS***)%
BIFCSTMNTA1NEGFEXOPWDC	 	IF .CSTMNT[A1NEGFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BA1LABECSTMNTAIFGTRCW5RRIGHTC	 		A1LABEL_.CSTMNT[AIFGTR];
BA3LABECSTMNTAIFLESCW4RRIGHTC	 		A3LABEL_.CSTMNT[AIFLESS];
BA2LABECSTMNTAIFEQLCW4LLEFTC	 		A2LABEL_.CSTMNT[AIFEQL];
BC	 
BC	 		%(***MODIFY THE "AIFLBNXT" FIELD WHICH INDICATED WHICH OF
BC	 			THE 3 LABELS IS ON THE NEXT STMNT (CHANGE "GTR LABEL NEXT"
BLISS  V. 1.0-2.12	13-JUN-73  18:02:20	CGSTMNT	CGSTM1.BLI		PAGE 42-2

BC	 			TO "LESS LABEL NEXT", "LESS LABEL NEXT" TO
BC	 			"GTR LABEL NXT" LEAVE OTHERS UNCHANGED
BC	 			MODIFY THE "AIFLBEQV" FIELD SO THAT "GTR LABEL SAME
BC	 			AS EQL LABEL" BECOMES "LESS LABEL SAME AS EQL LABEL"
BC	 			AND VICE-VERSA
BC	 		****)%
BSWPAIFBEGINIFCSTMNTAIFLBNEXOPWDTHENCSTMNTAIFLBNEXOPWDCSTMNTAIFLBNEXOPWDXORIFCSTMNTAIFLBEEXOPWDTHENCSTMNTAIFLBEEXOPWDCSTMNTAIFLBEEXOPWDXORENDC	 		SWPAIFFLGS(CSTMNT);
BENDC	 	END
BELSEC	 	ELSE
BBEGINC	 	BEGIN
BA1LABECSTMNTAIFLESCW4RRIGHTC	 		A1LABEL_.CSTMNT[AIFLESS];
BA3LABECSTMNTAIFGTRCW5RRIGHTC	 		A3LABEL_.CSTMNT[AIFGTR];
BA2LABECSTMNTAIFEQLCW4LLEFTC	 		A2LABEL_.CSTMNT[AIFEQL];
BENDC	 	END;
BC	 
BC	 	%(***USE THE TABLE-DRIVER TO GENERATE CODE TO TEST THE VAL AND TRANSFER***)%
BREGFORGETAIFCSTMNTCW5FULLANDC	 	REGFORCOMP_GETAIFREG(CSTMNT);
BOPDSPIAIFIXCSTMNTAIFFLGEXOPWDIFCONDEXOPRCLSEXOPWDEQLDATAOPTHENELSECONDEXINREGFOPGAIFC	 	OPDSPIX_AIFIX(CSTMNT,CONDEXPR);
BA1NODECONDEXC	 	A1NODE_.CONDEXPR;
BCGOPGEC	 	CGOPGEN();
BENDC	 END;
BLISS  V. 1.0-2.12	13-JUN-73  18:02:42	CGSTMNT	CGSTM1.BLI		PAGE 43-1

BC	 
BGLOBALDBROUTINCGCMNSC	 GLOBAL ROUTINE CGCMNSUB=
BC	 %(***************************************************************************
BC	 	GENERATE CODE TO EVLUATE ANY COMMON SUBEXPRESSIONS THAT OCCUR UNDER
BC	 	THE STATEMENT NODE POINTED TO BY "CSTMNT"
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BOWNPEXPRNCCMNSUCCMNSUDBC	 	OWN PEXPRNODE CCMNSUB;
BC	 
BC	 	%(***COMPUTE THE VALUES OF ANY COMMON SUBEXPRS ASSOCIATED WITH THIS STATEMENT***)%
BCCMNSUCSTMNTSRCCOMCW2RRIGHTC	 	CCMNSUB_.CSTMNT[SRCCOMNSUB];
BUNTILCCMNSUEQLC	 	UNTIL .CCMNSUB EQL 0
BDOC	 	DO
BBEGINC	 	BEGIN
BIFNOTCCMNSUA2VALFEXOPWDC	 		IF NOT .CCMNSUB[A2VALFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BTREEPTCCMNSUARG2PTRIGHTC	 			TREEPTR_.CCMNSUB[ARG2PTR];
BCGETVAC	 			CGETVAL();
BENDC	 		END;
BC	 
BC	 		%(***IF THE COMMON SUBEXPR IS TO BE LEFT IN A DIFFERENT PLACE THAN
BC	 			THAT INTO WHICH IT WAS COMPUTED, PUT IT THERE.
BC	 			NOT THAT THIS CAN ONLY OCCUR WHEN THE PLACE IN WHICH
BC	 			IT IS TO BE LEFT IS A REGISTER.
BC	 		*******)%
BIFNOTCCMNSUA2SAMEEXOPWDC	 		IF NOT .CCMNSUB[A2SAMEFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BA1NODECCMNSUARG2PTRIGHTC	 			A1NODE_.CCMNSUB[ARG2PTR];
BOPDSPIGETA2OBEGINCCMNSUA2FLG1EXOPWDA1NODEVALTP1EXOPWDIFKA10FLFLGREGKA10THENOPGETAELSEOPGETIENDC	 			OPDSPIX_GETA2OPIX(CCMNSUB,A1NODE);
BREGFORGETTACCCMNSUTARGETWHOLEANDC	 			REGFORCOMP_GETTAC(CCMNSUB);
BCGOPGEC	 			CGOPGEN();
BENDC	 		END;
BC	 
BC	 
BC	 		%(***IF THE VAL OF THIS COMMON SUB MUST BE STORED INTO A TMP, GENERATE
BC	 			CODE TO DO SO***)%
BIFCCMNSUSTOREFEXOPWDC	 		IF .CCMNSUB[STOREFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BTREEPTCCMNSUC	 			TREEPTR_.CCMNSUB;
BREGFORGETTACCCMNSUTARGETWHOLEANDC	 			REGFORCOMP_GETTAC(CCMNSUB);
BOPDSPISTOROPBEGINCCMNSUDBLFLGEXOPWDIFKA10FLFLGREGKA10THENOPGSTAELSEOPGSTIENDC	 			OPDSPIX_STOROPIX(CCMNSUB);
BCGOPGEC	 			CGOPGEN();
BENDC	 		END;
BC	 
BC	 
BCCMNSUCCMNSUCLINKRIGHTC	 		CCMNSUB_.CCMNSUB[CLINK];
BENDC	 	END;
BC	 
BENDC	 END;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:03:22	CGSTMNT	CGSTM1.BLI		PAGE 44-1

BC	 
BC	 
BGLOBALDBROUTINCGIOLSC	 GLOBAL ROUTINE CGIOLST=
BC	 %(***************************************************************************
BC	 	ROUTINE TO PERFORM CODE GENERATION FOR AN IOLIST.
BC	 	CALLED WITH THE GLOBAL CSTMNT POINTING TO THE STATEMENT FOR WHICH AN
BC	 	IOLIST IS TO BE PROCESSED.
BC	 	FOR EACH ELEMENT IN THE IOLIST:
BC	 		1. IF THE ELEMENT IS A "STATEMENT" (EITHER A DO, OR A CONTINUE
BC	 			WHICH TERMINATES A DO-LOOP, OR AN ASSIGNMENT),  PERFORM
BC	 			USUAL CODE GENERATION FOR THAT TYPE OF STATEMENT
BC	 		2. IF THE ELEMENT IS AN "IOLSCLS" NODE (IE A DATACALL, SLISTCALL,
BC	 			IOLSTCALL,E1LISTCALL,OR E2LISTCALL), PERFORM CODE
BC	 			GENERATION FOR ALL ELEMENTS UNDER THE NODE AND
BC	 			ALSO GENERATE:
BC	 				MOVEI	16,ARGBLKP
BC	 				PUSHJ	17,IOLST.
BC	 			WHERE ARGBLKP IS A PTR TO THE ARGBLOCK FOR THIS ELEMENT
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BLOCALSAVSTMC	 	LOCAL SAVSTMNT;
BLOCALBASEIOLELEIOLELEC	 	LOCAL BASE IOLELEM;
BEXTERNGENLABGENLABC	 	EXTERNAL GENLAB;
BEXTERNOPDSPIOPDSPIA1LABEA1LABECGOPGECGOPGEOPGFINC	 	EXTERNAL OPDSPIX,A1LABEL,CGOPGEN,OPGFIN;
BC	 
BC	 	%(***GET PTR TO 1ST ELEMENT ON THE IOLIST TO BE PROCESSED***)%
BIOLELECSTMNTIOLISTCW6LLEFTC	 	IOLELEM_.CSTMNT[IOLIST];
BC	 
BC	 	%(***SAVE PTR TO CURRENT STATEMENT (IF THERE ARE DO-STMNTS IN THE IOLIST,
BC	 		WILL CLOBBER CSTMNT) *****)%
BSAVSTMCSTMNTC	 	SAVSTMNT_.CSTMNT;
BC	 
BC	 	%(***WALK THUR THE IOLIST, PROCESSING ALL ELEMENTS***)%
BUNTILIOLELEEQLC	 	UNTIL .IOLELEM EQL 0
BDOC	 	DO
BBEGINC	 	BEGIN
BIFIOLELEOPRCLSEXOPWDEQLSTATEMC	 		IF .IOLELEM[OPRCLS] EQL STATEMENT
BTHENC	 		THEN
BBEGINC	 		BEGIN
BCSTMNTIOLELEC	 			CSTMNT_.IOLELEM;
BCGSTMNC	 			CGSTMNT();
BC	 
BC	 			%(***IF THE LAST ELEMENT IN AN IO-LIST FOR  A GIVEN STMNT IS
BC	 				NOT OF IOLSCLS (IE DOES NOT GENERATE AN ARG-LIST)
BC	 				THEN MUST GENERATE A "PUSHJ 17,FIN."
BC	 			********)%
BIFIOLELECLINKRIGHTEQLC	 			IF .IOLELEM[CLINK] EQL 0
BTHENC	 			THEN
BBEGINC	 			BEGIN
BOPDSPIOPGFINC	 				OPDSPIX_OPGFIN;
BCGOPGEC	 				CGOPGEN();
BENDC	 			END;
BENDC	 		END
BC	 
BELSEC	 		ELSE
BIFIOLELEOPRCLSEXOPWDEQLIOLSCLC	 		IF .IOLELEM[OPRCLS] EQL IOLSCLS
BTHENC	 		THEN
BLISS  V. 1.0-2.12	13-JUN-73  18:03:29	CGSTMNT	CGSTM1.BLI		PAGE 44-2

BBEGINC	 		BEGIN
BC	 			%(***GENERATE CODE TO EVALUATE ALL EXPRESSIONS UNDER THIS ELEMENT***)%
BCASEIOLELEOPERSPEXOPWDOFSETC	 			CASE .IOLELEM[OPERSP] OF SET
BC	 
BC	 			%(***FOR A DATACALL NODE - EVAL THE EXPR UNDER THE NODE ***)%
BBEGINC	 			BEGIN
BTREEPTIOLELEDCALLELEFTC	 				TREEPTR_.IOLELEM[DCALLELEM];
BIFTREEPTOPRCLSEXOPWDNEQDATAOPC	 				IF .TREEPTR[OPRCLS] NEQ DATAOPR
BTHENC	 				THEN
BCGETVAC	 				CGETVAL();
BENDC	 			END;
BC	 
BC	 			%(***FOR AN SLISTCALL NODE - EVAL THE EXPR FOR THE NUMBER OF ELEMS***)%
BBEGINC	 			BEGIN
BTREEPTIOLELESCALLCRIGHTC	 				TREEPTR_.IOLELEM[SCALLCT];
BIFTREEPTOPRCLSEXOPWDNEQDATAOPC	 				IF .TREEPTR[OPRCLS] NEQ DATAOPR
BTHENC	 				THEN
BCGETVAC	 				CGETVAL();
BENDC	 			END;
BC	 
BC	 			%(***FOR AN IOLSTCALL NODE - EVAL ALL EXPRS UNDER IT****)%
BCGIOCAIOLELEC	 			CGIOCALL(.IOLELEM);
BC	 
BC	 			%(***FOR AN E1LISTCALL NODE - NOT IMPLEMENTED IN RELEASE 1***)%
BBEGINENDC	 			BEGIN END;
BC	 
BC	 			%(**FOR AN E2LISTCALL NODE - NOT IMPLEMENTED IN RELEASE 1****)%
BBEGINENDC	 			BEGIN END;
BC	 
BTESC	 			TES;
BC	 
BC	 
BC	 			%(***CREATE A LABEL TABLE ENTRY FOR THE LABEL ASSOCIATED WITH
BC	 				THE ARGBLOCK FOR THIS NODE***)%
BA1LABEGENLABC	 			A1LABEL_GENLAB();
BIOLELEIOLSTLLEFTA1LABEC	 			IOLELEM[IOLSTLBL]_.A1LABEL;
BC	 
BC	 			%(***GENERATE CALL TO IOLST.***)%
BOPDSPIOPGIOLC	 			OPDSPIX_OPGIOL;
BCGOPGEC	 			CGOPGEN();
BENDC	 		END
BELSECGERRC	 		ELSE CGERR();
BC	 
BC	 		%(***GO ON TO NEXT ELEMENT***)%
BIOLELEIOLELECLINKRIGHTC	 		IOLELEM_.IOLELEM[CLINK];
BENDC	 	END;
BC	 
BCSTMNTSAVSTMC	 	CSTMNT_.SAVSTMNT;
BENDC	 END;
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:03:49	CGSTMNT	CGSTM1.BLI		PAGE 45-1

BC	 
BGLOBALDBROUTINCGIOCAIOLSNOC	 GLOBAL ROUTINE CGIOCALL(IOLSNODE)=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE THE CODE FOR AN IOLSTCALL NODE.
BC	 	GENERATES CODE TO EVALUATE ALL EXPRESSIONS UNDER THE
BC	 	IOLSTCALL.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BMAPBASEIOLSNOIOLSNOC	 	MAP BASE IOLSNODE;
BOWNBASEIOLELEIOLELEC	 	OWN BASE IOLELEM;
BOWNSAVSTMC	 	OWN SAVSTMNT;
BC	 
BC	 	%(***SAVE THE GLOBAL CSTMNT***)%
BSAVSTMCSTMNTC	 	SAVSTMNT_.CSTMNT;
BC	 
BC	 	%(***GENERATE CODE FOR ANY COMMON SUBEXPRS UNDER THIS NODE***)%
BCSTMNTIOLSNOC	 	CSTMNT_.IOLSNODE;
BCGCMNSC	 	CGCMNSUB();
BC	 
BC	 	%(***WALK THRU THE ELEMS UNDER THIS IOLSTCALL***)%
BIOLELEIOLSNOIOLSTPLEFTC	 	IOLELEM_.IOLSNODE[IOLSTPTR];
BUNTILIOLELEEQLC	 	UNTIL .IOLELEM EQL 0
BDOC	 	DO
BBEGINC	 	BEGIN
BCASEIOLELEOPERSPEXOPWDOFSETC	 		CASE .IOLELEM[OPERSP] OF SET
BC	 
BC	 		%(***FOR A DATACALL****)%
BBEGINC	 		BEGIN
BTREEPTIOLELEDCALLELEFTC	 			TREEPTR_.IOLELEM[DCALLELEM];
BIFTREEPTOPRCLSEXOPWDNEQDATAOPC	 			IF .TREEPTR[OPRCLS] NEQ DATAOPR
BTHENCGETVAC	 			THEN CGETVAL();
BENDC	 		END;
BC	 
BC	 		%(***FOR AN SLISTCALL (AN SLIST THAT HAS ONLY ONE ARRAYREF, AND
BC	 			THAT ARRAYREF STARTS AT THE BASE OF THE ARRAY, AND THE
BC	 			INCREMENT IS A CONSTANT) ***)%
BBEGINC	 		BEGIN
BTREEPTIOLELESCALLCRIGHTC	 			TREEPTR_.IOLELEM[SCALLCT];
BIFTREEPTOPRCLSEXOPWDNEQDATAOPC	 			IF .TREEPTR[OPRCLS] NEQ DATAOPR
BTHENCGETVAC	 			THEN CGETVAL();
BENDC	 		END;
BC	 
BC	 		%(***AN IOLSTCALL NODE UNDER ANOTHER IOLSTCALL NODE IS ILLEGAL***)%
BCGERRC	 		CGERR();
BC	 
BC	 		%(***FOR AN S1LISTCALL (AN SLISTCALL THAT WAS DETECTED BY PHASE 2 SKEL - 
BC	 			MAY HAVE MORE THAN ONE ARRAYREF, VARIABLE BASE AND/OR INCR):
BC	 			NOT IMPLEMENTED IN RELEASE 1*****)%
BBEGINENDC	 		BEGIN END;
BC	 
BC	 		%(***FOR AN ELISTCALL: NOT IMPLEMENTED IN RELEASE 1***)%
BBEGINENDC	 		BEGIN END;
BC	 
BTESC	 		TES;
BC	 
BIOLELEIOLELECLINKRIGHTC	 		IOLELEM_.IOLELEM[CLINK];
BENDC	 	END;
BLISS  V. 1.0-2.12	13-JUN-73  18:04:10	CGSTMNT	CGSTM1.BLI		PAGE 45-2

BC	 
BC	 	%(***RESTORE CSTMNT***)%
BCSTMNTSAVSTMC	 	CSTMNT_.SAVSTMNT;
BENDC	 END;
BLISS  V. 1.0-2.12	13-JUN-73  18:04:11	CGSTMNT	CGSTM1.BLI		PAGE 46-1

BC	 
BC	 
BMAPDBPEXPRNTREEPTTREEPTC	 MAP PEXPRNODE TREEPTR;
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:04:11	CGSTMNT	CGSTM1.BLI		PAGE 47-1

BC	 
BGLOBALROUTINCGIOLAC	 GLOBAL ROUTINE CGIOLARGS=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE THE ARG BLOCKS FOR AN IOLIST.
BC	 	CALLED WITH THE GLOBAL TREEPTR POINTING TO THE IOLIST.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BMAPPEXPRNPSYMPTPSYMPTC	 	MAP PEXPRNODE PSYMPTR;
BOWNSAVTREDBC	 	OWN SAVTREEPTR;
BC	 
BC	 	%(***WALK THRU ALL THE ELEMENTS ON THE IOLIST***)%
BUNTILTREEPTEQLC	 	UNTIL .TREEPTR EQL 0
BDOC	 	DO
BBEGINC	 	BEGIN
BC	 		%(**ONLY GENERATE ARG BLOCKS FOR NODES OF OPRCLS "IOLSCLS" (IGNORE
BC	 			STATEMENT NODES) ***)%
BIFTREEPTOPRCLSEXOPWDEQLIOLSCLC	 		IF .TREEPTR[OPRCLS] EQL IOLSCLS
BTHENC	 		THEN
BBEGINC	 		BEGIN
BC	 			%(***ASSOCIATE CURRENT LOC WITH THE LABEL ON THIS ARGBLOCK***)%
BDEFLABTREEPTIOLSTLLEFTC	 			DEFLAB(.TREEPTR[IOLSTLBL]);
BC	 
BC	 
BC	 			%(********GENERATE THE ARG BLOCK************************)%
BCASETREEPTOPERSPEXOPWDOFSETC	 			CASE .TREEPTR[OPERSP] OF SET
BC	 
BC	 			%(***FOR DATACALL***)%
BCGDCALC	 			CGDCALL();
BC	 
BC	 			%(***FOR SLISTCALL***)%
BCGSLISC	 			CGSLIST();
BC	 
BC	 			%(***FOR IOLSTCALL***)%
BBEGINC	 			BEGIN
BC	 				%(***SAVE VAL OF TREEPTR***)%
BSAVTRETREEPTC	 				SAVTREEPTR_.TREEPTR;
BC	 
BC	 				%(***WALK THRU THE ELEMENTS UNDER THIS NODE, GENERATING
BC	 					ARG BLOCKS FOR THEM***)%
BTREEPTTREEPTIOLSTPLEFTC	 				TREEPTR_.TREEPTR[IOLSTPTR];
BUNTILTREEPTEQLC	 				UNTIL .TREEPTR EQL 0
BDOC	 				DO
BBEGINC	 				BEGIN
BCASETREEPTOPERSPEXOPWDOFSETC	 					CASE .TREEPTR[OPERSP] OF SET
BCGDCALC	 					CGDCALL();	!FOR A DATACALL
BCGSLISC	 					CGSLIST();	!FOR AN SLIST
BCGERRC	 					CGERR();	!IOLSTCALL IS ILLEGAL UNDER
BC	 							! ANOTHER IOLSTCALL
BBEGINENDC	 					BEGIN END;	!S1LISTCALL (UNIMPLEMENTED
BC	 							! IN RELEASE 1)
BBEGINENDC	 					BEGIN END;	!ELISTCALL (UNIMPLEMENTED
BC	 							! IN RELEASE 1)
BTESC	 					TES;
BC	 
BTREEPTTREEPTCLINKRIGHTC	 					TREEPTR_.TREEPTR[CLINK];
BENDC	 				END;
BLISS  V. 1.0-2.12	13-JUN-73  18:04:31	CGSTMNT	CGSTM1.BLI		PAGE 47-2

BC	 
BC	 				%(***RESTORE TREEPTR***)%
BTREEPTSAVTREC	 				TREEPTR_.SAVTREEPTR;
BENDC	 			END;
BC	 
BC	 			%(***FOR S1LISTCALL (AN SLIST DETECTED IN PHASE 2 SKEL -
BC	 				MAY HAVE MORE THAN ONE ARRAYREF AND VARIABLE BASE
BC	 				AND INCR) - NOT IN RELEASE 1***)%
BBEGINENDC	 			BEGIN END;
BC	 
BC	 			%(***FOR ELIST - NOT IN RELEASE 1***)%
BBEGINENDC	 			BEGIN END
BC	 
BTESC	 			TES;
BC	 
BC	 
BC	 			%(***IF THIS IS THE LAST ARG-BLOCK FOR THIS STMNT, GENERATE A FIN-BLOCK
BC	 				AFTER IT; OTHERWISE GENERATE A ZERO-BLOCK AFTER IT***)%
BPBOPWDIFTREEPTCLINKRIGHTEQLTHENOTSFINELSEOTSZERC	 			PBOPWD_(IF .TREEPTR[CLINK] EQL 0 THEN OTSFINWD ELSE OTSZERWD);
BPSYMPTPBF2NOC	 			PSYMPTR_PBF2NOSYM;
BOBUFFAC	 			OBUFFA();
BENDC	 		END;
BC	 
BC	 		%(***GO ON TO NEXT ELEMENT***)%
BTREEPTTREEPTCLINKRIGHTC	 		TREEPTR_.TREEPTR[CLINK];
BENDC	 	END;
BENDC	 END;
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:04:37	CGSTMNT	CGSTM1.BLI		PAGE 48-1

BC	 
BGLOBALDBROUTINCGDCALC	 GLOBAL ROUTINE CGDCALL=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE AN ARG BLOCK FOR A DATACALL ELEMENT IN AN IOLIST
BC	 	CALLED WITH THE GLOBAL TREEPTR POINTING TO THE DATACALL NODE FOR
BC	 	WHICH THE BLOCK IS TO BE GENERATED.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BMAPPEXPRNPSYMPTPSYMPTC	 	MAP PEXPRNODE PSYMPTR;
BOWNPEXPRNARGNODARGNODDBC	 	OWN PEXPRNODE ARGNODE;
BEXTERNEVALUC	 	EXTERNAL EVALU;
BC	 
BC	 	%(***GET PTR TO THE EXPRESSION-NODE WHOSE VAL IS TO BE AN ARG***)%
BARGNODTREEPTDCALLELEFTC	 	ARGNODE_.TREEPTR[DCALLELEM];
BC	 
BC	 
BC	 	%(***INIT OUTPUT WD TO 0****)%
BPBOPWDC	 	PBOPWD_0;
BC	 
BC	 	%(***SET ID FIELD OF OUTPUT WD TO INDICATE DATA***)%
BPBOPWDOTSIDNOTSDATC	 	PBOPWD[OTSIDN]_OTSDATA;
BC	 
BC	 	%(***SET TYPE FIELD OF ARG BLOCK TO THE EXTERNAL-TYPE CODE CORRESPONDING
BC	 		TO THE VALTYPE INDICATED IN ARGNODE***)%
BPBOPWDOTSTYPEVALUARGNODVALTYPEXOPWDC	 	PBOPWD[OTSTYPE]_.EVALU[.ARGNODE[VALTYPE]];
BC	 
BC	 	%(***IF THE EXPRESSION IS A SCALER VARIABLE***)%
BIFARGNODOPRCLSEXOPWDEQLDATAOPC	 	IF .ARGNODE[OPRCLS] EQL DATAOPR
BTHENC	 	THEN
BBEGINC	 	BEGIN
BPBOPWDOTSADDARGNODIDADDRCW2RRIGHTC	 		PBOPWD[OTSADDR]_.ARGNODE[IDADDR];
BPSYMPTARGNODC	 		PSYMPTR_.ARGNODE;		!PTR TO SYMBOL TABLE ENTRY
BENDC	 	END
BC	 
BELSEC	 	ELSE
BC	 	%(***IF THE EXPRESSION IS AN ARRAYREF****)%
BIFARGNODOPRCLSEXOPWDEQLARRAYRC	 	IF .ARGNODE[OPRCLS] EQL ARRAYREF
BTHENC	 	THEN
BBEGINC	 	BEGIN
BPBOPWDOTSMEMARGNODTARGTMC	 		PBOPWD[OTSMEMRF]_.ARGNODE[TARGTMEM];
BPSYMPTARGNODARG1PTLEFTC	 		PSYMPTR_.ARGNODE[ARG1PTR];
BC	 
BC	 		%(***FOR A FORMAL ARRAY, WILL NOT WANT TO RELOCATE THE ADDRESS
BC	 			FIELD OF THE ARGUMENT - SINCE WILL HAVE COMPUTED THE ARRAY BASE
BC	 			ADDRESS INTO THE SUBSCRIPT***)%
BIFPSYMPTFORMLFEXOPWDTHENPSYMPTPBF2NOC	 		IF .PSYMPTR[FORMLFLG] THEN PSYMPTR_PBF2NOSYM;
BENDC	 	END
BC	 
BELSEC	 	ELSE
BC	 	%(***IF THE VAL OF THE EXPRESSION IS IN A REG***)%
BIFARGNODINREGFC	 	IF .ARGNODE[INREGFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BPBOPWDOTSADDARGNODTARGADC	 		PBOPWD[OTSADDR]_.ARGNODE[TARGADDR];
BPSYMPTPBF2NOC	 		PSYMPTR_PBF2NOSYM;
BENDC	 	END
BLISS  V. 1.0-2.12	13-JUN-73  18:05:06	CGSTMNT	CGSTM1.BLI		PAGE 48-2

BC	 
BELSEC	 	ELSE
BC	 	%(***IF THE VAL OF THE EXPRESSION IS IN A TEMP***)%
BBEGINC	 	BEGIN
BPSYMPTARGNODTARGADC	 		PSYMPTR_.ARGNODE[TARGADDR];
BPBOPWDOTSADDPSYMPTIDADDRCW2RRIGHTC	 		PBOPWD[OTSADDR]_.PSYMPTR[IDADDR];
BPBOPWDOTSINDARGNODTARGIFC	 		PBOPWD[OTSIND]_.ARGNODE[TARGIF];
BENDC	 	END;
BC	 
BOBUFFAC	 	OBUFFA();
BENDC	 END;
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:05:17	CGSTMNT	CGSTM1.BLI		PAGE 49-1

BC	 
BC	 
BGLOBALDBROUTINCGSLISC	 GLOBAL ROUTINE CGSLIST=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE AN ARGUMENT BLOCK FOR AN SLIST CALL
BC	 	IN AN IOLIST.
BC	 	CALLED WITH THE GLOBAL POINTING TO THE SLISTCALL NODE.
BC	 	THIS ROUTINE IS USED ONLY FOR THE SLISTS GENERATED BY
BC	 	PHASE 1 FOR STMNTS OF THE FORM:
BC	 		READ 11,A
BC	 	WHERE A IS AN ARRAY. 
BC	 	IN A LATER RELEASE, PHASE 2 SKELETON WILL RECOGNIZE 
BC	 	IOLISTS THAT CAN BE TRANSFORMED INTO SLISTS AND WILL FORM
BC	 	"S1LISTCALL" NODES FOR THESE SLISTS (WHICH MAY HAVE MORE THAN ONE ARRAY
BC	 	AND INCREMENTS OTHER THAN 1).
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BMAPPEXPRNPSYMPTPSYMPTC	 	MAP PEXPRNODE PSYMPTR;
BEXTERNEVALUC	 	EXTERNAL EVALU;
BC	 
BC	 	%(******OUTPUT FIRST WD OF ARGBLOCK (WD CONTAINING CODE FOR SLSIST AND COUNT)*****)%
BC	 
BC	 	%(***INIT OUTPUT WD TO 0***)%
BPBOPWDC	 	PBOPWD_0;
BC	 
BC	 	%(***SET IDN FIELD TO CODE FOR SLSIST**)%
BPBOPWDOTSIDNOTSSLIC	 	PBOPWD[OTSIDN]_OTSSLIST;
BC	 
BC	 	%(***BUILD THE WD THAT CONTAINS THE CT***)%
BBLDIOITREEPTSCALLCRIGHTC	 	BLDIOIMWD(.TREEPTR[SCALLCT]);
BC	 
BOBUFFAC	 	OBUFFA();
BC	 
BC	 	%(****OUTPUT THE 2ND WD  OF ARGBLOCK (WHICH CONTAINS THE INCREMENT 1)***)%
BPBOPWDC	 	PBOPWD_1;
BPSYMPTPBF2NOC	 	PSYMPTR_PBF2NOSYM;
BOBUFFAC	 	OBUFFA();
BC	 
BC	 	%(***OUTPUT THE 3RD WD (WHICH CONTAINS A PTR TO THE ARRAY TO BE USED)*******)%
BC	 
BC	 	%(***GET PTR TO SYMBOL TABLE ENTRY FOR THE ARRAY***)%
BPSYMPTTREEPTSCALLELEFTC	 	PSYMPTR_.TREEPTR[SCALLELEM];
BC	 
BC	 	%(***ADDRESS FOR ARGBLOCK IS ADDRESS INDICATED BY THE SYMBOL TABLE ENTRY***)%
BPBOPWDOTSADDPSYMPTIDADDRCW2RRIGHTC	 	PBOPWD[OTSADDR]_.PSYMPTR[IDADDR];
BPBOPWDOTSTYPEVALUPSYMPTVALTYPEXOPWDC	 	PBOPWD[OTSTYPE]_.EVALU[.PSYMPTR[VALTYPE]];
BC	 
BC	 	%(***SET INDIRECT BIT FOR A FORMAL ARRAY***)%
BIFPSYMPTFORMLFEXOPWDC	 	IF .PSYMPTR[FORMLFLG]
BTHENC	 	THEN
BPBOPWDOTSINDC	 	PBOPWD[OTSIND]_1;
BC	 
BOBUFFAC	 	OBUFFA();
BC	 
BC	 
BENDC	 END;
BLISS  V. 1.0-2.12	13-JUN-73  18:05:27	CGSTMNT	CGSTM1.BLI		PAGE 49-2

BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:05:27	CGSTMNT	CGSTM1.BLI		PAGE 50-1

BC	 
BC	 
BGLOBALDBROUTINBLDIOIARGNODC	 GLOBAL ROUTINE BLDIOIMWD(ARGNODE)=
BC	 %(***************************************************************************
BC	 	ROUTINE TO BUILD A WD OF AN ARGUMENT BLOCK FOR FOROTS WHEN
BC	 	THAT WORD IS TO HAVE EITHER THE FORM:
BC	 		1. INDIRECT BIT=0, IMMEDIATE CONSTANT IN RIGHT HALF
BC	 	  OR	2. INDIRECT BIT=1, PTR TO VAL IN RIGHT HALF
BC	 	CALLED WITH THE ARG:
BC	 		ARGNODE - PTR TO THE EXPRESSION NODE FOR THE VAL TO
BC	 				BE REPRESENTED
BC	 	CALLED WITH PBOPWD INITIALIZED SUCH THAT THE FIRST 9 BITS HAVE
BC	 	THE VALUE DESIRED,AND THE RIGHT 27 BITS ARE 0.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BMAPPEXPRNPSYMPTPSYMPTC	 	MAP PEXPRNODE PSYMPTR;
BMAPPEXPRNARGNODARGNODC	 	MAP PEXPRNODE ARGNODE;
BC	 
BC	 
BC	 	%(***IF THE ARG IS A CONSTANT, USE THE IMMEDIATE FORM***)%
BIFARGNODOPR1EXOPWDEQLCONSTFC	 	IF .ARGNODE[OPR1] EQL CONSTFL
BTHENC	 	THEN
BBEGINC	 	BEGIN
BPBOPWDOTSADDARGNODCONST2CW4FULLC	 		PBOPWD[OTSADDR]_.ARGNODE[CONST2];
BPSYMPTPBF2NOC	 		PSYMPTR_PBF2NOSYM;		!FLAG TO OUTMOD THAT NO SYMBOLIC
BC	 						! REPRESENTATION CAN BE USED
BENDC	 	END
BC	 
BELSEC	 	ELSE
BC	 	%(***IF ARG IS A VARIABLE, USE INDIRECT THRU ITS ADDR***)%
BIFARGNODOPRCLSEXOPWDEQLDATAOPC	 	IF .ARGNODE[OPRCLS] EQL DATAOPR
BTHENC	 	THEN
BBEGINC	 	BEGIN
BPBOPWDOTSINDC	 		PBOPWD[OTSIND]_1;
BPBOPWDOTSADDARGNODIDADDRCW2RRIGHTC	 		PBOPWD[OTSADDR]_.ARGNODE[IDADDR];
BPSYMPTARGNODC	 		PSYMPTR_.ARGNODE;		!PTR TO SYMBOL TABLE ENTRY
BENDC	 	END
BC	 
BELSEC	 	ELSE
BC	 	%(***IF ARG IS AN EXPRESSION,  USE THE TEMP IN WHICH THE VAL WAS STORED***)%
BBEGINC	 	BEGIN
BC	 		%(***IF VAL WAS LEFT IN AREG***)%
BIFARGNODINREGFC	 		IF .ARGNODE[INREGFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BPBOPWDOTSADDARGNODTARGADC	 			PBOPWD[OTSADDR]_.ARGNODE[TARGADDR];
BPBOPWDOTSINDC	 			PBOPWD[OTSIND]_1;
BPSYMPTPBF2NOC	 			PSYMPTR_PBF2NOSYM;
BENDC	 		END
BC	 
BELSEC	 		ELSE
BC	 		%(***IF VAL WAS LEFT IN A TEMP***)%
BBEGINC	 		BEGIN
BC	 			%(***GET PTR TO TEMPORARY TABLE ENTRY***)%
BPSYMPTARGNODTARGADC	 			PSYMPTR_.ARGNODE[TARGADDR];
BPBOPWDOTSADDPSYMPTIDADDRCW2RRIGHTC	 			PBOPWD[OTSADDR]_.PSYMPTR[IDADDR];
BLISS  V. 1.0-2.12	13-JUN-73  18:05:45	CGSTMNT	CGSTM1.BLI		PAGE 50-2

BPBOPWDOTSINDC	 			PBOPWD[OTSIND]_1;
BENDC	 		END;
BENDC	 	END;
BC	 
BENDC	 END;
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:05:47	CGSTMNT	CGSTM1.BLI		PAGE 51-1

BC	 
BC	 
BGLOBALDBROUTINCGSTPAC	 GLOBAL ROUTINE CGSTPAUARGS=
BC	 %(***************************************************************************
BC	 	ROUTINE TO GENERATE THE ARG BLOCK FOR A STOP/PAUSE STMNT.
BC	 	THIS BLOCK WILL HAVE THE FORM:
BC	 		-------------------------------
BC	 		!   ARGCT	!    0		!
BC	 		---------------------------------
BC	 	LABEL:	!     !TYPE !	!  ARGPTR	!
BC	 		----------------------------------
BC	 	WHERE "LABEL" IS THE ARG-BLOCK LABEL, ARGCT IS NEG ARGCT AND WILL ALWAYS
BC	 	BE -1 OR 0, TYPE IS THE VALUE TYPE OF THE ARG (LITERAL,OCTAL,INTEGER,REAL
BC	 	DOUBLE PREC, OR COMPLEX) AND IS IN BITS 9-12, AND ARGPTR PTS TO THE ARG
BC	 
BC	 	THIS ROUTINE IS CALLED WITH THE GLOBAL "CSTMNT" POINTING TO THE STOP OR
BC	 	PAUSE STMNT FOR WHICH AN ARG-BLOCK IS TO BE GENERATED.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BEXTERNEVALUC	 	EXTERNAL EVALU;			!TABLE OF EXTERNAL VALUE-TYPE CODES
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;		!GLOBAL IN WHICH THE WD TO
BC	 					! BE OUTPUT IS PASSED TO THE ROUTINE "OBUFFA"
BC	 
BMAPPEXPRNPSYMPTPSYMPTC	 	MAP PEXPRNODE PSYMPTR;		!WILL PT TO THE SYMBOL TABLE ENTRY (OR
BC	 					! CONSTANT TABLE ENTRY) FOR THE ARG OF THE STOP/PAUSE
BC	 
BC	 
BC	 	%(***IF THE STOP/PAUSE HAD NO ARG, WILL HAVE USED "ZERBLK" FOR THE
BC	 		ARG-BLOCK. SO DONT HAVE TO GENERATE ANYTHING.***)%
BIFCSTMNTPAUSIDCW3RRIGHTEQLC	 	IF .CSTMNT[PAUSIDENT] EQL 0
BTHENRETURNC	 	THEN RETURN;
BC	 
BC	 
BC	 	%(***IF THIS STMNT WAS ELIMINATED (BY FOLDING A LOG IF), DO NOT WANT TO
BC	 		GENERATE AN ARG LIST***)%
BIFCSTMNTPAUSLBCW4LLEFTEQLTHENRETURNC	 	IF .CSTMNT[PAUSLBL] EQL 0 THEN RETURN;
BC	 
BC	 
BPSYMPTCSTMNTPAUSIDCW3RRIGHTC	         PSYMPTR  _  .CSTMNT[PAUSIDENT];
BC	 
BC	 	%(***OUTPUT THE ARG-CT WD*****)%
BPSYMPTPBF2NOC	 	PSYMPTR_PBF2NOSYM;
BPBOPWDC	 	PBOPWD_(-1)^18;
BOBUFFAC	 	OBUFFA();
BC	 
BC	 	%(***ASSOCIATE THE LABEL FOR THIS ARG-LIST WITH THE 2ND WD***)%
BDEFLABCSTMNTPAUSLBCW4LLEFTC	 	DEFLAB(.CSTMNT[PAUSLBL]);
BC	 
BC	 	%(***OUTPUT THE PTR WD***)%
BPSYMPTCSTMNTPAUSIDCW3RRIGHTC	 	PSYMPTR_.CSTMNT[PAUSIDENT];
BPBOPWDC	 	PBOPWD_0;				!INIT WD TO BE OUTPUT TO 0
BPBOPWDOTSTYPEVALUPSYMPTVALTYPEXOPWDC	 	PBOPWD[OTSTYPE]_.EVALU[.PSYMPTR[VALTYPE]];	!SET TYPE FIELD OF WD TO BE OUTPUT
BPBOPWDOTSADDPSYMPTIDADDRCW2RRIGHTC	 	PBOPWD[OTSADDR]_.PSYMPTR[IDADDR];		!ADDRESS OF VAR/CONSTANT/LITERAL
BC	 							! TO BE OUTPUT
BOBUFFAC	 	OBUFFA();
BC	 
BRETURNC	 	RETURN
BLISS  V. 1.0-2.12	13-JUN-73  18:05:58	CGSTMNT	CGSTM1.BLI		PAGE 51-2

BENDC	 END;
BLISS  V. 1.0-2.12	13-JUN-73  18:05:58	CGSTMNT	CGSTM1.BLI		PAGE 52-1

BC	 
BC	 !AUTHOR: NORMA ABEL
BC	 
BC	 
BC	 !THIS FILE CONTAINS THE ROUTINES NECESSARY TO GENERATE CODE
BC	 !FOR THE I/O STATEMENTS THEMSELVES. WHERE APPROPRIATE THE ROUTINE
BC	 !CGIOLST IS CALLED TO GENERATE THE CALLS TO IOLST.
BC	 
BGLOBALDBROUTINCGMTOPC	 GLOBAL ROUTINE CGMTOP=
BBEGINC	 BEGIN
BC	 	!CALLS TO MTOP FOR ALL STATEMENTS BACKID THRU ENDFID
BC	 
BEXTERNCSTMNTCSTMNTGENLABGENLABA1LABEA1LABECGOPGECGOPGEOPDSPIOPDSPIC	 	EXTERNAL CSTMNT,GENLAB,A1LABEL,CGOPGEN,OPDSPIX;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BC	 
BEXTERNOPGMTOC	 	EXTERNAL OPGMTO;
BC	 	!FILL IN IOARGLBL FIELD
BA1LABECSTMNTIOARGLCW4LLEFTGENLABC	 	A1LABEL_CSTMNT[IOARGLBL]_GENLAB();
BOPDSPIOPGMTOC	 	OPDSPIX_OPGMTO;
BCGOPGEC	 	CGOPGEN();
BENDC	 END;
BC	 
BGLOBALDBROUTINCGENCOC	 GLOBAL ROUTINE CGENCO=
BBEGINC	 BEGIN
BC	 	!CODE GENERATION FOR ENCODE
BC	 
BEXTERNCSTMNTCSTMNTGENLABGENLABA1LABEA1LABECGOPGECGOPGEOPDSPIOPDSPIC	 	EXTERNAL CSTMNT,GENLAB,A1LABEL,CGOPGEN,OPDSPIX;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BC	 
BEXTERNCGIOLSCGIOLSOPGENCC	 	EXTERNAL CGIOLST,OPGENC;
BEXTERNTREEPTTREEPTCGETVACGETVAC	 	EXTERNAL TREEPTR,CGETVAL;
BC	 
BC	 	%(***IF THE COUNT FIELD IS AN EXPRESSION, EVALUATE IT***)%
BTREEPTCSTMNTIOCNTCW5RRIGHTC	 	TREEPTR_.CSTMNT[IOCNT];
BCGETVAC	 	CGETVAL();
BC	 
BC	 	%(***IF THE ENCODE VAR IS AN ARRAY-REF, GENERATE CODE FOR THE
BC	 		SS CALCULATION***)%
BTREEPTCSTMNTIOVARCW5LLEFTC	 	TREEPTR_.CSTMNT[IOVAR];
BCGETVAC	 	CGETVAL();
BC	 
BC	 	!FILL IN IOARGLBL FIELD
BA1LABECSTMNTIOARGLCW4LLEFTGENLABC	 	A1LABEL_CSTMNT[IOARGLBL]_GENLAB();
BOPDSPIOPGENCC	 	OPDSPIX_OPGENC;
BCGOPGEC	 	CGOPGEN();
BCGIOLSC	 	CGIOLST();
BENDC	 END;
BC	 
BGLOBALDBROUTINCGDECOC	 GLOBAL ROUTINE CGDECO=
BBEGINC	 BEGIN
BC	 	!CODE GENERATION FOR DECODE
BEXTERNCSTMNTCSTMNTGENLABGENLABA1LABEA1LABECGOPGECGOPGEOPDSPIOPDSPIC	 	EXTERNAL CSTMNT,GENLAB,A1LABEL,CGOPGEN,OPDSPIX;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BEXTERNOPGDECCGIOLSCGIOLSC	 	EXTERNAL OPGDEC,CGIOLST;
BC	 
BC	 	%(***IF THE COUNT FIELD IS AN EXPRESSION, EVALUATE IT***)%
BTREEPTCSTMNTIOCNTCW5RRIGHTC	 	TREEPTR_.CSTMNT[IOCNT];
BLISS  V. 1.0-2.12	13-JUN-73  18:06:09	CGSTMNT	CGSTM1.BLI		PAGE 52-2

BCGETVAC	 	CGETVAL();
BC	 
BC	 
BC	 	%(***IF THE DECODE ARRAY IS AN ARRAYREF - CALCULATE THE
BC	 		OFFSET***)%
BTREEPTCSTMNTIOVARCW5LLEFTC	 	TREEPTR_.CSTMNT[IOVAR];
BCGETVAC	 	CGETVAL();
BC	 
BC	 	!FILL IN IOARGLBL FIELD
BA1LABECSTMNTIOARGLCW4LLEFTGENLABC	 	A1LABEL_CSTMNT[IOARGLBL]_GENLAB();
BOPDSPIOPGDECC	 	OPDSPIX_OPGDEC;
BCGOPGEC	 	CGOPGEN();
BCGIOLSC	 	CGIOLST();
BENDC	 END;
BC	 
BGLOBALDBROUTINCGREREC	 GLOBAL ROUTINE CGRERE=
BBEGINC	 BEGIN
BC	 	!CODE GENERATION FOR REREAD
BC	 
BEXTERNCSTMNTCSTMNTGENLABGENLABA1LABEA1LABECGOPGECGOPGEOPDSPIOPDSPIC	 	EXTERNAL CSTMNT,GENLAB,A1LABEL,CGOPGEN,OPDSPIX;
BEXTERNOPGFINC	 	EXTERNAL OPGFIN;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BEXTERNCGIOLSCGIOLSOPGINC	 	EXTERNAL CGIOLST,OPGIN;
BC	 	!FILL IN IOARGLBL FIELD
BA1LABECSTMNTIOARGLCW4LLEFTGENLABC	 	A1LABEL_CSTMNT[IOARGLBL]_GENLAB();
BOPDSPIOPGINC	 	OPDSPIX_OPGIN;
BCGOPGEC	 	CGOPGEN();
BIFCSTMNTIOLISTCW6LLEFTEQLC	 	IF .CSTMNT[IOLIST]EQL 0
BTHENC	 	THEN
BBEGINC	 	BEGIN
BC	 		%(***IF HAVE NO IOLIST GENERATE A CALL TO FIN***)%
BOPDSPIOPGFINC	 		OPDSPIX_OPGFIN;
BCGOPGEC	 		CGOPGEN();
BENDC	 	END
BELSEC	 	ELSE
BCGIOLSC	 	CGIOLST();
BENDC	 END;
BC	 
BGLOBALDBROUTINCGRECNC	 GLOBAL ROUTINE CGRECNUM=
BC	 %(***************************************************************************
BC	 	TO GENERATE THE CODE TO COMPUTE THE RECORD NUMBER FOR AN IO STMNT
BC	 	THAT HAS AN EXPRESSION FOR A RECORD NUMBER (UGH!!!)
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BEXTERNCSTMNTCSTMNTC	 	EXTERNAL CSTMNT;
BMAPPEXPRNCSTMNTCSTMNTC	 	MAP PEXPRNODE CSTMNT;
BOWNPEXPRNRECNUMRECNUMC	 	OWN PEXPRNODE RECNUM;
BC	 
BIFRECNUMCSTMNTIORECOCW5RRIGHTNEQC	 	IF (RECNUM_.CSTMNT[IORECORD]) NEQ 0
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFRECNUMOPRCLSEXOPWDNEQDATAOPC	 		IF .RECNUM[OPRCLS] NEQ DATAOPR
BTHENC	 		THEN
BBEGINC	 		BEGIN
BTREEPTRECNUMC	 			TREEPTR_.RECNUM;
BCGETVAC	 			CGETVAL()
BENDC	 		END
BLISS  V. 1.0-2.12	13-JUN-73  18:06:26	CGSTMNT	CGSTM1.BLI		PAGE 52-3

BENDC	 	END
BENDC	 END;
BC	 
BGLOBALDBROUTINCGREADC	 GLOBAL ROUTINE CGREAD=
BBEGINC	 BEGIN
BC	 	!CODE GENERATION FOR ALL TYPES OF READ
BEXTERNCSTMNTCSTMNTGENLABGENLABA1LABEA1LABECGOPGECGOPGEOPDSPIOPDSPIC	 	EXTERNAL CSTMNT,GENLAB,A1LABEL,CGOPGEN,OPDSPIX;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BEXTERNCGIOLSCGIOLSOPGNLIOPGINOPGRTBOPGFINC	 	EXTERNAL CGIOLST,OPGNLI,OPGIN,OPGRTB,OPGFIN;
BLOCALBASET1T1C	 	LOCAL BASE T1;
BC	 
BC	 	!FILL IN IOARGLBL FIELD
BA1LABECSTMNTIOARGLCW4LLEFTGENLABC	 	A1LABEL_CSTMNT[IOARGLBL]_GENLAB();
BC	 
BC	 	%(***IF THERE AN EXPRESSION TO BE EVALUATED FOR THE RECORD NUMBER (UGH!!!)
BC	 		GENERATE CODE TO EVALUATE IT***)%
BCGRECNC	 	CGRECNUM();
BC	 
BIFCSTMNTIOLISTCW6LLEFTEQLTHENC	 	IF .CSTMNT[IOLIST] EQL 0 THEN
BC	 
BBEGINC	 		BEGIN
BT1CSTMNTIONAMECW6RRIGHTC	 			T1_.CSTMNT[IONAME];
BIFT1OPRCLSEXOPWDNEQSTATEMANDC	 			IF .T1[OPRCLS] NEQ STATEMENT AND	!IONAME ==IOFORM
BT1IDATTRNAMNAMTHENC	 			 .T1[IDATTRIBUT(NAMNAM)] THEN
BC	 
BOPDSPIOPGNLIC	 			   OPDSPIX_OPGNLI	!NAME LIST READ
BC	 
BELSEC	 			ELSE
BIFCSTMNTIOFORMCW6RRIGHTEQLC	 			IF .CSTMNT[IOFORM] EQL 0
BTHENOPDSPIOPGRTBC	 			THEN OPDSPIX_OPGRTB	!BINARY READ
BELSEC	 			ELSE
BC	 
BOPDSPIOPGINC	 			   OPDSPIX_OPGIN;	!FORMATED READ
BCGOPGEC	 			CGOPGEN();
BC	 
BOPDSPIOPGFINC	 			OPDSPIX_OPGFIN;
BCGOPGEC	 			CGOPGEN();
BC	 
BENDELSEC	 		END ELSE
BBEGINC	 		BEGIN
BIFCSTMNTIOFORMCW6RRIGHTEQLTHENC	 			IF .CSTMNT[IOFORM] EQL 0 THEN
BC	 
BOPDSPIOPGRTBC	 			   OPDSPIX_OPGRTB
BELSEC	 			ELSE
BOPDSPIOPGINC	 			   OPDSPIX_OPGIN;
BCGOPGEC	 			CGOPGEN();
BCGIOLSC	 			CGIOLST();
BENDC	 		END;
BENDC	 END;
BC	 
BC	 
BGLOBALDBROUTINCGWRITC	 GLOBAL ROUTINE CGWRIT=
BBEGINC	 BEGIN
BC	 	!CODE GENERATION FOR WRITE STATEMENTS OF ALL FORMS
BC	 
BEXTERNCGOPGECGOPGEOPDSPIOPDSPIA1LABEA1LABEOPGOUTOPGNLOOPGWTBGENLABGENLABC	 	EXTERNAL CGOPGEN,OPDSPIX,A1LABEL,OPGOUT,OPGNLO,OPGWTB,GENLAB,
BCGIOLSCGIOLSCSTMNTCSTMNTOPGFINC	 		CGIOLST,CSTMNT,OPGFIN;
BLISS  V. 1.0-2.12	13-JUN-73  18:06:57	CGSTMNT	CGSTM1.BLI		PAGE 52-4

BC	 
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BC	 
BLOCALBASET1T1C	 	LOCAL BASE T1;
BC	 
BC	 		!FILL IN IOARGLBL FIELD
BC	 
BA1LABECSTMNTIOARGLCW4LLEFTGENLABC	 		A1LABEL_CSTMNT[IOARGLBL]_GENLAB();
BC	 
BC	 	%(***IF THERE AN EXPRESSION TO BE EVALUATED FOR THE RECORD NUMBER (UGH!!!)
BC	 		GENERATE CODE TO EVALUATE IT***)%
BCGRECNC	 	CGRECNUM();
BC	 
BC	 
BIFCSTMNTIOLISTCW6LLEFTEQLTHENC	 		IF .CSTMNT[IOLIST] EQL 0 THEN
BC	 
BBEGINC	 		BEGIN
BT1CSTMNTIONAMECW6RRIGHTC	 			T1_.CSTMNT[IONAME];
BIFT1OPRCLSEXOPWDNEQSTATEMANDC	 			IF .T1[OPRCLS] NEQ STATEMENT AND
BT1IDATTRNAMNAMTHENC	 			 .T1[IDATTRIBUT(NAMNAM)] THEN
BOPDSPIOPGNLOC	 			OPDSPIX_OPGNLO
BC	 
BELSEC	 			ELSE
BC	 
BOPDSPIOPGOUTC	 			   OPDSPIX_OPGOUT;
BCGOPGEC	 			CGOPGEN();
BC	 
BOPDSPIOPGFINC	 			OPDSPIX_OPGFIN;
BCGOPGEC	 			CGOPGEN();
BENDELSEC	 		END ELSE
BBEGINC	 		BEGIN
BC	 
BIFCSTMNTIOFORMCW6RRIGHTEQLTHENC	 		IF .CSTMNT[IOFORM] EQL 0 THEN
BOPDSPIOPGWTBC	 		   OPDSPIX_OPGWTB
BELSEC	 		ELSE
BOPDSPIOPGOUTC	 		   OPDSPIX_OPGOUT;
BCGOPGEC	 			CGOPGEN();
BCGIOLSC	 			CGIOLST();
BENDC	 		END;
BENDC	 END;
BC	 
BGLOBALDBROUTINCGOPENC	 GLOBAL ROUTINE CGOPEN=
BBEGINC	 BEGIN
BC	 	!CODE GENERATION FOR THE CALL TO OPEN.
BC	 
BEXTERNCGOPGECGOPGEOPDSPIOPDSPIA1LABEA1LABEGENLABGENLABOPGOPEC	 	EXTERNAL CGOPGEN,OPDSPIX,A1LABEL,GENLAB,OPGOPE;
BEXTERNCSTMNTCSTMNTMAPBASECSTMNTCSTMNTC	 	EXTERNAL CSTMNT;  MAP BASE CSTMNT;
BC	 
BC	 	!FILL IN IOARGLBL FIELD
BC	 
BA1LABECSTMNTIOARGLCW4LLEFTGENLABC	 	A1LABEL_CSTMNT[IOARGLBL]_GENLAB();
BC	 
BOPDSPIOPGOPEC	 	OPDSPIX_OPGOPE;
BCGOPGEC	 	CGOPGEN();
BENDC	 END;
BC	 
BGLOBALDBROUTINCGRELSC	 GLOBAL ROUTINE CGRELS=
BLISS  V. 1.0-2.12	13-JUN-73  18:07:03	CGSTMNT	CGSTM1.BLI		PAGE 52-5

BBEGINC	 BEGIN
BC	 	!CODE GENERATION FOR RELAEASE STATEMENT
BC	 
BEXTERNCSTMNTCSTMNTCGOPGECGOPGEOPDSPIOPDSPIA1LABEA1LABEOPGRELOPGRELGENLABGENLABC	 	EXTERNAL CSTMNT,CGOPGEN,OPDSPIX,A1LABEL,OPGREL,GENLAB;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BC	 	!FILL IN IOARGLBL FIELD
BC	 
BA1LABECSTMNTIOARGLCW4LLEFTGENLABC	 	A1LABEL_CSTMNT[IOARGLBL]_GENLAB();
BOPDSPIOPGRELC	 	OPDSPIX_OPGREL;
BCGOPGEC	 	CGOPGEN();
BENDC	 END;
BC	 
BGLOBALDBROUTINCGFINDC	 GLOBAL ROUTINE CGFIND=
BBEGINC	 BEGIN
BC	 	!CODE GENERATION FOR FIND
BC	 
BEXTERNCGOPGECGOPGECSTMNTCSTMNTA1LABEA1LABEGENLABGENLABOPDSPIOPDSPIOPGFNDC	 	EXTERNAL CGOPGEN,CSTMNT,A1LABEL,GENLAB,OPDSPIX,OPGFND;
BC	 
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BC	 	!FILL IN IOARGLBL FIELD
BA1LABECSTMNTIOARGLCW4LLEFTGENLABC	 	A1LABEL_CSTMNT[IOARGLBL]_GENLAB();
BC	 
BC	 	%(***IF THERE AN EXPRESSION TO BE EVALUATED FOR THE RECORD NUMBER (UGH!!!)
BC	 		GENERATE CODE TO EVALUATE IT***)%
BCGRECNC	 	CGRECNUM();
BC	 
BOPDSPIOPGFNDC	 	OPDSPIX_OPGFND;
BCGOPGEC	 	CGOPGEN();
BENDC	 END;
BC	 
BGLOBALDBROUTINCGCLOSC	 GLOBAL ROUTINE CGCLOS=
BBEGINC	 BEGIN
BC	 	!CODE GENERATION FOR CLOSE STATEMENT
BC	 
BEXTERNCSTMNTCSTMNTGENLABGENLABA1LABEA1LABEOPDSPIOPDSPICGOPGECGOPGEOPGCLOC	 	EXTERNAL CSTMNT,GENLAB,A1LABEL,OPDSPIX,CGOPGEN,OPGCLO;
BC	 
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BC	 
BC	 	!FILL IN IOARGLBL FIELD
BC	 
BA1LABECSTMNTIOARGLCW4LLEFTGENLABC	 	A1LABEL_CSTMNT[IOARGLBL]_GENLAB();
BC	 
BOPDSPIOPGCLOC	 	OPDSPIX_OPGCLO;
BCGOPGEC	 	CGOPGEN();
BENDC	 END;
BC	 
BMACRODBC	 MACRO
BIOWHOLC	 	IOWHOLE=0,7,0,36$,
BOPENFFC	 	OPENFFIELD=0,33,3$,
BOPENGFC	 	OPENGFIELD=0,27,5$,
BOPENCOC	 	OPENCODE=0,0,18,18$,
BOPENARC	 	OPENARG=0,0,0,18$,
BUTILLOC	 	UTILLOW=BACKID$,
BUTILHIC	 	UTILHI=ENDFID$;
BGLOBALROUTINCGDECAC	 GLOBAL ROUTINE	CGDECARGS=
BC	 %(***************************************************************************
BC	 	TO GENERATE THE ARG BLOCK FOR AN ENCODE OR DECODE STATEMENT
BLISS  V. 1.0-2.12	13-JUN-73  18:07:09	CGSTMNT	CGSTM1.BLI		PAGE 52-6

BC	 	ARG BLOCK HAS THE FORM:
BC	 		--------------------------------------------------
BC	 		!	-6		!			!
BC	 		--------------------------------------------------
BC	 		!	!TYPE	!I! X	! CHAR CT (IMMED)	!
BC	 		--------------------------------------------------
BC	 		!	!TYPE	!I! X	!  END=			!
BC	 		--------------------------------------------------
BC	 		!	!TYPE	!I! X	!  ERR=			!
BC	 		--------------------------------------------------
BC	 		!	!TYPE	!I! X	!  FORMAT ADDR		!
BC	 		--------------------------------------------------
BC	 		!	!TYPE	!I! X	!  FORMAT SIZE(IMMED)	!
BC	 		--------------------------------------------------
BC	 		!	!TYPE	!I! X	!   VAR ARRAY ADDR	!
BC	 		--------------------------------------------------
BC	 	WHERE THE ARGLIST PTR POINTS TO THE WORD CONTAINING THE CHAR CT (IE
BC	 	THE -6 IS IN THE WD PRECEEDING THE ARG PTR)
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BEXTERNIOIMMEIOPTRC	 	EXTERNAL IOIMMED,IOPTR;
BEXTERNPBOPWDPBOPWDCSTMNTCSTMNTPSYMPTPSYMPTOBUFFOBUFFC	 	EXTERNAL PBOPWD,CSTMNT,PSYMPTR,OBUFF;
BEXTERNIOENDEIOFORMEVALUC	 	EXTERNAL IOENDERR,IOFORMAT,EVALU;
BMAPPEXPRNCSTMNTCSTMNTC	 	MAP PEXPRNODE CSTMNT;		!ENCODE OR DECODE STMNT FOR WHICH ARG BLOCK
BC	 					! IS TO BE GENERATED
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BC	 
BOWNPEXPRNENCARRENCARRC	 	OWN PEXPRNODE ENCARRAY;		!ARRAY TO BE INPUT OR OUTPUT
BOWNPEXPRNCHARCTCHARCTC	 	OWN PEXPRNODE CHARCT;		!NUMBER OF CHARS TO BE PROCESSED
BC	 
BENCARRCSTMNTIOVARCW5LLEFTC	 	ENCARRAY_.CSTMNT[IOVAR];
BCHARCTCSTMNTIOCNTCW5RRIGHTC	 	CHARCT_.CSTMNT[IOCNT];
BC	 
BC	 	%(***OUTPUT WD CONTAINING THE CT OF WDS IN THE ARGLIST***)%
BPBOPWDC	 	PBOPWD_(-6)^18;		!CT IN LEFT HALF WD
BPSYMPTPBF2NOC	 	PSYMPTR_PBF2NOSYM;
BOBUFFAC	 	OBUFFA();
BC	 
BC	 	%(***ASSOCIATE THE LABEL ON THE ARGLIST WITH THIS LOC***)%
BDEFLABCSTMNTIOARGLCW4LLEFTC	 	DEFLAB(.CSTMNT[IOARGLBL]);
BC	 
BC	 
BC	 
BC	 
BC	 	%(***SET UP THE COUNT OF CHARS TO BE PROCESSED IN THE 1ST WD OF THE ARG BLOCK***)%
BIOIMMECHARCTC	 	IOIMMED(.CHARCT);
BC	 
BIOENDEC	 	IOENDERR();		!OUTPUT THE END/ERROR WORDS OF THE ARG BLOCK
BC	 
BIOFORMC	 	IOFORMAT();		!OUTPUT THE FORMAT WDS OF THE ARG BLOCK
BC	 
BC	 	%(***OUTPUT A PTR TO THE ARRAY***)%
BIOPTRENCARRC	 	IOPTR(.ENCARRAY);
BENDC	 END;
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:07:14	CGSTMNT	CGSTM1.BLI		PAGE 52-7

BROUTINDBIO1ARGNUMBC	 ROUTINE	IO1ARG(NUMB)=
BC	 %(*********************
BC	 	ROUTINE TO OUTPUT 2 WDS OF THE FORM:
BC	 		--------------------------------------------------
BC	 		!	-CT		!			!
BC	 		-------------------------------------------------
BC	 	 LAB:	!	! TYPE	!I! X	!	UNIT		!
BC	 		---------------------------------------------------
BC	 	WHERE "UNIT" IS IMMEDIATE
BC	 ***********************)%
BBEGINC	 BEGIN
BOWNBASECNTINFCNTINFC	 	OWN 	BASE	CNTINFO;
BEXTERNPBOPWDPBOPWDPSYMPTPSYMPTOBUFFOBUFFCSTMNTCSTMNTC	 	EXTERNAL	PBOPWD,PSYMPTR,OBUFF,CSTMNT;
BMAPBASECSTMNTCSTMNTC	 	MAP	BASE	CSTMNT;
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE	PBOPWD;
BC	 
BC	 	%(***OUTPUT MINUS THE CT OF WDS IN THE ARG BLOCK***)%
BPBOPWDNUMBC	 	PBOPWD_(-.NUMB)^18;	!CT IN LEFT HALF WD
BPSYMPTPBF2NOC	 	PSYMPTR_PBF2NOSYM;
BOBUFFAC	 	OBUFFA();
BC	 
BC	 	%(***ASSOCIATE THE LABEL ON THE ARG BLOCK WITH THIS LOC***)%
BDEFLABCSTMNTIOARGLCW4LLEFTC	 	DEFLAB(.CSTMNT[IOARGLBL]);
BC	 
BC	 
BPBOPWDC	 	PBOPWD_0;		!INIT WD TO BE OUTPUT
BC	 
BCNTINFCSTMNTIOUNITCW5LLEFTC	 	CNTINFO_.CSTMNT[IOUNIT];
BIFCNTINFOPR1EXOPWDEQLCONSTFTHENC	 	IF .CNTINFO[OPR1] EQL CONSTFL THEN
BBEGINC	 	BEGIN
BPSYMPTPBF2NOC	 		PSYMPTR_PBF2NOSYM;
BPBOPWDOTSUNICNTINFCONST2CW4FULLC	 		PBOPWD[OTSUNIT]_.CNTINFO[CONST2];	!IT HAD BETTER BE AN
BC	 							!IMMEDIATE INTEGER
BENDELSEC	 	END ELSE
BBEGINC	 	BEGIN
BPSYMPTIFCNTINFOPRCLSEXOPWDEQLREGCONTHENC	 		PSYMPTR_(IF .CNTINFO[OPRCLS] EQL REGCONTENTS THEN
BPBF2NOC	 			PBF2NOSYM
BELSEC	 			ELSE
BCNTINFC	 			.CNTINFO);
BPBOPWDOTSUNICNTINFIDADDRCW2RRIGHTC	 		PBOPWD[OTSUNIT]_.CNTINFO[IDADDR];
BPBOPWDPBOPWDORINDBITC	 		PBOPWD_.PBOPWD OR INDBIT;
BENDC	 	END;
BC	 
BPBOPWDOTSTYPIMMEDTC	 	PBOPWD[OTSTYPE]_IMMEDTYPE;	!SET TYPE CODE INDICATING THAT THIS ARG
BC	 					! SHOULD BE REFERENCED IMMEDIATE
BC	 
BOBUFFAC	 	OBUFFA();
BPBOPWDC	 	PBOPWD_0;
BENDC	 END;
BGLOBALDBROUTINIOENDEC	 GLOBAL ROUTINE IOENDERR=
BC	 %(***********************
BC	 	OUTPUT THE END= AND ERR-= WORDS OF AN IO ARG BLOCK.
BC	 	THESE 2 WDS HAVE THE FORM:
BC	 		---------------------------------------------------------
BC	 		!	! TYPE	!I! X	!	IOEND			!
BC	 		---------------------------------------------------------
BC	 		!	! TYPE	!I! X	!	IOERR			!
BLISS  V. 1.0-2.12	13-JUN-73  18:07:21	CGSTMNT	CGSTM1.BLI		PAGE 52-8

BC	 		---------------------------------------------------------
BC	 **************************)%
BBEGINC	 BEGIN
BEXTERNPBOPWDPBOPWDOBUFFAOBUFFAPSYMPTPSYMPTCSTMNTCSTMNTC	 	EXTERNAL PBOPWD,OBUFFA,PSYMPTR,CSTMNT;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BC	 	%(***OUTPUT THE "END" WD***)%
BPBOPWDC	 	PBOPWD_0;
BIFCSTMNTIOENDCW7RRIGHTEQLC	 	IF .CSTMNT[IOEND] EQL 0
BTHENPSYMPTPBF2NOC	 	THEN PSYMPTR_PBF2NOSYM
BELSEC	 	ELSE
BBEGINC	 	BEGIN
BPBOPWDOTSTYPADDRTYC	 		PBOPWD[OTSTYPE]_ADDRTYPE;	!TYPE IS "ADDRESS"
BPBOPWDOTSADDCSTMNTIOENDCW7RRIGHTC	 		PBOPWD[OTSADDR]_.CSTMNT[IOEND];
BPSYMPTPBFLABC	 		PSYMPTR_PBFLABREF;
BENDC	 	END;
BOBUFFAC	 	OBUFFA();
BC	 
BC	 	%(***OUTPUT THE "ERROR" WD***)%
BPBOPWDC	 	PBOPWD_0;
BIFCSTMNTIOERRCW7LLEFTEQLC	 	IF .CSTMNT[IOERR] EQL 0
BTHENPSYMPTPBF2NOC	 	THEN PSYMPTR_PBF2NOSYM
BELSEC	 	ELSE
BBEGINC	 	BEGIN
BPBOPWDOTSTYPADDRTYC	 		PBOPWD[OTSTYPE]_ADDRTYPE;	!TYPE IS "ADDRESS"
BPBOPWDOTSADDCSTMNTIOERRCW7LLEFTC	 		PBOPWD[OTSADDR]_.CSTMNT[IOERR];
BPSYMPTPBFLABC	 		PSYMPTR_PBFLABREF;
BENDC	 	END;
BOBUFFAC	 	OBUFFA();
BC	 
BPBOPWDC	 	PBOPWD_0;
BENDC	 END;
BC	 
BC	 
BGLOBALDBROUTINIOFORMC	 GLOBAL ROUTINE IOFORMAT=
BC	 %(********************
BC	 	ROUTINE TO OUTPUT THE 2 FORMAT WDS OF AN IO ARG-BLOCK
BC	 	THESE WDS HAVE THE FORM:
BC	 		----------------------------------------------------------
BC	 		!	! TYPE	!I! X	!	FORMAT ADDR		!
BC	 		----------------------------------------------------------
BC	 		!	! TYPE	!I! X!	!	FORMAT SIZE		!
BC	 		----------------------------------------------------------
BC	 ************************)%
BBEGINC	 BEGIN
BEXTERNENTRYENTRYERROUTC	 	EXTERNAL ENTRY,ERROUT;
BEXTERNCSTMNTCSTMNTPBOPWDPBOPWDOBUFFAOBUFFAPSYMPTPSYMPTC	 	EXTERNAL CSTMNT,PBOPWD,OBUFFA,PSYMPTR;
BEXTERNEVALUC	 	EXTERNAL EVALU;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BMAPPEXPRNPSYMPTPSYMPTC	 	MAP PEXPRNODE PSYMPTR;
BOWNBASETTFORMATC	 	OWN BASE T:FORMATP;
BFORMATCSTMNTIOFORMCW6RRIGHTC	 	FORMATP_.CSTMNT[IOFORM];
BC	 	!IOSTATEMENT CONTAINS POINTER TO LABEL TABLES
BC	 	!OR VARIABLE
BC	 
BPBOPWDC	 	PBOPWD_0;
BLISS  V. 1.0-2.12	13-JUN-73  18:07:31	CGSTMNT	CGSTM1.BLI		PAGE 52-9

BC	 
BIFFORMATOPRCLSEXOPWDEQLLABOPC	 	IF .FORMATP[OPRCLS] EQL LABOP
BTHENC	 	 THEN
BC	 	%(***IF FORMAT IS A STMNT- HAVE A PTR TO THE LABEL TABLE ENTRY FOR ITS LABEL***)%
BBEGINC	 	BEGIN
BFORMATFORMATSNHDRCW3LLEFTC	 		FORMATP_.FORMATP[SNHDR];
BC	 
BC	 		%(***IF THE STMNT REFERENCED IS NOT A FORMAT STMNT, GIVE AN ERROR MESSAGE.***)%
BIFFORMATSRCIDNEQFORMIDC	 		IF .FORMATP[SRCID] NEQ FORMID
BTHENC	 		THEN
BBEGINC	 		BEGIN
BENTRYFORMATSRCISNCW0LLEFTC	 			ENTRY[1]_.FORMATP[SRCISN];	!ISN OF THE STMNT BEING
BC	 							! USED ERRONEOUSLY AS A FORMAT
BERROUTC	 			ERROUT(83);
BC	 
BC	 			%(***PUT OUT 2 WDS OF 0 FOR THE FORMAT WDS***)%
BZIPOUTC	 			ZIPOUT;
BZIPOUTC	 			ZIPOUT;
BC	 
BRETURNC	 			RETURN;
BENDC	 		END;
BC	 
BC	 
BC	 		%(***OUTPUT THE FORMAT ADDRESS WD***)%
BPBOPWDOTSADDFORMATFORADDCW4RRIGHTC	 		PBOPWD[OTSADDR]_.FORMATP[FORADDR];
BPBOPWDOTSTYPADDRTYC	 		PBOPWD[OTSTYPE]_ADDRTYPE;		!TYPE FIELD EQL TO "ADDRESS"
BC	 							! INDICATES THAT FORMAT IS NOT 
BC	 							! AN ARRAY
BPSYMPTPBFFORC	 		PSYMPTR_PBFFORMAT;
BOBUFFAC	 		OBUFFA();
BC	 
BC	 		%(***OUTPUT THE FORMAT SIZE WD***)%
BPBOPWDFORMATFORSIZCW4LLEFTC	 		PBOPWD_.FORMATP[FORSIZ];
BPBOPWDOTSTYPIMMEDTC	 		PBOPWD[OTSTYPE]_IMMEDTYPE;	!SIZE IS REFERENCED IMMED
BPSYMPTPBF2NOC	 		PSYMPTR_PBF2NOSYM;
BOBUFFAC	 		OBUFFA();
BENDC	 	END
BELSEC	 	ELSE
BC	 	%(***IF FORMAT IS AN ARRAY, HAVE A PTR TO THE SYMBOL TABLE ENTRY FOR THE ARRAY NAME***)%
BBEGINC	 	BEGIN
BC	 		%(***OUTPUT THE FORMAT ADDRESS WD - IF THE ARRAY IS A FORMAL SHOULD
BC	 			SET THE INDIRECT BIT***)%
BPBOPWDOTSADDFORMATIDADDRCW2RRIGHTC	 		PBOPWD[OTSADDR]_.FORMATP[IDADDR];	!ADDRESS OF THE ARRAY
BIFFORMATFORMLFEXOPWDTHENPBOPWDOTSINDC	 		IF .FORMATP[FORMLFLG] THEN PBOPWD[OTSIND]_1;
BPBOPWDOTSTYPEVALUFORMATVALTYPEXOPWDC	 		PBOPWD[OTSTYPE]_.EVALU[.FORMATP[VALTYPE]];	!TYPE OF THE ARRAY
BPSYMPTFORMATC	 		PSYMPTR_.FORMATP;			!PTR TO THE SYMBOL TABLE ENTRY
BC	 							! FOR THE ARRAY
BOBUFFAC	 		OBUFFA();
BC	 
BC	 		%(***OUTPUT THE FORMAT SIZE WORD. IT WILL BE REFERENCED IMMED, HENCE IF
BC	 			THE ARRAY SIZE IS VARIABLE, SET THE INDIRECT BIT***)%
BPBOPWDC	 		PBOPWD_0;
BTFORMATIDDIMCW0LLEFTC	 		T_.FORMATP[IDDIM];		!GET PTR TO DIMENSION TABLE ENTRY
BC	 
BIFTADJDIMC	 		IF .T[ADJDIMFLG]
BTHENC	 		THEN
BC	 		%(***IF THE ARRAY IS ADJUSTABLY DIMENSIONED***)%
BLISS  V. 1.0-2.12	13-JUN-73  18:07:41	CGSTMNT	CGSTM1.BLI		PAGE 52-10

BBEGINC	 		BEGIN
BPSYMPTTARASIZRIGHTC	 			PSYMPTR_.T[ARASIZ];		!PTR TO THE SYM TAB ENTRY FOR THE
BC	 							! TMP THAT HOLDS THE ARRAY SIZE
BPBOPWDOTSADDPSYMPTIDADDRCW2RRIGHTC	 			PBOPWD[OTSADDR]_.PSYMPTR[IDADDR];
BPBOPWDOTSINDC	 			PBOPWD[OTSIND]_1;
BENDC	 		END
BELSEC	 		ELSE
BBEGINC	 		BEGIN
BPBOPWDOTSADDTARASIZRIGHTC	 			PBOPWD[OTSADDR]_.T[ARASIZ];	!THE CONSTANT FOR ARRAY SIZE
BPSYMPTPBF2NOC	 			PSYMPTR_PBF2NOSYM;
BENDC	 		END;
BPBOPWDOTSTYPIMMEDTC	 		PBOPWD[OTSTYPE]_IMMEDTYPE;	!IMDICATING TO REFERENCE IMMED
BOBUFFAC	 		OBUFFA();
BENDC	 	END;
BPBOPWDC	 	PBOPWD_0;
BENDC	 END;
BGLOBALDBROUTINIOPTREXPRC	 GLOBAL ROUTINE IOPTR(EXPR)=
BBEGINC	 BEGIN
BC	 	!OUTPUT A WORD OF THE FORM
BC	 	!
BC	 	!
BC	 	!-----------------------------------------------!
BC	 	!		!TYPE !I!  X  !  ADDRESS	!
BC	 	!-----------------------------------------------!
BC	 	!
BC	 	!
BEXTERNCSTMNTCSTMNTPBOPWDPBOPWDOBUFFAOBUFFAPSYMPTPSYMPTEVALUC	 	EXTERNAL CSTMNT,PBOPWD,OBUFFA,PSYMPTR,EVALU;
BMAPPEXPRNPSYMPTPSYMPTC	 	MAP PEXPRNODE PSYMPTR;
BMAPBASECSTMNTCSTMNTEXPRC	 	MAP BASE CSTMNT:EXPR;
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BC	 
BC	 	%(***FILL IN TYPE-CODE FIELD OF WD TO BE OUTPUT***)%
BPBOPWDOTSTYPEVALUEXPRVALTYPEXOPWDC	 	PBOPWD[OTSTYPE]_.EVALU[.EXPR[VALTYPE]];
BC	 
BC	 
BC	 	%(***FILL IN PTR TO THE VALUE TO BE OUTPUT. THIS PTR IS BUILT DIFFERENTLY
BC	 		DEPENDING ON THE OPERATOR-CLASS OF THE EXPRESSION NODE***)%
BSELECTEXPROPRCLSEXOPWDOFNSETC	 	SELECT .EXPR[OPRCLS] OF NSET
BDATAOPBEGINC	 DATAOPR:  BEGIN
BPBOPWDOTSADDEXPRIDADDRCW2RRIGHTC	 		PBOPWD[OTSADDR]_.EXPR[IDADDR];
BIFEXPROPERSPEXOPWDEQLFORMLATHENC	 		IF .EXPR[OPERSP] EQL FORMLARRAY THEN
BPBOPWDPBOPWDORINDBITC	 		PBOPWD_.PBOPWD OR INDBIT;
BPSYMPTEXPRC	 		PSYMPTR_.EXPR;
BENDC	 	END;
BARRAYRBEGINC	 ARRAYREF:  BEGIN
BOWNPEXPRNARRSYMARRSYMC	 		OWN PEXPRNODE ARRSYMENTRY;	!SYMBOL TABLE ENTRY FOR THE ARRAY NAME
BPBOPWDOTSMEMEXPRTARGTMC	 		PBOPWD[OTSMEMRF]_.EXPR[TARGTMEM];	!INDEX,ADDR AND INDIRECT FIELDS
BARRSYMEXPRARG1PTLEFTC	 		ARRSYMENTRY_.EXPR[ARG1PTR];
BPSYMPTIFARRSYMFORMLFEXOPWDC	 		PSYMPTR_(IF .ARRSYMENTRY[FORMLFLG]	!IF ARRAY IS A FORMAL THEN
BTHENPBF2NOC	 			THEN PBF2NOSYM			! ADDR WILL NOT BE RELOCATED
BELSEARRSYMC	 			ELSE .ARRSYMENTRY);
BENDC	 	END;
BOTHERWBEGINC	 OTHERWISE:  BEGIN
BC	 		%(***SET INDEX AND INDIRECT BITS OF THE OUTPUT WD FROM THE TARGET OF THE EXPR***)%
BPBOPWDPBOPWDGETTXFEXPRTARGETWHOLEANDC	 		PBOPWD_.PBOPWD+GETTXFI(EXPR);
BC	 
BC	 		%(***IF THE TARGET-MEMREF IS USING AN AC AS A CORE LOCATION THEN
BLISS  V. 1.0-2.12	13-JUN-73  18:07:57	CGSTMNT	CGSTM1.BLI		PAGE 52-11

BC	 			THERE IS NO SYMBOLIC REPRESENTATION***)%
BIFEXPRINREGFC	 		IF .EXPR[INREGFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BPBOPWDOTSADDEXPRTARGTAC	 			PBOPWD[OTSADDR]_.EXPR[TARGTAC];
BPSYMPTPBF2NOC	 			PSYMPTR_PBF2NOSYM
BENDC	 		END
BELSEC	 		ELSE
BC	 		%(***IF THE VAL HAS BEEN STORED IN A TEMPORARY***)%
BBEGINC	 		BEGIN
BPSYMPTEXPRTARGADC	 			PSYMPTR_.EXPR[TARGADDR];
BPBOPWDOTSADDPSYMPTIDADDRCW2RRIGHTC	 			PBOPWD[OTSADDR]_.PSYMPTR[IDADDR]
BENDC	 		END;
BENDC	 	END;
BC	 
BTESNC	 	TESN;
BC	 
BOBUFFAC	 	OBUFFA();
BPBOPWDC	 	PBOPWD_0;
BENDC	 END;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:08:05	CGSTMNT	CGSTM1.BLI		PAGE 53-1

BC	 
BGLOBALDBROUTINIOIMMEEXPRC	 GLOBAL ROUTINE IOIMMED(EXPR)=
BC	 %(***************************************************************************
BC	 	OUTPUT AN IMMED-MODE FOROTS ARG FOR THE VAL OF "EXPR".
BC	 	EXPR MAY BE ANY INTEGER EXPRESSION.
BC	 	IF EXPR IS NOT A CONSTANT, THE INDIRECT BIT IN THE ARG WILL BE SET.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BEXTERNPBOPWDPBOPWDOBUFFAOBUFFAPSYMPTPSYMPTC	 	EXTERNAL PBOPWD,OBUFFA,PSYMPTR;
BMAPPEXPRNPSYMPTPSYMPTC	 	MAP PEXPRNODE PSYMPTR;
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BMAPPEXPRNEXPREXPRC	 	MAP PEXPRNODE EXPR;
BC	 
BPBOPWDC	 	PBOPWD_0;
BC	 
BC	 	%(***IF THE ARG IS NOT TYPE INTEGER OR IF THE ARG ALREADY MUST BE REFERENCED
BC	 		INDIRECT, THEN HAVE AN INTERNAL COMPILER BUG***)%
BIFEXPRVALTP1EXOPWDNEQINTEG1C	 	IF .EXPR [VALTP1] NEQ INTEG1
BTHENCGERRC	 	THEN CGERR();
BC	 
BIFEXPRTARGIFNEQC	 	IF .EXPR[TARGIF] NEQ 0
BTHENCGERRC	 	THEN CGERR();
BC	 
BC	 	%(***SET TYPE CODE FIELD TO "IMMEDIATE-TYPE"***)%
BPBOPWDOTSTYPIMMEDTC	 	PBOPWD[OTSTYPE]_IMMEDTYPE;
BC	 
BC	 
BC	 	%(***HOW THE PTR IS TO BE BUILT DEPENDS ON THE OPERATOR OF THE EXPRESSION***)%
BSELECTEXPROPRCLSEXOPWDOFNSETC	 	SELECT .EXPR[OPRCLS] OF NSET
BDATAOPBEGINC	 DATAOPR:  BEGIN
BC	 		%(***IF THE EXPRESSION IS AN INTEGER CONSTANT, PUT THE CONSTANT
BC	 			DIRECTLY IN THE ARG LIST***)%
BIFEXPROPR1EXOPWDEQLCONSTFC	 		IF .EXPR[OPR1] EQL CONSTFL
BTHENC	 		THEN
BBEGINC	 		BEGIN
BPBOPWDOTSADDEXPRCONST2CW4FULLC	 			PBOPWD[OTSADDR]_.EXPR[CONST2];
BPSYMPTPBF2NOC	 			PSYMPTR_PBF2NOSYM
BENDC	 		END
BC	 
BC	 		%(***IF THE EXPRESSION IS AN INTEGER VARIABLE - USE A PTR TO IT AND
BC	 			SET THE INDIRECT BIT***)%
BELSEC	 		ELSE
BBEGINC	 		BEGIN
BPBOPWDOTSADDEXPRIDADDRCW2RRIGHTC	 			PBOPWD[OTSADDR]_.EXPR[IDADDR];
BPBOPWDOTSINDC	 			PBOPWD[OTSIND]_1;
BPSYMPTEXPRC	 			PSYMPTR_.EXPR
BENDC	 		END;
BENDC	 	END;
BARRAYRBEGINC	 ARRAYREF:  BEGIN
BOWNPEXPRNARRSYMARRSYMC	 		OWN PEXPRNODE ARRSYMENTRY;	!SYMBOL TABLE ENTRY FOR THE ARRAY NAME
BPBOPWDOTSMEMEXPRTARGTMC	 		PBOPWD[OTSMEMRF]_.EXPR[TARGTMEM];	!INDEX AND BASE ADDR FOR THE ARRAYREF
BPBOPWDOTSINDC	 		PBOPWD[OTSIND]_1;			!SET INDIRECT BIT (SINCE ARE IMMED)
BC	 
BARRSYMEXPRARG1PTLEFTC	 		ARRSYMENTRY_.EXPR[ARG1PTR];
BPSYMPTIFARRSYMFORMLFEXOPWDC	 		PSYMPTR_(IF .ARRSYMENTRY[FORMLFLG]	!IF ARRAY IS A FORMAL THEN
BTHENPBF2NOC	 			THEN PBF2NOSYM			! ADDR WILL NOT BE RELOCATED
BELSEARRSYMC	 			ELSE .ARRSYMENTRY);
BLISS  V. 1.0-2.12	13-JUN-73  18:08:19	CGSTMNT	CGSTM1.BLI		PAGE 53-2

BENDC	 	END;
BOTHERWBEGINC	 OTHERWISE:  BEGIN
BC	 		%(***SET INDEX FIELD FROM THE TARGET OF THE EXPR***)%
BPBOPWDPBOPWDGETTXFEXPRTARGETWHOLEANDC	 		PBOPWD_.PBOPWD+GETTXFI(EXPR);
BC	 
BC	 		%(***SET THE INDIRECT BIT***)%
BPBOPWDOTSINDC	 		PBOPWD[OTSIND]_1;
BC	 
BC	 		%(***IF THE TARGET MEMREF IS USING AN AC AS A CORE LOCATION THEN
BC	 			THERE IS NO SYMBOLIC REPRESENTATION***)%
BIFEXPRINREGFC	 		IF .EXPR[INREGFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BPBOPWDOTSADDEXPRTARGTAC	 			PBOPWD[OTSADDR]_.EXPR[TARGTAC];
BPSYMPTPBF2NOC	 			PSYMPTR_PBF2NOSYM
BENDC	 		END
BELSEC	 		ELSE
BC	 		%(***IF THE VAL HAS BEEN STORED IN A TEMP***)%
BBEGINC	 		BEGIN
BPSYMPTEXPRTARGADC	 			PSYMPTR_.EXPR[TARGADDR];
BPBOPWDOTSADDPSYMPTIDADDRCW2RRIGHTC	 			PBOPWD[OTSADDR]_.PSYMPTR[IDADDR];
BENDC	 		END;
BENDC	 	END;
BC	 
BTESNC	 	TESN;
BC	 
BOBUFFAC	 	OBUFFA();
BC	 
BPBOPWDC	 	PBOPWD_0;
BENDC	 END;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:08:21	CGSTMNT	CGSTM1.BLI		PAGE 54-1

BC	 
BROUTINDBCGOPARC	 ROUTINE CGOPARGS=
BBEGINC	 BEGIN
BC	 	!GENERATE AN OPEN TYPE ARGUMENT
BC	 
BC	 
BEXTERNEVALUC	 	EXTERNAL EVALU;
BC	 
BEXTERNOBUFFOBUFFPBOPWDPBOPWDPSYMPTPSYMPTCSTMNTCSTMNTC	 	EXTERNAL OBUFF,PBOPWD,PSYMPTR,CSTMNT;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BC	 
BLOCALOPENLIARVALLARVALLC	 	LOCAL OPENLIST ARVALLST;	!LIST OF ARGS UNDER THIS OPEN STMNT
BLOCALPEXPRNARGVALARGVALC	 	LOCAL PEXPRNODE ARGVAL;		!PTR TO SYMBOL TABLE OR CONSTANT TABLE
BC	 					! ENTRY FOR THE VALUE TO BE PASSED TO FOROTS
BC	 					! FOR A GIVEN ARG
BC	 
BARVALLCSTMNTOPLSTIOLISTCW6LLEFTC	 	ARVALLST_.CSTMNT[OPLST];
BC	 
BC	 	%(***WALK THRU THE LIST OF ARGS GENERATING CODE FOR THEM***)%
BINCRIFROMTOICSTMNTOPSIZIOCNTCW5RRIGHTDOC	 	INCR I FROM 0 TO (.CSTMNT[OPSIZ]-1) DO
BBEGINC	 	BEGIN
BPBOPWDC	 		PBOPWD_0;
BPBOPWDOPENGFARVALLIOPENLCLEFTC	 		PBOPWD[OPENGFIELD]_.ARVALLST[.I,OPENLCODE];
BC	 
BC	 		%(***FOR ALL  ARGS, WILL GET THE ADDRESS OF THE VARIABLE/CONSTANT FROM
BC	 			ITS SYMBOL TABLE ENTRY***)%
BARGVALARVALLIOPENLPRIGHTC	 		ARGVAL_.ARVALLST[.I,OPENLPTR];
BPBOPWDOTSADDARGVALIDADDRCW2RRIGHTC	 		PBOPWD[OTSADDR]_.ARGVAL[IDADDR];
BPBOPWDOTSTYPEVALUARGVALVALTYPEXOPWDC	 		PBOPWD[OTSTYPE]_.EVALU[.ARGVAL[VALTYPE]];
BPSYMPTARGVALC	 		PSYMPTR_.ARGVAL;
BOBUFFAC	 		OBUFFA();
BENDC	 	END;
BENDC	 END;
BMACRODBZIPOUTC	 MACRO ZIPOUT=
BC	 BEGIN
BC	 	PSYMPTR_PBF2NOSYM;
BC	 	PBOPWD_0;
BC	 	OBUFFA();
BC	 END$;
BFORWARREDORWC	 FORWARD REDORWRIT;
BGLOBALROUTINCGIOARC	 GLOBAL ROUTINE CGIOARGS=
BBEGINC	 BEGIN
BC	 	%(******************************
BC	 		CODE GENERATION FOR ARGUMENT BLOCKS
BC	 		FOR I/O STATEMENTS THEMSELVES.
BC	 		IT IS ASSUMED THAT CSTMNT
BC	 		POINTS TO THE STATEMENT.  THIS IMPLIES
BC	 		THAT THERE IS A DRIVER ROUTINE
BC	 		THAT IS FOLLOWING THE LINK LIST OF I/O
BC	 		STATEMENTS AND CALLING THIS ROUTINE
BC	 		AND THEN CGIOLARGS TO GENERATE THE ARGUMENT
BC	 		BLOCK FOR THE I/O LIST
BC	 
BC	 	******************************)%
BMACROIOSRCIC	 	MACRO IOSRCIDBAS=READID$;
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:08:27	CGSTMNT	CGSTM1.BLI		PAGE 54-2

BC	 	!TO OUTPUT A WORD FOR ZEROS. THIS WORD DISTINGUISHES
BC	 	!BINARY WRITES FROM LIST DIRECTED WRITES (READS TOO)
BC	 
BC	 
BLOCALTC	 	LOCAL T;
BEXTERNDEFLABDEFLABMTOPFUCGERRCGERRTREEPTTREEPTC	 	EXTERNAL DEFLAB,MTOPFUN,CGERR,TREEPTR;
BEXTERNCSTMNTCSTMNTPBOPWDPBOPWDPSYMPTPSYMPTOBUFFOBUFFC	 	EXTERNAL CSTMNT,PBOPWD,PSYMPTR,OBUFF;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BC	 
BC	 	!INITIALIZE PBOPWD
BPBOPWDC	 	PBOPWD_0;
BC	 
BC	 
BC	 	!IF THIS STMNT WAS REMOVED FROM THE PROGRAM BY P2SKEL, THEN
BC	 	!IOARGLBL FIELD WILL NEVER HAVE BEEN FILLED IN. DO NOT GENERATE
BC	 	! AN ARGLIST IN THIS CASE 
BC	 	! *****WARNING**** WILL HAVE PROBLEMS IF "IOARGLBL" FIELD IS EVER USED
BC	 	! FOR ANYTHING ELSE AND SO IS NON-ZERO 
BIFCSTMNTIOARGLCW4LLEFTEQLTHENRETURNC	 	IF .CSTMNT[IOARGLBL] EQL 0 THEN RETURN;
BC	 
BC	 
BC	 
BC	 
BIFCSTMNTSRCIDEQLOPENIDTHENC	 	IF .CSTMNT[SRCID] EQL OPENID THEN
BBEGINC	 	BEGIN
BIO1ARGCSTMNTOPSIZIOCNTCW5RRIGHTC	 		IO1ARG(.CSTMNT[OPSIZ]+3);
BIOENDEC	 		IOENDERR();
BCGOPARC	 		CGOPARGS();
BRETURNC	 		RETURN	!DO NOT WANT TO LOOK AT THE IOLIST
BENDELSEC	 	END ELSE
BIFCSTMNTSRCIDEQLCLOSIDTHENC	 	IF .CSTMNT[SRCID] EQL CLOSID THEN
BBEGINC	 	BEGIN
BIO1ARGCSTMNTOPSIZIOCNTCW5RRIGHTC	 		IO1ARG(.CSTMNT[OPSIZ]+3);
BIOENDEC	 		IOENDERR();
BCGOPARC	 		CGOPARGS();
BRETURNC	 		RETURN		!DO NOT WANT TO LOOK AT THE IOLIST
BENDELSEC	 	END ELSE
BIFCSTMNTSRCIDEQLRELSIDTHENC	 	IF .CSTMNT[SRCID] EQL RELSID THEN
BIO1ARGC	 		IO1ARG(1)
BELSEC	 	ELSE
BC	 
BC	 	!LOOK FOR CALLS TO MTOP.
BIFCSTMNTSRCIDGEQUTILLOBACKIDC	 	IF .CSTMNT[SRCID] GEQ UTILLOW
BANDCSTMNTSRCIDLEQUTILHIENDFIDTHENC	 	AND .CSTMNT[SRCID] LEQ UTILHI THEN
BBEGINC	 	BEGIN
BIO1ARGTIFCSTMNTIOREPTCW5RRIGHTNEQTHENELSEC	 		IO1ARG(T_(IF .CSTMNT[IOREPT] NEQ 0 THEN 5 ELSE 4));
BIOENDEC	 		IOENDERR();
BC	 
BC	 		%(***OUTPUT A WD THAT CONTAINS A CODE INDICATING THE FUN TO BE PERFORMED***)%
BPBOPWDC	 		PBOPWD_0;
BPBOPWDOTSTYPIMMEDTC	 		PBOPWD[OTSTYPE]_IMMEDTYPE;
BPBOPWDOTSADDMTOPFUCSTMNTSRCIDUTILLOBACKIDC	 		PBOPWD[OTSADDR]_.MTOPFUN[.CSTMNT[SRCID]-UTILLOW];
BPSYMPTPBF2NOC	 		PSYMPTR_PBF2NOSYM;
BOBUFFAC	 		OBUFFA();
BC	 
BC	 		%(***OUTPUT THE REPEAT WD IF THERE IS A REPEAT CT***)%
BLISS  V. 1.0-2.12	13-JUN-73  18:08:45	CGSTMNT	CGSTM1.BLI		PAGE 54-3

BIFCSTMNTIOREPTCW5RRIGHTNEQTHENC	 		IF .CSTMNT[IOREPT] NEQ 0 THEN
BBEGINC	 		BEGIN
BREGISTBASET1T1C	 			REGISTER BASE T1;
BPBOPWDC	 			PBOPWD_0;
BT1CSTMNTIOREPTCW5RRIGHTC	 			T1_.CSTMNT[IOREPT];
BIFT1OPR1EXOPWDEQLCONSTFTHENC	 			IF .T1[OPR1] EQL CONSTFL THEN
BBEGINC	 			BEGIN
BPBOPWDOTSADDT1CONST2CW4FULLC	 				PBOPWD[OTSADDR]_.T1[CONST2];
BPSYMPTPBF2NOC	 				PSYMPTR_PBF2NOSYM;
BENDELSEC	 			END ELSE
BBEGINC	 			BEGIN
BPSYMPTT1C	 				PSYMPTR_.T1;
BPBOPWDOTSADDT1IDADDRCW2RRIGHTC	 				PBOPWD[OTSADDR]_.T1[IDADDR];
BPBOPWDOTSINDC	 				PBOPWD[OTSIND]_1;
BENDC	 			END;
BPBOPWDOTSTYPIMMEDTC	 			PBOPWD[OTSTYPE]_IMMEDTYPE;
BOBUFFAC	 			OBUFFA();
BENDC	 		END;
BENDELSEC	 	END ELSE
BBEGINC	 	BEGIN
BCASECSTMNTSRCIDIOSRCIREADIDOFSETC	 		CASE (.CSTMNT[SRCID]-IOSRCIDBAS) OF SET
BC	 !	READID:
BREDORWC	 		REDORWRIT();
BC	 !	WRITID:
BREDORWC	 		REDORWRIT();
BC	 !	DECOID:
BCGDECAC	 		CGDECARGS();
BC	 !	ENCOID:
BCGDECAC	 		CGDECARGS();
BC	 !	REREDID:
BBEGINC	 	BEGIN
BIO1ARGC	 		IO1ARG(5);
BIOENDEC	 		IOENDERR();
BIOFORMC	 		IOFORMAT();
BENDC	 	END;
BC	 !	FINDID:
BBEGINC	 	BEGIN
BREGISTBASET1T1C	 		REGISTER BASE T1;
BIO1ARGC	 		IO1ARG(6);
BIOENDEC	 		IOENDERR();
BZIPOUTBEGINPSYMPTPBF2NOPBOPWDOBUFFAENDC	 		ZIPOUT;
BZIPOUTBEGINPSYMPTPBF2NOPBOPWDOBUFFAENDC	 		ZIPOUT;
BIOPTRCSTMNTIORECOCW5RRIGHTC	 		IOPTR(.CSTMNT[IORECORD]);
BENDC	 	END;
BC	 !	CLOSID:
BBEGINC	 	BEGIN
BIO1ARGCSTMNTOPSIZIOCNTCW5RRIGHTC	 		IO1ARG(.CSTMNT[OPSIZ]+3);
BIOENDEC	 		IOENDERR();
BCGOPARC	 		CGOPARGS();
BRETURNC	 		RETURN		!DO NOT WANT TO LOOK AT THE IOLIST
BENDC	 	END;
BC	 !	INPUID:	!NOT IN RELEASE 1
BBEGINC	 	BEGIN
BENDC	 	END;
BC	 !	OUTPID:	!NOT IN RELEASE 1
BBEGINC	 	BEGIN
BENDC	 	END;
BLISS  V. 1.0-2.12	13-JUN-73  18:08:53	CGSTMNT	CGSTM1.BLI		PAGE 54-4

BC	 
BTESC	 	TES;
BENDC	 	END;
BIFCSTMNTIOLISTCW6LLEFTNEQTHENC	 	IF .CSTMNT[IOLIST] NEQ 0 THEN
BBEGINC	 	BEGIN
BTREEPTCSTMNTIOLISTCW6LLEFTC	 		TREEPTR_.CSTMNT[IOLIST];
BCGIOLAC	 		CGIOLARGS();
BENDC	 	END;
BENDC	 END;
BGLOBALDBROUTINREDORWC	 GLOBAL ROUTINE REDORWRIT=
BBEGINC	 BEGIN
BC	 	!CODE GENERATION FOR A READ OR WRITE STATEMENT
BC	 	!INCLUDING ALL SIZES,SHAPES, VARIETIES AND COLORS
BC	 
BEXTERNCSTMNTCSTMNTPBOPWDPBOPWDOBUFFAOBUFFAPSYMPTPSYMPTGENLABGENLABC	 	EXTERNAL CSTMNT,PBOPWD,OBUFFA,PSYMPTR,GENLAB;
BMAPBASECSTMNTCSTMNTC	 	MAP BASE CSTMNT;
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BREGISTBASET1T1C	 		REGISTER BASE T1;
BT1CSTMNTIORECOCW5RRIGHTNEQC	 		T1_(.CSTMNT[IORECORD] NEQ 0);
BIFEXTSIGBEGINREGISTAA1AA1CSTMNTIOFORMCW6RRIGHTHRREIAA1AA1ENDEQLTHENC	 		IF EXTSIGN(.CSTMNT[IOFORM]) EQL 0 THEN
BBEGINC	 		BEGIN					!LIST DIRECTED READ
BIO1ARGIFT1THENELSEC	 			IO1ARG(IF .T1 THEN 6 ELSE 3);
BIOENDEC	 			IOENDERR();
BIFT1THENZIPOUTBEGINPSYMPTPBF2NOPBOPWDOBUFFAENDZIPOUTBEGINPSYMPTPBF2NOPBOPWDOBUFFAENDC	 			IF .T1 THEN ( ZIPOUT; ZIPOUT);
BENDELSEC	 		END ELSE
BIFEXTSIGBEGINREGISTAA1AA1CSTMNTIOFORMCW6RRIGHTHRREIAA1AA1ENDEQLTHENC	 		IF EXTSIGN(.CSTMNT[IOFORM]) EQL -1 THEN
BBEGINC	 		BEGIN
BIO1ARGT1C	 			IO1ARG(5+.T1);
BIOENDEC	 			IOENDERR();
BZIPOUTBEGINPSYMPTPBF2NOPBOPWDOBUFFAENDC	 			ZIPOUT;
BZIPOUTBEGINPSYMPTPBF2NOPBOPWDOBUFFAENDC	 			ZIPOUT;
BENDELSEC	 		END ELSE
BBEGINC	 		BEGIN
BT1CSTMNTIONAMECW6RRIGHTC	 			T1_.CSTMNT[IONAME];
BIFT1OPRCLSEXOPWDEQLDATAOPANDT1IDATTRNAMNAMTHENC	 			IF .T1[OPRCLS] EQL DATAOPR AND .T1[IDATTRIBUT(NAMNAM)] THEN
BBEGINC	 			BEGIN				!NAME LIST READ
BIO1ARGC	 				IO1ARG(4);
BIOENDEC	 				IOENDERR();
BC	 				!MAKE A LABEL FOR THE NAME LIST ARG BLK
BC	 				!AND TUCK IT AWAY IN THE IDCOMMON FIELD
BC	 				!OF THE SYMBOL TABLE
BC	 				!MAKE IT ONLY IF THERE ISNT ALREADY ONE THERE
BIFT1IDCOMMCW4LLEFTEQLTHENC	 				IF .T1[IDCOMMON] EQL 0 THEN
BT1IDCOMMCW4LLEFTGENLABC	 					T1[IDCOMMON]_GENLAB();
BPSYMPTPBFLABC	 				PSYMPTR_PBFLABREF;
BPBOPWDORT1IDCOMMCW4LLEFTC	 				PBOPWD_ 0 OR .T1[IDCOMMON];
BOBUFFAC	 				OBUFFA();
BENDELSEC	 			END ELSE
BBEGINC	 			BEGIN					!FORMATTER READ
BT1CSTMNTIORECOCW5RRIGHTNEQC	 				T1_(.CSTMNT[IORECORD] NEQ 0);
BIO1ARGT1C	 				IO1ARG(5+.T1);
BIOENDEC	 				IOENDERR();
BIOFORMC	 				IOFORMAT();
BENDC	 			END;
BENDC	 		END;
BIFCSTMNTIORECOCW5RRIGHTNEQTHENC	 		IF .CSTMNT[IORECORD] NEQ 0 THEN
BIOPTRCSTMNTIORECOCW5RRIGHTC	 		IOPTR(.CSTMNT[IORECORD]);
BLISS  V. 1.0-2.12	13-JUN-73  18:09:38	CGSTMNT	CGSTM1.BLI		PAGE 54-5

BENDC	 END;
BGLOBALDBROUTINNAMGENC	 GLOBAL ROUTINE NAMGEN=
BBEGINC	 BEGIN
BC	 	!GENERATE NAMELIST BLOCKS FOR FORDTS
BEXTERNOBUFFAOBUFFAPSYMPTPSYMPTPBOPWDPBOPWDNAMLPTC	 	EXTERNAL OBUFFA, PSYMPTR, PBOPWD,NAMLPTR;
BMAPOBJECTPBOPWDPBOPWDC	 	MAP OBJECTCODE PBOPWD;
BC	 
BOWNMRNAMPC	 	OWN	MRNAMPTR,		!MASTER NAME LIST POINTER
BNAMLENC	 		NAMLENTRY,		!POINTER TO EACH NAMELIST ENTRY
BDMETRYC	 		DMETRY;			!POINTER TO DIMENSION TABLE ENTRY
BC	 
BLOCALBASEPTRPTRC	 LOCAL BASE PTR;
BMAPBASEMRNAMPMRNAMPNAMLENDMETRYC	 MAP BASE MRNAMPTR: NAMLENTRY: DMETRY;
BC	 
BC	 
BMRNAMPNAMLPTLEFTC	 MRNAMPTR_.NAMLPTR<LEFT>;
BWHILEMRNAMPNEQDOC	 WHILE .MRNAMPTR NEQ 0 DO
BC	 
BBEGINC	 	BEGIN
BC	 
BC	 		!SIXBIT NAMELIST NAME
BC	 
BPSYMPTPBF2NOC	 		PSYMPTR _ PBF2NOSYM;
BPTRMRNAMPNAMLIDCW2LLEFTC	 		PTR_.MRNAMPTR[NAMLID];
BC	 
BC	 		%(***IF THIS NAMELIST IS NEVER REFERENCED IN THE PROGRAM, THEN
BC	 			NO LABEL WILL HAVE BEEN ASSOCIATED WITH IT. IF SO DO NOT GENERATE
BC	 			IT. (NOTE THAT THE "IDCOMMON" FIELD IS USED TO HOLD THE LABEL
BC	 			OF A NAMELIST)*******)%
BIFPTRIDCOMMCW4LLEFTNEQC	 		IF .PTR[IDCOMMON] NEQ 0
BTHENC	 		THEN
BBEGINC	 		BEGIN
BC	 
BC	 
BC	 			!DEFINE THE ARG BLOCK LABEL THAT
BC	 			!WAS STORED IN THE IDCOMMON FIELD OF
BC	 			!THE NAMELIST NAME BY REDORWRIT
BC	 
BDEFLABPTRIDCOMMCW4LLEFTC	 			DEFLAB(.PTR[IDCOMMON]);
BC	 
BPBOPWDORPTRIDSYMBCW3FULLC	 			PBOPWD _ 0 OR .PTR[IDSYMBOL];
BC	 
BOBUFFAC	 			OBUFFA();
BPBOPWDC	 			PBOPWD_0;
BC	 
BC	 			!NOW EACH ENTRY IN THE NAMELIST
BC	 
BINCRIFROMTOIMRNAMPNAMCNTCW1LLEFTDOC	 			INCR I FROM 0 TO .MRNAMPTR[NAMCNT]-1 DO
BC	 
BBEGINC	 			BEGIN
BC	 
BNAMLENMRNAMPNAMLISCW1RRIGHTIC	 				NAMLENTRY _@(.MRNAMPTR[NAMLIST]+.I);
BC	 
BC	 				!OUTPUT 	SIXBIT NAME
BC	 
BPBOPWDNAMLENIDSYMBCW3FULLC	 				PBOPWD_.NAMLENTRY[IDSYMBOL];
BC	 
BLISS  V. 1.0-2.12	13-JUN-73  18:10:15	CGSTMNT	CGSTM1.BLI		PAGE 54-6

BPSYMPTPBF2NOC	 				PSYMPTR_PBF2NOSYM;
BC	 
BOBUFFAC	 				OBUFFA();
BPBOPWDC	 				PBOPWD_0;
BC	 
BIFNAMLENOPERSPEXOPWDEQLARRAYNTHENC	 				IF .NAMLENTRY[OPERSP] EQL ARRAYNAME THEN
BC	 
BBEGINC	 				BEGIN		!OUTPUT ARRAYNAME ENTRY
BC	 
BC	 					!------------------------------------------!
BC	 					!#DIMS !	T  !I!  X  !   BASE ADR    !
BC	 					!------------------------------------------!
BC	 
BDMETRYNAMLENIDDIMCW0LLEFTC	 					DMETRY _.NAMLENTRY [IDDIM];
BC	 
BPBOPWDOTSCNTDMETRYDIMNUMC	 					PBOPWD[OTSCNT]_.DMETRY[DIMNUM];
BIOPTRNAMLENC	 					IOPTR (.NAMLENTRY);
BC	 
BC	 					!------------------------------------------!
BC	 					!	SIZE(ITEMS)   ! POS  OFFSET(WDS)   !
BC	 					!------------------------------------------!
BC	 
BC	 					%(***GET ARRAY SIZE IN ITEMS (ARASIZ FIELD IS IN WDS)***)%
BPBOPWDOTSFSIIFNAMLENDBLFLGEXOPWDC	 					PBOPWD[OTSFSIZ]_(IF .NAMLENTRY[DBLFLG]
BTHENDMETRYARASIZRIGHTC	 							THEN .DMETRY[ARASIZ]/2
BELSEDMETRYARASIZRIGHTC	 							ELSE .DMETRY[ARASIZ]);
BPTRDMETRYARAOFFLEFTC	 					PTR_.DMETRY[ARAOFFSET];
BC	 					! (NOTE THAT ADJUSTABLY DIMENSIONED ARRAYS
BC	 					! ARE ILLEGAL IN NAMELISTS)
BC	 						%(***COMPILER ADDS THE OFFSET - FOROTS
BC	 							SUBTRACTS IT. THEREFORE MUST PASS
BC	 							FOROTS THE NEG OF THE OFFSET USED
BC	 							BY THE COMPILER***)%
BIFPTROPR1EXOPWDEQLCONSTFTHENC	 					IF .PTR[OPR1] EQL CONSTFL THEN
BPBOPWDOTSADDPTRCONST2CW4FULLC	 						PBOPWD[OTSADDR]_-.PTR[CONST2]
BELSEC	 					ELSE
BCGERRC	 					CGERR();	!(ADJUSTABLY DIM ARRAY ILLEGAL)
BC	 
BPSYMPTPBF2NOC	 					PSYMPTR_PBF2NOSYM;
BOBUFFAC	 					OBUFFA();
BPBOPWDC	 					PBOPWD_0;
BC	 
BC	 					!FACTORS
BC	 
BC	 					!------------------------------------------!
BC	 					!			 !    FACTOR (IN ITEMS)!
BC	 					!------------------------------------------!
BC	 
BC	 					!FACTORS NECESSARY
BC	 
BINCRKFROMTOKDMETRYDIMNUMDOC	 					INCR K FROM 1 TO .DMETRY[DIMNUM] DO
BC	 
BBEGINC	 					BEGIN
BC	 
BPTRDMETRYDFACTOKRIGHTC	 						PTR_.DMETRY[DFACTOR ((.K-1))];
BC	 
BIFPTROPR1EXOPWDEQLCONSTFTHENC	 						IF .PTR [OPR1] EQL CONSTFL THEN
BLISS  V. 1.0-2.12	13-JUN-73  18:11:04	CGSTMNT	CGSTM1.BLI		PAGE 54-7

BC	 
BBEGINC	 						BEGIN		!A CONSTANT
BC	 
BPSYMPTPBF2NOC	 							PSYMPTR_PBF2NOSYM;
BC	 							%(***GET FACTOR IN ITEMS (NOT WDS)**)%
BPBOPWDIFNAMLENDBLFLGEXOPWDC	 							PBOPWD_(IF .NAMLENTRY[DBLFLG]
BTHENPTRCONST2CW4FULLC	 								THEN .PTR[CONST2]/2
BELSEPTRCONST2CW4FULLC	 								ELSE .PTR[CONST2]);
BOBUFFAC	 							OBUFFA();
BC	 
BENDELSEC	 						END ELSE
BC	 
BCGERRC	 						CGERR();
BENDC	 					END;		!FACTOR  OUTPUT
BC	 
BENDELSEC	 				END ELSE	!ARRAY  OUTPUT
BC	 
BIOPTRNAMLENC	 				IOPTR(.NAMLENTRY);
BC	 
BENDC	 			END;			!INCR LOOP ON ENTRIES IN NAMELIST
BC	 
BZIPOUTBEGINPSYMPTPBF2NOPBOPWDOBUFFAENDC	 			ZIPOUT;			!ZERO TERMINATING WORD
BENDC	 		END;
BC	 
BMRNAMPMRNAMPNAMLINCLINKRIGHTC	 		MRNAMPTR_.MRNAMPTR[NAMLINK];
BC	 
BENDC	 	END;			!WHILE LOOP;
BENDC	 END;				!NAMGEN
BENDDBBLISS  V. 1.0-2.12	13-JUN-73  18:11:04	CGSTMNT	CGSTM1.BLID
MODULE LENGTH = 2101+141
                                                                                                                                                                                                                                                                                             5 E