MODULE TCVSD(DOLLAR,ENTRIES=($TCVSD,$TCBSD,$TTSD),FSAVE,TIMING,TIMER=EXTERNAL(SIX12))=
BEGIN
%VERSION D2%
%LAST UPDATE, APR. 23, 1975, BY V.E.VAN VLEAR%

REQUIRE RMDEFS.BLI[7,107355];
REQUIRE DTDEFS.BLI[7,107355];
REQUIRE RDEFS.BLI[7,107355];
REQUIRE UDEFS.BLI[7,107355];
REQUIRE FDEFS.BLI[7,107355];

MACRO
  ERR(S)=
    BEGIN
    (.PTRA)[0]:=.PTR;
    RETURN S
    END&,
  GCH=IF FGCH() EQL -1 THEN ERR(1)&,
  GNUM=
    %GETS NEXT CH., ERR IF NOT NUMBER, RETURNS AS NUMBER%
    BEGIN
    GCH;
    IF .CH LSS "0" OR .CH GTR "9" THEN ERR(2)
    ELSE .CH-#60
    END&,
  GNUM2=
    %GETS 2 DIGIT NUMBER, ERROR IF BOTH NOT NUMBER%
    GNUM*10+GNUM&,
  FM2Z=
    %GET 2 DIGIT NUMBER WITH SUPPRESED LEADING ZERO%
    BEGIN
    CH:=GNUM;
    GCH;
    IF .CH LSS "0" OR .CH GTR "9" THEN
      .PC
    ELSE
      .PC*10+.CH-#60
    END&,
  %GETS TRIAD%
  GTRI=
    BEGIN
    T1:=0;
    T2:=(T1)<36,7>;
    GCH;
    REPLACEI(T2,.CH);
    GCH;
    REPLACEI(T2,.CH);
    GCH;
    REPLACEI(T2,.CH)
    END&;

UNDECLARE $TCVSD,$TCBSD,$TTSD;

GLOBAL ROUTINE $TCBSD(PTRA,QP,DT,DEST)=
BEGIN


MAP DT$ DT;

LOCAL
  LPYR,         %TRUE ON LEAP YEAR%
  CDBLK[5],     %STORAGE FOR CURRENT DATE BINARY DATA%
  CDSW,         %CURRENT DATE SWITCH, IF -1 THEN NOT OBTAINED YET%
  ERSW,         %SET TO ERROR NUMBER BY RETURN FROM FMSEP%
  CH,           %CURRENTLY PROCESSED CHARACTER%
  PC,           %PREVIOUS CHAR.%
  NCH,          %NEXT CHAR.%
  NC,           %NO. OF CHARS. LEFT IN INPUT STRING%
  CENT,         %CENTURY (LIKE 19)%
  YR,           %YEAR (LIKE 75)%
  MONTH,        %1 TO 12%
  YRDY,         %ACCUM. DAY OF YEAR (FOR OUTPUT)%
  DAY,          %1 TO 31%
  WKDY,         %0 TO 6, WHERE 0 EQUALS THUR.%
  QYR,          %NO. OF QUAD (4) YEARS IN YR%
  RYR,          %NO. OF ODD YEARS WHERE 0 MEANS LEAP (0 TO 3)%
  QCN,          %NO. OF QUAD (4) CENT. WHERE 2000 EQUALS 1%
  QCNR,         %NO. OF ODD CENT. WHERE 1900 EQUALS 3%
  DYS,          %DAYS FROM SEPT. 14, 1752 TO SPECIFIED%
  PTR,          %STRING POINTER FOR INPUT%
  T1,T2,J1;     %TEMPORARIES%

LABEL MNER,WKER;

BIND MNT=PLIT(0,
  0,31,59,90,120,151,181,212,243,273,304,334,365);

BIND QYEAR=1461,
  KCENT=QYEAR*25-1, %36,524      NO. OF DAYS IN A NORMAL CENTURY%
  KYD=19250,                    %NO. OF DAYS TO SEPT. 14 PLUS 52 YEARS%
  KDY3M=90;                     %?? NO. OF DAYS IN FIRST 3 MONTHS%

BIND MNMT=PLIT('JAN','FEB','MAR','APR','MAY','JUN',
  'JUL','AUG','SEP','OCT','NOV','DEC');


BIND            %FOR ADDRESSING DATE STACK IN TCBDS%
  XCENT=CDBLK,
  XYR=CDBLK+1,
  XMON=CDBLK+2,
  XYRDY=CDBLK+3,
  XDAY=CDBLK+4;

%GETS CHARACTER AND SETS UP CURRENT AND NEXT CHAR.,PLUS INCR. CTR%

FUNCTION FGCH=
    %SAVES PREV. CHAR, MOVES NEXT CH TO CURRENT, AND GETS NEW NEXT%
    BEGIN
    PC:=.CH;
    CH:=.NCH;
    NCH:=IF .NC GTR 0 THEN SCANI(PTR) ELSE
           IF .NC EQL 0 THEN 0 ELSE RETURN -1;
    IF .NCH GTR #140 AND .NCH LSS #173 THEN NCH:=.NCH-#40;
    NC:=.NC-1;
    .CH
    END;


%DISCARDS BLANKS AND SCANS FOR SEPARATOR%
FUNCTION FMSEP(S)=
BEGIN

IF .CH EQL .S THEN 0
ELSE IF .NCH EQL .S THEN GCH
ELSE
  UNTIL .CH EQL .S DO
    IF .NCH NEQ " " THEN RETURN 3
    ELSE GCH;
CH:=0
END;

PTR:=@@PTRA;            %GET STRING PTR. FROM ADR.%
NC:=.QP<0,18>;
ERSW:=0;

GCH;            %SETS UP NCH (NEXT CHAR.)%
XCENT:=PC:=CH:=0;
CDSW:=CENT:=YR:=MONTH:=YRDY:=DAY:=WKDY:=-1;

INCR K TO .DT[DT$COUNT]-1 DO
  BEGIN
  UNTIL .NCH NEQ " " DO GCH;            %DISCARD LEADING SPACES%
  CASE .DT[DT$CODE,.K] OF 
    SET

%0      NON (NO OUTPUT)%
0;

%1      4Y (4 DIGIT AD YEAR)%
BEGIN
CENT:=GNUM2;
YR:=GNUM2
END;

%2      3Y (3 DIGIT AD YEAR -LIKE 975)%
BEGIN
$TCVDS(0,0,0,CDBLK,0);
CENT:=GNUM+(.XCENT/10)*10;
YR:=GNUM2
END;

%3      2Y (2 DIGIT AD YEAR - LIKE 75)%
BEGIN
$TCVDS(0,0,0,CDBLK,0);
CENT:=.XCENT;
YR:=GNUM2
END;

%4      1Y (1 DIGIT YEAR - LIKE 5)%
BEGIN
$TCVDS(0,0,0,CDBLK,0);
CENT:=.XCENT;
YR:=GNUM+(.XYR/10)*10;
END;

%5      3M  (3 CHAR. MONTH)%
BEGIN
GTRI;           %GETS TRIAD%
MNER: BEGIN
  INCR J TO 11 DO
  (J1:=.J; IF .T1 EQL .MNMT[.J] THEN LEAVE MNER);
  ERR(4)
  END;
MONTH:=.J1+1
END;

%6      2M (2 DIGIT MONTH)%
MONTH:=GNUM2;

%7      2MZ%
MONTH:=FM2Z;

%8      3D (3 DIGIT DAY OF YEAR)%
YRDY:=GNUM*100+GNUM2;

%9      3DZ%
BEGIN
GCH;
IF .CH LSS "0" OR .CH GTR "9" THEN
  YRDY:=.PC-#60                 %ONLY 1 VALID DIGIT%
ELSE
  BEGIN
  T1:=.PC;              %SAVE PREV. CHAR.%
  GCH;
  IF .CH LSS "0" OR .CH GTR "9" THEN
    YRDY:=(.T1-#60)*10+.PC-#60
  ELSE
    YRDY:=(.T1-#60)*100+(.PC-#60)*10+.CH-#60
  END
END;

%10     2D (2 DIGIT DAY)%
DAY:=GNUM2;

%11     2DZ%
DAY:=FM2Z;

%12     1D (1 DIGIT WEEKDAY)%
0;

%13     3W (3 CHAR. DAY OF WEEK)%
0;

%14%
0;

%15     "/"%
ERSW:=FMSEP("/");

%16     "-"%
ERSW:=FMSEP("-");

%17     ","%
ERSW:=FMSEP(",");

%18     "."%
ERSW:=FMSEP(".");

%19     " "%
0;      %DO NOTHING FOR BLANK SEPARATOR%

    TES;

  IF .ERSW NEQ 0 THEN ERR(.ERSW)

  END;          %END OF ITEMS%

%SET DEFAULTS IF NOT SET%
IF .CENT EQL -1 THEN
  BEGIN
  IF .XCENT EQL 0 THEN $TCVDS(0,0,0,CDBLK,0);     %READ CURRENT DATE IF NECESSARY%
  CDSW:=0;                              %FLAG FOR HAVE CURRENT DATE%
  CENT:=.XCENT;
  YR:=.XYR
  END;

IF .YRDY EQL -1 THEN
  BEGIN
  YRDY:=0;
  IF .MONTH EQL -1 AND .DAY EQL -1 THEN
    IF .CDSW EQL -1 THEN
      YRDY:=1                   %WE HAVE A YEAR SO USE 1 FOR LOW ORDER DEFAULT%
    ELSE
      YRDY:=.XYRDY
  ELSE
    IF .MONTH EQL -1 THEN
      IF .CDSW EQL -1 THEN
        MONTH:=1
      ELSE
        MONTH:=.XMON
    ELSE
      IF .DAY EQL -1 THEN
        DAY:=1                    %SET DEFAULT DAY%
      ELSE 0
  END;

%CONSISTENCY CHECKS%

%SEE IF A YEAR WAS SPECIFIED%
IF .YR EQL 0 AND .CENT EQL 0 THEN ERR(7);

%NOW FOR DAY OF YEAR%
IF .YRDY EQL 0 THEN
  IF .MONTH EQL 0 THEN ERR(8)           %NO MONTH%
  ELSE
    IF .DAY EQL 0 THEN ERR(9)           %NO DAY OF MONTH%
    ELSE
      %HAVE MONTH & DAY%
      BEGIN
      IF .MONTH GTR 12 OR .MONTH LSS 1 THEN ERR(14);
      IF .DAY GTR 31 OR .DAY LSS 1 THEN ERR(10);
      YRDY:=.MNT[.MONTH]+.DAY
      END
ELSE
  BEGIN
  IF .MONTH NEQ -1 AND .DAY NEQ -1 THEN ERR(11);  %DAY OF YR MORE THAN 1 WAY%
  IF .YRDY GTR 365 THEN ERR(12)
  END;

IF .CENT LSS 17 THEN ERR(13);           %INVALID CENTURY%

QCN:=(.CENT-16)/4;
QCNR:=(.CENT-16)-(.QCN*4);
QYR:=.YR/4;
RYR:=.YR-(.QYR*4);

DYS:=(.CENT-17)*KCENT+
  .QYR*QYEAR+
  .RYR*365+
  .QCN+.YRDY-KYD;

IF .RYR EQL 0 THEN
  IF (.YR NEQ 0) OR
     (.YR EQL 0 AND .QCNR EQL 0) THEN
    LPYR:=1;                    %SET LEAP YEAR TRUE%

IF .LPYR THEN
    IF .MONTH GTR 0 THEN 
      IF .MONTH LSS 3 THEN DYS:=.DYS-1 ELSE 0
    ELSE
      IF .YRDY LSS KDY3M THEN DYS:=.DYS-1;

%CHECK FOR INVALID DAY OF MONTH%
IF .MONTH GTR 0 THEN
  IF .YRDY GTR .MNT[.MONTH+1] THEN
    IF NOT .LPYR THEN
      ERR(10)                   %ALWAYS BAD IF NOT LEAP YEAR%
    ELSE
      IF .DAY EQL 29 AND .MONTH EQL 2 THEN 0
      ELSE ERR(10);             %FEB 29 WAS OK IN LEAP YEAR%


IF .DEST NEQ 0 THEN
  (.DEST)<0,36>:=.DYS;
(.PTRA)<0,36>:=.PTR;       %RETURN STRING PTR%

0               %RETURN 0 FOR NO ERROR%

END;


%TEST IF CONVERSION POSSIBLE, RETURN 1 FOR NO ERROR%
GLOBAL ROUTINE $TTSD(FI,QP,DT)=
BEGIN

LOCAL PTR;              %STORAGE FOR STRING POINTER%

PTR:=(.FI)<36,7>;

IF $TCBSD(PTR,.QP,.DT,0) EQL 0 THEN 
  RETURN 1                      %NO ERROR%
ELSE
  RETURN 0

END;



%CONVERT STRING TO DATE TEMPLATE%
GLOBAL ROUTINE $TCVSD(FI,QP,DT,DEST)=
BEGIN

LOCAL PTR,              %STORAGE FOR STRING POINTER%
  DD$ DD,               %FOR DATA DESCRIPTOR ADR.%
  NM,                   %LOCATION OF FIELD NAME%
  ERSW;                 %FOR ERROR NUMBER%

PTR:=(.FI)<36,7>;
ERSW:=$TCBSD(PTR,.QP,.DT,.DEST);

IF .ERSW NEQ 0 THEN
  BEGIN
  DD:=@(.FI-1);
  IF .DD[DD$CLASS] EQL DDV$CLASS2 THEN
    BEGIN
    $UAPSZ($USPTR('For "'));
    NM:=.DD[DD$NAME];
    $UAPSC((.NM)<36,7>,.(@(.NM-1))<0,18>);
    $UAPSZ($USPTR('" '))
    END;
  $UAPSZ($USPTR('during Date conversion,'));
  $UOUTL();
  $UAPSZ( .RMSG$[CASE .ERSW-1 OF
  SET
  RM$DT1;
  RM$DT2;
  RM$DT3;
  RM$DT4;
  RM$DT5;
  RM$DT6;
  RM$DT7;
  RM$DT8;
  RM$DT9;
  RM$DT10;
  RM$DT11;
  RM$DT12;
  RM$DT13;
  RM$DT14;
  RM$DT15;
  TES ]);
  $UOUTL();
  $UAPSZ($USPTR('Input: '));
  $UAPSC((.FI)<36,7>,.QP<0,18>);
  $UOUTL();
  $UOUTM(FTLMS$<36,7>,0)
  END

END;


END ELUDOM
