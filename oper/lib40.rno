.NOJUSTIFY
.PAPER SIZE 54,72
.LEFT MARGIN 10
.RIGHT MARGIN 70
.TITLE ^^LIB40 SUBROUTINES\\
.SUBTITLE ^PART 1
.SUBTITLE ^USER ^CALLED ^SUBPROGRAMS
.INDEX ^^IABS\\
.INDEX ^^ABS\\
.INDENT -5
^^SINGLE-PRECISION ABSOLUTE VALUE FUNCTION (ABS, IABS)\\
.SKIP 1
.INDENT -3
1.#^^ABS\\ CALCULATES THE ABSOLUTE VALUE
OF AN INTEGER OR A FLOATING-POINT ARGUMENT. ^^ABS\\ IS THE ENTRY POINT FOR
REAL VARIABLES; ^^IABS\\ IS THE ENTRY POINT FOR INTEGER VARIABLES.
^THE TYPE OF THE RESULT IS THE SAME AS THE TYPE
OF THE ARGUMENT.
.SKIP 1
.;.INDENT -3
.;5.#^THE PROGRAM IS ELEVEN LOCTIONS LONG, SEVEN OF WHICH ARE EXECUTABLE
.; INSTRUCTIONS.
.INDENT -3
8.#^^ABS\\ AND ^^IABS\\ CALCULATE THE ABSOLUTE VALUE OF THEIR ARGUMENTS
WITH ^^MOVM\\ INSTRUCTIONS. ^IF OVERFLOW OCCURS (THAT IS, IF THE
ARGUMENT FOR ^^IABS\\ WAS -2_^35), AN ANSWER OF PLUS (2_^35-1)
AND AN ERROR MESSAGE ARE RETURNED.
.PAGE
.INDEX ^^ACOS\\
.INDENT -5
^^SINGLE-PRECISION ARC COSINE FUNCTION (ACOS)\\
.SKIP 1
.INDENT -3
1.#^^ACOS\\ CALCULATES THE ARC COSINE OF A SINGLE-PRECISION, 
FLOATING-POINT ARGUMENT. ^THE ANSWER IS RETURNED IN ^&RADIANS\&.
.SKIP 1
.INDENT -3
3.#^THE ^^ACOS\\ PROGRAM CALLS THREE EXTERNAL PROGRAMS:
.INDENT 5
^^ATAN\\ - REAL ARC TANGENT PROGRAM
.INDENT 5
^^SQRT\\ - REAL SQUARE ROOT PROGRAM
.INDENT 5
^^ERRMSG\\ - ERROR MESSAGE PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^THE PROGRAM IS 39 LOCATIONS LNG, 23 OF WHICH ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE PROGRAM FIRST CHECKS TO SEE IF ITS ARGUMENT IS GREATER THAN
1.0 IN MAGNITUDE. ^IF IT IS, AN ERROR MESSAGE AND AN ANSWER OF 0.0
ARE RETURNED. ^OTHERWISE, THE ARC COSINE OF X IS CALCULATED IN THE
FOLLOWING MANNER:
.SKIP 1
.INDENT 5
^IF X > 0.0, ACOSINE (X) = ^^ATAN\\[^^SQRT\\(1-X_^2)/X]
.INDENT 5
^IF X < 0.0, ACOSINE (X) = PI + ^^ATAN[^^SQRT\\(1-X_^2/X]
.INDENT 5
^IF X = 0.0, ACOSINE (X) = PI/2.0
.BREAK
WHERE PI = 202622077325^B
.PAGE
.INDEX ^^AIMAG\\
.INDENT -5
^^COMPLEX-TO-IMAGINARY CONVERSION FUNCTION (AIMAG)\\
.SKIP 1
.INDENT -3
1.#^^AIMAG\\ CONVERTS A COMPLEX NUMBER TO AN IMAGINARY NUMBER, 
RETURNED AS A ^&REAL\& NUMBER IN ACCUMULATOR 0.
.;.SKIP 1
.;.INDENT -3
.;5.#^^AIMAG\\IS FIVE LOCATIONS LONG, OF WHICH THREE ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^AS IN THE ^^REAL\\PROGRAM, ^^AIMAG\\MAKES USE OF THE FACT THAT
THE ARGUMENT IS STORED AS A WORD PAIR.#^IT MUST GET THE ADDRESS
OF THE IMAGINARY PART, THE SECOND ELEMENT OF THE WORD PAIR, PICK
THE IMAGINARY PART UP AND EXIT.
.PAGE
.INDEX ^^AINT\\
.INDENT -5
^^SINGLE-PRECISION,FLOATING-POINT TRUNCATION (AINT)\\
.SKIP 1
.INDENT -3
1.#^^AINT\\IS A FLOATING-POINT TRUNCATION PROGRAM.#^GIVEN A
FLOATING-POINT ARGUMENT,IT TRUNCATES THE FRACTIONAL PART OF
THE ARGUMENT AND RETURNS THE INTEGRAL PART, STILL IN 
FLOATING-POINT FORM.
.;.SKIP 1
.;.INDENT -3
.;5.#^^AINT\\IS 12 LOCATIONS LONG, OF WHICH 9 ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE ABSOLUTE VALUE OF THE ARGUMENT IS PICKED UP AND CHECKED
AGAINST OCTAL 233400000000 (2_^26).#^IF THE ABSOLUTE VALUE IS GREATER
THAN THIS OCTAL CONSTANT, THE ARGUMENT HAS NO FRACTION BITS,
SO THE SIGN OF THE ARGUMENT IS RESTORED AND THE PROGRAM EXITS.
^OTHERWISE, THE NORMALIZATION PROPERTIES OF ^^FAD\\ARE USED BY
ADDING THE ARGUMENT TO THE NUMBER STATED ABOVE.#^THIS RESULTS
IN ALL THE FRACTION BITS OF THE ARGUMENT BEING SHIFTED OFF
DURING THE NORMALIZATION PROCESS OF ADDING THE TWO 

FLOATING-POINT NUMBERS.#^THE OCTAL CONSTANT IS THEN SUBTRACTED
AGAIN,THE SIGN OF THE ARGUMENT RESTORED, AND THE ROUTINE
EXITS.
.PAGE
.INDEX ^^ALOG\\
.INDENT -5
^^SINGLE-PRECISION LOGARITHM FUNCTION (ALOG)\\
.SKIP 1
.INDENT -3
1.#^^ALOG\\CALCULATES THE LOGARITHM OF A REAL NUMBER.#^IF ^^ALOG\\
IS THE ENTRY POINT USED, THE NATURAL (^NAPIERIAN) LOGARITHM
IS CALCULATED.#^IF ^^ALOG\\10 IS THE ENTRY POINT USED, THE
LOG TO THE BASE TEN IS CALCULATED.^AN ARGUMENT OF 0 CAUSES THE
RETURN OF THE LARGEST REPRESENTABLE NEGATIVE NUMBER.
.SKIP 1
.INDENT -3
2.#^THE CALLING SEQUENCE IS
.SKIP 1
.INDENT 5
^^JSA 16, ALOG\\OR^^ALOG10\\
.INDENT 5
^^ARG\\##ADR########;ADR IS THE ADDRESS OF THE ARGUMENT.
.SKIP 1
.INDENT -3
3.#^THE ONE EXTERNAL PROGRAM CALLED BY ^^ALOG\\IS:
.SKIP 1
.INDENT 5
^^TYPER.\\###ERROR MESSAGE PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^THE PROGRAM IS 54 LOCATIONS LONG, 38 OF WHICH ARE 
.;EXECUTABLE INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE LOG TO THE BASE E ROUTINE USES THE FOLLOWING ALGORITHM:
^THE ARGUMENT X IS WRITTEN AS:
.SKIP 1
.INDENT 5
X=F/2*2_^(^I+1)
.SKIP 1
.INDENT -3
SO THAT
.SKIP 1
.INDENT 5
LOGE(X)=[^I+LOG2(F)].LOGE(2)
.SKIP 1
.INDENT -3
^THE COMPUTATION IS NEEDED ONLY TO CALCULATE
.SKIP 1
.INDENT 5
LOG2(F)=C1Z+C3Z_^3+C5Z_^5 -1/2
.SKIP 1
.INDENT 5
WHERE
.SKIP 1
.INDENT 5
Z=(F-#.5)/(F+#.5)
.SKIP 1
.INDENT -5
AND
.SKIP 1
.INDENT 20
(FLOATING POINT)
.INDENT 5
C1=0.598978650=200462532521
C3=0.961470632=200754213604
C5=2.88539129#=202561251002
#.5=0.70710678=200552023632
#2=1.41421356#=201552023632
.SKIP 1
.INDENT -3
AND
.SKIP 1
.INDENT5
LOGE(2)=0.693147181=200542710300
.SKIP 1
.INDENT -3
^THE ALGORITHM PROCEEDS IN A FAIRLY STRAIGHTFORWARD MANNER AFTER
A CHECK IS MADE FOR AN ARGUMENT OF ZERO, ACCUMULATORS ARE SAVED
AND SO FORTH.#^THE NUMBER IS FIRST SEPARATED INTO AN EXPONENT
AND A FRACTIN, BOTH OF WHICH ARE REFLOATED TO PREPARE THE NUMBERS
^I AND F WHICH THE ALGORITHM NEEDS.#^AFTER THAT THE VARIABLE
Z IS CALCULATED AND THEN USED IN THE SERIES APPROXIMATION.
.SKIP 1
.INDENT -3
^THE LOG TO THE BASE 10 ROUTINE CALCULATES:
.SKIP 1
.INDENT 5
LOG10(X)=LOGE(X)LOG10(E)
.SKIP 1
.INDENT -3
^IT ALSO MAKES A SPECIAL CASE CHECK FOR AN ARGUMENT OF ZERO.
.PAGE
.INDEX ^^AMOD\\
^^SINGLE-PRECISION MOD FUNCTION (AMOD)\\
.SKIP 1
.INDENT -3
1.#^^AMOD\\ IS DEFINED AS:
.SKIP 1
.INDENT 5
MOD(A,B)=THE REMAINDER WHEN A IS DIVIDED BY B.
.SKIP 1
.INDENT -3
^THE TERM A/B MUST BE LESS THAN 226 IN MAGNITUDE.
.SKIP 1
.INDENT -3
3.#^^AMOD\\CALLS ONE EXTERNAL PROGRAM:
.SKIP 1
.INDENT 5
^^TYPER.\\###ERROR MESSAGE PROGRAM
.SKIP 1
.INDENT -3
AND MAKES REFERENCE TO ANOTHER EXTERNAL LOCATION,^^OVPCWD.\\
.;.SKIP1
.;INDENT -3
.;5.#^THE PROGRAM IS 28 LOCATIONS LNG,24 OF WHICH ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE ABSOLUTE VALUE OF THE QUOTIENT A/B IS OBTAINED,AND
ADDED TO THE OCTAL NUMBER 233400000000.#^NORMALIZATION,IN THE
PROCESS OF THE FLOATING ADD INSTRUCTION,SHIFTS OFF ALL THE
FRACTION BITS.#^THE SAME OCTAL NUMBER IS THEN SUBTRACTED,
WITH THE RESULT MULTIPLIED BY #B# AND GIVEN THE SIGN OF A.
^THIS RESULT IS THEN SUBTRACTED FROM A.
.SKIP 1
.INDENT -3
9.#^IF #A/B# IS GREATER THAN OR EQUAL TO 2_^26, A FLOATING 
OVERFLOW ERROR MESSAGE AND AN ANSWER OF ZERO ARE RETURNED.
.PAGE
.INDEX ^^ASIN\\
.INDENT -5
^^SINGLE-PRECISION ARC SINE FUNCTION (ASIN)
.SKIP 1
.INDENT -3
1.#^^ASIN\\CALCULATES THE ACR SINE OF A SINGLE-PRECISION,
FLOATING-POINT ARGUMENT.#^THE ANSWER IS RETURNED IN
^&RADIANS.\&
.SKIP 1
.INDENT -3
3.#^THE ^^ASIN\\ PROGRAM CALLS THREE EXTERNAL PROGRAMS:
.SKIP 1
.INDENT 5
^^ATAN\\-REAL ARC TANGENT PROGRAM
^^SQRT\\-REAL SQUARE ROOT PROGRAM
^^ERRMSG\\-ERROR MESSAGE PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^THE ^^ASIN\\PROGRAM IS 37 LOCATIONS LONG, 22 OF WHICH 
.;ARE EXECUTABLE INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE ALGORITHM USED TO CALCULATE THE ARC SINE OF A NUMBER IS:
.SKIP 1
.INDENT 5
ASIN(^X)=ATAN(^X/#1-^X2)
.SKIP 1
.INDENT -3
^THE PROGRAM MAKES A SPECIAL CHECK FOR THE CASE WHERE
.SKIP1
.INDENT 5
^X=1.0##IN WHICH CASE##ASIN(^X)=#/2
.SKIP 1
.INDENT -3
OR
.SKIP 1
.INDENT 5
^X=-1.0##IN WHICH CASE##ASIN(^X)=#/2
.SKIP 1
.INDENT -3
^THE ARC SINE FUNCTION IS ONLY DEFINED FOR ARGUMENTS IN THE
RANGE -1.0,1.0.#^ARGUMENTS OUTSIDE OF THIS RANGE CAUSE AN
ANSWER OF 0.0 AND AN ERROR MESSAGE TO BE RETURNED.#^THE VALUE
OF #/2 WHICH IS USED IS:
.SKIP 1
.INDENT 5
#/2=1.5707#9633 DECIMAL
=201622077325 OCTAL
.SKIP 1
.INDENT -3
9.#^ERRORS THAT ARISE IN THE ARC SINE CALCULATION ARE DUE TO A
NUMBER OF FACTORS:
.SKIP 1
.INDENT -3
A.#^SOME ERRORS CAN BE INTRODUCED IN THE SQUARE ROOT ROUTINE,
ALTHOUGH FOR ARGUMENTS IN THE -1.0,1.0 RANGE,THE ANSWER SHOULD
IN MOST CASES BE ACCURATE TO THE LEAST SIGNIFICANT BIT.
B.#^WHEN ^X IS VERY NEAR+1.0 OR -1.0,#1-^^X2 IS VERY
NEAR 0.#^THUS,#^X/#1-^X2 IS VERY LARGE, AND EVEN A SMALL
ERROR IN THE CALCULATION OF #1-^X2 CAN RESULT IN A GREATLY
MAGNIFIED ERROR IN ^X/#1-^X2.
.INDENT -3
C.#^SOME ERROR IS INTRODUCED IN THE ^^ATAN\\ROUTINE.#^THE ^^ATAN\\
PROGRAM TENDS TO BE MOST ACCURATE FOR VERY LARGE ARGUMENTS,SINCE
THE ANSWER ASYMPTOTICALLY APPROACHES #/2,AND LESS ACCURATE AS THE
ARGUMENT APPROACHES 0.
.PAGE
.INDEX ^^ATAN\\
.INDENT -5
^^SINGLE-PRECISION ARC TANGENT FUNCTION (ATAN)\\
.SKIP 1
.INDENT -3
1.#^^ATAN\\CALCULATES THE PRINCIPAL VALUE OF THE ARC TANGENT 
OF A REAL (SINGLE-PRECISION,FLOATING-POINT NUMBER.
.;.SKIP 1
.;.INDENT -3
.;5.#^^ATAN\\IS 53 LOCATIONS LONG, OF WHICH 38 ARE
.;EXECUTABLE INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE EXACT SOURCE OF THE ALGORITHM USED FOR ACR TANGENTS IN
THIS PROGRAM IS NOT KNOWN.#^HOWEVER,POSSIBLE TEXT REFERENCES ARE
^RALSTON AND ^WILF - ^&^MATHEMATICAL ^METHODS FOR ^DIGITAL 
^COMPUTERS\&,PAGES 30-31,AND AN ARTICAL BY 
^DR.^E.^G.^KOGBETLIANTZ - ^^IBM\\^JOURNAL OF ^RESEARCH AND
^DEVELOPMENT,^JANUARY 1958,PAGES 43-53.
.SKIP 1
.INDENT -3
^THE ALGORITHM USED IN THIS PROGRAM FIRST CHECKS THE FOLLOWING
CASES.
.SKIP 1
.INDENT -3
^THE ALGORITHM USED IN THIS PROGRAM FIRST CHECKS THE FOLLOWING
CASES.
.SKIP 1
.INDENT 5
(1)#^IF X <2_^-27#,###ATAN(X)=X
(2)#^IF X >2_^-27#,###ATAN(X)=#/2
(3)#^IF X >1.0,#####ATAN(X)=#/2 - ATAN(1/X)
(4)#^IF X <0,#######ATAN(X)=-ATAN(-X)
.SKIP 1
.INDENT -3
^IN THIS MANNER,THE ARGUMENT IS REDUCED TO THE RANGE
.SKIP 1
.INDENT 5
2_^-27#<X<1.0
.SKIP 1
.INDENT -3
^^ATAN\\THEN CALCULATES,IN A STRAIGHTFORWARD ALGEBRAIC MANNER,
THE FOLLOWING APPROXIMATION.
.SKIP 1
.INDENT 5
ATAN (X) = X/(BO+A1)/(X_^2+B1+A2)/(X_^2+B2+A3)/X_^2+B3)
.SKIP 1
WHERE
.SKIP 1
.INDENT 20
(FLOATING POINT)
.INDENT 5
A1=3.70925626#=202732622
.INDENT 5
A2=#-7.10676005#=574071126
.INDENT 5
A3=#-0.264768620=600360701
.INDENT 5
B0=0.174655439=176545543
.INDENT 5
B1=6.76213924=203660616
.INDENT 5
B2=3.31633543=202650373
.INDENT 5
B3=1.44863154=201562663
.SKIP 1
AND
.SKIP 1
.INDENT 5
#/2=1.5707#9633=201622077
.PAGE
.INDEX ^^ATAN2\\
.INDENT -5
^^SINGLE-PRECISION ARC TANGENT OF TWO ARGUMENTS (ATAN2)\\
.SKIP 1
.INDENT -3
1.#^^ATAN2(Y,X)\\CALCULATES THE ARC TNGENT,GIVEN A
Y COORDINATE AND AN X COORDINATE-IN CONTRAST TO THE ^^ATAN\\ 
ROUTINE,WHICH CALCULATES THE PRINCIPAL VALUE OF THE ARC TANGENT.
^THE ANSWER RETURNED IS ATAN(Y/X).
.SKIP 1
.INDENT -3
3.#^THE TWO EXTERNAL PROGRAMS CALLED BY ^^ATAN2\\ARE:
.SKIP 1
.INDENT 5
^^ATAN\\###REAL ARC TANGENT PROGRAM
.INDENT 5
^^TYPER.\\##ERROR MESSAGE PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^THE ^^ATAN2\\PROGRAM IS 39 LOCATIONS LONG, 31 OF WHICH ARE
.;EXECUTABLE INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE ALGORITHM DEPENDS HEAVILY ON THE ^^ATAN\\PROGRAM.#^IF
WE CONSIDER THE TWO ARGUMENTS AS DEFINING A POINT IN THE X-Y PLANE,
THEN WE CAN ASSIGN A QUADRANT TO THE ^^ATAN2\\"ARGUMENT."#^THE
FOLLOWING RULE IS THEN USED.
.SKIP 1
.INDENT 5
ARGUMENT IN FIRST QUADRANT####ATAN2(Y,X)=ATAN(Y/X)
.INDENT 5
ARGUMENT IN SECOND QUADRANT###ATAN2(Y,X)=#+ATAN(Y/X)
.INDENT 5
ARGUMENT IN THIRD QUADRANT####ATAN2(Y,X)=ATAN(Y/X)-#
.INDENT 5
ARGUMENT IN FOURTH QUADRANT###ATAN2(Y,X)=ATAN(Y,X)
.SKIP 1
^THE VALUE OF # THAT IS USED IS
.SKIP 1
.INDENT 5
#=3.14159#26535
.SKIP 1
^IF OVERFLOW OCCURS WHEN Y/X IS BEING CALCULATED, AN
ANSWER OF ##/2 IS RETURNED.#^IF UNDERFLOW OCCURS AND X IS
NEGATIVE, AN ANSWER OF ## IS RETURNED.#^IF UNDERFLOW OCCURS
AND X IS POSITIVE,AN ANSWER OF 0 IS RETURNED WITH AN UNDERFLOW
ERROR MESSAGE.
.PAGE
.INDEX ^^CABS\\
.INDENT -5
^^COMPLEX ABSOLUTE VALUE FUNCTION (CABS)\\
.SKIP 1
.INDENT -3
1.#^^CABS\\CALCULATES THE ABSOLUTE VALUE OF A COMPLEX NUMBER.
^THE ANSWER RETURNED IN ACCUMULATOR 0 IS A ^&REAL\&NUMBER
(THE ABSOLUTE VALUE OF A COMPLEX NUMBER IS REAL).
.SKIP 1
.INDENT -3
3.#^^CABS\\CALLS ONE EXTERNAL PROGRAM
.SKIP 1
.INDENT 5
^^SQRT\\###REAL SQUARE ROOT PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^THE PROGRAM IS 22 LOCATIONS LONG, OF WHICH 18 ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^FOR AN ARGUMENT Z = X+IY,^^CABS\\COMPUTES:
.SKIP 1
.INDENT 5
#Z#=X1##(X2/X1)_^2+1
.SKIP 1
WHERE X2=THE SMALLER (IN MAGNITUDE)OF X AND Y,AND X1=THE LARGER
(IN MAGNITUDE) OF X AND Y.
.SKIP 1
.INDENT -3
9.#^A PRECISE ERROR ESTIMATE HAS NOT BEEN MADE, BUT COULD BE MADE
BY DOUBLE-PRECISION SIMULATION OF COMPLEX NUMBERS.#^WHEN
X1##(X2/X1)_^2+1 OVERFLOWS,^^CABS\\RETURNS THE LARGEST 
REPRESENTABLE NUMBER (377777#777777) AND AN ERROR MESSAGE.
.PAGE
.INDEX ^^CEXP\\
.INDENT -5
^^COMPLEX EXPONENTIAL FUNCTION (CEXP)\\
.SKIP 1
.INDENT -3
1.#^^CEXP\\CALCULATES THE EXPONENTIAL OF A COMPLEX ARGUMENT,I.E.,
.SKIP 1
.INDENT 5
E_^Z
.SKIP 1
WHERE Z IS A COMPLEX NUMBER
.SKIP 1
.INDENT -3
3.#^THE EXTERNAL PROGRAMS CALLED BY ^^CEXP\\ARE
.SKIP 1
.INDENT 5
^^EXP\\-REAL EXPONENTIAL PROGRAM
.INDENT 5
^^SIN\\-REAL SINE PROGRAM
.INDENT 5
^^ALOG\\-REAL LOGARITHM PROGRAM
.INDENT 5
^^COS\\-REAL COSINE PROGRAM
.INDENT 5
^^TYPER.\\-ERROR MESSAGE PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^^CEXP\\IS 73 LOCATIONS LONG,OF WHICH 57 ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE ALGORITHM USED BY ^^CEXP\\TO CALCULATE THE 
EXPONENTIAL OF A COMPLEX NUMBER FOLLOWS THE STANDARD DEFINITION
.SKIP 1
.INDENT 5
E_^Z=E_^X(COS Y + I SIN Y)
.SKIP 1
WHERE
.SKIP 1
.INDENT 5
Z=X+IY
.SKIP 1
^THE CALCULATION IS CARRIED OUT IN A STRAIGHTFORWARD MANNER.
^IF X IS SO LARGE A NEGATIVE NUMBER THAT ^^EXP\\(X) UNDERFLOWS,
THEN AN ANSWER OF ZERO AND AN UNDERFLOW ERROR MESSAGE ARE
RTURNED FOR BOTH THE REAL AND IMAGINARY PARTS OF THE ANSWER;
UNLESS EITHER SIN(Y) OR COS(Y) IS IDENTICAL TO ZERO, IN WHICH
CASE NO ERROR MESSAGE IS RETURNED FOR THAT PART.
.SKIP 1
^IF X IS POSITIVE AND LARGE ENOUGH TO CAUSE^^EXP\\(X) OVERFLOW,
^^CEXP\\ CHECKS THE VALUES OF SIN(Y) AND COS(Y).#^IF EITHER
OF THEM IS IDENTICAL TO ZERO,AN ANSWER OF ZERO IS RETURNED FOR
THAT PART;#OTHERWISE ^^CEXP\\CALCULATES
.SKIP 1
.INDENT 5
E_^Z=(^^EXP[ALOG\\(#COS(Y)#)+X])#(THE SIGN OF COS(Y))
.INDENT 5
+I*(^^EXP[ALOG\\(#SIN(Y)#)+X])#(THE SIGN OF SIN(Y))
.SKIP 1
^IF OVERFLOW OR UNDERFLOW OCCURS IN EITHER PART OF THE
FINAL ANSWER, AN ERROR MESSAGE AND AN ANSWER OF #
INFINITY (377777777777 OR 400000000001) OR 0, RESPECTIVELY,
ARE RETURNED FOR THAT PART.
.PAGE
.INDEX ^^CEXP.2\\
.INDENT -5
^^COMPLEX-TO-INTEGER POWER FUNCTION (CEXP.2)\\
.SKIP 1
.INDENT -3
1.#^^CEXP.2\\CALCULATES ^A_^^B,WHERE ^A IS A COMPLEX NUMBER AND
^B IS AN INTEGER.
.SKIP 1
.INDENT -3
2.#^THE CALLING SEQUENCE TO ^^CEXP.2\\IS
.SKIP 1
.INDENT 10
^&^MACRO-10\&##########^&^^FORTRAN#IV\\\&
.SKIP 1
.INDENT 5
^^MOVEI\\###16,ADR#####;ADDRESS OF ^B (POWER)####^^CALL#CEXP.2\\(ARG)
.INDENT 5
^^PUSHJ\\###17,^^CEXP.2\\
.SKIP 1
THE BASE IS EXPECTED TO BE IN ACCUMULATORS 0 AND 1.
.SKIP 1
.INDENT -3
3.#^THE FOLLOWING EXTERNAL PROGRAMS ARE CALLED BY ^^CEXP.2\\
.SKIP 1
.INDENT 5
^^SQRT\\-REAL SQUARE ROOT PROGRAM
.INDENT 5
^^ALOG\\-REAL LOGARITHM PROGRAM
.INDENT 5
^^ATAN2\\-REAL ARC TANGENT OF TWO ARGUMENTS
.INDENT 5
^^TYPER.\\-ERROR MESSAGE PROGRAM
.INDENT 5
^^EXP\\-REAL EXPONENTIAL PROGRAM
.INDENT 5
^^SIN\\-REAL SINGLE-PRECISION SINE
.INDENT 5
^^COS\\-REAL SINGLE-PRECISION COSINE
.INDENT 5
^^FLOAT\\-FIX-TO-FLOAT CONVERSION PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^THE PROGRAM IS 164 INSTRUCTIONS LONG, 140 OF WHICH ARE
.;EXECUTABLE INSTRUCTIONS.
.SKIP 1
.INDENT -3
6.#^THE PROGRAM EXPECTS TWO ARGUMENTS:#A COMPLEX BASE,
CONSISTING OF A FLOATING-POINT IMAGINARY PART IN ACCUMULATOR 1,
AND AN INTEGER POWER,POINTED TO BY ACCUMULATOR 16.
.SKIP 1
.INDENT -3
7.#^THE ANSWER IS A COMPLEX NUMBER,CONSISTING OF A FLOATING-POINT
REAL PART IN ACCUMULATOR 0 AND A FLOATING-POINT IMAGINARY PART
IN ACCUMULATOR 1.
.SKIP 1
.INDENT -3
8.#^THE GENERAL EXPRESSION FOR A COMPLEX NUMBER RAISED TO AN
INTEGER POWER IS
.SKIP 1
.INDENT 5
^A_^^B=R_^^R[COS(^B#)+I SIN(^B#)]
.SKIP 1
WHERE
.SKIP 1
.INDENT 5
^A=A1+IA2
.INDENT 5
R=#^A#=#A1_^2+A2_^2
.INDENT 5
#=ATAN(A2/A1)
.SKIP 1
^THE EXPRESSION ABOVE IS THE BASIC CALCULATION THAT 
^^CEXP.2\\PERFORMS.#^THERE ARE SEVERAL PLACES IN THIS CALCULATION
WHERE OVERFLOW OR UNDERFLOW CAN OCCUR,EVEN THOUGH THE FINAL ANSWER
MIGHT NOT OVERFLOW OR UNDERFLOW.#^AT SUCH PLACES ^^CEXP.2\\JUMPS
OUT OF THE BASIC ROUTINE AND INTO MORE INVOLVED CALCULATIONS TO
OBTAIN THE FINAL ANSWER.
.PAGE
.INDEX ^^CEXP.3\\
.INDENT -5
^^COMPLEX-TO-COMPLEX POWER FUNCTION (CEXP.3)\\
.SKIP 1
.INDENT -3
1.#^^CEXP.3\\CALCULATES ^A_^^B,WHERE ^A AND ^B ARE COMPLEX NUMBERS.
.SKIP 1
.INDENT -3
2.#^THE CALLING SEQUENCE FOR ^^CEXP.3\\IS
.SKIP 1
.INDENT 10
^&^MACRO-10\&###############^&^^FORTRAN#IV\&\\
.SKIP 1
.INDENT 5
^^MOVEI\\###16,ADR#####;ADDRESS OF^B(POWER)#####^^CALL CEXP.3\\(ARG)
.INDENT 5
^^PUSHJ\\###17,^^CEXP.3\\
.SKIP 1
ADR IS THE ADDRESS OF THE REAL PART OF THE POWER.
.SKIP 1
^THE BASE IS EXPECTED TO BE IN ACCUMULATORS 0 AND 1 WHEN THE PROGRAM
IS CALLED.#^THE ANSWER IS RETURNED IN ACCUMULATORS 0 AND 1.
.SKIP 1
.INDENT -3
3.#^THE FOLLOWING EXTERNAL PROGRAMS ARE CALLED BY ^^CEXP.3\\
.SKIP 1
.INDENT 5
^^CLOG\\-COMPLEX LOGARITHM PROGRAM
.INDENT 5
^^ALOG\\-REAL LOGARITHM PROGRAM
.INDENT 5
^^EXP\\-REAL EXPONENTIAL PROGRAM
.INDENT 5
^^SIN\\-REAL SINE PROGRAM
.INDENT 5
^^COS\\-REAL COSINE PROGRAM
.INDENT 5
^^EXP3.0\\-FLOATING-TO-FLOATING POWER PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^^CEXP.3\\IS 286 LOCATIONS LONG, OF WHICH 258 ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
6.#^^CEXP.3\\EXPECTS TWO COMPLEX ARGUMENTS:#THE BASE,IN
ACCUMULATORS 0 AND 1,AND THE POWER (TO WHICH THE BASE IS TO BE
RAISED) POINTED TO BY ACCUMULATOR 16.#^EACH ARGUMENT CNSISTS OF
A FLOATING-POINT REAL PART AND A FLOATING-POINT IMAGINATY PART.
.SKIP 1
.INDENT -3
8.#^^CEXP.3\\CALCULATES ^A_^^B, WHERE ^A=A1+IA2AND^B=B1+IB2.
^AT THE BEGINNING OF THE PROGRAM,SPECIAL CASE CHECKS ARE MADE:
.SKIP 1
A.##^IF^A=0,0.0)IS RETURNED AS THE ANSWER.
.BREAK
B.##^IF^A#0 AND ^B=0,THEN (1.0,0.0) IS RETURNED..
.BREAK
C.##^IF A2=B2=0 AND A1^&>\&0,THEN ^^EXP3.0\\IS CALLED TO 
CALCULATE #1_^B1,AND ^^CEXP.3\\RETURNS (A1_^B1,0.0).
.BREAK
^OTHERWISE,THE BASIC ALGORITHM USED IS:
.SKIP 1
.INDENT 5
^A_^^B=#[^^EXP\\#B1#LOGR#-B2#TH+^^ALOG[TRIG\\(B1#TH+B2#LOGR)]#
.INDENT 5
#(THE SIGN RETURNED BY ^^TRIG\\)
.SKIP 1
WHERE
.SKIP 1
.INDENT 5
LOGR=THE LOG OF #^A#
.INDENT 5
TH=THE ARCTANGENT OF A2#A1
.SKIP 1
AND ^^TRIG\\IS^^COS\\FOR THE REAL PART OF THE ANSWER AND ^^SIN\\
FOR THE IMAGINARY PART.
.SKIP 1
^IF OVERFLOW OR UNDERFLOW OCCURS IN THE CALCULATION, THE PROGRAM
JUMPS TO SPECIAL ROUTINES THAT MAKE USE OF THE FOLLOWING FACTS:
#THE ^^SIN\\AND ^^COS\\OF LARGE ARGUMENTS RETURN ZERO ANSWERS;
THE ^^EXP\\OF AN ARG GREATER THAN 89.0 IN MAGNITUDE OVERFLOWS
OR UNDERFLOWS;AND THE ^^EXP\\OF AN ARG THAT UNDERFLOWS IS 1.0.
.SKIP 1
.INDENT -3
9.#^IF EITHER THE REAL OR THE IMAGINARY PART OF THE FINAL
ANSWER OVERFLOWS OR UNDERFLOWS,# THE LARGEST REPRESENTABLE
NUMBER OR ZERO,RESPECTIVELY,IS RETURNED (WITH AN ERROR MESSAGE)
FOR THAT PART OF THE ANSWER.
.PAGE
.INDEX ^^CHANG\\
.INDENT -5
^^CHANGE NEGATIVE NUMBER FUNCTION (CHANG)\\
.SKIP 1
.INDENT -3
1.#^^CHANG\\CONVERTS A SIGN-MAGNITUDE NEGATIVE NUMBER TO A 
2S-COMPLEMENT NEGATIVE NUMBER,AND VICE VERSA.
.SKIP 1
^EXAMPLE:
.SKIP 1
.INDENT 5
400000000001 BECOMES 777777777777
.SKIP 1
^IF THE ARGUMENT AND ANSWER ARE INTEGER,THEN ^^CHANG\\MUST BE
DECLARED INTEGER IF IT IS CALLED FROM A ^FORTRAN MAIN PROGRAM.
.;.SKIP 1
.;.INDENT -3
.;5.#^THE PROGRAM IS EIGHT LOCATIONS LONG,OF WHICH SIX ARE 
.;EXECUTABLE INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^^CHANG\\PICKS UP ITS ARGUMENT IN ^^ACO\\.#^IF THE ARGUMENT
IS POSITIVE,^^CHANG\\EXITS IMMEDIATELY.#^OTHERWISE,IT PUTS THE
ARGUMENT INTO ^^ACO\\WITH A ^^MOVN\\INSTRUCTION AND THEN SETS
BIT 0 TO 1.
.SKIP 1
.INDENT -3
9.#^AN ANSWER OF 400000000000 AND AN ERROR MESSAGE ARE RETURNED
FOR AN ARGUMENT OF 400000000000.
.PAGE
.INDEX ^^CLOG\\
.INDENT -5
^^COMPLEX LOGARITHM FUNCTION (CLOG)\\
.SKIP 1
.INDENT -3
1.#^^CLOG\\CALCULATES THE NATURAL LOGARITHM OF A COMPLEX
ARGUMENT.
.SKIP 1
.INDENT -3
3.#^THERE ARE FOUR EXTERNAL PROGRAMS CALLED BY ^^CLOG.\\
.SKIP 1
.INDENT 5
^^ALOG\\-REAL LOGARITHM PROGRAM
.INDENT 5
^^ATAN2\\-REAL ARC TANGENT OF TWO ARGUMENTS
.INDENT 5
^^SQRT\\-REAL SQUARE ROOT PROGRAM
.INDENT 5
^^TYPER.\\-ERROR MESSAGE PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^^CLOG\\IS 56 LOCATIONS LONG,OF WHICH 43 ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE ALGORITHM USED TO CALCULATE THE LOGARITHM OF A COMPLEX
NUMBER,Z=X+IY,IS
.SKIP 1
.INDENT 5
LOG(Z)=LOG(#Z#)+#
.SKIP 1
WHERE
.SKIP 1
.INDENT 5
#Z#=ABSOLUTE VALUE OF Z
.INDENT 5
#=ATAN(Y/X)
.SKIP 1
#Z# IS CALCULATED IN THE FOLLOWING MANNER:#^LET ^L=THE LARGER
(IN MAGNITUDE) OF X AND Y,AND^S=THE SMALLER (IN MAGNITUDE) OF
X AND Y.#^THEN #Z#=^^L#SQRT\\(1+(^S/^L)2), WHERE ^S/^L AND
(^S/^L)2 ARE SET TO ZERO IF THEY UNDERFLOW.#^IF #Z# OVERFLOWS,
THE REAL PART OF THE ANSWER IS CALCULATED AS LOG(^L)+LOG^^(SQRT(1+
(S/L)\\2)).
.SKIP 1
.INDENT -3
9.#^AGAIN, A PRECISE ERROR ESTIMATE HAS NOT BEEN OBTAINED BECAUSE 
OF LACK OF AVAILABLE TABLES FOR COMPLEX FUNCTIONS.#^ERROR ESTIMATES
CAN BE OBTAINED BY SIMULATING COMPLEX NUMBERS WITH 
DOUBLE-PRECISION REAL PARTS AND IMAGINARY PARTS.#^IN GENERAL, THE 
PART OF THE ANSWER IS MORE ACCURATE THAN THE IMAGINARY PART
SINCE THE SQUARE ROOT PROGRAM IS MORE ACCURATE THAN THE ARC
TANGENT PROGRAM.
.PAGE
.INDEX ^^CMPLX\\
.INDENT -5
^^REAL-TO-COMPLEX CONVERSION FUNCTIN (CMPLX)\\
.SKIP 1
.INDENT -3
1.#^^CMPLX\\ CONVERTS TWO REAL (SINGLE-PRECISION FLOATING-POINT) ARGUMENTS,
X AND Y, TO A COMPLEX NUMBER Z=X+IY.#^IN CALLING SEQUENCE,
THE ADDRESS OF X (THE REAL PART OF THE RESULT) IS
SPECIFIED FIRST, FOLLOWED BY THE ADDRESS OF Y (THE IMAGINARY PART
OF THE RESULT).
.;.SKIP 1
.;.INDENT -3
.;5.#^^CMPLX\\ IS FIVE LOCATIONS LONG, OF WHICH FOUR ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^SINCE POINTERS TO THE REAL PART AND IMAGINARY PART OF THE
ANSWER EXIST, IT IS A SIMPLE TASK TO PICK UP THE REAL PART IN
ACCUMULATOR 0 AND THE IMAGINARY PART IN ACCUMULATOR 1.
.PAGE
.INDEX ^^CONJG\\
.INDENT -5
^^COMPLEX CONJUGATE FUNCTION (CONJG)\\
.SKIP 1
.INDENT -3
1.#^^CONJG\\ CALCULATES THE COMPLEX CONJUGATE OF A COMPLEX NUMBER.
.;.SKIP 1
.;.INDENT -3
.;5.#^^CONJG\\ IS SIX LOCATIONS LONG, OF WHICH FOUR ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE PROGRAM MAKES USE OF THE DEFINITION OF THE CONJUGATE,#, OF
A COMPLEX NUMBER Z.
.SKIP 1
.INDENT 5
Z=X+IY
.INDENT 5
#=X-IY
.SKIP 1
^THE REAL PART OF THE ARGUMENT IS PICKED UP AND LEFT AS THE REAL 
PART OF THE ANSWER.#^THE NEGATIVE OF THE IMAGINARY PART IS THEN 
PICKED UP AND LEFT AS THE IMAGINARY PART OF THE ANSWER.
.PAGE
.INDEX ^^COSH\\
.INDENT -5
^^SINGLE-PRECISION HYPERBOLIC COSINE FUNCTION (COSH)\\
.SKIP 1
.INDENT -31.#^^COSH\\ CALCULATES THE HYPERBOLIC COSINE OF A REAL
NUMBER.
.SKIP 1
.INDENT -3
3.#^THERE ARE TWO EXTERNAL PROGRAMS CALLED BY ^^COSH:\\
.SKIP 1
.INDENT 5
^^EXP\\-REAL EXPONENTIAL PROGRAM
.INDENT 5
^^TYPER.\\-ERRORMESSAGE PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^THE PROGRAM IS ELEVEN LOCATIONS LONG, EIGHT OF WHICH ARE
.;EXECUTABLE INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE HYPERBOLIC COSINE OF X IS CALCULATED
AS FOLLOWS:
.SKIP 1
.INDENT 5
^IF #X#<88.028
.INDENT 9
^^COSH\\(X)=1/2(^^EXP\\(X)+1.0/^^EXP\\(X))
.INDENT5
^IF #X#>88.028 AND #X# - LOGE2<88.028
.INDENT 9
^^COSH\\(X)=^^EXP\\(#X# - LOGE2)
.INDENT 5
^IF #X# - LOGE2>88.028
.INDENT 9
^^COSH\\(X)=377777777777 AND AN ERROR MESSAGE IS RETURNED.
.SKIP 1
88.028 IS 207540074636 OCTAL, AND IS THE VALUE AT WHICH ^^EXP\\
EQUALS THE LARGEST REPRESENTABLE NUMBER.
.PAGE
.INDEX ^^CSIN,CCOS\\
.INDENT -5
^^COMPLEX SINE AND COSINE FUNCTION (CSIN,CCOS)\\
.SKIP 1
.INDENT -3
1.#^^CSIN\\ CALCULATES THE SINE, AND ^^CCOS\\ CALCULATES THE COSINE
OF A COMPLEX NUMBER.
.SKIP 1
.INDENT -3
3.#^THE SIX EXTERNAL PROGRAMS CALLED BY ^^CSIN\\ ARE
.SKIP 1
.INDENT 5
^^SIN\\-REAL SINE
.INDENT 5
^^COS\\-REAL COSINE
.INDENT 5
^^ALOG\\-REAL LOGARITHM
.INDENT 5
^^EXP\\-REAL EXPONENTIAL
.INDENT 5
^^SINH\\-HYPERBOLIC SINE
.INDENT 5
^^COSH\\-HYPERBOLIC COSINE
.;.SKIP 1
.;.INDENT -3
.;5.#^THE PROGRAM IS 84 LOCATIONS LONG, 64 OF WHICH ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE STANDARD DEFINITIONS OF THE COMPLEX CIRCULAR FUNCTIONS ARE
USED IN THE CALCULATIONS MADE BY THIS PROGRAM:#FOR Z=X+IY,
.SKIP 1
.INDENT 5
SIN(Z)=SIN(X)COSH(Y)+ICOS(X)SINH(Y)
.INDENT 5
COS(Z)=COS(X)COSH(Y)-ISIN(X)SINH(Y)
.SKIP 1
^THE PROGRAM FIRST CALCULATES SIN(X) AND COS(X) AND PLACES THE
RESULTS IN ^^SINX\\ AND ^^COSX\\, RESPECTIVELY.#^THE PROGRAM
THEN CHECKS A FLAGWORD THAT IS 0 IF SIN(Z) IS TO BE CALCULATED
AND IS 1 IF COS(Z) IS TO BE CALCULATED.#^IF THE FLAGWORD IS 1,
COS(X) IS PLACED IN ^^SINX\\ AND -SIN(X) IS PLACED IN ^^COSX\\
AND THE PROGRAM CONTINUES.#(^AT THIS POINT, A SPECIAL CASE CHECK
IS MADE, AND FORY=0 (Z REAL) THE IMAGINARY PART OF THE ANSWER
IS SET TO ZERO AND THE REAL PART IS SET TO THE CONTENTS OF
^^SINX\\ AND THE ROUTINE EXITS.)#^NEXT THE VALUE OF Y IS CHECKED.
^IF #Y#<88.028, THE PROGRAM CALLS ^^SINH(^Y) AND ^^COSH(Y)\\
AND CONTINUES WITH THE STRAIGHTFORWARD CALCULATION.#^IF
#Y#>88.028, THE PROGRAM CALCULATES:
.SKIP 1
.INDENT 5
#REAL(ANSWER)#=^^EXP\\[(^^ALOG(\\#^^SINX\\#))-LOGE2+#Y#]
.INDENT 5
#IMAG(ANSWER)#=^^EXP\\[(^^ALOG(\\#^^COSX\\#))-LOGE2+#Y#]
.SKIP 1
AND THEN SETSTHE CORRECT SIGN FOR EACH PART OF THE ANSWER BY
CHECKING THE SIGNS OF ^^SINX,COSX \\ AND Y.
.SKIP 1
.INDENT -3
9.#^AGAIN, NO PRECISE ERROR ESTIMATES HAVE BEEN COMPILED FOR THE
COMPLEX SINE COSINE PROGRAM-AND, AS WITH THE OTHER COMPLEX ROUTINES,
WE NOTE THAT ONE ^&CAN\& MAKE A PRECISE ESTIMATE OF THE ERROR BY
SIMULATING COMPLEX NUMBERS WITH DOUBLE-PRECISION REAL PARTS AND
IMAGINARY PARTS.#^AS A GENERAL COMMENT ON THE ERROR SITUATION,
NOTE THAT THE ERROR IN THE REAL AND IMAGINARY PARTS IN THE MAIN
CALCULATION CAN ROUGHLY BE DESCRIBED BY
.SKIP 1
.INDENT 5
#^^ER\\#<#^EE#+#^ES#+^E1
.INDENT 5
#^^EI\\#<#^EE#+#^EC#+^E2
.SKIP 1
WHERE
.SKIP 1
.INDENT 5
^^ER\\-MAXIMUM ERROR IN REAL PART
.INDENT 5
^^EI\\-MAXIMUM ERROR IN IMAGINARY PART
.INDENT 5
^EE=MAXIMUM ERROR GENERATED BY ^^EXP\\
.INDENT 5
^ES=MAXIMUM ERROR GENERATED BY ^^SIN\\
.INDENT 5
^EC=MAXIMUM ERROR GENERATED BY ^^COS\\
.SKIP 1
AND
.SKIP 1
.INDENT 5
^E1=LOCAL TRUNCATION ERRORS INTRODUCED IN THE COMBINATION OF SINE
.INDENT5
AND EXPONENTIAL FOR THE REAL PART.
.SKIP 1
.INDENT 5
^E2=LOCAL TRUNCATION ERRORS INTRODUCED IN THE COMBINATION OF
.INDENT 5
COSINE AND EXPONENTIAL FOR THE IMAGINARY PART.
.SKIP 1
^IF OVERFLOW OCCURS, AN ANSWER OF # INFINITY (377777777777 OR
400000000001) AND A FLOATING OVERFLOW ERROR MESSAGE ARE
RETURNED FOR THE PART OF THE ANSWER IN WHICH THE OVERFLOW
OCCURRED.#^IF UNDERFLOW OCCURS, AN ANSWER OF ZERO AND A FLOATING
UNDERFLOW ERROR MESSAGE ARE RETURNED FOR THE PART OF THE ANSWER IN
WHICH THE UNDERFLOW OCCURRED.
.PAGE
.INDEX ^^CSQRT\\
.INDENT -5
^^COMPLEX SQUARE ROOT FUNCTION (CSQRT)
.SKIP 1
.INDENT -3
1.#^^CSQRT\\ CALCULATES THE SQUARE ROOT OF A COMPLEX NUMBER.
.SKIP 1
.INDENT -3
3.#^THERE IS ONE EXTERNAL PROGRAM CALLED BY ^^CSQRT\\:
.SKIP 1
.INDENT 5
^^SQRT\\-REAL SQUARE ROOT PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^THE PROGRAM IS 82 LOCATIONS LONG, OF WHICH 68 ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE ALGORITHM USED BY ^^CSQRT\\ TO CALCULATE THE SQUARE ROOT
(A+IB) OF A COMPLEX NUMBER Z (WHERE Z=X+IY) IS:
.SKIP 1
.INDENT 5
^IFX>0 AND Y>0,
.INDENT 9
A=^^SQRT\\((#X#+#X+IY#)/2)
.INDENT 9
B=Y/(2A)
.INDENT 5
^IF X>0 AND Y<0,
.INDENT 9
A=-^^SQRT\\((#X#+#X+IY#)/2)
.INDENT 9
B=Y/(2A)
.INDENT 5
^IF X<0 AND Y>0,
.INDENT 9
A=Y/(2B)
.INDENT 9
B=^^SQRT\\((#X#+#X+IY#)/2)
.INDENT 5
^IF X<0 AND Y<0,
.INDENT 9
A=Y/(2B)
.INDENT 9
B=^^SQRT\\((#X#+#X+IY#)/2)
.SKIP 1
^THE ARGUMENT FOR THE ^^SQRT\\ ROUTINE CAN BE CALCULATED IN SEVERAL
DIFFERENT WAYS (DEPENDING ON THE MAGNITUEDS OF X AND Y) BECAUSE
OF OVERFLOW AND UNDERFLOW PROBLEMS.
.PAGE
.INDEX ^^DABS\\
.INDENT -5
^^DOUBLE-PRECISION ABSOLUTE VALUE FUNCTION (DABS)\\
.SKIP 1
.INDENT -3
1.#^^DABS\\ RETURNS THE ABSOLUTE VALUE OF A DOUBLE-PRECISION
ARGUMENT.
.;.SKIP 1
.;.INDENT -3
.;5.#^^DABS\\ IS EIGHT LOCATIONS LONG, SIX OF WHICH ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE DOUBLE-PRECISION ARGUMENT IS LOADED INTO ACCUMULATORS
0 AND 1.#^THE SIGN OF THE HIGH-ORDER WORD OF THE ARGUMENT
IS THEN CHECKED, ND, IF NEGATIVE, THE ARGUMENT IS NEGATED.
.PAGE
.INDEX ^^DATAN\\
.INDENT -5
^^DOUBLE-PRECISION ARC TANGENT FUNCTION (DATAN)\\
.SKIP 1
.INDENT -3
1.#^^DATAN\\ CALCULATES THE ARC TANGENT (PRINCIPAL VALUE) OF A
DOUBLE-PRECISION NUMBER.
.;.SKIP 1
.;.INDENT -3
.;5.#^^DATAN\\ IS 192 LOCATIONS LONG, OF WHICH 153 ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE ARGUMENT, ^X, IS REDUCED TO THE RANGE
.SKIP 1
.INDENT 5
0<^X<1/2
.SKIP 1
WITH THE FOLLOWING IDENTITIES
.SKIP 1
.INDENT 5
^^ATAN\\(-^X)=-^^ATAN\\(^X)
.INDENT 5
IF ^X>1.0, ^^ATAN\\8^X)=#/2 - ^^ATAN\\(1/^X)
.INDENT 5
IF 0.5<^X<1.0, ^^ATAN\\(^X)=^^ATAN\\(1/2)+^^ATAN\\(2^X-1/^X+2)
.SKIP 1
^AFTER THIS REDUCTION HAS TAKEN PLACE, THE ARC TANGENT OF THE REDUCED
ARGUMENT IS CALCULATED WITH THE FOLLOWING CONTINUED FRACTION.
.SKIP 1
.INDENT 5
^^ATAN\\(^X)=##.^X/^Z+^B0+^A1/^Z+^B1+^A2/^Z+^B2+^A3/^Z+^B3
.SKIP 1
WHERE
.SKIP 1
.INDENT 5
^Z=^X_^2
.SKIP 1
^THE CONSTANTS HAVE THE FOLLOWING VALUES.
.SKIP 1
.INDENT 1
^&^CONSTANT\&#######^&^DECIMAL ^VALUE\&##############^&^OCTAL ^VALUE\&
.SKIP 1
.INDENT 1
###############12.37469#38775#51020#######204613772770##151036057513
.INDENT 1
^B0############26.27277#52490#26981#######205644272446##152242672522
.INDENT 1
^A1###########-80.34270#56102#16600#######570276502107##154076375544
.INDENT 1
^B1#############6.36424#16870#04411#3#####203627237361##150353030306
.INDENT 1
^A2############-1/19144#72238#50426#5#####576316772502##146225160256
.INDENT 1
^B2#############2.10451#89515#40979#0#####202415301602##147032562064
.INDENT 1
^A3############-0.07833#54278#56532#118###602277106546##142636357263
.INDENT 1
^B3#############1.25846#41124#27629#0#####201502125320##146760417550
.INDENT 1
#/2#############1.57079#63267#94896#6#####201622077325##146042055061
.INDENT 1
^^ATAN\\(1/2)###0.46364#76090#01000#00####177732614701##144247502334
.PAGE
.INDEX ^^DATAN\\2
.INDENT -5
^^DOUBLE-PRECISION ARC TANGENT OF TWO ARGUMENTS (DATAN\\2)
.SKIP 1
.INDENT -3
1.#^^DATAN\\2(^Y,^X) CALCULATES A DOUBLE-PRECISION ARC TANGENT GIVEN
AN ^X COORDINATE AND A ^Y COORDINATE BY CALLINE ^^DATAN (Y/X).\\
^IN THE CALLING SEQUENCE, THE ADDRESS OF ^Y IS SPECIFIED FIRST,
FOLLOWED BY THE ADDRESS OF ^X.
.SKIP 1
.INDENT -3
3.#^THERE ARE TWO EXTERNAL PROGRAMS CALLED BY ^^DATAN\\2.
.SKIP 1
.INDENT 5
^^DATAN\\-DOUBLE-PRECISION "PRINCIPAL VALUE" ARC TANGENT
.INDENT 5
^^TYPER.\\-ERROR MESSAGE PROGRAM
.;.SKIP 1
.;.INDENT -3
.;5.#^^DATAN\\2 IS 65 LOCATIONS LONG, OF WHICH 55 ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^AS INDICATED IN (1), MOST OF THE WORK IS DONE BY ^^DATAN\\.
#^THE SPECIFIC ALGORITHM USED BY ^^DATAN\\2 IS ANALOGOUS TO THAT
USED BY ^^ATAN\\2 AND IS AS FOLLOWS.
.SKIP 1
A.#^THE ARGUMENT PAIR TO ^^DATAN\\2 SPECIFY A QUADRANT, WHICH
LOCATES THE ARGUMENT GIVEN TO ^^DATAN\\.
.SKIP 1
B.#^IF THE ARGUMENT IS IN THE SECOND QUADRANT,
.INDENT 5
^^DATAN\\2(^Y,^X)=^^DATAN\\(^Y/^X)+#
.SKIP 1
C.#^IF THE ARGUMENT IS IN THE THIRD QUADRANT,
.INDENT 5
^^DATAN\\2(^Y,^X)=^^DATAN\\(^Y/^X)-#
.SKIP 1
D.#^IF THE ARGUMENT IS IN THE FIRST OR FOURTH QUADRANT, THEN
.INDENT 5
^^DATAN\\2(^Y,^X)=^^DATAN\\(^Y/^X)
.SKIP 1
^THE VALUE OF # WHICH WAS USED IS
.INDENT 5
#=3.14159#26535#89793#2
.INDENT 6
=202622077325#147042055061 (OCTAL)
.SKIP 1
.INDENT -3
9.#^IF ^X AND ^Y ARE BOTH ZERO, A FLOATING DIVIDE CHECK MESSAGE
IS RETURNED.
.PAGE
.INDEX ^^DBLE\\
.INDENT -5
^^SINGLE-PRECISION TO DOUBLE-PRECISION CONVERSION FUNCTION (DBLE)\\
.SKIP 1
.INDENT -3
1.#^^DBLE\\ CONVERTS A SINGLE-PRECISION, FLOATING-POINT NUMBER TO
A DOUBLE-PRECISION, FLOATING-POINT NUMBER.
.;.SKIP 1
.;.INDENT -3
.;5.#^^DBLE\\ IS FIVE LOCATIONS LONG, THREE OF WHICH ARE 
.;EXECUTABLE INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE CONVERSION IS MADE BY SETTING THE HIGH-ORDER PART OF THE
DOUBLE-PRECISION ANSWER EQUAL TO THE SINGLE-PRECISION ARGUMENT
AND SETTING THE LOW-ORDER PART EQUAL TO 0.

.PAGE
.INDEX ^^DEXP\\
.INDENT -5
^^DOUBLE-PRECISION EXPONENTIAL FUNCTION (DEXP)\\
.SKIP 1
.INDENT -3
1.#^^DEXP\\ CALCULATES THE EXPONENTIAL OF A DOUBLE-PRECISION
ARGUMENT.
.;.SKIP 1
.;.INDENT -3
.;5.#^^DEXP\\ IS 201 LOCATIONS LONG, OF WHICH 151 ARE EXECUTABLE
.;INSTRUCTIONS.
.SKIP 1
.INDENT -3
8.#^THE PROGRAM TO CALCULATE THE EXPONENTIAL CAN BE BROKEN INTO TWO
MAIN TASKS:
.SKIP 1
A.#REDUCE THE ARGUMENT TO AS SMALL A RANGE AS POSSIBLE,
B.#USE AN EFFICIENT APPROXIMATION TO CALCULATE THE EXPONENTIAL
OF THE REDUCED ARGUMENT.
.SKIP 1
^THE READER IS REFERRED TO THE ARTICLE ON THE GENERATION OF
ELEMENTARY FUNCTIONS BY ^DR.^E.^G.^KOGBETLIANTZ IN
^&^MATHEMATICAL ^METHODS FOR ^DIGITAL ^COMPUTERS\& BY
^RALSTON AND ^WILF FOR A VARIETY OF ALGORITHMS FOR E_^X.
.SKIP 1
^THE ALGORITHM USED BY ^^DEXP\\ IS BASED ON THE WORK DONE BY 
^DR.^KOGBETLIANTZ AND CAN BE SUMMARIZED ROUGHLY AS:
.SKIP 1
A.#WRITE THE CALCULATION TO BE PERFORMED AS
.SKIP 1
.INDENT 5
E_^X=2_^X_^#_^LOG2_^(E)
.SKIP 1
B.#REWRITE THE ABOVE EXPRESSION AS
.SKIP 1
.INDENT 5
2_^X_^#_^LOG2_^(E)=2_^^]_^+_^^^F
.SKIP 1
WHERE ^M IS AN INTEGER, AND _^F IS A FRACTION.
.SKIP 1
C.#WRITE THE ABOVE EXPRESSION AS
.SKIP 1
.INDENT 5
2_^^M_^+_^^F=2_^^M_^+_^^^N_^+_^R
.SKIP 1
WHERE
.SKIP 1
.INDENT 5
^O<^R<1/8 AND
.INDENT 5
^M+^N+^R=^M+^F=X#LOG2(E)
.SKIP 1
D.#THEN WE HAVE
.SKIP 1
.INDENT 5
E_^X=2_^^M#2_^^N#2_^^R
.SKIP 1
WHERE
.SKIP 1
.INDENT 5
2_^^M IS CALCULATED WITH A FLOATING SCALE INSTRUCTION.
.INDENT 5
2_^^N IS CALCULATED BY A TABLE LOOKUP ON A PRECOMPUTED LIST OF POWERS
.INDENT 5
OF 2 FROM 21/8 TO 27/8.
.INDENT 5
2_^^R IS CALCULATED WITH A RATIONAL APPROXIMATION OF THE FORM:
.SKIP 1
.INDENT 5
E^R LOGE(2)=2^R=^A4/1+^B4/^R-^C4+^D4#^R+^H4/^R+^B4/^R
.SKIP 1
^FOR COMPLETENESS, WE LIST HERE THE CONSTANTS USED IN THE PROGRAM,
BOTH IN DECIMAL AND OCTAL.#^THE READER SHOULD REFER TO ^APPENDIX ^B
FOR AN EXPLANATION OF THE DOUBLE-PRECISION WORD FORMAT.
.SKIP 1
.INDENT 1
.NOFILL

 21/8        1.09050 77326 65257 7     201427127017   146076521366
 22/8        1.18920 71150 02721 1     201460337602   146430667052
 23/8        1.29683 95546 51009 7     201513773265   146233052116
 24/8        1.41421 35623 73095 0     201552023631   146477473631
 25/8        1.54221 08254 07840 8     201612634520   146425240667
 26/8        1.68179 28305 07429 1     201656423746   146255323533
 27/8        1.83400 80864 09342 5     201725403067   146175644416
 ^A4        60.59319 17173 36463       206744575555   153144433733
 ^B4        87.41749 72022 35527       207535527021   154427561365
 ^C4        30.29659 58586 68232       205744575555   152144433733
 ^D4         1.05000 00000 00000 0     201414631463   146146314632
 ^H4       214.17286 81454 7704        210654261010   155543353005
.FILL
.SKIP 1
^THESE VALUES WERE DERIVED FROM THE FOLLOWING ALGEBTAIC
EXPRESSIONS IN ^KOGBETLIANTZ'S ARTICLE.
.SKIP 1
.INDENT 5
^G =LOG2(E)=1.44269 50408 88963 40740
.INDENT 5
^A4 =42^G
.INDENT 5
^B4 =42^G_^2
.INDENT 5
^C4 =21^G
.INDENT 5
^D4 =1.05
.INDENT 5
^H4 =1029^G_^2/10
.SKIP 1
^THE PRECEDING INFORMATION SHOULD PROVE SUFFICIENT TO CONSTRUCT
A PROGRAM ON ANY MACHINE.#^FOR THOSE WHO WISH TO UNDERSTAND THE
WORKINGS OF THE ^^PDP\\-10 VERSION OF THE ABOVE ALGORITHM,
HOWEVER,SOME EXPLANATION OF THE CODING IS NECESSARY.#^WHILE THE
CALCULATION OF THE RATIONAL FRACTION
.SKIP 1
.INDENT 5
1+^A4/^B4-^C4+^D4#^R+^H4/^&^R\&^R+^B4/^R
.SKIP 1
IS FAIRLY STRAIGHTFORWARD,THE SECTION OF THE PROGRAM THAT REDUCES
THE RANGE OF THE ARGUMENT WOULD PROBABLY LEAVE THE UNINITIATED
READER OF THE ^^DEXP\\ PROGRAM LISTING A BIT BEWILDERED.
.SKIP 1
^ACCORDINGLY,AN ATTEMPT WILL BE MADE TO DESCRIBE THE CODING
FOUND IN ^^DEXP\\:
.SKIP 1
A.#^THE ARGUMENT IS PICKED UP AND CHECKED FOR SPECIAL CASES.
^IF THE ARGUMENT IS 0, ^^DEXP\\ RETURNS 1.0, IF IT IS
GREATER THAN 88.028, ^^DEXP\\ RETURNS 377777777777 344777777777
AND IF IT IS LESS THAN -88.028, ^^DEXP\\ RETURNS 0.
.SKIP 1
B.#^THE ARGUMENT IS MULTIPLIED BY LOG2(E) TO OBTAIN A NEW WORKING
ARGUMENT IN ACCUMULATORS ^A AND ^B.#^THE EXPONENT IS PLACED
RIGHT-JUSTIFIED IN ACCUMULATOR ^E, AND THE FRACTION BITS ARE
PLACED LEFT-JUSTIFIED IN ACCUMULATORS ^A AND ^B.
.SKIP 1
C.#^^DEXP\\ THEN PREPARES TO CONVERT THE ARGUMENT ^X INTO THE FORM
.SKIP 1
.INDENT 5
^X = ^M+^F
.SKIP 1
WHERE ^M IS AN INTEGER AND ^F IS A FRACTION.#^THIS IS ACCOMPLISHED
BY SHIFTING THE DOUBLE-PRECISION FRACTION IN ACCUMULATORS ^A AND
^B A SPECIFIC NUMBER OF PLACES TO THE RIGHT#LEAVING THE
INTEGER PART,^M,IN ACCUMULATOR ^A AND THE FRACTION PART,^F,
IN ACCUMULATORS ^B AND ^C.
.SKIP 1
^THE NUMBER OF PLACES THAT THE FRACTION IS CONTROLLED BY
THE EXPONENT IN ACCUMULATOR ^E.#^THE ENTIRE FRACTION IS SHIFTED
RIGHT [243 - ^C(ACCUMULATOR ^E)] PLACES (REMEMBER THAT THE
EXPONENT IN ^E IS "EXCESS 200").#^THIS IS NOT EASILY DONE,
BECAUSE WE WANT TO INVOLVE ACCUMULATORS ^A,^B,AND ^C IN THE
SHIFT AND THE ^^PDP\\-10 INSTRUCTION SET DOES NOT INCLUDE A
TRIPLE ACCUMULATOR SHIFT.#^TO SIMULATE THIS TYPE OF SHIFT,
ANOTHER COPY OF THE FRACTION IN ACCUMULATORS ^A AND ^B IS
LOADED INTO ACCUMULATORS ^C AND ^D.#^THE ALGORITHM THEN
.SKIP 1
.INDENT 5
(1)#SHIFTS ^A AND ^B [243-^C(^E)] RIGHT.
.INDENT 5
(2)#SHIFTS ^C AND ^D [^C(^E)-200+43] LEFT.
.SKIP 1
^FINALLY, THIS SECTION OF CODE CLEARS THE SIGN BIT IN THE RESULTANT
FRACTION IN ACCUMULATORS ^B AND ^C.#^THE MOTIVATION FOR THIS ACTION
FOLLOWS FROM THE FACT THAT THE ARGUMENT MAY HAVE BEEN
^&NEGATIVE\& AND WE REQUIRE THE FRACTION ^F TO BE ^&POSITIVE.\\&
.SKIP 1
.INDENT 5
^O<^F<1
.SKIP 1
^FOR EXAMPLE, IF THE ARGUMENT ^X WAS -3.4, THE SHIFTING ACTION
DESCRIBED ABOVE WOULD HAVE RESULTED IN
.SKIP 1
.INDENT 5
^M=-3
.INDENT 5
^F=-0.4
.SKIP 1
^BY CLEARING THE SIGN BIT IN THE REPRESENTATION OF ^F, WE EFFECTIVELY
CHANGE ^F TO 1-^F.#^WE ALSO NOTE THAT SINCE THE SHIFTING OPERATION
DESCRIBED ABOVE RESULTS IN 1S-COMPLEMENT NUMBERS IN THE CASE OF
NEGATIVE ARGUMENTS, WHAT WE ^&REALLY\& HAD WAS
.SKIP 1
.INDENT 5
^M=-4
.INDENT 5
^F=-0.4
.SKIP 1
^HENCE, CLEARING THE SIGN BIT FOR THE EXAMPLE OF ^X=-3.4
EFFECTIVELY GIVES US
.SKIP 1
.INDENT 5
^X=(^M-1)+(1-^F)
.SKIP 1
OR 
.SKIP 1
.INDENT 5
^M=-4
.INDENT 5
^F=0.6
.SKIP 1
WHICH CONFORMS TO THE REQUIREMENTS OF THE ALGORITHM.
.SKIP 1
D.#^THE FRACTION ^F IS FURTHER REDUCED BY COMPARING IT AGAINST THE
TABLE OF POWERS OF 2.#^THE REDUCTION IS EFFECTED BY SUBTRACTING #
FROM THE ARGUMENT WHERE
.SKIP 1
.INDENT 5
# IS AN ELEMENT OF THE SET ^K=1/8, 2/8, 3/8, 4/8, 5/8, 6/8, 7/8
.INDENT 5
# IS THE LARGEST ELEMENT OF ^K SUCH THAT #<^F.
.SKIP 1
E.#^^DEXP\\ THEN "REMEMBERS" TO MULTIPLY THE FINAL ANSWER BY
2#, AND PROCEES TO CALCULATE 2_^^F-# WITH THE RATIONAL FRACTION
DESCRIBED ABOVE.
.SKIP 1
.INDENT -3
9.#^IF OVERFLOW OR UNDERFLOW OCCUR, AN ANSWER OF 377777777777
344777777777 OR 0 0, RESPECTIVELY, IS RETURNED WITH THE 
APPROPRIATE ERROR MESSAGE.
.PAGE
.INDEX ^^DEXP.2\\
.INDENT -5
^^DOUBLE-PRECISION TO INTEGER POWER FUNCTION (DEXP.2)\\
.SKIP 1
.INDENT -3
1.#^^DEXP.2\\ CALCULATES ^A_^^B, WHERE ^A IS A DOUBLE-PRECISION
NUMBER AND ^B IS AN INTEGER.
.SKIP 1
.INDENT -3
2.#^THE CALLING SEQUENCE TO ^^DEXP.2\\ IS AS FOLLOWS
.SKIP 1
.INDENT 5
^^MOVEI   \\16,ADR
.INDENT 5
^^PUSHJ\\   17,^^DEXP.2\\
.SKIP 1
WHERE ADR IS THE ADDRESS OF THE INTEGER POWER TO WHICH THE
DOUBLE-PRECISION BASE LOCATED IN ACCUMULATORS 0 AND 1 IS TO BE
RAISED.#^THE ANSWER IS RETURNED IN ACCUMULATORS 0 AND 1.
.;.SKIP 1
.;.INDENT -3
.;5.#^^DEXP.2\\ IS 76 LOCATIONS LONG, OF WHICH 67 ARE EXECUTABLE
,;INSTRUCTIONS.
.SKIP 1
.INDENT -3
6.#^^DEXP.2\\ EXPECTS ONE DOUBLE-PRECISION ARGUMENT AND ONE
SINGLE-PRECISION ARGUMENT.#^THE DOUBLE-PRECISION ARGUMENT IS
ASSUMED TO BE IN ACCUMULATORS 0 AND 1 WHEN THE PROGRAM IS
CALLED, AND THE ADDRESS OF THE POWER IS ASSUMED TO BE IN 
ACCUMULATOR 16.
.SKIP 1
.INDENT -3
8.#^THE ALGORITHM USED BY ^^DEXP.2\\ IS PREDICTABLY SIMILAR TO
THAT USED IN ^^EXP2.\\#^THE CALCULATION CARRIED OUT BY ^^DEXP.2\\
IS
.SKIP 1
.INDENT 5
^A_^^B
.SKIP 1
^B IS REPRESENTED INTERNALLY AS
.SKIP 1
.INDENT 5
^B=^Q^O*2_^O+^Q1*2_^1+^Q2*2_^2+...+^QN*2_^N
.SKIP 1
WHERE
.SKIP 1
.INDENT 5
^A# = 0 IF BIT I IS OFF/1 IF BIT I IS ON
.SKIP 1
^THE EXPRESSION ^A_^^B CAN THEN BE REPRESENTED AS
.SKIP 1
.INDENT 5
^A_^^B=^A_^^Q0_^2_^0 +...+^QN*2_^N
.SKIP 1
OR, EQUIVALENTLY, AS
.SKIP 1
.INDENT 5
^A_^^B=^K0*^K1*^K2***^KN
.SKIP 1
WHERE
.SKIP 1
.INDENT 5
^KI=1 IF ^QI=0/^A_^2_^I IF ^QI=1
.SKIP 1
^THE PROGRAM CAN THUS BE DESCRIBED BASICALLY AS A LOOP, EACH
ITERATION OF WHICH:
.SKIP 1
A.#^UPDATES THE CALCULATION OF ^KI, ASSUMING THAT ^QI=1.#^THIS
SECTION THUS CALCULATES ^A_^1,^A_^2,^A_^4,^A_^8,...SUCCESSFULLY.
.SKIP 1
B.#^CHECKS BIT I TO SEE IF THE ^KI SHOULD BE MULTIPLIED INTO A
RUNNING PRODUCT (WHICH WILL EVENTUALLY FORM THE ANSWER).
.SKIP 1
C.#^CHECKS TO SEE IF ALL BITS IN THE INTEGER POWER HAVE BEEN
EXAMINED AS ABOVE.#^IF THE INTEGER POWER IS NEGATIVE,
^^DEXP.2\\ MAKES USE OF THE FACT THAT
.SKIP 1
.INDENT 5
^A_^-_^^B= #1/^A#_^^B
.SKIP 1
^THE INTEGER POWER IS NEGATED, ^A IS INVERTED, AND THE PROGRAM
CONTINUES.
.SKIP 1
.INDENT -3
9.#^IF ^A_^^B OVERFLOWS OR UNDERFLOWS, AN ANSWER OF + THE LARGEST
REPRESENTABLE NUMBER AND A FLOATING OVERFLOW ERROR MESSAGFE,
OR AN ANSWER OF ZERO AND A FLOATING ERROR MESSAGE,
RESPECTIVELY, ARE RETURNED.
T@9y