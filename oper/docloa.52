					100-460-011-00

SUBJECT:	LOADER VERSION 52

DATE:		SEPT-7-70
THE INFORMATION IN THIS MEMORANDUM IS
SUBJECT TO CHANGE WITHOUT NOTICE AND
SHOULD NOT BE CONSTRUED AS A COMMITMENT
BY DIGITAL EQUIPMENT CORP.
					100-460-011-00
					PAGE	2

SECTION	ONE
-----------

	BIBLIOGRAPHY
	------------

	PAGES 525-538		PDP-10 REFERENCE HANDBOOK
	100-118-007-00		TWOSEG DOC	(APPENDIX 1)
	100-540-001-00		DIDAL DOC	(APPENDIX 2)
					100-460-011-00
					PAGE	3

SECTION	TWO
-----------

	NEW CAPABILITIES
	----------------

1.	ABILITY TO LOAD HIGH AND LOW SEGMENT CODE IN ANY ORDER IN THE
	SAME PROGRAM.(TWOSEG CODE AS PUT OUT BY MACRO V.44)
	SEE 100-118-007-00 FOR DETAILS.

2.	NOW RECOGNIZES LOWER CASE COMMANDS.

3.	WILL LOAD SUPPRESSED INTERNALS (RADIX50 44,SYMBOL) AS PUT
	OUT BY MACRO V.44 FOR THE FOLLOWING:-
	INTERN SYMBOL
	SYMBOL==VALUE

4.	ALLOW LISTING OF LOCAL SYMBOLS IN LOADER MAP.
	FEATURE TURNED ON BY /1M

5.	WILL TRANSFER SYMBOL TABLE TO HIGH SEGMENT UPON REQUEST.
	FEATURE TURNED ON BY /1B

6.	CONTROL Z (^Z) NOW THE SAME AS EFFECT AS ALTMOD.
	A FIX FOR BATCH.

7.	SPEED UP SEQUENTIAL LIBRARY SEARCHING IF SKIPPING A PROGRAM.

8.	ADD NEW DIRECT ACCESS LIBRARY SEARCHING.
	SEE 100-540-001-00 FOR DETAILS.

9.	ADD ALGOL SWITCH (ALGSW=1) TO ASSEMBLE CODE TO LOAD
	ALGOL OWN BLOCK (TYPE 15).
	ALGSW=0 IS DEC STANDARD SETTING UNTIL ALGOL IS AVAILABLE.

10.	ADD CODE TO HANDLE BLOCK TYPE 0 (ALSO FOR ALGOL)
	IF BLOCK TYPE IS 0 JUST IGNORE THE NUMBER OF WORDS FOLLOWING
	AS SPECIFIED IN THE RIGHT HALF OF THE ZERO HEADER BLOCK.

11.	INCLUDE CODE TO LOAD SAIL OUTPUT.(BLOCK TYPE 15 AND 16)
	SAIL IS A NON-DEC ASSEMBLER.
	THIS IS UNDER ASSEMBLY CONTROL OF SAILSW.
	SAILSW=0 IS STANDARD DEC SETTING.

12.	INCLUDE CODE UNDER SEG2SW TO ASSEMBLE LOADER WITH MACRO V.44
	TO GIVE TWO RELOCATABLE SEGMENT BINARY.THE SAME SHR FILE IS
	PRODUCED WHETHER SEG2SW IS ON OR OFF.
	STANDARD SETTING IS SEG2SW=1 IF MACRO V.44 (=0 IF OTHERWISE)
	NOTE. SEG2SW=1 CODE WILL NOT LOAD WITH LOADER V.51

13.	ADD ASSEMBLY CONTROL SWITCH REENT.MOST OF CODE UNDER TEN30
	SWITCH SHOULD BE UNDER REENT SWITCH SO THAT SINGLE RELOCATION
	MACHINES CAN HAVE SMALLER LOADER.
	STANDARD SETTING IS REENT=1
	NOTE. TEN30 IMPLIES REENT=0
14.	ADD CODE TO HANDLE COMPILER TYPE AS PUT OUT IN LEFT HALF OF
	SECOND WORD OF NAME BLOCK (RIGHT HALF USUALLY COMMON SIZE).
	USED BY ALGOL AND COBOL.

15.	GIVEN 14. IF LOADING COBOL SEARCH LIBOL RATHER THAN LIB40.

16.	CHANGE V SWITCH TO SCAN IMP40 IN LIBRARY SEARCH MODE BEFORE
	LIB40.THIS IS FOR NEW REENTRANT FORSE.
	NOTE. /V NO LONGER MEANS LOAD IMP40 AT LOC 140
	THEREFORE USER WITH THE OLD REENTRANT FORSE WILL HAVE TO LOAD
	IMP40 EXPLICITLY FROM SYS.

17.	NOTE.
	CHAIN HAS BEEN EXTENSIVELY MODIFIED TO FIX A BUG.
	THE NEW CHAIN (V.51) SAVES ONE ADDITIONAL WORD (JOBCHN)
	COMPARED TO CHAIN V.50.THIS MEANS THAT THE LOADER MUST ALSO
	SAVE JOBCNH OVER EACH LINK.THIS FIX IS IN LOADER V.52.
	THEREFORE LOADER V.52 WILL NOT RUN WITH CHAIN V.50
	CHAIN V.51 MUST BE USED.

20.	MAKE IT POSSIBLE TO LOAD CHAIN FILES VIA AN INDIRECT FILE.
	E.G.
	R LOADER
	*CHNFIL.CCL@
	WHERE CHNFIL.CCL
	CONTAINS COMMANDS TO LOADER TO LOAD SEVERAL LINKS.
	THIS IS POSSIBLE ONLY IF THE COMMANDS TO WRITE OUT THE LINKS
	TERMINATE WITH RETURN-LINE FEED NOT ALTMOD
	I.E. DSK:LINK1_/C
	NOT DSK:LINK1_/C$
	ALSO ALL LINKS MUST BE LOADED BEFORE THE STARTING CORE IMAGE.
	THE LAST COMMAND IN THE INDIRECT FILE MUST BE ALTMOD$.


21.	TEN30 LOADER NOW WORKS.
	NEW FEATURE SWITCH SPMON GIVES SMALLEST POSSIBLE LOADER
	TO LOAD MONITOR UNDER SPMON.(TEN30=1,K=1)

22.	A CHECK IS NOW MADE FOR MISSING END BLOCK
	(TYPE 5 RELOCATION CONSTANT BLOCK).IF IT IS MISSING A MESSAGE
	NO END BLOCK PROG. XXXXX
	IS OUTPUT.

23.	MAP OUTPUT CHANGED SO THAT BOTH HIGH AND LOW SEGMENT LENGTHS
	ARE PRINTED FOR EACH PROGRAM.PROGRAMS CONSISTING ONLY
	OF ONE SEGMENT IN A TWO SEGMENT LOAD WILL PRINT ZERO
	IN THE CORRESPONDING COLLUMN.

24.	SOME NEGATIVE SWITCHES HAVE BEEN IMPLEMENTED:
	/-A IS EQUIVALENT TO /X
	/-I IS EQUIVALENT TO /J
	/-L IS EQUIVALENT TO /N
	/-P IS EQUIVALENT TO /Q
	/-S IS EQUIVALENT TO /W

	FOR THE PRESENT /X, /J, /N, /Q, AND /W STILL WORK.
					100-460-011-00
					PAGE	3

	BUG FIXES
	---------

1.	STR	10-1328
	STORAGE MAP NOT ALWAYS TERMINATED BY A CR-LF ON TTY.

2.	STR	10-1380
	EXPANDING OF CORE TAKES A LONG TIME TO FAIL IF A LARGE
	FORTRAN ARRAY IS BEING LOADED AND WILL NOT FIT IN CORE.

3.	STR	10-1521,10-2060
	DIFFICULT TO ASSEMBLE A NON-REENTRANT LOADER.

4.	STR	10-1644,2099
	10/30 LOADER WOULD NOT WORK.

5.	STR	10-1720,2086
	IF PROGRAM BEING LOADED IS TOO LARGE LOADER LOOPS PRINTING
	OUT ERROR MESSAGE.

6.	STR	10-1737
	OCCASIONAL ADDRESS CHECK WHEN WRITING A CHAIN FILE.

7.	STR	10-1816,2104
	ADDRESS CHECK FOR DEVICE IF ANY ERRORS OR UNDEFINED SYMBOLS.

8.	STR	10-1819
	MUCH OF TEN30 CODE SHOULD BE UNDER A DIFFERENT SWITCH SO
	THAN  SINGLE RELOCATION REGISTER MACHINES COULD USE SMALLER
	LOADER.

9.	STR	10-2076
	DATA STATEMENT OVERFLOW ON VALID DATA STATEMENT.

10.	STR	10-2127
	IF LOADER IS NEAR A 1K BOUND IN LOW SEGMENT WHEN STARTED FROM
	CCL IT EXPANDS CORE BUT RETURNS TO TTY FOR INPUT.

11.	STR	10-2250,2391
	/U SHOULD NOT OUTPUT A TERMINAL ? IF ANY UNDEFINED SYMBOLS
	EXIST SO THAT BATCH WILL NOT FAIL.

12.	STR	10-2295
	NOT POSSIBLE TO ASS DSK TTY AND EXECUTE (VIA CCL) A FORTRAN
	PROGRAM.

13.	STR	10-2585
	WHEN MAP IS OUTPUT TO DEVICE OTHER THAN USER'S TTY ONLY
	THE LOW SEGMENT BREAK IS OUTPUT ON TTY.
	ALSO IF STARTING ADDRESS IS NOT GIVEN STARTING ADDRESS LINE
	ON MAP SHOULD NOT BE OUTPUT.

14.	STR	10-2586
	SPECIAL CHARACTERS (NULL, $, %, AND .) ARE INCLUDED IN FILENAME
	OF MAP FILE WHEN NO FILENAME IS SPECIFIED.SETNAM UUO ALSO
	USES NAMES (WITH $,% AND .) WHICH CANNOT BE SAVE BY MONITOR
	SAVE COMMAND.

15.	STR	10-2587
	WHEN USING THE @ CONSTRUCTION,LOADER DOES NOT TRY EXTENSION
	TMP IF NO EXTENSION WAS SPECIFIED AND FILE IS NOT FOUND WITH
	A BLANK EXTENSION.
						100-460-011-00
						PAGE	4

SECTION	THREE
-------------

	KNOWN OUTSTANDING BUGS
	----------------------

		NONE

			APPENDIX 1

					100-118-007-00

SUBJECT:  TWO-SEGMENT SOFTWARE			DATE:  FEBRUARY 1970

TO:  PDP-10 DEVELOPMENT				FROM:  D. NIXON



















		THE INFORMATION IN THIS MEMORANDUM IS
		SUBJECT TO CHANGE WITHOUT NOTICE AND
		SHOULD NOT BE CONSTRUED AS A COMMITMENT
		BY DIGITAL EQUIPMENT CORPORATION.

	THE FOLLOWING SCHEME HAS BEEN IMPLEMENTED IN MACRO AND LOADER
	TO ASSEMBLE AND LOAD TWO SEGMENT PROGRAMS IN ONE FILE.

	1)  MACRO

    	    A)  A NEW PSEUDO-OP TWOSEGMENTS HAS BEEN IMPLEMENTED.
		THIS PSEUDO-OP CAUSES ACTION SIMILAR TO HISEG, IT
		OUTPUTS A BLOCK TYPE 3.  IT MAY HAVE AN OPTIONAL
		ARGUMENT, WHICH IF PRESENT IS THE FIRST ADDRESS IN
		THE HIGH SEGMENT.  (400000 IS ASSUMED BY DEFAULT.)
		THIS BLOCK SIGNALS TO LOADER TO EXPECT TWO SEGMENTS.
		(SEE LATER FOR DETAILED STRUCTURE OF BLOCK.)

	    B)  HISEGMENT CODE MUST THEN BE PRECEDED BY RELOC 400000
		(OR GREATER).  LOW SEGMENT CODE BY RELOC 0 (FOR
		EXAMPLE).  EACH RELOC SWITCHES RELOCATION.  N. B.
		CARE MUST BE TAKEN IF RELOCATION IS DONE IN THE
		SAME SEGMENT AND RELOC FOLLOWED BY DESIRED
		ADDRESS USED.

	    C)  THIS IS VERY SIMPLE TO IMPLEMENT; IT NEEDS NO NEW
		BLOCK TYPES AND IS SIMPLE TO UNDERSTAND.  THE LIST-
		ING PRODUCED IS EASIER TO READ THAN THE PRESENT
		TWO SEGMENT OUTPUT (RELOC 0 AND ABSOLUTE).  ALL
		ADDRESSES OVER 400000 ARE IN THE HIGH SEGMENT, ALL
		LESS THAN THAT IN THE LOW.  ALL RELOCATABLE ADDRESSED
		ARE FLAGGED BY A SINGLE QUOTE.

	    D)  THE RELOCATABLE OUTPUT CANNOT BE LOADED BY LOADER 51
		OR EARLIER.

	2)  LOADER

	    A)  WHEN LOADER READS THE SPECIAL BLOCK TYPE 3 IT SETS
		AN INTERNAL FLAG SO IT KNOWS TO EXPECT TWO SEGMENTS.

	    B)  THEN ALL ADDRESSED OF 400000 OR GREATER ARE RELOCATED
		INTO THE HIGH SEGMENT.  ALL LESS INTO THE LOW SEGMENT.

	    C)  THE FIRST WORD OF THE CODE BLOCK (TYPE 1) GIVES THE
		LOAD ORIGIN FOR THE NEXT FEW WORDS.  IF THIS IS 
		GREATER THAN 400000 ALL THE FOLLOWING WORDS GO INTO
		THE HIGH SEGMENT, OTHERWISE THEY ARE LOADED INTO THE
		LOW SEGMENT.

	    D)  CHAINING OF GLOBAL SYMBOLS BETWEEN THE TWO SEGMENTS
		WORKS.

				-2-

	3)  WHY

	    A)  WHY TWOSEG PSEUDO-OP?  THIS IS SO THAT OLD PROGRAMS
		MORE THAN 128K WILL LOAD INTO THE LOW SEGMENT
		WITHOUT CONFUSING THE LOADER OVER ADDRESSES GREATER
		THAN 400000.

	    B)  WHY 400000?  ALL REFERENCES TO 400000 SHOULD BE
		"400000 OR THE ARGUMENT OF THE TWOSEG PSEUDO-OP"
		BUT SINCE 400000 WILL BE THE USUAL CASE, READABILITY
		IS INCREASED BY JUST REFERRING TO 400000.

	4)  BENEFITS

	    A)  ABILITY TO LOAD IMPURE AND PURE CODE FROM SEVERAL
		DIFFERENT FILES WITHOUT HAVING TO COLLECT ALL THE
		IMPURE STORAGE INTO ONE FILE (E.G. AID IMPUR).

	    B)  DDT CAN BE LOADED WITH SELF-INITIALIZING PROGRAMS
		IN ANY ORDER AND NOT GET WIPED OUT BY LOC 140.

	    C)  LISTINGS ARE MORE READABLE SINCE IT IS NOW OBVIOUS
		WHAT IS HIGH, LOW, OR ABSOLUTE.

	    D)  LOADER CAN LOAD OLD HISEG AND NEW TWOSEG CODE TOGETHER
		THE ONLY DIFFERENCE IS IN HOW THE RELOCATION IS DONE.

	    E)  ONE-PASS ASSEMBLERS CAN PRODUCE RE-ENTRANT CODE.

	5)  ONE SEGMENT MACHINES

	    A)  HISEG CODE CONTAINING LOC 140 CANNOT BE LOADED ON A
		ONE-SEGMENT MACHINE.  THE SOURCE MUST BE REASSEMBLED
		WITH THE PURE FEATURE OFF.

	    B)  TWOSEG CODE CAN BE LOADED ON A ONE-SEGMENT MACHINE
		PROVIDED LOADER IS GIVEN THE LENGTH OF THE HISEGMENT.
		MACRO PUTS OUT THE LENGTH FOUND ON PASS 1 WHICH IS
		EQUAL TO OR GREATER THAN THE VALUE ON PASS 2.  GIVEN
		THIS, LOADER LOADS THE HISEG CODE INTO THE LOW
		SEGMENT AND THE LOWSEG CODE ON TOP OF IT, SO THAT THE
		DATA STORAGE IS TOWARDS JOBFF.

	    C)  REASSEMBLY IS NOT REQUIRED NOR IS THE PURE SWITCH
		OPTION.

	    D)  ONE SEGMENT CAPABILITY CAN BE FORCED BY USING /H ON
		A TWO-SEGMENT MACHINE.


				-3-

	6)  BLOCK TYPE 3

	THE FIRST WORD IS THE USUAL

	XWD    3 ,, 2

	THE SECOND IS THE RELOCATION WORD

	200000 ,, 0

	THE THIRD WORD IS

	XWD (HISEG BREAK) ,, TWOSEG ORIGIN

	WHERE THE RIGHTHAND SIDE IS 400000 BY DEFAULT.

	THE ONLY DIFFERENCE BETWEEN THIS AND THE BLOCK TYPE 3
	PRODUCED BY HISEG PSEUDO-OP IS THE LEFT HALF IS NEGATIVE.  IN
	A TWO-SEGMENT MACHINE, THIS IS IGNORED EXCEPT TO SET A LOADER
	FLAG.  ON A ONE-SEGMENT MACHINE THE DIFFERENCE IS ASSUMED TO
	BE THE MAXIMUM LENGTH OF THE HIGH SEGMENT.

	A ONE-PASS ASSEMBLER CANNOT KNOW THIS LENGTH AT THE START OF
	PASS 1 SO

	XWD 400000 ,, 400000

	WOULD BE USED TO SIGNAL TWO SEGMENTS TO A TWO-SEGMENT MACHINE.
	ON A ONE-SEGMENT MACHINE THIS GIVES THE ERROR MESSAGE

	TWO SEGMENTS ILLEGAL

	SINCE LOADER DOSE NOT KNOW HOW MUCH SPACE TO RESERVE FOR
	THE HIGH SEGMENT.


				-4-

	7)  MODIFICATIONS

	    A)  IF THE FIRST ITEM IN A TWOSEG HIGH SEGMENT IS A
		DISPATCH TABLE, THEN THE FOLLOWING INSTRUCTION WILL
		GET THE WRONG RELOCATION UNDER THE PROPOSED SCHEME.

		MOVE AC, DISTAB - 100 (AC)

		SINCE THE ADDRESS WILL BE 377700.

		THE SOLUTION IS EITHER TO DOCUMENT THIS AND MAKE IT
		ILLEGAL OR

	    B)  CHANGE THE RELOCATION CALCULATION SLIGHTLY SUCH THAT
		IS THE ADDRESS IS GREATER THAN 400000 - OFFSET THE
		ADDRESS GETS HISEG RELOCATION, OTHERWISE IT GETS
		LOWSEG RELOCATION.  OFFSET IS AT PRESENT DEFINED TO
		BE 400( I.E, 8 BITS FOR EBCDIC).

		THIS FIXES THE ABOVE PROBLEM FOR ALL REASONABLE CASES.

		HOWEVER, NOW ADDRESSES OF 128K-400 WILL GET THE WRONG
		RELOCATION.

  		I THINK THAT THIS IS UNLIKELY TO HAPPEN SINCE:

	    1)  VERY FEW PROGRAMS WOULD BE ONE FILE AND HAVE
		ADDRESSES WITH IN 400 OF THE TOP OF THE LOW SEGMENT
		(NOTE 400000 IS STILL SHORT FOR "400000 OR THE 
		TWOSEG ARGUMENT").

	    2)  IF IT IS, THEN IT CANNOT BE DEBUGGED WITH DDT; IT
		CANNOT HAVE DYNAMIC BUFFERING.

	    3)  NO OTHER PROGRAM CAN LOAD WITH IT INTO THE LOW
		SEGMENT.

	    4)  IT IS JUST UNLIKELY TO HAPPEN WHEREAS A DISPATCH
		TABLE OR THE FIRST WORD, AN IOWD WORD, MAY HAPPEN
		EVEN IF THE PROBLEM IS DOCUMENTED.


				-5-

	8)  USE

	    A)  BOTH MACRO AND LOADER HAVE BEEN MODIFIED TO USE
		TWOSEG.  THEY BOTH WORK.

	    B)  THIS CODE IS UNDER A CONDITIONAL ASSEMBLY SWITCH
		SEG2SW.

	    C)  A CHECK IS PROVIDED SO THAT MACRO ONLY TRIES TO
		ASSEMBLE THE CONDITIONAL SEG2SW CODE IF IT CAN
		HANDLE THE TWSEG PSEUDO-OP.  THE TEST IS:

		IFDEF TWOSEG,  <IFNDEF SEG2SW, <SEG2SW==1>>
		IFNDEF SEG2SW, <SEG2SW= 0>

		THIS MEANS CUSP'S CAN BE MODIFIED BEFORE MACRO 44
		IS AVAILABLE AND PROVIDED LOADER 52 IS RELEASED
		BEFORE MACRO 44.

			APPENDIX 2

					100-540-001-00

SUBJECT:	DEVICE INDEPENDENT DIRECT ACCESS LIBRARY (DIDAL)

FROM:		D NIXON

DATE:		AUG-18-1970
THE INFORMATION IN THIS MEMORANDUM IS
SUBJECT TO CHANGE WITHOUT NOTICE AND
SHOULD NOT BE CONSTRUED AS A COMMITMENT
BY DIGITAL EQUIPMENT CORP.
					100-540-001-00
					PAGE	2
0.0	BRIEF DESCRIPTION.

	DIRECT ACCESS LIBRARY SEARCHING DIFFERS FROM THE PRESENT METHOD
	OF SEQUENTIAL ACCESS SEARCHING IN THAT ONLY THOSE PHYSICAL
	BLOCKS OF DATA CONTAINING USEFUL INFORMATION ARE INPUT.
	IN SEQUENTIAL ACCESS BLOCKS ARE READ ONE BY ONE AND THE DATA
	THROWN AWAY IF NOT NEEDED.IN DIRECT ACCESS THE TAPE OR DSK IS
	PRE-POSSITIONED TO READ ONLY THOSE BLOCKS KNOWN TO BE USEFUL.
	FOR THIS TO BE POSSIBLE A ONCE ONLY PASS MUST BE MADE
	AND AN INDEX TO THE LIBRARY FILE CONSTRUCTED.
	THE DEVICE INDEPENDENT PART REFERES TO THE METHOD
	AND NOT THE IMPLEMENTATION.HOWEVER ONCE THE INDEX HAS BEEN
	CONSTRUCTED LIBRARY SEARCHING SHOULD BE DEVICE INDEPENDENT
	TO THE USER.
	SEVERAL DIFFERENT METHODS HAVE BEEN PROPOSED AND IMPLEMENTED.
	THESE ARE DISCUSSED IN SECTION 2.THE PRESENT METHOD WAS ADDOPTED
	BECAUSE IT WAS THE ONLY ONE TO SATISFY ALL THE DESIGN GOALS
	OF SECTION 1.
					100-540-001-00
					PAGE	3

1.	DESIGN GOALS.

1.1	IT SHOULD ALLOW DIRECT ACCESS TO INDIVIDUAL PROGRAMS INSIDE
	A LARGE LIBRARY WITH MINIMUM OVERHEAD. ONLY THOSE
	PHYSICAL BLOCKS CONTAINING DESIRED PROGRAMS SHOULD BE INPUT.

1.2	IT SHOULD BE DEVICE INDEPENDENT.
	THE METHOD SHOULD WORK ON DSK ,DTA AND POSSIBLY MTA.
	AT PRESENT ONLY DSK AND DTA ARE SUPPORTED BUT THE EXTENSION
	TO INCLUDE MTA IS STRAIGHT FORWARD.

1.3	ITS USE SHOULD BE TRANSPARENT TO THE USER.
	HE SHOULD NOT HAVE TO DO ANYTHING SPECIAL TO INVOKE DIRECT
	ACCESS LIBRARY SEARCHING.

1.4	IT SHOULD BE DIFFICULT (IF NOT IMPOSSIBLE) TO CHANGE THE LIBRARY
	IN SUCH A WAY AS TO INVALIDATE THE DIRECT ACCESS INFORMATION
	WITHOUT ADEQUATE WARNING.IF THIS DOES HAPPEN THE LIBRARY SHOULD
	STILL BE USABLE IN SEQUENTIAL SEARCH MODE.

1.5	IT SHOULD WORK EFFICIENTLY WITH THE PRESENT LOADER.
	IT SHOULD USE MULTIPLE (DOUBLE) BUFFERING AT ALL TIMES AND
	AS FEW EXTRA WORDS IN THE LOW SEGMENT AS POSSIBLE.

1.6	IT SHOULD BE POSSIBLE TO HAVE MANY DIRECT ACCESS LIBRARIES,
	NOT JUST LIB40.
					100-540-001-00
					PAGE	4
2.	PROPOSED METHODS.

2.1	SEPARATE INDEX.
	IN THIS METHOD THERE ARE TWO SEPARATE FILE.
	A)	THE PRESENT LIBRARY.
	B)	AN INDEX TO IT.

		ADVANTAGES ARE:-
	1)	IF INDEX IS NOT AVAIABLE LOAD IN SEQUENTIAL MODE
	2)	SAME IF INDEX IN NOT CONSISTENT WITH LIBRARY.

		DISADVANTAGES ARE:-
	1)	EXTRA LOOKUP FOR EXTRA FILE.
	2)	EXTRA BUFFERS TO HOLD INDEX.
	3)	WILL NOT WORK ON ANY DEVICE OTHER THAN DSK.
	4)	HAS A GOOD CHANCE OF NOT HAVING A CORRESPONDING INDEX.
	5)	MORE HEAD POSSITIONING DUE TO READING TWO FILES.
	6)	NOT SIMPLE TO HAVE MANY DIRECT ACCESS LIBRARIES.

2.2	INDEX IN FRONT OF LIBRARY.

		ADVANTAGES ARE:-
	1)	NO EXTRA LOOKUP.
	2)	INDEX STAYS WITH LIBRARY.LESS CHANCE OF WRONG INDEX.
	3)	WOULD WORK WITH DTA AND MTA.

		DISADVANTAGES ARE:-
	1)	NEED FOR EXTRA SPACE TO HOLD ALL OF INDEX IN CORE.
		SINCE THE LIBRARY COULD BE HUGE,THE INDEX ALSO
		IS UNLIMITED IN SIZE.
		IF ALL OF INDEX IS NOT HELD IN CORE THEN:
	2)	VERY INEFFICIENT TO HAVE TO REPOSITION ON BLOCKS NEAR
		START OF FILE AND LOSE ADVANTAGE OF DOUBLE 
		BUFFERING BY READING SAME BLOCK TWICE.
	3)	WOULD BE SLOW ON DTA AND WOULD NOT WORK ON MTA.
					100-540-001-00
					PAGE	5
3.	METHOD ADDOPTED.

3.1	HAVE INDEX AS PART OF THE LIBRARY FOR ALL ADVANTAGES OF 2.2

3.2	HAVE THE INDEX SCATTERED THROUGHOUT THE LIBRARY.THE INDEX
	THEN CONSISTS OF SINGLE BLOCKS WHERE EACH BLOCK IS THE INDEX
	TO ALL PROGRAMS FOLLOWING, UP TO THE NEXT INDEX BLOCK.

3.3	ADVANTAGES:-
	1)	ALL THOSE OF 2.2
	2)	ONLY ONE INDEX BLOCK AT A TIME NEED BE STORED IN CORE.
	3)	EXTRA INPUTS ARE NEVER DONE SINCE ALL READING IS IN
		DOUBLE BUFFERED MODE.
					100-540-001-00
					PAGE	6
4.	STRUCTURE OF INDEX

4.1	A SPECIAL BLOCK TYPE WAS CHOSEN SO THAT THE LOADER COULD
	IDENTIFY THE INDEX BLOCKS.
	THIS IS BLOCK TYPE 14 (IN LEFT HALF OF FIRST WORD)
	THE INDEX BLOCKS  CONSIST OF:-

	14	,,	177		;INDEX BLOCK
	4	,,	N		;USUAL ENTRY BLOCK HEADER
	RADIX50	ENTRY			;N RADIX50 NAMES
	.................
	.................		;END OF ENTRY BLOCK
	WORD NUMBER,,BLOCK NUMBER	;INDEX WORD (SEE LATER)
	4	,,	N		;MORE ENTRY BLOCKS
	WORD #	,,BLOCK #		;AND INDEX WORDS
	...............
	...............			;UNTIL NOT ENOUGH ROOM LEFT
	-1	,, NEXT INDEX BLOCK	;END OF INDEX BLOCK

4.2	THE ENTRY BLOCKS ARE THE SAME AS THOSE IN THE LIBRARY EXCEPT
	THAT THE RELOCATION WORD HAS BEEN REMOVED.

4.3	THE INDEX WORD CONSISTS OF TWO HALF WORDS.
	THE RIGHT HALF IS THE BLOCK NUMBER CONTAINING THE PROGRAM.
	THE LEFT HALF IS THE WORD COUNT THAT MUST BE ADDED TO THE
	INPUT BYTE POINTER TO READ THE PROGRAM.
	I.E. THE FIRST WORD IS  0,,BLOCK # ETC.

4.4	THE LAST WORD CONSISTS OF  A WORD COUNT OF -1 TO SIGNAL
	THE END OF THE INDEX, AND A RIGHT HALF CONTAINING THE BLOCK 
	NUMBER OF THE NEXT INDEX BLOCK.
					100-540-001-00
					PAGE	7
5.	METHOD USED TO WRITE INDEX

5.1	RATHER THAN WRITE A NEW CUSP TO DO JUST THIS SIMPLE TASK,IT
	WAS DECIDED TO ADD A NEW FEATURE TO FUDGE2 TO DO IT.
	THE NEW FEATURE IS /X (WRITE A NEW FILE WITH INDEX).
	I.E.
	*DSK:LIBRARY/X_SYS:LIBRARY$

5.2	WHEN FUDGE2 SEES /X IT
	GETS AN EXTRA 1K TO START BUILDING THE INDEX IN CORE.
	IT OUTPUTS THE FIRST BLOCK WITH ONLY A HEADER 14,,177 WORD.
	ITREADS THE ENTRY BLOCK OF THE FIRST PROGRAM,COPIES
	ENTRIES INTO CORE WITH THE BLOCK  AND WORD NUMBERS.
	THIS IS CONTINUED UNTIL THAT INDEX BLOCK WOULD BE FULL.
	AT THIS POINT ANOTHER DUMMY INDEX BLOCK IS OUTPUT AND THE
	 SEQUENCE CONTINUED UNTIL ALL THE LIBRARY HAS BEEN COPIED.

5.3	WHEN THE ENTIRE LIBRARY HAS BEEN COPIED FUDGE2 DOES DIRECT
	ACCESS ON THE FILE AND REWRITES THE INDEX BLOCKS.
	THIS WORKS ON DSK AND DTA,HOWEVER ON MTA A SECOND COMPLETE 
	WRITE OF THE ENTIRE FILE WOULD BE REQUIRED.

5.4	ON DSK BLOCKS ARE ALLOCATED SEQUENTIALLY BUT ON DTA THE UGETF
	UUO IS USED TO FIND THE NEXT FREE BLOCK.
					100-570-001-00
					PAGE	8
6.	DIRECT ACCESS LOADER SEARCHING.

6.1	IF LOADER IS NOT IN LIBRARY SEARCH MODE BLOCK TYPE 14 IS
	IGNORED ,THE NEXT BLOCK IS INPUT AND LOADING IS
	CONTINUED.

6.2	IN LIBRARY SEARCH MODE AN INTERNAL FLAG (XFLG) IS SET AND THE
	CURRENT BUFFER IS MOVED (BLT) INTO THE AUXILIARY BUFFER.
	THE ENTRY BLOCK OF THE INDEX IS SEARCHED AND IF ANY
	SYMBOL IS REQUIRED THE INDEX WORD IS READ AND THE CORRESPONDING
	BLOCK READ.IF THE  REQUIRED BLOCK IS THE SAME AS THE LAST ONE
	READ ONLY THE WORD COUNT AND BYTE POINTER ARE CHANGED,IF IT
	IS THE NEXT BLOCK AN INPUT IS DONE (SINCE IT MAY BE IN CORE
	ALREADY DUE TO DOUBLE BUFFERING) AND THE WORD COUNT AND BYTE
	POINTER ADJUSTED. IF NEITHER IS TRUE LOADER DOES A USETI UUO
	ON THE DESIRED BLOCK CLEARS THE RING BUFFER USE BITS AND
	INPUTS THE BLOCK (AND THE NEXT ONE).THE BYTE POINTER AND
	WORD COUNT ARE ADJUSTED AND LOADING CONTINUES.

6.3	WHEN THE CURRENT INDEX BLOCK IS EXHAUSETED LOADER
	INPUTS THE NEXT INDEX BLOCK BLT'S IT INTO THE AUXILLIARY
	BUFFER AND CONTINUES.

6.4	TOTAL SPACE USED IS 1 WORD IN THE LOW SEGMENT AND ABOUT 100
	WORDS IN THE HIGH SEGMENT.
					100-540-001-00
					PAGE	9
7.	SAFEGUARDS.

7.1	IT IS VERY DIFFICULT TO CHANGE THE LIBRARY WITHOUT HAVING  TO
	RE-INDEX THE LIBRARY.THIS IS BECAUSE FUDGE2 REMOVES THE INDEX
	BLOCKS ON INPUT (IF IT SEES A BLOCK TYPE 14 WHEN IT
	EXPECTED A BLOCK TYPE 4 IT DOES AN EXTRA INPUT).IF THE OUTPUT
	IS NOT A LISTING (/L) THEN A WARNING MESSAGE IS GIVEN.

7.2	THERE IS A DOUBLE CHECK ON GETTING TO THE RIGHT BLOCK SINCE
	LOADER SETS THE INPUT BYTE POINTER TO JUST BEFORE THE ENTRY
	BLOCK THE ENTRIES ARE SEARCHED FOR ONCE MORE BEFORE LOADING
	IS UNDERTAKEN.
					100-540-001-00
					PAGE	10
8.	AVAILABILITY.

8.1	FUDGE2.11	OR LATER

8.2	LOADER.52	OR LATER
                                                                                                                                                                                                                                                                                               ^7