TITLE MONEY - TO DUMP FACT FILES - V 016(6) - 17 NOV 71
SUBTTL R CLEMENTS /DJB/RCC

VMONEY==016
VEDIT==6
VMINOR==0
VWHO==0

JOBVER=137
LOC JOBVER
	BYTE	(3)VWHO(9)VMONEY(6)VMINOR(18)VEDIT
RELOC

;ACCUMULATOR DEFINITIONS

F=0	;FOR FLAGS
A=1	;A THROUGH D ARE GP REGISTERS, E G LOOKUPS.
B=2
C=3
D=4
E=5

X=7	;INDEX OF CURRENT FACT ENTRY TYPE
BP=10	;BYTE POINTER
WD=11	;WORD
M=12	;FOR MESSAGES
N=13	;FOR NUMBERS
N1=N+1
R=15	;RADIX PRINT RADIX
CH=16	;CHARS
P=17	;PUSHDOWN STACK

;FLAGS IN LH OF F
FL.HIA==1		;HIATUS ENTRY HAS BEEN SEEN
FL.SIX==10		;TEMP FLAG IN SIXBIT PRINTER
FL.EOF==20		;LAST FACT ENTRY WAS EOF CODE

EXTERN JOBFF,JOBSA,JOBREN,JOBREL
;DEVICE CHANNELS
MFD==1
DSK==2
LPT==3

;CALLI DEFINITIONS

RESET=0
GETCHR==1
CORE==11
EXIT==12
DATE==14
TIMER==22
MSTIME==23
GETTTY==34
GETTAB==41
DEVPPN==55

;MISC PARAMETERS

MAXENT==76		;MAXIMUM NUMBER OF WORDS IN A FACT ENTRY
MAXJOB==200		;MAXIMUM JOB NUMBER IN SYSTEM
PDLL==40		;STACK LENGTH

;SEE ALSO PRICE CONSTANTS AT END OF PROGRAM

SUM.PP==0		;OFFSET FOR PPN IN SUMMARY TABLE ENTRY
SUM.IO==1		;OFFSET FOR ON + OFF COUNTS
SUM.RN==2		;OFFSET FOR RUN TIME
SUM.KS==3		;OFFSET FOR KILOCORESECONDS
SUM.CN==4		;OFFSET FOR CONNECT TIME
SUMSIZ==5		;SIZE OF ENTRY IN SUMMARY TABLE

;GETTAB CONSTITUENTS

%CNSTS==17,,11		;SYSTEM STATES
%LDSYS==1,,16		;SYS PPN

ST.LVD==7B9		;NON-ZERO IN STATES IF LEVEL D DISK SERVICE
;THE FOLLOWING ARE THE DEFINITIONS AND CONVENTIONS
; OF THE FACT ENTRY TYPE CODES AND DATA.
;
;CODES 400-776 ARE RESERVED FOR CUSTOMERS, 1-377 ARE FOR DEC.
;CODE 777 IS THE EOF CODE.
;ENTRY CODES GO IN BITS 0-8 OF WORD 0 OF FACT ENTRY.

;FOR DEC'S ENTRIES, AN EVEN NUMBERED ENTRY HAS OLD FORMAT (12-24)
; DATE AND TIME WORD, AND TIME INFO MAY BE JIFSEC-DEPENDENT.
;FOR AN ODD-NUMBERED ENTRY, THE DATE AND TIME IS NEW (18-18) FORMAT,
; AND JIFSEC-DEPENDENCY IS ILLEGAL. THE CODES OTHERWISE MEAN THE
; SAME AS THE CORRESPONDING EVEN NUMBERED CODE (I.E., CODE-1).

;ARGUMENTS TO THE M.M MACRO ARE:
;	1 - THREE-LETTER ABBREVIATION FOR ENTRY TYPE
;	2 - CODE VALUE (OCTAL)
;	3 - UP TO SIX CHARACTERS, SIXBIT, FOR LISTING LABEL

;WORD 0 OF ALL FACT ENTRIES HAS THE FOLLOWING REQUIRED FORMAT:
;	BITS 0-8 ARE THE FACT TYPE CODE
;	BITS 9-17 ARE THE JOB NUMBER. THIS SHOULD NEVER BE ZERO. PLUG
;		IN THE REPORTING CUSP'S JOB IF NOTHING ELSE IS
;		APPROPRIATE, SO BILLING CAN BE INDIRECTED.
;	BITS 18-23 ARE THE TTY LINE NUMBER (BINARY). SAME COMMENT
;		AS FOR JOB NUMBER. -1 MEANS THE CTY. -2 MEANS DETACHED
;
;WORD 2 IS THE DATE AND TIME WORD. DAEMON WILL FILL THIS IN FOR YOU
; IF YOU MAKE THE ENTRY VIA DAEMON UUO, FACT SUBFUNCTION, AND YOU
; SUPPLY A ZERO IN THIS WORD.
;ORDER IS NOT SIGNIFICANT.
DEFINE M.FE <
;HEADER FOR A CKPNT ENTRY
M.M(CHK,200,CHK)
;HEADER FOR A LOGIN ENTRY
M.M(LGI,100,ON)
;HEADER FOR A LOGOUT ENTRY
M.M(LGO,140,OFF)
;HEADER FOR SPACE'S DISK STATISTICS
M.M(SPC,160,SPACE)
;HEADER FOR AN ATTACH ENTRY
M.M(ATT,240,ATT)
;HEADER FOR SPOOLER STATISTICS
M.M(SPL,250,SPOOL)
;HEADER FOR SYSTEM RESTART
M.M(SRS,370,RESTRT)
;HEADER FOR SCHEDULED SHUTDOWN
M.M(SSD,372,SHUTDN
;HEADER FOR HIATUS IN FACT FILE
M.M(HIA,377,HIATUS)
;END OF FACT-FILE CODE
M.M(EOF,777,ENDFIL)
>

DEFINE M.M(A,B,C)<
FE.'A=B
>

	M.FE
				;ASSIGN THE FE. VALUES
;STARTS HERE

MONEY:	CALLI	RESET
	MOVE	P,PDP
	MOVEI	F,0
	INIT	MFD,14
	SIXBIT	/DSK/
	XWD	0,MFDB
	  CALLI	EXIT
	INIT	DSK,14
	SIXBIT	/DSK/
	XWD	0,DSKB
	  CALLI	EXIT
	INIT	LPT,0
	SIXBIT	/LPT/
	XWD	LPTB,0
	  CALLI	EXIT
	MOVE	B,[%LDSYS]
	CALLI	B,GETTAB	;GET SYS PPN
	  SKIPA	A,[%CNSTS]	;NOT IMPLEMENTED, SEE IF LEVEL C
	JRST	SYSDEF		;B=DEFAULT SYS PPN
	CALLI	A,GETTAB	;GET STATES WORD
	  SETZ	A,		;CANT, MAKE LOOK LIKE LEVEL C (CANT BE D)
	MOVE	B,[XWD 1,4]	;LEVEL D DEFAULT SYS PPN
	TLNN	A,(ST.LVD)	;SKIP IF LEVEL D
	MOVE	B,[XWD 1,1]	;NO, ASSUME LEVEL C DEFAULT SYS PPN
SYSDEF:	MOVSI A,(SIXBIT .SYS.)
	CALLI A,DEVPPN		;GET PPN FOR SYS
	  MOVE	A,B		;NOT IMPLEMENTED, USE DEFAULT
	MOVEM	A,SYSPP
	INBUF	MFD,1
	INBUF	DSK,1
	OUTBUF	LPT,2
	HRRZ	A,JOBFF
	HRRZM	A,SJOBFF
	MOVEI	A,1(A)		;WORD FOR SAFETY
	MOVEM	A,SUMBAS
	MOVEM	A,SUMTOP	;SUMMARY TABLE IS EMPTY
	SETOM	@SUMBAS		;FIRST ENTRY IN IT IS END
	SETZM	TABBLK
	MOVE	A,[XWD TABBLK,TABBLK+1]
	BLT	A,BLTEND
	MOVE	A,[SIXBIT /MONEY/]
	MOVSI	B,(SIXBIT /TXT/)
	SETZB	C,D
	ENTER	LPT,A
	CALLI	EXIT
	MOVE	A,[XWD 17,11]
	CALLI	A,GETTAB
	  MOVEI	A,0	;ERROR RETURN
	MOVEI	B,^D60
	TLNE	A,4000
	MOVEI	B,^D50
	MOVEM	B,JIFSEC
MONEY1:	MOVEI	M,[ASCIZ	/
ACCOUNTING SUMMARY AT /]
	PUSHJ	P,MSG		;HEADER FOR THE OUTPUT
	CALLI	A,MSTIME
	PUSHJ	P,MSTOUT
	MOVEI	M,[ASCIZ / ON /]	;DATE AND TIME
	PUSHJ	P,MSG
	CALLI	A,DATE
	PUSHJ	P,DATOUT
	PUSHJ	P,CRLF2
	MOVSI	B,(SIXBIT /SYS/)	;FIRST DUMP ACCT.SYS
	MOVEM	B,EXTEN
	PUSHJ	P,DUMP
	MOVE	A,SYSPP
	MOVSI	B,(SIXBIT /UFD/)	;NOW GET ANY OTHER FACT.XXX
	MOVEI	C,0
	MOVE	D,MFDPPN		;LOOK IN MFD
	LOOKUP	MFD,A
	CALLI	EXIT		;MUST BE THERE
MONEY3:
ML1:	PUSHJ	P,RDM
	JFCL
	MOVE	A,WD
	PUSHJ	P,RDM
	JRST	TOTALS		;END OF MFD. GO DO TOTALS
	MOVE	B,WD
	CAME	A,[SIXBIT /FACT/]
	JRST	ML1
	HLLZM	B,EXTEN
	HLRZS	B
	CAIN	B,(SIXBIT /SYS/)
	JRST	ML1
	PUSHJ	P,FFOUT
	PUSHJ	P,DUMP		;FOUND ONE. GO DUMP IT
	JRST	ML1		;SEARCH FOR MORE
DUMP:	MOVEI	M,[ASCIZ /
FILE FACT./]
	PUSHJ	P,MSG		;HEADING FOR A FACT FILE
	MOVE	WD,EXTEN
	PUSHJ	P,SIXBP
	PUSHJ	P,CLRON	;CLEAR ALL ONTIMES
	MOVE	A,[SIXBIT /FACT/]	;LOOKUP THE FILE
	HLLZ	B,EXTEN
	MOVEI	C,0
	MOVE	D,SYSPP
	LOOKUP	DSK,A
	JRST	DUMPX1
	MOVEI	M,[ASCIZ /  CREATED /]	;OUTPUT ITS CREATION TIME
	PUSHJ	P,MSG
	PUSH	P,C
	LDB	A,[POINT 11,C,23]
	PUSHJ	P,MINOUT
	PUSHJ	P,TAB
	POP	P,A
	ANDI	A,7777
	PUSHJ	P,DATOUT		;AND DATE
	PUSHJ	P,CRLF2

DUMP01:	MOVEI	M,HEDMSG		;HEADER FOR TRANSACTIONS
	PUSHJ	P,MSG
NXTENT:	SETZM	ENTRY		;CLEAR DATA TABLE FOR THE ENTRY
	MOVE	A,[XWD ENTRY,ENTRY+1]
	BLT	A,ENTRY+MAXENT-1
	MOVSI	A,-MAXENT
	PUSHJ	P,DSKRD		;READ HEADER OF ENTRY
	MOVEM	WD,ENTRY
	LDB	A,[POINT 9,ENTRY,8]
	MOVSI B,-FETABL		;SEARCH FOR THIS TYPE CODE
DMP5L:	HLRZ C,FETAB(B)		;GET A CODE
	CAMN A,C		;MATCH?
	JRST DMP5F		;YES
	AOBJN B,DMP5L		;NO. LOOP THRU TABLE
	JRST BADENT		;NO SUCH CODE KNOWN

DMP5F:	HRRZ X,FETAB(B)		;GET THE INDEX
	ANDI	WD,77
	JUMPE	WD,EOFQ
	CAIL	WD,MAXENT
	JRST	BADEND
	MOVNS	WD
	HRLZ	A,WD
	JRST	DUMP03
DUMP02:	PUSHJ	P,DSKRD		;READ DATA FOR THIS ENTRY
	MOVEM	WD,ENTRY(A)
DUMP03:	AOBJN	A,DUMP02
	MOVE WD,FESIX(X)	;AND THE PRINT STRING
	PUSHJ	P,SIXBT
	LDB	N,[POINT 9,ENTRY,17]	;JOB
	PUSHJ	P,DECPRT
	PUSHJ	P,TAB
	MOVSI	WD,(SIXBIT .TTY.)
	HRLZ	N,ENTRY		;GET LINE NUMBER
	ASH	N,-^D24		;EXTEND SIGN BIT OF LINE NUMBER
	JUMPGE	N,DMP5B		;JUMP IF TTY LINE
	MOVSI	WD,(SIXBIT .DET.)
	TRNE	N,1		;-2=DETACHED, -1=CTY
	MOVSI	WD,(SIXBIT .CTY.) ;-1=CTY
DMP5B:	PUSHJ	P,SIXBP
	JUMPL	N,DMP5C
	CAIGE	N,2000		;SKIP IF SIXBIT
	JRST	DMP5D
	LSH	N,6		;LEFT JUSTIFY
	HRLZ	WD,N
	PUSHJ	P,SIXBP
	JRST	DMP5C
DMP5D:	PUSHJ	P,OCTPRT	;PRINT TTY IF BINARY TTY LINE
DMP5C:	PUSHJ	P,TAB
	HLRZ	N,ENTRY+1	;PROJ
	PUSHJ	P,OCTPRT
	PUSHJ	P,TAB
	HRRZ	N,ENTRY+1	;PROG
	PUSHJ	P,OCTPRT
	PUSHJ	P,TAB
DUMP06:	LDB	A,[POINT 12,ENTRY+2,11]	;DATE
	PUSHJ	P,DATOUT
	PUSHJ	P,SPACE
	LDB	A,[POINT 24,ENTRY+2,35]	;TIME IN TICS
	PUSHJ	P,TICDAY
	CAIE X,X.CHK
	CAIN X,X.SPL
	SKIPA
	JRST [
		PUSHJ P,TAB
		PUSHJ P,SPACE
		JRST DMP6A]
	PUSHJ P,SPACE
	CAIN X,X.SPL
	SKIPA WD,ENTRY+10	;PHYSICAL DEVICE SPOOLED
	MOVE WD,ENTRY+7
	PUSHJ P,SIXALL
DMP6A:	PUSHJ P,SPACE
	CAIN X,X.SPL
	JRST LSTSPL		;FROM HERE ON, SPOOLER IS A LOT DIFFERENT
	LDB	A,[POINT 6,ENTRY,35]	;ENTRY SIZE
	CAIG	A,3
	JRST	DUMP07		;LOGIN, MAY BE
	MOVE	A,ENTRY+3
	IDIVI	A,^D1000
	SKIPE	B
	ADDI	A,1
	LDB	B,[POINT 9,ENTRY,17]	;GET JOB NUMBER
	MOVEM	A,CJBRNT(B)	;SAVE AS RUN TIME IN CASE CHECKPOINT.
	PUSHJ	P,RNTOUT	;RUNTIME
	PUSHJ	P,TAB
	MOVE	N,ENTRY+4	;KCT
	IDIV	N,JIFSEC
	SKIPE	N1
	ADDI	N,1
	LDB	B,[POINT 9,ENTRY,17]	;JOB NUMBER
	MOVEM	N,CJBKCS(B)	;SAVE FOR CHECKPOINT
	PUSHJ	P,DECPRT
	PUSHJ	P,TAB
	LDB	A,[POINT 6,ENTRY,35]	;GET SIZE OF ENTRY AGAIN
	CAIG	A,5		;IF GT 5, HAVE DISK BLOCKS READ AND WRITTEN
	JRST	EOLA		;NO, FORGET IT
	MOVE	N,ENTRY+5	;DISK BLOCKS READ
	MOVEM	M,CJBRCT(B)	;SAVE IN CASE CHKPNT
	PUSHJ	P,DECPRT
	PUSHJ	P,TAB
	MOVE	N,ENTRY+6	;DISK BLOCKS WRITTEN
	MOVEM	N,CJBWCT(B)	;SAVE IN CASE CHKPNT
	PUSHJ	P,DECPRT
	CAIA
EOLA:	PUSHJ	P,TAB
EOL:	MOVE	A,ENTRY+1
	LDB	B,[POINT 9,ENTRY,17]
	MOVEM	A,CJBPPN(B)	;SAVE USER PPN
	JUMPLE	A,NOTOTL	;MAKE SURE POSITIVE
	PUSHJ	P,SUMFND	;GET TABLE ADDRESS FOR THIS GUY
	LDB	B,[POINT 9,ENTRY,8]
	MOVSI	C,1
	CAIN	B,FE.LGI
	ADDM	C,SUM.IO(A)
	CAIN X,X.CHK		;CHECKPOINT?
	JRST	CKLST		;YES.
	CAIE	B,FE.LGO
	JRST	NOTOTL
	AOS	SUM.IO(A)
	MOVE	B,ENTRY+3
	IDIVI	B,^D1000
	SKIPE	C
	ADDI	B,1
	ADDM	B,SUM.RN(A)
	MOVE	B,ENTRY+4
	IDIV	B,JIFSEC
	SKIPE	C
	ADDI	B,1
	ADDM	B,SUM.KS(A)
CKLST:	PUSHJ	P,TAB
	LDB	N,[POINT 9,ENTRY,17]	;JOB
	CAIL	N,MAXJOB
	JRST	EOLX
	MOVEI	B,0
	CAIN X,X.CHK		;IF CHKPOINT, DONT CLEAR JOB ON TIME
	MOVE	B,JOBON(N)	;LEAVE IT AS IS.
	EXCH	B,JOBON(N)
	JUMPE	B,ONZERO
	PUSH	P,B		;SAVE DATE AND TIME ON
	LDB	B,[POINT 12,B,11]	;DATE ON
	PUSHJ	P,INTDAT	;CONVERT TO INTERNAL FORMAT SO CAN SUB OFF-ON
	PUSH	P,B		;SAVE INTERNAL DATE ON
	LDB	B,[POINT 12,ENTRY+2,11]	;DATE OFF
	PUSHJ	P,INTDAT	;CONVERT TO INTERNAL FORMAT
	POP	P,D		;DATE ON
	SUBM	B,D		;D=DATE OFF-DATE ON = DAYS ON
	IMUL	D,JIFSEC
	IMULI	D,^D24*^D60*^D60
	POP	P,B		;RESTORE DATE AND TIME ON
	TLZ	B,777700	;JUST TIME ON
	LDB	C,[POINT 24,ENTRY+2,35]	;TIME OFF
	SUB	C,B
	ADD	D,C
	IDIV	D,JIFSEC
	SKIPE	E
	ADDI	D,1
	CAIE X,X.CHK		;UNLESS CKPOINT,
	ADDM	D,SUM.CN(A)
	MOVEM	D,CJBCON(N)	;SAVE CONNECT TIME
	CAIE X,X.CHK		;UNLESS NOT CHECKPOINT,
	SETZM	CJBCON(N)	;IN WHICH CASE CLEAR IT AS FLAG
	MOVE	A,D
	PUSH	P,A
	PUSHJ	P,TICDA1
DUMP08:	PUSHJ	P,TAB
	MOVE	A,ENTRY+3
	IDIVI	A,^D1000
	SKIPE	B
	ADDI	A,1
	IMUL	A,RUNPRC
	MOVE	B,ENTRY+4
	IDIV	B,JIFSEC
	SKIPE	C
	ADDI	B,1	;ROUND UP
	IMUL	B,KCSPRC
	ADD	A,B
	POP	P,B	;RETRIEVE ONTIME
	IMUL	B,CONPRC
	IDIVI	B,^D60*^D60
	SKIPE	C
	ADDI	B,1
	ADD	A,B
	PUSHJ	P,BUXPNT
NOTOTL:
EOLX:	PUSHJ	P,CRLF
	JRST	NXTENT
LSTSPL:	MOVE A,ENTRY+4
	IDIVI A,^D1000
	SKIPE B
	ADDI A,1
	PUSHJ P,RNTOUT		;TYPE RUN TIME OF SPOOLER
	PUSHJ P,TAB
	MOVE N,ENTRY+5
	IDIV N,JIFSEC
	SKIPE N1
	ADDI N,1
	PUSHJ P,DECPRT		;KILO-CORE-SECS
	PUSHJ P,TAB
	MOVE N,ENTRY+6
	PUSHJ P,DECPRT		;DISK READS
	PUSHJ P,TAB
	MOVE N,ENTRY+7
	PUSHJ P,DECPRT		;DISK WRITES
	PUSHJ P,TAB
	LDB WD,[POINT 12,ENTRY+3,11]
	MOVEM WD,SPLCOD		;SAVE SPOOLER QUEUE CODE
	ROT WD,-14
	PUSHJ P,SIXBP
	PUSHJ P,SPACE
	MOVSI WD,(SIXBIT /#/)
	PUSHJ P,SIXBP
	MOVE N,ENTRY+11		;SEQ NO
	PUSHJ P,DECPRT
	PUSHJ P,TAB
	MOVE N,ENTRY+12		;SPOOLER UNITS
	PUSHJ P,DECPRT
	MOVE A,SPLCOD		;GET SPOOLER Q CODE
	MOVSI B,-SPLLEN		;SEARCH TABLE FOR IT
	HRRZ WD,SPLTAB(B)	;CODE FROM TABLE
	CAMN WD,A
	JRST SPL1		;FOUND
	AOBJN B,.-3		;SEARCH TABLE
	JRST SPL9		;DIDNT FIND IT, DONT CHARGE
SPL1:	HLRZ A,SPLTAB(B)	;GET A PRICE IN TENTHS OF A CENT
	IMUL A,ENTRY+12		;TIMES NUMBER OF UNITS HE USED
	IDIVI A,^D10		;TO CENTS
	CAIL B,5		;ROUND
	ADDI A,1		; ..
	PUSHJ P,BUXPNT		;LIST THE PRICE
SPL9:	JRST EOLX		;DONE WITH SPOOLER ENTRY
;SUBROUTINE TO CONVERT STANDARD SYSTEM DATE TO INTERNAL FORMAT=DAYS SINCE NOV 13,1857
;THIS IS CONTINUOUS INCREASING BY DATE; SYSTEM DATE IS DISCONTINUOUS AT END OF MONTHS
;ARGS	B=DATE IN SYSTEM FORMAT
;VALUES	B=DATE IN INTERNAL FORMAT
;SAVES A, USES B,C,D,E

	RADIX	10

DATOFS==38395		;DATE OFFSET FOR JAN 1, 1964=DAYS SINCE NOV 13, 1857

INTDAT:	PUSH	P,A		;SAVE A
	IDIVI	B,12*31		;B=YEARS-1964
	IDIVI	C,31		;C=MONTHS-JAN, D=DAYS-1
	ADD	D,DAYTAB(C)	;D=DAYS-JAN 1
	MOVEI	E,0		;LEAP YEAR ADDITIVE IF JAN, FEB
	CAIL	C,2		;CHECK MONTH
	MOVEI	E,1		;ADDITIVE IF MAR-DEC
	MOVE	A,B		;SAVE YEARS FOR REUSE
	ADDI	B,3		;MAKE LEAP YEARS COME OUT RIGHT
	IDIVI	B,4		;HANDLE REQULAR LEAP YEARS
	CAIE	C,3		;SEE IF THIS IS LEAP YEAR
	MOVEI	E,0		;NO--WIPE OUT ADDITIVE
	ADDI	D,DATOFS(B)	;D=DAYS BEFORE JAN 1,1964 +SINCE JAN 1
				; +ALLOWANCE FOR ALL LEAP YEARS SINCE 64
	MOVE	B,A		;RESTORE YEARS SINCE 1964
	IMULI	B,365		;DAYS SINCE 1964
	ADD	D,B		;D=DAYS EXCEPT FOR 100 YR. FUDGE
	HRREI	B,64-99(A)	;B=YEARS SINCE 2000
	JUMPLE	B,INTDT1	;ALL DONE IF NOT YET 2000
	IDIVI	B,100		;GET CENTURIES SINCE 2000
	SUB	D,B		;ALLOW FOR LOST LEAP YEARS
	CAIE	C,99		;SEE IF THIS IS A LOST L.Y.
INTDT1:	ADD	D,E		;ALLOW FOR LEAP YEAR THIS YEAR

;HERE WITH D CONTAINING CORRECT NUMBER OF DAYS

	MOVE	B,D		;RETURN IN B
	POP	P,A		;RESTORE A
	POPJ	P,		;RETURN

DAYTAB:	EXP	0,31,59,90,120,151,181,212,243,273,304,334
	RADIX	8
DUMPX1:	JSP	M,MSG		;POPJ FROM DUMP
	ASCIZ	/
LOOKUP FAILURE
/
BADENT:
BADEND:
EOFQ:	MOVE	N,ENTRY
	CAMN	N,[XWD 777000,0]
	JRST	ENDDMP
	JUMPE	N,NXTENT
	MOVEI	M,[ASCIZ /
BAD FACT WORD: /]
	PUSHJ	P,MSG
	PUSHJ	P,OCTPRT
	PUSHJ	P,CRLF
	JRST	NXTENT

ENDDMP:	PUSHJ	P,TOTCHK	;BILL FOR PARTIALS
	TLZ	F,FL.HIA		;NO HIATUS ANY MORE.
	POPJ	P,0		;EXIT FROM DUMP

DUMP07:	LDB	N,[POINT 9,ENTRY,17]	;JOB NUMBER
	CAIN	X,X.LGI		;REALLY A LOGIN?
	CAIL	N,MAXJOB
	JRST	EOL
	MOVE	A,ENTRY+2
	EXCH	A,JOBON(N)
	JUMPE	A,EOL
	MOVEI	M,[ASCIZ /***REENTRY OF JOB***/]
	PUSHJ	P,MSG
	JRST	EOL
ONZERO:	MOVEI	M,[ASCIZ /NO ON TIME/]
	PUSHJ	P,MSG
	MOVE	A,ENTRY+2	;GET THIS ENTRY TIME
	CAIN X,X.CHK		;IS THIS A CHECKPOINT?
	MOVEM	A,JOBON(N)	;YES. START BILLING HIM NOW.
	JRST	EOLX

HIATUS:	PUSHJ	P,TOTCHK	;BILL FOR PARTIALS.
	PUSHJ	P,CLRON		;CLEAR ON TIMES
	JRST	NXTENT		;ASSUMING THIS WAS DUE TO FAILSAFE

CLRON:	MOVE	M,[XWD JOBON,JOBON+1]
	SETZM	JOBON
	BLT	M,CLREND		;CLEAR JOB INDEXED TABLES
	POPJ	P,0

HIAMSG:	JSP	M,MSG
	ASCIZ	/**HIATUS**
/
TOTCHK:	MOVSI	B,-MAXJOB	;COUNT THROUGH JOBS
TOTLUP:	SKIPG	A,CJBPPN(B)	;IS THERE A USER FOR THIS JOB?
	JRST	TOTNXT		;NO.
	PUSHJ	P,SUMFND	;GET ADDRESS FOR THIS
	SKIPN	CJBCON(B)	;IS THERE A CKPOINT ENTRY?
	JRST	TOTNXT		;NO.
	MOVE	C,CJBKCS(B)	;GET KCS AT CHKPOINT.
	ADDM	C,SUM.KS(A)	;BILL HIM
	SETZM	CJBKCS(B)
	MOVE	C,CJBCON(B)	;GET CONNECT TIME
	ADDM	C,SUM.CN(A)	;AND BILL IT.
	SETZM	CJBCON(B)
	MOVE	C,CJBRNT(B)	;NOW RUN TIME.
	ADDM	C,SUM.RN(A)	;BILL THAT TOO
TOTNXT:	AOBJN	B,TOTLUP	;MORE?
	POPJ	P,0
TOTALS:	PUSHJ	P,FFOUT
	SETZM	BUXTOT		;PREPARE FOR TOTAL MONEY
	MOVEI	M,HED2
	PUSHJ	P,MSG
	HRRZ	D,SUMBAS	;BASE OF ACCTG SUMMARY
TOTAL1:	SKIPG	A,0(D)
	JRST	TOTAL2		;END OF TABLE
	HLRZ	N,SUM.PP(D)	;GET PROJ NUMBER
	PUSHJ	P,OCTPRT
	PUSHJ	P,TAB
	HRRZ	N,SUM.PP(D)
	PUSHJ	P,OCTPRT
	PUSHJ	P,TAB
	HLRZ	N,SUM.IO(D)
	PUSHJ	P,DECPRT
	PUSHJ	P,TAB
	HRRZ	N,SUM.IO(D)
	PUSHJ	P,DECPRT
	PUSHJ	P,TAB
	MOVE	A,SUM.RN(D)
	PUSHJ	P,RNTOUT
	PUSHJ	P,TAB
	MOVE	A,SUM.CN(D)
	PUSHJ	P,TICDA1
	PUSHJ	P,TAB
	MOVE	N,SUM.KS(D)
	PUSHJ	P,DECPRT
	MOVE	N,SUM.KS(D)
	CAMG	N,[EXP ^D9999999]
	PUSHJ	P,TAB
	PUSHJ	P,TAB
	MOVE	A,SUM.KS(D)
	IMUL	A,KCSPRC
	MOVE	B,SUM.CN(D)
	IMUL	B,CONPRC
	IDIVI	B,^D60*^D60
	SKIPE	C
	ADDI	B,1
	ADD	A,B
	MOVE	B,SUM.RN(D)
	IMUL	B,RUNPRC
	ADD	A,B
	ADDM	A,BUXTOT		;COUNT THE MONEY
	PUSHJ	P,BUXPNT
	PUSHJ	P,CRLF
	ADDI	D,SUMSIZ
	JRST	TOTAL1
TOTAL2:	PUSHJ	P,CRLF
	MOVEI	M,[ASCIZ /TOTAL PRICES /]
	PUSHJ	P,MSG
	MOVE	A,BUXTOT	;GET MONEY
	PUSHJ	P,BUXPNT	;TYPE IT
	PUSHJ	P,CRLF
	CALLI	EXIT

RDM:	SOSLE	MFDB+2
	JRST	MFDOK
	INPUT	MFD,0
	STATZ	MFD,760000
	POPJ	P,0
MFDOK:	ILDB	WD,MFDB+1
CPOPJ1:	AOS	0(P)
CPOPJ:	POPJ	P,0

DSKRD:	SOSLE	DSKB+2
	JRST	DSKOK
	INPUT	DSK,0
	STATZ	DSK,760000
	JRST	EOFEND
DSKOK:	ILDB	WD,DSKB+1
	POPJ	P,0

EOFEND:	MOVEI	M,[ASCIZ	/
BAD END (EOF)
/]
	PUSHJ	P,MSG
	POP	P,(P)	;RETURN FROM DSKRD
	POPJ	P,0	;RETURN FROM DUMP
MINOUT:	IDIVI	A,^D60
	MOVE	N,A
	PUSHJ	P,DECPR2
	MOVEI	CH,":"
	PUSHJ	P,OUCH
	MOVE	N,B
	JRST	DECPR2
SUMFND:	PUSH	P,D		;SAVE SOME ACS
	PUSH	P,C
	PUSH	P,B
SUMFN1:	MOVEI	B,SUMSIZ	;SPACE NEEDED
	ADD	B,SUMTOP
	CAMG	B,JOBREL
	JRST	SUMFN2
	MOVEI	B,2000		;TRY TO GET A K
	ADD	B,JOBREL
	CALLI	B,CORE
	JRST	CORLOS		;NOT THERE
	JRST	SUMFN1		;GOT IT. TRY AGAIN

SUMFN2:	MOVE	B,SUMBAS	;START OF DATA
SUMFN5:	SKIPG	0(B)		;TEST ENTRY
	JRST	SUMFN3		;END OF TABLE
	CAMN	A,0(B)		;SAME AS REQUESTED PPN?
	JRST	SUMFN4		;YES
	CAMG	A,0(B)		;NO. PASSED IT?
	JRST	SUMFN3		;YES. NEED TO MOVE UP STUFF
	ADDI	B,SUMSIZ	;ON TO NEXT ENTRY
	JRST	SUMFN5
SUMFN3:	MOVE	C,SUMTOP
SUMFN6:	MOVE	D,0(C)
	MOVEM	D,SUMSIZ(C)	;MOVE STUFF UP
	CAMLE	C,B
	SOJA	C,SUMFN6	;MORE TO GO
	MOVEI	C,SUMSIZ	;INCREASE SIZE OF TABLE
	ADDM	C,SUMTOP
	SETZM	0(B)		;CLEAR OUT THE NEW ENTRY
	HRLI	C,0(B)
	HRRI	C,1(B)
	BLT	C,SUMSIZ-1(B)
	MOVEM	A,SUM.PP(B)	;STORE THE PPN
SUMFN4:	MOVE	A,B		;ADDRESS OF DATA
	POP	P,B
	POP	P,C
	POP	P,D
	POPJ	P,0
TICDAY:	IMULI	A,^D1000
	IDIV	A,JIFSEC
MSTOUT:	SKIPGE A
	MOVEI A,0		;PROTECT AGAINST NEGATIVE VALUES
	IDIV	A,[EXP ^D60000*^D60]
	MOVE	N,A
	PUSHJ	P,DECPR2
	MOVEI	CH,":"
	PUSHJ	P,OUCH
	MOVE	A,B
	IDIVI	A,^D60000
	MOVE	N,A
	PUSHJ	P,DECPR2
	MOVEI	CH,":"
	PUSHJ	P,OUCH
	MOVE	N,B
	IDIVI	N,^D1000
	JRST	DECPR2

DECPR6:	CAIG	N,^D99999
	PUSHJ	P,SPACE
DECPR5:	CAIG	N,^D9999
	PUSHJ	P,SPACE
DECPR4:	CAIG	N,^D999
	PUSHJ	P,SPACE
DECPR3:	CAIG	N,^D99
	PUSHJ	P,SPACE
DECPR2:	CAIG	N,11
	PUSHJ	P,ZEROUT
DECPRT:	SKIPA	R,[12]
OCTPRT:	MOVEI	R,10
	MOVEI	CH,"-"
	SKIPGE	N
	PUSHJ	P,OUCH
	MOVMS	N
RDXPRT:	IDIVI	N,(R)
	HRLM	N1,0(P)
	SKIPE	N
	PUSHJ	P,RDXPRT
	HLRZ	CH,0(P)
	ADDI	CH,"0"
OUCH:	SOSG	LPTB+2
	OUTPUT	LPT,0
	IDPB	CH,LPTB+1
	POPJ	P,0
MSG:	HRLI	M,440700
MSG1:	ILDB	CH,M
	JUMPE	CH,CPOPJ
	PUSHJ	P,OUCH
	JRST	MSG1

CORLOS:	MOVEI	M,[ASCIZ /
?NOT ENOUGH CORE/]
	PUSHJ	P,MSG
	CALLI	EXIT

CRLF2:	PUSHJ	P,CRLF
CRLF:	JSP	M,MSG
	ASCIZ /
/
FFOUT:	MOVEI	CH,14
	JRST	OUCH

ZEROUT:	MOVEI	CH,"0"
	JRST	OUCH

TAB:	MOVEI	CH,11
	JRST	OUCH

DLRSGN:	MOVEI	CH,44
	JRST	OUCH

DOT:	MOVEI	CH,"."
	JRST	OUCH

SPACE:	MOVEI	CH,40
	JRST	OUCH

TICDA1:
RNTOUT:	IMULI	A,^D1000
	JRST	MSTOUT
SIXBT:	PUSHJ	P,SIXBP
	JRST	TAB

SIXALL:	TLOA F,FL.SIX
SIXBP:	TLZ F,FL.SIX
	MOVE	BP,[XWD	440600,WD]
SIXBP1:	ILDB	CH,BP
	TLNN F,FL.SIX
	JUMPE	CH,CPOPJ
	ADDI	CH,40
	PUSHJ	P,OUCH
	TLNE	BP,770000
	JRST	SIXBP1
	POPJ	P,0

DATOUT:	IDIVI	A,^D31
	MOVEI	N,1(B)
	PUSHJ	P,DECPR2
	IDIVI	A,^D12
	MOVE	B,MONTAB(B)
	MOVEI	C,0
	MOVEI	M,B
	PUSHJ	P,MSG
	MOVEI	N,^D64(A)
	JRST	DECPRT

MONTAB:
	ASCII /-Jan-/
	ASCII /-Feb-/
	ASCII /-Mar-/
	ASCII /-Apr-/
	ASCII -/
	ASCII /-Jun-/
	ASCII /-Jul-/
	ASCII /-Aug-/
	ASCII /-Sep-/
	ASCII /-Oct-/
	ASCII /-Nov-/
	ASCII /-Dec-/

BUXPNT:	SKIPGE A
	MOVEI A,0		;PROTECT AGAINST NEGATIVE VALUES
	PUSHJ	P,DLRSGN
	IDIVI	A,^D100
	MOVE	N,A
	PUSHJ	P,DECPR6
	PUSHJ	P,DOT
	MOVE	N,B
	JRST	DECPR2
;MESSAGES FOR HEADERS

HEDMSG:	ASCII	 /
TYPE	JOB	LINE	PRJ	/
ASCII	/PRG	DATE	  TIME		RUN/
ASCIZ /TIME		KCS	READ	WRITTEN	CONNECT		PRICE

/
HED2:	ASCII	/
SUMMARY BY USER

PROJ	PROG #	LOGINS	LOGOUTS	RUNTIME/
ASCIZ /		CONNECT		KCS		PRICE

/
;STORAGE AND STUFF

PDP:	XWD	-PDLL,PDL-1
PDL:	BLOCK PDLL

MFDB:	BLOCK	3
LPTB:	BLOCK	3
DSKB:	BLOCK	3

MFDPPN:	XWD	1,1
SYSPP:	XWD	1,1
JIFSEC:	0

EXTEN:	0
BUXTOT:	0
SJOBFF:	0		;SAVE JOBFF
SUMBAS:	0		;BASE OF SUMMARY TABLE
SUMTOP:	0		;TOP OF SUMMARY TABLE
SPLCOD:	0		;TWO CHARACTER NAME OF SPOOL Q CODE

RUNPRC:	EXP ^D8		;RUN PRICE 8 CENTS PER SECOND
KCSPRC:	EXP ^D1		;K CORE ARE 1 CENT PER RUN SEC
CONPRC:	EXP ^D800	;CONNECT PRICE $8/HR

;TABLE OF PRICES AND NAMES OF SPOOLER OPERATIONS
;UNITS ARE TENTHS OF A CENT PER SPOOLER-UNIT

SPLTAB:	XWD ^D50,'LP'		;FIVE CENTS A PAGE FOR THE LPT
	XWD ^D5,'CD'		;HALF A CENT PER CARD ON THE CARD PUNCH
	XWD ^D150,'PL'		;FIFTEEN CENTS A MINUTE ON THE PLOTTER
	XWD ^D30,'PT'		;THREE CENTS A FOOT FOR PAPER TAPE
SPLLEN==.-SPLTAB
DEFINE M.M(A,B,C)<
X..==X..+1
X.'A==X..
	XWD FE.'A,X.'A
>
X..==0

FETAB:	M.FE
FETABL==.-FETAB
DEFINE M.M(A,B,C)<
	<SIXBIT /C/>
>

FESIX:	SIXBIT /??????/
	M.FE
TABBLK:
JOBON:	BLOCK	MAXJOB
CJBCON:	BLOCK	MAXJOB	;CKPNT CONNECT TIME
CJBKCS:	BLOCK	MAXJOB	;AND KCS PER JOB
CJBRNT:	BLOCK	MAXJOB	;AND RUN TIME
CJBPPN:	BLOCK	MAXJOB	;AND USER PPN.
CJBRCT:	BLOCK	MAXJOB	;AND DISK BLOCKS READ
CJBWCT:	BLOCK	MAXJOB	;AND DISK BLOCKS WRITTEN
CLREND=.-1	;FOR CLEARING JOB TABLES.
BLTEND=.-1

ENTRY:	BLOCK	MAXENT

	XLIST	;LITERALS
	LIT
	LIST
MONEND:	END	MONEY
  Kr.W