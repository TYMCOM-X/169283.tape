C	BMD07V
C
C      THIS IS A REVISION OF THE FORTRAN 4 VERSION OF BMD07V.
C      THE REVISION HAS BEEN MADE TO PERMIT EXECUTION OF THE PROGRAM
C      ON THE IBM 360/75.  IT INVOLVES A REWORKING OF THE STRUCTURE
C      OF THE BIT-HANDLING LOGIC USED IN SPLITTING PAIRS.
C      THE COMPUTATIONAL PROCEDURES HAVE NOT BEEN CHANGED.
C
C
      DIMENSION  DATE(2), FMT(120), MANY(100), TITLE(100), XBAR(100),
     1 X(23000),LCODE(72),CONST(72),L1(12),D2(12)
     2,MANYR(100),RXBAR(100),HOLD(101),KHOLD(100)
      REAL*4 MANYR,MANY
      REAL*8 FX
      DIMENSION XBRSAV(100),SAVMNY(100)
      COMMON/MNDSPL/SAVMNY,XBRSAV
      COMMON  X
      EQUIVALENCE (X(19701),MANYR(1)),(X(19901),RXBAR(1))
      EQUIVALENCE (NP,X(22276)),(MAX,X(22277)),(LAST,X(22278)),(ITAPE,
     .X(22279)),(I1,X(22280)),(I2,X(22281)),(MU,X(22282)),(NK,X(22283)),
     .(NW,X(22284)),(IS,X(22285))
      EQUIVALENCE (MANY(1),X(22286)),(FMT(1),X(22386)),(XBAR(1),X(20001)
     .)
C
      REAL*8 MNS,STDVS
      DATA MNS,STDVS/'MEANS','STDEVS'/
      REAL*8 PROBLM/8HPROBLM  /,FINISH/8HFINISH  /,SAMSIZ/8HSAMSIZ  /
      REAL*8 SPECTG/8HSPECTG  /,CODE,PROBNO
      DIMENSION TTLPSZ(100),DUMPSZ(100)
      REAL*8 TTLPSZ,DUMPSZ
      COMMON / REAL8/ TTLPSZ,DUMPSZ
  300 FORMAT('1BMD07V - MULTIPLE RANGE TESTS - REVISED ',
     117HFEBRUARY 19, 1970/
     241H HEALTH SCIENCES COMPUTING FACILITY, UCLA)
      DATA REWNO/'NO'/
      LAST = 4950
      ITAPE = 1
      LASTAP = 1
      NEVER = 0
    4 FORMAT(A6,6F10.0)
  339 FORMAT(A6,6F10.0/(6X,6F10.0 ))
 1111 CONTINUE
      READ(5,100)CODE,PROBNO,NP,NTRAN,NLBLS,NRNG,NCNCO,REW,NTAPE,IVF,ALF
  100 FORMAT(2A6,I3,I1,I3,I1,I3,43X,A2,2I2,F2.0)
    2 NP1=NP-1
      TLEVEL=NP1
      ALF=0.01*ALF
      IF(ALF.NE..1.AND.ALF.NE..05.AND.ALF.NE.0.01)ALF=.05
      AVTOT=0.0
      SMSQ=0.0
      IF(CODE.EQ.FINISH) GO TO 1914
    1 IF (CODE.NE.PROBLM) GO TO 700
      IF(NP.LT.2.OR.NP.GT.100)GO TO 701
      IF(IVF.LE.10)GO TO 5
      IVF=1
      WRITE(6,1962)
      GO TO 1111
   18 WRITE(6,1968)CODE
 1968 FORMAT(//' MEANS CARD(S) EXPECTED, BUT ',A6,' SHOWS UP. PROGRAM SK
     *IPS TO NEXT PROBLEM')
      GO TO 1111
    3 PRINT 1969,CODE
 1969 FORMAT(//' STDEVS CARD(S) EXPECTED, BUT ',A6,' S+OWS UP. PROGRAM S
     *KIPS TO NEXT PROBLEM')
      GO TO 1111
 1962 FORMAT(64H0INCORRECT NUMBER SPECIFIED FOR VARIABLE FORMAT CARDS, 1
     1 ASSUMED)
    5 IF (NTAPE.LE.0) NTAPE=5
      IF(NTAPE.EQ.6.OR.NTAPE.GT.16) GO TO 702
C
   10 WRITE (6,300)
      IF(NEVER.LE.0)GO TO 9
      IF(NTAPE.NE.5.AND.REW.NE.REWNO)REWIND NTAPE
    9 NEVER = NEVER + 1
      WRITE(6,400)PROBNO,NP,IVF,NTAPE,NCNCO
  400 FORMAT(/// ' PROBLEM CODE',A6/' NUMBER OF TREATMENTS',
     1 9H GROUPS   , I4, / , 34H NUMBER OF VARIABLE FORMAT CARDS   I2,
     2/' DATA INPUT TAPE  ',I2 /' NUMBER OF COEF CARD(S) ',I4)
      IF  (NP - 13)  11, 11, 12
   11 READ (5,500)CODE, (MANY(I), I = 1, NP)
  500 FORMAT(A6,1X,13F5.0)
      GO TO  13
   12 READ (5,600)CODE, (MANY(I), I = 1, NP)
  600 FORMAT(A6,1X,13F5.0/(7X,13F5.0))
   13 IF(CODE.NE.SAMSIZ ) GO TO 703
      IF(IVF.GT.0)GO TO 14
      IF(NP.LE.6)READ(5,4)CODE,(XBAR(I),I=1,NP)
      IF(NP.GT.6)READ(5,339)CODE,(XBAR(I),I=1,NP)
      IF(CODE.NE.MNS)GO TO 18
      IF(NP.LE.6)READ(5,4)CODE,(HOLD(I),I=1,NP)
      IF(NP.GT.6)READ(5,339)CODE,(HOLD(I),I=1,NP)
      IF(CODE.NE.STDVS)GO TO 3
      SPSQ=0.0
      DF=-NP
      DO 1234 I=1,NP
      SPSQ=SPSQ+HOLD(I)*HOLD(I)*(MANY(I)-1)
      AVTOT=AVTOT+MANY(I)*XBAR(I)
 1234 DF=DF+MANY(I)
      CALL RDLBL(NLBLS,NP,TTLPSZ)
      AVTOT=AVTOT/(DF+NP)
      DO 1235 I=1,NP
 1235 SMSQ=SMSQ+MANY(I)*((XBAR(I)-AVTOT)**2)
      TOBS=DF+TLEVEL
      GT=SMSQ+SPSQ
      GO TO 1122
   14 DO 15 I=1,NP
      IF(MANY(I).LT.1.0.OR.MANY(I).GT.20000.0)GO TO 704
   15 HOLD(I+1)=0.0
      HOLD(1)=0.0
      CALL RDLBL (NLBLS,NP,TTLPSZ)
      IF (NP.EQ.0) GO TO 607
      SPSQ = 0.0
      SMSQ = 0.0
      ASSIGN 26 TO ITRAN
      IF(NTRAN)19,19,16
   16 ASSIGN 25 TO ITRAN
  401 NH=0
      WRITE (6,420)
  420 FORMAT(1H023HSPECIAL TRANSGENERATION/1H 3X4HCODE4X8HCONSTANT)
      DO 445 NZ=1,NTRAN
      READ (5,425) FX,M,(L1(I),D2(I),I=1,M)
      IF (FX.EQ.SPECTG) GO TO 404
  403 WRITE (6,405)
      GO TO 607
  405 FORMAT(31H0ERROR ON TRANS-GENERATION CARD)
  404 DO 415 NG=1,M
      NG1=NH+NG
      LCODE(NG1)=L1(NG)
  415 CONST(NG1)=D2(NG)
  445 NH=NH+M
      DO 446 NG=1,NH
  446 WRITE (6,431)LCODE(NG),CONST(NG)
  431 FORMAT(1H 5XI2,1XF11.5)
  425 FORMAT(A6,I1,8(I2,F6.0))
   19 IVF = IVF*18
      READ (5,200)(FMT(I), I = 1, IVF)
  200 FORMAT (18A4)
      GT = 0.0
      TOBS = 0.0
C
      TLEVEL = NP1
      DO  20  I = 1, NP
      NI = MANY(I)
      XNI = NI
      XB = 0.0
      READ (NTAPE,FMT)(X(J), J = 1, NI)
      GO TO ITRAN,(25,26)
   25 CALL TRNGEN(X,NI,NH,FM,LCODE,CONST)
      IF (NI.EQ.0) GO TO 607
   26 DO  21  J = 1, NI
   21 XB = XB + X(J)
      GT = GT + XB
      XB = XB/XNI
      SPSQ1=SPSQ
      DO  22  J = 1, NI
   22 SPSQ = SPSQ + (X(J) - XB)**2
      HOLD(I)=SQRT((SPSQ-SPSQ1)/(XNI-1.0))
      TOBS = TOBS + XNI
   20 XBAR(I) = XB
      GT = GT/TOBS
      DO  24  I = 1, NP
   24 SMSQ=SMSQ+MANY(I)*(XBAR(I)-GT)**2
      GT = SMSQ + SPSQ
   73 TOBS = TOBS - 1.0
      DF = TOBS - TLEVEL
 1122 SM=SMSQ/TLEVEL
      SDEV = SPSQ/DF
      FRATIO = SM/SDEV
      WRITE (6,900)
  900 FORMAT( /1H033X,'ANALYSIS OF VARIANCE',//
     1 1H  19X, 14HSUM OF SQUARES , 6X, 2HDF, 6X, 11HMEAN SQUARE ,
     2 6X, 7HF RATIO  / )
      WRITE (6,1000)SMSQ, NP1, SM, FRATIO
 1000 FORMAT(15H0BETWEEN GROUPS , F17.4, I10, F16.4, F14.4)
C
      WRITE (6,1300)SPSQ, DF,	      SDEV
 1300 FORMAT(15H0WITHIN GROUPS , F17.4,F10.0,F16.4)
      WRITE (6,1400)GT, TOBS
 1400 FORMAT(/6X,'TOTAL',F21.4,F10.0)
      ERRMS=SDEV
      SDEV = SQRT(SDEV)
      NTAIM=0
      NDF=DF
 2222 CALL DISPLY (HOLD,NTAIM)
      IF(-NRNG)1405,1405,1409
C SAVE RANKED AVERAGES AND SAMPLE SIZES
 1405 DO 1408 I=1,NP
      KHOLD(I)=MANYR(I)
 1408 HOLD(I)=RXBAR(I)
      GO TO 1410
 1409 NRNG=0
 1410 I=1
      IF(NRNG.EQ.0)CALL RNGAPR(ALF,NDF,NP,X(20001),SDEV)
 1605 IF(NRNG.NE.0)CALL RANGE(SDEV,NP1,I)
      IF  (NP1)  607, 607, 30
   30 CALL  ANOVWT
      CALL  PAIRDO
      CALL  SIGSET
      NKEEP = NK
      WRITE(6,4000)
 4000 FORMAT(1H-)
      IF  (NKEEP)  150, 150, 151
  150 WRITE (6,1500)
 1500 FORMAT(	   49H THERE ARE NO HOMOGENEOUS SUBSETS - ANY TWO MEANS
     1 22H DIFFER SIGNIFICANTLY.  )
      GO TO 1601
  151 WRITE (6,1600)NKEEP
 1600 FORMAT(	    10H THERE ARE ,I4, 23H  HOMOGENEOUS SUBSETS
     1 59H (SUBSETS OF ELEMENTS, NO PAIR OF WHICH DIFFER BY MORE THAN
     2 31H THE SHORTEST SIGNIFICANT RANGE	    /
     3 ' FOR A SUBSET OF THAT SIZE) WHICH ARE LISTED AS FOLLOWS'  )
      I1 = 1
      I2 = NKEEP
      CALL  PUTOUT
C RESTORE RANKED AVERAGES FOR NEXT RANGE SET
 1601 DO 1603 J=1,NP
      MANYR(J)=KHOLD(J)
 1603 RXBAR(J)=HOLD(J)
      IF(NRNG.EQ.0.OR.NRNG.EQ.I)GO TO 2000
      I=I+1
      GO TO 1605
  607 WRITE (6,6070)
 6070 FORMAT('-THIS ERROR CONDITION CANNOT BE IGNORED - COMPUTATION IS H
     .ALTED.',/,'0SEE THE BMD MANUAL,SECOND EDITION, FOR INSTRUCTIONS CO
     .NCERNING',/,' THE PROPER PREPARATION AND ORDERING OF CONTROL CARDS
     . FOR BMD07V .',/'-THE NEXT PROBLEM (IF ANY) IS ATTEMPTED.'//)
  706 READ(5,100,ERR=705,END=710)CODE,PROBNO,NP,NTRAN,NLBLS,NRNG,NCNCO,
     *NTAPE,IVF,ALF
      IF (CODE.EQ.FINISH) GO TO 1914
      IF (CODE - PROBLM ) 706,2,706
  710 WRITE (6,1710)
 1710 FORMAT  ('1END OF INPUT FILE ENCOUNTERED, COMPUTATION HALTED.'///)
      STOP
  705 GO TO 706
 1914 WRITE (6,1900)
 1900 FORMAT(40H1COMPUTATION HALTED BY	FINISH	CARD.	  )
 9999 IF(LASTAP.NE.5) REWIND LASTAP
      IF(ITAPE.NE.5) REWIND ITAPE
 1915 STOP
  700 WRITE (6,1700) CODE
 1700 FORMAT ('-THE PROBLEM CARD DOES NOT CONTAIN ''PROBLM'' IN COLUMNS
     .1 - 6, BUT CONTAINS THE CODE ',1H',A6,2H'.)
      GO TO 607
  701 WRITE (6,1701) NP
 1701 FORMAT ('-THE NUMBER OF TREATMENT GROUPS MUST BE BETWEEN 2 AND 100
     ..'/'0THE PROBLEM CARD SPECIFIES IT TO BE',I3)
      GO TO 607
  702 WRITE (6,1702) NTAPE
 1702 FORMAT ('-THE ALTERNATE INPUT TAPE NUMBER MUST BE 1 - 5 OR 7 - 16.
     .'/'0THE PROBLEM CARD SPECIFIES IT TO BE',I3)
      GO TO 607
  703 WRITE (6,1703) CODE
 1703 FORMAT ('-A SAMPLE SIZE CARD IS EXPECTED.  COLUMNS 1 - 6 OF THE CA
     .RD MUST CONTAIN ''SAMSIZ'', BUT CONTAIN THE CODE',1H',A6,2H'.)
      GO TO 607
  704 PRINT 1704,MANY(I)
 1704 FORMAT('-SAMPLE SIZE',F6.0,' IS ILLEGAL')
      GO TO 607
 2000 IF(NCNCO)1111,1111,2010
 2010 NPP=MIN0( 8,NP)
      NDF=DF
      IF(NCNCO.LT.1)GO TO 1111
      CALL CNTRST(NCNCO,NP,TTLPSZ,X,X(5001),AL,XBAR,MANY,XBRSAV,SAVMNY,
     *HOLD,HOLD(51),ERRMS,NDF)
      IF(AL.GT.0.0)GO TO 1111
      NRNG=0
      NP=NCNCO
      NP1=NP-1
      NCNCO=0
      ALF=0.05
      GO TO 2222
      END
CRDLBL
C     SUBROUTINE TO READ IN LABELS CARDS, STORE THEM IN ARRAY,
C     AND SUBSTITUTE NUMBERS FOR UNLABELED VARIABLES
C     NVAR IS TOTAL NUMBER OF VARIABLES
C     NLBVAR IS NUMBER OF LABELED VARIABLES EXPECTED
C
      SUBROUTINE RDLBL(NLBVAR,NVAR,ARRAY)
      REAL*8 ANUMB,ARRAY,DUMY
      DIMENSION ARRAY(1),IDUM(7),DUMY(7)
      DATA ALABEL/4HLAB /
C     DIMENSION ARRAY(1),IDUM(7),DUMY(7)
      DATA Q000HL/4HLAB /
      ALABEL=(+Q000HL)
C     NUMBER VARIABLES
      DO 1 I=1,NVAR
   1  ARRAY(I)=ANUMB(I)
C     IF NO LABELS, RETURN
      IF(NLBVAR) 9,9,2
   2  N=0
C     READ 1 LABELS CARD
  20  READ (5,3) TEST,(IDUM(J),DUMY(J),J=1,7)
   3  FORMAT(A3,3X,7(I4,A6))
C     TEST FOR 'LAB' IN FIRST 3 COLS.
      IF(TEST-ALABEL) 4,6,4
C     ERROR--PRINT MESSAGE AND QUIT
   4  WRITE (6,5)
   5  FORMAT(36H0LABELS CARD NOT FOUND WHEN EXPECTED)
      NVAR=0
      RETURN
C     EXAMINE 7 FIELDS
   6  DO 8 J=1,7
      K=IDUM(J)
C     TEST INDEX.  IF 0, IGNORE.  IF ILLEGAL, PRINT MESSAGE AND
C     IGNORE EXCEPT TO COUNT
      IF(K) 11,8,10
  10  IF(K-NVAR) 7,7,11
  11  WRITE (6,12)K,DUMY(J)
  12  FORMAT(18H0LABELS CARD INDEX,I7,18H INCORRECT. LABEL ,A6,9H IGNORE
     1D.)
      GO TO 13
C     MOVE LABEL TO ARRAY
   7  ARRAY(K)=DUMY(J)
C     STEP NUMBER OF VARIABLES
  13  N=N+1
C     TEST FOR END. IF END, RETURN. IF NOT, SCAN OTHER FIELDS.
      IF(N-NLBVAR) 8,9,9
   8  CONTINUE
      GO TO 20
   9  RETURN
      END
CDISPLY       SUBROUTINE DISPLY FOR BMD07V	   JANUARY 29, 1965
      SUBROUTINE DISPLY(HOLD,NTAIM)
      REAL*4 MANYR,MANY
      REAL*8 TTLPSZ(100),DUMPSZ(100)
      COMMON / REAL8 / TTLPSZ,DUMPSZ
      DIMENSION  X  (23000), XBAR(100), DUM(100), XR(100), FMT(180),
     1 MANY(100), MANYR(100), TITLE(100), IR(100), IND(100)
     2,HOLD(100)
      COMMON X
      DIMENSION XBRSAV(100),SAVMNY(100)
      COMMON/MNDSPL/SAVMNY,XBRSAV
      EQUIVALENCE (IR(1),X(19501)),(IND(1),X(19601)),(MANYR(1),X(19701))
     .,(XR(1),X(19901)),(XBAR(1),X(20001))
     .,(MANY(1),X(22286))
      EQUIVALENCE (N ,X(22276)),(MAX,X(22277)),(LAST,X(22278)),(ITAPE,
     .X(22279)),(I1,X(22280)),(I2,X(22281)),(MU,X(22282)),(NK,X(22283)),
     .(NW,X(22284)),(IS,X(22285))
      NTAIM=NTAIM+1
      DO  1  I = 1, N
    1 MANYR(I) = I
      CALL  IRANK(XBAR, IR, N)
      CALL RERANK(MANYR,XBRSAV,IR,N)
      DO 200 I=1,N
  200 IND(I)=XBRSAV(I)
      CALL DERANK(TTLPSZ,DUMPSZ,IR,N)
      CALL  RERANK(XBAR, XR, IR, N)
      CALL  RERANK(MANY, MANYR, IR, N)
      IF(NTAIM.GE.2)GO TO 800
      WRITE (6,400)
  400 FORMAT( //,65X,'**'/10X,
     1 34H TREATMENT MEANS IN ORIGINAL ORDER , 21X, 2H** , 21X,
     2 32H TREATMENT MEANS IN RANKED ORDER  )
      WRITE (6,500)
      WRITE (6,500)
  500 FORMAT(65X, 2H**)
      WRITE (6,600)
  600 FORMAT(10H TREATMENT,19X,8HSTANDARD,6X,10HNUMBER	OF,12X,2H**,39X,
     111H NUMBER  OF,5X,9HTREATMENT/54H  NUMBER   LABEL     MEAN    DEVI
     2ATION    REPLICATIONS,4X9HRANK   **11X4HRANK,4X,
     3 43H LABEL     MEAN     REPLICATIONS     NUMBER	    )
      WRITE (6,500)
      WRITE (6,300)(I,TTLPSZ(I),XBAR(I),HOLD(I),MANY(I),IR(I),I,
     .DUMPSZ(I),XR(I),MANYR(I),IND(I),I=1,N)
  300 FORMAT(I6,4X,A6,F10.3,F12.4,F11.0,I12,4X,2H**,I14,5X,A6,F10.3,F11.
     *0,I14)
      WRITE (6,500)
  800 DO 700 I=1,N
      SAVMNY(I)=MANY(I)
  700 XBRSAV(I)=XBAR(I)
      RETURN
      END
CIRANK	   SUBROUTINE  IRANK(X, IR, N)	   PUTS RANKS OF  X  IN  IR
      SUBROUTINE  IRANK(X, IR, N)
      DIMENSION  X(5000), IR(5000)
      DO  1  I = 1, N
    1 IR(I) = 0
      DO  2  I = 1, N
      XX = X(I)
      DO  2  J = I, N
      IF  (XX - X(J))  4, 3, 3
    4 IR(J) = IR(J) + 1
      GO TO  2
    3 IR(I) = IR(I) + 1
    2 CONTINUE
      RETURN
      END
      SUBROUTINE DERANK (X,Y,I,N)
      REAL*8 X,Y
      DIMENSION X(N),Y(N),I(N)
      DO 1 J=1,N
      JJ=I(J)
    1 Y(JJ)=X(J)
      RETURN
      END
CRERANK   SUBROUTINE  RERANK(X, Y, I, N)  -  USES  I  TO RANK  X  IN  Y
      SUBROUTINE  RERANK(X, Y, I, N)
      DIMENSION  X(5000), Y(5000), I(5000)
      DO  1  J = 1, N
      JJ = I(J)
    1 Y(JJ) = X(J)
      RETURN
      END
CRANGE	  SUBROUTINE  RANGE(SDEV, LOOK)  FOR  BMD07V	10-14-63
      SUBROUTINE RANGE(SDEV,LOOK,J)
      DIMENSION  XYZ(22275), R(100)
      COMMON  XYZ	      , N      , MAX	, LAST	 , IDUM
      EQUIVALENCE (XYZ(20001),R(1))
      REAL*8 RANGES/8HRANGES  /,CODE
      IF  (N - 12)  1, 1, 2
    1 READ (5,10)CODE, (R(I), I = 2, N)
   10 FORMAT(A6, 11F6.4)
      GO TO  3
    2 READ (5,20)CODE, (R(I), I = 2, N)
   20 FORMAT(A6, 11F6.4  /  (6X, 11F6.4) )
    3 IF (CODE.EQ.RANGES) GO TO 5
    4 LOOK = 0
      WRITE (6,100) CODE
  100 FORMAT ('-A RANGE CARD IS EXPECTED.  CARD COLUMNS 1 - 6 MUST CONTA
     .IN ''RANGES'', BUT CONTAIN THE CODE '''A6,'''.')
      RETURN
    5 LOOK = 1
      WRITE(6,200)J,(I,R(I),I=2,N)
  200 FORMAT(//' READ IN RANGES(',I1,')'//' NO. OF GROUPS',/'	IN SUBSE
     *T',6X,'RANGE'//(5X,I3,9X,F7.4))
      R(1) = 0.0
      DO  6  I = 2, N
    6 R(I) = SDEV*R(I)
    7 RETURN
      END
CANOVWT     SUBROUTINE	ANOVWT	 FOR  BMD07V	10-15-63
      SUBROUTINE  ANOVWT
      DIMENSION WEIGHT (4950),MANYR(100),Z(22275)
      COMMON Z,N,MAX,LAST
      EQUIVALENCE (WEIGHT(1),Z(1)),(MANYR(1),Z(19701))
      REAL*4 MANYR
   10 KOUNT = 0
      DO  1  I = 2, N
      X = MANYR(I-1)
      DO  1  J = I, N
      Y = MANYR(J)
      KOUNT = KOUNT + 1
    1 WEIGHT(KOUNT) = SQRT( (2.0*X*Y)/(X + Y) )
      MAX = KOUNT
   20 RETURN
      END
CPAIRDO     SUBROUTINE	PAIRDO	 FOR  BMD07V	10-15-63
      SUBROUTINE  PAIRDO
      DIMENSION Z(22275)
      DIMENSION R(100)
      DIMENSION  WEIGHT(4950), RWAIT(4950), IR(4950), SUBS(4950),
     .X(100),IWEIT(4950)
      EQUIVALENCE (WEIGHT(1),IWEIT(1),Z(1)),(RWAIT(1),Z(4951)),(IR(1),Z(
     .9901)),(SUBS(1),Z(14851)),(X(1),Z(19901))
      EQUIVALENCE (Z(20001),R(1))
      COMMON Z	     , N      , MAX    , LIST	, NTAPE
      INTEGER SUBS
   10 MAXX = MAX + 1
      KOUNT = 0
      DO  1  I = 2, N
      II = I - 1
      XX = X(II)
      DO  1  J = I, N
      KOUNT = KOUNT + 1
      WEIGHT(KOUNT) = (X(J) - XX)*WEIGHT(KOUNT)
      SUBS(KOUNT)=1000*II+J
    1 CONTINUE
   11 CALL  IRANK(WEIGHT, IR, MAX)
      CALL  RERANK(WEIGHT, RWAIT, IR, MAX)
      CALL  RERANK(SUBS, WEIGHT, IR, MAX)
   12 CONTINUE
      LAST = N
      DO  2  I = 1, MAX
      J = MAXX - I
      XX = RWAIT(J)
      LST = LAST + 2
      DO  3  L = 2, LAST
      K = LST - L
      IF  (XX - R(K))  3, 3, 4
    3 CONTINUE
      LAST = 1
      MAX = I
      I1=IWEIT(J)/1000
      I2=IWEIT(J)-I1*1000
      WRITE (NTAPE,20) I1,I2,LAST
   20 FORMAT (3I3)
      GO TO  5
    4 LAST = K
      I1=IWEIT(J)/1000
      I2=IWEIT(J)-I1*1000
    2 WRITE (NTAPE,20) I1,I2,LAST
    5 ENDFILE  NTAPE
      RETURN
      END
CSIGSET     SUBROUTINE	SIGSET	  FOR  BMD07V	 10-15-63
      SUBROUTINE  SIGSET
      LOGICAL*1 BITS(14,4950),SEVENS
      DIMENSION XYZ(22275),NSIZE(4950)
      EQUIVALENCE (XYZ(1),BITS(1,1))
      EQUIVALENCE (NSIZE(1),XYZ(17326))
      COMMON XYZ,N,MAX,LAST,ITAPE,I1,I2,MULT,NKEEP,NWATCH,ISPLIT
      DATA SEVENS/  ZFF/
   11 NKEEP = 0
      NWATCH = 1
      DO 15 I=1,14
   15 BITS (I,1)=SEVENS
      NSIZE(1) = N
      REWIND  ITAPE
      DO  1  I = 1, MAX
      READ (ITAPE,10)I1, I2, MULT
   10 FORMAT(3I3)
      IWATCH = NKEEP + 1
      CALL  REORD(IWATCH, NSPLIT)
      IF  (NSPLIT)  2, 2, 3
    3 CALL  SPLIT
    2 IF  (NWATCH)  1914, 1914, 4
    4 CONTINUE
    1 CONTINUE
 1914 REWIND ITAPE
      RETURN
      END
CREORD	  SUBROUTINE  REORD(IWATCH, NSPLIT)  FOR  BMD07V    10-15-63
      SUBROUTINE  REORD(IWATCH, NSPLIT)
      LOGICAL*1 BITS(14,4950),DUM
      INTEGER XOR
      LOGICAL*1 IJ(4),JI(4)
      DIMENSION NSIZE(4950),X(22275)
      EQUIVALENCE (BITS(1,1),X(1)),(NSIZE(1),X(17326))
      COMMON	      X 			, N	 , MAX
      COMMON  LAST   , IDUM   , I1     , I2	, MULT	 , NSAVE
      COMMON  NWATCH , ISPLIT
      EQUIVALENCE (LOG1,IJ(1)),(LOG2,JI(1))
      XOR(I,J)=LOR(I,J)
      MANY = 0
      NTOT = NWATCH
      I = IWATCH
      NSPLIT = 0
      ISPLIT = 0
      LWATCH = NSAVE + NWATCH
    1 MANY = MANY + 1
      IF  (MANY - NTOT)  2, 2, 1914
C     NOT ALL THE  WATCH  SUBSETS HAVE BEEN EXAMINED
    2 IF  (MULT - NSIZE(I))  607, 3, 3
C     THIS SUBSET CANNOT BE SAVED AUTOMATICALLY FOR BEING TOO BIG
    3 CALL  GETBT(I, I1, NCUE)
      IF  (NCUE)  606, 606, 4
C     THIS SUBSET MAY CONTAIN THE SPLITTING PAIR
    4 CALL  GETBT(I, I2, NCUE)
      IF  (NCUE)  606, 606, 5
C     THIS SUBSET NEEDS FURTHER WATCHING
  606 I = I + 1
      GO TO  1
C     THIS SUBSET IS LARGE ENOUGH TO BE SAVED
  607 CONTINUE
      NSAVE = NSAVE + 1
      DO 11  L=1,14
      DUM=BITS(L,NSAVE)
      BITS(L,NSAVE)=BITS(L,I)
   11 BITS(L,I)=DUM
      NDUM=NSIZE(NSAVE)
      NSIZE(NSAVE)=NSIZE(I)
      NSIZE(I)=NDUM
C     IWATCH = IWATCH + 1
   14 NWATCH = NWATCH - 1
      GO TO  606
C     THIS SUBSET MUST BE SPLIT
    5 ISPLIT = LAST - NSPLIT
      NSPLIT = NSPLIT + 1
      DO  6  LL = 1, 14
      BITS (LL,ISPLIT)=BITS(LL,I)
    6 BITS(LL,I)=BITS(LL,LWATCH)
      NSIZE(ISPLIT) = NSIZE(I)
      NSIZE(I) = NSIZE(LWATCH)
      LWATCH = LWATCH - 1
      NWATNWATCH - 1
      GO TO  1
 1914 RETURN
      END
      SUBROUTINE SPLIT
      INTEGER XOR
      LOGICAL*1 IJ(4),JI(4)
      LOGICAL*1 BITS(14,4950)
      DIMENSION NSIZE(4950),Z(22275),II(2)
      EQUIVALENCE (BITS(1,1),Z(1)),(NSIZE(1),Z(17326))
      EQUIVALENCE (IJ(1),III1),(JI(1),III2)
      COMMON  Z 				, M	 , MAX
      COMMON  LAST   , IDUM   , I1     , I2	, MULT	 , NKEEP
      COMMON  NWATCH , ISPLIT
      DATA III1/0/,III2/0/
      XOR(I,J)=LOR(I,J)
      II(1) = I1
      II(2) = I2
      ISTART = NKEEP + NWATCH
      NTOT = ISTART
      IF  (NTOT)  1, 1, 2
C     ALL SETS UNDER CONSIDERATION ARE TO BE SPLIT AND WATCHED
    1 DO  7  I = ISPLIT, LAST
      N = NSIZE(I) - 1
      IF  (N-1)  7, 7, 8
    8 DO  9  J = 1, 2
      JSTART = ISTART + 1
      DO  10  JJ = 1, 14
   10 BITS (JJ, JSTART) = BITS (JJ, I)
      CALL  SETBT(JSTART, II(J), 0)
      ISTART = ISTART + 1
    9 NSIZE(ISTART) = N
    7 CONTINUE
      NWATCH = ISTART
      RETURN
C     SPLIT SETS MUST BE EXAMINED FOR INCLUSION IN  KEPT, WATCHED  SETS
    2 DO  3  I = ISPLIT, LAST
      N = NSIZE(I) - 1
      IF  (N-1)  3, 3, 5
    5 DO  4  J = 1, 2
      JSTART = ISTART + 1
      DO  11  JJ = 1, 14
   11 BITS (JJ, JSTART) = BITS (JJ, I)
      CALL  SETBT(JSTART, II(J), 0)
      DO  6  K = 1, NTOT
      DO  16  JJ = 1, 14
      IJ(4)=BITS(JJ,JSTART)
      JI(4)=BITS(JJ,K)
      IF (III2.NE.XOR(III1,III2)) GO TO 6
   16 CONTINUE
      GO TO  4
    6 CONTINUE
      ISTART = ISTART + 1
      NSIZE(ISTART) = N
    4 CONTINUE
    3 CONTINUE
      NWATCH = ISTART - NKEEP
      RETURN
      END
CPUTOUT    SUBROUTINE  PUTOUT	 FOR  BMD07V	 10-14-63
      SUBROUTINE  PUTOUT
      REAL*8 TTLPSZ(100),DUMPSZ(100)
      COMMON / REAL8 / TTLPSZ,DUMPSZ
      DIMENSION INDEX(100),NSIZE(4950),X(23000)
      EQUIVALENCE (INDEX(1),X(22901)),(NSIZE(1),X(17326))
      EQUIVALENCE (M ,X(22276)),(MAX,X(22277)),(LAST,X(22278)),(IDUME,
     .X(22279)),(N1,X(22280)),(N2,X(22281))
      COMMON  X
      DATA COMMA,PAREN/2H ,,2H )  /
    1 DO  21  K = N1, N2
      N = NSIZE(K)
      CALL  FIND(K)
    2 DO  22  J = 1, N
      I = INDEX(J)
   22 TTLPSZ(J)=DUMPSZ(I)
   21 WRITE (6,210) TTLPSZ(1),(COMMA,TTLPSZ(J),J=2,N),PAREN
  210  FORMAT(/ 8H	( , 13(A6, A3) / 8X, 13(A6, A3) / 8X, 13(A6, A3)
     1		      / 8X, 13(A6, A3) / 8X, 13(A6, A3) / 8X, 13(A6, A3)
     2		      / 8X, 13(A6, A3) / 8X, 13(A6, A3) )
      RETURN
      END
CFIND	  SUBROUTINE  FIND(IND)    FOR	BMD07V	   10-14-63
      SUBROUTINE  FIND(IND)
      DIMENSION X(23000),INDEX(100),NSIZE(4950)
      DIMENSION LOC(14)
      LOGICAL*1 BITS(14,4950),WARP
      COMMON X
      EQUIVALENCE (BITS(1,1),X(1)),(INDEX(1),X(22901)),(NSIZE(1),X(17326
     .))
      JJ = 0
      I1 = 1
      DO 10 J=1,14
   10 LOC(J)=8*(J-1)
      N = NSIZE(IND)
      DO 1 I=1,14
      MANY = LOC(I)
      WARP = BITS (I, IND)
      DO  2  J = I1, N
      CALL  LOC1(WARP, NO)
      IF  (NO)	3, 3, 4
    4 MANY = MANY + NO
      JJ = J
    2 INDEX(J) = MANY
    3 IF  (JJ - N)  6, 5, 5
    6 I1 = JJ + 1
    1 CONTINUE
    5 CONTINUE
      RETURN
      END
CTRNGEN      TRANSGENERATION FOR BMD07V VERSION OF NOV. 12, 1963
      SUBROUTINE TRNGEN(X,N,NH,FM,LCODE,CONST)
      DIMENSION X(20000),LCODE(72),CONST(72)
      ASN(Q000FL)=ATAN(Q000FL/SQRT(1.0-Q000FL**2))
      DO 210 I=1,NH
      FM=CONST(I)
      JUMP=LCODE(I)
      DO 8 J=1,N
      D=X(J)
      GO TO(10,20,30,40,50,60,70,80,90,110),JUMP
   10 IF(D)99,11,12
   11 X(J   )=0.0
      GO TO 8
   12 X(J )=SQRT(D)
      GO TO 8
   20 IF(D)99,21,22
   21 X(J   )=1.0
      GO TO 8
   22 X(J )=SQRT(D)+SQRT(D+1.0)
      GO TO 8
   30 IF(D)99,99,31
   31 X(J )=ALOG10(D)
      GO TO 8
   40 X(J )=EXP(D)
      GO TO 8
   50 IF(D)99,51,52
   51 X(J   )=0.0
      GO TO 8
   52 IF(D-1.0)53,54,99
   54 X(J   )=3.14159265/2.0
      GO TO 8
   53 A=SQRT(D)
      X(J )=ASN(A)
      GO TO 8
   60 SAMP=N
      A=D/(SAMP+1.0)
      B=A+1.0/(SAMP+1.0)
      IF(A)99,61,62
   61 IF(B)99,63,64
   63 X(J   )=0.0
      GO TO 8
   64 X(J )=ASN(SQRT(B))
      GO TO 8
   62 IF(B)99,65,66
   65 X(J )=ASN(SQRT(A))
      GO TO 8
   66 X(J )=ASN(SQRT(A))+ASN(SQRT(B))
      GO TO 8
   70 IF(D)71,99,71
   71 X(J   )=1.0/D
      GO TO 8
   80 X(J   )=D+FM
      GO TO 8
   90 X(J   )=D*FM
      GO TO 8
  110 IF(D)111,112,111
  112 X(J   )=0.0
      GO TO 8
  111 X(J   )=D**FM
    8 CONTINUE
  210 CONTINUE
      GO TO 1000
   99 WRITE (6,105)I,X(J)
      N=0
      RETURN
  105 FORMAT(23H0TRANS-GENERATION ERROR//10H PASS NO.=I3,9H X VALUE=F10.
     15)
 1000 RETURN
      END
      REAL FUNCTION ANUMB*8 ( II )
C
C     THE FUNCTION 'ANUMB' CONVERTS THE INTEGER 'I' TO RIGHT JUSTIFIED
C     ALPHANUMERIC CHARACTERS WHICH ARE RETURNED AS THE HIGH ORDER FOUR
C     BYTES OF THE REAL*8 VARIABLE 'ANUMB'.
C
      REAL*8 QQQQ/8H	    /,ALPHA
C
C     THE ARRAY 'IFAKE' IS A MASK CONSISTING OF THE BINARY CHARACTERS
C     '11110000' MINUS THE BINARY CHARACTERS '01000000'.  THE FIRST OF
C     THESE IS THE MASK WHICH IS ADDED TO AND
C     THESE IS THE MASK WHICH IS ADDED TO AN INTERNAL DIGIT TO MAKE IT
C     ALPHANUMERIC, AND THE SECOND IS THE BINARY CODE FOR A BLANK, WHICH
C     MUST BE SUBTRACTED SINCE IALPH IS INITIALIZED AT BLANKS.
C
      DIMENSION IFAKE(4)
      DATA IFAKE /Z000000B0,Z0000B000,Z00B00000,ZB0000000/
      EQUIVALENCE (ALPHA,IALPH)
      ALPHA=QQQQ
      I=II
      N=0
   10 N=N+1
      K=MOD(I,10)
C     SHIFTS 'N-1' BYTES LEFT
      K=K*2**(8*(N-1))
      IALPH=IALPH  +K+IFAKE(N)
      I=I/10
      IF (I.NE.0) GO TO 10
      ANUMB=ALPHA
      RETURN
      END
      SUBROUTINE LOC1(WARP,NO)
C     LOC1
      LOGICAL*1 WARP,LOG(8)
      REAL*8 DUM,DSHIFT
      DIMENSION I(2)
      EQUIVALENCE (I(1),DUM,LOG(1))
      DATA I/0,0/
      NO=0
      LOG(4)=WARP
   10 IF (I(1).EQ.0) GO TO 100
      NO=NO+1
      I(2)=0
      DUM=DSHIFT(I,-1)
      IF (I(2).GE.0) GO TO 10
      WARP=LOG(4)
      RETURN
  100 NO=0
      WARP=LOG(4)
      RETURN
      END
      SUBROUTINE SETBT (INDEX,IBIT,INSERT)
C     SETBIT
      LOGICAL*1 BITS(14,4950),LOG(4)
      EQUIVALENCE (LOG(1),I)
      COMMON BITS
      DATA I,J/0,0/
      IWORD=(IBIT-1)/8
      ILOC=IBIT-8 *IWORD
      LOG(4)=BITS(IWORD+1,INDEX)
      J=LSHIFT(INSERT,ILOC-1)
      I=LAND(I,LCOMPL(LSHIFT(1,ILOC-1)))
      I=LOR(I,J)
      BITS(IWORD+1,INDEX)=LOG(4)
      RETURN
      END
      SUBROUTINE GETBT	(INDEX,IBIT,IOUT)
C     GETBIT
      LOGICAL*1 BITS (14,4950),X,LOG(4)
      EQUIVALENCE (LOG(1),I)
      COMMON BITS
      IWORD=(IBIT-1)/8
      ILOC=IBIT-8 *IWORD
      LOG(4)=BITS(IWORD+1,INDEX)
      I=LSHIFT(I,1-ILOC)
      IOUT=LAND(1,I)
      RETURN
      END
      SUBROUTINE RNGAPR(ALF,NF,NP,R,SDEV)
      DIMENSION A(3,2),B(3,4,2),C(10,2,3),R(1)
      DATA A/90.03,17.97,8.929,14.04,6.085,4.130/
      DATA B/33.2630,0.,0.,8.8962,6.3404,2.8317,7.1927,3.0359,2.0480,
     13.6405,2.7784,2.3283,25.4660,0.,0.,9.5681,4.6911,1.7947,7.5559,
     23.2080,1.9996,3.7941,2.9217,2.4630/
      DATA C/8.134,-27.626,26.777,27.158,-7.8283,23.068,-7.246,.5406,
     13.4831,4.5660,50.37,-350.15,118.36,18.74,-23.023,169.221,-31.179,
     2.341,-12.756,4.9138,7.353,-27.779,.212,12.759,-7.6639,31.157,
     3-2.123,.9313,-4.8389,3.5409,95.07,-855.99,21.74,-1.39,-46.554,
     4396.24,-2.32,5.099,-45.660,3.5883,11.169,-50.648,6.995,1.105,
     5-11.2972,49.617,-2.714,2.1921,-10.3545,2.8913,60.41,-286.63,
     6-2643.38,876.07,-31.449,245.50,516.79,3.534,-41.493,3.0549/
      I=(ALF+.001)/0.05+1.
      WRITE(6,60)ALF
      R(1)=0.
      IF(NF.GT.2 )GO TO 20
      DO 10 J=2,NP
   10 R(J)=A(I,NF)
      GO TO 70
   20 Y=1./FLOAT(NF)
      DO 50 L=2,NP
      IF(NF.GT.3.AND. L.GT.3)GO TO 40
      K=2
      IF( L.EQ.2)K=1
      R(L)=B(I,1,K)
      DO 30 J=2,4
   30 R(L)=R(L)*Y+B(I,J,K)
      GO TO 50
   40 IF(I.EQ.3)RR=AMIN0( L,NF)
      IF(I.EQ.2)RR=AMIN0( L,NF+2)
      IF(I.EQ.1)RR=AMIN0( L,2*NF)
      Z=1./SQRT(RR)
      J=2
      IF(RR.LE.(3.*(I-1.)+14.)) J=1
      R(L)=C(10,J,I)+C(9,J,I)*Y+C(8,J,I)*Z+C(7,J,I)*Y*Y+C(6,J,I)*Y*Z
     1+C(5,J,I)*Z*Z+C(4,J,I)*Y*Y*Y+C(3,J,I)*Y*Y*Z+C(2,J,I)*Y*Z*Z
     2+C( 1,J,I)*Z*Z*Z
   50 CONTINUE
   60 FORMAT(//' COMPUTED RANGES FOR ALPHA=',F4.2,' (DUNCAN''S NEW MULTI
     *PLE RANGE TEST)',//' NO. OF GROUPS'/3X,'IN SUBSET',6X,'RANGE'/)
   70 WRITE(6,80)(I,R(I),I=2,NP)
   80 FORMAT(5X,I3,9X,F7.4 )
      DO 90 I=2,NP
   90 R(I)=R(I)*SDEV
      RETURN
      END
      FUNCTION TCDF(STT,N)
      IF(STT.NE.0.0)GO TO 1
      TCDF=0.5
      RETURN
    1 T=ABS(STT)
      B=N
      THETA=ATAN(T/SQRT(B))
      C=SIN(THETA)
      COSN=COS(THETA)
      COSQ=COSN*COSN
      TCDF=0.0
      IF(N.EQ.1)GO TO 20
      A=FLOAT(N)/2.0
      NUM=N-N/2*2+1
   10 TCDF=TCDF+C
      A=A-1.0
      D=NUM+1.0
      C=C*NUM*COSQ/D
      NUM=NUM+2
      IF(A-0.5)30,20,10
   20 TCDF=(THETA+TCDF*COSN)/1.570796
   30 TCDF=0.5+SIGN(0.5*TCDF,STT)
      RETURN
      END
      SUBROUTINE CNTRST(N,NP,T,C,P,A,B,M,BS,SM,H,CL,E,NDF)
      REAL*8 T
      REAL*4 M
      DIMENSION T(50),C(N,NP),B(50),M(50),BS(50),SM(50),H(50),CL(50)
      DIMENSION P(50,50),L(51),NN(51)
      DATA COEF/'COEF'/
      A=N
      WRITE(6,5)
    5 FORMAT(//'    CONTRAST	   COEFICIENTS'//)
      DO 80 I=1,N
    1 READ(5,10)CATG,T(I),(C(I,J),J=1,NP)
   10 FORMAT(A4,A8,3X,13F5.0/(15X,13F5.0/))
      WRITE(6,20)     T(I),(C(I,J),J=1,NP)
   20 FORMAT(	A8,3X,13F6.1/(16X,13F6.1/))
      IF(CATG-COEF)22,26,22
   22 WRITE(6,24)
   24 FORMAT(//'NOTE THAT COEF CARD IS EXPECTED,ABOVE CARD IS IGNORED'/)
      GO TO 1
   26 CSUM=0.0
      B(I)=0.0
      M(I)=0.0
      CNRM=0.0
      DO 30 J=1,NP
   30 CNRM=CNRM+C(I,J)*C(I,J)
      CNRM=SQRT(CNRM)
      DO 40 J=1,NP
      C(I,J)=C(I,J)/CNRM
      CSUM=CSUM+C(I,J)
      B(I)=B(I)+C(I,J)*BS(J)
   40 M(I)=M(I)+C(I,J)*C(I,J)*E/SM(J)
      IF(CSUM*CSUM-0.000001)70,70,50
   50 WRITE(6,60)
   60 FORMAT(//' NOTE THAT ABOVE SET OF CONTRAST COEF. DOES''NT ADD UP T
     *O GIVE ZERO')
   70 H(I)=B(I)/SQRT(M(I))
   80 CL(I)=TCDF(H(I),NDF)
      WRITE(6,90)
   90 FORMAT(///' CONTRAST',10X,'NRMLIZED CNTRST COEF',28X,'VALUE OF
     *ITS VARIANCE   ITS T-TEST  ITS CULM.PRB.'/' LABEL',61X,'CONTRAST')
      DO 110 I=1,N
      PRINT 100,T(I),B(I),M(I),H(I),CL(I),(C(I,J),J=1,NP)
  100 FORMAT(A9,51X,4F14.4,(T10,8F6.3/))
  110 M(I)=E/M(I)
      WRITE(6,115)
  115 FORMAT(///25X,'TABLE OF'/'  LABEL   SUM OF CROSS PROD. OF NORMALZD
     * CNTRST COEF.')
      DO 140 I=1,N
      DO 120 J=1,I
      P(J,I)=0.0
      DO 120 K=1,NP
  120 P(J,I)=P(J,I)+C(I,K)*C(J,K)
      PRINT 130,T(I),(P(J,I),J=1,I)
  130 FORMAT(A9,12F10.4/(9X,12F10.4/))
  140 CONTINUE
      IF(N-1)290,290,150
  150 DO 160 I=1,N
  160 NN(I)=1
      L(51)=1
  170 L(1)=0
      DO 220 I=2,N
      L(I)=0
      IF(NN(I)-1)220,180,220
  180 I1=I-1
      DO 210 J=1,I1
      IF(NN(J)-1)210,190,210
  190 IF(P(J,I)*P(J,I)-0.00000001)210,210,200
  200 L(I)=L(I)+1
      L(J)=L(J)+1
  210 CONTINUE
  220 CONTINUE
      MAX=51
      DO 240 I=1,N
      IF(L(I)-L(MAX))240,230,230
  230 MAX=I
  240 CONTINUE
      NN(MAX)=0
      IF(MAX-51)170,250,170
  250 J=0
      DO 270 I=1,N
      IF(NN(I)-1)270,260,270
  260 J=J+1
      T(J)=T(I)
      M(J)=M(I)
      B(J)=B(I)
  270 CONTINUE
      N=J
      IF(N-1)290,290,280
  280 A=0.
      PRINT 285,(T(I),I=1,N)
  285 FORMAT(//' THE MAXIMUM ORTHORGONAL GROUP'/(13A10/))
  290 RETURN
      END
2vA=