!22 MAR 73      NIPR4.SIM     *MH

DEF CLUMP.SZ AS 5


GLOBAL.PROC(B.BCKSUM,H.BCKSM)
GLOBAL.PROC(B.BDATA,H.B.BDATA)
GLOBAL.PROC(SEND.IT,H.SEND.IT)
GLOBAL.PROC(SEND.DUM,H.SEND.DUM)
GLOBAL.PROC(GET.TCB,H.GET.TCB)
GLOBAL.PROC(SEND.DATA,H.SEND.DATA)
GLOBAL.PROC(SEND.SUMS,H.SEND.SUMS)
GLOBAL.PROC(R.BLK,H.R.BLK)
GLOBAL.PROC(SUM.BLK,H.SUM.BLK)

FIND %B.ACKP
FIND %AR.N
FIND %S.SP.AR
FIND %R.ELMT
FIND %D.AREA
FIND %DUP.BUF
FIND %CLOSE.IT
FIND %FM.PTR
FIND %FM.FR.INT
FIND %OUT.X.BUF
FIND %FM.ELMT
FIND %OUT.B.S
FIND %OUT.BUF
FIND %OUT.MAP
FIND %GET.BUF.CHAR
FIND %SET.BUF.CHAR
FIND %G.BUFFERLET
FIND %BUF.LENGTH
FIND %HD.TST.BIT
FIND %HD.FULL.P
FIND %STR.BLD
FIND %BLD.ARG
FIND %BLD.CMD
FIND %PUNT
FIND %OUT.RKD
FIND %F.SP.AR
FIND %HD.FULL
FIND %R.P.L.DATA
FIND %L.P.L.DATA

FIND LOCAL.NAME
FIND TCB.LIST
FIND STORE(0)

!
PROC(B.BCKSUM,H.B.BCKSUM,'B.BCKSUM',(BUF,TRANS.NO,TYP,FIRST,N, &
        CK1,CK2,CK3,CK4,CK5))    !BUILD BCKSUM CMD
!INPUT: BUF PTR (OR E.O.L) ON WHICH TO APPEND THIS COMMAND STRING
!       TRANSACTION NUMBER
!       CHECKSUM TYPE: BLOCK=1, FILE=2
!       BLOCK # OF FIRST CKSUM
!       NUMBER OF CKSUMS TO SEND ********NO MORE THAN 5 CURRENTLY*****
!VALUE: THE BUF PTR TO THE CMD STRING

LOCAL CB, I

!NOTE THAT B.BCKSUM CURRENTLY ONLY ALLOWS CLUMP.SZ<=5 SUMS PER COMMAND
!THIS IS AN EASILY EXTENDED RESTRICTION

CB _ BLD.ARG(E.O.L, PRS.T.INT, TRANS.NO)
BLD.ARG(CB, PRS.T.INT, TYP)

IF  N > CLUMP.SZ &
 THEN &
 DO
  PUNT(MED, 'BCKSUM WITH MORE THAN 5 SUMS:', 1, 1, I)
  N _ 5
 END

BLD.ARG(CB, PRS.T.INT, FIRST)
BLD.ARG(CB, PRS.T.INT, N)

I _ 0
WHILE (INC I) <= N &
 THEN &
 DO
  DO  I OF 1:CLUMP.SZ
   1: BLD.ARG(CB, PRS.T.INT, CK1)
   2: BLD.ARG(CB, PRS.T.INT, CK2)
   3: BLD.ARG(CB, PRS.T.INT, CK3)
   4: BLD.ARG(CB, PRS.T.INT, CK4)
   5: BLD.ARG(CB, PRS.T.INT, CK5)
  END
 END

BUF _ BLD.CMD(BUF, CB, BCKSUM.CMND)

RETURN (BUF)

END.PROC(B.BCKSUM,H.B.BCKSUM)
!
PROC(B.BDATA,H.B.BDATA,'B.BDATA',(BUF, TRANS.NO, BLK, N, DATA))
!                                       BUILD BDATA COMMAND STRING
!INPUT: BUF PTR (OR E.O.L) ONTO WHICH THIS CMD IS APPENDED
!       TRANSACTION NUMBER
!       DATA BLOCK # WITHIN TRANSACTION
!       NUMBER OF CHARS OF DATA IN NEXT ARGUMENT
!       BUFFER PTR TO DATA
!VALUE: BUF PTR TO COMMAND STRING

LOCAL CB

CB _ BLD.ARG(E.O.L, PRS.T.INT, TRANS.NO)
BLD.ARG(CB, PRS.T.INT, BLK)
BLD.ARG(CB, PRS.T.INT, N)
BLD.ARG(CB, PRS.T.LIT, DATA)

BUF _ BLD.CMD(BUF, CB, BDATA.CMND)

RETURN (BUF)

END.PROC(B.BDATA,H.B.BDATA)
!
PROC(SEND.IT,H.SEND.IT,'SEND.IT',(TRANS.NO))  !SEND CHECKSUMS OR DATA
!                                       TO RECIPIENT
!INPUT:  TRANS.NO--ENABLES FINDING TCB
!VALUE:  NONE
DEF CLUMP.SZ AS 5


LOCAL TCB, N, W.N, TOT, STEP, BUF, HD, BYTS, BS

!DUTIES:
!
! 1. IF MORE CHECKSUMS TO SEND, THEN SEND A CLUMP, ELSE GO DO 3.
! 2. IF MORE CHECKSUMS TO SEND, THEN SEND DUMMY ACK.P TO SELF, RETURN.
! 3. IF MORE DATA TO SEND, THEN GO TO 4, ELSE ERROR, RETURN.
! 4. SEND DATA BLOCK, SEND DUMMY ACK.P TO SELF, RETURN.

TCB _ GET.TCB(TRANS.NO)

MSG('SEND.IT$')

TOT _ (BYTS _ R.TCB.BYTS(TCB))/(BS _ R.TCB.BS(TCB))
IF (TOT MOD BS) # 0 THEN TOT _ TOT+1
IF TOT = 0 THEN TOT _ 1                 !SPECIAL CASE FOR LESS THAN BLK
N _ (TOT)-(W.N _ R.TCB.WBLK(TCB))+1
IF N >= CLUMP.SZ THEN N _ CLUMP.SZ      !SEND A CLUMP AT A TIME

IF (STEP _ R.TCB.STEP(TCB)) = 1  &
 THEN &
 DO
  SEND.SUMS(TRANS.NO, N)                !SEND CLUMP (OR SO) OF CKSUMS
  IF (W.N + N) >= TOT &
   THEN &
   DO
    MSG('SENDIT COMPLETED SENDING CKSUMS$')
    L.TCB.STEP(TCB, 2)          !CKSUMS COMPLETE; NOW SEND DATA
    L.TCB.WBLK(TCB, 1)          !RESET FOR SENDING DATA
    L.TCB.CP(TCB,R.TCB.ICP(TCB))!RESET CURSOR TO INITIAL CURSOR POS
    SEND.DUM(TRANS.NO)          !SEND DUMMY ACKP TO REACTIVATE THIS JOB
    RETURN
   END
  L.TCB.WBLK(TCB, W.N+N)        !UPDATE WBLK BY N
  SEND.DUM(TRANS.NO)            !SEND DUMMY ACKP TO REACTIVATE THIS JOB
  RETURN
 END

IF STEP = 2 &
 THEN &
 DO

  !  THE DONOR KEEPS SENDING DATA UNTIL THE RECIPIENT INDICATES
  !SATISFACTION (RECEIPT OF THE LAST BLOCK) BY AN MACK(100) COMMAND.
  !THE RECIPIENT SENDS AN ACKP COMMAND FOR EACH BLOCK REC'D (EXCEPT
  !THE LAST BLOCK) WHICH IS MARKED IN THE DONOR HDCNT TABLE THAT WE
  !CHECK HERE.  THE WORKING BLOCK TCB ENTRY (R.TCB.WBLK(TCB)) IS
  !INCREMENTED MODULO TOTAL BLOCKS TO SEND.  WE SEND  ONLY THOSE 
  !BLOCKS WHICH HAVE NOT BEEN ACKNOWLEDGED BY THE RECIPIENT
  !(I.E., NOT MARKED IN THE HDCNT TABLE).

  IF HD.FULL.P(HD _ R.TCB.HD(TCB)) &
   THEN &
    PUNT(HARD, 'DONOR HDCNT FULL', 0)
  IF NOT(HD.TST.BIT(HD, W.N)) &
   THEN SEND.DATA(TRANS.NO) &
   ELSE L.TCB.CP(TCB,R.TCB.CP(TCB)+R.TCB.BS(TCB)) !UPDATE CURSOR
  IF TOT <= W.N &
   THEN &
   DO
    L.TCB.WBLK(TCB, 1)                  !RESET TO INITIAL BLOCK
    L.TCB.CP(TCB, R.TCB.ICP(TCB))       !RESET TO INITIAL CURSOR
   END &
  ELSE &
   L.TCB.WBLK(TCB, W.N+1)               !UPDATE WBLK BY 1
  SEND.DUM(TRANS.NO)
  RETURN
 END

PUNT(MED, 'TCB.STEP INVALID:', 1, 1, STEP)

END.PROC(SEND.IT,H.SEND.IT)
!
PROC(SEND.DUM,H.SEND.DUM,'SEND.DUM',(TRANS.NO))!SEND DUMMY ACK.P TO SELF
!INPUT: TRANSACTION NUMBER
!VALUE: NONE

LOCAL BUF

MSG('SEND.DUM$')

BUF _ B.ACKP(E.O.L, TRANS.NO, 0, 0)     !BUILD DUMMY ACKP
OUT.RKD(BUF, LOCAL.NAME, LOCAL.NAME, TRUE, TRUE)        !SEND TO SELF

RETURN

END.PROC(SEND.DUM,H.SEND.DUM)
!
PROC(GET.TCB,H.GET.TCB,'GET.TCB',(TRANS.NO))  !GET TRANS CONTROL BLK PTR
!                                               FROM ARRAY
!INPUT: TRANSACTION NUMBER USED AS ARRAY COORDINATE
!VALUE: TCB PTR

LOCAL TCB

TCB _ F.SP.AR(1, TCB.LIST, TRANS.NO)    !GET TCB PTR FROM SPARSE ARRAY

RETURN (TCB)

END.PROC(GET.TCB,H.GET.TCB)
!
PROC(SEND.DATA,H.SEND.DATA,'SEND.DATA',(TRANS.NO))!SEND A BLOCK OF DATA
!INPUT: TRANSACTION NUMBER
!VALUE: NONE

LOCAL TCB, BUF, N

TCB _ GET.TCB(TRANS.NO)

MSG('SEND.DATA$')

[BUF;N] _ DOUBLE R.BLK(E.O.L, TCB)      !READ BLOCK OF DATA INTO BUF

BUF _ B.BDATA(E.O.L, TRANS.NO+1, R.TCB.WBLK(TCB), N, BUF)
OUT.RKD(BUF, R.TCB.JOB(TCB), LOCAL.NAME, TRUE, TRUE)

RETURN

END.PROC(SEND.DATA,H.SEND.DATA)
!
PROC(SEND.SUMS,H.SEND.SUMS,'SEND.SUMS',(TRANS.NO, N))  !SEND N
!                                                       BLOCK CHECKSUMS
!INPUT: TRANSACTION NUMBER
!       NUMBER OF BLOCK CKSUMS TO SEND
!VALUE: NONE

LOCAL TCB, FCB, BUF, SUM(1:CLUMP.SZ)
LOCAL FIRST, I

MSG('SEND.SUMS$')

TCB _ GET.TCB(TRANS.NO)
FIRST _ R.TCB.WBLK(TCB)

!BUILD N CKSUMS
I _ 0
WHILE (INC I) <= N  THEN  SUM(I) _ SUM.BLK(0,TCB)

BUF _ B.BCKSUM(E.O.L,TRANS.NO+1,1,FIRST,N,SUM(1),SUM(2),SUM(3),SUM(4), &
                                                SUM(5))
!***************NEXT STATEMENT IS COMMENTED OUT FOR DEBUG**********
!IF FALSE THEN DO OUTBCK:NULL 
OUT.RKD(BUF, R.TCB.JOB(TCB), LOCAL.NAME, TRUE, TRUE)  !SEND BCKSUM CMD
!END    ****************************

RETURN

END.PROC(SEND.SUMS,H.SEND.SUMS)
!
PROC(R.BLK,H.R.BLK,'R.BLK',(BUF,TCB))!READ A BLOCK OF 8-BIT BYTES
!INPUT: BUF PTR (OOR E.O.L) FOR DATA REPOSITORY
!       TRANSACTION CONTROL BLOCK
!VALUE: [BUF PTR; NUMBER OF BYTES READ]

LOCAL BS, FN, LEN, EOF:, SUM.P, CHAR, FCB, I, BYTS.LEFT

MSG('R.BLK$')
SUM.P _ FALSE
IF BUF = E.O.L &
 THEN &
 DO
  BUF _ G.BUFFERLET
  LEN _ 0
 END &
ELSE &
 LEN _ BUF.LENGTH(BUF) -1       !DEC 1 FOR WHILE LOOP BELOW


GO COMMON


%%SUM.BLK(SUM,TCB)              !COMPUTE BLOCK CKSUM
!------------------
!INPUT: 0 OR CKSUM TO CONTINUE
!       TRANSACTION CONTROL BLOCK
!VALUE: THE CHECKSUM (BARBERPOLE)

MSG('SUM.BLK$')
SUM.P _ TRUE

COMMON: NULL

FCB _ R.TCB.FCB(TCB)            !GET FCB PTR OUT OF TCB
FN _ R.FCB.FN(FCB)              !FILE NUMBER FOR READ
BS _ R.TCB.BS(TCB)              !BLOCK SIZE
BYTS.LEFT _  R.TCB.BYTS(TCB) - (R.TCB.WBLK(TCB)-1)*BS
IF BYTS.LEFT < BS  THEN  BS _ BYTS.LEFT
MSG('BYTS.LEFT IS ');OUT.PTR(TEL, BYTS.LEFT)!********DEBUG****
SETCP(FN, R.TCB.CP(TCB))        !SET CURSOR TO READ NEXT BLOCK
SETRWE(FN, EOF)                     !ERROR LABEL FOR END OF FILE

!NOW READY TO READ A BLOCK (POSSIBLY PARTIAL BLK) FROM FILE AND 
!EITHER PLACE THE BLOCK IN BUFFERLET OR COMPUTE CHECKSUM.

I _ 0
WHILE (INC I) <= BS &
 THEN &
 DO
  CHAR _ R(FN)                  !READ 8-BITS
  MSG('CHAR: ');W(TEL,CHAR)     !********DEBUG******
  IF SUM.P &
   THEN &
    SUM _ (((SUM SHL 1) BOR (SUM SHR 23)) BAND OCT 77777777) BXOR CHAR &
   ELSE &
    SET.BUF.CHAR(BUF, LEN+I, CHAR)
 END

EOF: NULL

L.TCB.CP(TCB, CP(FN))           !RECORD CURSOR FOR NEXT TIME
IF SUM.P &
 THEN &
  RETURN (SUM)

DEC I                           !BECAUSE OF (INC I) FOR LAST WHILE TEST

MSG('R.BLK READ BUFFER IS: $')
OUT.B.S(TEL, BUF, %OUT.X.BUF)
MSG('NUM CHARS READ IS ');OUT.FR.INT(TEL, I)

RETURN [BUF; I]                 !DATA AND NUMBER OF BYTES OF DATA

END.PROC(R.BLK,H.R.BLK)
    