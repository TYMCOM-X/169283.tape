BLISS  V. 1.0-2.12	5-JUN-73  20:33:10	P2S1	P2S1HD.BLI		PAGE 1-1

BC	 !COPYRIGHT 1972,1973, DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS
BMODULEP2S1SREGVREGFREGBREGDREGSRESERVC	 MODULE	P2S1(SREG=#17,VREG=#15,FREG=#16,BREG=#14,DREGS=4,RESERVE(0,1,2,3)) =
BBEGINC	 BEGIN
BBINDDBFREG1C	 	BIND FREG1=#16;		!BLISS WILL PRESENTLY NOT ACCEPT "FREG^18" TO
BC	 				! CREATE A POINTER TO A STACK REFERENCE -
BC	 				! HENCE DEFINE 'FREG1' EQUAL TO FREG
BEXTERNC	 	EXTERNAL
BCANONICGERRMAKEPRC1HC1LC2HC2LCOPRIXC	 		CANONICALIZE,CGERR,MAKEPR,C1H,C1L,C2H,C2L,COPRIX,
BKBOOLBKTYPCBKARIIBKARIABCNSTCMDNEGCNTBLSEAC	 		KBOOLBASE,KTYPCB,KARIIB,KARIAB,CNSTCM,DNEGCNST,TBLSEARCH,
BSKERRC	 		SKERR;
BFORWARC	 	FORWARD
BP2SKBLBLSKOPP2SKIGP2SKRERELSKOP2SKFNP2SKARARSKOPC	 		P2SKBL(1),BLSKOPT(1), P2SKIGNORE(1),P2SKREL(1),RELSKOPT(1), P2SKFN(1), P2SKARITH(1),ARSKOPT(1),
BP2SKLTP2SKLAP2SKNEC	 		P2SKLTP(1), P2SKLARR(1),P2SKNEGNOT(1);
BC	 
BEXTERNC	 	EXTERNAL
BNEGOFNNOTOFNBLCMBC	 		NEGOFNOT,NOTOFNEG, BLCMB, 
BARCMBCMBEQLC	 		ARCMB,CMBEQLARGS;
BC	 
BC	 
BEXTERNNEGFLGNOTFLGC	 EXTERNAL NEGFLG,NOTFLG;
BEXTERNSETPVAC	 EXTERNAL SETPVAL;
BEXTERNKDNEGBC	 EXTERNAL KDNEGB;
BEXTERNTAKNEGC	 EXTERNAL TAKNEGARG;
BEXTERNSAVSPAC	 EXTERNAL SAVSPACE;
BEXTERNKSPECBC	 EXTERNAL KSPECB;
BC	 !**COPYRIGHT 1972,1973, DIGITAL EQUIPMENT CORPORATION, MAYNARD, MA**
BC	 !EDITED SEPT 14,1972 - FI
BC	 !EDITED AUG 29,1972 - SRM
BC	 !EDITED AUG 27,1972 - SRM
BC	 !EDITED AUG 18,1972 - SRM
BC	 !EDITED 8/11/72 SRM
BC	 !LAST CHANGED 8/7/72 SRM.
BC	 !FIRST VERSION #40
BGLOBALBINDFIRSVC	 GLOBAL BIND FIRSV = #74;	!11-APRIL-73
BC	 
BC	 !FIRST MUST BE COMPILED IN THE ORDER ...,FIRST,TABLES,...
BC	 !TO SAVE SPACE AND INCREASE COMPILATION SPEED, ALL MACRO DEFINITIONS
BC	 !OF THE FORM "NAME = NUMBER$" HAVE BEEN CHANGED TO BIND'S.
BC	 
BBINDTBLMAXC	 BIND	TBLMAX=3,
BTBLSIZC	 	TBLSIZ=10;
BSTRUCTC	 STRUCTURE
BMATRIXMATRIXIIJIJMATRIXITBLSIZJC	 	MATRIX[I,J]=[I*J](.MATRIX+(.I-1)*TBLSIZ+.J);
BEXTERNMATRIXCHNLTBCHNLTBTBLMAXTBLSIZC	 EXTERNAL MATRIX CHNLTBL[TBLMAX,TBLSIZ];
BBINDBINC	 BIND	BIN=1,
BLSTC	 	LST=2,
BSRCC	 	SRC=3;
BMACROSTATUSIC	 MACRO	STATUS(I)=CHNLTBL[I,0]$,
BDEVICEIC	 	DEVICE(I)=CHNLTBL[I,1]$,
BBUFFERIC	 	BUFFERS(I)=CHNLTBL[I,2]$,
BBUFHDRIC	 	BUFHDR(I)=CHNLTBL[I,3]$,
BBUFPNTIC	 	BUFPNT(I)=CHNLTBL[I,4]$,
BBUFCNTIC	 	BUFCNT(I)=CHNLTBL[I,5]$,
BFILENAIC	 	FILENAME(I)=CHNLTBL[I,6]$,
BEXTENSIC	 		EXTENSION(I)=CHNLTBL[I,7]<18,18>$,
BDSKERRIC	 		DSKERR(I)=CHNLTBL[I,7]<0,18>$,
BPROTIC	 		PROT(I)=CHNLTBL[I,8]<27,9>$,
BLISS  V. 1.0-2.12	5-JUN-73  20:33:13	P2S1	FIRST.BLI		PAGE 1-2

BDIRECTIC	 	DIRECTORY(I)=CHNLTBL[I,9]$;
BMACROFOUNDFFIRSTSC	 MACRO	FOUNDFLG=	35,1$,	FIRSTSTA=	17,1$,
BTTYDEVENDFILC	 	TTYDEV=	34,1$,	ENDFILE=	16,1$,
BNOWARNWILDLSC	 	NOWARNING=	33,1$,	WILDLSTFIL=	15,1$,
BBIT3INIOLIC	 	BIT3=	32,1$,	INIOLIST=	14,1$,
BBIT4OBJECTC	 	BIT4=	31,1$,	OBJECT=	13,1$,
BBIT5WILDOBC	 	BIT5=	30,1$,	WILDOBJFIL=	12,1$,
BBIT6KA10C	 	BIT6=	29,1$,	KA10=	11,1$,
BBIT7LISTINC	 	BIT7=	28,1$,	LISTING= 10,1$,
BBIT8TAPENDC	 	BIT8=	27,1$,	TAPEND=	9,1$,
BFATALEWINDC	 	FATALERR=	26,1$,	WIND=	8,1$,
BPEEPFLZEROC	 	PEEPFL=	25,1$,	ZERO=	7,1$,
BBTTMSTCROSSRC	 	BTTMSTFL=	24,1$,	CROSSREF=	6,1$,
BCKA10DEBUGC	 	CKA10=	23,1$,	DEBUG=	5,1$,
BSYNONLEXPANDC	 	SYNONLY=	22,1$,	EXPAND=	4,1$,
BERRSWINCLUDC	 	ERRSW=	21,1$,	INCLUDE=	3,1$,
BEOPMACROCC	 	EOP=	20,1$,	MACROCODE=	2,1$,
BSTATFLNOERROC	 	STATFLG=	19,1$,	NOERRORS=	1,1$,
BFELFLGOPTIMIC	 	FELFLG=	18,1$,	OPTIMIZE=	0,1$;
BREGISTCR2R1C	 	REGISTER C = 3, R2 = 2, R1 = 1;
BBINDCHRCFLGREGC	 	BIND CHR = C,FLGREG=0;	!NEEDED FOR BETTER CODE
BC	 !
BC	 
BC	 	%(***DEFINE THE FLAGS USED BY PHASE 2 SKEL AND PHASE 3***)%
BMACROBTTMSTC	 MACRO	BTTMSTFNFLG=FLGREG<BTTMSTFL>$,		!SET FOR BOTTOMOST ROUTINES
BCKA10FC	 	CKA10FLG=FLGREG<CKA10>$,		!SET FOR COMPILING ON KA10
BKA10FLC	 	KA10FLG=FLGREG<KA10>$,			!SET FOR COMPILING FOR KA10
BPEEPFLC	 	PEEPFLG=FLGREG<PEEPFL>$;		!SET FOR PEEPHOLE OPTIMIZER
BC	 						! SHOULD BE USED
BC	 		
BBINDDEGUGC	 	BIND DEGUG = 0;	!FOR DEBUG OPTIONS
BC	 !
BMACROXTRACC	 	MACRO XTRAC = IF DEGUG THEN IF .DTRACE NEQ 0 THEN XCALL()$;
BBINDOPTIMIC	 	BIND OPTIMIZER = 0;
BMACHOPJRSTJRSTLSHCADDC	 	MACHOP JRST = #254,LSHC = #246,ADD=#270;
BMACHOPTTCALLCALLIC	 	MACHOP TTCALL = #051, CALLI = #047;
BMACHOPASHCADDBTLZEAOSMOVEIMOVEIC	 	MACHOP ASHC = #244, ADDB = #273, TLZE = #623, AOS = #350,MOVEI = #201;
BC	 !
BMACROSIGCHAC	 	MACRO SIGCHAR = (DO CHAR() WHILE .C  LEQ " "; .C)$;
BMACROOUTCHRXC	 	MACRO OUTCHR(X) = TTCALL(1,X)$,
BINCHWLXC	 		INCHWL(X) = TTCALL(4,X)$,
BOUTSTRXC	 		OUTSTR(X) = TTCALL(3,X)$;
BC	 !THE MACROS BELOW IMPLEMENT THE FOLLOWING ALGORITHM WITH 2 INSTRUCTIONS
BC	 !
BC	 !	((VREG_(.C - START OF RANGE) MOD 1^18) MOD 1^36) LEQ (END OF RANGE - START OF RANGE)
BC	 !
BMACROC	 MACRO
BALPHAXC	 	ALPHA(X) = MOVEI(VREG,-"A",X) LEQ ("Z"-"A")$,
BDIGITXC	 	DIGIT(X) = MOVEI(VREG,-"0",X) LEQ 9$,
BLCALPHXC	 	LCALPHA(X) = MOVEI(VREG,-("A"+" "),X) LEQ ("Z"-"A")$;
BC	 !
BC	 !	THE MODULE GLOBL CONTAINS ALL THE ARRAY DECLARATIONS AND TABLE (PLIT)
BC	 !	DEFINITIONS THAT WILL BE USED BY SUBSEQUENT ROUTINES THAT ARE
BC	 !	IN SEPARATE FILES. THE PURPOSE OF THAT FILE IS TO PROVIDE ONE 
BC	 !	PLACE WHERE ALL DECLARATIONS THAT ARE GLOBAL TO THE SCOPE OF
BC	 !	THE ENTIRE COMPILER CAN BE FOUND EASILY.
BC	 !
BLISS  V. 1.0-2.12	5-JUN-73  20:33:18	P2S1	FIRST.BLI		PAGE 1-3

BC	 !
BC	 !	THE FOLLOWING MACROS AND DECLARATIONS PERTAIN TO THE TABLE MANAGEMENT
BC	 !	ROUTINE TBLSEARCH() AND ALSO THE CORE MANAGEMENT ROUTINE CORMAN().
BC	 !
BC	 !	THE FOLLOWING MACROS ARE USED TO DEFINE THE PARAMETERS FOR THE
BC	 !	STRUCTURE DECLARATIONS USED TO DEFINE THE ACCESSING ALGOITHMS
BC	 !	FOR THE DYNAMIC TABLES USED BY THE FORTRAN COMPILER.
BC	 !	THESE MACROS DEFINE FIELDS AND SUB-FIELDS IN TABLE ENTRIES.
BC	 !	FIELDS MAY BE A FULL WORD OR HALF WORD OR LESS.
BC	 !
BMACROFULLC	 	MACRO   FULL = 0,36$;
BMACRORIGHTC	 	MACRO	RIGHT = 0,18$;
BMACROLEFTC	 	MACRO	LEFT = 18,18$;
BMACROC	 	MACRO
BCLINKC	 		CLINK = 0,0,RIGHT$,	%CURRENT LINK FIELD%
BNLINKC	 		NLINK = 1,0,RIGHT$,	%NEW (NEXT) LINK FIELD%
BCW0LC	 		CW0L =	0,0,LEFT$,	%LEFT HALF LINK WORD%
BCW0RC	 		CW0R = 0,0,RIGHT$,
BCW1LC	 		CW1L = 0,1,LEFT$,	%LEFT HALF WORD 1%
BCW1RC	 		CW1R = 0,1,RIGHT$,	%RIGHT HALF WORD1; 1%
BCW1C	 		CW1 =	0,1,FULL$,	%CURRENT FIRST WORD IN ENTRY%
BCW2C	 		CW2 = 0,2,FULL$,	%SECOND WORD%
BCW2RC	 		CW2R =  0,2,RIGHT$,	% "	SECOND WORD (RIGHT HALF)%
BCW2LC	 		CW2L =  0,2,LEFT$,	% "	SECOND WORD LEFT HALF%
BCW3C	 		CW3  =  0,3,FULL$,	% THIRD WORD%
BCW3LC	 		CW3L =	0,3,LEFT$,
BCW3RC	 		CW3R = 	0,3,RIGHT$,
BCW4C	 		CW4  =  0,4,FULL$,	%FOURTH WORD%
BCW4LC	 		CW4L = 	0,4,LEFT$,
BCW4RC	 		CW4R =  0,4,RIGHT$,
BCW5C	 		CW5 = 0,5,FULL$,
BCW5RC	 		CW5R =  0,5,RIGHT$,		!FIFTH WORD
BCW5LC	 		CW5L =  0,5,LEFT$,
BCW6LC	 		CW6L =  0,6,LEFT$,
BCW6RC	 		CW6R =  0,6,RIGHT$,
BCW7LC	 		CW7L =	0,7,LEFT$,
BCW7RC	 		CW7R =	0,7,RIGHT$;
BLISS  V. 1.0-2.12	5-JUN-73  20:33:19	P2S1	FIRST.BLI		PAGE 2-1

BC	 !	THE FOLLOWING MACROS DEFINE THE IDATTRIBUTES OF AN IDENTIFIER
BC	 !	IDATTRIBUT(X). WHERE X IS ONE OF THE FOLLOWING:
BC	 !
BMACROALLOFTC	 	MACRO	ALLOFTHEM=	18,18$,
BDEFINDC	 		DEFIND	=	#576000$,! *        !101 111 110 000 000 000
BNOTFUNC	 		NOTFUNC	=	#437400$,!    @     !100 011 111 100 000 000
BNOTVARC	 		NOTVAR	=	#500000$,!       +  !101 000 000 000 000 000
BC	 
BNAMNAMC	 		NAMNAM  =	35,1$,	 ! *  @  +  !NAMELIST NAME
BCOMBLC	 		COMBL	=	34,1$,	 ! *  @  +  !COMMON BLOCK NAME
BSFNC	 		SFN	=	33,1$,	 ! *     +  !STATEMENT FUNCTION NAME
BINUSEC	 		INUSE	=	32,1$,	 ! *        !IN USE IN SUBPROGRAM
BSTORDC	 		STORD	=	31,1$,	 ! *  @     !VARIABLE IS STORED INTO
BINASSIC	 		INASSI	=	30,1$,	 ! *  @     !IN ASSIGN STATMENT
BINNAMC	 		INNAM	=	29,1$,	 ! *  @     !IN NAMELIST
BFENTRYC	 		FENTRYNAME 	=	28,1$,	 ! *  @     !NAME IS AN ENTRY INTO A FUNCTION OR SUBROUTINE
BINEQVC	 		INEQV	=	27,1$,	 !    @     !IN EQUIVALENCE
BINCOMC	 		INCOM	=	26,1$,	 !    @     !IN COMMON BLOCK
BINGLOBC	 		INGLOB  =	25,1$,	!INGLOBAL
BSFDUMMC	 		SFDUMMY	=	25,1$,	 !USED AS DUMMY IN STATEMENT FUNCTION
BINDATAC	 		INDATA	=	24,1$,	 !          !IN DATA STATEMENT
BINEXTEC	 		INEXTERN =	23,1$,	 !	    !IN EXTERNAL STATEMENT
BDUMMYC	 		DUMMY =		22,1$,	 !	    !DUMMY PARAMETER
BISPROTC	 		ISPROT = 	21,1$,	 !	    !ARRAY IS TO BE PROTECTED
BLIBRFUC	 		LIBRFUN = 	20,1$,	!	!IDENTIFIER IS A LIBRARY FUNCTION
BISDEFIBC	 		ISDEFIND(B)=(.B[IDATTRIBUT(ALLOFTHEM)] AND DEFIND) NEQ 0$,
BISNOTFBC	 		ISNOTFUNC(B)=(.B[IDATTRIBUT(ALLOFTHEM)] AND NOTFUNC) NEQ 0$,
BISNOTVBC	 		ISNOTVAR(B)=IF (.B[IDATTRIBUT(ALLOFTHEM)] AND NOTVAR) NEQ 0 THEN
BC	 				BEGIN
BC	 					ENTRY[0]_@ISN;
BC	 					IF .B[IDATTRIBUT(SFN)] THEN
BC	 						(ENTRY[1]_SFPLIT;ENTRY[2]_B[IDSYMBOL];ENTRY[3]_ARGPLIT;ERROUT(E4))
BC	 							ELSE (ENTRY[1]_B[IDSYMBOL];ERROUT(E6))
BC	 				END$;
BC	 !
BC	 !
BC	 !THE STRUCTURE ACCESS FOR A SYMBOL TABLE ENTRY
BC	 !
BMACROIDLINKC	 MACRO	IDLINK	 = CLINK$,
BIDOPTIC	 	IDOPTIM	= CW0L$,	!FOR OPTIMIZATION
BIDDIMC	 	IDDIM	= CW0L$,	!PTR TO DIMENSIONS
BIDOPERC	 	IDOPER	= CW1R$,	!OPERATOR FIELD
BIDCHOSC	 	IDCHOS	=0,2,20,5$,	!LOOP #  USED IN DEF PT CALCULATION
BIDUSEDC	 	IDUSED = 0,2,19,1$,	!FLAG USED IN DEF PT CALCULATION
BIDDEFC	 	IDDEF	=0,2,18,1$,
BIDATTRXC	 	IDATTRIBUT(X) = 0,1,X$,
BIDTARGC	 	IDTARGET = CW2$,	!TARGET FOR ADDRESSING IN CODE GEN
BIDADDRC	 	IDADDR  = CW2R$,	!FOR ADDRESSING
BIDSYMBC	 	IDSYMBOL  = CW3$,	!SYMBOL IN SIXBIT
BIDCOMMC	 	IDCOMMON  = CW4L$,	!PTR TO COMMON BLOCK NAME IF IN COMMON
BC	 				!ALSO PTR TO NAMELIST ARG BLK IF NAMELIST
BIDDATVC	 	IDDATVAL=CW4R$,		!FOR DATASTMNT PROCESSING: THIS WD IS USED TO HOLD THE
BC	 				! THE CURRENT *VALUE* OF THIS VARIABLE IF IT IS
BC	 				! A LOOP INDEX FOR A DATA STATEMNT 
BIDFNATC	 	IDFNATTRIB= CW4$,	!ATTRIBUTE-FIELD FOR A FUNCTION NAME (THIS
BC	 				! WORD IS USED FOR IDDATA,IDCOMMON FOR VARS)
BC	 				! THIS FIELD CONTINUES THE ATTRIBUTES OF A
BLISS  V. 1.0-2.12	5-JUN-73  20:33:23	P2S1	FIRST.BLI		PAGE 2-2

BC	 				! LIBRARY FUNCTION
BC	 				!THE FOLLOWING ARE SUBFIELDS OF IDFNATTRIB FIELD:
BIDINLIC	 	IDINLINFLG=0,4,35,1$,	!FLAG FOR "THIS FN CAN BE EXPANDED IN LINE"
BIDINLIC	 	IDINLINOPR=CW4R$,	!OPERATOR TO BE USED FOR THE IN-LINE FN
BC	 				! NODE THAT CAN BE SUBSTITUTED FOR THIS FN (IF
BC	 				! THERE IS ONE)
BIDSFNLC	 	IDSFNLAB=CW5L$,		!LOCAL LABEL ASSIGNED TO A STATEMENT FUNCTION
BIDCOLIC	 	IDCOLINK = CW5R$;	!LINK TO NEXT SYMBOL IN COMMON BLOCK THAT
BC	 				!THIS SYMBOL IS IN
BC	 
BC	 
BC	 !
BC	 !THE STRUCTURE ACCESS FOR CONSTANT TABLE
BC	 !
BMACROCONLINC	 MACRO	CONLINK	 = CLINK$,
BCONOPEC	 	CONOPER  = CW1R$,	!OPERATOR FIELD
BCNTOBEC	 	CNTOBEALCFLG= 0,1,35,1$,	!FLAG FOR "THIS CONSTANT NEEDS TO BE IN CORE"
BCONADDC	 	CONADDR = CW2R$,	!HISEG ADDR OF THIS CONSTANT
BCONST1C	 	CONST1   = CW3$,	!HIGH ORDER VALUE(CONTAINS REAL PART OR HI ORDER OF DP OR SINGLE REAL )
BCONST2C	 	CONST2	 = CW4$;	!LOW ORDER VALUE (CONTAINS INTEGER VALUE)
BC	 !
BC	 !THE STRUCTURE FOR THE LITERAL TABLE
BC	 !
BMACROLITSIZC	 MACRO	LITSIZ	 = CW0L$,	!SIZ OF LITERAL IN WORDS
BLITLINC	 	LITLINK	 = CLINK$,	!LINK TO NEXT LITERAL
BLITOPEC	 	LITOPER	= CW1R$,	%OPER FIELD OF LITERAL%
BLITFLGC	 	LITFLGS = CW1L$,	!LITERAL FLAG FIELD
BLITEXWC	 	LITEXWDFLG=0,1,34,1$,	!FLAG INDICATING THAT THIS LITERAL HAS AN EXTRA
BC	 				! WD ON THE END CONTAINING ONLY  A NULL (THIS
BC	 				! IS NECESSARY IF THE NUMBER OF CHARS FITTED INTO AN
BC	 				! EXACT NUMBER OF WDS)
BLITADDC	 	LITADDR = CW2$,	!ADDR OF LIT STRING
BLIT1C	 	LIT1=CW3$,	!1ST WD OF THE LITERAL STRING (ASCII - LEFT JUSTIF)
BLIT2C	 	LIT2=CW4$,	!2ND WD OF THE LITERAL STRING (WILL BE FILLED WITH NULLS IF
BC	 			! STRING IS ONLY 1 WD
BC	 			!SUCCESSIVE WDS OF THE LITERAL WILL BE STORED IN WDS FOLLOWING
BLITWDIXC	 	LITWD(IX)=0,2+IX,FULL$,	!TO ACCESS THE NTH WORD OF  A LITERAL
BC	 					! (NOTE THAT THE 1ST WD IS WORD 1)
BFIRSTLC	 	FIRSTLIT = LITTBL[0]$;
BC	 
BC	 	%(***DEFINE A SPECIAL STRUCTURE TO ACCESS THE NTH WORD OF  A LITERAL***)%
BSTRUCTLITERALITERACTCTC	 	STRUCTURE LITERALENTRY[CT]=
BLITERACTC	 	(@.LITERALENTRY + 3 + .CT-1)<0,36>;
BC	 !
BC	 !THE STRUCTURE ACCESS FOR THE COMMON BLOCK NAME TABLE
BC	 !
BMACROCOMSIZC	 MACRO	COMSIZE	 = CW0L$,	!SIZ OF THIS COMMON BLOCK IN WORDS
BCOMLINC	 	COMLINK	 = CLINK$,	!LINK TO NEXT BLOCK
BCOMNAMC	 	COMNAME  = CW1$,	!BLOCK NAME IS SIXBIT
BCOMFIRC	 	COMFIRST  = CW2L$,	!FIRST ENTRY IN BLOCK PTR
BCOMLASC	 	COMLAST  = CW2R$,	!LAST ENTRY IN BLOCK PTR
BCOMADDC	 	COMADDR = CW3L$,	!THE RELATIVE LOCATION OF THIS BLOCK IN COMMON
BNEXCOMC	 	NEXCOMBLK  =CW3R$;	!PTR TO NEXT COMMON BLOCK IN SEQUENCE AS DEFINED
BC	 					!FOR ALLOCATION PURPOSES
BLISS  V. 1.0-2.12	5-JUN-73  20:33:25	P2S1	FIRST.BLI		PAGE 3-1

BC	 !THE STRUCTURE ACCESS FOR THE EQIVALENCE GROUP TABLE ENTRY
BC	 !
BMACROEQVINCC	 MACRO	EQVINCOM  = 0,0,35,1$,	!IS GROUP IN COMMON BIT
BEQVAVAC	 	EQVAVAIL = 0,0,33,2$,	!AVAILABLE FOR SEARCHING BIT 0=AVAIL
BC	 				!1=OK FOR SEARCH, 2=NOT AVAIL
BEQVLINC	 	EQVLINK  = CLINK$,	!LINK TO NEXT GROUP
BEQVLIMC	 	EQVLIMIT = CW1R$,	!LIMIT VALUE OF EQUIV CLASS
BEQVLASC	 	EQVLAST = CW2R$,	!PTR TO LAST LIST ENTRY IN GROUP
BEQVHEAC	 	EQVHEAD  = CW1L$,	!PTR TO ACTUAL HEAD OF GROUP
BEQVFIRC	 	EQVFIRST = CW2L$,	!PTR TO FIRST ITEM IN GROUP
BEQVADDC	 	EQVADDR = CW3$;	!DISPLACEMEN OF CLASS 'HEAD' FROM 0
BC	 !
BC	 !THE STRUCTURE ACCES FOR THE EQUIVALENCE LIST ENTRY
BC	 !
BMACROEQLINDC	 MACRO	EQLINDIC  = 0,0,35,1$,	!INDICATES SYMBOL NOT DIMENSIONED YET
BEQLLINC	 	EQLLINK  = CLINK$,	!LINK TO NEXT SYMBOL
BEQLIDC	 	EQLID	 = CW1R$,	!PTR TO SYMBOLTABLE
BEQLDISC	 	EQLDISPL  = CW2$,	!DISPLACEMENT OF THIS SYMBOL FROM GROUP HEAD
BEQLLISC	 	EQLLIST = CW1L$;	!PTR TO LIST OF SUBSCRIPTS (CONSTANTS)
BC	 !
BC	 !THE STRUCTURE ACCESS FOR  ENCODED SOURCE (EXECUTABLE PROGRAM) TREE
BC	 !
BMACROSRCIDC	 MACRO	SRCID	 = 0,1,1,7$,	!ID CODE OF STATEMENT
BSRCLINC	 	SRCLINK	 = CLINK$,	!LINK PTR TO NEXT STATEMENT HEADER
BSRCISNC	 	SRCISN	 = CW0L$,	!INTERNAL SEQUENCE NUMBER OF STAEMENT
BSRCFLAC	 	SRCFLAGS = CW1L$,	!FLAGS FOR LABEL TABLE
BINNERDC	 	INNERDOFLG = 0,1,35,1$,	!FLAGS INNERMOST DO STATEMENTS
BSRCOPEC	 	SRCOPER  = CW1R$,	!OPER FIELD- OPERCLS = STATEMENT
BC	 				!OPERSPC = SRCID
BSRCLBLC	 	SRCLBL	 = CW3L$,	!LABEL TABLE POINTER (0 IF NO LABEL)
BSRCOPTC	 	SRCOPT	 = CW2R$,	!PTR TO OPTIMIZATION WORDS USED BY PHAZ 2
BSRCCOMC	 	SRCCOMNSUB = CW2R$,		!COMMON SUBEXPRESSION HERE
BSRCCMPC	 	SRCCMPLX=CW2L$,			!NUMBER OF REGS USED FOR THIS STMNT.
BC	 
BC	 
BC	 	%(***DEFINE A MACRO TO USE IN SPECIFYING OPERATOR FIELDS OF STATEMENT NODES-
BC	 		FOR A STMNT NODE THE OPRCLS FIELD IS IN BITS 23-27, THE SRCID IS
BC	 		IN BITS 28-34
BC	 	******)%
BSTOPEROPCLSOPSRCIC	 	STOPERC(OPCLS,OPSRCID)=
BC	 		(OPCLS^8 OR OPSRCID^1)$,
BC	 
BC	 
BC	 !
BC	 !THE FOLLOWING STRUCTURES ARE AN INTEGRAL PART OF THE STAEMENT HEADER
BC	 !FOR EACH KIND OF EXECUTABLE STATEMENT, ONLY THE ABOVE FIELDS
BC	 !CONTAIN INFORMATION COMMON FOR EACH STAEMENT NODE
BC	 !
BC	 !
BC	 !GO TO STATEMENT FIELDS
BC	 !
BGOTOLBC	 	GOTOLBL	 = CW3R$,	!PTR TO LABEL TABLE
BAGOTOLC	 	AGOTOLBL = CW3R$,	!ASSIGNED GO TO LABEL PTR
BCGOTOLC	 	CGOTOLBL = CW3R$,	!COMPUTED GO TO PTR TO PSEUDO EXPRESSION NODE
BGOTOLIC	 	GOTOLIST = CW4R$,	!PTR TO LIST OF LABELS (OR 0) IF NO LIST
BGOTONUC	 	GOTONUM = CW4L$,	!NUMBER OF LABELL INLIST
BC	 !
BLISS  V. 1.0-2.12	5-JUN-73  20:33:26	P2S1	FIRST.BLI		PAGE 3-2

BC	 !IF STATEMENT FIELDS
BC	 !
BLIFEXPC	 	LIFEXPR  = CW3R$,	!PTR TO EXPR NODE FOR LOGICAL IF
BLIFSTAC	 	LIFSTATE = CW4R$,	!PTR TO STATEMENT NODE IF TRUE CONDITON
BAIFEXPC	 	AIFEXPR = LIFEXPR$,	!SAME  AS FOR LOGICAL IF
BAIFLESC	 	AIFLESS  = CW4R$,	!LABEL PTR IF LESS
BAIFEQLC	 	AIFEQL  = CW4L$,	!LABEL TO GO TO IF EQUAL
BAIFGTRC	 	AIFGTR  = CW5R$,	!LABEL TO GO TO IF GTR
BAIFREGC	 	AIFREG = 0,5,23,4$,	!REG TO HOLD THE VAL TO BE TESTED
BC	 	!BITS WITHIN THE FLAGS FIELD USED BY ARITHMETIC IF ONLY
BC	 	! (THESE BITS ARE ALL USED ELSEWHERE AS FLAGS DESCRIBING ARG2 OF AN EXPRESSION) 
BAIFLBEC	 	AIFLBEQV=0,EXOPWD,21,2$,	!VAL OF THIS FIELD INDICATES WHCH (IF ANY)
BC	 					! OF THE 3 LABELS ARE EQUAL TO EACHOTHER
BC	 					!(THESE BITS ARE USED IN EXPRS AS A2NEGFLG AND A2NOTFLG)
BAIFLBNC	 	AIFLBNXT=0,EXOPWD,19,2$,	!VAL OF THIS FIELD INDICATES WHICH (IF ANY)
BC	 					! OF THE LABELS INDICATES THE FOLLOWING STATEMENT
BAIFFLGC	 	AIFFLGS=0,EXOPWD,19,4$,		!THE CONCATENATION OF THE AIFLBEQV AND AIFLBNXT FIELDS
BC	 					!(THESE BITS ARE A2SAMEFLG AND A2IMMEDFLG IN EXPRS)
BC	 !
BC	 !ASSIGN STATEMENT FIELDS
BC	 !
BASILBLC	 	ASILBL  = CW3R$,	!PTR TO LABEL IN ASSIGN
BASISYMC	 	ASISYM  = CW4L$,	!PTR TO SYMBOL 
BASILINC	 	ASILINK = CW4R$,	!LINKS ASSIGN STATEMENTS
BC	 !
BC	 !DO STATEMENT FIELDS
BC	 !
BDOPREDC	 	DOPRED	= CW6L$,	!PTR TO DO STATEMENT PREDECESSOR
BDOLBLC	 	DOLBL  = CW3R$,	!PTR TO DO LABEL TERMINUS ENTRY
BDOSYMC	 	DOSYM	 = CW4R$,	!POINTER TO DO INDEX VARIABLE
BDOM1C	 	DOM1	 = CW4L$,	!POINTER TO INITIAL VALUE
BDOM2C	 	DOM2	 = CW5L$,	!POINTER TO UPPER LIMIT
BDOM3C	 	DOM3	 = CW5R$,	!POINTER TO STEP SIZE
BDOSSIZC	 	DOSSIZE = DOM3$,	!ANOTHER NAME FOR STEP SIZE
BDOLPCTC	 	DOLPCTL = CW7R$,	!POINTER TO CONTROL EXPRESSION
BDOCTLVC	 	DOCTLVAR = CW7L$,	!POINTER TO CONTROL VARIABLE
BDOCREGC	 	DOCREG=0,6,0,4$,	!DO LOOP CONTROL REG
BDOIREGC	 	DOIREG=0,6,4,4$,	!DO LOOP INDUCTION VARIABLE REGISTER; 0 IS NONE
BC	 !
BC	 !THE STRUCTURE OF DO LOOP TREE NODES
BC	 !
BPARLVLC	 	PARLVL = CW0L$,	!PTR TO PARALLEL LEVEL DO LOOP
BNEXTDOC	 	NEXTDO = CW0R$,	!PTR TO NEXT DEEPER NESTED DO
BPREVDOC	 	PREVDO = CW1L$,	!PTR TO ENCLOSING DO LOOP
BLEVLC	 	LEVL   = CW1R$,	!NEST LEVEL OF LOOP 
BDOSRCC	 	DOSRC	= CW2R$,	!PTR TO SOURCE TREE OF THE DO
BDONODEC	 	DONODESIZ = 3$,
BC	 	!
BC	 !I/O STATEMENT FIELDS
BC	 !
BIOLINKC	 	IOLINK	= CW1L$,	!LINK I/O STMTS FOR GENERATION OF ARG BLOCKS
BIOARGLC	 	IOARGLBL = CW4L$,	!POINTER TO LABEL FOR STMT ARG BLOCK
BIODODPC	 	IODODPTH = CW4R$,	!DO DEPTH ANALYSIS TREE
BIOUNITC	 	IOUNIT	=  CW5L$,	!POINTER TO UNIT OR CODE FOR UNIT
BIORECOC	 	IORECORD = CW5R$,	!POINTER TO RECONRD FOR RANDOM ACCESS
BIOCNTC	 	IOCNT	= CW5R$,	!FOR ENCODE AND ECODE
BIOLISTC	 	IOLIST	= CW6L$,	!POINTER TO I/O LIST
BLISS  V. 1.0-2.12	5-JUN-73  20:33:28	P2S1	FIRST.BLI		PAGE 3-3

BIOFORMC	 	IOFORM	= CW6R$,	!POINTER TO FORMAT OR 0 IF UNFORMATTED
BIONAMEC	 	IONAME	= CW6R$,	!POINTER TO NAME LIST FOR NAMELIST 
BIOERRC	 	IOERR	= CW7L$,	!ERR LABEL POINTER
BIOENDC	 	IOEND	= CW7R$,	!END LABEL POINTER
BIOVARC	 	IOVAR	= CW5L$,	!FOR ENCODE/ DECODE
BIOREPTC	 	IOREPT	= CW5R$,	!FOR REPEAT FACTOR ON BACKSPACE ETC.
BC	 !
BC	 !FORMAT STATEMENT FIELDS
BC	 !
BFORSIZC	 	FORSIZ  = CW4L$,	!SIZE OF STRING IN WORDS
BFORLINC	 	FORLINK = CLINK$,
BFOROPEC	 	FOROPER = CW1R$,
BFORADDC	 	FORADDR = CW4R$,	!ADDR OF STRING (IN LOW SEG)
BFMTLINC	 	FMTLINK	= CW5L$,	!LINK TO NEXT FORMAT STATEMENT
BFORSTRC	 	FORSTRING = CW5R$,	!PTR TO CHARACTER STRING
BC	 !
BC	 !DATA STATEMENT NODE
BC	 !
BDATALNC	 	DATALNK = CLINK$,	!LINKS NODES TOGETHER
BDATISNC	 	DATISN = CW0L$,
BDATCOUC	 	DATCOUNT = CW1$,		!NUMBER OF WORDS SPECIFIED FOR INITIALIZATION
BDATITEC	 	DATITEMS = CW2L$,	!PTR LINKED LIST OF DATAITEM NODES
BDATCONC	 	DATCONS = CW2R$,	!PTR TO LINKED LIST OF CONSTANT NODE PTRS
BC	 
BC	 	%(***DEFINE THE FIELDS IN THE LINKED LIST OF CONSTANTS UNDER A DATA STMNT***)%
BDCONSTC	 	DCONST=CW1R$,		!PTR TO CONSTANT TABLE ENTRY
BDATARPC	 	DATARPT=CW1L$,		!CT OF NUMBER OF TIMES THIS CONSTANT IS TO BE STORED
BC	 !
BC	 !
BC	 !NAMELIST NODE
BC	 !
BNAMLINC	 	NAMLINK	=CLINK$,	!LINK TO NEXT NODE
BNAMLIDC	 	NAMLID	=CW2L$,		!PTR TO NAMELIST NAME
BNAMADDC	 	NAMADDR	=CW2R$,		!ALLOCATED ADDRESS OF NAMELIST ARGLIST
BNAMCNTC	 	NAMCNT	=CW1L$,		!NUMBER OF ITEMS IN NAMLIST
BNAMLISC	 	NAMLIST =CW1R$,		!PTR TO LIST OF NAMELIST NAMES
BC	 !
BC	 !OPEN STATEMENT
BC	 !
BOPSIZC	 	OPSIZ=	IOCNT$,		!NUMBER OF OPEN PARAMETERS
BOPLSTC	 	OPLST=	IOLIST$,		!LOCATION OF PARAMETER LIST
BC	 !
BC	 !ASSIGNMENT STATEMENT
BC	 !
BLHEXPC	 	LHEXP	 = CW4R$,	!PTR TO LEFT SIDE EXPRESSION
BRHEXPC	 	RHEXP	 = CW3R$,	!PTR TO RIGHT SIDE EXPR
BASMNTRC	 	ASMNTREG = 0,4,23,4$,
BC	 !
BC	 !STATEMENT FUNCTION FIELDS
BC	 !
BSFNNAMC	 	SFNNAME	= CW3R$,
BSFNLISC	 	SFNLIST = CW4R$,
BSFNEXPC	 	SFNEXPR	= CW4L$,
BC	 !
BC	 !CALL STATEMENT FIELDS
BC	 !
BCALSYMC	 	CALSYM   = CW3R$,	!PTR TO SUBROUTINE NAME SYMBOL
BLISS  V. 1.0-2.12	5-JUN-73  20:33:29	P2S1	FIRST.BLI		PAGE 3-4

BCALLISC	 	CALLIST	 = CW4R$,	!PTR TO LIST OF ARGS  OR 0
BCALNUMC	 	CALNUM	 = CW4L$,	!NUMBER OF ARGS IN CALL
BC	 !
BC	 !RETURN STATEMENT
BC	 !
BRETEXPC	 	RETEXPR	= CW3R$,		!PARAMETER NUMBER TO RETURN THRU
BC	 !
BC	 !STOP STATEMENT
BC	 !
BSTOPIDC	 	STOPIDENT = CW3R$,	!STOP LOCATION IDENTIFIER
BSTOPLBC	 	STOPLBL=CW4L$,		!LABEL ASSOCIATED WITH THE ARGLIST TO
BC	 				! FOROTS USED FOR THIS STMNT
BC	 !
BC	 !PAUSE STATEMENT
BC	 !
BPAUSIDC	 	PAUSIDENT = CW3R$,	!PAUSE LOCATION IDENTIFIER
BPAUSLBC	 	PAUSLBL=CW4L$,		!LABEL ASSOCIATED WITH THE ARGLIST FOR FOROTS USED
BC	 				! FOR THIS STMNT
BC	 !
BC	 !ENTRY STATEMENT FIELDS (ALSO GOOD FOR SUBROUTINE AND FUNCTION)
BC	 !
BENTSYMC	 	ENTSYM	 = CW3R$,	!PTR TO ENTRY NAME
BENTLISC	 	ENTLIST	 = CW4R$,	!PTR TO LIST OF ARGS OR 0
BENTNUMC	 	ENTNUM	 = CW4L$;	!NUM OF ARGS INLIST
BC	 !
BC	 !THE STRUCTURE ACCESS FOR STATEMENT NUMBER TABLE ENTRY
BC	 !
BMACROC	 MACRO	
BSNLINKC	 	SNLINK	 = CLINK$,	!LINK TO NEXT TABLE ENTRY
BSNNXTLC	 	SNNXTLAB = CW0L$,	!PTR TO INTERNAL LABEL WITH SAME ADDR FIELD
BSNOPERC	 	SNOPER	= CW1R$,	!OPER FIELD FOR STATEMENT NUMBER
BSNMADEC	 	SNMADELABL = CW1L$,	!FLAG FOR MADE LABEL
BSNFLAGC	 	SNFLAGS = CW1L$,	!NON-ZERO INDICATES A MADE LABEL
BSNEXTNC	 	SNEXTND = CW2L$,	!FOR EXTENDED DO CONSTRUCTION
BSNREFC	 	SNREF	= CW2$,		!WHOLE WORD USED FOR ADDING 0NE IN TESTENTRY
BSNREFNC	 	SNREFNO = CW2R$,	!NUMBER OF TIMES LABEL REFERENCED
BSNDEFIC	 	SNDEFINED = CW2L$,	!-1 IF DEFINED
BSNADDRC	 	SNADDR = CW2R$,		!THE ABSOLUTE ADDRESS OF THIS LABEL
BSNHDRC	 	SNHDR	 = CW3L$,	!PTR TO SOURCE STATEMENT TREE OF DEFINING STATEMENT
BSNUMBEC	 	SNUMBER	 = CW3R$,	!ACTUAL STATEMENT LABEL
BSNDOLVC	 	SNDOLVL	= CW4R$,	!COUNT OF NESTED DO'S REFERENCING THIS LABEL
BSNDOLNC	 	SNDOLNK	= CW4L$,	!PTR TO LIST OF 1 WORD POINTERS TO DO LOOPS
BSNCADDC	 	SNCADDRWD = CW5$,	!WD OF ENTRY USED BY PEEPHOLER
BSN1STLC	 	SN1STLAB = CW5R$,	!PTR TO 1ST LABEL THAT HAS SAME ADDR
BSNSTATC	 	SNSTATUS = CW5L$;	!STATUS OF THIS LABEL:
BC	 				! 0 - UNRESOLVED
BC	 				! 1 - IN PEEPHOLE BUFFER
BC	 				! 2 - OUT OF PEEPHOLE BUFFER
BC	 				!REFERENCING THIS LABEL
BC	 !
BC	 !
BC	 !
BMACRODOUBLEC	 MACRO	DOUBLE = .SYMTYPE GTR REAL$;	%FOR TESTING DOUBLE OR COMPLEX MODE%
BC	 !
BC	 !	THE FOLLOWING DEFINES THE TABLE NUMBERS AND ENTRY SIZES
BC	 !	FOR THE VARIOUS TABLES BUILT BY THE COMPILER
BC	 !	LEFT HALF IS ENTRY SIZE AND RIGHT HALF IS TABLE NUMBER THAT
BLISS  V. 1.0-2.12	5-JUN-73  20:33:30	P2S1	FIRST.BLI		PAGE 3-5

BC	 !	IS USED TO IDENTIFY A SPECIFIC TABLE TO THE TABLE SEARCH ROUTINE
BC	 !
BBINDIDSIZC	 	BIND	IDSIZ	= 6,	%SYMBOL TABLE ENTRY LENGTH%
BPOOLSIC	 		POOLSIZ=#2000,	%SIZE OF BUFFER FOR CARD INPUT%
BC	 				%SAME DECLARATION AS IN GLOBAL.BLI%
BEXSIZC	 		EXSIZ	= 4,	%EXPRESSION TABLE ENTRY%
BSNSIZC	 		SNSIZ	= 6,	%STATEMENT NUMBER TABLE ENTRY%
BCONSIZC	 		CONSIZ	= 5,	!CONSTANT SIZ
BLTLSIZC	 		LTLSIZ	= 3,	!LITERAL SIZ
BCOMSIZC	 		COMSIZ	= 4,	!COMMON BLOCK NAME TABLE SIZ
BEQVSIZC	 		EQVSIZ	= 4,	!EQUIV GROUP SIZ
BEQLSIZC	 		EQLSIZ	= 3,	!EQUIV LIST SIZ
BDATSIZC	 		DATSIZ  = 3,	!DATANODE SIZE
BNAMSIZC	 		NAMSIZ	= 3,	!NAMELIST NODE SIZE
BSRCSIZC	 		SRCSIZ	= 4,	!SOURCE TREE HDR SIZ
BGOSIZC	 		GOSIZ	= 1,	!GO TO PART SIZ
BIFSIZC	 		IFSIZ	= 3,	!IF PART
BASISIZC	 		ASISIZ	= 1,	!ASSIGN PART
BDOSIZC	 		DOSIZ	= 4,	!DO PART
BFORMSIC	 		FORMSIZ = 2,	!FORMAT STATEMENT PART
BIOSIZC	 		IOSIZ	= 4,	!IO LIST PART
BASGNSIC	 		ASGNSIZ	= 1,	!ASSIGNMENT PART
BSFSIZC	 		SFSIZ	= 1,	!STATEMENT FUNCTION SIZ
BCALLSIC	 		CALLSIZ	= 1,	!CALL PART
BENTSIZC	 		ENTSIZ	= 1,	!ENTRY PART
BDIMSIZC	 		DIMSIZ	= 4,	!DIMENSION TABLE SIZ
BASSISIC	 		ASSISIZ = 1,
BBACKSIC	 		BACKSIZ = 4,
BCONTSIC	 		CONTSIZ = 0,
BDECOSIC	 		DECOSIZ	= 4,
BOPENSIC	 		OPENSIZ = 4,
BCLOSSIC	 		CLOSSIZ = 4,
BENCOSIC	 		ENCOSIZ = 4,
BENDFSIC	 		ENDFSIZ = 4,
BFINDSIC	 		FINDSIZ = 3,
BREADSIC	 		READSIZ = 4,
BWRITSIC	 		WRITSIZ = 4,
BGOTOSIC	 		GOTOSIZ = 1,
BAGOSIZC	 		AGOSIZ	= 1,
BCGOSIZC	 		CGOSIZ	= 1,
BIFASIZC	 		IFASIZ	= 2,
BIFLSIZC	 		IFLSIZ	= 2,
BINPUSIC	 		INPUSIZ = 4,
BOUTPSIC	 		OUTPSIZ = 4,
BRETUSIC	 		RETUSIZ = 1,
BSTOPSIC	 		STOPSIZ = 2,
BPAUSSIC	 		PAUSSIZ = 2;
BC	 !
BBINDIDTABIDSIZC	 	BIND	IDTAB	= IDSIZ^18 + 0,
BCONTABCONSIZC	 		CONTAB	= CONSIZ^18 + 1,
BCXPTABEXSIZC	 		CXPTAB	= EXSIZ^18 + 2,
BLABTABSNSIZC	 		LABTAB  = SNSIZ^18 +3,
BCOMTABCOMSIZC	 		COMTAB  = COMSIZ^18 + 4,
BSORTABSRCSIZC	 		SORTAB  = SRCSIZ^18 + 5,
BDIMTABDIMSIZC	 		DIMTAB  = DIMSIZ^18 +6,
BEXPTABEXSIZC	 		EXPTAB  = EXSIZ^18 + 7,
BIOLTABC	 		IOLTAB  = 2^18 + 8,
BLISS  V. 1.0-2.12	5-JUN-73  20:33:32	P2S1	FIRST.BLI		PAGE 3-6

BLITTABC	 		LITTAB  =  9,	!# OF WDS PER ENTRY VARIES DEPENDING ON THE SIZE OF STRING
BC	 !
BC	 !THE FOLLOWING TABLES ARE STATIC AND ALLOCATED TO THE HISEG
BC	 !
BLFUTABC	 		LFUTAB	= 10,	%LIBRARY FUNCTION ID TABLE%
BEQVTABEQVSIZC	 		EQVTAB  = EQVSIZ^18 + 11,	%EQUIVALENCE GROUP TABLE%
BEQLTABEQLSIZC	 		EQLTAB  = EQLSIZ^18 +12,	%EQUIVALENCE LIST TABLE%
BDATATADATSIZC	 		DATATAB = DATSIZ^18 +13,	%DATA GROUP NODE%
BNAMTABNAMSIZC	 		NAMTAB	= NAMSIZ^18+14;	%NAMELIST GROUP TABLE%
BC	 !
BC	 !
BC	 !DEFINE THE ID OF DIFFERENT FORTRAN STATEMENTS
BC	 !
BC	 	!START OF FIRST GROUP (REGULAR)
BBINDASGNIDC	 BIND	ASGNID	= 000,	!ASSIGNMENT
BASSIIDC	 	ASSIID	= 001,	!
BCALLIDC	 	CALLID	= 002,	!
BCONTIDC	 	CONTID	= 003,	!
BDOIDC	 	DOID	= 004,	!
BENTRIDC	 	ENTRID	= 005,	!
BCOMNSUC	 	COMNSUB	= 006,	!
BC	 	!END OF FIRST GROUP
BC	 	!START OF REGULAR BRANCHING
BGOTOIDC	 	GOTOID	= 007,	!
BAGOIDC	 	AGOID	= 008,	!
BCGOIDC	 	CGOID	= 009,	!
BIFAIDC	 	IFAID	= 010,	!
BIFLIDC	 	IFLID	= 011,	!
BRETUIDC	 	RETUID	= 012,	!
BSTOPIDC	 	STOPID	= 013,	!
BC	 	!END OF SECOND GROUP
BC	 	!START OF I/O BRANCHING
BREADIDC	 	READID	= 014,	!
BWRITIDC	 	WRITID	= 015,	!
BDECOIDC	 	DECOID	= 016,	!
BENCOIDC	 	ENCOID	= 017,	!
BREREDIC	 	REREDID	= 018,	!
BFINDIDC	 	FINDID	= 019,	!
BCLOSIDC	 	CLOSID	= 020,
BINPUIDC	 	INPUID	= 021,	!
BOUTPIDC	 	OUTPID	= 022,	!
BC	 	!END OF THIRD GROUP
BC	 	!START OF I/O NON-BRANCHING
BBACKIDC	 	BACKID	= 023,
BBKFILIC	 	BKFILID	= 024,
BREWDIDC	 	REWDID	= 025,
BSKFILIC	 	SKFILID	= 026,
BSKRECIC	 	SKRECID	= 027,
BUNLODIC	 	UNLODID	= 028,
BRELSIDC	 	RELSID	= 029,
BENDFIDC	 	ENDFID	= 030,
BC	 	!END OF FOURTH GROUP
BC	 	!START OF MISC.
BENDIDC	 	ENDID	= 031,
BPAUSIDC	 	PAUSID	= 032,
BOPENIDC	 	OPENID	= 033,
BSFNIDC	 	SFNID	= 034,
BLISS  V. 1.0-2.12	5-JUN-73  20:33:33	P2S1	FIRST.BLI		PAGE 3-7

BFORMIDC	 	FORMID	= 035,	!
BBLTIDC	 	BLTID	= 036,	!
BOVRLYIC	 	OVRLYID	= 037;	!
BC	 !
BC	 !DEFINE DATA FOR BUILDING SOURCE TREE ENTRIES FOR STATEMENTS
BC	 !	LEFT HALF IS NUMBER OF WORDS FOR EACH TYPE OF STATEMENT
BC	 !	RIGHT HALF IS ID OF STATEMENT
BC	 !
BBINDASGNDAASGNSISRCSIZASGNIDC	 BIND	ASGNDATA	= (ASGNSIZ+SRCSIZ)^18 + ASGNID,
BSFNDATSFSIZSRCSIZSFNIDC	 	SFNDATA		= (SFSIZ+SRCSIZ)^18 + SFNID,
BASSIDAASSISISRCSIZASSIIDC	 	ASSIDATA	= (ASSISIZ+SRCSIZ)^18 + ASSIID,
BBACKDABACKSISRCSIZBACKIDC	 	BACKDATA	= (BACKSIZ+SRCSIZ)^18 + BACKID,
BBKFILDIOSIZSRCSIZBKFILIC	 	BKFILDATA	= (IOSIZ+SRCSIZ)^18 + BKFILID,
BSKIPDAIOSIZSRCSIZSKRECIC	 	SKIPDATA	= ( IOSIZ+SRCSIZ)^18 + SKRECID,
BSKIPFDIOSIZSRCSIZSKFILIC	 	SKIPFDATA	= (IOSIZ+SRCSIZ)^18 + SKFILID,
BREWIDAIOSIZSRCSIZREWDIDC	 	REWIDATA	= (IOSIZ + SRCSIZ)^18 + REWDID,
BUNLODAIOSIZSRCSIZUNLODIC	 	UNLODATA	= (IOSIZ +SRCSIZ)^18 + UNLODID,
BREREDAIOSIZSRCSIZREREDIC	 	REREDATA	= (IOSIZ + SRCSIZ)^18 + REREDID,
BCALLDACALLSISRCSIZCALLIDC	 	CALLDATA	= (CALLSIZ+SRCSIZ)^18 + CALLID,
BCONTDACONTSISRCSIZCONTIDC	 	CONTDATA	= (CONTSIZ+SRCSIZ)^18 + CONTID,
BDECODADECOSISRCSIZDECOIDC	 	DECODATA	= (DECOSIZ+SRCSIZ)^18 + DECOID,
BOPENDAOPENSISRCSIZOPENIDC	 	OPENDATA	= (OPENSIZ+SRCSIZ)^18 + OPENID,
BCLOSDACLOSSISRCSIZCLOSIDC	 	CLOSDATA	= (CLOSSIZ+SRCSIZ)^18 + CLOSID,
BDODATADOSIZSRCSIZDOIDC	 	DODATA		= (DOSIZ+SRCSIZ)^18 + DOID,
BENCODAENCOSISRCSIZENCOIDC	 	ENCODATA	= (ENCOSIZ+SRCSIZ)^18 + ENCOID,
BENDFDAENDFSISRCSIZENDFIDC	 	ENDFDATA	= (ENDFSIZ+SRCSIZ)^18 + ENDFID,
BENTRDAENTSIZSRCSIZENTRIDC	 	ENTRDATA	= (ENTSIZ+SRCSIZ)^18 + ENTRID,
BFINDDAFINDSISRCSIZFINDIDC	 	FINDDATA	= (FINDSIZ+SRCSIZ)^18 + FINDID,
BREADDAREADSISRCSIZREADIDC	 	READDATA	= (READSIZ+SRCSIZ)^18 + READID,
BWRITDAWRITSISRCSIZWRITIDC	 	WRITDATA	= (WRITSIZ+SRCSIZ)^18 + WRITID,
BGOTODAGOTOSISRCSIZGOTOIDC	 	GOTODATA	= (GOTOSIZ+SRCSIZ)^18 + GOTOID,
BAGODATAGOSIZSRCSIZAGOIDC	 	AGODATA		= (AGOSIZ+SRCSIZ)^18 + AGOID,
BCGODATCGOSIZSRCSIZCGOIDC	 	CGODATA		= (CGOSIZ+SRCSIZ)^18 + CGOID,
BIFADATIFASIZSRCSIZIFAIDC	 	IFADATA		= (IFASIZ+SRCSIZ)^18 + IFAID,
BIFLDATIFLSIZSRCSIZIFLIDC	 	IFLDATA		= (IFLSIZ+SRCSIZ)^18 + IFLID,
BINPUDAINPUSISRCSIZINPUIDC	 	INPUDATA	= (INPUSIZ+SRCSIZ)^18 + INPUID,
BOUTPDAOUTPSISRCSIZOUTPIDC	 	OUTPDATA	= (OUTPSIZ+SRCSIZ)^18 + OUTPID,
BENDDATSRCSIZENDIDC	 	ENDDATA		= SRCSIZ^18+ENDID,
BRETUDARETUSISRCSIZRETUIDC	 	RETUDATA	= (RETUSIZ+SRCSIZ)^18 + RETUID,
BSTOPDASTOPSISRCSIZSTOPIDC	 	STOPDATA	= (STOPSIZ+SRCSIZ)^18 + STOPID,
BFORMDAFORMSISRCSIZFORMIDC	 	FORMDATA	= (FORMSIZ+SRCSIZ)^18 + FORMID,
BPAUSDAPAUSSISRCSIZPAUSIDC	 	PAUSDATA	= (PAUSSIZ+SRCSIZ)^18 + PAUSID;
BC	 
BC	 
BC	 !
BC	 !	BIND	ENTRSIZ = PLIT(IDTAB,CONTAB,EXPTAB,LABTAB,COMTAB,
BC	 !				SORTAB,DIMTAB,IOLTAB,LITTAB);
BC	 !
BC	 !	THE FOLLOWING MACROS MAY BE NEEDED FOR INDEFINITE SIZE ENTRIES
BC	 !	AND FOR INDEFINITE LEVEL OF INDIRECT REFERENCE
BC	 !
BMACROCWDLNC	 	MACRO	CWD(L,N) = L,N,FULL$;
BC	 !
BC	 !	L - MEANS LEVEL OF INDIRECTION
BC	 !	N - MEANS THE N-TH WORD IN THE ENTRY
BC	 !
BC	 !
BLISS  V. 1.0-2.12	5-JUN-73  20:33:35	P2S1	FIRST.BLI		PAGE 3-8

BC	 !!	THE FOLLOWING STRUCTURE DECLARATION DEFINES THE HASH TABLES
BC	 !	FOR THE SYMBOL TABLE THE CONSTANT TABLE,EXPRESSION TABLE AND
BC	 !
BC	 !
BSTRUCTHTABLEHTABLEIIHTABLEIRIGHTC	 	STRUCTURE HTABLE[I] = (.HTABLE +.I)<RIGHT>;
BC	 
BC	 !	DEFINE THE TABLE SIZES
BBINDSSIZC	 	BIND	SSIZ =	79,	%SYMBOL HASH TABLE%
BCSIZC	 		CSIZ =	37,	%CONSTANTS HASH TBLE%
BESIZC	 		ESIZ =	79,	%EXPRESSION HASH%
BLASIZC	 		LASIZ = 37,	%STATMENT NUMBER HASH SIZE%
BNSIZC	 		NSIZ = 17,	%NAMELIST HASH SIZE%
BSOSIZC	 		SOSIZ = 1,	%NO HASH TABLE FOR ENCODED SOURCE%
BDISIZC	 		DISIZ = 1,	%NO HASH TABLE FOR DIMENSIONS%
BDASIZC	 		DASIZ = 1,	%NO HASH TABLE FOR DATA STATEMENT%
BLISIZC	 		LISIZ = 1;	%LITERAL TABLE IS NOT HASHED%
BC	 !
BEXTERNSYMTBLSSIZCONTBLCSIZEXPTBLLABTBLLASIZC	 	EXTERNAL SYMTBL[SSIZ],CONTBL[CSIZ],EXPTBL[1],LABTBL[LASIZ],
BLITTBLLISIZNAMTBLNSIZSRCTBLSOSIZC	 		LITTBL[LISIZ],NAMTBL[NSIZ],SRCTBL[SOSIZ],
BDIMTBLDISIZDATTBLDASIZC	 		DIMTBL[DISIZ],DATTBL[DASIZ];
BC	 !
BC	 !	BIND LISTX = PLIT(SYMTBL,CONTBL,EXPTBL,LABTBL,SRCTBL,
BC	 !			DIMTBL,DATTBL,NAMTBL,LITTBL);
BMAPHTABLESYMTBLSYMTBLCONTBLLABTBLNAMTBLC	 	MAP	HTABLE SYMTBL: CONTBL: LABTBL:  NAMTBL;
BC	 !
BC	 !
BC	 !	THE NEXT STRUCTURE DEFINES THE ACCESSING ALGORITHM FOR THE
BC	 !	LINKED LIST STRUCTURES THAT ARE THE ACTUAL TABLES CONTAINING
BC	 !	SYMBOL ENTRIES,CONSTANT ENTRIES,EXPRESSION ENTRIES ETC.
BC	 !
BSTRUCTBASEBASEIIJKLC	 	STRUCTURE BASE[I,J,K,L] =
BCASEIOFSETC	 			CASE .I OF SET
BBASEJKLC	 	%0%	 (@.BASE +.J)<.K,.L>;	%LEVEL 1 ENTRY POINTED TO BY BASE%
BBASEJKLC	 	%1%	(@@.BASE +.J)<.K,.L>	%LEVEL 2 ENTRY%
BTESC	 			TES;
BC	 !
BC	 !!	THE PARAMETERS ARE DEFINED AS FOLLOWS
BC	 !	I - THE LEVEL OF INDIRCTION
BC	 !		0 - MEANS CONTENTS OF BASE
BC	 !		1 - MEANS CONTENTS OF ENTRY POINTED TO BY BASE
BC	 !		2 - CONTENTS OF ENTRY POINTED TO BY RIGHT HALF OF
BC	 !			ADDRESS POINTED TO BY BASE
BC	 !
BC	 !	J - THE J-TH WORD IN THE TABLE ENTRY POINTED TO
BC	 !		CURRENT RANGE IS 0 TO 4
BC	 !		J=0 MEANS POINT TO CHAIN FIELD (RIGHT HALF OF FIRST WORD)
BC	 !
BC	 !	MAP THE POINTERS TO THE BASE
BC	 !
BEXTERNBASEBASEPTBASEPTC	 	EXTERNAL BASE BASEPTR;
BC	 !
BC	 !******
BC	 
BC	 !
BC	 !
BC	 !******
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:33:37	P2S1	FIRST.BLI		PAGE 3-9

BC	 !
BC	 !
BC	 !THE FOLLOWING GLOBALS ARE USED FOR SEMANTICS CHECKING
BC	 !THEY CONTAIN POINTERS TO TABLE ENTRIES FOR THE LAST COMMON BLOCK
BC	 !NAME, THE LAST LITERAL, THE LAST SYMBOL ENTERED ETC.
BC	 !
BEXTERNDTRACEJOBFFJOBRELXAREAXCALLXSTAKXALTXTYPTABC	 	EXTERNAL DTRACE,JOBFF,JOBREL,XAREA,XCALL,XSTAK,XALTX,TYPTAB;
BC	 !
BEXTERNC	 	EXTERNAL
BCOMBLKC	 		COMBLKPTR,	!POINTERS FOR LAST AND FIRST COMMMON BLOCKS
BLITPOIC	 		LITPOINTER,	!LAST AND FIRST LITERALS
BSYMPTRC	 		SYMPTR,	!LAST AND FIRST SYMBOLS
BSORCPTC	 		SORCPTR,	!LAST AND FIRST SOURCE ENTRIES
BLASTEXC	 		LASTEXP,	!LAST EXPRESSION ENTRY
BLASTDIC	 		LASTDIM,	!LAST DIMENSION ENTRY
BCONSPTC	 		CONSPTR,	!LAST AND FIRST CONSTANTS
BLABLPTC	 		LABLPTR,	!FIRSTAND LAST STATEMENT LABELS
BSPACEFC	 		SPACEFREE;	!AMOUNT OF FREE LOWSEG SPACE
BEXTERNC	 	EXTERNAL
BSRCHONC	 		SRCHONLY,	!FLAG FOR TBLSEARCH FOR SEARCH ONLY MODE
BISNC	 		ISN,		!INTERNAL SOURCE SEQUENCE NUMBER
BIDOFSTC	 		IDOFSTATEMENT,	!IDENTIFICATION OF EXECUTABLE STEMENT IN TREE
BLABLOFC	 		LABLOFSTATEMENT;!SOURCE STATEMENT NUMBER POINTER
BC	 				!IF CURRENT STATEMENT HAS ONE - OR 0
BEXTERNC	 	EXTERNAL
BDLOOPTC	 		DLOOPTREE,	!PTR TO DO LOOP NEST TREE
BLASLVLC	 		LASLVL0,	!PTR TO LAST LEVEL 0 NEST SEEN
BDELETPC	 		DELETPTR;	!PTR TO DELETED TABLE ENTRY FOR DELETE ROUTINE
BEXTERNC	 	EXTERNAL
BSYMTYPC	 		SYMTYPE,	!TYPE OF CRRENT SYMBOL
BPOINTEC	 		POINTER	,	!USEFUL POINTER
BLIBFUNC	 		LIBFUNTAB,	!DEFINES THE FUNCTION NAMES IN LIBRARY
BLIBATTC	 		LIBATTRIBUTES,	!DEFINES THE LIBRARY ATTRIBURES
BONEAFTC	 		ONEAFTERLIB,	!END OF THE LIB TABLE ADDRESS
BNAMEC	 		NAME,		!NAME OF THE TABLE FOR TBLSEARCH
BC	 				!AND SIZ OF ENTRY IN LEFT HALF
BEQVPTRC	 		EQVPTR,		!PTR TO FIRST AND LAST EQIV GROUPS
BFORMPTC	 		FORMPTR,	!PTR TO FIRST AND LAST FORMAT TABLE ENTRIES
BDATASPC	 		DATASPTR,	!PTR TO LINKED LIST OF DATA STATEMENT NODES
BIOLSPTC	 		IOLSPTR,	!PTR TO LINKED IO STATEMENTS
BENTRYC	 		ENTRY;		!THE GLOBAL PARAMETER VECTOR FOR TBLSEARCH
BC	 
BC	 !*****
BMACROFIRSTSC	 	MACRO	FIRSTSRC = SORCPTR<LEFT>$,
BLASTSRC	 		LASTSRC = SORCPTR<RIGHT>$,
BIOFIRSC	 		IOFIRST = IOLSPTR<LEFT>$,	!POINTS TO FIRST IO STATEMENT
BIOLASTC	 		IOLAST = IOLSPTR<RIGHT>$,	!POINTS TO LAST IO STATEMENT SEEN SO FAR
BDATFIRC	 		DATFIRST	= DATASPTR<LEFT>$,
BDATLASC	 		DATLAST	= DATASPTR<RIGHT>,
BC	 		FIREQVGROUP = EQVPTR<LEFT>$,
BLASEQVC	 		LASEQVGROUP = EQVPTR<RIGHT>$,
BLASCOMC	 		LASCOMBLK = COMBLKPTR<RIGHT>$,
BFIRCOMC	 		FIRCOMBLK = COMBLKPTR<LEFT>$,
BDELETFC	 		DELETFIELD = CW0L$,	!IF LEFT HALF OF FIRST WORD OF ENTRY IS -1 THEN ENTRY IS DELETED
BFOUNDC	 		FOUND = -1$,
BNOTFOUC	 		NOTFOUND = 0$,
BFLAGC	 		FLAG = FLGREG<FOUNDFLG>$,	!FLAG FOR TBLSEARCH FOUND(-1) OR NOTFOUND(0)
BLISS  V. 1.0-2.12	5-JUN-73  20:33:39	P2S1	FIRST.BLI		PAGE 3-10

BSIZOFEC	 		SIZOFENTRY = NAME<LEFT>$,
BBASEPOC	 		BASEPOINT = BASEPTR$;
BC	 !
BBINDBPRBASEPTC	 	BIND	BPR = BASEPTR,	!FOR THE ENCLOSING ROUTINES
BXCONSTC	 		XCONSTANT = 12,
BXSYMBOC	 		XSYMBOL = 8,
BXLABLLC	 		XLABLL = 4,
BEXPRESC	 		EXPRES = 0;
BC	 !
BGLOBALBINDTABLVBLISS  V. 1.0-2.12	5-JUN-73  20:33:40	P2S1	TABLES.BLI		PAGE 4-1

C	 GLOBAL BIND TABLV=105;		!VERSION DATE 20-APRIL-73
BC	 !EDITED 2-OCT-72 -FI
BC	 !EDITED AUG 30,1972 - SRM
BC	 !EDITED AUG 25,1972 - SRM
BC	 !EDITED AUG 24,1972 (22:45) - SRM
BC	 !EDITED AUG 24,1972 - SRM
BC	 !EDITED AUG 18, 1972 (21:15) - SRM
BC	 !EDITED AUG 14,1972 - SRM
BC	 !EDITED AUG 10, 1972 - SRM
BC	 !EDITED AUG 9,1972 - SRM
BC	 
BC	 
BC	 !COPYRIGHT 1972,1973, DIGITAL EQUIPMENT CORPORATION, MAYNARD MA**
BC	 !AUTHOR: S. MURPHY
BC	 !
BC	 
BBINDDEBUGFC	 BIND DEBUGFLG=1;			!COMPILE SWITCH TO LEAVE CONSISTENCY CHECKS IN
BLISS  V. 1.0-2.12	5-JUN-73  20:33:40	P2S1	TABLES.BLI		PAGE 5-1

BC	 
BC	 %(****************************************
BC	 	TO OPTIMALLY TEST WHOLE-WD FLAGS FOR TRUE AND FALSE
BC	 ****************************************)%
BBINDTRUEC	 BIND	TRUE= -1,
BFALSEC	 	FALSE= 0;
BMACROTRUTHXC	 MACRO	TRUTH(X)= X NEQ 0$,
BFALSITXC	 	FALSITY(X)= X EQL 0$;
BC	 
BBINDAOBINCC	 BIND	AOBINCR=#1000001;			!INCREMENT FOR AOBJN
BC	 
BC	 
BC	 %(****************************************
BC	 	DEFINE BYTES FOR WHOLE, LEFT HALF, AND RIGHT HALF
BC	 ****************************************)%
BMACROWHOLEC	 MACRO 	WHOLE=0,36$ ;
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:33:40	P2S1	TABLES.BLI		PAGE 6-1

BC	 		
BC	 %(**********************************************************************
BC	 	STRUCTURE FOR AN EXPRESSION NODE
BC	 ************************************************************************)%
BC	 
BC	 
BC	 
BC	 %(************************************************************
BC	 	DEFINE THE FIELDS AND SUBFIELDS IN AN EXPRESSION NODE
BC	 ************************************************************)%
BC	 
BBINDEXOPWDC	 BIND EXOPWD=1;			!WORD IN WHICH THE OPERATOR FIELD
BC	 					! AND FLAGS FIELD
BC	 					! ARE CONTAINED (USE A MACRO ONLY BECAUSE
BC	 					! WHEN THIS NUMBER CHANGES A LARGE
BC	 					! NUMBER OF SUBFIELD DEFINITIONS
BC	 					! MUST BE CHANGED)
BC	 %(*****DEFINE MAIN FIELDS****************************)%
BMACROC	 MACRO
BFIRSTWC	 	FIRSTWORD=0,0,FULL$,
BPARENTC	 	PARENT=0,0,RIGHT$,		!PTR TO PARENT-NODE
BOPERATC	 	OPERATOR=0,EXOPWD,RIGHT$,		!OPERATOR FIELD
BEXPFLAC	 	EXPFLAGS=0,EXOPWD,LEFT$,	
BOPERWOC	 	OPERWORD=0,EXOPWD,WHOLE$,
BTARGETC	 	TARGET=0,2,WHOLE$,
BARGWDC	 	ARGWD=0,3,WHOLE$,			!WD HOLDING PTRS TO THE 2 ARGS
BARGWDOC	 	ARGWDOFFSET=3$,
BARG1PTC	 	ARG1PTR=0,3,LEFT$,
BARG2PTC	 	ARG2PTR=0,3,RIGHT$;
BMACROC	 MACRO
BCOMPLEC	 	COMPLEXITY=0,0,LEFT$;		!THIS FIELD IS USED ONLY DURING REGISTER ALLOCATION
BC	 
BC	 %(**********SUBFIELDS IN OPERATOR FIELD*************************)%
BMACROC	 MACRO
BVALTYPC	 	VALTYPE=0,EXOPWD,13,5$,		!TYPE FOR VALUE
BOPRCLSC	 	OPRCLS=0,EXOPWD,8,5$,		!CLASS OF OPERATOR
BOPERSPC	 	OPERSP=0,EXOPWD,5,3$,		!SPECIFIC OPERATOR WITHIN CLASS
BC	 
BC	 
BC	 	%(***NOTE THAT OF THE 3 FREE BITS AT THE RIGHT END OF THE OPERATOR FIELD,
BC	 		BIT 35 IS USED AS A SPECIAL FLAG BIT IN
BC	 		1. TYPE-CONVERSION NODES: FLAG FOR NO CONVERSION
BC	 	*******)%
BC	 
BC	 	%(***SUBFIELDS OF OPERSP FIELD*****)%
BOPRSP1C	 	OPRSP1=0,EXOPWD,6,2$,		!1ST 2 BITS OF OPERSP (THIS FIELD IS 00 FOR
BC	 					! ADD AND SUB, 01 FOR MUL AND DIV
BOPRSP2C	 	OPRSP2=0,EXOPWD,5,2$,		!LAST 2 BITS OF OPERSP FIELD -
BC	 					! USED TO DIFFERENTIATE ADD,SUB,MUL,DIV
BC	 					! ALSO USED IN TYPE CONVERSION NODES TO DIFFERENTIATE
BC	 					! FROMINT, FROMREL, FROMDBLPRC,
BC	 					! FROMCMPLX
BOPRSBIC	 	OPRSBIT0=0,EXOPWD,7,1$,		!1ST BIT OF OPERSP FIELD - FOR AN ARITH
BC	 					! NODE, THIS BIT IS SET ONLY FOR OPERSP EXPONEN
BC	 					! FOR A TYPE-CONVERSION NODE THIS BIT IS SET
BC	 					! FOR FROMINT,FROMREAL,FROMDBLPRC,FROMCMPLX
BC	 					!  AND NOT SET FOR FROMOCT,FROMCTL,FROMLIT,FROMDOCT
BLISS  V. 1.0-2.12	5-JUN-73  20:33:43	P2S1	TABLES.BLI		PAGE 6-2

BOPRSBIC	 	OPRSBIT2=0,EXOPWD,5,1$,		!3RD BIT OF OPERSP FIELD - FOR AN ARITH
BC	 					! NODE, THIS BIT IS SET ONLY FOR SUB AND MUL
BOPR1C	 	OPR1=0,EXOPWD,5,8$,		!OPRCLS AND OPERSP FIELDS CONCATENATED
BOPR2C	 	OPR2=0,EXOPWD,6,7$;		!OPRCLS FIELD AND 1ST 2 BITS OF OPERSP FIELD
BC	 
BC	 	%(***SUBFIELDS OF THE ABOVE "MAIN" SUBFIELDS***)%
BMACROC	 MACRO
BVALTP1C	 	VALTP1=0,EXOPWD,15,2$,		!MIDDLE 2 BITS OF VALTYPE ARE
BC	 					! ALL THATS NEEDED FOR GETA1OPIX AND ARITHOPIX
BVALTP2C	 	VALTP2=0,EXOPWD,15,3$,		!FIRST 3 BITS OF VALTYPE ARE
BC	 					! IDENTICAL TO THE OPERSP FIELD FOR A TYPECNV
BC	 					! NODE TO CONVERT FROM THAT VALTYPE
BDBLFLGC	 	DBLFLG=0,EXOPWD,16,1$,		!THE 2ND BIT OF VALTYPE IS FLAG
BC	 					! FOR 2 WD VAL (DOUBLE PREC OR COMPLEX)
BSDBLFLC	 	SDBLFLG=0,EXOPWD,6,1$;		!THE 2ND BIT OF OPERSP FOR A
BC	 					!NODE OF OPRCLS "TYPECNV" IS FLAG FOR SOURCE
BC	 					!IS A 2 WD VAL
BC	 
BMACROC	 MACRO
BBOOLOPC	 	BOOLOPR=0,EXOPWD,5,2$,		!BOOLEAN OPERATOR IS SPECIFIED BY RIGHT
BC	 					! 2 BITS OF OPERSP FIELD
BBOOLCLC	 	BOOLCLS=0,EXOPWD,6,1$,		!BOOLEAN CLASS (AND/OR OR XOR/EQV) IS
BC	 					! SPECIFIED BY THE LEFTMOST OF THESE 2
BBOPRFLC	 	BOPRFLG=0,EXOPWD,5,1$;		!THE 2ND DIVIDES BOOLEANS INTO 2 OTHER
BC	 					! CLASSES - OR/XOR AND AND/EQV
BC	 
BMACROPARENLC	 MACRO	PARENLSTFLG=0,EXOPWD,7,1$;	!FLAG FOR NAME WHICH SHOULD HAVE
BC	 					! AN ARGLST FOLLOWING (THIS BIT IS
BC	 					! 1ST BIT OF OPERSP FIELD OF A DATA ITEM)
BMACROFORMLFC	 MACRO	FORMLFLG=0,EXOPWD,5,1$;	!IN OPERSP FIELD FOR A DATA ITEM, FLAG
BC	 					! FOR "FORMAL" (NOTE HOWEVER THAT THIS BIT
BC	 					! IS ALSO SET IN THE OPERSP FIELD OF A TEMPORARY)
BC	 
BC	 	%(****MACRO TO CONSTRUCT AN "OPR1" FIELD*****)%
BMACROC	 MACRO
BOPR1COPCLSOPSPC	 	OPR1C(OPCLS,OPSP)=(OPCLS^3 OR OPSP)$;
BMACROOPR2COPCLSOPSPC	 MACRO	OPR2C(OPCLS,OPSP)=(OPCLS^2 OR OPSP^(-1))$;
BC	 
BC	 	%(****TO CONSTRUCT AN OPERATOR FIELD****)%
BMACROOPERCVTYPOPCLSOPSPC	 MACRO OPERC(VTYP,OPCLS,OPSP)=(VTYP^13 OR OPCLS^8 OR OPSP^5)$;
BC	 
BC	 	%(***TO GET A VALTP1 FIELD FROM A VALTYPE****)%
BMACROVTP1VLTPC	 MACRO	VTP1(VLTP)=(VLTP^(-2) AND (#3))$;
BC	 
BC	 
BC	 	%(***TO GET A VALTP2 FIELD (FIRST 3 BITS) FROM A VALTYPE***)%
BMACROVTP2VLTPC	 MACRO	VTP2(VLTP)=(VLTP^(-2))$;
BC	 
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:33:45	P2S1	TABLES.BLI		PAGE 7-1

BC	 
BC	 
BC	 
BC	 %(*******FLAGS IN EXPFLAG FIELD (THESE ARE SET BY PHASE 2 SKEL AND USED BY PHASE 3*******)%
BMACROC	 MACRO
BPARENFC	 	PARENFLG=0,EXOPWD,35,1$,		!FLAG FOR PARENS AROUND THIS NODE (IN SOURCE)
BRVRSFLC	 	RVRSFLG=0,EXOPWD,33,1$,			!"VAL OF 2ND SON SHOULD BE
BC	 						! COMPUTED BEFORE 1ST SON
BSTOREFC	 	STOREFLG=0,EXOPWD,32,1$,		!RESULT MUST BE STORED AFTER IT IS COMPUTED
BRESRFFC	 	RESRFFLG=0,EXOPWD,31,1$,		!FLAG FOR "UNDER THIS NODE THERE IS A
BC	 						! REFERENCE TO THE VAR INTO WHICH THE RESULT
BC	 						! OF THE WHOLE EXPRESSION WILL BE STORED
BFNCALLC	 	FNCALLSFLG=0,EXOPWD,30,1$,		!FLAG FOR "FN CALLS OCCUR UNDER THIS
BC	 						! NODE
BALCRETC	 	ALCRETREGFLG=0,EXOPWD,29,1$,		!VAL OF THIS NODE IS TO BE COMPUTED
BC	 						! IN THE "FN RETURN REG" 
BA1VALFC	 	A1VALFLG=0,EXOPWD,28,1$,		!FIRST ARG IS A COMMON SUBEXPR THAT 
BC	 						! WAS ALREADY COMPUTED ELSEWHERE
BC	 						! OR A LEAF
BA1NOTFC	 	A1NOTFLG=0,EXOPWD,27,1$,		!APPLY 'NOT' TO 1ST ARG
BA1NEGFC	 	A1NEGFLG=0,EXOPWD,26,1$,		!NEGATE 1ST ARG
BA1SAMEC	 	A1SAMEFLG=0,EXOPWD,25,1$,		!LOC OF COMPUTATION FOR PARENT EQLS
BC	 						! LOC OF VALUE OF FIRST ARG
BA1IMMEC	 	A1IMMEDFLG=0,EXOPWD,24,1$,		!1ST ARG IS IMMED CONSTANT
BA2VALFC	 	A2VALFLG=0,EXOPWD,23,1$,		!2ND ARG IS A COMMON SUBEXPR THAT WAS ALREADY
BC	 						! COMPUTED ELSEWHERE
BC	 						! OR A LEAF
BA2NOTFC	 	A2NOTFLG=0,EXOPWD,22,1$,		! APPLY NOT TO 2ND ARG
BA2NEGFC	 	A2NEGFLG=0,EXOPWD,21,1$,		!NEGATE 2ND ARG
BA2SAMEC	 	A2SAMEFLG=0,EXOPWD,20,1$,		!LOC OF COMPUTATION FOR PARENT EQLS 
BC	 						! LOC OF VALUE OF 2ND ARG
BA2IMMEC	 	A2IMMEDFLG=0,EXOPWD,19,1$,		!2ND ARG IS AN IMMED CONSTANT
BMEMCMPC	 	MEMCMPFLG=0,EXOPWD,18,1$;		!VALUE COMPUTED TO MEMORY
BC	 
BMACROCSFULLC	 MACRO	CSFULLWDFLG=RVRSFLG$;		!IN A COMMON SUBEXPR NODEWHERE THE
BC	 					! COMMON-SUBEXPR IS A SINGLE VARIABLE (EG A
BC	 					! VAR USED IN RELATIONALS OR SUBSCRIPTS)
BC	 					! THIS FLAG IS SET IF THE WHOLE VARIABLE MUST BE LOADED
BC	 					! (EG IT IS USED IN A RELATIONAL), RATHER
BC	 					! THAN THE RIGHT-HALF BEING USABLE REGARDLESS OF
BC	 					! WHATS IN THE LEFT HALF (EG IT IS USED AS A SS ONLY)
BC	 
BC	 
BC	 	%(***DEFINE SUBFIELDS OF THE FLAGS FIELD***)%
BC	 
BC	 	%(*****FLAGS FOR EACH OF THE 2 ARGS***)%
BMACROC	 MACRO
BA1FLGSC	 	A1FLGS=0,EXOPWD,24,5$,
BA2FLGSC	 	A2FLGS=0,EXOPWD,19,5$;
BC	 
BC	 	%(****LAST 4 FLAGS - NEG, NOT, SAME, IMMED****)%
BMACROC	 	MACRO
BA1FLG1C	 		A1FLG1=0,EXOPWD,24,4$,
BA2FLG1C	 		A2FLG1=0,EXOPWD,19,4$;
BC	 	%(***A2IMMEDFLG CONCATENATED WITH MEMCMPFLG***)%
BMACROA2IMMEC	 	MACRO A2IMMEMCMPFLGS=0,EXOPWD,18,2$;
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:33:46	P2S1	TABLES.BLI		PAGE 7-2

BC	 	%(***NEG AND NOT FLAGS******************)%
BMACROC	 	MACRO
BA1NGNTC	 		A1NGNTFLGS=0,EXOPWD,26,2$,
BA2NGNTC	 		A2NGNTFLGS=0,EXOPWD,21,2$;
BC	 
BC	 	%(****TO CLEAR THE FLAGS FOR ARG1, OR FOR ARG2*****)%
BMACROCLRA1FANODEC	 	MACRO CLRA1FLGS(ANODE)=
BC	 		ANODE[EXPFLAGS]_.ANODE[EXPFLAGS] AND (NOT #003700)$;
BC	 
BMACROCLRA2FANODEC	 	MACRO CLRA2FLGS(ANODE)=
BC	 		ANODE[EXPFLAGS]_.ANODE[EXPFLAGS] AND (NOT  #000076)$;
BC	 
BC	 	%(******TO SWAP THE FLAGS FOR ARG1 AND ARG2 (WHEN ARE ALSO SWAPPIG THE 2 ARGS******)%
BC	 
BC	 	%(***VALUE FOR A1FLGS OR A2FLGS FIELD WHEN ONLY THE VAL FLG IS SET***)%
BBINDVLFLSEC	 BIND	VLFLSET=#20;
BC	 
BMACROC	 MACRO
BSWAPFLNODEC	 	SWAPFLGS(NODE) =
BC	 	BEGIN
BC	 		REGISTER T1;
BC	 		T1_.NODE[A1FLGS];
BC	 		NODE[A1FLGS]_.NODE[A2FLGS];
BC	 		NODE[A2FLGS]_.T1;
BC	 	END $;
BC	 
BC	 	%(****TO SET THE FLAGS FOR ARG1 TO THOSE FOR ARG2 AND CLEAR THOSE FOR ARG2 ****)% 
BMACROA2TOA1NODEC	 	MACRO A2TOA1FLGS(NODE)=
BC	 	BEGIN
BC	 		NODE[A1FLGS]_.NODE[A2FLGS];
BC	 		CLRA2FLGS(NODE);
BC	 	END$;
BC	 
BC	 	%(***TO MOVE FLAGS FOR A SON INTO THE FLAG FIELD OF ITS PARENT (WHEN
BC	 		LINKING THE SON DIRECTLY UP TO THE PARENT'S PARENT***)%
BMACROC	 MACRO
BRAISEFPARFLGSONFLGC	 	RAISEFLGS(PARFLGS,SONFLGS)=
BC	 	BEGIN
BC	 		REGISTER T1;
BC	 		T1_(PARFLGS XOR SONFLGS) AND NGNTFLGMSK;	!TAKE XOR OF NEGFLGS AND 
BC	 								! NOTFLGS OF PARENT AND SON
BC	 		.T1 OR (SONFLGS AND VLIMSMMSK)		!USE VALFLG, SAMEFLG 
BC	 								! AND IMMEDFLG FOR SON
BC	 	END$;
BC	 
BC	 	%(***MASK FOR NEG AND NOT FLAGS WITHIN A1FLGS/A2FLGS FIELDS***)%
BBINDNGNTFLC	 BIND	NGNTFLGMSK=#14;
BC	 
BC	 	%(***MASK FOR VALFLG,SAMEFLG, AND IMMEDFLG FIELDS WITHIN A1FLG/A2FLG FIELDS***)%
BBINDVLIMSMC	 BIND	VLIMSMMSK=#23;
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:33:47	P2S1	TABLES.BLI		PAGE 8-1

BC	 
BC	 
BC	 %(*********SUBFIELDS OF TARGET FIELD***********)%
BMACROC	 MACRO
BINREGFC	 	INREGFLG=0,2,35,1$,		!FLAG FOR VAL LEFT IN A REG
BTARGTAC	 	TARGTAC=0,2,23,4$,		!AC TO BE COMPUTED IN
BTARGAUC	 	TARGAUX=0,2,27,4$,		!EXTRA AC TO COMPUTE IN, USED FOR
BC	 					! RELATIONALS (WHICH ARE "COMPUTED" IN A DIFFERENT
BC	 					! REG FROM THE ONE THAT HOLDS THE VALUE)
BTARGTMC	 	TARGTMEM=0,2,0,23$,		!MEMORY REF TO GET AT FINAL RESULT
BTARGADC	 	TARGADDR=0,2,0,18$,		!ADDRESS FIELD FOR RETRIEVING RESULT
BTARGXFC	 	TARGXF=0,2,18,4$,		!INDEX FIELD FOR RETRIEVING RESULT
BTARGIFC	 	TARGIF=0,2,22,1$;		!INDIRECT FIELD FOR RETRIEVING RESULT
BC	 %(***TO GET TARGTAC, TARGXF,  OR TARGAUX FIELD FROM A TARGET WD INTO THE AC BITS OF AN INSTR***)%
BC	 %(****OR TO GET TARGET-REG FOR AN ASSIGNMENT-STATEMENT NODE INTO THE AC BITS OF AN INSTR***)%
BMACROGETTACNODEC	 MACRO	GETTAC(NODE)=(.NODE[TARGET] AND #17^23)$,
BGETTXFNODEC	 	GETTXF(NODE)=((.NODE[TARGET] AND #17^18)^5)$,
BGETTAUNODEC	 	GETTAUX(NODE)= ((.NODE[TARGET] AND #17^27)^(-4))$,
BGETASMSTMNTNC	 	GETASMNREG(STMNTNODE)= (.STMNTNODE[CW4] AND #17^23)$,
BGETAIFAIFNODC	 	GETAIFREG(AIFNODE)=(.AIFNODE[CW5] AND #17^23)$;
BC	 
BC	 	%(***GET THE INDEX AND INDIRECT BITS OF A TARGET WD***)%
BMACROGETTXFNODEC	 MACRO GETTXFI(NODE)=(.NODE[TARGET] AND #37^18)$;
BC	 
BC	 
BMACROIXFLDREGC	 MACRO	IXFLD(REG)=REG^18$;
BC	 
BC	 
BC	 
BC	 %(************************************************************
BC	 	DEFINE THE STRUCTURE FOR AN EXPRESSION NODE
BC	 ************************************************************)%
BSTRUCTPEXPRNPEXPRNFTPFTPWDPOSSIZEC	 STRUCTURE PEXPRNODE[FTP,WD,POS,SIZE]=
BC	 
BC	 	%(***THE ARG "FTP" SELECTS THE ACCESSING ALGORITHM***)%
BCASEFTPOFSETC	 	CASE .FTP OF SET
BC	 
BC	 		%(****FOR MOST FIELDS****)%
BPEXPRNWDPOSSIZEC	 		(@.PEXPRNODE+.WD)<.POS,.SIZE>
BC	 
BC	 
BTESC	 		TES;
BC	 
BC	 
BC	 
BC	 
BC	 
BC	 %(********************************************************
BC	 	VALUES FOR SUBFIELDS OF OPERATOR FIELD
BC	 ************************************************************)%
BC	 
BC	 %(*******VALUES FOR VALTYPE FIELD*****)%
BBINDC	 BIND
BOCTALC	 	OCTAL=0,		!00000
BLOGICAC	 	LOGICAL=1,		!00001
BCONTROC	 	CONTROL=4,		!00100 - CONTROL-TYPE BOOLEAN
BDOUBLOC	 	DOUBLOCT=8,		!01000
BLISS  V. 1.0-2.12	5-JUN-73  20:33:49	P2S1	TABLES.BLI		PAGE 8-2

BLITERAC	 	LITERAL=12,		!01100
BSTRINGC	         STRING=15,              !01111
BINTEGEC	 	INTEGER=16,		!10000
BBYTEC	 	BYTE=17,		!10001
BINDEXC	 	INDEX=18,		!10010
BREALC	 	REAL=20,		!10100
BDOUBLPC	 	DOUBLPREC=24,		!11000
BCOMPLEC	 	COMPLEX=28;		!11100 
BC	 
BC	 	%(**NOTE THAT IN THE ABOVE THE 2ND BIT IS A FLAG FOR
BC	 		DOUBLE WD***)%
BC	 	%(***NOTE ALSO THAT THE 2ND AND 3RD  BITS DETERMINE THE CODE TO BE
BC	 		GENERATED IN MANY CASES (WHERE INDEX,BYTE,LOG ARE 
BC	 		TREATED AS INTEGER); AND THAT THESE 2 BITS ARE
BC	 		REFERENCED AS THE FIELD "VALTP1" *******)%
BC	 	%(***NOTE ALSO THAT IF THE FIRST 3 BITS OF THE VALTYPES OF 2 NODES
BC	 		ARE IDENTICAL, NO TYPE-CONVERSION OPERATION IS  NECESSARY
BC	 		WHEN COMBINING THE 2 NODES ARITHMETICALLY 
BC	 	*****)%
BC	 	%(***NOTE ALSO THAT THE OPERSP FIELD FOR A TYPE CONVERSION NODE IS EQUAL
BC	 		TO THE FIRST 3 BITS OF THE ORIGINAL TYPE
BC	 	****)%
BC	 
BC	 
BC	 	%(***VALUES FOR VALTP1 FIELD (BITS 2 AND 3  OF VALTYPE)***)%
BBINDC	 BIND
BINTEG1VTP1INTEGEANDC	 	INTEG1=VTP1(INTEGER);	!00
BC	 
BC	 	%(***VALUES FOR VALTP2 FIELD (BITS 1,2,3 OF VALTYPE)***)%
BBINDC	 BIND
BLOGICALOGICAC	 	LOGICAL2=LOGICAL^(-2);
BC	 
BC	 	%(***TO TEST WHETHER A GIVEN VALTYPE IS DOUBLE-WD***)%
BMACRODBLFROVLTPC	 MACRO	DBLFROMVAL(VLTP)=
BC	 	(VLTP^(-3) AND 1)$;
BC	 
BC	 
BC	 
BC	 %(******VALUES FOR OPRCLS FIELD********)%
BBINDC	 BIND
BBOOLEAC	 	BOOLEAN=0,		!00000
BDATAOPC	 	DATAOPR=1,		!00001
BRELATIC	 	RELATIONAL=2,		!00010
BFNCALLC	 	FNCALL=3,		!00011
BARITHMC	 	ARITHMETIC=4,		!00100
BTYPECNC	 	TYPECNV=5,		!00101
BARRAYRC	 	ARRAYREF=6,		!00110
BCMNSUBC	 	CMNSUB=7,		!00111
BNEGNOTC	 	NEGNOT=8,		!01000
BSPECOPC	 	SPECOP=9,		!01001		;A SPECIAL CASE TO BE OPTIMIZED
BC	 						!(P2MUL,SQUARE,...)
BFIELDRC	 	FIELDREF=10,		!01010
BSTORECC	 	STORECLS=11,		!01011
BREGCONC	 	REGCONTENTS=12,		!01100
BLABOPC	 	LABOP=13,		!01101
BSTATEMC	 	STATEMENT=14,		!01110
BIOLSCLC	 	IOLSCLS=15,		!01111		;ELEMENT IN AN IOLIST
BLISS  V. 1.0-2.12	5-JUN-73  20:33:51	P2S1	TABLES.BLI		PAGE 8-3

BINLINFC	         INLINFN=16,             !10000		;A FN TO BE GENERATED IN LINE
BSTRINGC	         STRINGEXP=17;           !10001          ;A STRING EXPRESSION
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:33:51	P2S1	TABLES.BLI		PAGE 9-1

BC	 
BC	 %(********VALUES FOR OPERSP FIELD**************)%
BC	 
BC	 	%(****FOR OPRCLS BOOLEAN****)%
BBINDC	 BIND
BANDOPC	 	ANDOP=0,		!000
BOROPC	 	OROP=1,		!001
BEQVOPC	 	EQVOP=2,		!010
BXOROPC	 	XOROP=3;		!011
BC	 
BC	 	%(***BIT 35 OF EXOPWD IS USED AS A FLAG IN A BOOLEAN NODE FOR "ARG2HAS VALTYPE
BC	 		CONTROL, ARG1 IS A MASK" ****)%
BC	 
BC	 
BC	 
BC	 	%(****FOR OPRCLS DATA ITEM****)%
BBINDC	 BIND
BCONSTAC	 	CONSTANT=0,		!000
BTEMPORC	 	TEMPORARY=1,		!001
BVARIABC	 	VARIABLE=2,		!010
BFORMLVC	 	FORMLVAR=3,		!011
BARRAYNC	 	ARRAYNAME=4,		!100
BFORMLAC	 	FORMLARRAY=5,		!101
BFNNAMEC	 	FNNAME=6,		!110
BFORMLFC	 	FORMLFN=7;		!111
BC	 
BC	 	%(***DEFINE SUBFIELD OF OPERSP FOR DATA-ITEMS THAT DIFFERENTIATES
BC	 		FN AND FORMAL FN FROM ARRAY AND FORML ARRAY FROM VAR AND FORML VAR***)%
BMACRODATOPSC	 	MACRO	DATOPS1=OPRSP1$;	!FIRST 2 BITS OF OPERSP
BC	 
BC	 	%(***DEFINE VALUES OF DATOPS1 FIELD***)%
BBINDVARIABC	 BIND	VARIABL1=1,
BARRAYNC	 	ARRAYNM1=2,
BFNNAMEC	 	FNNAME1=3;
BC	 
BC	 	%(***TO TEST FOR AN DATA ITEM AN ENTRY IN THE SYMBOL TABLE (AS OPPOSED TO A 
BC	 		CONSTANT OR TEMPORARY*****)%
BMACROSYMBOLNODEC	 MACRO	SYMBOL(NODE)=(.NODE[OPERSP] GEQ VARIABLE)$;
BC	 
BC	 	%(****FOR OPRCLS RELATIONAL****)%
BBINDC	 BIND
BLC	 	L=1,			!001
BEC	 	E=2,			!010
BLEC	 	LE=3,			!011
BGEC	 	GE=5,			!101
BNC	 	N=6,			!110
BGC	 	G=7;			!111
BC	 
BMACROC	 MACRO
BEQRELMODEC	 	EQREL(MODE) = (MODE AND #1) EQL 0$;		!E AND N  HAVE LAST BIT=0
BC	 
BMACROC	 MACRO
BREVRELMC	 	REVREL(M) = M XOR #6$;			!"REVERSE" RELATIONAL FROM M (EG FOR
BC	 						! REVREL(GE) GET LE )
BMACROC	 MACRO
BCMRELMC	 	CMREL(M)= M XOR 4$;			!TO GET "COMPLEMENT" OF A CONDITION
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:33:52	P2S1	TABLES.BLI		PAGE 9-2

BC	 	%(****FOR OPRCLS FNCALL****)%
BBINDC	 BIND
BNONLIBC	 	NONLIBARY=0,		!NOT A LIBRARY FUNCTION
BLIBARYC	 	LIBARY=1;		!A LIBARY FUNCTION
BC	 
BC	 	%(****FOR OPRCLS ARITHMETIC****)%
BBINDC	 BIND
BADDOPC	 	ADDOP=0,		!000
BSUBOPC	 	SUBOP=1,		!001
BMULOPC	 	MULOP=2,		!010
BDIVOPC	 	DIVOP=3,		!011
BEXPONOC	 	EXPONOP=4;		!100
BC	 
BC	 	%(***TO TRANSFORM ADD TO SUB, SUB TO ADD; MUL TO DIV, DIV TO MUL***)%
BMACROC	 MACRO
BCMPLSPNODEC	 	CMPLSP(NODE)=
BC	 		(NODE[OPERATOR]_.NODE[OPERATOR] XOR #40)$;	!CHANGE RIGHTMOST BIT OF OPERSP
BC	 								! (RIGHTMOST BIT OF OPERSP IS 
BC	 								! 5 BITS FROM RIGHT END OF
BC	 								! OPERATOR FIELD
BC	 
BC	 	%(***TEST FOR OPERATOR EITHER ADD OR SUB****)%
BMACROC	 MACRO
BADDORSNODEC	 	ADDORSUB(NODE) = .NODE[OPR2] EQL OPR2C(ARITHMETIC,ADDOP)$;
BC	 	%(***TEST FOR OPERATOR FIELD EITHER MUL OR DIV***)%
BMACROC	 MACRO
BMULORDNODEC	 	MULORDIV(NODE) = .NODE[OPR2] EQL OPR2C(ARITHMETIC,MULOP)$;
BC	 
BC	 	%(***TO TEST FOR OPERATOR (*KNOWN TO BE ARITH*) EQUAL TO EXPONENTIATION***)%
BMACROC	 MACRO
BEXPONENODEC	 	EXPONEN(NODE) = .NODE[OPRSBIT0]$;	!FIRST BIT OF OPERSP FIELD
BC	 
BC	 	%(***TO TEST FOR OPERATOR (*KNOWN TO BE ARITH*) EQUAL TO SUB OR DIV****)%
BMACROC	 MACRO
BSUBORDNODEC	 	SUBORDIV(NODE)= (.NODE[OPRSBIT2])$;	!3RD BIT OF OPERSP FIELD IS SET FOR
BC	 						! DIV AND SUB
BC	 
BC	 	%(***TO TEST FOR AN OPERATOR (OF UNKNOWN OPRCLS) EQUAL TO ADD OR MUL****)%
BMACROC	 MACRO 
BC	 	%(***OPRCLS MUST BE ARITHMETIC, OPERSP MUST HAVE ITS 1ST AND 3RD BITS 0****)%
BADDORMNODEC	 	ADDORMUL(NODE)=((.NODE[OPERWORD] AND (#37^8 OR #5^5)) EQL (ARITHMETIC^8))$;
BC	 
BC	 
BC	 	%(*****TO TEST FOR A NODE OF UNKNOWN OPRCLS TO BE COMMUTATIVE - 
BC	 		VAL IS TRUE FOR ALL BOOLEANS AND FOR ADD AND MUL*********)%
BMACROCOMMUTNODEC	 MACRO	COMMUTATIVE(NODE)=
BC	 	(.NODE[OPRCLS] EQL BOOLEAN OR ADDORMUL(NODE) )$;
BC	  
BLISS  V. 1.0-2.12	5-JUN-73  20:33:53	P2S1	TABLES.BLI		PAGE 10-1

BC	 
BC	 
BC	 	%(****FOR OPRCLS TYPECNV****)%
BBINDC	 BIND
BFROMOCC	 	FROMOCT=0,		!000
BFROMCTC	 	FROMCTL=1,		!001
BFROMDOC	 	FROMDOCT=2,		!010
BFROMLIC	 	FROMLIT=3,		!011
BFROMINC	 	FROMINT=4,		!100
BFROMREC	 	FROMREAL=5,		!101
BFROMDBC	 	FROMDBLPRC=6,		!110
BFROMCMC	 	FROMCMPLX=7;		!111
BC	 
BC	 	%(***NOTE THAT THIS FIELD IS EQUAL TO THE FIRST 3 BITS OF THE VALTYPE
BC	 		FIELD FOR THE VALUE BEING CONVERTED FROM(THE VALTYPE FIELD 
BC	 		ON THIS NODE SPECIFIES THE TYPE TO CONVERT TO)****)%
BC	 
BC	 
BMACROC	 MACRO
BNOCNVFC	 	NOCNVFLG=0,EXOPWD,0,1$;		!BIT 35 OF EXOPWD IS USED AS A FLAG FOR "NO ACTUAL
BC	 					! CONVERSION TAKES PLACE"
BC	 
BC	 	%(***TEST WHETHER ANY CODE MUST BE GENERATED FOR A GIVEN TYPE-CONVERSION NODE***)%
BMACRONOCNVTPCNODC	 	MACRO NOCNV(TPCNODE)=
BC	 	BEGIN
BC	 		(
BC	 		(.TPCNODE[NOCNVFLG])		!IF FLAG WAS SET TO NOT ACTUALLY CONVERT
BC	 		OR
BC	 		(.TPCNODE[VALTP2] EQL .TPCNODE[OPERSP])
BC	 		OR
BC	 		(	(.TPCNODE[OPERSP] LSS FROMINT)	!CONVERTING FROM LOGICAL/OCTAL
BC	 							! OR DOUBLE-OCTAL OR CONTROL OR LITERAL
BC	 			AND
BC	 			( (NOT .TPCNODE[DBLFLG]) OR .TPCNODE[SDBLFLG])	!AND IF THE DESTIN IS
BC	 									!DBL WD, SO IS THE SRC
BC	 		)
BC	 		)
BC	 		AND (NOT .TPCNODE[A2IMMEDFLG])	!IF THE ARG UNDER THE TYPE-CNV
BC	 						! IS THE RIGHT HALF OF AN AOBJN VAR,
BC	 						! MUST LOAD IT
BC	 	END$;
BC	 
BC	 
BC	 
BC	 	%(***FOR OPRCLS NEGNOT***************************)%
BBINDC	 BIND
BNEGOPC	 	NEGOP=0,
BNOTOPC	 	NOTOP=1;
BC	 
BC	 	%(****FOR OPRCLS SPECOP (SPECIAL OPS INTRODUCED BY PHASE 2 SKEL)***)%
BBINDC	 BIND
BP2MULOC	 	P2MULOP=0,		!MULTIPLY BY A POWER OF 2
BP2DIVOC	 	P2DIVOP=1,		!DIVIDE BY A POWER OF 2
BP2PL1OC	 	P2PL1OP=2,		!MULTIPLY BY A POWER OF 2 PLUS 1
BSQROPC	 	SQROP=3,		!SQUARE (RAISE TO POWER OF 2)
BCUBOPC	 	CUBOP=4,		!CUBE (RAISE TO POWER OF 3)
BP4OPC	 	P4OP=5,			!RAISE TO POWER OF 4
BLISS  V. 1.0-2.12	5-JUN-73  20:33:54	P2S1	TABLES.BLI		PAGE 10-2

BEXPCIOC	 	EXPCIOP=6;		!RAISE TO A  CONSTANT INTEGER POWER
BC	 				! (NOT HANDLED IN RELEASE 1)
BC	 
BC	 
BC	 	%(***FOR OPRCLS STORECLS****************************)%
BBINDC	 BIND
BSTARVAC	 	STARVAL=0,		!STORE CONTENTS OF AN ARRAY ELEM
BSTARADC	 	STARADDR=1;		!STORE PTR TO AN ARRAY ELEMENT
BC	 
BC	 
BC	 	%(***FOR OPRCLS IOLSCLS (FOR IOLIST ELEMENTS)***)%
BBINDC	 BIND
BDATACAC	 	DATACALL=0,
BSLISTCC	 	SLISTCALL=1,
BIOLSTCC	 	IOLSTCALL=2,
BS1LISTC	 	S1LISTCALL=3,			!AN SLISTCALL DETECTED IN PHASE 2 SKEL -
BC	 					! MAY HAVE MORE THAN ONE ARRAYREF
BC	 					! (NOT IN RELEASE 1)
BELISTCC	 	ELISTCALL=4;			! NOT IN RELEASE 1
BC	 
BC	 
BC	 	%(***FOR OPRCLS INLINFN (FNS TO BE GENERATED IN LINE)****)%
BBINDC	 BIND
BABSFNC	 	ABSFN=0,
BIABSFNC	 	IABSFN=1,
BSIGNFNC	 	SIGNFN=2,
BDIMFNC	 	DIMFN=3,
BMODFNC	 	MODFN=4,
BMAXFNC	 	MAXFN=5,
BMINFNC	 	MINFN=6;
BC	 
BC	 	%(***MACRO TO DETERMINE FOR A GIVEN IN-LINE-FN WHETHER THE ARG SHOULD BE PUT
BC	 		INTO THE REG-FOR-COMPUTATION BEFORE THE VAL IS COMPUTED (FOR ABS,IABS
BC	 		AND SIGN, DO NOT WANT TO LOAD THE ARG IN ADVANCE) ****)%
BMACROILFINROPSPC	 	MACRO ILFINRFC(OPSP)=(OPSP GEQ DIMFN)$;
BC	 
BC	 
BC	 
BC	 
BC	 	%(****VALS FOR OPR1 FIELD FOR SOME OF THE OPERATORS*****)%
BBINDC	 BIND
BADDOPFOPR1CARITHMORADDOPC	 	ADDOPF=OPR1C(ARITHMETIC,ADDOP),
BSUBOPFOPR1CARITHMORSUBOPC	 	SUBOPF=OPR1C(ARITHMETIC,SUBOP),
BMULOPFOPR1CARITHMORMULOPC	 	MULOPF=OPR1C(ARITHMETIC,MULOP),
BDIVOPFOPR1CARITHMORDIVOPC	 	DIVOPF=OPR1C(ARITHMETIC,DIVOP),
BEXPONOOPR1CARITHMOREXPONOC	 	EXPONOPF=OPR1C(ARITHMETIC,EXPONOP),
BCONSTFOPR1CDATAOPORCONSTAC	 	CONSTFL=OPR1C(DATAOPR,CONSTANT),
BVARFLOPR1CDATAOPORVARIABC	 	VARFL=OPR1C(DATAOPR,VARIABLE),
BNEGFLOPR1CNEGNOTORNEGOPC	 	NEGFL=OPR1C(NEGNOT,NEGOP),
BMODFNFOPR1CINLINFORMODFNC	 	MODFNFL=OPR1C(INLINFN,MODFN),
BSTARVLOPR1CSTORECORSTARADC	 	STARVLFL=OPR1C(STORECLS,STARADDR),
BSLISTCOPR1CIOLSCLORSLISTCC	 	SLISTCLFL=OPR1C(IOLSCLS,SLISTCALL);
BC	 
BC	 
BBINDC	 BIND
BP2MULOOPR1CSPECOPORP2MULOC	 	P2MULOPF=OPR1C(SPECOP,P2MULOP),
BP2DIVOOPR1CSPECOPORP2DIVOC	 	P2DIVOPF=OPR1C(SPECOP,P2DIVOP),
BLISS  V. 1.0-2.12	5-JUN-73  20:33:56	P2S1	TABLES.BLI		PAGE 10-3

BP2PL1OOPR1CSPECOPORP2PL1OC	 	P2PL1OPF=OPR1C(SPECOP,P2PL1OP);
BBINDC	 BIND
BSQROPFOPR1CSPECOPORSQROPC	 	SQROPF=OPR1C(SPECOP,SQROP),
BCUBOPFOPR1CSPECOPORCUBOPC	 	CUBOPF=OPR1C(SPECOP,CUBOP),
BP4OPFOPR1CSPECOPORP4OPC	 	P4OPF=OPR1C(SPECOP,P4OP);
BBINDC	 BIND
BEXPCIFOPR1CSPECOPOREXPCIOC	 	EXPCIF=OPR1C(SPECOP,EXPCIOP);
BC	 
BC	 
BC	 	%(***VALUES OF OPERATOR FIELD FOR SOME OF THE OPERATORS***)%
BBINDREALCOOPERCREALORDATAOPORCONSTAC	 BIND	REALCONST=OPERC(REAL,DATAOPR,CONSTANT),
BINTCONOPERCINTEGEORDATAOPORCONSTAC	 	INTCONST=OPERC(INTEGER,DATAOPR,CONSTANT),
BDOUBLCOPERCDOUBLPORDATAOPORCONSTAC	 	DOUBLCONST=OPERC(DOUBLPREC,DATAOPR,CONSTANT),
BCPLXCOOPERCCOMPLEORDATAOPORCONSTAC	 	CPLXCONST=OPERC(COMPLEX,DATAOPR,CONSTANT),
BLITCONOPERCLITERAORDATAOPORCONSTAC	 	LITCONST=OPERC(LITERAL,DATAOPR,CONSTANT),
BINTVAROPERCINTEGEORDATAOPORVARIABC	 	INTVAR=OPERC(INTEGER,DATAOPR,VARIABLE),
BINDEXVOPERCINDEXORDATAOPORVARIABC	 	INDEXVAR=OPERC(INDEX,DATAOPR,VARIABLE);
BBINDINTDIVOPERCINTEGEORARITHMORDIVOPC	 BIND	INTDIVIDE=OPERC(INTEGER,ARITHMETIC,DIVOP);
BC	 
BBINDABSFNOOPERCREALORINLINFORABSFNC	 BIND	ABSFNOP=OPERC(REAL,INLINFN,ABSFN),
BIABSFNOPERCINTEGEORINLINFORIABSFNC	 	IABSFNOP=OPERC(INTEGER,INLINFN,IABSFN),
BSIGNFNOPERCREALORINLINFORSIGNFNC	 	SIGNFNOP=OPERC(REAL,INLINFN,SIGNFN),
BISIGNFOPERCINTEGEORINLINFORSIGNFNC	 	ISIGNFNOP=OPERC(INTEGER,INLINFN,SIGNFN),
BDIMFNOOPERCREALORINLINFORDIMFNC	 	DIMFNOP=OPERC(REAL,INLINFN,DIMFN),
BIDIMFNOPERCINTEGEORINLINFORDIMFNC	 	IDIMFNOP=OPERC(INTEGER,INLINFN,DIMFN),
BMODFNOOPERCINTEGEORINLINFORMODFNC	 	MODFNOP=OPERC(INTEGER,INLINFN,MODFN),
BMAXFNOOPERCINTEGEORINLINFORMAXFNC	 	MAXFNOP=OPERC(INTEGER,INLINFN,MAXFN),
BMINFNOOPERCINTEGEORINLINFORMINFNC	 	MINFNOP=OPERC(INTEGER,INLINFN,MINFN),
BAMAXFNOPERCREALORINLINFORMAXFNC	 	AMAXFNOP=OPERC(REAL,INLINFN,MAXFN),
BAMINFNOPERCREALORINLINFORMINFNC	 	AMINFNOP=OPERC(REAL,INLINFN,MINFN);
BC	 
BBINDCMPLXOOPERCCOMPLEORTYPECNORFROMREC	 BIND	CMPLXOP=OPERC(COMPLEX,TYPECNV,FROMREAL),
BDBLEOPOPERCDOUBLPORTYPECNORFROMREC	 	DBLEOP=OPERC(DOUBLPREC,TYPECNV,FROMREAL),
BDFLOATOPERCDOUBLPORTYPECNORFROMINC	 	DFLOATOP=OPERC(DOUBLPREC,TYPECNV,FROMINT),
BFLOATOOPERCREALORTYPECNORFROMINC	 	FLOATOP=OPERC(REAL,TYPECNV,FROMINT),
BIDINTOOPERCINTEGEORTYPECNORFROMDBC	 	IDINTOP=OPERC(INTEGER,TYPECNV,FROMDBLPRC),
BINTOPOPERCINTEGEORTYPECNORFROMREC	 	INTOP=OPERC(INTEGER,TYPECNV,FROMREAL),
BIFIXOPOPERCINTEGEORTYPECNORFROMREC	 	IFIXOP=OPERC(INTEGER,TYPECNV,FROMREAL),
BREALOPOPERCREALORTYPECNORFROMCMC	 	REALOP=OPERC(REAL,TYPECNV,FROMCMPLX),
BSNGLOPOPERCREALORTYPECNORFROMDBC	 	SNGLOP=OPERC(REAL,TYPECNV,FROMDBLPRC);
BC	 
BC	 
BBINDLTOPOPERCCONTROORRELATIORLC	 BIND	LTOP=OPERC(CONTROL,RELATIONAL,L),
BEQOPOPERCCONTROORRELATIOREC	 	EQOP=OPERC(CONTROL,RELATIONAL,E),
BLEOPOPERCCONTROORRELATIORLEC	 	LEOP=OPERC(CONTROL,RELATIONAL,LE),
BGEOPOPERCCONTROORRELATIORGEC	 	GEOP=OPERC(CONTROL,RELATIONAL,GE),
BNEOPOPERCCONTROORRELATIORNC	 	NEOP=OPERC(CONTROL,RELATIONAL,N),
BGTOPOPERCCONTROORRELATIORGC	 	GTOP=OPERC(CONTROL,RELATIONAL,G);
BC	 
BBINDFIXOPOPERCINTEGEORTYPECNORFROMREC	 BIND	FIXOP=OPERC(INTEGER,TYPECNV,FROMREAL);
BBINDIOLSTCOPERCORIOLSCLORIOLSTCC	 BIND	IOLSTCFL=OPERC(0,IOLSCLS,IOLSTCALL),
BDATACLOPERCORIOLSCLORDATACAC	 	DATACLFL=OPERC(0,IOLSCLS,DATACALL);
BC	 
BBINDDOSTATSTOPERSTATEMORDOIDC	 BIND	DOSTATEMENT=STOPERC(STATEMENT,DOID);
BBINDCONTSTSTOPERSTATEMORCONTIDC	 BIND	CONTSTATEMENT=STOPERC(STATEMENT,CONTID);
BC	 
BC	 	
BLISS  V. 1.0-2.12	5-JUN-73  20:34:00	P2S1	TABLES.BLI		PAGE 10-4

BC	 
BC	 
BC	 %(********VALUES FOR SPECIAL OPERATOR SUBFIELDS***********)%
BC	 
BC	 	%(****USED FOR OPRCLS BOOLEAN*****)%
BBINDC	 BIND
BANDORCC	 	ANDORCLS=0,		!VALUE OF BOOLCLS FOR AND/OR NODES
BANDOPFC	 	ANDOPF=0,		!VALUE OF BOPRFLG FOR AND/EQV NODES
BXOROROC	 	XOROROPF=1;		!VALUE OF BOPRFLG FOR OR/XOR NODES
BC	 
BC	 
BC	 
BC	 %(****************************************
BC	 	TO CHECK FOR VALUES THAT FIT IN SINGLE WD
BC	 ****************************************)%
BMACROSINGLWNODEC	 MACRO	SINGLWD(NODE)= NOT (.NODE[DBLFLG])$;
BC	 
BC	 
BC	 %(***************************************************************************
BC	 	TO TEST A CONSTANT NODE FOR BEING AN IMMEDIATE-SIZE CONSTANT
BC	 ***************************************************************************)%
BC	 
BC	 
BMACROIMMEDCNODEC	 MACRO IMMEDCNST(NODE)=
BC	 BEGIN
BC	 	EXTERNAL KDPRL;		!THESE GLOBALS ARE USED IN CALLING THE MACRO MODULE
BC	 	EXTERNAL C1H,C1L,C2H,COPRIX;	! THAT ROUNDS REAL NUMBERS
BC	 	EXTERNAL CNSTCM;
BC	 
BC	 	CASE .NODE[VALTP1] OF SET
BC	 	%(***INTEGER CONSTANTS ARE IMMED SIZE IFF ABSOLUTE VAL IS LESS THAN 777777***)%
BC	 	(ABS(.NODE[CONST2]) LEQ #777777);
BC	 	%(***REAL CONSTANTS ARE IMMED SIZE IFF THE RIGHT HALF WD IS
BC	 		ALL 0'S*******)%
BC	 	BEGIN
BC	 		%(***BECAUSE WE KEEP 2 WDS OF PRECISION THRUOUT COMPILE TIME,
BC	 			WE MUST EXAMINE WHAT THE ROUNDED CONSTANT WILL BE***)%
BC	 		C1H_.NODE[CONST1]; C1L_.NODE[CONST2]; COPRIX_KDPRL;	!ROUND THE NUMBER IN C1H-C1L
BC	 		CNSTCM();						! LEAVING THE RESULT IN C2H
BC	 		(.C2H AND #777777) EQL 0
BC	 	END;
BC	 	%(***DOUBLE-PREC CONSTANTS CAN NOT BE TREATED IMMED MODE***)%
BC	 	FALSE;
BC	 	%(***COMPLEX CONSTANTS CAN BE TREATED IMMED MODE IFF THE REAL PART IS
BC	 		IMMED SIZE AND THE IMAGINARY PART IS 0***)%
BC	 	((.NODE[CONST1] AND #777777) EQL 0) AND (.NODE[CONST2] EQL 0)
BC	 	TES
BC	 END$;
BC	 
BC	 %(***TO TEST FOR A CONSTANT NEGATIVE***********)%
BMACRONEGATICNNODEC	 MACRO NEGATIVC(CNNODE)=
BC	 	BEGIN
BC	 		IF .CNNODE[VALTP1] EQL INTEG1
BC	 		THEN
BC	 		.CNNODE[CONST2] LSS 0
BC	 		ELSE
BC	 		.CNNODE[CONST1] LSS 0
BLISS  V. 1.0-2.12	5-JUN-73  20:34:01	P2S1	TABLES.BLI		PAGE 10-5

BC	 	END$;
BC	 
BC	 
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:01	P2S1	TABLES.BLI		PAGE 11-1

BC	 
BC	 
BC	 %(*****************OPCODE FIELDS USED EXPLICITLY***************************)%
BBINDC	 BIND
BJRSTOCC	 	JRSTOC=#254^27,
BJUMPOCC	 	JUMPOC=#320^27,
BSKIPOCC	 	SKIPOC=#330^27,
BSKIPGEC	 	SKIPGEOC=#335^27;
BBINDC	 BIND
BINDBITC	 	INDBIT=1^22;		!INDIRECT BIT
BC	 
BBINDC	 BIND	
BADDBOCC	 	ADDBOCD=#273,
BADDIOCC	 	ADDIOCD=#271,
BADDMOCC	 	ADDMOCD=#272,
BAOJAOCC	 	AOJAOCD=#344,
BAOSOCDC	 	AOSOCD=#350,
BASHOCDC	 	ASHOCD=#240,
BCAIOCDC	 	CAIOCD=#300,
BCAMOCDC	 	CAMOCD=#310,
BDMOVEOC	 	DMOVEOCD=#120,
BDMOVEMC	 	DMOVEMOCD=#124,
BFADRBOC	 	FADRBOCD=#147,
BFADRMOC	 	FADRMOCD=#146,
BFDVRMOC	 	FDVRMOCD=#176,
BFIXOCDC	 	FIXOCD=#122,
BFLTROCC	 	FLTROCD=#127,
BFSCOCDC	 	FSCOCD=#132,
BHRLZIOC	 	HRLZIOCD=#515,
BIDIVMOC	 	IDIVMOCD=#232,
BIMULMOC	 	IMULMOCD=#222,
BJRSTOCC	 	JRSTOCD=#254,
BJUMPOCC	 	JUMPOCD=#320,
BJUMPGEC	 	JUMPGEOCD=#325,
BJUMPLOC	 	JUMPLOCD=#321,
BMOVEIOC	 	MOVEIOCD=#201,
BMOVEOCC	 	MOVEOCD=#200,
BMOVEMOC	 	MOVEMOCD=#202,
BMOVNIOC	 	MOVNIOCD=#211,
BMOVNMOC	 	MOVNMOCD=#212,
BMOVNSOC	 	MOVNSOCD=#213,
BMOVSIOC	 	MOVSIOCD=#205,
BSETCAMC	 	SETCAMOCD=#452,
BSETCMBC	 	SETCMBOCD=#463,
BSETZBOC	 	SETZBOCD=#403,
BSETOBOC	 	SETOBOCD=#477,
BSKIPOCC	 	SKIPOCD=#330,
BSOJAOCC	 	SOJAOCD=#364,
BSOSOCDC	 	SOSOCD=#370,
BSUBIOCC	 	SUBIOCD=#275,
BSUBMOCC	 	SUBMOCD=#276;
BLISS  V. 1.0-2.12	5-JUN-73  20:34:02	P2S1	TABLES.BLI		PAGE 12-1

BC	 
BC	 %(***************************************************************************	
BC	 	DEFINE THE FIELDS OF THE NODES USED FOR IOLISTS (OPRCLS=IOLSCLS)
BC	 ***************************************************************************)%
BC	 
BC	 	%(***FIELDS IN ALL IOLSCLS NODES***)%
BMACROC	 MACRO
BIOLSTLC	 	IOLSTLBL=0,0,LEFT$;
BC	 	%(***FIELDS IN DATACALL NODES***)%
BMACROC	 MACRO
BDCALLEC	 	DCALLELEM=0,1,LEFT$;
BC	 
BC	 	%(***FIELDS IN SLISTCALL NODES***)%
BMACROC	 MACRO
BSCALLEC	 	SCALLELEM=0,1,LEFT$,
BSCALLCC	 	SCALLCT=0,2,RIGHT$;
BC	 
BC	 	%(****NOTE THAT FOR IOLSTCALL NODES, S1LISTCALL NODES, AND ELISTCALL NODES,
BC	 		THE 3RD WORD (0,2,LEFT AND 0,2,RIGHT) IS USED FOR SRCCMPLX AND
BC	 		SRCCOMNSUB *****)%
BC	 
BC	 
BC	 
BC	 	%(***FIELDS IN IOLSTCALL NODES***)%
BMACROC	 MACRO
BIOLSTPC	 	IOLSTPTR=0,1,LEFT$;
BC	 
BC	 	%(***FIELDS IN S1LISTCALL AND ELISTCALL NODES***)%
BMACROC	 MACRO
BECNTPTC	 	ECNTPTR=0,3,LEFT$,		!PTR TO EXPRESSION FOR NUMBER OF ELEMS
BC	 					! OF EACH ARRAY TO BE PROCESSED
BC	 
BELSTPTC	 	ELSTPTR=0,1,LEFT$;
BC	 
BC	 	%(***FIELDS IN S1LIST NODES***)%
BMACROC	 MACRO
BS1INCRC	 	S1INCR=0,3,RIGHT$;
BC	 
BC	 	%(***FIELDS OF THE ELEMENTS OF THE LINKED LIST UNDER AN E2LISTCALL***)%
BMACROC	 MACRO
BE2INCRC	 	E2INCR=0,1,LEFT$,		!PTR TO EXPRESSION FOR INCREMENT TO BE
BC	 					! USED FOR THIS ARRAY
BE2ARREC	 	E2ARREFPTR=0,1,RIGHT$;		!PTR TO ARRAYREF NODE
BC	 
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:03	P2S1	TABLES.BLI		PAGE 13-1

BC	 
BC	 %(***************************************************************************
BC	 	DEFINE AN OBJECT-CODE WORD AS A STRUCTURE.
BC	 	DEFINE THE FIELDS OF THAT WORD FOR FOROTS ARG BLOCKS.
BC	 ***************************************************************************)%
BC	 
BSTRUCTOBJECTOBJECTWDWDPOSSIZEC	 STRUCTURE OBJECTCODE[WD,POS,SIZE]=
BOBJECTWDPOSSIZEC	    (.OBJECTCODE+.WD)<.POS,.SIZE> ;
BC	 
BC	 
BC	 	%(***DEFINE THE FIELDS USED FOR FOROTS ARG BLOCKS***)%
BMACROC	 MACRO
BOTSWHOC	 	OTSWHOLE=0,0,36$,
BOTSCNTC	 	OTSCNT=0,27,9$,
BOTSTYPC	 	OTSTYPE=0,23,4$,		!VALUE-TYPE ALWAYS GOES IN BITS 9-12
BOTSINXC	 	OTSINX=0,18,4$,		!INDEX FIELD
BOTSINDC	 	OTSIND=0,22,1$,		!INDIRECT BIT
BOTSADDC	 	OTSADDR=0,0,18$,		!ADDRESS FIELD
BOTSUNIC	 	OTSUNIT=0,0,18$,		!UNIT NUMBER ALWAYS GOES INTO BITS 18-35
BOTSFORC	 	OTSFORM=0,0,18$,		!PTR TO FORMAT 
BOTSARRC	 	OTSARRFMTFLG=0,35,1$,		!FLAG FOR "FORMAT STMNT IS AN ARRAY"
BOTSFSIC	 	OTSFSIZ=0,18,17$,	!FORMAT SIZE
BOTSIDNC	 	OTSIDN=0,27,9$,		!FOR AN IOLIST ELEMENT - IDENTIFIES THE CLASS OF ELEM
BOTSMEMC	 	OTSMEMRF=0,0,23$;		!THE 23 BITS DESCRIBING MEMORY REFERENCE
BC	 
BC	 
BC	 	%(***DEFINE VALUES FOR IDN FIELD FOR IOLIST ELEMENTS***)%
BBINDC	 BIND
BOTSZERC	 	OTSZER=0,
BOTSDATC	 	OTSDATA=1,
BOTSSLIC	 	OTSSLIST=2,
BOTSFINC	 	OTSFIN=4,
BOTSELIC	 	OTSELIST=3;
BC	 
BC	 
BBINDC	 BIND
BOTSZEROTSZERC	 	OTSZERWD=OTSZER^27,
BOTSFINOTSFINC	 	OTSFINWD=OTSFIN^27;
BC	 
BC	 
BC	 	%(***DEFINE ARG TYPE CODES THAT ARE USED FOR FOROTS CALLS***)%
BBINDADDRTYC	 BIND	ADDRTYPE=#7,		!TYPE CODE FOR A LABEL
BIMMEDTC	 	IMMEDTYPE=0;		!TYPE CODE INDICATING TO PICK UP ARG IMMED MODE
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:05	P2S1	TABLES.BLI		PAGE 14-1

BC	 
BC	 %(***************************************************************************
BC	 	SPECIFIC VALUES FOR FIELDS IN AN ARITHMETIC-IF NODE
BC	 ***************************************************************************)%
BC	 
BC	 	%(***VALUES FOR AIFLBEQV FIELD****)%
BBINDC	 BIND
BNOLBEQC	 	NOLBEQV=0,
BLELBEQC	 	LELBEQV=1,		!LSS LABEL SAME AS EQL LABEL
BLGLBEQC	 	LGLBEQV=2,		!LSS LABEL SAME AS GTR LABEL
BGELBEQC	 	GELBEQV=3;		!GTR LABEL SAME AS EQL LABEL
BC	 
BC	 	%(***VALUES FOR AIFLBNXT FIELD*******)%
BBINDC	 BIND
BNOLBNXC	 	NOLBNXT=0,
BLLBNXTC	 	LLBNXT=1,		!LSS LABEL IS NEXT STMNT
BELBNXTC	 	ELBNXT=2,		!EQL LABEL IS NEXT STMNT
BGLBNXTC	 	GLBNXT=3;		!GTR LABEL IS NEXT STMNT
BC	 
BC	 
BC	 	%(***WHEN SWAP THE GTR AND LESS LABELS (BECAUSE MULTIPLY BY -1), USE THE
BC	 		FOLLOWING MACRO TO ADJUST THE "AIFLBNXT" AND "AIFLBEQV"  FIELDS***)%
BMACROSWPAIFSTMNTC	 	MACRO SWPAIFFLGS(STMNT)=
BC	 	BEGIN
BC	 		IF .STMNT[AIFLBNXT]		!IF LAST BIT OF AIFLBNXT IS ON
BC	 		THEN
BC	 		STMNT[AIFLBNXT]_.STMNT[AIFLBNXT] XOR #2;	!THEN COMPLEMENT 1ST BIT
BC	 		IF .STMNT[AIFLBEQV]				!IF LAST BIT OF AIFLBEQV ON
BC	 		THEN
BC	 		STMNT[AIFLBEQV]_.STMNT[AIFLBEQV] XOR #2;	!THEN COMPLEMENT 1ST BIT
BC	 	END$;
BLISS  V. 1.0-2.12	5-JUN-73  20:34:06	P2S1	TABLES.BLI		PAGE 15-1

BC	 
BC	 
BC	 %(***************************************************************************
BC	 	DEFINE THE STRUCTURE OF AN ARGUMENT LIST.
BC	 	CERTAIN FIXED FIELDS ON THE LIST WILL BE REFERENCED SIMPLY BY NAME.
BC	 	FIELDS CORRESPONDING TO THE NTH ARG WILL BE REFERENCED BY [N,NAME]
BC	 	NOTE THAT THE FIRST ARG HAS N=1 (NOT!!!! 0)
BC	 	NOTE THAT THE COUNT FIELD OF THE LIST WILL BE POSITIVE AND EQUAL
BC	 	TO THE NUMBER OF ARGS.
BC	 ***************************************************************************)%
BC	 
BSTRUCTARGUMEARGUMEARGINDARGINDWDPOSSIZEC	 STRUCTURE ARGUMENTLIST[ARGINDEX,WD,POS,SIZE]=
BARGUMEARGINDWDPOSSIZEC	 	(@.ARGUMENTLIST+2+(.ARGINDEX-1)+.WD)<.POS,.SIZE>;
BC	 
BC	 
BC	 	%(***DEFINE THE FIXED FIELDS THAT OCCUR AT THE START OF EVERY ARGUMENT LIST - 
BC	 		DEFINE ALL THESE FIELDS IN TERMS OF A NEGATIVE NUMBER OF WDS FROM THE
BC	 		ENTRY FOR THE FIRST ARGUMENT (HENCE HAVE THE ARGINDEX FIELD=1) ***)%
BMACROC	 MACRO
BARGLABC	 	ARGLABEL=1,-2,LEFT$,
BARGLINC	 	ARGLINK=1,-2,RIGHT$,
BARGCOUC	 	ARGCOUNT=1,-1,RIGHT$;
BC	 
BC	 	%(***DEFINE THE FIELDS THAT ARE REPEATED FOR EACH ARGUMENT. 
BC	 		WILL ALWAYS REFERENCE THESE FIELDS BY A REF OF THE FORM:
BC	 			ALIST[N,FIELDNAME]
BC	 		WHERE N IS THE NUMBER OF THE ARGUMENT DESIRED
BC	 	*********)%
BMACROC	 MACRO
BARGNPTC	 	ARGNPTR=0,RIGHT$,		!PTR TO THE EXPRESSION NODE FOR THE ARG
BAFLGFLC	 	AFLGFLD=0,LEFT$,		!FLAGS
BAVALFLC	 	AVALFLG=0,35,1$;		!FLAG IS SET IF ARG IS A DATA ITEM OR
BC	 					! COMMON SUBEXPR
BC	 
BC	 
BC	 	%(***DEFINE THE FOLLOWING FIELD SO THAT PHASE 1 CAN REFERENCE THE AVALFLG
BC	 		BY USING A "BASE" STRUCTURE ON A GIVEN WORD*****)%
BMACROP1AVALC	 MACRO	P1AVALFLG=0,0,35,1$;
BC	 
BC	 
BC	 	%(***DEFINE MACRO THAT DESCRIBES NUMBER OF WDS NECESSARY IN AN ARGLIST THAT
BC	 		INCLUDES "ACT" NUMBER OF ARGS***)%
BMACROARGLSTACTC	 MACRO	ARGLSTSIZE(ACT)=(2+ACT)$;
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:09	P2S1	TABLES.BLI		PAGE 16-1

BC	 
BC	 
BC	 %(***************************************************************************
BC	 	DEFINE THE STRUCTURE THAT WILL BE MAPPED ON THE LIBRARY FN ATTRIBUTE
BC	 	TABLE.
BC	 	FOR EACH LIBRARY-FN WILL HAVE A "LIBRARY-FN-INDEX" THAT INDICATES ITS
BC	 	POSITION IN THIS TABLE. THE FIRST ENTRY HAS INDEX =0.
BC	 ***************************************************************************)%
BSTRUCTLIBATTLIBATTFNINDEFNINDEWDPOSSIZECODEARGTYPC	 STRUCTURE LIBATTSTR[FNINDEX,WD,POS,SIZE,CODE,ARGTYP1]=
BC	 	%(***FOR MOST FIELDS BOTH "CODE" AND "ARGTYP1" ARE 0***)%
BIFCODEEQLC	 	IF .CODE EQL 0
BTHENC	 	THEN
BLIBATTFNINDEWDPOSSIZEC	 	(.LIBATTSTR+2*.FNINDEX+.WD)<.POS,.SIZE>
BC	 
BC	 	%(***FOR GENERIC FUNCTIONS ONLY - TO PICK UP THE NAME OF THE ACTUAL
BC	 		FUNCTION TO USE FOR A GIVEN ARG-TYPE.
BC	 		HAVE "CODE" EQUAL TO 1, "ARGTYP1" EQUAL TO THE VALTP1
BC	 		FIELD OF THE ARGUMENT.
BC	 	**********)%
BELSEC	 	ELSE
BC	 	%(***GO INDIRECT THRU  THE "ATTGENPTR" FIELD - ADD "ARGTYP1" TO
BC	 		THE PTR IN THAT FIELD TO GET A PTR TO THE WD THAT
BC	 		INDICATES THE ACTUAL FN TO USE (THAT WD WILL ITSELF CONTAIN
BC	 		A PTR BACK TO A FUNCTION-TABLE ENTRY)
BC	 	*******)%
BLIBATTFNINDEWDPOSSIZEARGTYPC	 	(.(.LIBATTSTR+2*.FNINDEX+.WD)<.POS,.SIZE> + .ARGTYP1)<0,36>;
BC	 
BC	 	%(***DEFINE MACROS THAT DESCRIBE THE FIELDS FOR A GIVEN FUNCTION INDEX***)%
BMACROC	 MACRO
BATTFNAC	 	ATTFNATTRIB=0,0,36,0,0$,	!THE FIRST WORD OF THE ENTRY WILL BE
BC	 					! COPIED INTO THE SYMBOL TABLE ENTRY
BC	 					! FOR THE FUNCTION NAME (INTO THE IDFNATTRIB FIELD)
BATTINLC	 	ATTINLINFLG=0,35,1,0,0$,	!BIT 0 OF 1ST WD IS FLAG FOR IN-LINE-FN
BATTGENC	 	ATTGENERFLG=0,33,1,0,0$,	! GENERIC FN FLAG
BATTARGC	 	ATTARGTYP=0,28,5,0,0$,	! VALTYPE FOR EXPECTED ARG
BATTRESC	 	ATTRESTYPE=0,23,5,0,0$,	! VALTYPE OF RESULT
BATTARGC	 	ATTARGCT=0,18,5,0,0$,	! NUMBER OF ARGS EXPECTED
BATTNEWC	 	ATTNEWOPR=0,0,18,0,0$,	!OPERATOR TO BE SUBSTITUTED FOR FN CALL
BC	 				! IF THIS FN IS TO BE GENERATED IN LINE
BATTGENC	 	ATTGENPTR=1,0,18,0,0$,	!FOR GENERIC FNS ONLY - PTR TO SUBTABLE
BC	 				! DESCRIBING WHICH FNS TO USE FOR EACH ARG TYPE
BATTACTC	 	ATTACTFN=1,0,18,1$;	!FOR GENERIC FNS ONLY - TO GET A PTR TO
BC	 				! THE ACTUAL FN TO USE WILL GO INDIRECT THRU
BC	 				! THE "ATTGENPTR" FIELD AND THEN ADD ON THE TYPE OF THE ARG
BC	 
BC	 
BBINDILGARGC	 	BIND	ILGARGTYPE=-1;	!FOR GENERIC FNS - IF A GIVEN ARG TYPE IS ILLEGAL
BC	 				! THE "ATTACTFN" FIELD FOR THAT TYPE WILL CONTAIN THIS CODE
BBINDVARGCTC	 	BIND	VARGCTFLG=#37;	!FUNCTIONS THAT CAN TAKE AN ARBITRARY NUMBER OF
BC	 				! ARGS (EG MAX,MIN) HAVE THE "ATTARGCT" SET TO THIS VAL
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:11	P2S1	TABLES.BLI		PAGE 17-1

BC	 
BC	 
BC	 %(***************************************************************************
BC	 	DEFINE THE STRUCTURE TO BE MAPPED ON THE LIST OF ARG-CODES
BC	 	AND CORRESPONDING  VALUES THAT OCCURS UNDER AN OPEN STATEMENT
BC	 ***************************************************************************)%
BC	 
BSTRUCTOPENLIOPENLIARGINDARGINDWDPOSSIZEC	 STRUCTURE OPENLIST[ARGINDEX,WD,POS,SIZE]=
BOPENLIARGINDWDPOSSIZEC	 	(@.OPENLIST+.ARGINDEX+.WD)<.POS,.SIZE>;
BC	 
BC	 
BC	 	%(***DEFINE THE FIELDS USED FOR A GIVEN INDEX***)%
BMACROOPENLCC	 MACRO	OPENLCODE=0,LEFT$,	!CODE FOR FOROTS FOR THIS ARG
BOPENLPC	 	OPENLPTR=0,RIGHT$;	!PTR TO THE CONSTANT TABLE OR SYMBOLTABLE
BC	 				! ENTRY FOR THE VALUE FOR THIS ARG TO FOROTS
BC	 
BC	 	%(***DEFINE VALUES FOR OPENLCODE***)%
BBINDOPNCDIC	 BIND	OPNCDIALOG=01,		!DIALOG
BOPNCACC	 	OPNCACCESS=02,		!ACCESS
BOPNCDEC	 	OPNCDEVICE=03,		!DEVICE
BOPNCBUC	 	OPNCBUFCOUNT=04,	!BUFFER COUNT
BOPNCBLC	 	OPNCBLOCKSIZE=05,	!BLOCK SIZE
BOPNCFIC	 	OPNCFILENAME=06,	!FILE NAME
BOPNCPRC	 	OPNCPROTECTION=07,	!PROTECTION
BOPNCDIC	 	OPNCDIRECTORY=#10,	!DIRECTORY
BOPNCLIC	 	OPNCLIMIT=#11,		!LIMIT
BOPNCMOC	 	OPNCMODE=#12,		!MODE
BOPNCFIC	 	OPNCFILESIZE=#13,	!FILE SIZE
BOPNCREC	 	OPNCRECORDSIZE=#14,	!RECORD SIZE
BOPNCDIC	 	OPNCDISPOSE=#15,	!DISPOSE
BOPNCVEC	 	OPNCVERSION=#16,	!VERSION
BOPNCREC	 	OPNCREELS=#17,		!REELS
BOPNCMOC	 	OPNCMOUNT=#20,		!MOUNT
BOPNCERC	 	OPNCERROR=#21,		!ERROR
BOPNCASC	 	OPNCASSOCIATE=#22;	!ASSOCIATE
BLISS  V. 1.0-2.12	5-JUN-73  20:34:12	P2S1	TABLES.BLI		PAGE 18-1

BC	 
BC	 %(***************************************************************************
BC	 	DEFINE THE STRUCTURE OF THE SYMBOL TABLE
BC	 ***************************************************************************)%
BSTRUCTSYMTABSYMTABDMYDMYWDPOSSIZEC	 STRUCTURE SYMTABENTRY[DMY,WD,POS,SIZE]=
BSYMTABWDPOSSIZEC	 	(@.SYMTABENTRY+.WD)<.POS,.SIZE>;
BC	 
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:12	P2S1	TABLES.BLI		PAGE 19-1

BC	 
BC	 %(***************************************************************************
BC	 	DEFINE THE STRUCTURE OF THE DIMENSION TABLE
BC	 ***************************************************************************)%
BSTRUCTDIMENTDIMENTDMYDMYWDPOSSIZEC	 STRUCTURE DIMENTRY[DMY,WD,POS,SIZE]=
BDIMENTWDPOSSIZEC	 	(@.DIMENTRY+.WD)<.POS,.SIZE>;
BMACRODIMNUMC	 MACRO DIMNUM=0,0,18,16$;			!NUMBER OF DIMENSIONS
BMACROADJDIMC	 MACRO	ADJDIMFLG=0,0,35,1$;			!FLAG FOR ADJUSTABLY DIMENSIONED
BMACROARASIZC	 MACRO 	ARASIZ=0,0,RIGHT$;			!NUMBER OF WDS IN THE ARRAY
BC	 						!PTR TO A CONSTANT TABLE ENTRY UNLESS
BC	 						! ARRAY IS ADJ DIMENSIONED,
BC	 						! IN WHICH CASE, HAVE PTR TO A TMP
BMACROARAOFFC	 MACRO	ARAOFFSET=0,1,LEFT$;			!VALUE OF OFFSET FOR THIS
BC	 						! ARRAY IF DIMENSIONS ARE
BC	 						! CONSTANT; POINTER TO LOC
BC	 						! IN WHICH THE OFFSET WILL
BC	 						! BE STORED IF DIMENSIONS
BC	 						! ARE VARIABLE
BMACROARADDRC	 MACRO	ARADDRVAR=0,1,RIGHT$;		!FOR FORMAL ARRAYS THAT ARE NOT ADJUSTABLY
BC	 						! DIMENSIONED, THIS FIELD POINTS 
BC	 						! TO A "PSEUDO" SYMBOL TABLE ENTRY
BC	 						! FOR THE ARRAY NAME WITH THE TYPE
BC	 						! FIELD SET TO INTEGER. IT IS THIS SYMBOL
BC	 						! THAT IS USED IN THE ADDRESS CALC
BMACRODIMENSXC	 MACRO	DIMENS(X)=0,2+2*X,FULL$,		!DIMENSIONS FOR THE XTH DIMENSION
BDIMENLXC	 	DIMENL(X)=0,2+2*X,LEFT$,		!LOWER BOUND OF DIMENSION X
BDIMENUXC	 	DIMENU(X)=0,2+2*X,RIGHT$,		!UPPER BOUND OF DIMENSION X
BDVARLBXC	 	DVARLBFLG(X)=0,3+2*X,34,1$,		!FLAG FOR LOWER BOUND A  VARIABLE
BDVARUBXC	 	DVARUBFLG(X)=0,3+2*X,33,1$,		! FOR UPPER BOUND A VARIABLE
BDVARFAXC	 	DVARFACTFLG(X)=0,3+2*X,35,1$,		! FOR FACTOR A VARIABLE
BDFACTOXC	 	DFACTOR(X)=0,3+2*X,RIGHT$;		!FACTOR THAT SS FOR THIS
BC	 						! DIMENSION IS MULTIPLIED BY
BC	 						! THIS IS A PTR TO A CONSTANT TABLE ENTRY
BC	 						! IF PRECEEDING DIMENSIONS WERE CONSTANT,
BC	 						! A PTR TO A SYMBOL TABLE ENTRY FOR A
BC	 						! VAR IN WHICH THE VAL IS STORED IF VARIABLE
BMACROFIRSTDC	 MACRO FIRSTDIM=0,2,WHOLE$;
BC	 
BC	 	%(***THE SUBENTRY FOR A GIVEN DIMENSION***)%
BSTRUCTDIMSUBDIMSUBWDWDPOSSIZEC	 STRUCTURE DIMSUBENTRY[WD,POS,SIZE]=
BDIMSUBWDPOSSIZEC	 	(@.DIMSUBENTRY+.WD)<.POS,.SIZE>;
BC	 
BMACROC	 MACRO
BDIMLBC	 	DIMLB=0,LEFT$,
BDIMUBC	 	DIMUB=0,RIGHT$,
BVARLBFC	 	VARLBFLG=1,34,1$,			!FLAG FOR "LOWER BOUND ON THIS DIMENSION
BC	 						! A VARIABLE
BVARUBFC	 	VARUBFLG=1,33,1$,			!UPPER BOUND A VARIABLE
BVARFACC	 	VARFACTFLG=1,35,1$;			!FACTOR FOR THIS DIMENSION A VARIABLE
BMACRODIMFACC	 MACRO	DIMFACTOR=1,RIGHT$;		!FACTOR TO MULTIPLY SS OF THIS DIMENSION
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:14	P2S1	TABLES.BLI		PAGE 20-1

BC	 
BC	 
BC	 
BC	 %(*********
BC	 	DEFINE VALUES OF LABEL TABLE FIELDS USED FOR PEEPHOLING
BC	 **********)%
BC	 
BC	 	%(***VALUES FOR SNSTATUS FIELD***)%
BBINDOUTPBUC	 BIND	OUTPBUFF=2,			!LABEL IS OUT OF THE PEEPHOLE BUFFER
BINPBUFC	 	INPBUFF=1,			!LABEL IS STILL IN THE PEEPHOLE BUFFER
BUNRESOC	 	UNRESOLVED=0;			!LABEL IS UNRESOLVED
BBINDLBTBENC	 BIND	LBTBENDMK=0;				!VALUE OF NXTLAB FIELD
BC	 						! FOR LAST LINK
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:15	P2S1	TABLES.BLI		PAGE 21-1

BC	 
BC	 %(**************
BC	 	DEFINE STRUCTURE FOR PEEPHOLE BUFFER
BC	 ****************)%
BC	 
BC	 	%(***SIZE OF PEEPHOLE BUFFER ENTRIES****)%
BBINDPBFENTC	 BIND PBFENTSIZE=3;			!NUMBER OF WORDS IN EACH PEEPHOLE BUFFER ENTRY
BBINDPBFSIZPBFENTC	 BIND PBFSIZE=25*PBFENTSIZE + 2;		!NUMBER OF WORDS IN THE PEEPHOLE BUFFER
BC	 					! (KEEP 1 WD AFTER THE LAST ENTRY TO HOLD
BC	 					! A POSSIBLE LABEL AND A POSSIBLE ISN)
BC	 
BC	 
BC	 	%(****STRUCTURE FOR LOOKING AT A PEEPHOLE*******)%
BC	 	%(*******THE ARG INST INDICATES WHICH INSTRUCTION OF THE PEEPHOLE***)%
BSTRUCTPEEPHOPEEPHOINSTINSTWDPOSSIZEC	 STRUCTURE	PEEPHOLE[INST,WD,POS,SIZE]=
BPEEPHOPBFENTINSTWDPOSSIZEC	 	(@.PEEPHOLE + PBFENTSIZE*.INST +.WD)<.POS,.SIZE>;
BC	 
BC	 
BC	 	%(****STRUCTURE FOR A PEEPHOLE BUFFER ENTRY***)%
BSTRUCTPEEPFRPEEPFRWDWDPOSSIZEC	 STRUCTURE PEEPFRAME[WD,POS,SIZE]=
BPEEPFRWDPOSSIZEC	 	(.PEEPFRAME+.WD)<.POS,.SIZE>;
BC	 
BC	 	%(***STRUCTURE FOR A PTR TO  A PEEPHOLE BUFFER ENTRY*****)%
BSTRUCTPPEEPFPPEEPFWDWDPOSSIZEC	 STRUCTURE PPEEPFRAME[WD,POS,SIZE]=
BPPEEPFWDPOSSIZEC	 	(@.PPEEPFRAME+.WD)<.POS,.SIZE>;
BC	 
BC	 
BC	 %(*****DEFINE FIELDS FOR PEEPHOLE BUFFER FRAME*****)%
BMACROPBFISNC	 MACRO	PBFISN=0,WHOLE$,		!ISN FOR STMNT BEGUN BY THIS INSTR
BC	 					! -1 FOR INSTRS THAT DO NOT START STMNTS
BPBFLABC	 	 PBFLABEL=1,LEFT$,			!PTR TO LABEL TABLE ENTRY FOR THE 1ST
BC	 						!  LABEL ASSOCIATED WITH THIS
BC	 						! LOC
BPBFSYMC	 	PBFSYMPTR=1,RIGHT$,			!0 IF ADDR FIELD IS A LABEL
BC	 						!1 IF ADDR FIELD HAS NO SYMBOLIC REPR
BC	 						!2 IF ADDR FIED IS A PTR TO THE SIXBIT
BC	 						! FOR AN IMPLICITLY CALLED FUNCTION
BC	 						!3 IF ADDR IS A PTR TO A SYMBOL TABLE ENTRY
BC	 						! FOR AN EXPLICITLY CALLED FN
BC	 						! OTHERWISE A PTR TO THE SYMBOL TABLE,CONSTANT
BC	 						! TABLE OR TEMP TABLE ENTRY FOR THIS ADDR FIELD
BPBFINSC	 	PBFINSTR=2,WHOLE$,
BPBFADDC	 	PBFADDR=2,RIGHT$,		!ADDRESS FIELD OF THE INSTR
BPBFOPCC	 	PBFOPCOD=2,27,9$,		! OP-CODE
BPBFOPKC	 	PBFOPKEY=2,27,5$,		! LAST 5 BITS OF OPCODE, USED AS
BC	 					! KEY IN PEEPHOLE OPTIMIZER
BPBFREGC	 	PBFREG=2,23,4$,			!REG FIELD
BPBFINDC	 	PBFINDEX=2,18,4$,		!INDEX AND INDIRECT FIELDS
BPBFMEMC	 	PBFMEMREF=2,0,23$;		!ADDRESS,INDIRECT, AND INDEX FIELDS
BBINDNOLABEC	 BIND	NOLABEL=0;				!FLAG FOR "NO LABEL YET ASSOCIATED
BC	 						! WITH THIS LOC"
BBINDNOISNC	 BIND	NOISN=-1;		!CODE FOR "NO ISN ASSOCIATED WITH THIS INSTR"
BC	 				! (IE THE INSTR IS IN THE MIDDLE OF A STMNT)
BC	 
BC	 %(*******SPECIAL VALS FOR PBFSYMPTR FIELD*******)%
BBINDC	 BIND
BPBFLABC	 	PBFLABREF=0,			!ADDRESS FIELD IS A LABEL, RH IS AN INSTRUCTION
BLISS  V. 1.0-2.12	5-JUN-73  20:34:16	P2S1	TABLES.BLI		PAGE 21-2

BPBFNOSC	 	PBFNOSYM=1,			!ADDRESS FIELD IS AN OCTAL CONSTANT, RH IS AN INSTR
BPBFIMFC	 	PBFIMFN=2,			!ADDR FIELD IS A PTR TO AN IMPLICITLY CALLED FN
BPBFEXFC	 	PBFEXFN=3,			!ADDR FIELD IS A PTR TO AN EXPLICITLY CALLED FN
BPBF2LAC	 	PBF2LABREF=4,			!BOTH HALVES OF WD ARE PTRS TO LABEL TABLE
BC	 					! ENTRIES
BPBF2NOC	 	PBF2NOSYM=5,			!BOTH HALVES OF WD ARE OCTAL CONSTANTS WITH
BC	 					! NO SYMBOLIC REPRESENTATION
BPBFFORC	 	PBFFORMAT=6,			!RIGHT HALF WORD IS FORMAT ADDRESS
BPBFLLAC	 	PBFLLABREF=7,			!LEFT HALF IS A LABEL REFERENCE
BC	 					!USED PRIMARILY FOR ARGUMENT BLOCKS TO
BC	 					!FOROTS FOR THE END=,ERR= WORD
BPBFENTC	 	PBFENTRY=8;			!FOR A GLOBAL ENTRY (AS SUBROUTINE
BC	 					!OR ENTRY NAME).
BC	 
BC	 
BBINDPBFCODC	 BIND	PBFCODMAX=16;		!CAN NEVER USE ANY NUMBER GTR THAN 16 AS A SPECIAL
BC	 				! CODE VALUE FOR PSYMPTR, BECAUSE ANY NUMBER GTR
BC	 				! THAN 16 MIGHT BE THE ADDRESS OF A NODE
BLISS  V. 1.0-2.12	5-JUN-73  20:34:17	P2S1	TABLES.BLI		PAGE 22-1

BC	 
BC	 
BC	 %(***************************************************************************
BC	 	TO GENERATE A JRST INSTRUCTION
BC	 ***************************************************************************)%
BMACROJRSTGEADDRC	 MACRO JRSTGEN(ADDR)=
BC	 BEGIN
BC	 	PBOPWD_JRSTOC OR ADDR;
BC	 	PSYMPTR_PBFLABREF;			!FLAG FOR "ADDRESS FIELD OF THIS INSTR IS
BC	 						! A LABEL"
BC	 	OBUFF();
BC	 END$;
BC	 
BC	 
BC	 	%(***TO GENERATE JRST INDIRECT***)%
BMACROJRSTIGADDRC	 MACRO JRSTIGEN(ADDR)=
BC	 BEGIN
BC	 	PBOPWD_JRSTOC OR INDBIT OR ADDR;
BC	 	PSYMPTR_PBFLABREF;
BC	 	OBUFF();
BC	 END$;
BLISS  V. 1.0-2.12	5-JUN-73  20:34:17	P2S1	TABLES.BLI		PAGE 23-1

BC	 %(***************************************************************************
BC	 	DEFINE THE VARIOUS WAYS OF BUILDING INDICES INTO THE OPGENDISPATCH TABLE.
BC	 	EACH KIND OF INDEX IS COMPOSED OF SOME COMBINATION OF THE FLAG AND OPERATOR
BC	 	FIELDS OF THE NODES FOR WHICH CODE IS TO BE GENERATED.
BC	 ***************************************************************************)%
BC	 
BC	 
BC	 	%(****TO GET THE VAL OF AN ARGNODE INTO THE REG FOR COMPUTATION OF THE PARENT (WHEN
BC	 		THE VAL OF THE SON IS WITHIN REACH OF 1 INSTR.
BC	 		DEPENDS ON THE VALS OF NEGFLG,NOTFLG,SAMEFLG,IMMEDFLG
BC	 		FOR THE ARG INVOLVED, ALSO ON THE VALUE-TYPE OF THE ARG.
BC	 	*******)%
BMACROGETA1OPNODEANODEC	 MACRO	GETA1OPIX(PNODE,ANODE)=
BC	 	BEGIN
BC	 		(.PNODE[A1FLG1]^2 + .ANODE[VALTP1] +(IF .KA10FLG THEN OPGETA ELSE OPGETI))
BC	 	END$;
BC	 
BMACROGETA2OPNODEANODEC	 MACRO	GETA2OPIX(PNODE,ANODE)=
BC	 	BEGIN
BC	 		(.PNODE[A2FLG1]^2 + .ANODE[VALTP1] + (IF .KA10FLG THEN OPGETA ELSE OPGETI))
BC	 	END$;
BC	 
BC	 	%(***FOR DO-LOOPS - DONT ACTUALLY HAVE AN EXPRESSION NODE BUT WANT TO GET VAL
BC	 		HOW TO DO SO DEPENDS ON VAL OF IMMEDFLG, VALTYPE AND NEGATE FLAG***)%
BMACRODOGETAIMFLGVLTPNEGFLAC	 MACRO	DOGETAOPIX(IMFLG,VLTP,NEGFLAG)=
BC	 	(NEGFLAG^4+IMFLG^2 + VLTP + (IF .KA10FLG THEN OPGETA ELSE OPGETI))$;
BC	 
BC	 
BC	 
BC	 
BC	 
BC	 	%(****TO COMPUTE THE VALUE OF A NON-CONTROL BOOLEAN NODE. CODE TO BE GENERATED
BC	 		DEPENDS ON A2NOTFLG, A2IMMEDFLG, AND MEMCMPFLG AND THE OPERSP***)%
BMACROBOOLOPPNODEC	 MACRO	BOOLOPIX(PNODE)=
BC	 	(.PNODE[A2NOTFLG]^4 + .PNODE[A2IMMEMCMPFLGS]^2 + .PNODE[OPERSP] + OPGBOO)$;
BC	 
BC	 
BC	 	%(******TO SKIP THE NEXT INSTRUCTION WHEN A RELATIONAL HAS THE VAL INDICATED
BC	 		BY 'SKPCND'. CODE TO BE GENERATED DEPENDS ON WHETHER THE ARGS
BC	 		OF THE RELATIONAL ARE SINGLE OR DOUBLE WD AND WHETHER
BC	 		THE 2ND ARG IS IMMED*******)%
BC	 	%(*****(NOTE THAT IF THIS IS EVER CHANGED, THEN DPIMMRELOPIX DEFINED
BC	 		BELOW SHOULD ALSO BE CHANGED)***)%
BMACRORELOPIPNODEANODESKPCNDC	 	MACRO RELOPIX(PNODE,ANODE,SKPCND)=
BC	 	BEGIN
BC	 		REGISTER MODE;			!MODE ON WHICH TO SKIP
BC	 		MODE_.PNODE[OPERSP];		!MODE SPECIFIED IN RELATIONAL
BC	 		IF FALSITY(SKPCND)
BC	 		THEN MODE_CMREL(.MODE);		!IF WANT TO SKIP ON REL FALSE
BC	 
BC	 		.ANODE[DBLFLG]^4 + .PNODE[A2IMMEDFLG]^3 + .MODE + OPGREL
BC	 	END$;
BC	 
BC	 
BC	 	%(****FOR A RELATIONAL BETWEEN A DOUBLE-PREC AND ZERO. CAN USE SAME
BC	 		CODE AS USE TO COMPARE A REAL TO ZERO (SEE RELOPIX ABOVE)***)%
BMACRODPIMMRPNODESKPCNDC	 	MACRO	DPIMMRELOPIX(PNODE,SKPCND)=
BLISS  V. 1.0-2.12	5-JUN-73  20:34:18	P2S1	TABLES.BLI		PAGE 23-2

BC	 	BEGIN
BC	 		REGISTER MODE;	!MODE ON WHICH TO SKIP
BC	 		MODE_.PNODE[OPERSP];
BC	 		IF FALSITY(SKPCND)
BC	 		THEN MODE_CMREL(.MODE);	!IF WANT TO SKIP ON RELATIONAL FALSE
BC	 
BC	 		1^3 + .MODE + OPGREL	!HAVE A2IMMEDFLG (SINCE COMPARE TO 0)
BC	 					! AND DO NOT HAVE DOUBLE-WD COMPARE)
BC	 	END$;
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:19	P2S1	TABLES.BLI		PAGE 24-1

BC	 
BC	 	%(*****TO COMPUTE THE VAL OF AN ARITHMETIC NODE.
BC	 		DEPENDS ON THE VALS A2IMMEDFLG,MEMCMPFLG,VALTYPE, AND OPERSP OF THE PARENT
BC	 		NOTE THAT EXPONENTIATION NODES WERE CONVERTED TO FUNCTION-CALLS DURING
BC	 		THE COMPLEXITY WALK. HENCE NEVER HAVE TO GET OPGNTA INDEX FOR EXPONEN
BC	 	********)%
BMACROARITHOPNODEC	 MACRO	ARITHOPIX(PNODE)=
BC	 	BEGIN
BC	 		(.PNODE[A2IMMEMCMPFLGS]^4+.PNODE[OPRSP2]^2+.PNODE[VALTP1]+
BC	 			(IF .KA10FLG THEN OPGARA ELSE OPGARI))
BC	 	END$;
BC	 
BC	 
BC	 	%(*********FOR THE ADD TO MEMORY FOR A DO-LOOP********)%
BMACRODOARITVLTPMCPFLGIMFLGNEGFLAC	 MACRO	DOARITHOPIX(VLTP,MCPFLG,IMFLG,NEGFLAG)=
BC	 		%(***HAVE A2IMMEDFLG=IMFLG,  MEMCMPFLG=MCPFLG,
BC	 			OPERATOR IS ADD IF NEGFLAG IS 0, SUB IF NEGFLAG IS 1***)%
BC	 	(IMFLG^5 + MCPFLG^4 + (ADDOP+NEGFLAG)^2 + VLTP + (IF .KA10FLG THEN OPGARA ELSE OPGARI))$;
BC	 
BC	 
BC	 
BC	 	%(*****TO COMPUTE THE VAL OF A TYPE CONVERSION NODE.
BC	 		WILL BE GENERATING CODE ONLY WHEN  DESTIN  TYPE
BC	 		IS REAL,INTEGER,DOUBLEPREC,OR COMPLEX (IE NEVER HAVE
BC	 		TO DEAL WITH OCTAL,DOUBLE-OCTAL,LOGICAL,LITERAL,OR CONTROL)
BC	 		THUS ONLY NEED TO DIFFERENTIATE BETWEEN THESE 4 TYPES
BC	 		THE TYPE TO BE CONVERTED TO (SPECIFIED BY THE VALTYPE FIELD OF THE
BC	 		TYPE-CONVERION NODE).
BC	 		THE OPERSP FIELD OF THE TYPE CONVERSION NODE, INDICATES
BC	 		THE ORIGINAL TYPE BEING CONVERTED.
BC	 	*******)%
BMACROTPCNVIPNODEC	 	MACRO	TPCNVIX(PNODE)= (.PNODE[OPERSP]^2 + .PNODE[VALTP1] + 
BC	 			(IF .KA10FLG THEN OPGTCA ELSE OPGTCI))$;
BC	 
BC	 
BC	 
BC	 
BC	 	%(****TO COMPUTE THE VALUE OF A NEGNOT NODE.  WHEN PHASE 2 SKELETON IS PRESENT,
BC	 		THERE WILL BE FEW OF THESE. (EG FOR F(-X), NOT(-X))*********)%
BC	 
BC	 	%(***WHEN A2NEG,A2NOT, OR A2SAMEFLG IS SET, WILL USE GETA2OPIX TO GET THE ARG
BC	 		INTO A REG, AND THEN USE THE FOLLOWING INDEX*****)%
BMACRONEGNOTPNODEC	 MACRO	NEGNOT1IX(PNODE)=
BC	 	(.PNODE[MEMCMPFLG]^3 + .PNODE[OPERSP]^2 + .PNODE[VALTP1] + (IF .KA10FLG THEN OPGN1A ELSE OPGN1I))$;
BC	 
BC	 	%(***OTHERWISE, USE AN INDEX BASED ON A2IMMED, MEMCMP, OPERSP, VALTP1****)%
BMACRONEGNOTPNODEC	 MACRO	NEGNOT2IX(PNODE)=
BC	 	(.PNODE[A2IMMEMCMPFLGS]^3 + .PNODE[OPERSP]^2 + .PNODE[VALTP1] + (IF .KA10FLG THEN OPGN2A ELSE OPGN2I))$;
BC	 
BC	 	%(***TO COMPUTE THE VALUE OF A P2MUL OR P2PL1MUL  -
BC	 		CODE TO BE GENERATED DEPENDS ON VALTYPE OF THE NODE AND
BC	 		ON WHICH OP IS TO BE PERFORMED****)%
BMACROSPECOPPNODEC	 MACRO	SPECOPIX(PNODE)=
BC	 	BEGIN
BC	 		%(***IF ARG IS IMMEDIATE AND OPERATION IS P2PLUS1-MULTIPLY OR CUBE, HAVE A
BC	 			SPECIAL CASE***)%
BC	 		IF .PNODE[A1IMMEDFLG]
BLISS  V. 1.0-2.12	5-JUN-73  20:34:20	P2S1	TABLES.BLI		PAGE 24-2

BC	 		THEN
BC	 		BEGIN
BC	 			IF .PNODE[OPERSP] EQL P2PL1OP
BC	 			THEN (.PNODE[A1NEGFLG]^2 + .PNODE[VALTP1] + OPP21I)
BC	 			ELSE
BC	 			IF .PNODE[OPERSP] EQL CUBOP
BC	 			THEN (.PNODE[A1NEGFLG]^2 + .PNODE[VALTP1] + OPCUBI)
BC	 			ELSE
BC	 			(.PNODE[OPERSP]^3 + .PNODE[A1NEGFLG]^2 +.PNODE[VALTP1]
BC	 				+(IF .KA10FLG THEN OPGSPA ELSE OPGSPI))
BC	 		END
BC	 		ELSE
BC	 		(.PNODE[OPERSP]^3 + .PNODE[A1NEGFLG]^2 +.PNODE[VALTP1]
BC	 			+(IF .PNODE[MEMCMPFLG] THEN OPGSPM		!FOR OPS DONE TO MEMORY DONT CARE
BC	 									! WHETHER ARE KA OR KI
BC	 				ELSE IF .KA10FLG THEN OPGSPA ELSE OPGSPI))
BC	 	END$;
BC	 
BC	 
BC	 
BC	 	%(***TO GENERATE CODE FOR AN IN-LINE FUNCTION WHEN ARG1 FOR THAT FN IS ALREADY IN REGFORC**)%
BMACROILFIXPNODEC	 MACRO	ILFIX(PNODE)=
BC	 	BEGIN
BC	 		IF .PNODE[A2IMMEDFLG]
BC	 		THEN
BC	 		.PNODE[OPERSP] + OPGILI
BC	 		ELSE
BC	 		.PNODE[OPERSP] + OPGILF
BC	 	END$;
BC	 
BC	 	%(***TO GENERATE CODE FOR AN IN-LINE FN WHEN ARG IS NOT IN REGFORCOMP (USED FOR
BC	 		ABS,IABS (NOT IN RELEASE 1), AND SIGN ***)%
BMACROILF1IXPNODEC	 MACRO	ILF1IX(PNODE)=
BC	 	(.PNODE[OPERSP] + OPGIL1) $;
BC	 
BC	 
BC	 	%(*****TO PERFORM THE ACTION SPECIFIED FOR A "STORECLS" NODE (WHICH IS USED
BC	 		WHEN EITHER A PTR TO AN ARRAY ENTRY OR THE CONTENTS OF THAT
BC	 		ENTRY MUST BE STORED IN A TEMPORARY************)%
BMACROSTCLSOPNODEC	 MACRO	STCLSOPIX(PNODE)=
BC	 	(.PNODE[OPERSP]^1 + .PNODE[A2SAMEFLG] + OPGSTC)$;
BC	 
BC	 
BC	 	%(*****TO STORE A VALUE THAT HAS BEEN COMPUTED****)%
BMACROSTOROPPNODEC	 MACRO	STOROPIX(PNODE)=
BC	 	BEGIN
BC	 		.PNODE[DBLFLG] + (IF .KA10FLG THEN OPGSTA ELSE OPGSTI)
BC	 	END$;
BC	 
BC	 	%(******TO STORE THE VALUE OF THE RHS OF AN ASSIGNMENT STMNT
BC	 		INTO THE LHS. CODE TO BE GENERATED DEPENDS ON WHETHER THE VAL MUST
BC	 		BE NEGATED OR COMPLEMENTED, AND ON THE VALTYPE*****)%
BMACROASNOPIPNODELHSNODC	 	MACRO ASNOPIX(PNODE,LHSNODE)=
BC	 	BEGIN
BC	 		%(***IF THIS STATEMENT HAS A2IMMEDFLG AND A2SAMEFLG BOTH SET, IT
BC	 			MUST BE THAT THE RHS IS A REGCONTENTS NODE FROM WHICH WE
BC	 			ONLY WANT TO USE THE RIGHT HALF (BECAUSE IT IS AN AOBJN WD).***)%
BLISS  V. 1.0-2.12	5-JUN-73  20:34:21	P2S1	TABLES.BLI		PAGE 24-3

BC	 		IF .PNODE[A2IMMEDFLG] AND .PNODE[A2SAMEFLG]
BC	 		THEN
BC	 		OPGASR
BC	 
BC	 		ELSE
BC	 		.PNODE[A1NGNTFLGS]^2 + .LHSNODE[VALTP1] + (IF .KA10FLG THEN OPGASA ELSE OPGASI)
BC	 	END$;
BC	 
BC	 
BC	 	%(****TO GENERATE CODE FOR AN ARITHMETIC-IF STATEMENT**********)%
BC	 
BMACROC	 MACRO
BAIFIXSTMNODCNEXPRC	 	AIFIX(STMNODE,CNEXPR)=
BC	 		(.STMNODE[AIFFLGS]^1 +
BC	 			(IF .CNEXPR[OPRCLS] EQL DATAOPR
BC	 			THEN 0
BC	 			ELSE .CNEXPR[INREGFLG])
BC	 			+ OPGAIF)$;
BC	 
BC	 	%(***TO INIT A LOGICAL VALUE TO TRUE OR FALSE (-1 OR 0). CODE
BC	 		TO BE GENERATED DEPENDS ON WHETHER VAL IS TO BE LEFT IN A REG AND
BC	 		ON THE VAL TO BE STORED
BC	 		NOTE THAT "LOGVAL" IS EXPECTED TO BE 777777777777 FOR "TRUE"
BC	 	*****)%
BMACROSETLOGPNODELOGVALC	 MACRO	SETLOGIX(PNODE,LOGVAL)=
BC	 	((LOGVAL AND #2) + .PNODE[INREGFLG] + OPGSET)$;
BC	 
BC	 
BC	 	%(*****TO TRANSFER CONTROL WHEN A SPECIFIED VAR HAS THE SPECIFIED VAL TRUE OR FALSE.
BC	 		CODE TO BE GENERATED DEPENDS ON WHICH CONDITION TRANSFER IS DESIRED
BC	 		AND ON WHETHER THE VAL IS IN A REG
BC	 		NOTE THAT "JMPCND" IS EXPECTED TO BE 777777777777 FOR "TRUE"
BC	 ****)%
BMACROCNDVTRNODEJMPCNDC	 MACRO	CNDVTRIX(NODE,JMPCND)=
BC	 	BEGIN
BC	 		IF .NODE[OPRCLS] EQL DATAOPR
BC	 		THEN
BC	 		((JMPCND AND #2) + OPGVTS)
BC	 		ELSE
BC	 		((JMPCND AND #2) + .NODE[INREGFLG] + OPGVTS)
BC	 	END$;
BC	 
BC	 
BC	 	%(*******TO TRANSFER TO ONE LABEL IF A SPECIFIED VALUE IS TRUE
BC	 		AND TO ANOTHER IF THE VAL IS FALSE.
BC	 		CODE TO BE GENERATED DEPENDS ON WHETHER THE VAL TO BE GENERATED
BC	 		IS IN A REG.
BC	 	********)%
BMACROALTTRINODEC	 MACRO	ALTTRIX(NODE)=
BC	 	BEGIN
BC	 		IF .NODE[OPRCLS] EQL DATAOPR
BC	 		THEN
BC	 		OPGALT
BC	 		ELSE
BC	 		(.NODE[INREGFLG] + OPGALT)
BC	 	END$;
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:22	P2S1	TABLES.BLI		PAGE 24-4

BLISS  V. 1.0-2.12	5-JUN-73  20:34:22	P2S1	TABLES.BLI		PAGE 25-1

BC	 
BC	 
BC	 %(**************************************************
BC	 	DEFINE STRUCTURE FOR OPGENTABLE ENTRY - 
BC	 	FOR A GIVEN TYPE OF NODE, WILL HAVE A SERIES OF SUCH ENTRIES, ONE
BC	 	FOR EACH INSTRUCTION TO BE GENERATED
BC	 ******************************************************)%
BC	 
BC	 
BSTRUCTOPGENTOPGENTWDWDPOSSIZEC	 STRUCTURE OPGENTRY[WD,POS,SIZE]=
BOPGENTWDPOSSIZEC	 	(@.OPGENTRY+.WD)<.POS,.SIZE>;
BC	 
BC	 %(**************FIELDS FOR AN OPGENTRY***********)%
BMACROC	 MACRO
BREGSPEC	 	REGSPEC=0,LEFT$,			!SPECIFIES WHERE TO GET
BC	 						! REG TO BE USED
BMEMSPEC	 	MEMSPEC=0,RIGHT$,			!SPECIFIES WHERE TO GET
BC	 						! MEMREF TO BE USED
BPATTERC	 	PATTERN=1,WHOLE$;		!PATTERN WORD FOR INSTR TO
BC	 						! BE GENERATED
BC	 
BC	 %(*********DEFINE VALUES FOR REGSPEC AND MEMSPEC FIELDS*********)%
BBINDC	 BIND
BFRPTNC	 	FRPTN=0,		!REG OR MEMREF FIELD USED AS IS IN WD 1 OF OPGENTABLE ENTRY
BFRRFCC	 	FRRFC=1,		!REG FIELD IN THE GLOBAL "REGFORCOMP" SHOULD BE
BC	 				! ADDED IN TO THE REG FIELD IN WD 1
BC	 				! (OR THE REG SPECIFIED BY "REGFORCOMP" 
BC	 				! SHOULD BE USED AS THE MEMREF FIELD
BIMFNC	 	IMFN=2,			!USE THE IMPLICIT FN NAME PTED TO BY TREEPTR
BWD1IMFC	 	WD1IMF=3,		!USE THE IMPLICIT-FN NAME POINTED TO BY THE RH OF THE PATTERN WD
BRGIMFNC	 	RGIMFN=4,		!USE THE IMPLICIT-FN NAME POINTED TO BY THE RH OF
BC	 				! THE PATTERN WD INDEXED BY THE "REGFORCOMP"
BA1CNSTC	 	A1CNST=5,		!ARG1 IS IMMED CNST
BA2CNSTC	 	A2CNST=6,		!ARG2 IS IMMED CNST
BA1CNNGC	 	A1CNNG=7,		!USE NEG OF THE IMMED CNST ARG1
BA2CNNGC	 	A2CNNG=10,		!USE NEG OF THE IMMED CNST ARG2
BPTRA2C	 	PTRA2=#11,		!USE THE ARG2PTR FIELD IN THE PARENT
BNGPTR2C	 	NGPTR2=#12,		!USE THE NEG OF THE ARG2PTR FIELD OF THE PARENT
BP2PTR2C	 	P2PTR2=#13,		!USE 2**(VAL OF ARG2PTR) MINUS 1
BC	 				! (THIS IS USED FOR P2DIV)
BA1LABC	 	A1LAB=#14,		!USE THE LABEL INDICATED BY A1LABEL
BA2LABC	 	A2LAB=#15,		!USE THE LABEL INDICATED BY A2LABEL
BA3LABC	 	A3LAB=#16,		!USE THE LABEL INDICATED BY A3LABEL
BFROMC1C	 	FROMC1H=#17,		!USE THE CONTENTS OF THE GLOBAL C1H,
BC	 				! THERE IS NO SYMBOL ASSOCIATED WITH THIS ADDR FIELD
BPARTMPC	 	PARTMP=#20,		!USE THE TMP POINTED TO BY THE ADDR PART
BC	 				! OF THE TARGET WD OF THE PARENT NODE (IE THE NODE
BC	 				! POINTED TO BY TREEPTR); IGNORE THE INDIRECT BIT
BC	 				! OF THE TARGET WD
BFROMA1C	 	FROMA1=#21,		!TARGET FIELD OF ARG1 IS MEMREF FIELD
BFROMA2C	 	FROMA2=#22,		!TARGET FIELD OF ARG2
BFROMPAC	 	FROMPAR=#23;		!TARGET FIELD OF PARENT (IE NODE PTED TO BY TREEPTR)
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:24	P2S1	TABLES.BLI		PAGE 26-1

BC	 
BC	 
BC	 %(***********************************************************************
BC	 	TO GET REG OR MEMREF OR OPERATOR FIELD FROM EITHER A TARGET WD IN AN EXPRESSION
BC	 	NODE OR A PATTERN WORD IN AN OPGENTABLE ENTRY
BC	 *****************************************************************)%
BC	 
BMACROC	 MACRO
BOPFLDWORDC	 	OPFLD(WORD) = WORD AND #777^27$,
BREGFLDWORDC	 	REGFLD(WORD) = WORD AND #17^23$,
BC	 
BMEMFLDWORDC	 	MEMFLD(WORD) = WORD AND #37777777$;
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:24	P2S1	TABLES.BLI		PAGE 27-1

BC	 
BC	 	%(****DEFINES SPECIFIC REGS USED FOR COMPILED CODE*****)%
BBINDRETREGC	 BIND RETREG=0;			!REG IN WHICH THE VAL OF A FN IS RETURNED
BBINDSTKREGC	 BIND STKREG=17;		!STACK REG FOR FNS/SUBRS
BBINDARGREGC	 BIND ARGREG=16;			!CONTAINS PTR TO ARGLIST FOR FNS/SUBRS
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:24	P2S1	TABLES.BLI		PAGE 28-1

BC	 
BC	 
BC	 %(*********MACROS USED FOR REGISTER ALLOCATION***********************)%
BC	 
BC	 
BC	 
BC	 %(*****TO DETERMINE WHETHER A NODE IS EVALUATED BY MEANS OF A CALL TO A LIBRARY FN,
BC	 	(IF SO THEN IF THE 2ND ARG IS A CONSTANT WILL HAVE TO ALLOCATE CORE FOR IT)***)%
BMACROUSEFNCPNODEC	 MACRO USEFNCALL(PNODE)=
BC	 BEGIN
BC	 	%(***DOUBLE-PREC OPS ON THE KA10 ARE EVALUATED BY LIBRARY FNS***)%
BC	 	IF .PNODE[VALTYPE] EQL DOUBLPREC
BC	 	THEN
BC	 	.KA10FLG
BC	 	ELSE
BC	 	%(****EXPONENTIATION IS PERFORMED BY LIBRARY FNS***)%
BC	 	(.PNODE[OPR1] EQL EXPONOPF)
BC	 END$;
BC	 
BC	 
BC	 %(****FOR REGISTER ALLOCATION - GET THE REGISTER WHICH IS TO BE THE NTH ASSIGNED.
BC	 	FOR BOTTOMMOST ROUTINES THIS WILL BE REGISTER N+2 (FIRST ASSIGNED IS 2) 
BC	 	FOR NON-BOTTOMMOST ROUTINES THIS WILL BE REGISTER 15-N (FIRST ASSIGNED IS 15).
BC	 *********)%
BMACROASNREGN1C	 MACRO ASNREG(N1)=
BC	 BEGIN
BC	 	IF .BTTMSTFNFLG
BC	 	THEN N1+2
BC	 	ELSE #15-N1
BC	 END$;
BC	 
BC	 	%(***INVERSE OF ASNREG - TO GET THE INDEX FOR A GIVEN REG***)%
BMACROINVASNREGC	 MACRO INVASNREG(REG)=
BC	 BEGIN
BC	 	IF .BTTMSTFNFLG
BC	 	THEN REG-2
BC	 	ELSE #15-REG
BC	 END$;
BC	 
BC	 
BC	 %(****GET THE INDEX FOR THE REGISTER AFTER THE REGISTER INDICATED BY THE INDEX 'IX'****)%
BMACRONXREGIXC	 MACRO NXREG(IX)=
BC	 BEGIN
BC	 	IF .BTTMSTFNFLG
BC	 	THEN IX+1
BC	 	ELSE IX-1
BC	 END$;
BC	 
BC	 
BC	 %(***GIVEN A BIT PATTERN REPRESENTING A SET OF REGS (BIT 0 THE REG OF IX 0, BIT
BC	 	1 THE REG OF IX 1, ETC), RETURN THE PATTERN REPRESENTING THE REGS FOLLOWING THESE***)%
BMACRONXREGPBITPTNC	 MACRO	NXREGPATTERN(BITPTN)=
BC	 BEGIN
BC	 	%(***FOR BOTTOMOST FNS, BIT 0  IS REG 2, BIT 1 REG 3, ETC - 
BC	 		HENCE SHOULD SHIFT THE BITS TO THE RIGHT***)%
BC	 	IF .BTTMSTFNFLG
BC	 	THEN BITPTN^(-1)
BLISS  V. 1.0-2.12	5-JUN-73  20:34:25	P2S1	TABLES.BLI		PAGE 28-2

BC	 	ELSE
BC	 	%(***FOR NON-BOTTOMOST FNS, BIT 0 IS REG 15, BIT 1 REG 14, ETC -
BC	 		HENCE SHOULD SHIFT THE BITS TO THE LEFT***)%
BC	 	BITPTN^1
BC	 END$;
BC	 
BC	 
BC	 %(***GIVEN A BIT PATTERN REPRESENTING A SET OF REGS, RETURN THE PATTERN REPRESENTING
BC	 	THE REGS PRECEEDING EACH OF THESE***)%
BMACROPREVREBITPTNC	 MACRO	PREVREGPATTERN(BITPTN)=
BC	 BEGIN
BC	 	%(***FOR BOTTOMMOST FNS, BIT 0 IS REG 2, BIT 1 REG 3 ETC - HENCE
BC	 		SHOULD SHIFT BITS TO THE LEFT TO GET BIT FOR PREVIOUS REG***)%
BC	 	IF .BTTMSTFNFLG
BC	 	THEN BITPTN^1
BC	 	ELSE
BC	 	%(***FOR NON-BOTTOMOST FNS BIT 0 IS REG 15,BIT 1 IS REG 14 ETC- HENCE SHIFT RIGHT***)%
BC	 	BITPTN^(-1)
BC	 END$;
BC	 
BC	 %(****TO DETERMINE WHETHER THE REGISTER AFTER THE REGISTER INDICATED Y THE INDEX 'IX' IS
BC	 	FREE. BITS 0-15 OF 'BSYRS' REPRESENT REGISTERS OF INDEX 0-15.
BC	 	THE BIT FOR A REGISTER IS SET IFF THAT REG IS FREE*******)%
BMACRONXREGFBSYRSIXC	 MACRO NXREGFREE(BSYRS,IX)=
BC	 BEGIN
BC	 	EXTERNAL CLRWDS;
BC	 	REGISTER NXTREG;
BC	 	%(***GET INDEX FOR REGISTER FOLLOWING THE REG WITH INDEX IX. FOR BOTTOMOST ROUTINES
BC	 		THIS WILL BE IX+1, FOR NON-BOTTOMOST ROUTINES IT WILL BE IX-1***)%
BC	 	NXTREG_IX;
BC	 	IF .BTTMSTFNFLG
BC	 	THEN NXTREG_.NXTREG+1
BC	 	ELSE NXTREG_.NXTREG-1;
BC	 
BC	 	IF .NXTREG LSS 0
BC	 	THEN FALSE
BC	 	ELSE
BC	 	%(***CHECK WHETHER THE BIT CORRESPONDING TO NXTREG IS SET IN BSYRS***)%
BC	 	(BSYRS AND NOT .CLRWDS[.NXTREG]) NEQ 0
BC	 END$;
BC	 
BC	 
BC	 %(****TO TEST WHETHER AN OPERATION 'CLOBBERS' THE REGISTER FOLLOWING THE ONE IN
BC	 	WHICH IS IS PERFORMED.
BC	 	THIS TEST DOES NOT INCLUDE DOUBLE-PREC (OR COMPLEX) OPERATIONS,
BC	 	WHICH THE REGISTER ALLOCATOR HANDLES BY SIMPLY NEVER 
BC	 	ASSIGNING ODD REGISTERS WHEN IN "DOUBLE-WD MODE"
BC	 ********)%
BMACROCLBNXRNODEC	 MACRO CLBNXREG(NODE)=
BC	 	((.NODE[OPERATOR] EQL INTDIVIDE) OR (.NODE[OPR1] EQL MODFNFL)
BC	 	OR (.KA10FLG AND ((.NODE[OPERATOR] EQL IFIXOP) OR (.NODE[OPERATOR] EQL FLOATOP))))$;
BC	 
BC	 
BC	 %(******MACROS FOR GOING BETWEEN "DOUBLE-WD MODE" REGISTER ALLOCATION AND
BC	 	"SINGLE-WD MODE" REGISTER ALLOCATION.
BC	 	FOR DOUBLE-WORD OPERATIONS, NEVER ASSIGN ODD REGISTERS TO
BC	 	ANY COMPUTATIONS.
BLISS  V. 1.0-2.12	5-JUN-73  20:34:27	P2S1	TABLES.BLI		PAGE 28-3

BC	 	THE "SET OF BUSY REGS" MAY NEED TO HAVE THESE TRANSFORMATIONS PERFORMED ON IT
BC	 		1. ACROSS A TYPE CONVERSION NODE (WHEN CONVERTING BETWEEN DOUBLE-WD
BC	 			AND SINGLE-WD VALUES
BC	 		2. ACROSS A RELATIONAL NODE THAT COMPARES DOUBLE-WD VALUES (BUT
BC	 			HAS A SINGLE-WD RESULT)
BC	 		3. ACROSS AN ARRAY-REF NODE FOR A DOUBLE-PREC ARRAY (THE ADDRESS ARITHMETIC 
BC	 			IS SINGLE-WD)
BC	 		4. ACROSS A BOOLEAN  WHOSE ARGS ARE DOUBLE-WD (RESULT IS ALWAYS SINGLE-WD
BC	 *************)%
BC	 
BC	 	%(******WHEN GOING DOWN FROM SINGLE-WD CALCULATIONS TO DOUBLE-WD CALCULATIONS
BC	 		THE SET OF REGISTERS THAT CANNOT BE ASSIGNED MUST
BC	 		NOW INCLUDE
BC	 			1. ANY REGISTER THAT PRECEEDS A REGISTER HOLDING A VAL TO
BC	 				BE PRESERVED (SINCE A DOUBLE-WD COMPUTATION
BC	 				ON THE PRECEEDING REG CLOBBERS THE FOLLOWING ONE)
BC	 			2. ANY ODD REGISTER.
BC	 	***********)%
BC	 
BMACRODPBSYRSPBSYRC	 	MACRO DPBSYREGS(SPBSYRS)=
BC	 	BEGIN
BC	 		IF .BTTMSTFNFLG
BC	 		THEN
BC	 		%(***FOR BOTTOMMOST ROUTINES (FOR WHICH BIT 0 IN BUSY-WD REPRESENTS REG2,
BC	 			BIT 1 IS REG 3, BIT 2 REG 4, ....******)%
BC	 		(SPBSYRS AND SPBSYRS^1) AND #525252525252
BC	 
BC	 		ELSE
BC	 		%(***FOR NON-BOTTOMMOST ROUTINES (FOR WHICH BIT 0 REPRESENTS REG 15, BIT 1 REG 14,
BC	 			BIT 2 REG 15.....******)%
BC	 		(SPBSYRS AND SPBSYRS^(-1)) AND #252525252525
BC	 	END$;
BC	 
BC	 	%(*********WHEN GOING DOWN FROM DOUBLE-WD CALCULATION TO SINGLE-WD
BC	 		CALCULATIONS.
BC	 		THE SET OF REGISTERS AVAILABLE ONCE AGAIN CAN INCLUDE
BC	 		THEN ODD REGISTERS EXCEPT FOR THOSE REGISTERS CONTAINING THE RIGHT-HALF
BC	 		OF A DOUBLE-WD RESULT WHICH WAS BEING SAVED.
BC	 	************)%
BMACROSPBSYRDPBSYRC	 	MACRO SPBSYREGS(DPBSYRS)=
BC	 	BEGIN
BC	 		IF .BTTMSTFNFLG
BC	 		THEN
BC	 		%(***FOR BOTTOMOST ROUTINES (FOR WHICH BIT 0 REPRESENTS REG 2, BIT 1 REG 3, ETC***)%
BC	 		(DPBSYRS OR #252525252525) AND ((DPBSYRS OR #252525252525)^(-1) OR #400000000000)
BC	 		ELSE
BC	 		%(***FOR NON-BOTTOMMOST ROUTINES (BIT 0 REPRESENTS REG 15, BIT 1 REG 14,ETC***)%
BC	 		(DPBSYRS OR #525252525252) AND ((DPBSYRS OR #525252525252)^1)
BC	 	END$;
BC	 
BC	 
BC	 
BC	 %(*****WHEN COMING BACK UP FROM DOUBLE-WD OPS UP TO SINGLE-WD OPS, MUST MARK BITS
BC	 	IN "CLOBBREGS"(WD INDICATING WHICH REGS WERE CLOBBERED IN CALCULATING THE VAL
BC	 	OF AN EXPRESSION) FOR THE ODD REGS FOLLOWING EACH EVEN REG USED
BC	 *******)%
BMACROSETDPCC	 MACRO SETDPCLOBB=
BLISS  V. 1.0-2.12	5-JUN-73  20:34:28	P2S1	TABLES.BLI		PAGE 28-4

BC	 	(CLOBBREGS_.CLOBBREGS OR .CLOBBREGS^(IF .BTTMSTFNFLG THEN (-1) ELSE 1))$;
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:28	P2S1	TABLES.BLI		PAGE 29-1

BC	 
BC	 
BC	 
BC	 
BC	 
BC	 %(****TO SWAP HALVES OF A WORD IN MEMORY****)%
BMACHOPMOVSSC	 MACHOP MOVSS=#207;
BMACHOPMOVEMOVEC	 MACHOP MOVE=#200;
BMACROSWAPHAPTROFFSTC	 MACRO SWAPHALVES(PTR,OFFST) =
BC	 BEGIN
BC	 	REGISTER T1;
BC	 	MOVE (T1,PTR);
BC	 	MOVSS (0,OFFST,T1)
BC	 END$;
BC	 
BC	 
BC	 %(*****TO SWAP THE 2 ARGS UNDER AN EXPRESSION NODE**************)%
BMACROC	 MACRO
BSWAPARNODEC	 	SWAPARGS(NODE)=
BC	 	BEGIN
BC	 		SWAPHALVES(NODE,ARGWDOFFSET);
BC	 		SWAPFLGS(NODE);
BC	 	END$;
BC	 
BC	 
BC	 
BC	 
BC	 %(****TO PERFORM A BLOCK TRANSFER *******)%
BMACHOPBLTBLTC	 MACHOP BLT=#251;
BC	 
BMACROBLOCKTSRCLOCDESTINBLLNTHC	 MACRO BLOCKTR(SRCLOC,DESTIN,BLLNTH)=
BC	 BEGIN
BC	 	REGISTER T1;
BC	 	T1<LEFT>_SRCLOC;
BC	 	T1<RIGHT>_DESTIN;
BC	 	BLT(T1,(DESTIN)<0,0>+BLLNTH-1);
BC	 END$;
BC	 
BC	 
BC	 %(****TO PICK UP A HALF-WD VAL WITH SIGN EXTENDED****)%
BMACHOPHRREIC	 MACHOP HRREI=#571;
BC	 
BMACROEXTSIGVALC	 MACRO	EXTSIGN(VAL)=
BC	 BEGIN
BC	 	REGISTER AA1;
BC	 	AA1_VAL;
BC	 	HRREI(AA1,0,AA1)
BC	 END$;
BC	 
BC	 
BC	 %(***TO DO AN ARITHMETIC SHIFT BY A COMPILE TIME CONSTANT***)%
BMACHOPASHC	 MACHOP ASH=#240;
BC	 
BMACROARITHSVALBITCTC	 MACRO ARITHSHIFT(VAL,BITCT)=
BC	 BEGIN
BC	 	REGISTER T1;
BC	 	T1_VAL;
BLISS  V. 1.0-2.12	5-JUN-73  20:34:30	P2S1	TABLES.BLI		PAGE 29-2

BC	 	ASH(T1,(BITCT AND #777777))
BC	 END$;
BC	 
BC	 
BC	 
BC	 %(****TO COUNT THE NUMBER OF BITS THAT ARE ON IN A GIVEN WORD****)%
BMACROONESCOWDC	 MACRO ONESCOUNT(WD)=
BC	 BEGIN
BC	 	REGISTER COUNT;
BC	 	REGISTER T1;
BC	 	T1_WD;
BC	 	COUNT_0;
BC	 	UNTIL .T1 EQL 0
BC	 	DO
BC	 	BEGIN
BC	 		T1_.T1 AND (NOT(-.T1));
BC	 		COUNT_.COUNT+1;
BC	 	END;
BC	 	.COUNT
BC	 END$;
BC	 
BC	 %(*******TO CLEAR A GIVEN BIT IN A GIVEN WORD (THE ARG IX INDICATES THE BIT
BC	 	TO BE CLEARED, PTN1 IS THE WORD TO CLEAR IT FROM********)%
BMACROC	 MACRO
BCLRBITPTN1IXC	 	CLRBIT(PTN1,IX)=BEGIN
BC	 				EXTERNAL CLRWDS;
BC	 				 PTN1 AND .CLRWDS[IX]
BC	 			END $;
BC	 
BC	 %(*******TO SET A GIVEN BIT IN A GIVEN WD*******)%
BMACROC	 MACRO
BSETBITPTN1IXC	 	SETBIT(PTN1,IX) =BEGIN
BC	 				EXTERNAL CLRWDS;
BC	 				 PTN1 OR NOT(.CLRWDS[IX])
BC	 			END $;
BC	 
BC	 %(****TO TEST A GIVEN BIT OF A GIVEN WD***********)%
BMACROC	 MACRO
BBITSETPTN1IXC	 	BITSET(PTN1,IX)=BEGIN
BC	 				EXTERNAL CLRWDS;
BC	 				 ((IX GEQ 0) AND (PTN1 AND NOT(.CLRWDS[IX])) NEQ 0)
BC	 			END$;
BC	 
BC	 
BC	 
BC	 
BC	 
BC	 %(*****TO MAKE AN ENTRY IN THE CONSTANT TABLE - SET UP GLOBALS FOR
BC	 	TBLSEARCH AND CALL IT ****************)%
BC	 
BMACROMAKECNTYPECNHCNLC	 MACRO MAKECNST(TYPE,CNH,CNL) =
BC	 BEGIN
BC	 	EXTERNAL TBLSEARCH;
BC	 	NAME_CONTAB;
BC	 	ENTRY[0]_CNH;
BC	 	ENTRY[1]_CNL;
BC	 	SYMTYPE_TYPE;
BLISS  V. 1.0-2.12	5-JUN-73  20:34:32	P2S1	TABLES.BLI		PAGE 29-3

BC	 	TBLSEARCH()
BC	 END$;
BC	 
BC	 %(**********TO MAKE A CONSTANT TABLE ENTRY FOR THE NEGATIVE OR THE
BC	 		COMPLEMENT("NOT") OF SOME OTHER CONSTANT TABLE ENTRY*****)%
BC	 
BMACRONEGCNSCNNODEC	 MACRO NEGCNST(CNNODE)=
BC	 	BEGIN
BC	 		IF .CNNODE[VALTYPE] EQL  DOUBLPREC OR .CNNODE[VALTYPE] EQL REAL
BC	 		THEN
BC	 		%(***FOR DOUBLE-PREC NEG - USE ASSEMBLY LANG ROUTINE**)%
BC	 		BEGIN
BC	 			EXTERNAL C1H,C1L,C2H,C2L,COPRIX,KDNEGB,CNSTCM;
BC	 			C1H_.CNNODE[CONST1];
BC	 			C1L_.CNNODE[CONST2];
BC	 			COPRIX_KDNEGB+.CKA10FLG;
BC	 			CNSTCM();
BC	 			MAKECNST(.CNNODE[VALTYPE],.C2H,.C2L)
BC	 		END
BC	 		ELSE
BC	 		 MAKECNST(.CNNODE[VALTYPE], -.CNNODE[CONST1], -.CNNODE[CONST2])
BC	 	END$;
BC	 
BMACRONOTCNSCNNODEC	 MACRO NOTCNST(CNNODE)= MAKECNST(.CNNODE[VALTYPE], NOT .CNNODE[CONST1], NOT .CNNODE[CONST2])$;
BC	 
BC	 %(****TO MAKE CONSTANT TABLE ENTRY FOR NOT(-X) - "NTNGCNST"
BC	 	OR -(NOT X) - "NGNTCNST"*********)%
BMACRONTNGCNCNNODEC	 MACRO NTNGCNST(CNNODE)=
BC	 	BEGIN
BC	 		IF .CNNODE[VALTYPE] EQL DOUBLPREC OR .CNNODE[VALTYPE] EQL REAL
BC	 		THEN
BC	 		%(***FOR DOUBLE-PREC USE ASSEMBLY LANG ROUTINE TO GET NEG**)%
BC	 		BEGIN
BC	 			%(***DNEGCNST GETS ITS ARG IN THE GLOBALS C1H,C1L***)%
BC	 			C1H_ .CNNODE[CONST1];
BC	 			C1L_.CNNODE[CONST2];
BC	 			COPRIX_KDNEGB+.CKA10FLG;
BC	 			CNSTCM();
BC	 			MAKECNST(.CNNODE[VALTYPE],NOT .C1H, NOT .C1L)
BC	 		END
BC	 		ELSE
BC	 		MAKECNST(.CNNODE[VALTYPE], NOT (-.CNNODE[CONST1]), NOT (-.CNNODE[CONST2]))
BC	 	END$;
BC	 
BMACRONGNTCNCNNODEC	 MACRO NGNTCNST(CNNODE)=
BC	 	BEGIN
BC	 		IF .CNNODE[VALTYPE] EQL DOUBLPREC OR .CNNODE[VALTYPE] EQL REAL
BC	 		THEN
BC	 		BEGIN
BC	 			%(***DNEGCNST GETS ITS ARG IN THE GLOBALS C1H,C1L***)%
BC	 			C1H_NOT .CNNODE[CONST1];
BC	 			C1L_NOT .CNNODE[CONST2];
BC	 			COPRIX_KDNEGB+.CKA10FLG;
BC	 			CNSTCM();
BC	 			MAKECNST(.CNNODE[VALTYPE],.C1H,.C1L)
BC	 		END
BC	 		ELSE
BLISS  V. 1.0-2.12	5-JUN-73  20:34:35	P2S1	TABLES.BLI		PAGE 29-4

BC	 		MAKECNST(.CNNODE[VALTYPE],-(NOT .CNNODE[CONST1]), -(NOT .CNNODE[CONST2]))
BC	 	END$;
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:35	P2S1	TABLES.BLI		PAGE 30-1

BC	 
BC	 
BC	 %(******************************
BC	 	MACROES TO FORM INDICES  INTO THE TABLE FOR CONSTANT FOLDING
BC	 ********************************)%
BC	 
BC	 	%(***TO FOLD BOOLEAN OPERATIONS***)%
BMACROKBOOLOPNODEC	 MACRO	KBOOLOPIX(PNODE)=
BC	 	(.PNODE[OPERSP] + KBOOLBASE)$;
BC	 
BC	 	%(***TO FOLD ARITHMETIC OPERATIONS****)%
BMACROKARITHPNODEC	 MACRO	KARITHOPIX(PNODE)=
BC	 	(.PNODE[OPRSP2]^2 + .PNODE[VALTP1] + (IF .CKA10FLG THEN KARIAB  ELSE KARIIB) )$;
BC	 
BC	 	%(*******TO FOLD AN ARITH OP, WHEN NO EXPRESSION NODE WAS BUILT (VLTP IS THE VALTP1 FIELD)***)%
BMACROKKARITVLTPOPSPC	 MACRO	KKARITHOP(VLTP,OPSP)=
BC	 	(OPSP^2 + VLTP + (IF .CKA10FLG THEN KARIAB ELSE KARIIB))$;
BC	 
BC	 
BC	 	%(****TO CONVERT A CONSTANT OF ONE VALUE TYPE TO ANOTHER****)%
BMACROKTPCNVTPCNODC	 MACRO KTPCNVIX(TPCNODE)=
BC	 	(.TPCNODE[OPERSP]^3 + .TPCNODE[VALTP2] +KTYPCB)$;
BC	 
BC	 
BC	 	%(****TO CONVERT A CONSTANT FROM ONE VALTYPE TO ANOTHER WHEN NO EXPRESSION
BC	 		NODE WAS BUILT FOR THE TYPE CONVERSION. (VLTP IS THE VALTP2 FIELD)***)%
BMACROKKTPCNVLTPOPSPC	 MACRO	KKTPCNVIX(VLTP,OPSP)=
BC	 	(OPSP^3 + VLTP + KTYPCB)$;
BC	 
BC	 
BC	 	%(***TO FOLD SPECIAL OPERATORS (P2MUL,P2DIV)  - USED ONLY BY PHASE 2***)%
BMACROKSPECOPNODEC	 MACRO	KSPECOPIX(PNODE)=
BC	 	(.PNODE[OPERSP]^2 + .PNODE[VALTP1] + KSPECB)$;
BC	 
BC	 
BC	 	%(***TO FOLD IN-LINE FNS********)%
BMACROKILFOPPNODEC	 MACRO	KILFOPIX(PNODE)=
BC	 	(.PNODE[OPERSP] + (IF .PNODE[VALTP1] EQL INTEG1 THEN KILFBA ELSE KILFBR))$;
BLISS  V. 1.0-2.12	5-JUN-73  20:34:37	P2S1	TABLES.BLI		PAGE 31-1

BC	 
BC	 	%(*****FOR CNODE ARITHMETIC OR BOOLEAN
BC	 		CHECK TO SEE IF A SKEWED TREE IS AN NARYNODE*****)%
BC	 
BMACRONARYNOCNODEAR1NODC	 	MACRO NARYNODE(CNODE,AR1NODE)=
BC	 	(.CNODE[OPR1] EQL .AR1NODE[OPR1]
BC	 	AND
BC	 	.CNODE[OPR1] LSS DIVOPF
BC	 	AND
BC	 	NOT .CNODE[A1NEGFLG] AND NOT .CNODE[A1NOTFLG]
BC	 	AND
BC	 	NOT .AR1NODE[PARENFLG])$;
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:38	P2S1	TABLES.BLI		PAGE 32-1

BC	 
BC	 
BC	 %(***************************************************************************
BC	 	TO GET CORE TO BUILD A NODE OF A CERTAIN TYPE.
BC	 	AT PRESENT  CALL CORMAN WITH NAME<LEFT> EQUAL TO THE SIZE
BC	 	NEEDED (SRM - AUG 18,1972)
BC	 ***************************************************************************)%
BC	 
BMACROGETCORNDSIZNDTYPC	 MACRO	GETCORE(NDSIZ,NDTYP)=
BC	 BEGIN
BC	 	NAME<LEFT>_NDSIZ;
BC	 	CORMAN()
BC	 END$;
BC	 
BC	 	%(***NODE SIZES****)%
BBINDIOLCSIC	 BIND	IOLCSIZ=3;	!FOR AN IOLISTCALL NODE
BC	 
BC	 	%(***NODE TYPE CODES***)%
BBINDIOLCCDC	 BIND	IOLCCD=1;	!FOR AN IOLISTCALL NODE
BLISS  V. 1.0-2.12	5-JUN-73  20:34:39	P2S1	TABLES.BLI		PAGE 33-1

BC	 
BC	 %(***************************************************************************
BC	 	MACROS USED FOR CONSISTENCY CHECKING - FOR DEBUGGING THE COMPILER
BC	 ***************************************************************************)%
BC	 
BC	 
BC	 %(***TO CHECK WHETHER ARE WALKING DOWN ONTO A LEGAL NODE***)%
BMACRODEBGNONODEC	 MACRO DEBGNODETST(NODE)=
BC	 BEGIN
BC	 	EXTERNAL NODERR;
BC	 	IF DEBUGFLG			!A COMPILE TIME CONSTANT 
BC	 	THEN
BC	 	BEGIN
BC	 		IF .NODE EQL 0
BC	 		THEN NODERR();
BC	 	END;
BC	 END$;
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:39	P2S1	TABLES.BLI		PAGE 34-1

BC	 
BC	 
BC	 !MACROS FOR THE FLAGS ASSOCIATED WITH A DO LOOP
BC	 
BC	 
BC	 %******
BC	 	FLAGS ASSOCIATED WITH A DO LOOP FOR CODE GENERATION
BC	 	INNERDOFLG=0,1,35,1				!FLAG SET BY PHASE 1 ON INNER DO LOOP
BC	 *****%
BMACROC	 	MACRO
BFLCWDC	 		FLCWD=0,1,34,1$,			!FULL CONST WORD INITIAL VALUE AND
BC	 							!LOOP CONTROL
BC	 							!SET IN DOXPND OR BY THE OPTIMIZER
BSSIZONC	 		SSIZONE=0,1,33,1$,			!STEP SIZE ONE
BC	 							!SET IN DOXPND OR BY OPTIMIZER
BSSIZIMC	 		SSIZIMMED=0,1,32,1$,			!STEP SIZE IS AN IMMEDIATE CONSTANT (INTEGER)#1
BINITLIC	 		INITLIMMED=0,1,31,1$,			!INITIAL VALUE IS IMMEDIATE
BC	 							!SET IN DOXPN OR OPTIMIZER
BREALARC	 		REALARITH=0,1,30,1$,			!DO SYMBOL IS REAL SO ALL ARITHMETIC MUST BE
BC	 							!REAL
BINITLTC	 		INITLTMP=0,1,29,1$,			!INITL VALUE NEEDS COMPUTATION
BSSIZINC	 		SSIZINTMP=0,1,28,1$,			!STEP SIZE IN A TEMP
BIVARINC	 		IVARINREG=0,1,27,1$,			!DO INDUCTION VARIABLE IS IN A REGISTER
BC	 							!SET BY OPTIMIZER
BNEDSMAC	 		NEDSMATRLZ =0,1,26,1$,			!LOOPHAS EXIT
BCTLSAMC	 		CTLSAMEFLG=0,1,25,1$,			!CONTROL EXPR WAS COMPUTED INTO
BC	 							! THE REG IN WHICH IT WILL
BC	 							! BE USED
BNOFLCWC	 		NOFLCWDREG=0,1,23,1$,			!IF THE DO INDEX OF THIS LOOP
BC	 							! IS NOT MATERIALIZED, THEN
BC	 							! AOBJN SHOULD NOT BE USED FOR
BC	 							! THE LOOP
BSSIZNEC	 		SSIZNEGFLG=0,1,22,1$,			!STEP SIZE IS A NAGATIVE INTEGER IMMED
BC	 							! CONSTANT AND HENCE MUST BE NEGATED
BC	 							! WHEN IT IS PICKED UP (IE
BC	 							! AT LOOP END MUST DO SUBI RATHER
BC	 							! THAN ADDI)
BDOREMOC	 		DOREMOVED=0,1,21,1$,			!OPTIMIZER HAS DELETED DO LOOP
BCTLNEGC	 		CTLNEG=0,1,20,1$,			!CTL VAL MUST BE NEGATED WHEN IT IS
BC	 							! PICKED UP (THIS IS ALWAYS SET IF CTL
BC	 							! VAL IS A CONSTANT BUT NOT FLCWD
BCTLIMMC	 		CTLIMMED=0,1,19,1$,			!CTL VAL IS AN IMMED CONST
BINITLNC	 		INITLNEG=0,1,18,1$;			!INITL VALUE MUST BE NEGATED WHEN
BC	 							! IT IS PICKED UP
BC	 
BC	 %*****
BC	 	TO ACCESS RIGHT AND LEFT HALVES OF A WORD THROUGH A
BC	 	CASE,WD,POS,SIZ STRUCTURE.
BC	 	USED ON DOSP AND SNDOLNK LIST
BC	 *****%
BC	 
BMACROC	 MACRO
BRIGHTPC	 	RIGHTP = 0,0,RIGHT$,
BLEFTPC	 	LEFTP =0,0,LEFT$;
BC	 
BC	 %*****
BC	 	MACROS TO PICK UP COMBINATIONS OF THE FLAGS
BLISS  V. 1.0-2.12	5-JUN-73  20:34:42	P2S1	TABLES.BLI		PAGE 34-2

BC	 *****%
BC	 
BMACROC	 MACRO
BDOFLGSC	 	DOFLGS = 0,1,28,7$,		!ALL INDEX USED FLAGS
BOTHDOFC	 	OTHDOFLGS=0,1,27,8$;		!ALL THE FLAGS EXCEPT INNERDO AND FLCWD
BC	 !******
BC	 !	FIELDS IN DOWDP USED TO DETERMINE
BC	 !	IF IT IS VALID TO KEEP THE DO INDEX VARIABLE IN A 
BC	 !	REGISTER THROUGHOUT THE LOOP
BC	 !*****
BC	 
BMACROC	 	MACRO
BDOISUBC	 		DOISUBS=0,35,1$,
BDONOAOC	 		DONOAOBJN=0,34,1$,	!FLAG FOR "DONT USE AOBJN FOR THIS LOOP
BC	 					! IF VAL OF INDEX IS NOT MATERIALIZED
BDOINDUC	 		DOINDUC=0,0,18$,
BDOREGPC	 		DOREGPTR=0,18,17$;
BC	 
BC	 
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:43	P2S1	P2S1.BLI		PAGE 35-1

BC	 
BC	 
BC	 !COPYRIGHT 1972,1973, DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS
BC	 !AUTHOR: S. MURPHY
BGLOBALBINDP2S1VC	 GLOBAL BIND P2S1V=48;		!VERSION DATE: MARCH 26,1973
BLISS  V. 1.0-2.12	5-JUN-73  20:34:43	P2S1	P2S1.BLI		PAGE 36-1

BC	 
BC	 
BC	 %(************************************************************************
BC	 	INITIAL PASS OF PHASE 2 SKELETON.
BC	 	THIS PASS OVER AN EXPRESSION TREE PERFORMS THE FOLLOWING:
BC	 
BC	 		1.  ELIMINATES NEG AND NOT NODES, FORCING THEM
BC	 		    DOWN TO THE BOTTOM IF POSSIBLE.  IN DOING THIS
BC	 		    THE FOLLOWING GLOBALS ARE USED.
BC	 
BC	 			NEGFLG - IF THIS FLAG IS TRUE WHEN THE ROUTINE
BC	 				 IS CALLED FOR A GIVEN NODE, A NEG IS
BC	 				 TO BE FORCED DOWN FROM ABOVE.
BC	 				 THIS FLAG IS RETURNED TRUE IF THE
BC	 				 PARENT ABOVE THIS NODE MUST HANDLE
BC	 				 NEGATION FOR THIS NODE.
BC	 
BC	 			NOTFLG - LIKE NEGFLG EXCEPT INDICATING THAT A
BC	 				 NOT IS TO BE FORCED DOWN (OR BACK UP).
BC	 
BC	 		2. ELIMINATES THE SUBTRACT OPERATOR, CHANGING IT TO ADD
BC	 		   AND PROPAGATING THE NEG DOWN OVER THE 2ND ARG
BC	 
BC	 		3. CHECKS FOR ANY OPERATIONS WHICH ARE PERFORMED ON
BC	 		    CONSTANTS AND MAY BE PERFORMED AT COMPILE TIME.
BC	 		    PERFORMS SUCH OPERATIONS AND REPLACES THEIR ENTRIES
BC	 		    IN THE EXPRESSION TREE BY THE RESULTANT CONSTANT.
BC	 		    CREATES CONSTANT TABLE ENTRIES FOR THESE NEW
BC	 		    CONSTANTS.
BC	 
BC	 		4.  DETECTS MULTIPLICATION/DIVISION BY A CONSTANT
BC	 		    POWER OF 2 AND CHANGES THE NODE TO P2MUL.
BC	 		    DETECTS MULTIPLICATION BY A POWER OF 2 PLUS 1.
BC	 
BC	 		5.  DETECTS EXPONENTIATION TO A SMALL (2 OR 3) CONSTANT INTEGER
BC	 		    POWER.
BC	 
BC	 		6. N-ARY NODES ARE PUT INTO CANONICAL ORDER.
BC	 
BC	 
BC	 	THIS PASS IS PERFORMED BEFORE COMMON SUBEXPRESSION ELIMINATION.
BC	 	IT IS PERFORMED BEFORE PHASE 2 WHEN PHASE 2 IS PRESENT
BC	 
BC	 	HAVE A ROUTINE CORRESPONDING TO EACH OPERATOR CLASS.  TO PROCESS
BC	 	A GIVEN NODE, DISPATCH TO THE ROUTINE CORRESPONDING TO ITS
BC	 	OPERATOR CLASS, VIA THE DISPATCH TABLE "P2SKL1DISP".
BC	 
BC	 	THESE ROUTINES ARE CALLED WITH THE ARGUMENT
BC	 		CNODE - A POINTER TO THE NODE IN THE TREE TO BE
BC	 		PROCESSED.
BC	 	THEY EACH RETURN A POINTER TO THE NODE TO REPLACE CNODE (THIS
BC	 	WILL BE CNODE ITSELF UNLESS CONSTANT ELIMINATION OR NEG/NOT
BC	 	PROPOGATION HAS BEEN PERFORMED).
BC	 
BC	 ************************************************************************)%
BLISS  V. 1.0-2.12	5-JUN-73  20:34:45	P2S1	P2S1.BLI		PAGE 37-1

BC	 
BC	 %(******DEFINE THE DISPATCH TABLE FOR PHASE 2 SKELETON - HAVE A ROUTINE FOR EACH OPERATOR CLASS***)%
BC	 
BBINDDMYXXXPLITC	 BIND DMYXXX = PLIT (
BP2SKL1GLOBALNAMESC	 	 P2SKL1DISP GLOBALLY NAMES
BP2SKBLC	 			P2SKBL,
BP2SKIGC	 			P2SKIGNORE,		!SHOULD GET HERE VERY RARELY (VALFLG IS
BC	 						! USUALLY SET AND CHECKED)
BP2SKREC	 			P2SKREL,
BP2SKFNC	 			P2SKFN,
BP2SKARC	 			P2SKARITH,
BP2SKLTC	 			P2SKLTP,
BP2SKLAC	 			P2SKLARR,
BP2SKIGC	 			P2SKIGNORE,		!COMMON SUBEXPR
BP2SKNEC	 			P2SKNEGNOT,		!NEG/NOT
BP2SKIGC	 			P2SKIGNORE,		!SPECIAL OPS (P2MUL ETC)
BP2SKIGC	 			P2SKIGNORE,		!FIELDREF (NOT IN RELEASE 1)
BP2SKIGC	 			P2SKIGNORE,		!STORECLS
BP2SKIGC	 			P2SKIGNORE,		!REGCONTENTS
BP2SKIGC	 			P2SKIGNORE,		!LABEL
BP2SKIGC	 			P2SKIGNORE,		!STATEMENT
BP2SKIGC	 			P2SKIGNORE,		!IOLSCLS
BP2SKIGC	                         P2SKIGNORE,             !IN-LIN-FN..THESE ARE INSERTED IN P2S
BP2SKIGC	                         P2SKIGNORE);            !STRING OPERATORS...KEEPAYOU HANDS OFF
BC	 						! SHOULD NOT ENCOUNTER THEM
BC	  
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:46	P2S1	P2S1.BLI		PAGE 38-1

BC	 
BGLOBALROUTINP2SKBLCNODEC	 GLOBAL ROUTINE P2SKBL(CNODE)=
BC	 %(***	INITIAL PASS OF PHASE 2 SKELETON FOR A BOOLEAN
BC	 ***)%
BBEGINC	 BEGIN
BMAPPEXPRNCNODECNODEC	 	MAP    PEXPRNODE CNODE;
BLOCALPEXPRNARG1NOARG1NOC	 	LOCAL  PEXPRNODE ARG1NODE;
BLOCALPEXPRNARG2NOARG2NOC	 	LOCAL  PEXPRNODE ARG2NODE;
BLOCALPRVNEGARGNOTC	 	LOCAL  PRVNEGFLG,ARGNOTFLG;
BC	 
BC	 
BDEBGNOBEGINEXTERNNODERRIFDEBUGFTHENBEGINIFCNODEEQLTHENNODERRENDENDC	 	DEBGNODETST(CNODE);		!FOR DEBUGGING ONLY
BARG1NOCNODEARG1PTLEFTC	 	ARG1NODE_.CNODE[ARG1PTR];
BARG2NOCNODEARG2PTRIGHTC	 	ARG2NODE_.CNODE[ARG2PTR];
BC	 
BC	 	%(***
BC	 	FOR NEG/NOT ELIMINATION.
BC	 	CANNOT FORCE A NEG DOWN ACROSS THIS NODE.
BC	 	FORCE DOWN A NOT BY:
BC	 		NOT(A AND B)=(NOT A) OR (NOT B)
BC	 		NOT(A OR B)=(NOT A) AND (NOT B)
BC	 		NOT(A XOR B)=A EQV B
BC	 		NOT(A EQV B)=A XOR B
BC	 	***)%
BPRVNEGNEGFLGC	 	PRVNEGFLG_.NEGFLG;
BARGNOTNOTFLGC	 	ARGNOTFLG_.NOTFLG;
BIFNOTFLGC	 	IF.NOTFLG
BTHENC	 	THEN
BBEGINC	 	BEGIN
BC	 		%(***SET OPERSP TO OR FROM AND, AND FROM OR EQV
BC	 			FROM XOR, XOR FROM EQV ***)%
BCNODEBOPRFLEXOPWDNOTCNODEBOPRFLEXOPWDC	 		CNODE[BOPRFLG]_NOT.CNODE[BOPRFLG];
BIFCNODEBOOLCLEXOPWDNEQANDORCC	 		IF .CNODE[BOOLCLS] NEQ ANDORCLS
BTHENC	 		THEN
BARGNOTFALSEC	 		ARGNOTFLG_FALSE;
BENDC	 	END;
BC	 
BC	 
BC	 	%(********PROCESS 1ST ARG ********)%
BC	 
BC	 	%(***IF ARG IS A LEAF, DO NOT WALK DOWN THERE***)%
BIFCNODEA1VALFEXOPWDC	 	IF .CNODE[A1VALFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFARGNOTTHENCNODEA1NOTFEXOPWDC	 		IF .ARGNOTFLG THEN CNODE[A1NOTFLG]_1;
BENDC	 	END
BELSEC	 	ELSE
BBEGINC	 	BEGIN
BNEGFLGFALSEC	 		NEGFLG_FALSE;
BNOTFLGARGNOTC	 		NOTFLG_.ARGNOTFLG;
BARG1NOP2SKL1ARG1NOOPRCLSEXOPWDARG1NOC	 		ARG1NODE_(.P2SKL1DISP[.ARG1NODE[OPRCLS]])(.ARG1NODE);
BC	 		%(***IF NEG OR NOT WAS PROPAGATED UP FROM ARG1, SET
BC	 			THE FLAGS IN CNODE***)%
BCNODEA1NEGFEXOPWDNEGFLGC	 		CNODE[A1NEGFLG]_.NEGFLG<0,1>;
BCNODEA1NOTFEXOPWDNOTFLGC	 		CNODE[A1NOTFLG]_.NOTFLG<0,1>;
BENDC	 	END;
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:34:55	P2S1	P2S1.BLI		PAGE 38-2

BC	 	%(***IF ARG1 IS A CONSTANT (OR WAS COLLAPSED INTO INTO A CONSTANT BY THE
BC	 		WALK OVER IT) AND A1NOTFLG IS SET, PERFORM THE 'NOT' OPERATION ***)%
BIFARG1NOOPR1EXOPWDEQLCONSTFC	 	IF .ARG1NODE[OPR1] EQL CONSTFL
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFCNODEA1NOTFEXOPWDC	 		IF .CNODE[A1NOTFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BARG1NONOTCNSMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYNOTARG1NOCONST1CW3FULLENTRYNOTARG1NOCONST2CW4FULLSYMTYPARG1NOVALTYPEXOPWDTBLSEAENDC	 			ARG1NODE_NOTCNST(ARG1NODE);
BCNODEA1NOTFEXOPWDC	 			CNODE[A1NOTFLG]_0;
BENDC	 		END
BENDC	 	END;
BC	 
BCNODEARG1PTLEFTARG1NOC	 	CNODE[ARG1PTR]_.ARG1NODE;
BC	 
BC	 
BC	 
BC	 	%(*******PROCESS 2ND ARG*******)%
BC	 
BC	 	%(***IF ARG IS A LEAF, DO NOT WALK DOWN THERE***)%
BIFCNODEA2VALFEXOPWDC	 	IF .CNODE[A2VALFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFARGNOTTHENCNODEA2NOTFEXOPWDC	 		IF .ARGNOTFLG THEN CNODE[A2NOTFLG]_1;
BENDC	 	END
BELSEC	 	ELSE
BC	 	%(***FOR ARG2 NOT A LEAF (OR COMMON SUBEXPR)***)%
BBEGINC	 	BEGIN
BNEGFLGFALSEC	 		NEGFLG_FALSE;
BNOTFLGARGNOTC	 		NOTFLG_.ARGNOTFLG;
BARG2NOP2SKL1ARG2NOOPRCLSEXOPWDARG2NOC	 		ARG2NODE_(.P2SKL1DISP[.ARG2NODE[OPRCLS]])(.ARG2NODE);
BCNODEA2NEGFEXOPWDNEGFLGC	 		CNODE[A2NEGFLG]_.NEGFLG<0,1>;
BCNODEA2NOTFEXOPWDNOTFLGC	 		CNODE[A2NOTFLG]_.NOTFLG<0,1>;
BENDC	 	END;
BC	 
BC	 
BC	 	%(***IF ARG2 IS A CONSTANT (OR WAS COLLAPSED INTO ONE), PERFORM THE 'NOT'
BC	 		OPERATION ON IT IF NECESSARY***)%
BIFARG2NOOPR1EXOPWDEQLCONSTFC	 	IF .ARG2NODE[OPR1] EQL CONSTFL
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFCNODEA2NOTFEXOPWDC	 		IF .CNODE[A2NOTFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BARG2NONOTCNSMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYNOTARG2NOCONST1CW3FULLENTRYNOTARG2NOCONST2CW4FULLSYMTYPARG2NOVALTYPEXOPWDTBLSEAENDC	 			ARG2NODE_NOTCNST(ARG2NODE);
BCNODEA2NOTFEXOPWDC	 			CNODE[A2NOTFLG]_0;
BENDC	 		END;
BENDC	 	END;
BC	 
BCNODEARG2PTRIGHTARG2NOC	 	CNODE[ARG2PTR]_.ARG2NODE;
BC	 
BC	 
BNEGFLGPRVNEGC	 	NEGFLG_.PRVNEGFLG;
BNOTFLGFALSEC	 	NOTFLG_FALSE;
BC	 
BC	 
BC	 	%(***CHECK FOR OPERATIONS ON CONSTANTS AND OPERATIONS ON 2 IDENTICAL ARGS,  FOLD IF CAN***)%
BLISS  V. 1.0-2.12	5-JUN-73  20:35:00	P2S1	P2S1.BLI		PAGE 38-3

BRETURNBLSKOPCNODEC	 	RETURN BLSKOPT(.CNODE);
BENDC	 END;
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:35:01	P2S1	P2S1.BLI		PAGE 39-1

BC	 
BC	 
BGLOBALDBROUTINBLSKOPCNODEC	 GLOBAL ROUTINE BLSKOPT(CNODE)=
BC	 %(***************************************************************************
BC	 	ROUTINE TO CHECK WHETHER A BOOLEAN OPERATION HAS ARGUMENTS WHICH
BC	 	ARE EITHER CONSTANT OR IDENTICAL TO EACHOTHER AND HENCE CAN BE FOLDED.
BC	 	THE ARG "CNODE" IS A PTR TO THE BOOLEAN NODE TO BE EXAMINED.
BC	 	IF CNODE CAN BE FOLDED, THIS ROUTINE RETURNS A PTR TO THE
BC	 	NODE WHICH WILL REPLACE CNODE IN THE EXPRESSION TREE.
BC	 	OTHERWISE IT RETURNS A PTR TO CNODE
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BOWNPEXPRNARG1NOARG1NOARG2NOC	 	OWN PEXPRNODE ARG1NODE:ARG2NODE;
BMAPPEXPRNCNODECNODEC	 	MAP PEXPRNODE CNODE;
BC	 
BARG1NOCNODEARG1PTLEFTC	 	ARG1NODE_.CNODE[ARG1PTR];
BARG2NOCNODEARG2PTRIGHTC	 	ARG2NODE_.CNODE[ARG2PTR];
BC	 
BC	 
BC	 	%(***CHECK FOR ARG1 AND ARG2 BOTH CONSTANTS AND IF SO COMPUTE
BC	 		THE VALUE CORRESPONDING TO CNODE AND REPLACE CNODE BY A CONSTANT
BC	 		TABLE ENTRY FOR THAT VALUE.
BC	 	*****)%
BIFARG1NOOPR1EXOPWDEQLCONSTFC	 	IF .ARG1NODE[OPR1] EQL CONSTFL
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFARG2NOOPR1EXOPWDEQLCONSTFC	 		IF.ARG2NODE[OPR1] EQL CONSTFL
BTHENC	 		THEN
BBEGINC	 		BEGIN
BC	 			%(***GLOBALS USED BY THE ASSEMBLY LANGUAGE ROUTINE THAT
BC	 				PERFORMS THE OPERATIONS ARE
BC	 				 COPRIX,C1L,C2L*****)%
BC	 			%(***SET C1L AND C2L TO THE SINGLE-WDS TO BE
BC	 				OPERATED ON***)%
BC1LIFARG1NOVALTP1EXOPWDEQLINTEG1C	 			C1L_IF .ARG1NODE[VALTP1] EQL INTEG1
BTHENARG1NOCONST2CW4FULLC	 				THEN .ARG1NODE[CONST2]
BELSEARG1NOCONST1CW3FULLC	 				ELSE .ARG1NODE[CONST1];
BC2LIFARG2NOVALTP1EXOPWDEQLINTEG1C	 			C2L_IF .ARG2NODE[VALTP1] EQL INTEG1
BTHENARG2NOCONST2CW4FULLC	 				THEN .ARG2NODE[CONST2]
BELSEARG2NOCONST1CW3FULLC	 				ELSE .ARG2NODE[CONST1];
BC	 
BCOPRIXCNODEOPERSPEXOPWDKBOOLBC	 			COPRIX_.CNODE[OPERSP] +  KBOOLBASE;
BC	 
BC	 			%(***FIND THE RESULT OF THIS OPERATION ON THESE
BC	 			2 CONSTANTS***)%
BCNSTCMC	 			CNSTCM();
BC	 			%(***SET VALFLG IN PARENT OF CNODE***)%
BSETPVACNODEC	 			SETPVAL(.CNODE);
BC	 			%(***REPLACE CNODE BY A NEW CONSTANT NODE***)%
BCNODEMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYENTRYC2LSYMTYPLOGICATBLSEAENDC	 			CNODE_MAKECNST(LOGICAL,0,.C2L);
BENDC	 		END
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:35:08	P2S1	P2S1.BLI		PAGE 40-1

BC	 
BC	 
BC	 
BC	 		%(*****CHECK FOR
BC	 			A AND TRUE = A
BC	 			A AND FALSE = FALSE
BC	 			A OR  TRUE = TRUE
BC	 			A OR  FALSE = A
BC	 			A EQV TRUE = A
BC	 			A XOR TRUE = NOT A
BC	 			A EQV FALSE = NOT A
BC	 			A XOR FALSE = A
BC	 		***************)%
BELSEC	 		ELSE
BC	 		%(***IF ARG1 IS TRUE OR FALSE, REPLACE CNODE BY ARG2,
BC	 		TRUE OR FALSE***)%
BCNODEBLCMBCNODEARG1NOARG2NOC	 		CNODE_BLCMB(.CNODE,.ARG1NODE,.ARG2NODE);
BENDC	 	END
BC	 
BELSEC	 	ELSE
BIFARG2NOOPR1EXOPWDEQLCONSTFC	 	IF .ARG2NODE[OPR1] EQL CONSTFL
BTHENC	 	THEN
BC	 	%(***IF ARG2 IS TRUE OR FALSE, REPLACE CNODE BY ARG1,
BC	 		TRUE, OR FALSE***)%
BCNODEBLCMBCNODEARG2NOARG1NOC	 	CNODE_BLCMB(.CNODE,.ARG2NODE,.ARG1NODE)
BC	 
BC	 
BC	 
BC	 
BC	 
BC	 	%(******CHECK FOR
BC	 			A AND A =A
BC	 			A AND (NOT A) = FALSE
BC	 			A OR A = A
BC	 			A OR (NOT A) = TRUE
BC	 			A EQV A = TRUE
BC	 			A EQV (NOT A) = FALSE
BC	 			A XOR A = FALSE
BC	 			A XOR (NOT A) = TRUE
BC	 	****************)%
BELSEC	 	ELSE
BIFCNODEARG1PTLEFTEQLCNODEARG2PTRIGHTC	 	IF .CNODE[ARG1PTR] EQL .CNODE[ARG2PTR]
BTHENC	 	THEN
BC	 	%(***IF ARG1 IS EQUAL TO ARG2, THEN TRY TO COLLAPSE CNODE***)%
BCNODECMBEQLCNODEFALSEC	 	CNODE_CMBEQLARGS(.CNODE,FALSE);
BC	 
BRETURNCANONICNODEC	 	RETURN CANONICALIZE( .CNODE);
BENDC	 END;
BLISS  V. 1.0-2.12	5-JUN-73  20:35:10	P2S1	P2S1.BLI		PAGE 41-1

BC	 
BGLOBALDBROUTINP2SKIGCNODEC	 GLOBAL ROUTINE P2SKIGNORE(CNODE)=
BC	 %(***************************************************************************
BC	 	PHASE 2 SKEL ROUTINE FOR A DATA ITEM (CONSTANT OR VARIABLE).
BC	 	THIS ROUTINE IS ALSO USED FOR REGCONTENTS NODES, LABELS, ETC.
BC	 	IN GENERAL, DO NOT WALK DOWN TO A DATA NODE BECAUSE THE VALFLG IN THE
BC	 	PARENT IS SET, AND ALWAYS CHECK THE FLAG BEFORE WALKING DOWN TO A SON.
BC	 	THIS IS HERE TO KEEP THE COMPILER FROM DYING IN THOSE RARE  CASES
BC	 	WHERE THE VALFLG WAS LEFT UNSET (IT IS USED FOR ELEMENTS ON IOLISTS
BC	 	WHERE THERE IS NO VALFLG)
BC	 .
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BRETURNCNODEC	 	RETURN .CNODE
BENDC	 END;
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:35:12	P2S1	P2S1.BLI		PAGE 42-1

BC	 
BC	 
BGLOBALROUTINP2SKRECNODEC	 GLOBAL ROUTINE P2SKREL(CNODE)=
BC	 %(***
BC	 	INITIAL PASS OF PHASE 2 SKELETON FOR A RELATIONAL
BC	 ***)%
BBEGINC	 BEGIN
BMAPPEXPRNCNODECNODEC	 	MAP PEXPRNODE CNODE;
BLOCALPEXPRNARG1NOARG1NOC	 	LOCAL PEXPRNODE ARG1NODE;
BLOCALPEXPRNARG2NOARG2NOC	 	LOCAL PEXPRNODE ARG2NODE;
BLOCALPRVNEGC	 	LOCAL PRVNEGFLG;
BC	 
BDEBGNOBEGINEXTERNNODERRIFDEBUGFTHENBEGINIFCNODEEQLTHENNODERRENDENDC	 	DEBGNODETST(CNODE);		!FOR DEBUGGING ONLY
BC	 
BARG1NOCNODEARG1PTLEFTC	 	ARG1NODE_.CNODE[ARG1PTR];
BARG2NOCNODEARG2PTRIGHTC	 	ARG2NODE_.CNODE[ARG2PTR];
BC	 	%(***FOR NEG/NOT ELIMINATION -
BC	 		CAN FORCE DOWN A NOT BY CHANGING THE SENSE OF THE RELATIONAL.
BC	 		CANNOT FORCE DOWN A NEG.
BC	 	***)%
BIFNOTFLGC	 	IF .NOTFLG
BTHENC	 	THEN
BCNODEOPERSPEXOPWDCMRELCNODEOPERSPEXOPWDXORC	 	CNODE[OPERSP]_CMREL(.CNODE[OPERSP]);
BPRVNEGNEGFLGC	 	PRVNEGFLG_.NEGFLG;
BC	 
BC	 	%(***PROCESS FIRST ARG***)%
BC	 	%(****DO NOT WALK DOWN TO ARG IF IT IS A LEAF OR COMMON SUBEXPR**)%
BIFNOTCNODEA1VALFEXOPWDC	 	IF NOT .CNODE[A1VALFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BNEGFLGFALSEC	 		NEGFLG_FALSE;
BNOTFLGFALSEC	 		NOTFLG_FALSE;
BCNODEARG1PTLEFTP2SKL1ARG1NOOPRCLSEXOPWDARG1NOC	 		CNODE[ARG1PTR]_(.P2SKL1DISP[.ARG1NODE[OPRCLS]])(.ARG1NODE);
BCNODEA1NEGFEXOPWDNEGFLGC	 		CNODE[A1NEGFLG]_.NEGFLG<0,1>;
BCNODEA1NOTFEXOPWDNOTFLGC	 		CNODE[A1NOTFLG]_.NOTFLG<0,1>;
BENDC	 	END;
BC	 
BC	 	%(***PROCESS SECOND ARG***)%
BIFNOTCNODEA2VALFEXOPWDC	 	IF NOT .CNODE[A2VALFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BNEGFLGFALSEC	 		NEGFLG_FALSE;
BNOTFLGFALSEC	 		NOTFLG_FALSE;
BCNODEARG2PTRIGHTP2SKL1ARG2NOOPRCLSEXOPWDARG2NOC	 		CNODE[ARG2PTR]_(.P2SKL1DISP[.ARG2NODE[OPRCLS]])(.ARG2NODE);
BCNODEA2NEGFEXOPWDNEGFLGC	 		CNODE[A2NEGFLG]_.NEGFLG<0,1>;
BCNODEA2NOTFEXOPWDNOTFLGC	 		CNODE[A2NOTFLG]_.NOTFLG<0,1>;
BENDC	 	END;
BC	 
BC	 	%(***SET NEGFLG AND NOTFLG TO THE VALS TO BE PASSED BACK UP TO PARENT***)%
BNOTFLGFALSEC	 	NOTFLG_FALSE;
BNEGFLGPRVNEGC	 	NEGFLG_.PRVNEGFLG;
BC	 
BC	 
BC	 	%(***CHECK FOR OPS ON CONSTANTS AND OPS ON IDENTICAL ARGS THAT CAN BE FOLDED***)%
BRETURNRELSKOCNODEC	 	RETURN RELSKOPT(.CNODE);
BENDC	 END;
BLISS  V. 1.0-2.12	5-JUN-73  20:35:17	P2S1	P2S1.BLI		PAGE 43-1

BC	 
BC	 
BGLOBALDBROUTINRELSKOCNODEC	 GLOBAL ROUTINE RELSKOPT(CNODE)=
BC	 %(***************************************************************************
BC	 	ROUTINE TO CHECK A RELATIONAL NODE FOR ARGS EQUAL TO CONSTANTS, OR TO EACHOTHER,
BC	 	AND TO FOLD SUCH A NODE IF IT IS POSSIBLE TO DO SO.
BC	 	THE ARG "CNODE" POINTS TO THE RELATIONAL NODE TO BE EXAMINED.
BC	 	IF THE NODE CAN BE FOLDED THEN A PTR TO THE NEW NODE TO REPLACE IT IN
BC	 	THE TREE IS RETURNED.
BC	 	OTHERWISE A PTR TO CNODE IS RETURNED.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BEXTERNKDPRLC1HC1HC1LC1LC2HC2HC2LC2LCOPRIXCOPRIXCNSTCMCNSTCMC	 	EXTERNAL KDPRL,C1H,C1L,C2H,C2L,COPRIX,CNSTCM;	!EXTERNALS USED IN FOLDING
BC	 							! A REAL REPRESENTED BY 2 WDS OF PRECISION
BC	 							! INTO A SINGLE WD
BOWNPEXPRNARG1NOARG1NOARG2NOC	 	OWN PEXPRNODE ARG1NODE:ARG2NODE;
BMAPPEXPRNCNODECNODEC	 	MAP PEXPRNODE CNODE;
BC	 
BARG1NOCNODEARG1PTLEFTC	 	ARG1NODE_.CNODE[ARG1PTR];
BARG2NOCNODEARG2PTRIGHTC	 	ARG2NODE_.CNODE[ARG2PTR];
BC	 
BC	 
BC	 	%(****IF ARG1 IS EQUAL TO ARG2 -
BC	 		SUBSTITUTE TRUE FOR A EQ A, A LE A, A GE A
BC	 		SUBSTITUTE FALSE FOR A LT A, A GT A, A NE A
BC	 	*******)%
BIFCNODEARG1PTLEFTEQLCNODEARG2PTRIGHTC	 	IF .CNODE[ARG1PTR] EQL .CNODE[ARG2PTR]
BTHENC	 	THEN
BRETURNCMBEQLCNODEFALSEC	 	RETURN CMBEQLARGS(.CNODE,FALSE);
BC	 
BC	 
BC	 
BC	 
BC	 	%(***CHECK FOR BOTH ARGS NEGATED.
BC	 	TRANSFORM:
BC	 		-A LT  -B = A GT B
BC	 		-A LEQ -B = A GEQ B
BC	 		-A EQ  -B = A EQ B
BC	 		-A GT  -B = A LT B
BC	 		-A GEQ -B = A LEQ B
BC	 		-A NEQ -B = A NEQ B
BC	 	***)%
BIFCNODEA1NEGFEXOPWDANDCNODEA2NEGFEXOPWDC	 	IF .CNODE[A1NEGFLG] AND .CNODE[A2NEGFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BCNODEA1NEGFEXOPWDC	 		CNODE[A1NEGFLG]_0;
BCNODEA2NEGFEXOPWDC	 		CNODE[A2NEGFLG]_0;
BIFNOTEQRELCNODEOPERSPEXOPWDANDEQLC	 		IF NOT EQREL(.CNODE[OPERSP])
BTHENC	 		THEN
BCNODEOPERSPEXOPWDREVRELCNODEOPERSPEXOPWDXORC	 		CNODE[OPERSP]_REVREL(.CNODE[OPERSP]);
BENDC	 	END;
BC	 
BC	 	%(**********
BC	 		IF THE OPERANDS ARE BOTH CONSTANTS, EVALUATE THE RELATIONAL
BC	 		AND REPLACE IT IN THE TREE BY EITHER TRUE OR FALSE.
BC	 		IF ONE OF THE ARGS IS A CONSTANT, LET THAT ARG BE THE 2ND ARG.
BC	 	*************)%
BLISS  V. 1.0-2.12	5-JUN-73  20:35:24	P2S1	P2S1.BLI		PAGE 43-2

BIFARG1NOOPR1EXOPWDEQLCONSTFC	 	IF .ARG1NODE[OPR1] EQL CONSTFL
BANDARG1NOVALTYPEXOPWDNEQDOUBLOC	 		AND .ARG1NODE[VALTYPE] NEQ DOUBLOCT	!(DONT FOLD OPS ON DOUBLE OCTALS
BC	 							! SINCE HAVE COMPLICATIONS DUE TO USING KI10
BC	 							! FORMAT NUMBS AT COMPILE TIME)
BTHENC	 	THEN
BBEGINC	 	BEGIN
BC	 		%(****FEB 23,1972 - THE FOLLOWING BLOCK WAS INSERTED TO
BC	 			PREVENT A BLISS BUG THAT DELETED CODE . THIS BLOCK FORCES
BC	 			BLISS TO USE 2 TEMP REGS***)%
BBEGINC	 		BEGIN
BOWNTDBT1T2T3C	 			OWN T,T1,T2,T3;
BTT1T2T3C	 			T_1; T1_2; T2_3; T3_4;
BENDC	 		END;
BC	 
BIFARG2NOOPR1EXOPWDEQLCONSTFC	 		IF .ARG2NODE[OPR1] EQL CONSTFL
BANDARG2NOVALTYPEXOPWDNEQDOUBLOC	 			AND .ARG2NODE[VALTYPE] NEQ DOUBLOCT
BTHENC	 		THEN
BBEGINC	 		BEGIN
BOWNKNDBC	 			OWN KN;
BMACROK1HC	 			MACRO K1H=ARG1NODE[CONST1]$;
BMACROK1LC	 			MACRO K1L=ARG1NODE[CONST2]$;
BMACROK2HC	 			MACRO K2H=ARG2NODE[CONST1]$;
BMACROK2LC	 			MACRO K2L=ARG2NODE[CONST2]$;
BKNC	 			KN_
BBEGINC	 			BEGIN
BIFARG1NODBLFLGEXOPWDC	 				IF .ARG1NODE[DBLFLG]
BTHENC	 				THEN
BC	 				%(***IF MUST COMPARE 2-WD VAL****)%
BBEGINC	 				BEGIN
BCASECNODEOPERSPEXOPWDOFSETC	 					CASE .CNODE[OPERSP] OF SET
BC	 					%(***UNUSED OPERSP CODE - SHOULD NEVER GET HERE***)%
BBEGINC	 					BEGIN
BSKERRC	 						SKERR();
BFALSEC	 						FALSE
BENDC	 					END;
BC	 					%(** LT **)%
BK1HARG1NOCONST1CW3FULLLSSK2HARG2NOCONST1CW3FULLC	 					(.K1H LSS .K2H)
BORK1HARG1NOCONST1CW3FULLEQLK2HARG2NOCONST1CW3FULLANDK1LARG1NOCONST2CW4FULLLSSK2LARG2NOCONST2CW4FULLC	 						OR (.K1H EQL .K2H AND .K1L LSS .K2L);
BC	 					%(** EQ **)%
BK1HARG1NOCONST1CW3FULLEQLK2HARG2NOCONST1CW3FULLANDK1LARG1NOCONST2CW4FULLEQLK2LARG2NOCONST2CW4FULLC	 					(.K1H EQL .K2H) AND (.K1L EQL .K2L);
BC	 					%(** LE **)%
BK1HARG1NOCONST1CW3FULLLSSK2HARG2NOCONST1CW3FULLC	 					(.K1H LSS .K2H)
BORK1HARG1NOCONST1CW3FULLEQLK2HARG2NOCONST1CW3FULLANDK1LARG1NOCONST2CW4FULLLEQK2LARG2NOCONST2CW4FULLC	 						OR (.K1H EQL .K2H AND .K1L LEQ .K2L);
BC	 					%(**UNUSED CODE SHOULD NEVER GET HERE**)%
BBEGINC	 					BEGIN
BSKERRC	 						SKERR();
BFALSEC	 						FALSE
BENDC	 					END;
BC	 					%(** GE **)%
BK1HARG1NOCONST1CW3FULLGTRK2HARG2NOCONST1CW3FULLC	 					(.K1H GTR .K2H)
BORK1HARG1NOCONST1CW3FULLEQLK2HARG2NOCONST1CW3FULLANDK1LARG1NOCONST2CW4FULLGEQK2LARG2NOCONST2CW4FULLC	 						OR (.K1H EQL .K2H AND .K1L GEQ .K2L);
BC	 					%(** NE**)%
BK1HARG1NOCONST1CW3FULLNEQK2HARG2NOCONST1CW3FULLORK1LARG1NOCONST2CW4FULLNEQK2LARG2NOCONST2CW4FULLC	 					(.K1H NEQ .K2H) OR (.K1L NEQ .K2L);
BC	 					%(** GT **)%
BK1HARG1NOCONST1CW3FULLGTRK2HARG2NOCONST1CW3FULLC	 					(.K1H GTR .K2H)
BORK1HARG1NOCONST1CW3FULLEQLK2HARG2NOCONST1CW3FULLANDK1LARG1NOCONST2CW4FULLGTRK2LARG2NOCONST2CW4FULLC	 						OR (.K1H EQL .K2H AND .K1L GTR .K2L);
BTESC	 					TES
BLISS  V. 1.0-2.12	5-JUN-73  20:35:39	P2S1	P2S1.BLI		PAGE 43-3

BENDC	 				END
BC	 
BELSEC	 				ELSE
BC	 				%(***IF MUST COMPARE SINGLE-WD VALS***)%
BBEGINC	 				BEGIN
BOWNC1C2C	 					OWN C1,C2;
BC	 					%(***SET C1 AND C2 TO THE VALS TO BE COMPARED***)%
BIFARG1NOVALTP1EXOPWDEQLINTEG1C	 					IF .ARG1NODE[VALTP1] EQL INTEG1
BTHENC	 					THEN
BBEGINC	 					BEGIN
BC1K1LARG1NOCONST2CW4FULLC	 						C1_.K1L;
BC2K2LARG2NOCONST2CW4FULLC	 						C2_.K2L;
BENDC	 					END
BELSEC	 					ELSE
BC	 					%(***FOR REALS - ONLY WANT TO COMPARE THE 1ST WD EVEN THO
BC	 					   KEEP 2 WDS OF PRECISION INSIDE COMPILER (OTHERWISE
BC	 					   FOR PROPAGATED CONSTS GET DIFF RESULTS AT
BC	 					   COMPILE TIME THAN DID AT RUN TIME***)%
BBEGINC	 					BEGIN
BC	 						%(***ROUND 1ST ARG****)%
BC1HK1HARG1NOCONST1CW3FULLC	 						C1H_.K1H;
BC1LK1LARG1NOCONST2CW4FULLC	 						C1L_.K1L;
BCOPRIXKDPRLC	 						COPRIX_KDPRL;	!DISPATCH ENTRY IN CNSTCM
BC	 								! FOR ROUNDING REALS
BCNSTCMC	 						CNSTCM();
BC1C2HC	 						C1_.C2H;
BC	 
BC	 
BC	 						%(***ROUND 2ND ARG****)%
BC1HK2HARG2NOCONST1CW3FULLC	 						C1H_.K2H;
BC1LK2LARG2NOCONST2CW4FULLC	 						C1L_.K2L;
BCOPRIXKDPRLC	 						COPRIX_KDPRL;
BCNSTCMC	 						CNSTCM();
BC2C2HC	 						C2_.C2H;
BENDC	 					END;
BC	 
BCASECNODEOPERSPEXOPWDOFSETC	 					CASE .CNODE[OPERSP] OF SET
BC	 					%(***UNUSED OPERSP CODE - SHOULD BEVER GET HERE***)%
BBEGINC	 					BEGIN
BSKERRC	 						SKERR();
BFALSEC	 						FALSE
BENDC	 					END;
BC	 					%(***LT****)%
BC1LSSC2C	 					.C1 LSS .C2;
BC	 					%(***EQ****)%
BC1EQLC2C	 					.C1 EQL .C2;
BC	 					%(***LE****)%
BC1LEQC2C	 					.C1 LEQ .C2;
BC	 					%(***UNUSED OPERSP CODE - SHOULD NEVER GET HERE***)%
BBEGINC	 					BEGIN
BSKERRC	 						SKERR();
BFALSEC	 						FALSE
BENDC	 					END;
BC	 					%(***GE***)%
BC1GEQC2C	 					.C1 GEQ .C2;
BC	 					%(***NE***)%
BC1NEQC2C	 					.C1 NEQ .C2;
BLISS  V. 1.0-2.12	5-JUN-73  20:35:47	P2S1	P2S1.BLI		PAGE 43-4

BC	 					%(***GT***)%
BC1GTRC2C	 					.C1 GTR .C2
BTESC	 					TES
BENDC	 				END
BENDC	 			END;
BC	 			%(***SET THE VALFLG IN THE PARENT OF CNODE***)%
BSETPVACNODEC	 			SETPVAL(.CNODE);
BC	 
BC	 
BC	 			%(***RETURN THE CONSTANT TABLE ENTRY FOR THE VAL OF THIS RELATIONAL***)%
BRETURNMAKECNC	 			RETURN MAKECNST(LOGICAL,0,
BC	 				BEGIN
BC	 					IF .KN THEN TRUE ELSE FALSE
BBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYENTRYBEGINIFKNTHENTRUEELSEFALSEENDSYMTYPLOGICATBLSEAENDC	 				END);
BENDC	 		END
BLISS  V. 1.0-2.12	5-JUN-73  20:35:54	P2S1	P2S1.BLI		PAGE 44-1

BC	 
BC	 
BC	 		%(***IF ARG1 IS A CONSTANT AND ARG2 IS NOT; SWAP THE 2
BC	 			ARGS ***)%
BELSEC	 		ELSE
BBEGINC	 		BEGIN
BIFNOTEQRELCNODEOPERSPEXOPWDANDEQLC	 			IF NOT EQREL(.CNODE[OPERSP])
BTHENC	 			THEN
BCNODEOPERSPEXOPWDREVRELCNODEOPERSPEXOPWDXORC	 			CNODE[OPERSP]_REVREL(.CNODE[OPERSP]);
BSWAPARBEGINSWAPHABEGINREGISTT1MOVET1CNODEMOVSSARGWDOT1ENDSWAPFLBEGINREGISTT1T1CNODEA1FLGSEXOPWDCNODEA1FLGSEXOPWDCNODEA2FLGSEXOPWDCNODEA2FLGSEXOPWDT1ENDENDC	 			SWAPARGS(CNODE);
BARG1NOCNODEARG1PTLEFTC	 			ARG1NODE_.CNODE[ARG1PTR];
BARG2NOCNODEARG2PTRIGHTC	 			ARG2NODE_.CNODE[ARG2PTR];
BENDC	 		END;
BENDC	 	END;
BC	 
BC	 
BC	 
BC	 
BC	 
BC	 	%(*****IF ONE OF THE ARGS IS ZERO AND THE OTHER IS A SUM, TRANSFORM:
BC	 		(A+B).REL.0=A.REL.-B
BC	 	*********)%
BC	 
BIFNOTCNODEA1VALFEXOPWDANDARG2NOOPR1EXOPWDEQLCONSTFC	 	IF ( NOT .CNODE[A1VALFLG]) AND (.ARG2NODE[OPR1] EQL CONSTFL)
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFARG2NOCONST1CW3FULLEQLANDARG2NOCONST2CW4FULLEQLANDARG1NOOPR1EXOPWDEQLADDOPFC	 		IF (.ARG2NODE[CONST1] EQL 0) AND (.ARG2NODE[CONST2] EQL 0) AND (.ARG1NODE[OPR1] EQL ADDOPF)
BC	 
BANDNOTCNODEA1NOTFEXOPWDC	 			AND NOT .CNODE[A1NOTFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BC	 
BC	 			%(****MAKE ARG1 UNDER CNODE BE ARG1 UNDER THE SUM, MAKE ARG2 BE
BC	 				ARG2 UNDER THE SUM WITH THE SIGN REVERSED****)%
BCNODEARG1PTLEFTARG1NOARG1PTLEFTC	 			CNODE[ARG1PTR]_.ARG1NODE[ARG1PTR];
BCNODEA1FLGSEXOPWDARG1NOA1FLGSEXOPWDC	 			CNODE[A1FLGS]_.ARG1NODE[A1FLGS];
BCNODEARG2PTRIGHTARG1NOARG2PTRIGHTC	 			CNODE[ARG2PTR]_.ARG1NODE[ARG2PTR];
BCNODEA2FLGSEXOPWDARG1NOA2FLGSEXOPWDC	 			CNODE[A2FLGS]_.ARG1NODE[A2FLGS];
BCNODEA2NEGFEXOPWDNOTCNODEA2NEGFEXOPWDC	 			CNODE[A2NEGFLG]_NOT .CNODE[A2NEGFLG];
BC	 			%(***CORRECT PARENT PTRS IN THE 2 SUBNODES WHICH WERE MOVED***)%
BARG1NOCNODEARG1PTLEFTC	 			ARG1NODE_.CNODE[ARG1PTR];
BARG2NOCNODEARG2PTRIGHTC	 			ARG2NODE_.CNODE[ARG2PTR];
BIFARG1NOOPRCLSEXOPWDEQLDATAOPC	 			IF .ARG1NODE[OPRCLS] EQL DATAOPR
BTHENC	 			THEN
BCNODEA1VALFEXOPWDC	 			CNODE[A1VALFLG]_1
BELSEC	 			ELSE
BARG1NOPARENTRIGHTCNODEC	 			ARG1NODE[PARENT]_.CNODE;
BC	 
BIFARG2NOOPRCLSEXOPWDEQLDATAOPC	 			IF .ARG2NODE[OPRCLS] EQL DATAOPR
BTHENC	 			THEN
BCNODEA2VALFEXOPWDC	 			CNODE[A2VALFLG]_1
BELSEC	 			ELSE
BARG2NOPARENTRIGHTCNODEC	 			ARG2NODE[PARENT]_.CNODE;
BENDC	 		END;
BENDC	 	END;
BC	 
BC	 
BLISS  V. 1.0-2.12	5-JUN-73  20:36:11	P2S1	P2S1.BLI		PAGE 44-2

BC	 
BRETURNCNODEC	 	RETURN .CNODE;
BENDC	 END;
BLISS  V. 1.0-2.12	5-JUN-73  20:36:11	P2S1	P2S1.BLI		PAGE 45-1

BC	 
BC	 
BGLOBALDBROUTINP2SKFNCNODEC	 GLOBAL ROUTINE P2SKFN(CNODE)=
BC	 %(***
BC	 	INITIAL PASS OF PHASE 2 SKELETON FOR A FUNCTION CALL.  CANNOT FORCE
BC	 	NEG OR NOT DOWN ACROSS A FN CALL.
BC	 ***)%
BBEGINC	 BEGIN
BEXTERNDOWDPCDONODC	 	EXTERNAL DOWDP,CDONODE;		!GLOBAL USED IN DETERMINING WHETHER A
BC	 				! DO LOOP INDEX CAN LIVE IN A REGISTER
BMAPOBJECTDOWDPDOWDPC	 	MAP OBJECTCODE DOWDP;
BMAPPEXPRNCDONODCDONODC	 	MAP PEXPRNODE CDONODE;
BEXTERNUSERFNC	 	EXTERNAL USERFNFLG;	!FLAG INDICATING THAT THIS STMNT HAD A
BC	 				! CALL TO A USER FUNCTION
BMAPOBJECTUSERFNUSERFNC	 	MAP OBJECTCODE USERFNFLG;
BMAPPEXPRNCNODECNODEC	 	MAP PEXPRNODE CNODE;
BLOCALARGUMEARGLSTARGLSTC	 	LOCAL ARGUMENTLIST ARGLST;
BLOCALPEXPRNFNNAMEFNNAMEC	 	LOCAL PEXPRNODE FNNAMENTRY;
BLOCALPRVNEGPRVNOTC	 	LOCAL PRVNEGFLG, PRVNOTFLG;
BLOCALPEXPRNARGNODARGNODC	 	LOCAL PEXPRNODE ARGNODE;
BC	 
BDEBGNOBEGINEXTERNNODERRIFDEBUGFTHENBEGINIFCNODEEQLTHENNODERRENDENDC	 	DEBGNODETST(CNODE);		!FOR DEBUGGING ONLY
BC	 
BFNNAMECNODEARG1PTLEFTC	 	FNNAMENTRY_.CNODE[ARG1PTR];
BARGLSTCNODEARG2PTRIGHTC	 	ARGLST_.CNODE[ARG2PTR];
BC	 
BC	 	%(***IF THIS FN IS NOT A LIBRARY FN, SET A GLOBAL INDICATING THAT THIS
BC	 		STMNT INCLUDES A CALL TO A USER FN***)%
BIFCNODEOPERSPEXOPWDNEQLIBARYTHENUSERFNTRUEC	 	IF .CNODE[OPERSP] NEQ LIBARY THEN USERFNFLG_TRUE;
BC	 
BC	 	%(***PERFORM PHASE 2 SKEL OPTIMS ON ALL ARGS***)%
BIFCNODEARG2PTRIGHTNEQC	 	IF .CNODE[ARG2PTR] NEQ 0
BTHENC	 	THEN
BBEGINC	 	BEGIN
BPRVNEGNEGFLGC	 		PRVNEGFLG_.NEGFLG;
BPRVNOTNOTFLGC	 		PRVNOTFLG_.NOTFLG;
BC	 
BC	 		%(*** PROCESS ALL ARGUMENTS ***)%
BINCRCTFROMTOCTARGLSTARGCOURIGHTC	 		INCR CT FROM 1 TO .ARGLST[ARGCOUNT]
BDOC	 		DO
BBEGINC	 		BEGIN
BARGNODARGLSTCTARGNPTRIGHTC	 			ARGNODE_.ARGLST[.CT,ARGNPTR];
BIFNOTARGLSTCTAVALFLC	 			IF NOT .ARGLST[.CT,AVALFLG]
BTHENC	 			THEN
BC	 			%(***UNLESS THIS ARG IS A LEAF OR A COMMON SUBEXPR, PROCESS IT***)%
BBEGINC	 			BEGIN
BNEGFLGFALSEC	 				NEGFLG_FALSE;
BNOTFLGFALSEC	 				NOTFLG_FALSE;
BARGLSTCTARGNPTRIGHTP2SKL1ARGNODOPRCLSEXOPWDARGNODC	 				ARGLST[.CT,ARGNPTR]_(.P2SKL1DISP[.ARGNODE[OPRCLS]])(.ARGNODE);
BENDC	 			END
BELSEC	 			ELSE
BC	 			%(***CHECK WHETHER THIS ARG IS THE INDEX OF A DO LOOP THAT
BC	 				INCLUDES THIS STMNT. IF SO, WILL NOT BE ABLE TO
BC	 				HAVE THAT LOOP INDEX LIVE IN A REGISTER***)%
BIFARGLSTCTARGNPTRIGHTEQLDOWDPDOINDUC	 			IF .ARGLST[.CT,ARGNPTR] EQL .DOWDP[DOINDUC]
BTHENDOWDPDOISUBC	 			 THEN  DOWDP[DOISUBS]_0;
BENDC	 		END;
BLISS  V. 1.0-2.12	5-JUN-73  20:36:21	P2S1	P2S1.BLI		PAGE 45-2

BC	 
BC	 		%(***RESTORE NEGFLG AND NOTFLG TO THE VALS THAT THEY  HAD WHEN ENTERED***)%
BNEGFLGPRVNEGC	 		NEGFLG_.PRVNEGFLG;
BNOTFLGPRVNOTC	 		NOTFLG_.PRVNOTFLG;
BENDC	 	END;
BC	 
BC	 	%(***CHECK FOR WHETHER THIS FN SHOULD BE EXPANDED IN LINE. IF SO,TRANSFORM
BC	 		THIS FNCALL NODE INTO AN "IN-LINE-FN" NODE OR A TYPE-CONVERSION NODE***)%
BIFFNNAMEIDINLIC	 	IF .FNNAMENTRY[IDINLINFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BC	 		%(***IN RELEASE 1, WE DONT EXPAND ANYTHING WITH MORE THAN 2 ARGS INLINE***)%
BIFARGLSTARGCOURIGHTLEQC	 		IF .ARGLST[ARGCOUNT] LEQ 2
BTHENC	 		THEN
BBEGINC	 		BEGIN
BCNODEOPERATEXOPWDRIGHTFNNAMEIDINLICW4RRIGHTC	 			CNODE[OPERATOR]_.FNNAMENTRY[IDINLINOPR];
BC	 
BC	 			%(***FOR A TYPE-CONVERSION NODE, THE SINGLE ARG IS ARG2***)%
BIFCNODEOPRCLSEXOPWDEQLTYPECNC	 			IF .CNODE[OPRCLS] EQL TYPECNV
BTHENC	 			THEN
BBEGINC	 			BEGIN
BCNODEARG2PTRIGHTARGLSTARGNPTRIGHTC	 				CNODE[ARG2PTR]_.ARGLST[1,ARGNPTR];
BIFARGLSTAVALFLTHENCNODEA2VALFEXOPWDC	 				IF .ARGLST[1,AVALFLG] THEN CNODE[A2VALFLG]_1;
BENDC	 			END
BC	 
BELSEC	 			ELSE
BBEGINC	 			BEGIN
BCNODEARG1PTLEFTARGLSTARGNPTRIGHTC	 				CNODE[ARG1PTR]_.ARGLST[1,ARGNPTR];
BIFARGLSTAVALFLC	 				IF .ARGLST[1,AVALFLG]
BTHENCNODEA1VALFEXOPWDC	 				THEN CNODE[A1VALFLG]_1;
BIFARGLSTARGCOURIGHTEQLC	 				IF .ARGLST[ARGCOUNT] EQL 2
BTHENC	 				THEN
BBEGINC	 				BEGIN
BCNODEARG2PTRIGHTARGLSTARGNPTRIGHTC	 					CNODE[ARG2PTR]_.ARGLST[2,ARGNPTR];
BIFARGLSTAVALFLC	 					IF .ARGLST[2,AVALFLG]
BTHENCNODEA2VALFEXOPWDC	 					THEN CNODE[A2VALFLG]_1;
BENDC	 				END
BELSECNODEARG2PTRIGHTC	 				ELSE CNODE[ARG2PTR]_0;
BENDC	 			END;
BC	 
BC	 			%(***RETURN THE CORE THAT WAS USED FOR THE ARGLST TO FREE STORAGE***)%
BSAVSPAARGLSTARGCOURIGHTARGLSTC	 			SAVSPACE(.ARGLST[ARGCOUNT],.ARGLST);  !ARGCOUNT IS # OF WDS-1
BC	 
BC	 			%(***IF ARG1 UNDER THIS NODE HAS A NEG NODE AS ITS TOP NODE,
BC	 				FOLD IT OUT***)%
BARGNODCNODEARG1PTLEFTC	 			ARGNODE_.CNODE[ARG1PTR];
BIFARGNODOPR1EXOPWDEQLNEGFLC	 			IF .ARGNODE[OPR1] EQL NEGFL
BTHENC	 			THEN
BBEGINC	 			BEGIN
BCNODEA1NEGFEXOPWDC	 				CNODE[A1NEGFLG]_1;
BCNODEARG1PTLEFTARGNODARG2PTRIGHTC	 				CNODE[ARG1PTR]_.ARGNODE[ARG2PTR];
BIFARGNODA2VALFEXOPWDC	 				IF .ARGNODE[A2VALFLG]
BTHENCNODEA1VALFEXOPWDC	 				THEN CNODE[A1VALFLG]_1
BELSEC	 				ELSE
BBEGINC	 				BEGIN
BOWNPEXPRNARG1NOARG1NOC	 					OWN PEXPRNODE ARG1NODE;
BARG1NOARGNODARG1PTLEFTC	 					ARG1NODE_.ARGNODE[ARG1PTR];
BLISS  V. 1.0-2.12	5-JUN-73  20:36:31	P2S1	P2S1.BLI		PAGE 45-3

BARG1NOPARENTRIGHTCNODEC	 					ARG1NODE[PARENT]_.CNODE;
BENDC	 				END;
BC	 				%(***RETURN THE SPACE FOR THE NEG TO FREE STORAGE***)%
BSAVSPAARGNODC	 				SAVSPACE(3,.ARGNODE);
BENDC	 			END;
BENDC	 		END;
BENDC	 	END;
BC	 
BRETURNCNODEC	 	RETURN .CNODE;
BENDC	 END;
BLISS  V. 1.0-2.12	5-JUN-73  20:36:32	P2S1	P2S1.BLI		PAGE 46-1

BC	 
BGLOBALDBROUTINP2SKARCNODEC	 GLOBAL ROUTINE P2SKARITH(CNODE)=
BC	 %(***
BC	 	INITIAL PASS OF PHASE 2 SKELETON FOR AN ARITHMETIC NODE
BC	 ***)%
BBEGINC	 BEGIN
BLOCALPEXPRNARG1NOARG1NOC	 	LOCAL PEXPRNODE ARG1NODE;
BLOCALPEXPRNARG2NOARG2NOC	 	LOCAL PEXPRNODE ARG2NODE;
BMAPPEXPRNCNODECNODEC	 	MAP PEXPRNODE CNODE;
BLOCALPARNEGPARNOTC	 	LOCAL PARNEG, PARNOT;
BLOCALARG1NEARG2NEC	 	LOCAL ARG1NEG:ARG2NEG;
BC	 
BDEBGNOBEGINEXTERNNODERRIFDEBUGFTHENBEGINIFCNODEEQLTHENNODERRENDENDC	 	DEBGNODETST(CNODE);		!FOR DEBUGGING ONLY
BC	 
BC	 
BARG1NOCNODEARG1PTLEFTC	 	ARG1NODE_.CNODE[ARG1PTR];
BARG2NOCNODEARG2PTRIGHTC	 	ARG2NODE_.CNODE[ARG2PTR];
BC	 
BC	 	%(***FORCE DOWN A NEGATIVE BY:
BC	 		-(A+B)=-A-B
BC	 		-(A-B)=-A+B
BC	 		-(A*B)=(-A)*B
BC	 		-(A/B)=(-A)/B
BC	 	***)%
BIFNEGFLGC	 	IF .NEGFLG
BTHENC	 	THEN
BBEGINC	 	BEGIN
BCASECNODEOPERSPEXOPWDOFSETC	 		CASE .CNODE[OPERSP] OF SET
BC	 		%(*** FOR ADD ***)%
BBEGINC	 		BEGIN
BARG1NETRUEC	 			ARG1NEG_TRUE;
BARG2NETRUEC	 			ARG2NEG_TRUE;
BPARNEGFALSEC	 			PARNEG_FALSE;
BENDC	 		END;
BC	 		%(*** FOR SUB ***)%
BBEGINC	 		BEGIN
BCNODEOPERSPEXOPWDADDOPC	 			CNODE[OPERSP]_ADDOP;
BARG1NETRUEC	 			ARG1NEG_TRUE;
BARG2NEFALSEC	 			ARG2NEG_FALSE;
BPARNEGFALSEC	 			PARNEG_FALSE;
BENDC	 		END;
BC	 		%(*** FOR MUL ***)%
BBEGINC	 		BEGIN
BARG1NETRUEC	 			ARG1NEG_TRUE;
BARG2NEFALSEC	 			ARG2NEG_FALSE;
BPARNEGFALSEC	 			PARNEG_FALSE;
BENDC	 		END;
BC	 		%(*** FOR DIV ***)%
BBEGINC	 		BEGIN
BARG1NETRUEC	 			ARG1NEG_TRUE;
BARG2NEFALSEC	 			ARG2NEG_FALSE;
BPARNEGFALSEC	 			PARNEG_FALSE;
BENDC	 		END;
BC	 		%(*** FOR EXPONENTIATION ***)%
BC	 		%(*** CANNOT FORCE NEG DOWN ***)%
BBEGINC	 		BEGIN
BARG1NEFALSEC	 			ARG1NEG_FALSE;
BLISS  V. 1.0-2.12	5-JUN-73  20:36:37	P2S1	P2S1.BLI		PAGE 46-2

BARG2NEFALSEC	 			ARG2NEG_FALSE;
BPARNEGTRUEC	 			PARNEG_TRUE;
BENDC	 		END
BTESC	 		TES
BENDC	 	END
BELSEC	 	ELSE
BBEGINC	 	BEGIN
BARG1NEFALSEC	 		ARG1NEG_FALSE;
BPARNEGFALSEC	 		PARNEG_FALSE;
BIFCNODEOPERSPEXOPWDEQLSUBOPC	 		IF .CNODE[OPERSP] EQL SUBOP
BTHENC	 		THEN
BBEGINC	 		BEGIN
BCNODEOPERSPEXOPWDADDOPC	 			CNODE[OPERSP]_ADDOP;
BARG2NETRUEC	 			ARG2NEG_TRUE;
BENDC	 		END
BELSEC	 		ELSE
BARG2NEFALSEC	 		ARG2NEG_FALSE;
BENDC	 	END;
BLISS  V. 1.0-2.12	5-JUN-73  20:36:39	P2S1	P2S1.BLI		PAGE 47-1

BC	 
BC	 	%(*** CANNOT FORCE DOWN A NOT ***)%
BPARNOTNOTFLGC	 	PARNOT_.NOTFLG;
BC	 
BC	 
BC	 	%(********* PROCESS FIRST ARG **********)%
BC	 
BC	 	%(****DO NOT WALK DOWN TO A NODE WHICH IS A LEAF OR COMMON SUBEXPR***)%
BIFCNODEA1VALFEXOPWDC	 	IF .CNODE[A1VALFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFARG1NEC	 		IF .ARG1NEG
BTHENCNODEA1NEGFEXOPWDC	 		THEN CNODE[A1NEGFLG]_1;
BENDC	 	END
BELSEC	 	ELSE
BC	 	%(***IF ARG IS NOT A LEAF OR COMMON SUBEXPR***)%
BBEGINC	 	BEGIN
BNOTFLGFALSEC	 		NOTFLG_FALSE;
BNEGFLGARG1NEC	 		NEGFLG_.ARG1NEG;
BARG1NOP2SKL1ARG1NOOPRCLSEXOPWDARG1NOC	 		ARG1NODE_(.P2SKL1DISP[.ARG1NODE[OPRCLS]])(.ARG1NODE);
BCNODEA1NEGFEXOPWDNEGFLGC	 		CNODE[A1NEGFLG]_.NEGFLG<0,1>;
BCNODEA1NOTFEXOPWDNOTFLGC	 		CNODE[A1NOTFLG]_.NOTFLG<0,1>;
BENDC	 	END;
BC	 
BC	 	%(***IF ARG IS A CONSTANT (OR WAS COLLAPSED INTO ONE), PERFORM NEG
BC	 		ON IT AT COMPILE TIME*****)%
BIFARG1NOOPR1EXOPWDEQLCONSTFC	 	IF .ARG1NODE[OPR1] EQL CONSTFL
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFCNODEA1NEGFEXOPWDC	 		IF .CNODE[A1NEGFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BARG1NONEGCNSBEGINIFARG1NOVALTYPEXOPWDEQLDOUBLPORARG1NOVALTYPEXOPWDEQLREALTHENBEGINEXTERNC1HC1HC1LC1LC2HC2HC2LC2LCOPRIXCOPRIXKDNEGBKDNEGBCNSTCMCNSTCMC1HARG1NOCONST1CW3FULLC1LARG1NOCONST2CW4FULLCOPRIXKDNEGBCKA10FFLGREGCKA10CNSTCMMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYC2HENTRYC2LSYMTYPARG1NOVALTYPEXOPWDTBLSEAENDENDELSEMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYARG1NOCONST1CW3FULLENTRYARG1NOCONST2CW4FULLSYMTYPARG1NOVALTYPEXOPWDTBLSEAENDENDC	 			ARG1NODE_NEGCNST(ARG1NODE);
BCNODEA1NEGFEXOPWDC	 			CNODE[A1NEGFLG]_0;
BENDC	 		END;
BENDC	 	END;
BC	 
BCNODEARG1PTLEFTARG1NOC	 	CNODE[ARG1PTR]_.ARG1NODE;
BC	 
BC	 
BC	 
BC	 	%(********* PROCESS SECOND ARG ********)%
BC	 
BIFCNODEA2VALFEXOPWDC	 	IF .CNODE[A2VALFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFARG2NEC	 		IF .ARG2NEG
BTHENC	 		THEN
BCNODEA2NEGFEXOPWDC	 		CNODE[A2NEGFLG]_1;
BENDC	 	END
BELSEC	 	ELSE
BBEGINC	 	BEGIN
BNEGFLGARG2NEC	 		NEGFLG_.ARG2NEG;
BNOTFLGFALSEC	 		NOTFLG_FALSE;
BARG2NOP2SKL1ARG2NOOPRCLSEXOPWDARG2NOC	 		ARG2NODE_(.P2SKL1DISP[.ARG2NODE[OPRCLS]])(.ARG2NODE);
BCNODEA2NEGFEXOPWDNEGFLGC	 		CNODE[A2NEGFLG]_.NEGFLG<0,1>;
BCNODEA2NOTFEXOPWDNOTFLGC	 		CNODE[A2NOTFLG]_.NOTFLG<0,1>;
BLISS  V. 1.0-2.12	5-JUN-73  20:36:50	P2S1	P2S1.BLI		PAGE 47-2

BENDC	 	END;
BC	 
BC	 	%(***IF ARG IS A CONSTANT (OR WAS COLLAPSED INTO ONE), PERFORM NEG
BC	 		ON IT AT COMPILE TIME*****)%
BIFARG2NOOPR1EXOPWDEQLCONSTFC	 	IF .ARG2NODE[OPR1] EQL CONSTFL
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFCNODEA2NEGFEXOPWDC	 		IF .CNODE[A2NEGFLG]
BTHENC	 		THEN
BBEGINC	 		BEGIN
BARG2NONEGCNSBEGINIFARG2NOVALTYPEXOPWDEQLDOUBLPORARG2NOVALTYPEXOPWDEQLREALTHENBEGINEXTERNC1HC1HC1LC1LC2HC2HC2LC2LCOPRIXCOPRIXKDNEGBKDNEGBCNSTCMCNSTCMC1HARG2NOCONST1CW3FULLC1LARG2NOCONST2CW4FULLCOPRIXKDNEGBCKA10FFLGREGCKA10CNSTCMMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYC2HENTRYC2LSYMTYPARG2NOVALTYPEXOPWDTBLSEAENDENDELSEMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYARG2NOCONST1CW3FULLENTRYARG2NOCONST2CW4FULLSYMTYPARG2NOVALTYPEXOPWDTBLSEAENDENDC	 			ARG2NODE_NEGCNST(ARG2NODE);
BCNODEA2NEGFEXOPWDC	 			CNODE[A2NEGFLG]_0;
BENDC	 		END;
BENDC	 	END;
BC	 
BCNODEARG2PTRIGHTARG2NOC	 	CNODE[ARG2PTR]_.ARG2NODE;
BC	 
BC	 
BC	 	%(*** CHECK FOR
BC	 		(-A)*(-B)=A*B
BC	 		(-A)/(-B)=A/B
BC	 	***)%
BIFCNODEA1NEGFEXOPWDANDCNODEA2NEGFEXOPWDC	 	IF .CNODE[A1NEGFLG] AND .CNODE[A2NEGFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFCNODEOPERSPEXOPWDEQLMULOPC	 		IF .CNODE[OPERSP] EQL MULOP
BORCNODEOPERSPEXOPWDEQLDIVOPC	 		OR .CNODE[OPERSP] EQL DIVOP
BTHENC	 		THEN
BBEGINC	 		BEGIN
BCNODEA1NEGFEXOPWDC	 			CNODE[A1NEGFLG]_0;
BCNODEA2NEGFEXOPWDC	 			CNODE[A2NEGFLG]_0;
BENDC	 		END;
BENDC	 	END;
BNEGFLGPARNEGC	 	NEGFLG_.PARNEG;
BNOTFLGPARNOTC	 	NOTFLG_.PARNOT;
BC	 
BC	 	%(****CHECK FOR CONSTANT OPERATIONS AND OPERATIONS ON IDEXTICAL ARGS THAT CAN BE FOLDED***)%
BRETURNARSKOPCNODEC	 	RETURN ARSKOPT(.CNODE);
BC	 
BENDC	 END;
BLISS  V. 1.0-2.12	5-JUN-73  20:36:58	P2S1	P2S1.BLI		PAGE 48-1

BC	 
BGLOBALDBROUTINARSKOPCNODEC	 GLOBAL ROUTINE ARSKOPT(CNODE)=
BC	 %(***************************************************************************
BC	 	FOR AN ARITHMETIC NODE, CHECK FOR OPERATIONS ON CONSTANTS AND ON IDENTICAL ARGS THAT CAN BE FOLDED.
BC	 	CALLED WITH THE ARG CNODE POINTING TO AN ARITHMETIC EXPRESSION NODE.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BMAPPEXPRNCNODECNODEC	 	MAP PEXPRNODE CNODE;
BOWNPEXPRNARG1NOARG1NOARG2NOC	 	OWN PEXPRNODE ARG1NODE:ARG2NODE;
BLABELFOLDCNC	 	LABEL FOLDCNST;
BC	 
BARG1NOCNODEARG1PTLEFTC	 	ARG1NODE_.CNODE[ARG1PTR];
BARG2NOCNODEARG2PTRIGHTC	 	ARG2NODE_.CNODE[ARG2PTR];
BC	 
BC	 
BC	 
BC	 	%(***
BC	 	CHECK FOR BOTH OPERANDS CONSTANTS.  IF SO, PERFORM THE
BC	 	OPERATION AT COMPILE TIME - CREATE A CONSTANT TABLE ENTRY
BC	 	FOR THE NEW CONSTANT WHICH IS THE RESULTS
BC	 	***)%
BIFARG1NOOPR1EXOPWDEQLCONSTFANDARG2NOOPR1EXOPWDEQLCONSTFC	 	IF .ARG1NODE[OPR1] EQL CONSTFL AND .ARG2NODE[OPR1] EQL CONSTFL
BC	 		%(***DO NOT FOLD OPERATIONS INVOLVING DOUBLE OCTALS SINCE HAVE COMPLICATIONS
BC	 			DUE TO KEEPING ALL DOUBLE-PRECISION IN KI10 FORMAT UNTIL THE END***)%
BANDARG1NOVALTYPEXOPWDNEQDOUBLOANDARG2NOVALTYPEXOPWDNEQDOUBLOC	 		AND .ARG1NODE[VALTYPE] NEQ DOUBLOCT AND .ARG2NODE[VALTYPE] NEQ DOUBLOCT
BTHENC	 	THEN
BFOLDCNBEGINC	 FOLDCNST:	BEGIN
BC	 		%(***DO NOT FOLD COMPLEX MULTIPLY AND DIVIDE,*****)%
BIFCNODEVALTYPEXOPWDEQLCOMPLEANDMULORDCNODEOPR2EXOPWDEQLOPR2CARITHMORMULOPC	 		IF .CNODE[VALTYPE] EQL COMPLEX AND MULORDIV(CNODE)
BTHENC	 		THEN
BLEAVEFOLDCNC	 		LEAVE FOLDCNST;
BC	 
BC	 
BC	 		%(***GLOBALS USED BY THE ASSEMBLY LANGUAGE ROUTINE THAT
BC	 			PERFORMS THE OPERATIONS ARE
BC	 			 COPRIX, C1H, C1L, C2H, C2L***)%
BC	 
BC	 		%(***FOLD CONSTANTS RAISED TO POWERS OF 2,3,4 ONLY***)%
BIFCNODEOPERSPEXOPWDEQLEXPONOC	 		IF .CNODE[OPERSP] EQL EXPONOP
BTHENC	 		THEN
BBEGINC	 		BEGIN
BC	 			%(***DO NOT FOLD DOUBLE-PREC EXPONENTIATION AT COMPILE TIME***)%
BIFCNODEDBLFLGEXOPWDC	 			IF .CNODE[DBLFLG]
BTHENLEAVEFOLDCNC	 			THEN LEAVE FOLDCNST
BELSEC	 			ELSE
BBEGINC	 			BEGIN
BIFARG2NOVALTP1EXOPWDEQLINTEG1C	 				IF .ARG2NODE[VALTP1] EQL INTEG1
BTHENC	 				THEN
BBEGINC	 				BEGIN
BIFARG2NOCONST2CW4FULLEQLC	 					IF .ARG2NODE[CONST2] EQL 2
BTHENCOPRIXSQROPCNODEVALTP1EXOPWDKSPECBC	 					THEN COPRIX_(SQROP^2+.CNODE[VALTP1]+KSPECB)
BELSEC	 					ELSE
BIFARG2NOCONST2CW4FULLEQLC	 					IF .ARG2NODE[CONST2] EQL 3
BTHENCOPRIXCUBOPCNODEVALTP1EXOPWDKSPECBC	 					THEN COPRIX_(CUBOP^2+.CNODE[VALTP1]+KSPECB)
BELSEC	 					ELSE
BIFARG2NOCONST2CW4FULLEQLC	 					IF .ARG2NODE[CONST2] EQL 4
BTHENCOPRIXP4OPCNODEVALTP1EXOPWDKSPECBC	 					THEN COPRIX_(P4OP^2+.CNODE[VALTP1]+KSPECB)
BLISS  V. 1.0-2.12	5-JUN-73  20:37:13	P2S1	P2S1.BLI		PAGE 48-2

BELSELEAVEFOLDCNC	 					ELSE LEAVE FOLDCNST
BENDC	 				END
BELSELEAVEFOLDCNC	 				ELSE LEAVE FOLDCNST
BENDC	 			END
BENDC	 		END
BELSEC	 		ELSE
BCOPRIXKARITHCNODEOPRSP2EXOPWDCNODEVALTP1EXOPWDIFCKA10FFLGREGCKA10THENKARIABELSEKARIIBC	 		COPRIX_KARITHOPIX(CNODE);
BC	 
BC	 		%(***PICK UP ARG1 AND ARG2. WHEN HAVE PROPAGATED CONSTANTS, WILL HAVE TO
BC	 			WORRY ABOUT NEGFLGS***)%
BC1HARG1NOCONST1CW3FULLC	 		C1H_.ARG1NODE[CONST1];
BC1LARG1NOCONST2CW4FULLC	 		C1L_.ARG1NODE[CONST2];
BC2HARG2NOCONST1CW3FULLC	 		C2H_.ARG2NODE[CONST1];
BC2LARG2NOCONST2CW4FULLC	 		C2L_.ARG2NODE[CONST2];
BC	 
BC	 		%(***COMBINE THE CONSTANTS LEAVING THE RESULTS IN C2H AND C2L***)%
BCNSTCMC	 		CNSTCM();
BC	 
BC	 		%(***SET THE VALFLG IN THE PARENT OF CNODE****)%
BSETPVACNODEC	 		SETPVAL(.CNODE);
BC	 
BC	 
BCNODEMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYC2HENTRYC2LSYMTYPCNODEVALTYPEXOPWDTBLSEAENDC	 		CNODE_MAKECNST(.CNODE[VALTYPE], .C2H, .C2L);
BENDC	 	END;
BC	 
BC	 
BIFCNODEOPRCLSEXOPWDNEQDATAOPC	 	IF .CNODE[OPRCLS] NEQ DATAOPR	!IF DID NOT SUCCEED IN FOLDING THIS NODE ALREADY
BTHENC	 	THEN
BBEGINC	 	BEGIN
BC	 
BC	 		%(****
BC	 			CHECK FOR ONE OF THE ARGUMENTS A CONSTANT
BC	 			IF SO, GO ATTEMPT TO MAKE THE
BC	 			VARIOUS OPTOMIZATIONS THAT CAN BE MADE ON OPS BETWEEN
BC	 			A VARIABLE(OR EXPRESSION) AND A CONSTANT.
BC	 			THESE INCLUDE RECOGNIZING CONSTANTS  AS BEING
BC	 				1. ZERO
BC	 				2. ONE
BC	 				3. MINUS ONE
BC	 				4. POWERS OF 2
BC	 				5. POWER OF 2 PLUS ONE
BC	 		*******)%
BC	 
BIFARG1NOOPR1EXOPWDEQLCONSTFC	 		IF .ARG1NODE[OPR1] EQL CONSTFL
BTHENC	 		THEN
BCNODEARCMBCNODEARG1NOARG2NOTRUEC	 		CNODE_ARCMB(.CNODE,.ARG1NODE,.ARG2NODE,TRUE)
BELSEC	 		ELSE
BIFARG2NOOPR1EXOPWDEQLCONSTFC	 		IF .ARG2NODE[OPR1] EQL CONSTFL
BTHENC	 		THEN
BCNODEARCMBCNODEARG2NOARG1NOFALSEC	 		CNODE_ARCMB(.CNODE,.ARG2NODE,.ARG1NODE,FALSE)
BC	 
BC	 
BC	 
BC	 		%(********
BC	 			CHECK FOR:
BC	 				A+A=2*A
BC	 				A-A=0
BLISS  V. 1.0-2.12	5-JUN-73  20:37:27	P2S1	P2S1.BLI		PAGE 48-3

BC	 				A/A=1
BC	 				A/-A=-1
BC	 		***********)%
BC	 
BELSEC	 		ELSE
BIFCNODEARG1PTLEFTEQLCNODEARG2PTRIGHTC	 		IF (.CNODE[ARG1PTR] EQL .CNODE[ARG2PTR])
BTHENC	 		THEN
BCNODECMBEQLCNODEFALSEC	 		CNODE_CMBEQLARGS(.CNODE,FALSE);
BENDC	 	END;
BC	 
BC	 	%(****CANONICALIZE CNODE AND RETURN THE RESULT*****)%
BRETURNCANONICNODEC	 	RETURN CANONICALIZE(.CNODE);
BENDC	 END;
BLISS  V. 1.0-2.12	5-JUN-73  20:37:28	P2S1	P2S1.BLI		PAGE 49-1

BC	 
BC	 
BGLOBALDBROUTINP2SKLTCNODEC	 GLOBAL ROUTINE P2SKLTP(CNODE)=
BC	 %(********
BC	 	INITIAL PASS OF PHASE 2 SKELETON FOR A TYPE-CONVERSION
BC	 	NODE.
BC	 ********)%
BBEGINC	 BEGIN
BLOCALPEXPRNARGNODARGNODC	 	LOCAL PEXPRNODE ARGNODE;
BLOCALSAVENOC	 	LOCAL SAVENOTFLG;
BC	 
BC	 
BMAPPEXPRNCNODECNODEC	 	MAP PEXPRNODE CNODE;
BC	 
BDEBGNOBEGINEXTERNNODERRIFDEBUGFTHENBEGINIFCNODEEQLTHENNODERRENDENDC	 	DEBGNODETST(CNODE);		!FOR DEBUGGING ONLY
BC	 
BC	 
BARGNODCNODEARG2PTRIGHTC	 	ARGNODE_.CNODE[ARG2PTR];
BC	 
BIFNOTCNODEA2VALFEXOPWDC	 	IF NOT .CNODE[A2VALFLG]
BTHENC	 	THEN
BC	 	%(**PROCESS THE ARGUMENT UNDER THIS NODE.
BC	 		SIMPLY PASS NEG ON DOWN.
BC	 	**)%
BBEGINC	 	BEGIN
BSAVENONOTFLGC	 		SAVENOTFLG_.NOTFLG;	!CANNOT PASS A "NOT" DOWN OVER A TYPE CNV
BNOTFLGFALSEC	 		NOTFLG_FALSE;
BARGNODP2SKL1ARGNODOPRCLSEXOPWDARGNODC	 		ARGNODE_(.P2SKL1DISP[.ARGNODE[OPRCLS]])(.ARGNODE);
BCNODEA2NOTFEXOPWDNOTFLGC	 		CNODE[A2NOTFLG]_.NOTFLG<0,1>;
BNOTFLGSAVENOC	 		NOTFLG_.SAVENOTFLG;
BC	 
BC	 		%(***IF HAVE A NEG PASSED UP TO THIS NODE, MUST CHECK WHETHER IT CAN
BC	 			BE PASSED UP TO THE PARENT OF THIS NODE***)%
BIFNEGFLGANDNOTTAKNEGCNODEPARENTRIGHTC	 		IF .NEGFLG AND NOT TAKNEGARG(.CNODE[PARENT])
BTHENC	 		THEN
BC	 		%(***IF CANNOT PASS THE NEG BACK UP, PUT IT INTO THE TPCNV NODE***)%
BBEGINC	 		BEGIN
BCNODEA2NEGFEXOPWDC	 			CNODE[A2NEGFLG]_1;
BNEGFLGFALSEC	 			NEGFLG_FALSE;
BENDC	 		END;
BENDC	 	END;
BC	 
BC	 
BC	 	%(***PERFORM TYPE-CONVERSION ON A CONSTANT****)%
BIFARGNODOPR1EXOPWDEQLCONSTFC	 	IF .ARGNODE[OPR1] EQL CONSTFL
BTHENC	 	THEN
BBEGINC	 	BEGIN
BC1HARGNODCONST1CW3FULLC	 		C1H_.ARGNODE[CONST1];
BC1LARGNODCONST2CW4FULLC	 		C1L_.ARGNODE[CONST2];
BIFCNODEA2NOTFEXOPWDC	 		IF .CNODE[A2NOTFLG]	!IF MUST TAKE THE "NOT" OF THE ARG
BTHENC	 		THEN
BBEGINC	 		BEGIN
BC1HNOTC1HC	 			C1H_NOT .C1H;
BC1LNOTC1LC	 			C1L_NOT .C1L;
BENDC	 		END;
BIFCNODEA2NEGFEXOPWDC	 		IF .CNODE[A2NEGFLG]	!IF MUST TAKE THE NEG OF THE ARG
BTHENC	 		THEN
BLISS  V. 1.0-2.12	5-JUN-73  20:37:44	P2S1	P2S1.BLI		PAGE 49-2

BBEGINC	 		BEGIN
BIFARGNODVALTYPEXOPWDEQLDOUBLPORARGNODVALTYPEXOPWDEQLREALC	 			IF .ARGNODE[VALTYPE] EQL DOUBLPREC OR .ARGNODE[VALTYPE] EQL REAL
BTHENC	 			THEN
BC	 			%(***FOR DOUBLE PREC (AND REAL) MUST USE ASSEMBLY LANG ROUTINE
BC	 				TO TAKE NEG***)%
BBEGINC	 			BEGIN
BCOPRIXKDNEGBCKA10FFLGREGCKA10C	 				COPRIX_KDNEGB+.CKA10FLG;
BCNSTCMC	 				CNSTCM();
BC1HC2HC	 				C1H_.C2H;
BC1LC2LC	 				C1L_.C2L;
BENDC	 			END
BELSEC	 			ELSE
BBEGINC	 			BEGIN
BC1HC1HC	 				C1H_-.C1H;
BC1LC1LC	 				C1L_-.C1L;
BENDC	 			END
BENDC	 		END;
BCOPRIXKTPCNVCNODEOPERSPEXOPWDCNODEVALTP2EXOPWDKTYPCBC	 		COPRIX_KTPCNVIX(CNODE);
BCNSTCMC	 		CNSTCM();
BC	 
BC	 		%(***SET THE VALFLG IN THE PARENT OF CNODE***)%
BSETPVACNODEC	 		SETPVAL(.CNODE);
BC	 
BRETURNMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYC2HENTRYC2LSYMTYPCNODEVALTYPEXOPWDTBLSEAENDC	 		RETURN MAKECNST(.CNODE[VALTYPE],.C2H,.C2L);
BC	 
BENDC	 	END;
BC	 
BCNODEARG2PTRIGHTARGNODC	 	CNODE[ARG2PTR]_.ARGNODE;
BC	 
BRETURNCNODEC	 	RETURN .CNODE;
BC	 
BENDC	 END;
BLISS  V. 1.0-2.12	5-JUN-73  20:37:58	P2S1	P2S1.BLI		PAGE 50-1

BC	 
BGLOBALDBROUTINP2SKLACNODEC	 GLOBAL ROUTINE P2SKLARR(CNODE)=
BC	 %(********
BC	 	INITIAL PASS OF PHASE 2 SKELETON FOR AN ARRAY REFERENCE.
BC	 	THE EXPRESSION NODE FOR THE ARRAYREF IS ASSUMED TO HAVE THE
BC	 	FOLLOWING 2 ARGS:
BC	 		ARG1PTR - PTR TO THE SYMBOL TABLE ENTRY FOR THE ARRAY NAME
BC	 		ARG2PTR - PTR TO AN EXPRESSION NODE FOR THE ADDRESS CALCULATION
BC	 ********)%
BBEGINC	 BEGIN
BMAPPEXPRNCNODECNODEC	 	MAP PEXPRNODE CNODE;
BLOCALPEXPRNSSNODESSNODEC	 	LOCAL PEXPRNODE SSNODE;
BLOCALPRVNEGPRVNOTC	 	LOCAL PRVNEGFLG,PRVNOTFLG;
BC	 
BDEBGNOBEGINEXTERNNODERRIFDEBUGFTHENBEGINIFCNODEEQLTHENNODERRENDENDC	 	DEBGNODETST(CNODE);		!FOR DEBUGGING ONLY
BC	 
BC	 
BC	 	%(*****UNLESS THE ADDRESS-CALCULATION IS A LEAF, PERFORM THE
BC	 		PHASE 2 SKEL OPTIMIZATIONS ON IT****)%
BIFNOTCNODEA2VALFEXOPWDC	 	IF NOT .CNODE[A2VALFLG]
BTHENC	 	THEN
BBEGINC	 	BEGIN
BSSNODECNODEARG2PTRIGHTC	 		SSNODE_.CNODE[ARG2PTR];
BPRVNEGNEGFLGC	 		PRVNEGFLG_.NEGFLG;
BPRVNOTNOTFLGC	 		PRVNOTFLG_.NOTFLG;
BNEGFLGFALSEC	 		NEGFLG_FALSE;
BNOTFLGFALSEC	 		NOTFLG_FALSE;
BCNODEARG2PTRIGHTP2SKL1SSNODEOPRCLSEXOPWDSSNODEC	 		CNODE[ARG2PTR]_(.P2SKL1DISP[.SSNODE[OPRCLS]])(.SSNODE);
BCNODEA2NEGFEXOPWDNEGFLGC	 		CNODE[A2NEGFLG]_.NEGFLG<0,1>;
BCNODEA2NOTFEXOPWDNOTFLGC	 		CNODE[A2NOTFLG]_.NOTFLG<0,1>;
BNEGFLGPRVNEGC	 		NEGFLG_.PRVNEGFLG;		!CANNOT PASS NEG/NOT DOWN OVER AN
BC	 						! ARRAYREF NODE; HENCE IF WERE TRYING TO DO SO,
BC	 						! PASS THEM BACK UP TO PARENT
BNOTFLGPRVNOTC	 		NOTFLG_.PRVNOTFLG;
BENDC	 	END;
BC	 
BRETURNCNODEC	 	RETURN	.CNODE;
BENDC	 END;
BGLOBALDBROUTINP2SKNECNODEBLISS  V. 1.0-2.12	5-JUN-73  20:38:04	P2S1	P2S1.BLI		PAGE 51-1

C	 GLOBAL ROUTINE P2SKNEGNOT(CNODE)=
BC	 %(***************************************************************************
BC	 	INITIAL PASS OF PHASE 2 SKEL FOR A NEG OR NOT NODE
BC	 	TRANSFORMS:
BC	 		-(-X)=X
BC	 		NOT(NOT X)=X
BC	 	PERFORMS NEG/NOT ON A CONSTANT
BC	 	PASSES NEG AND NOT ON DOWN TO BOTTOMMOST NODES
BC	 	IN MANY CASES
BC	 	WHEN A NEG/NOT CANNOT BE PASSED DOWN ANY FURTHER, THE PARENT
BC	 	NODE HAS A FLAG SET INDICATING "NEGATE(OR COMPLEMENT) THE
BC	 	FIRST (OR 2ND) ARG"; 
BC	 	THE NEGATE/NOT NODE IS REMOVED FROM THE TREE.
BC	 	A NEGATE CANNOT BE PASSED DOWN FROM ABOVE OVER A NOT. IF THIS
BC	 	SITUATION ARISES (EG -(NOT X)), THE NEG WILL BE PASSED BACK UP
BC	 	WHEN THE NOT IS ENCOUNTERED AND IF THE NOT CANNOT BE PROPAGATED DOWN
BC	 	THE NOT NODE MUST BE LEFT IN THE TREE.
BC	 	SIMILARLY, A  NOT CANNOT BE PROPAGATED OVER A NEGATE.
BC	 
BC	 	WHEN A NEGATE OR NOT CANNOT BE PROPAGATED DOWNWARD, THEN
BC	 	DEPENDING ON WHAT THE PARENT NODE OVER THE NEG/NOT NODE IS, THE NEG OR
BC	 	NOT MAY IN SOME CASES BE PROPAGATED BACK UPWARD.
BC	 ***************************************************************************)%
BBEGINC	 BEGIN
BEXTERNSETPIMC	 	EXTERNAL SETPIMMED;
BMAPPEXPRNCNODECNODEC	 	MAP PEXPRNODE CNODE;
BLOCALPEXPRNARGNODARGNODC	 	LOCAL PEXPRNODE ARGNODE;
BOWNPEXPRNPARNODPARNODC	 	OWN PEXPRNODE PARNODE;			!PTR TO PARENT NODE
BC	 
BC	 	%(***DEFINE MACRO TO REMOVE THE NEG/NOT NODE FROM THE TREE***)%
BMACROREMOVEC	 	MACRO REMOVE=
BC	 	BEGIN
BC	 		%(***IF ARG IS A LEAF, SET VALFLG IN PARENT OF CNODE***)%
BC	 		IF .ARGNODE[OPRCLS] EQL DATAOPR OR .CNODE[A2VALFLG]
BC	 		THEN
BC	 		BEGIN
BC	 			 SETPVAL(.CNODE);
BC	 
BC	 			%(***IF THE IMMEDIATE-FLAG WAS SET IN THE NEG/NOT NODE, SET IT
BC	 				IN THE PARENT OF THE NEG/NOT NODE***)%
BC	 			IF .CNODE[A2IMMEDFLG]
BC	 			THEN SETPIMMED(.CNODE);
BC	 
BC	 		END
BC	 
BC	 		%(***OTHERWISE SET PARENT PTR OF THE ELEMENT BELOW CNODE
BC	 			AND IF HAVE A PARENFLG ON CNODE, PUT IT ON THE ELEMENT BELOW**)%
BC	 		ELSE
BC	 		BEGIN
BC	 			 ARGNODE[PARENT]_.CNODE[PARENT];
BC	 			IF .CNODE[PARENFLG] THEN ARGNODE[PARENFLG]_1;
BC	 		END;
BC	 		RETURN .ARGNODE;
BC	 	END$;
BC	 
BC	 	%(***DEFINE A MACRO TO LEAVE A NEG NODE IN THE TREE, AND RETURN WITH NEGFLG=FALSE***)%
BMACROLEAVENC	 	MACRO LEAVENEG=
BLISS  V. 1.0-2.12	5-JUN-73  20:38:06	P2S1	P2S1.BLI		PAGE 51-2

BC	 	BEGIN
BC	 		NEGFLG_FALSE;
BC	 		RETURN .CNODE;
BC	 	END$;
BC	 
BC	 	%(***DEFINE A MACRO TO LEAVE A NOT NODE IN THE TREE, AND RETURN WITH NOTFLG=FALSE***)%
BMACROLEAVENC	 	MACRO LEAVENOT=
BC	 	BEGIN
BC	 		NOTFLG_FALSE;
BC	 		RETURN .CNODE;
BC	 	END$;
BC	 
BC	 
BC	 
BDEBGNOBEGINEXTERNNODERRIFDEBUGFTHENBEGINIFCNODEEQLTHENNODERRENDENDC	 	DEBGNODETST(CNODE);		!FOR DEBUGGING ONLY
BC	 
BARGNODCNODEARG2PTRIGHTC	 	ARGNODE_.CNODE[ARG2PTR];
BC	 
BIFCNODEOPERSPEXOPWDEQLNEGOPC	 	IF .CNODE[OPERSP] EQL NEGOP
BTHENC	 	THEN
BC	 	%(***IF CNODE IS A 'NEG' NODE (UNARY MINUS)***)%
BBEGINC	 	BEGIN
BC	 		%(***IF WERE TRYING TO PROPAGATE A 'NOT' FROM ABOVE
BC	 			CANNOT PROPAGATE IT ACROSS A NEG NODE***)%
BIFNOTFLGC	 		IF .NOTFLG
BTHENC	 		THEN
BRETURNNOTOFNCNODEC	 		RETURN NOTOFNEG(.CNODE);
BC	 
BNEGFLGNOTNEGFLGC	 		NEGFLG_NOT .NEGFLG;
BENDC	 	END
BC	 
BELSEC	 	ELSE
BIFCNODEOPERSPEXOPWDEQLNOTOPC	 	IF .CNODE[OPERSP] EQL NOTOP
BTHENC	 	THEN
BC	 	%(***IF CNODE IS A 'NOT' NODE***)%
BBEGINC	 	BEGIN
BIFNEGFLGC	 		IF  .NEGFLG
BTHENC	 		THEN
BC	 		%(***IF WERE TRYING TO PROPAGATE A 'NEG' FROM ABOVE,
BC	 			CANNOT PROPAGATE IT ACROSS A 'NOT' NODE***)%
BRETURNNEGOFNCNODEC	 		RETURN NEGOFNOT(.CNODE);
BNOTFLGNOTNOTFLGC	 		NOTFLG_NOT .NOTFLG;
BENDC	 	END;
BC	 
BC	 
BIFCNODEA2VALFEXOPWDC	 	IF .CNODE[A2VALFLG]
BTHENC	 	THEN
BC	 
BC	 	%(***IF THE ARGUMENT UNDER CNODE IS A LEAF***)%
BC	 
BBEGINC	 	BEGIN
BC	 
BC	 		%(****IF THE ARG IS A CONSTANT, CREATE A NEW CONSTANT TABLE ENTRY***)%
BIFARGNODOPR1EXOPWDEQLCONSTFC	 		IF .ARGNODE[OPR1] EQL CONSTFL
BTHENC	 		THEN
BBEGINC	 		BEGIN
BIFNEGFLGC	 			IF .NEGFLG
BLISS  V. 1.0-2.12	5-JUN-73  20:38:10	P2S1	P2S1.BLI		PAGE 51-3

BTHENC	 			THEN
BC	 			%(****FOR NEG***)%
BBEGINC	 			BEGIN
BNEGFLGFALSEC	 				NEGFLG_FALSE;
BC	 				%(***SET THE VALFLG IN THE PARENT OF THE NEG***)%
BSETPVACNODEC	 				SETPVAL(.CNODE);
BRETURNNEGCNSBEGINIFARGNODVALTYPEXOPWDEQLDOUBLPORARGNODVALTYPEXOPWDEQLREALTHENBEGINEXTERNC1HC1HC1LC1LC2HC2HC2LC2LCOPRIXCOPRIXKDNEGBKDNEGBCNSTCMCNSTCMC1HARGNODCONST1CW3FULLC1LARGNODCONST2CW4FULLCOPRIXKDNEGBCKA10FFLGREGCKA10CNSTCMMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYC2HENTRYC2LSYMTYPARGNODVALTYPEXOPWDTBLSEAENDENDELSEMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYARGNODCONST1CW3FULLENTRYARGNODCONST2CW4FULLSYMTYPARGNODVALTYPEXOPWDTBLSEAENDENDC	 				RETURN NEGCNST(ARGNODE);
BENDC	 			END;
BC	 
BIFNOTFLGC	 			IF .NOTFLG
BTHENC	 			THEN
BC	 			%(****FOR NOT***)%
BBEGINC	 			BEGIN
BNOTFLGFALSEC	 				NOTFLG_FALSE;
BC	 				%(***SET THE VALFLG IN THE PARENT OF THE NOT***)%
BSETPVACNODEC	 				SETPVAL(.CNODE);
BRETURNNOTCNSMAKECNBEGINEXTERNTBLSEATBLSEANAMECONTABENTRYNOTARGNODCONST1CW3FULLENTRYNOTARGNODCONST2CW4FULLSYMTYPARGNODVALTYPEXOPWDTBLSEAENDC	 				RETURN NOTCNST(ARGNODE);
BENDC	 			END;
BENDC	 		END;
BENDC	 	END
BC	 
BC	 
BELSEC	 	ELSE
BC	 	%(***IF ARG IS NOT A LEAF, TRY TO PROPAGATE NEG AND NOT OVER IT***********)%
BBEGINC	 	BEGIN
BARGNODP2SKL1ARGNODOPRCLSEXOPWDARGNODC	 		ARGNODE_  (.P2SKL1DISP[.ARGNODE[OPRCLS]])(.ARGNODE);
BCNODEARG2PTRIGHTARGNODC	 		CNODE[ARG2PTR]_.ARGNODE;
BENDC	 	END;
BC	 
BC	 
BC	 	%(****IF ARE LEFT WITH A NEG OR NOT THAT COULD NOT BE PROPAGATED DOWN, DECIDE
BC	 		WHETHER OR NOT TO COLLAPSE IT UP INTO THE PARENT ON THE BASIS
BC	 		OF THE OPERATOR CLASS OF THE PARENT
BC	 	*******)%
BC	 
BIFNEGFLGC	 	IF .NEGFLG
BTHENC	 	THEN
BBEGINC	 	BEGIN
BIFTAKNEGCNODEPARENTRIGHTC	 		IF TAKNEGARG(.CNODE[PARENT])
BTHENC	 		THEN
BREMOVEBEGINIFARGNODOPRCLSEXOPWDEQLDATAOPORCNODEA2VALFEXOPWDTHENBEGINSETPVACNODEIFCNODEA2IMMEEXOPWDTHENSETPIMCNODEENDELSEBEGINARGNODPARENTRIGHTCNODEPARENTRIGHTIFCNODEPARENFEXOPWDTHENARGNODPARENFEXOPWDENDRETURNARGNODENDC	 		REMOVE
BELSEC	 		ELSE
BLEAVENBEGINNEGFLGFALSERETURNCNODEENDC	 		LEAVENEG;
BC	 
BENDC	 	END
BC	 
BELSEC	 	ELSE
BC	 
BC	 	%(***IF HAVE A NOT THAT WERE UNABLE TO PROPAGATE DOWN***)%
BIFNOTFLGC	 	IF .NOTFLG
BTHENC	 	THEN
BBEGINC	 	BEGIN
BPARNODCNODEPARENTRIGHTC	 		PARNODE_.CNODE[PARENT];
BC	 
BC	 		%(***MAY BE ABLE TO REMOVE THE NOT NODE BY FOLDING THE NOT UP ONTO
BC	 			THE PARENT. THIS DEPENDS ON THE OPRCLS OF THE PARENT***)%
BCASEPARNODOPRCLSEXOPWDOFSETC	 		CASE .PARNODE[OPRCLS] OF SET
BLISS  V. 1.0-2.12	5-JUN-73  20:38:24	P2S1	P2S1.BLI		PAGE 51-4

BREMOVEBEGINIFARGNODOPRCLSEXOPWDEQLDATAOPORCNODEA2VALFEXOPWDTHENBEGINSETPVACNODEIFCNODEA2IMMEEXOPWDTHENSETPIMCNODEENDELSEBEGINARGNODPARENTRIGHTCNODEPARENTRIGHTIFCNODEPARENFEXOPWDTHENARGNODPARENFEXOPWDENDRETURNARGNODENDC	 		REMOVE;			!BOOLEAN NODES ABSORB NOT ON SONS
BLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 		LEAVENOT;		!SHOULD NEVER SEE A DATA NODE AS A "PARENT"
BLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 		LEAVENOT;		!RELATIONALS CANNOT ABSORB 'NOT' FROM SONS
BC	 					! (NOTE HOWEVER THAT THEY DO ABSORB 'NOT' PROPAGATED
BC	 					! DOWN FROM ABOVE THEM
BLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 		LEAVENOT;		!NOT ON AN ARG TO A FN CALL CANNOT BE ABSORBED
BLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 		LEAVENOT;		!ARITHMETIC NODES DO NOT ABSORB NOT
BBEGINC	 		BEGIN			!TYPE-CONV NODES ABSORB NOT EXCEPT
BIFNOCNVBEGINPARNODNOCNVFEXOPWDORPARNODVALTP2EXOPWDEQLPARNODOPERSPEXOPWDORPARNODOPERSPEXOPWDLSSFROMINANDNOTPARNODDBLFLGEXOPWDORPARNODSDBLFLEXOPWDANDNOTPARNODA2IMMEEXOPWDENDC	 			IF NOCNV(PARNODE)	! FOR THOSE THAT DONT ACTUALLY
BTHENLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 			THEN LEAVENOT
BELSEREMOVEBEGINIFARGNODOPRCLSEXOPWDEQLDATAOPORCNODEA2VALFEXOPWDTHENBEGINSETPVACNODEIFCNODEA2IMMEEXOPWDTHENSETPIMCNODEENDELSEBEGINARGNODPARENTRIGHTCNODEPARENTRIGHTIFCNODEPARENFEXOPWDTHENARGNODPARENFEXOPWDENDRETURNARGNODENDC	 			ELSE REMOVE		! GENERATE ANY CODE
BENDC	 		END;
BREMOVEBEGINIFARGNODOPRCLSEXOPWDEQLDATAOPORCNODEA2VALFEXOPWDTHENBEGINSETPVACNODEIFCNODEA2IMMEEXOPWDTHENSETPIMCNODEENDELSEBEGINARGNODPARENTRIGHTCNODEPARENTRIGHTIFCNODEPARENFEXOPWDTHENARGNODPARENFEXOPWDENDRETURNARGNODENDC	 		REMOVE;			!ARRAY-REF NODES ABSORB NOT ON THE ADDR CALC
BREMOVEBEGINIFARGNODOPRCLSEXOPWDEQLDATAOPORCNODEA2VALFEXOPWDTHENBEGINSETPVACNODEIFCNODEA2IMMEEXOPWDTHENSETPIMCNODEENDELSEBEGINARGNODPARENTRIGHTCNODEPARENTRIGHTIFCNODEPARENFEXOPWDTHENARGNODPARENFEXOPWDENDRETURNARGNODENDC	 		REMOVE;			!COMMON SUBEXPR NODES ABSORB NOT
BREMOVEBEGINIFARGNODOPRCLSEXOPWDEQLDATAOPORCNODEA2VALFEXOPWDTHENBEGINSETPVACNODEIFCNODEA2IMMEEXOPWDTHENSETPIMCNODEENDELSEBEGINARGNODPARENTRIGHTCNODEPARENTRIGHTIFCNODEPARENFEXOPWDTHENARGNODPARENFEXOPWDENDRETURNARGNODENDC	 		REMOVE;			!NEG/NOT NODES ABSORN NOT
BREMOVEBEGINIFARGNODOPRCLSEXOPWDEQLDATAOPORCNODEA2VALFEXOPWDTHENBEGINSETPVACNODEIFCNODEA2IMMEEXOPWDTHENSETPIMCNODEENDELSEBEGINARGNODPARENTRIGHTCNODEPARENTRIGHTIFCNODEPARENFEXOPWDTHENARGNODPARENFEXOPWDENDRETURNARGNODENDC	 		REMOVE;			!THE SPECIAL-CASE OPERATORS ABSORB NOT
BLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 		LEAVENOT;		!FIELD-REF - NOT IN RELEASE 1
BLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 		LEAVENOT;		!STORECLS - SHOULD NOT OCCUR IN P2S
BLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 		LEAVENOT;		!REGCONTENTS - NOT ABOVE NEG/NOT
BLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 		LEAVENOT;		!LABOP
BBEGINC	 		BEGIN			!STATEMENT - FOR ASSIGNMENT AND LOGICAL IF,
BC	 					! PARENT CAN ABSORN NOT, OTHERWISE IT CANT
BIFPARNODSRCIDEQLASGNIDORPARNODSRCIDEQLIFLIDC	 			IF .PARNODE[SRCID] EQL ASGNID OR .PARNODE[SRCID] EQL IFLID
BTHENREMOVEBEGINIFARGNODOPRCLSEXOPWDEQLDATAOPORCNODEA2VALFEXOPWDTHENBEGINSETPVACNODEIFCNODEA2IMMEEXOPWDTHENSETPIMCNODEENDELSEBEGINARGNODPARENTRIGHTCNODEPARENTRIGHTIFCNODEPARENFEXOPWDTHENARGNODPARENFEXOPWDENDRETURNARGNODENDC	 			THEN REMOVE
BELSELEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 			ELSE LEAVENOT
BENDC	 		END;
BLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 		LEAVENOT;		!IOLSCLS - CANNOT PROPAGATE
BLEAVENBEGINNOTFLGFALSERETURNCNODEENDC	 		LEAVENOT;		!INLINFN - CANNOT PROPAGATE FOR ALL OF
BC	 					! THEM, SO DONT BOTHER
BTESC	 		TES;
BENDC	 	END
BC	 
BC	 
BC	 	%(***IF THE NEG OR NOT WAS ABSORBED BELOW THIS NODE, CAN REMOVE THE NEG/NOT NODE
BC	 		FROM THE TREE****)%
BELSEC	 	ELSE
BREMOVEBEGINIFARGNODOPRCLSEXOPWDEQLDATAOPORCNODEA2VALFEXOPWDTHENBEGINSETPVACNODEIFCNODEA2IMMEEXOPWDTHENSETPIMCNODEENDELSEBEGINARGNODPARENTRIGHTCNODEPARENTRIGHTIFCNODEPARENFEXOPWDTHENARGNODPARENFEXOPWDENDRETURNARGNODENDC	 	REMOVE;
BC	 
BENDC	 END;
BLISS  V. 1.0-2.12	5-JUN-73  20:39:55	P2S1	P2S1.BLI		PAGE 52-1

BC	 
BENDDBBLISS  V. 1.0-2.12	5-JUN-73  20:39:55	P2S1	P2S1.BLID
MODULE LENGTH = 1531+95
                                                                                                                                       K!;^