!14 FEB 73   NISY2.SIM   SYMBOL TABLE ROUTINES    *MH

DEF S.ENTRY.SIZE AS 4           !SIZE OF SYMBOL TABLE ENTRY
DEF S.I.N.E.L AS 0        !INIT NUM SYMBOL ELEMENTS
FIND H.T.ENTRIES          !NUM ENTRIES IN H. T.; INIT 0
FIND H.T.AREA             !PTR TO AREA
FIND H.T.SZ               !ACTUAL SIZE
FIND H.T.SZ.X             !INDEX INTO PRIME TABLE
FIND S.TBL.PTR            !SYMBOL TBL AREA PTR
FIND STORE(0)

FIND %N.OFF.PACK
FIND %FM.STRING
FIND %C.AREA
FIND %G.ELMT
FIND %C.ELMTS
FIND %SET.SYMBOL.VALUE
FIND %SET.FAST
FIND %SET.HIDDEN

GLOBAL %INIT.S.T

GLOBAL CMD.STR()

!CAUTION: *** THIS TABLE IS DUPLICATED IN NISY1.SIM ***
TABLE PRIME(0:14)[3,7,13,31,61,127,251,509,1021,2039,4093,8191, &
                  16381,32749,65521]
!
%INIT.S.T                       !INITIALIZE SYMBOL TABLE
!INPUT: NONE
!VALUE: TRUE IF SUCCESSFUL; ELSE FALSE

LOCAL %SUB.C.INT
LOCAL %SUB.INT
LOCAL P

!CREATE HASH TABLE; INITIALIZE AREA; SIZE; SIZE INDEX; NUM ENTRIES
H.T.ENTRIES Z 0
[P;H.T.AREA] Z &
DOUBLE C.AREA(H.T.SZ Z PRIME(H.T.SZ.X Z 0))
H.T.AREA Z N.OFF.PACK(H.T.AREA,0) !MOVE AREA NAME TO AREA FIELD
HTCREATED:NULL
IF NOT P THEN RETURN(FALSE)

!CREATE AND REMEMBER SYMBOL TABLE
S.TBL.PTR Z C.ELMTS(S.ENTRY.SIZE,S.I.N.EL)
STCREATED:NULL

!DEFINE TABLES FOR SYMBOL TABLE INITIALIZATION
!NAME STRING,SYMBOL TYPE,SYMBOL VALUE TYPE,SYMBOL VALUE,FAST.L,LOCK.P

TABLE CT.1(0:18) &
 [       1,S.T.CMND,S.V.T.INT,  BCKT.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,  CHAN.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,  ECHO.CMND,0,TRUE &
 ,0]
TABLE CT.2(0:18) &
 [       1,S.T.CMND,S.V.T.INT, ECHOR.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,  NULL.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT, PAUSE.CMND,0,TRUE &
 ,0]
TABLE CT.3(0:18) &
 [       1,S.T.CMND,S.V.T.INT,  QUIT.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT, RTEXT.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT, STEXT.CMND,0,TRUE &
 ,0]
TABLE CT.4(0:18) &
 [       1,S.T.CMND,S.V.T.INT, SENDV.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,  SETV.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,   VAR.CMND,0,TRUE &
 ,0]
TABLE CT.5(0:18) &
 [       1,S.T.CMND,S.V.T.INT,WSLAVE.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,  ZCKT.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,  DATA.CMND,0,TRUE &
 ,0]
TABLE CT.6.(0:18) &
 [    1,S.T.CMND,S.V.T.INT,   ERR.CMND,0,TRUE &
 ,  1,S.T.CMND,S.V.T.INT,  OPEN.CMND,0,TRUE &
 , 1,S.T.CMND,S.V.T.INT, CLOSE.CMND,0,TRUE &
 ,0]
TABLE CT.7(0:18) &
 [       1,S.T.CMND,S.V.T.INT, SBLKS.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT, ERASE.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,CLOSEA.CMND,0,TRUE &
 ,0]
TABLE CT.8(0:18) &
 [       1,S.T.CMND,S.V.T.INT, WRITE.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,RENAME.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT, RBLKS.CMND,0,TRUE &
 ,0]
TABLE CT.9(0:18) &
 [       1,S.T.CMND,S.V.T.INT, STEST.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,SETCP.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,SENDFS.CMND,0,TRUE &
 ,0]
TABLE CT.10(0:18) &
 [       1,S.T.CMND,S.V.T.INT, SETBS.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT, SETFS.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT, CHOKE.CMND,0,TRUE &
 ,0]
TABLE CT.11(0:18) &
 [       1,S.T.CMND,S.V.T.INT,  ACKP.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT,BCKSUM.CMND,0,TRUE &
 ,       1,S.T.CMND,S.V.T.INT, BDATA.CMND,0,TRUE &
 ,0]
TABLE CT.12(0:6) &
 [       1,S.T.CMND,S.V.T.INT,  MACK.CMND,0,TRUE &
 ,0]
TABLE T.11(0:18) &
 ['TRUE',S.T.VAR,S.V.T.INT,TRUE,0,TRUE &
 ,'FALSE',S.T.VAR,S.V.T.INT,FALSE,0,TRUE &
 ,'VERSION',S.T.VAR,S.V.T.INT,VERSION,0,TRUE &
 ,0]
TABLE T.12(0:18) &
 ['PATTERN',S.T.VAR,S.V.T.INT,HEX 102,PATTERN,FALSE &
 ,'DISCARDP',S.T.VAR,S.V.T.INT,FALSE,DISCARD.P,FALSE &
 ,'CHOKE',S.T.VAR,S.V.T.INT,INIT.CHOKE,CHOKE,FALSE &
 ,0]
TABLE T.13(0:18) &
 ['AUDLEV',S.T.VAR,S.V.T.INT,INIT.AUDIT.LEVEL,AUDIT.LEVEL,FALSE &
 ,'ECHOP',S.T.VAR,S.V.T.INT,FALSE,ECHO.P,FALSE &
 ,'CURFILE',S.T.VAR,S.V.T.NIL,T.V.T.NIL,CURFILE,FALSE &
 ,0]
TABLE T.14(0:18) &
 ['AUDFILE',S.T.VAR,S.V.T.LIT,I.AUD.F.N,AUD.FILE,FALSE &
 ,'MASTERP',S.T.VAR,S.V.T.INT,I.MASTER.P,MASTER.P,FALSE &
 ,'STDBLKSZ',S.T.VAR,S.V.T.INT,I.STD.BLK.SZ,0,FALSE &
 ,0]

!DEFINE A MACRO TO EASE THE NEXT FEW THINGS
DEF SET(TBL) AS IF NOT SUB.INT(TBL)THEN RETURN(FALSE)
DEF SETC(TBL) AS IF NOT SUB.C.INT(TBL) THEN RETURN (FALSE)

!NOW SET ALL THE INITIAL VALUES TO THE SYMBOL TABLE
SETT1: &
SETC(CT.1)
SETT2:  &
SETC(CT.2)
SETC(CT.3)
SETC(CT.4)
SETC(CT.5)
SETC(CT.6)
SETC(CT.7)
SETC(CT.8)
SETC(CT.9)
SETC(CT.10)
SETC(CT.11)
SETC(CT.12)
SET(T.11)
SET(T.12)
SET(T.13)
SETT14:  &
SET(T.14)
ALLSET: NULL

!ALL THROUGH INITIALIZING THE SYMBOL TABLE
RETURN(TRUE)
!
%SUB.INT(T())                        !SUB INIT SYMB TBL
!INPUT: TABLE ADDRESS
!VALUE: TRUE IF SUCCESSFUL, ELSE FALSE

LOCAL S.V

WHILE T(0) # 0 &
 THEN &
  DO           !WE HAVE AN ENTRY TO MAKE
  S.V Z T(3)                   !SYMBOL VALUE
  IF T(2) !SYMBOL VALUE TYPE! = S.V.T.LIT &
   THEN S.V Z FM.STRING(E.O.L,CHPT(T(3))) !MAP LIT TO BUFFERLETS
SETSV:  &
  IF NOT SET.SYMBOL.VALUE(FM.STRING(E.O.L,CHPT(T(0))),T(1),T(2),S.V) &
   THEN RETURN(FALSE)                  !CANNOT MAKE DEFINITION
HIDDEN:  &
  IF NOT SET.HIDDEN(FM.STRING(E.O.L,CHPT(T(0))),T(1),T(4),T(5)) &
   THEN RETURN(FALSE)                  !CANNOT SET HIDDEN PARAMS
  !STEP TO NEXT ENTRY
STEP: &
  T Z T+6
  END

RETURN(TRUE)
END SUB.INT
%SUB.C.INT(T())                        !SUB INIT SYMB TBL COMMANDS
!INPUT: TABLE ADDRESS
!VALUE: TRUE IF SUCCESSFUL, ELSE FALSE

LOCAL S.V

WHILE T(0) # 0 &
 THEN &
  DO           !WE HAVE AN ENTRY TO MAKE
  S.V Z T(3)                   !SYMBOL VALUE
  IF T(2) !SYMBOL VALUE TYPE! = S.V.T.LIT &
   THEN S.V Z FM.STRING(E.O.L,CHPT(T(3))) !MAP LIT TO BUFFERLETS
SETSV:  &
  IF NOT SET.SYMBOL.VALUE(FM.STRING(E.O.L,CHPT(CMD.STR(T(3)))),T(1),T(2),S.V) &
   THEN RETURN(FALSE)                  !CANNOT MAKE DEFINITION
HIDDEN:  &
  IF NOT SET.HIDDEN(FM.STRING(E.O.L,CHPT(CMD.STR(T(3)))),T(1),T(4),T(5)) &
   THEN RETURN(FALSE)                  !CANNOT SET HIDDEN PARAMS
  !STEP TO NEXT ENTRY
STEP: &
  T Z T+6
  END

RETURN(TRUE)
END SUB.C.INT
END INIT.S.T
