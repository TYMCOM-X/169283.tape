TITLE   PERPRM - PERFORM COMMAND PRIMITIVES
SUBTTL  GARY GERE - VERSION 1.00- JULY, 1973

        ENTRY TYPHLP

; TYPHLP -- TYPES HELP MESSAGE FOR YOU
TYPHLP: OUTSTR  HLPMSG          ;TYPE MESSAGE
        JRST    @17             ;RETURN

HLPMSG: ASCIZ \
THE PERFORM COMMAND ALLOWS YOU TO EXECUTE A SERIES OF COMMANDS FROM
A FILE.  THE CALLING SEQUENCE IS:

        -PERFORM <PERFORM FILE NAME>
OR OPTIONALLY
        -R PERFORM
        FILE NAME: <PERFORM FILE NAME>

THE 'PERFORM FILE' CONTAINS INPUT EXACTLY AS YOU WOULD ENTER IT FROM
YOUR TERMINAL.  IT MAY CONTAIN ANY INPUT WHICH WOULD NORMALLY BE
VALID.  THERE ARE THREE FORMS OF INPUT:

A. MONITOR/EXEC INPUT:  A LINE BEGINNING WITH A '.' CHARACTER SIGNIFIES
THAT THE NEXT INPUT IS DIRECTED AT THE SYSTEM EXECUTIVE, AND AS SUCH
DIRECTS PERFORM TO SEND ONE ESCAPE(CONTROL-C) BEFORE SENDING THE
COMMAND.  THIS WILL FORCE ANY PROGRAM BACK TO THE EXECUTIVE WHEN THEY
WOULD OTHERWISE INPUT THE COMMAND.

B. PROGRAM INPUT:  A LINE BEGINNING WITH A '*' SIGNIFIES THAT THE INPUT
IS GOING TO A PROGRAM, SUBSYSTEM, ETC. AND AS SUCH PERFORM SHOULD NOT
DO ANYTHING SPECIAL.

C. ANY-ONE'S INPUT:  A LINE NOT BEGINNING WITH A '.' OR '*' WILL BE
SENT WITHOUT MODIFICATION OR CHECKING.

NORMALLY, A TYPE 'A' LINE SHOULD BE SENT ONLY WHEN IT IS DESIRED TO 
ESCAPE A PROGRAM (SUCH AS PIP, LISTER, ETC.) WHICH DOES NOT HAVE A 
FACILITY FOR RETURNING TO THE MONITOR/EXECUTIVE LEVEL.  OTHERWISE, A 
TYPE 'C' LINE SHOULD BE SENT FOR MONITOR/EXECUTIVE COMMANDS, AND A TYPE
'B' LINE SHOULD BE SENT FOR PROGRAM COMMANDS.

IN ADDITION, THE FIRST LINE OF THE 'PERFORM' FILE MAY SPECIFY AN
OUTPUT FILE.  THE FORMAT IS:

                :<OUTPUT FILE NAME>

THE DEFAULT OUTPUT DEVICE IS THE TERMINAL.

EXAMPLE:

      FILE PERFOR.JOB:

        .DAY
        R BASIC
        *OLD FOO
        *RUN
        15624
        2304
        .KJOB

      EXECUTION:

        -PERFORM PERFOR.JOB

        -DAY
        8-JUL-73 12:03:17

        -R BASIC

        NEW OR OLD--OLD FOO

        READY

        RUNNH

        HOW MANY TIMES? 15624
        WHAT AREA? 2304

        RESULT =  0.0472553

        READY

        -KJOB

\

        ENTRY USR1

; USR1 - GETS AND RETURNS, IN 1, USER NAME PART 1
USR1:   MOVE    1,[-1,,-22]     ;GETTAB ADR
        GETTAB  1,              ;GET TABLE
        JRST    .+1             ;IGNORE ERROR
        JRST    @17             ;RETURN

        ENTRY USR2

; USR2 - GETS AND RETURNS, IN 1, USER NAME PART 2
USR2:   MOVE    1,[-1,,-21]     ;GET TAB ADR
        JRST    USR1+1          ;USE CODE ABOVE

        ENTRY   GETSYS

; GETSYS - RETURNS FIRST SIX-BIT WORD OF SYSTEM NUMBER
GETSYS: HRRZI   1,11            ;NAME OF SYSTEM [0,,11] GETTAB
        JRST    USR1+1          ;USE CODE ABOVE

        ENTRY   GETAUX

; GETAUX - GETS AUXILIARY CIRCUIT
; 1 WILL CONTAIN THE ADR OF BUFFER
GETAUX: CREAUX  1,              ;TRY AND GET AUX. CIRCUIT
        JRST    .+2             ;ERROR - 1 HAS ERR CODE
        MOVN    1,1             ;MAKE CHAN # NEG. = OKAY RET
        JRST    @17             ;RETURN

        ENTRY   SETAUX

; SETAUX - PORT NO. IS IN REG. 1
; SEND ACROSS INITIAL PORT GETTER
SETAUX: HRLI    1,5             ;AC-== 5,,PORT - OUTPUT 8-LEV STRING
        MOVS    1,1             ;AC = PORT,,FUNC
        MOVE    2,[POINT 7,INITST]      ;POINTER TO TEXT
        AUXCAL  1,2             ;SEND STRING
        JRST    .+1             ;IRNOGRE ERROR RETURN
        JRST    @17             ;RETURN

INITST: ASCIZ   /*PERFORM*;
SET LOGOUT
TTY ECHO
/

        ENTRY   ENDAUX

; ENDAUX - I = CHAN.NO
; SEND CONTROL-G CONTROL-G AND KJOB
ENDAUX: HRLI    1,5             ;8-LEVEL OUTPUT STRINGF
        MOVS    1,1             ;AC = PORT,,FUNC
        MOVE    2,[POINT 7,LASTR]       ;POINTER TO TEXT
        AUXCAL  1,2             ;SEND STRING
        JRST    .+1             ;IGNORE ERROR
        JRST    @17             ;RETURN

LASTR:  BYTE(7)33,33,3,3,176,7,7,"K","J","O","B",15,12,15,12,0

        ENTRY   ZAP

; ZAP - ZAPS CIRCUIT
; I = CHAN.NO
ZAP:    ZAPCIR  1,              ;ZAP CIRCUIT 1
        JRST    .+1
        JRST    @17             ;RETURN

        END
