
TITLE CROSS - GLOBAL SYMBOL CROSS REFERENCE CUSP - V.004
SUBTTL FILE 2 FOR GLOB V.001 OCT 24 67 - V.002 JULY 15 68 - V.004 JAN 15 69
;COPYRIGHT 1968, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.

;ACCUMULATOR ASSIGNMENTS

BG=10	;BEGINNING OF FREE STORAGE
EN=11	;END OF FREE STORAGE
PT=12	;POINTER TO SYMBOL TABLE
S=13	;PC WORD IN CALLS TO EXEC - JSP S,...
T=14	;TEMPORARY - USED IN CALLS TO EXEC
T1=15	;TEMP+1 - USED IN CALLS TO EXEC
R=16	;RELOCATION BITS FOR CURRENT INPUT BLOCK
P=17	;PUSH DOWN POINTER
F=0	;FLAG REGISTER

C=1	;COUNT OF BINARY WORDS IN CURRENT BLOCK
C1=2	;COUNT OF BINARY WORDS IN CURRENT SUB-BLOCK
B=3	;BINARY WORD
PN=4	;POINTER TO CURRENT PROGRAM NAME
NX=5	;NEXT ITEM IN LINKED CHAIN
V=6	;VALUE OF CURRENT SYMBOL
SP=6	;SAVED SYMBOL POINTER
CC=7	;COMMA COUNT FOR OUTPUT LINE

;FLAGS IN RH OF F

ASWIT=40	;PRINT ALL SYMBOLS
RSWIT=1	;RELOCATABLE SYMBOLS ONLY
FSWIT=2	;FIXED SYMBOLS ONLY
ESWIT=4	;ERRORS ONLY
SSWIT=10	;MULTIPLY SPECIFIED SYMBOLS ONLY
NSWIT=20	;NEVER REFFERENCED SYMBOLS ONLY

;FLAGS IN LH OF F

FST=10	;FIRST TIME CROSS CALLED FLAG
TITL=20	;TITLES ON LISTING CONTROL FLAG
COMMAF=40	;COMMA PRINTED FLAG
LSWIT=100	;LIBRARY SEARCH MODE					***DJB
LSKIP=200	;SKIPPING THIS PROGRAM					***DJB
FCOM=400	;ENTERING COMMON BLOCK SYMBOL				***DJB
FFLAG=1000	;DOING FORTRAN IV FORM					***DJB

INTERNAL CROSS,CROSSP
EXTERNAL GETBIN,LSTOUT,EXPAND,GETBNX

;OTHER PARAMETERS

PTD=200000	;"SYMBOL ALREADY PRINTED" FLAG
RELOC=100000	;"SYMBOL IS RELOCATABLE" FLAG
MULDEF=40000	;"SYMBOL IS MULTIPLY DEFINED" FLAG
MULSPC=400000	;"SYMBOL IS MULTIPLY SPECIFIED" FLAG
SYMLIN=^D9	;NUMBER OF PROGRAM REFERENCES PER LINE IN LISTING
PGLINE=^D50	;NUMBER OF OUTPUT LINES PER PAGE
;PART 1 - GENERATE SYMBOL TABLE


CROSS:	MOVEI PT,-1(BG)	;SET INITIAL POINTER
	MOVEI S,1(BG)	;DESTINATION HALF OF BLT POINTER
	HRL S,BG	;SOURCE HALF
	SETZM (BG)	;CLEAR FIRST WORD OF STORAGE
	BLT S,(EN)	;CLEAR REST OF STORAGE
	TLO F,FST	;FLAG CROSS CALLED

	TLZ	F,FFLAG	;CLEAR FORTRAN IV FLAG				***DJB
NXTBLK:	PUSHJ P,GETBIN	;GET BLOCK TYPE WORD - MAY NOT RETURN
NXTBL1:	HRRZM B,C	;COUNT OF WORDS IN THIS BLOCK
	HLRZM B,T	;BLOCK TYPE
	JUMPE T,NXTBLK	;0 BLOCK TYPE ILLEGAL
	PUSHJ P,GETBIN	;GET RELOCATION WORD
	MOVE R,B	;SAVE IN R
	MOVEI C1,^D18	;SUB-BLOCK COUNT
	CAIN	T,4	;ENTRY BLOCK?					***DJB
	JRST	ENTYP	;YES, MAY HAVE TO CHECK FOR ENTRY POINTS	***DJB
	CAIN	T,400	;FORTRAN IV CALL?				***DJB
	JRST	FORCAL	;YES						***DJB
	TLNE	F,LSKIP	;TEST IF SKIPPING THIS PROGRAM			***DJB
	JRST	IGNORE	;YES, IGNORE THIS BLOCK				***DJB
	CAIN T,2	;SYMBOL TABLE BLOCK TYPE?
	JRST SYMTYP	;YES
	CAIN T,6	;NO, PROGRAM NAME BLOCK TYPE?
	JRST PRGTYP	;YES
IGNORE:	PUSHJ P,GETWRD	;NO,IGNORE REST OF BLOCK
	JRST NXTBLK	;FINNISHED THIS BLOCK
	JRST .-2	;IGNORE REST OF THIS BLOCK




PRGTYP:	PUSHJ P,GETWRD	;GET PROGRAM NAME
	HALT		;SHOULD NEVER HAPPEN
	TLZ B,740000	;CLEAR ALL BUT RADIX50 NAME
	PUSHJ P,INCPT	;INCR & CHECK POINTER
	MOVEM B,(PT)	;STORE NAME IN TABLE
	MOVE PN,PT	;REMEMBER ADDRESS OF CURRENT NAME
	JRST IGNORE	;IGNORE REST OF BLOCK

ENTYP:	TLNN	F,LSWIT	;TEST IF IN LIBRARY SEARCH MODE			***DJB
	JRST	IGNORE	;IF NOT, IGNORE ENTRY BLOCK			***DJB
	TLO	F,LSKIP	;SET SKIP FLAG UNLESS FORCED TO LOAD THIS PROG	***DJB
ENTYP1:	PUSHJ	P,GETWRD	;GET NEXT ENTRY POINT			***DJB
	JRST	NXTBLK	;NONE LEFT, SKIP THIS PROGRAM			***DJB
	PUSHJ	P,SYMJUS  ;FOUND ONE, MAKE IT LIKE WOULD BE IN THE LIST	***DJB
	PUSHJ	P,SFIND	;SEE IF IT MATCHES AN UNDEFINED GLOBAL REQ	***DJB
	JRST	ENTYP1	;HASNT BEEN REQUESTED, DONT FORCE LOADING	***DJB
	HRRZ	R,2(CC)	;HAS BEEN REQUESTED, SEE IF IT HAS BEEN DEFINED	***DJB
	JUMPN	R,ENTYP1	;YES IF POINTER TO PROGRAM NAME NONZERO	***DJB
	TLZ	F,LSKIP	;FORCE LOADING THIS PROG, SATISFY GLOBAL REQ	***DJB
	JRST	IGNORE	;SEEN ENOUGH, SKIP THE REST OF THIS BLOCK	***DJB

;THIS ROUTINE TAKES THE RADIX 50 SYMBOL IN B AND			***DJB 
;LEFT JUSTIFIES IT IN THE 6 CHARACTER FIELD.				***DJB

SYMJUS:	TLZ	B,740000	;ONLY SYMBOL NAME IN B			***DJB
	SKIPA	T,B	;COPY SYMBOL INTO T				***DJB
JUSTF1:	MOVE	T,T1	;USE LOW ORDER PART OF PRODUCT			***DJB
	MULI	T,50	;MULTIPLY BY 50 OCTAL				***DJB
	JUMPN	T,JUSTF2	;DONE IF NON-ZERO HIGH ORDER PART	***DJB
	CAMGE	T1,[50*50*50*50*50*50]	;DOES LOOP EXCEED 50^6?		***DJB
	JRST	JUSTF1	;NO, KEEP MULTIPLYING				***DJB
JUSTF2:	DIVI	T,50	;YES, MULTIPLIED ONCE TOO OFTEN			***DJB
	MOVE	B,T	;RESTORE SYMBOL TO B				***DJB
	POPJ	P,	;RETURN						***DJB

SYMTYP:	PUSHJ P,GETWRD	;GET SYMBOL WORD
	JRST NXTBLK	;NONE LEFT
	MOVEM B,V	;SAVE SYMBOL
	PUSHJ P,GETWRD	;GET VALUE OR POINTER
	HALT		;SHOULD NEVER HAPPEN
	EXCH B,V	;SYMBOL IN B,VALUE IN V
JUSTF0:;								***DJB
	LDB NX,[POINT 4,B,3]	;GET CODE BITS
	PUSHJ	P,SYMJUS	;LEFT JUSTIFY SYMBOL IN 6 CHAR FIELD	***DJB
;	TLZ B,740000	;ONLY SYMBOL NAME IN B
;	SKIPA T,B	;COPY SYMBOL INTO T
;JUSTF1:	MOVE T,T1	;USE LOW ORDER PART OF PRODUCT
;	MULI T,50	;MULTIPLY BY 50 OCTAL
;	JUMPN T,JUSTF2	;DONE IF NON-ZERO HIGH ORDER PART
;	CAMGE T1,[50*50*50*50*50*50]	;DOES LOP EXCEED 50^6?
;	JRST JUSTF1	;NO,KEEP MULTIPLYING
;JUSTF2:	DIVI T,50	;YES, MULTIPLIED ONCE TOO OFTEN
;	MOVE B,T	;RESTORE SYMBOL TO B
	CAIN NX,1	;IS IT A GLOBAL DEFINITION?
	JRST SYMDEF	;YES
	CAIE NX,14	;NO,IS IT A GLOBAL REQUEST?
	JRST SYMTYP	;NO,MUST BE LOCAL,IGNORE
			;YES FALL INTO SYMREQ
SYMREQ:	PUSHJ P,INCPT	;INCREMENT POINTER
	HRRZM PN,(PT)	;STORE REQUEST WORD
	MOVE V,PT	;SAVE REQUEST ADDRESS
	PUSHJ P,SFIND	;IS SYMBOL DEFINED IN TABLE?
	JRST PARDEF	;NO,GENERATE PARTIAL DEFINITION
	MOVEI T,2(CC)	;YES,SET ADDRESS OF CHAIN POINTER
SYMRQ1:;								***DJB
	MOVE NX,T	;CONTINUE ALONG CHAIN
	HLRZ T,(NX)	;GET NEXT WORD IN CHAIN
;	JUMPN T,.-2	;END OF CHAIN YET?
	HRRZ	B,(NX)	;B = POINTER TO PROGRAM NAME			***DJB
	CAMN	B,PN	;SEE IF SAME AS CURRENT PROGRAM			***DJB
			;(PROBLEM IS ADDITIVE GLOBALS)			***DJB
	SOJA	PT,SYMRQ2	;ALREADY BEEN DEFINED IN THIS PROG	***DJB
	JUMPN	T,SYMRQ1	;END OF CHAIN YET?			***DJB
	HRLM V,(NX)	;YES,STORE POINTER TO REQUEST
SYMRQ2:	TLNN	F,FFLAG	;SKIP IF DOING FORTRAN IV FORM			***DJB
	JRST SYMTYP	;GO BACK FOR MORE SYMBOLS
	JRST	GLOBRQ	;GO BACK FOR MORE GLOBAL REQUESTS		***DJB

SYMDEF:	PUSHJ P,SFIND	;IS SYMBOL ALREADY IN TABLE?
	JRST NEWSYM	;NO,ADD IT
	HRRZ T,2(CC)	;YES,GET NAME POINTER
	JUMPE T,DEFIN	;HAS IT BEEN DEFINED?
SYMDF1:	CAMN V,1(CC)	;YES ARE VALUES THE SAME?
	JRST MNAME	;YES,GO FLAG AS MULTIPLY SPECIFIED
	MOVSI T,MULDEF	;NO,FLAG AS MULTIPLY DEFINED
	IORM T,(CC)	;
	HLL PN,2(CC)	;SAVE POINTER TO REQUESTS
	PUSHJ P,SFINDC	;IS SYMBOL IN TABLE FURTHER ON?
	JRST NEWMUL	;NO,ADD NEW DEFINITION
	JRST SYMDF1	;YES GO CHECK VALUES


NEWMUL:	TLO B,MULDEF	;FLAG AS MULTIPLY DEFINED
NEWSYM:	TLO B,400000	;SET SIGN BIT
	TRNE R,1	;IS SYMBOL RELOCATABLE?
	TLO B,RELOC	;YES,SET RELOCATABLE FLAG
	PUSHJ P,INCPT	;INCREMENT AND CHECK POINTER
	MOVEM B,(PT)	;STORE SYMBOL NAME
	PUSHJ P,INCPT	;INCREMENT POINTER AGAIN
	MOVEM V,(PT)	;STORE VALUE
	PUSHJ P,INCPT	;INCREMENT POINTER AGAIN
	HRRM PN,(PT)	;STORE POINTER TO DEFINING PROGRAM NAME
	TLNE B,MULDEF	;IS SYMBOL MULTIPLY DEFINED?
	HLLM PN,(PT)	;YES,STORE POINTER TO REQUESTS
	TLNN	F,FFLAG	;SKIP IF DOING FORTRAN IV FORM			***DJB
	JRST SYMTYP	;GO BACK FOR MORE REQUESTS
	JRST	TEXTR	;GO BACK FOR MORE TEXT				***DJB

PARDEF:	TLO B,400000	;SET SIGN BIT
	PUSHJ P,INCPT	;INCREMENT POINTER
	MOVEM B,(PT)	;STORE SYMBOL NAME
	PUSHJ P,INCPT	;LEAVE VALUE ZERO
	PUSHJ P,INCPT	;INCREMENT POINTER AGAIN
	HRLZM V,(PT)	;STORE POINTER TO REQUEST
	TLNN	F,FFLAG	;SKIP IF FORTRAN IV FORM			***DJB
	JRST SYMTYP	;GO BACK FOR MORE SYMBOLS
	JRST	GLOBRQ	;GO BACK FOR MORE GLOBAL REQUESTS		***DJB


DEFIN:	MOVSI T,RELOC	;SET UP RELOCATABLE BIT
	TRNE R,1	;IS THIS SYMBOL RELOCATABLE?
	IORM T,(CC)	;YES,SET FLAG
	MOVEM V,1(CC)	;STORE VALUE
	HRRM PN,2(CC)	;STORE POINTER TO PROGRAM NAME
	TLNN	F,FFLAG	;SKIP IF FORTRAN IV FORM			***DJB
	JRST SYMTYP	;GO BACK FOR MORE SYMBOLS
	JRST	TEXTR	;GO BACK FOR MORE FORTRAN IV TEXT		***DJB


MNAME:	MOVEI T,MULSPC	;SET FLAG FOR MULTIPLY...
	IORM T,2(CC)	;SPECIFIED SYMBOL
	TLNN 	F,FFLAG	;SKIP IF FORTRAN IV FORM			***DJB
	JRST SYMTYP	;GO BACK FOR MORE SYMBOLS
	JRST	TEXTR	;GO BACK FOR MORE FORTRAN IV TEXT		***DJB
;THIS SECTION PROCESSES FORTRAN IV REL INPUT AND PULLS OFF		***DJB
;GLOBAL SYMBOL DEFINITIONS AND REQUESTS AND PUTS APPROPRIATE		***DJB
;INFORMATION ON THE PUSHDOWN LIST.  IT MUST ALSO KEEP THE		***DJB
;LOCATION COUNTER - THE REST IT CAN IGNORE.				***DJB


LOC=C1			;THIS ACCUMULATOR IS THE LOCATION COUNTER	***DJB
FORCAL:	SETZ	LOC,	;CLEAR LOCATION COUNTER				***DJB
	TLO	F,FFLAG	;SET FORTRAN IV FLAG				***DJB
	JRST	TEXTR1	;B ALREADY = NEXT WORD				***DJB
IGNOR1:	PUSHJ	P,GETBIN	;IGNORE NEXT WORD			***DJB
TEXTR:	PUSHJ	P,GETBIN	;NEXT WORD TO B				***DJB
	TLNE	F,FCOM		;SKIP UNLESS ENTERED A COMMON SYMBOL	***DJB
	JRST	COM2		;BACK INTO COMMON SECTION		***DJB
TEXTR1:	HLRZ	NX,B		;NX=LEFT HALF				***DJB
	CAIE	NX,-1		;SKIP IF HEADER FORM			***DJB
	AOJA	LOC,TEXTR	;NO, REGULAR CODE - BUMP LOCATION	***DJB
				;COUNTER AND LOOP			***DJB
	CAMN	B,[-2]		;TEST IF END OF DATA			***DJB
	JRST	ENDF		;YES					***DJB
	LDB	NX,[POINT 12,B,35]	;GET SIZE OF BLOCK		***DJB
	ANDI	B,770000	;PICK OFF TYPE OF BLOCK			***DJB
	JUMPE	B,IGNOR1	;JUMP IF PROGRAMMER LABEL		***DJB
	CAIN	B,600000	;TEST IF GLOBAL DEFINITION		***DJB
	JRST	GLOBDF		;YES					***DJB
	CAIN	B,500000	;TEST IF ABSOLUTE CODE			***DJB
	JRST	ABSI		;YES					***DJB
	CAIN	B,310000	;TEST IF MADE LABEL			***DJB
	JRST	IGNOR1		;YES (DEFINED BY FTN)			***DJB
	CAIN	B,700000	;TEST IF DATA STATEMENT			***DJB
	JRST	DATAS		;YES, IGNORE (NX) WORDS			***DJB
	JRST	NXTBLK-1	;ERROR - EXIT				***DJB
ABSI:	ADD	LOC,NX		;BUMP LOCATION COUNTER FOR THIS		***DJB
				;BLOCK OF ABSOLUTE CODE			***DJB
DATAS:	PUSHJ	P,GETBIN	;GET NEXT WORD				***DJB
	SOJG	NX,.-1		;IGNORE THE WORDS			***DJB
	JRST	TEXTR		;GO BACK FOR MORE			***DJB
GLOBDF:	PUSHJ	P,GETBIN	;GET SYMBOL WORD IN B			***DJB
				;GLOBAL DEFINTION CODE IS ALSO SET	***DJB
	TLNE	F,LSKIP		;TEST IF SKIPPING THIS PROGRAM		***DJB
	JRST	TEXTR		;YES WE ARE				***DJB
GLOBD1:	MOVEI	R,1	;NO, SET RELOCATABLE FLAG			***DJB
	MOVE	V,LOC	;V=CURRENT VALUE OF THE LOCATION COUNTER	***DJB
	JRST	JUSTF0	;BACK INTO MAINSTREAM - RETURNS TO TEXTR	***DJB
ENDF:	PUSHJ	P,GETBIN	;GET AND IGNORE STARTING ADDRESS	***DJB
	PUSHJ	P,GETBIN	;ALSO NUMBER OF PERM. TEMPS		***DJB
	MOVEI	C,1		;SET TO IGNORE 1 TABLE			***DJB
	PUSHJ	P,TABIG		;IGNORE CONSTANTS TABLE			***DJB
	PUSHJ	P,GETBIN	;GET NUMBER OF GLOBAL REQUESTS		***DJB
	MOVE	C,B		;C=NUMBER OF REQUESTS (POSSIBLY 0)	***DJB
GLOBRQ:	TLNE	F,FCOM		;SKIP UNLESS CAME HERE AFTER		***DJB
	JRST	TEXTR		;A COMMON BLOCK REQUEST.		***DJB
	SOJL	C,ENDF1		;JUMP IF LAST REQUEST DONE		***DJB
	PUSHJ	P,GETBIN	;GET NEXT SYMBOL IN B			***DJB
	TLNE	F,LSKIP		;TEST IF SKIPPING THIS PROGRAM		***DJB
	JRST	GLOBRQ	;YES, DONT DO ANYTHING ABOUT THE GLOBAL REQUESTS***DJB
	MOVEI	NX,14		;SET GLOBAL REQUEST FLAG		***DJB
	JRST	JUSTF0+1	;BACK INTO MAINSTREAM -RETURNS TO GLOBRQ***DJB
ENDF1:	MOVEI	C,3		;SET TO IGNORE 3 TABLES			***DJB
	PUSHJ	P,TABIG		;SCALARS, ARRAYS, AND ARRAY OFFSETS	***DJB
	PUSHJ	P,GETBIN	;GET AND IGNORE COMBINED STORAGE NEEDED	***DJB
	ADD	LOC,B		;ADD TO LOCATION COUNTER		***DJB
	TLNE	F,LSKIP		;NO NEED TO WORRY IF SKIPPING THIS PROG	***DJB
	JRST	ENDF2		;JUST SKIP THE COMMON TABLE		***DJB
	TLO	F,FCOM		;WE ARE ENTERING A COMMON BLOCK SYMBOL	***DJB
	PUSHJ	P,GETBIN	;GET SIZE OF COMMON TABLE		***DJB
	MOVE	C,B		;SET IT IN C				***DJB
COM1:	SOJL	C,COM3	;IF DONE, CLEAR FFLAG, START NEXT ROUTINE	***DJB
	PUSHJ	P,GETBIN	;GET NEXT COMMON BLOCK SYMBOL		***DJB
	PUSHJ	P,SYMJUS	;CLEAR CODE BITS, LEFT JUSTIFY SYMBOL	***DJB
	PUSHJ	P,SFIND		;IS THIS BLOCK ALREADY IN SYMBOL TABLE?	***DJB
	TLOA	B,040000	;NO, DEFINE THE SYMBOL			***DJB
	TLO	B,600000	;YES, THIS IS ONLY A REQUEST		***DJB
	JRST	GLOBD1		;GO DO IT				***DJB
COM2:	ADD	LOC,B		;COMES BACK HERE, ADD COMMN SIZE TO LOC	***DJB
	SOJG	C,COM1		;LOOP TILL COMMON BLOCKS EXHAUSTED	***DJB
COM3:	TLZ	F,FCOM		;CLEAR COMMON FLAG
	JRST	NXTBLK-1	;CLEAR FFLAG AND START NEXT ROUTINE	***DJB
ENDF2:	PUSHJ	P,TABIG	;C KNOWN LE 0, IGNORE 1 TABLE, THE COMMON TABLE	***DJB
	JRST	NXTBLK-1	;CLEAR FFLAG AND LOOK FOR NEXT ROUTINE	***DJB


;ROUTINE TO SKIP OVER THE NUMBER OF TABLES IN C				***DJB

TABIG:	PUSHJ	P,GETBIN	;GET SIZE OF TABLE (POSSIBLY 0)		***DJB
	SKIPE	NX,B		;NX=SIZE, SKIP IF 0			***DJB
	PUSHJ	P,GETBIN	;GET, IGNORE NEXT WORD			***DJB
	SOJG	NX,.-1		;LOOP FOR TABLE				***DJB
	SOJG	C,TABIG		;NUMBER OF TABLES TO IGNORE		***DJB
	POPJ	P,		;EXIT					***DJB

;GET NEXT BINARY WORD WITHIN CURRENT BLOCK
;	CALL:	PUSHJ P,GETWRD
;		XXX NO MORE WORDS IN BLOCK
;		XXX NEXT WORD IN B, RELOC BIT IN R35


GETWRD:	SOJL C,CPOPJ	;FINISHED THIS BLOCK?
	SOJGE C1,GETW1	;NO, FINISHED SUB BLOCK?
	PUSHJ P,GETBIN	;YES, GET NEXT RELOCATION BITS
	MOVE R,B	;RELOCATION BITS IN R
	MOVEI C1,22	;RESET SUB-BLOCK COUNT TO 18
GETW1:	PUSHJ P,GETBIN	;GET NEXT DATA WORD
	ROT R,2		;SET BIT 35 OF R FOR THIS WORD
CPOPJ1:	AOS (P)		;INCREMENT RETURN PC
CPOPJ:	POPJ P,		;RETURN


;FIND A GIVEN SYMBOL IN TABLE
;	CALL:	MOVE B,<SYMBOL SOUGHT>
;		PUSHJ P,SFIND
;		XXX  NOT FOUND RETURN
;;		XXX  SUCCESSFUL RETURN, CC SET

SFIND:	MOVE CC,BG	;START AT BEGINNING OF TABLE
SFIND1:	SKIPL NX,(CC)	;IS THIS A DEFINITION ENTRY?
SFIND2:	AOJA CC,SFIND3	;NO,CHECK FOR END OF TABLE
	TLZ NX,740000	;YES, MASK OUT FLAG BITS
	CAME NX,B	;IS IT THE DESIRED SYMBOL?
SFINDC:	AOJA CC,SFIND2	;NO,IGNORE VALUE AND KEEP LOOKING
	JRST CPOPJ1	;YES,SKIP RETURN
SFIND3:	CAMG CC,PT	;END OF TABLE YET?
	JRST SFIND1	;NO,CONTINUE
	POPJ P,		;YES,NOT FOUND RETURN



;INCREMENT FREE STORAGE POINTER
;	CALL:	PUSHJ P,INCPT
;		XXX  SUCCESSFUL RETURN
;	WILL NEVER RETURN IF INSUFFICIENT SPACE

INCPT:	ADDI PT,1	;INCREMENT POINTER
	CAILE PT,(EN)	;OUT OF TABLE SPACE YET?
	JRST EXPAND	;YES, GO TRY TO EXPAND CORE
	POPJ P,		;NO, OK RETURN FROM INCPT
;PART 2 - PRINT SYMBOL LISTING


;CLEAR "ALREADY PRINTED" BITS IN TABLE

CROSSP:	MOVSI SP,PTD	;ALREADY PRINTED BIT
	MOVE CC,BG	;SET POINTER TO BEGINNING
CLRTB1:	SKIPL (CC)	;IS THIS A SYMBOL DEFINITION?
	AOJA CC,CLRTB2	;NO,INCREMENT POINTER CHECK FOR END
	ANDCAM SP,(CC)	;YES, CLEAR BIT
	ADDI CC,3	;INCREMENT POINTER PAST VALUE ETC
CLRTB2:	CAIGE CC,(EN)	;END OF TABLE YET?
	JRST CLRTB1	;NO, CONTINUE
	SETZM C1	;FORCE TITLE ON FIRST PAGE OF LISTING

;FIND SMALLEST NON-PRINTED SYMBOL

OUT0:	HRLOI NX,377777	;SET NEXT TO LARGEST POSSIBLE VALUE
	SETZM SP	;CLEAR SAVED POINTER
	SKIPA PT,BG	;START AT BEGINNING OF TABLE
OUT1:	ADDI PT,2	;MOVE POINTER PAST LAST SYMBOL
OUT2:	SKIPL T,(PT)	;IS THIS A SYMBOL WORD?
	AOJA PT,OUT3	;NO,INCREMENT POINTER CHECK FOR END
	TLNE T,PTD	;YES, HAS IT BEEN PRINTED?
	JRST OUT1	;YES, CONTINUE LOOKING
	TLZ T,740000	;CLEAR CODE BITS
	CAML T,NX	;SMALLEST SO FAR?
	JRST OUT1	;NO, KEEP LOOKING
	MOVEM T,NX	;YES, SAVE SYMBOL
	MOVEM PT,SP	;AND SAVE POINTER
	JRST OUT1	;KEEP LOOKING

OUT3:	CAIGE PT,(EN)	;END OF TABLE YET?
	JRST OUT2	;NO, KEEP LOOKING
			;YES, FALL INTO OUTLIN

OUTLIN:	TLZ F,COMMAF	;NEW LINE 
	JUMPE SP,CRLF	;RETURN TO CROSSX IF NO MORE TO PRINT
	MOVSI T1,PTD	;SET ALREADY PRINTED BIT
	IORM T1,(SP)	;MARK SYMBOL AS PRINTED
	MOVE B,(SP)	;GET SYMBOL AND CODE BITS
	PUSHJ P,PRCHK	;CHECK PRINT CONTROL FLAGS
	JRST OUT0	;DONT PRINT THIS SYMBOL
	PUSHJ P,CRLFT	;START NEW LINE - WITH TITLE IF NECC
	TLNE B,MULDEF	;IS SYMBOL MULTIPLY DEFINED?
	PUSHJ P,PRNTM	;YES, PRINT M
	MOVE NX,2(SP)	;GET POINTERS
	TRNN NX,-1	;IS IT UNDEFINED?
	PUSHJ P,PRNTU	;YES, PRINT U
	TRNE NX,MULSPC	;IS IT MULTIPLY SPECIFIED?
	PUSHJ P,PRNTS	;YES,PRINT S
	TLNN NX,-1	;IS IT UNREFERENCED?
	PUSHJ P,PRNTN	;YES, PRINT N
	PUSHJ P,TAB	;FOLLOW FLAGS BY TAB
	MOVE PT,SP	;SET POINTER FOR OUTSYM
	PUSHJ P,OUTSYM	;PRINT SYMBOL
	PUSHJ P,TAB	;FOLLOW BY TAB
	HRRE PT,2(SP)	;GET NAME POINTER, EXTEND MULSPC
	JUMPE PT,NOVAL	;SKIP VALUE AND NAME IF UNDEFINED
	PUSHJ P,OCTPNT	;PRINT VALUE OF SYMBOL
	MOVE T1,(SP)	;GET CODE BITS AGAIN
	TLNE T1,RELOC	;IS SYMBOL RELOCATABLE?
	PUSHJ P,QUOTE	;YES, PRINT SINGLE QUOTE
	PUSHJ P,TAB	;FOLLOW BY TAB
	TRZ PT,MULSPC	;RH OF PT POINTS TO PROGRAM NAME
	PUSHJ P,OUTSYM	;PRINT PROGRAM NAME
	SKIPGE PT	;WAS SYMBOL MULTIPLY SPECIFIED?
	PUSHJ P,PPLUS	;YES, PRINT PLUS SIGN
	PUSHJ P,TAB1	;FOLLOW BY TAB AND FOUR SPACES
	JRST PRREF	;GO PRINT REFERENCES TO IT

NOVAL:	PUSHJ P,TAB3	;UNDEFINED, PRINT THREE TABS INSTEAD
PRREF:	HLRZ NX,2(SP)	;NX POINTS TO FIRST REQUEST
PRRF1:	JUMPE NX,OUT0	;DONE IF NO MORE REQUESTS
	MOVE PT,(NX)	;GET REQUEST WORD
	TLOE F,COMMAF	;HAS A COMMA BEEN TYPED?
	PUSHJ P,COMMA	;YES, TYPE ANOTHER, CHECK FOR OVERFLOW
	PUSHJ P,OUTSYM	;PRINT PROGRAM NAME
	HLRZ NX,PT	;NX POINTS TO NEXT REQUEST
	JRST PRRF1	;CONTINUE ALONG REQUEST CHAIN


PRCHK:	TRNE F,ASWIT	;PRINT ALL SYMBOLS?
	JRST CPOPJ1	;YES
	MOVE T1,2(SP)	;GET POINTERS FOR THIS SYMBOL
	TRNE T1,-1	;IS SYMBOL UNDEFINED?
	TLNE B,MULDEF	;NO, IS IT MULTIPLY DEFINED?
	JRST PRCHKE	;YES, ERROR SYMBOL
	TRNE F,ESWIT	;IS THIS ERRORS ONLY PRINT?
	POPJ P,		;YES, THEN DONT PRINT
	TRNN F,RSWIT	;RELOCATABLES ONLY?
	JRST PRCHK1	;NO, CONTINUE TESTS
	TLNE B,RELOC	;YES, IS THIS SYMBOL RELOCATABLE?
	JRST CPOPJ1	;YES, PRINT IT
	POPJ P,		;NO, DONT PRINT IT

PRCHK1:	TRNN F,FSWIT	;FIXED SYMBOLS ONLY?
	JRST PRCHK2	;NO,CONTINUE TESTS
	TLNN B,RELOC	;YES, IS THIS SYMBOL FIXED?
	JRST CPOPJ1	;YES, PRINT IT
	POPJ P,		;NO, DONT PRINT IT

PRCHK2:	TRNN F,SSWIT	;MULTIPLY SPECIFIED ONLY?
	JRST PRCHK4	;NO, CONTINUE TESTS
	HRRE T1,2(SP)	;YES, IS THIS SYMBOL MULSPC?
	JUMPL T1,CPOPJ1	;YES, PRINT IT
	POPJ P,		;NO, DONT

PRCHK4:	TRNN F,NSWIT	;NEVER REFERENCED ONLY?
	JRST CPOPJ1	;NO, SOMETHING WRONG, PRINT IT
	TLNN T1,-1	;WAS SYMBOL REFERENCED?
	TRNE T1,MULSPC	;NO, IS IT MULSPC?
	POPJ P,		;YES, DONT PRINT
	JRST CPOPJ1	;NO, PRINT IT



PRCHKE:	TRNE F,ESWIT	;ERRORS ONLY PRINT?
	JRST CPOPJ1	;YES, PRINT THIS ONE
	POPJ P,		;NO, DONT PRINT
OUTSYM:	MOVE T,(PT)	;PICK UP RADIX50 SYMBOL
	TLZ T,740000	;CLEAR CODE BITS
OUTSY1:	IDIVI T,50	;DIVIDE BY RADIX
	HRLM T1,(P)	;SAVE REMAINDER
	JUMPE T,.+2	;START TO UNWIND IF ZERO QUOTIENT
	PUSHJ P,OUTSY1	;RECURSIVE CALL
	HLRZ T,(P)	;GET REMAINDER FROM LIST
	JUMPE T,CPOPJ	;IGNORE BLANKS
	CAIG T,44	;LETTER OR NUMBER?
	ADDI T,57	;YES
	CAIL2+57	;LETTER?
	ADDI T,101-13-57	;YES
	CAIN T,45	;PERIOD?
	MOVEI T,"."	;YES
	CAIN T,46	;$?
	MOVEI T,"$"	;YES
	CAIN T,47	;%?
	MOVEI T,"%"	;YES
	JRST LSTOUT	;FALL INTO OUTPUT



OCTPNT:	MOVSI PN,440300+T1
	MOVEI T1,1(SP)	;RH= ADDRESS OF OCTAL NUMBER,LH= CLEARED FLAG
OCTPT1:	ILDB T,PN	;GET OCTAL DIGIT
	ADDI T,"0"	;CONVERT TO ASCII
	TLNN PN,770000	;IS THIS THE LAST DIGIT?
	JRST LSTOUT	;YES,LSTOUT POPJS BACK TO OUTLIN
	TLO T1,(T)	;SET FLAG FOR NON ZERO CHARACTER TYPED
	TLNN T1,7	;IS THIS A ZERO WITH NO NON ZEROS TYPED?
	MOVEI T," "	;YES, PRINT SPACE INSTEAD
	PUSHJ P,LSTOUT	;GO PRINT OCTAL DIGIT
	JRST OCTPT1	;CONTINUE


PMESS:	HRLI T1,440700	;GENERAL MESSAGE PRINT ROUTINE
PMESS1:	ILDB T,T1
	JUMPE T,CPOPJ
	PUSHJ P,LSTOUT
	JRST PMESS1


COMMA:	MOVEI T,","	;PRINT COMMA
	AOJL CC,LSTOUT	;PRINT ONLY COMMA IF NO LINE OVERFLOW
	PUSHJ P,LSTOUT	;ON OVERFLOW, PRINT COMMA THEN...
	PUSHJ P,CRLF	;CR AND FIVE TABS
	PUSHJ P,TAB
	PUSHJ P,TAB
TAB3:	PUSHJ P,TAB	;ENTRY TO PRINT 3 TABS
	PUSHJ P, TAB
TAB1:	MOVEI T1,TABMS
	JRST PMESS

TAB:	MOVEI T,11	;ENTRY TO PRINT SINGLE TAB
	JRST LSTOUT


CRLF:	AOSA C1		;NEVER PRINT TITLE EVEN IF TOO MANY LINES
CRLFT:	AOJGE C1,PTITLE	;START NEW PAGE IF TOO MANY LINES
	MOVNI CC,SYMLIN	;NUMBER OF REFERENCES PER LINE
	MOVEI T,15	;CR
	PUSHJ P,LSTOUT
	MOVEI T,12	;LF
	JRST LSTOUT

QUOTE:	MOVEI T,"'"	;SINGLE QUOTE
	JRST LSTOUT

PPLUS:	MOVEI T,"+"	;PLUS SIGN
	JRST LSTOUT

PRNTM:	MOVEI T,"M"
	JRST LSTOUT

PRNTU:	MOVEI T,"U"
	JRST LSTOUT

PRNTS:	MOVEI T,"S"
	JRST LSTOUT

PRNTN:	MOVEI T,"N"
	JRST LSTOUT

TABMS:	ASCIZ /	    /	;TAB AND FOUR SPACES

PTITLE:	PUSHJ P,CRLF	;MAKE SURE AT LEFT MARGIN
	MOVNI C1,PGLINE	;NUMBER OF LINES PER PAGE
	TLNN F,TITL	;TITLE PRINT SURPRESSED?
	POPJ P,		;YES
	MOVEI T,14	;FORM FEED
	PUSHJ P,LSTOUT	;TOP OF NEW PAGE
	MOVEI T1,TLINE	;MESSAGE ADDRESS
	PUSHJ P,PMESS
	TRNE F,ASWIT
	MOVEI T1,ALINE
	TRNE F,ESWIT
	MOVEI T1,ELINE
	TRNE F,RSWIT
	MOVEI T1,RLINE
	TRNE F,FSWIT
	MOVEI T1,FLINE
	TRNE F,NSWIT
	MOVEI T1,NLINE
	TRNE F,SSWIT
	MOVEI T1,SLINE
	PUSHJ P,PMESS
	JRST CRLF


TLINE:	ASCIZ /FLAGS	SYMBOL	 OCTAL VALUE	DEFINED IN  REFERENCED IN		/

ALINE:	ASCIZ /(ALL SYMBOLS)
/
ELINE:	ASCIZ /(ERRORS ONLY)
/
RLINE:	ASCIZ /(RELOCATABLE SYMBOLS ONLY)
/
FLINE:	ASCIZ /(FIXED SYMBOLS ONLY)
/
NLINE:	ASCIZ /(NEVER REFERENCED SYMBOLS ONLY)
/
SLINE:	ASCIZ /(MULTIPLY SPECIFIED ONLY)
/
END:	END
                                                                                                                                                                                                                                                                                           m r?