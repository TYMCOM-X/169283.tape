C     MAIN PROGRAM
C         BUILDS SYNTAX TREE FROM BNF FORM
C         OF SYNTAX
      IMPLICIT INTEGER(A-Z)
      COMMON/IOCOM/IOSZE
      IOSZE=1
      COMMON /SCN/S(3),NP
      COMMON /INP/C(20)
      COMMON NI,NXT,VAL(650),DEF(650),ALT(650),
     X   SUC(650),ACTION(650),FAIL(650),
     X   AN(2,750),IAN,
     X   NAME(3,250),DEFD(250),DEFVAL(250),SHRINK(250)
      DATA PRI/'*PRI'/,PRO/'*PRO'/,BKSLH/'#   '/
     X  ,COLON/':   '/,EQUAL/'=   '/,DEFEQU/'::= '/
C     DATA EXCL/2Z5A/,QUES/2Z6F/
C     *** FOR RCA *** CHANGE EXCL TO DOLLAR SIGN
      DATA EXCL/"044/,QUES/"077/
      DATA PHI/-1/,SIGMA/0/
      OPEN(20,'SYN',INPUT)
      TWO24="4000000000
      F6=TWO24-1
C
      DO 5 I=1,650
      DATA BLANK/' '/
      FAIL(I)=1
 5    ACTION(I)=1
      IAN=2
      DATA ZROBLK/'0'/
      AN(1,1)=ZROBLK
      AN(2,1)=BLANK
      NP=3
      NI=1
      NIS=1
      NXT=2
      CALL SCAN
      IF(S(1).NE.PRI) GOTO 40
C     READ AND COLLECT PRIMITAVES
 10   CALL SCAN
      IF(S(1).EQ.PRO) GOTO 40
      DO 15 I=1,NP
 15   NAME(I,NI)=S(I)
      DEFD(NI)=1
      DEFVAL(NI)=-NIS
      SHRINK(NI)=0
      NIS=NIS+1
      NI=NI+1
      IF(S(1)/TWO24.NE.EXCL) GOTO 10
      NIS=NIS-1
      DEFVAL(NI-1)=DEFVAL(NI-2)
      GOTO 10
C     ENTER HEAD PRODUCTION
 40   VAL(1)=NI
      DEF(1)=2
      SUC(1)=SIGMA
      ALT(1)=PHI
      NAME(1,NI)=0
C     ENTER PRODUCTION
 50   CALL SCAN
C     DATA AST/2Z5C/,TWO24/8Z01000000/
      DATA AST/42/
      IF(S(1)/TWO24.NE.AST)GOTO 52
      CALL CTL
      GOTO 50
 52   DO 60 I=1,NI
      DO 55 J=1,NP
      IF(NAME(J,I).NE.S(J)) GO TO 60
 55   CONTINUE
      GO TO 70
 60   CONTINUE
C     NOT IN NAME TABLE
      DO 65 J=1,NP
 65   NAME(J,NI)=S(J)
      DEFD(NI)=1
      DEFVAL(NI)=NXT
      SHRINK(NI)=0
      I=NI
      NI=NI+1
      NAME(1,NI)=0
      GOTO 100
C     NAME IN TABLE
 70   IF (DEFD(I).EQ.1) CALL ERROR ('DUP NAME')
      J=DEFVAL(I)
      DEFD(I)=1
      DEFVAL(I)=NXT
      SHRINK(I)=0
 75   K=DEF(J)
      DEF(J)=NXT
      J=K
      IF (J.NE.0)GOTO 75
C     ENTRY IN, ITS INDEX IS IN I (IF NEEDED)
 100  CALL SCAN
C     DATA PCT/2Z6C/
      DATA PCT/37/
      IF (S(1)/TWO24.EQ.PCT) GOTO 113
      IF (S(1).EQ.DEFEQU) GOTO 105
      IF(S(1).NE.COLON) CALL ERROR('1 COLON ')
      CALL SCAN
      IF(S(1).NE.COLON) CALL ERROR ('2 COLON ')
      CALL SCAN
      IF(S(1).NE.EQUAL) CALL ERROR ('1 EQUAL')
 105  SAVEDI=NXT
C     COLLECT DEFINITION PART
 110  CALL SCAN
      IF (S(1).NE.BKSLH) GOTO 112
      SUC(NXT-1)=SIGMA
      ALT(SAVEDI)=NXT
      CALL SCAN
      IF(S(1).NE.BKSLH) GOTO 120
      ALT(SAVEDI)=PHI
      GOTO 50
 113  SHRINK(I)=1
      GOTO 100
 112  IF(S(1)/TWO24.EQ.EXCL) GOTO 115
      IF(S(1)/TWO24.NE.QUES) GOTO 130
      INDX=1
C     DATA DOLLAR/2Z5B/,F6/6ZFFFFFF/
      DATA DOLLAR/'$'/
 119  AN(1,IAN)=OR(AND(DOLLAR,"774000000000),AND(S(1),F6))
      AN(2,IAN)=S(2)
      DO 114 I=1,IAN
      IF(AND(F6,S(1)).EQ.AND(F6,AN(1,I)).AND.
     X   S(2).EQ.AN(2,I)) GO TO 116
 114  CONTINUE
 116  IF (I.EQ.IAN) IAN=IAN+1
      GOTO (117,118),INDX
 117  CONTINUE
      FAIL(NXT-1)=I
      GOTO 110
 115  INDX=2
      GOTO 119
 118  ACTION(NXT-1)=I
      GOTO 110
 120  SAVEDI=NXT
C     HAVE CONSTRUCT, SEARCH
 130  DO 140 I=1,NI
      DO 135 J=1,NP
      IF (NAME(J,I).NE.S(J)) GO TO 140
 135  CONTINUE
      GO TO 150
 140  CONTINUE
C     NOT IN TABLE
      DATA NULL1/'<NUL'/,NULL2/'L>'/
      IF(S(1).EQ.NULL1.AND.S(2).EQ.NULL2) GOTO 147
      DO 145 J=1,NP
 145  NAME(J,NI)=S(J)
      DEFD(NI)=0
      DEFVAL(NI)=NXT
      I=NI
      NI=NI+1
      NAME(1,NI)=0
      VALDEF=0
      GOTO 170
C     NAME FOUND
C     <NULL> PRIMITIVE
 147  VALDEF=0
      VAL(NXT)=-1
      GOTO 172
 150  IF (DEFD(I).EQ.1) GO TO 160
C     FOUND BUT UNDEFINED
      VALDEF=DEFVAL(I)
      DEFVAL(I)=NXT
      GOTO 170
C     FOUND AND DEFINED
 160  VALDEF=DEFVAL(I)
C     ENTER NEW CONSTRUCTION
 170  VAL(NXT)=I
 172  DEF(NXT)=VALDEF
      ALT(NXT)=PHI
      SUC(NXT)=NXT+1
      NXT=NXT+1
      GOTO 110
      END
      SUBROUTINE RD1
C     THIS ROUTINE PERFORMS REDUCTIONS ON THE
C        SYNTAX GRAPH
C     RULES MUST BE SORTED SO LONGEST
C        OCCURRANCES APPEAR FIRST IN ALTERNATIVES
C        WITH LEFT RECURSIVE DEFINITIONS LAST IN
C        ALTERNATIVES
C
      IMPLICIT INTEGER(A-Z)
      DATA PHI/-1/,SIGMA/0/
      COMMON NI,NXT,VAL(650),DEF(650),ALT(650),
     X   SUC(650),ACTION(650),FAIL(650),
     X   AN(2,750),IAN,
     X   NAME(3,250),DEFD(250),DEFVAL(250),SHRINK(250)
      WRITE(5,22)
 22   FORMAT(' FACTORING REDUCTION BEING PERFORMED')
      NXT1=NXT-1
      DO 50 I=1,NXT1
      IF(ALT(I).LE.SIGMA.OR.VAL(I).EQ.-9999) GOTO 50
 5    T1=ALT(I)
      IF(VAL(I).NE.VAL(T1)) GOTO 50
      IF(SUC(T1).EQ.SIGMA)GOTO 20
      J=SUC(I)
      IF(J.EQ.PHI) GOTO 30
 10   IF(ALT(J).EQ.SIGMA) GOTO 30
      IF(ALT(J).EQ.PHI) GOTO 15
      J=ALT(J)
      GOTO 10
C     HAVE FOUND WHERE TO LINK IN
 15   T1=ALT(I)
      ALT(J)=SUC(T1)
      VAL(T1)=-9999
      ALT(I)=ALT(T1)
      GOTO 5
C     NO SUCCESSOR
 20   J=SUC(I)
 25   IF(ALT(J).EQ.PHI) GOTO 27
      J=ALT(J)
      GOTO 25
 27   ALT(J)=SIGMA
C     SHOULD REALLY CHECK TO MAKE SURE NOT DESTROY ACTION
      DATA CACT/'ACTI'/,CACT2/'ON'/,CFAIL/'FAIL'/,
     X   BLK/' '/
      T1=ALT(I)
      IF(ACTION(I).NE.ACTION(T1))
     X   WRITE(5,33) CACT,CACT2,I,ALT(I)
 33   FORMAT(' **ILLEGAL ',A4,A2,' FACTOR',2I4)
      ACTION(I)=ACTION(T1)
      IF(FAIL(I).NE.FAIL(T1))
     X   WRITE(5,33) CFAIL,BLK,I,ALT(I)
      FAIL(I)=FAIL(T1)
      VAL(T1)=-9999
      ALT(I)=ALT(T1)
      GOTO 50
C     SHORTER ALTERNATIVE BEFORE LONGER ONE
 30   WRITE(5,11)I
 11   FORMAT(' **ERROR-SHORTER ALTERNATIVE FIRST ',I4)
      GOTO 50
 50   CONTINUE
      RETURN
      END
C
C
C
      SUBROUTINE RD3
      IMPLICIT INTEGER(A-Z)
      DATA PHI/-1/,SIGMA/0/
      COMMON NI,NXT,VAL(650),DEF(650),ALT(650),
     X   SUC(650),ACTION(650),FAIL(650),
     X   AN(2,750),IAN,
     X   NAME(3,250),DEFD(250),DEFVAL(250),SHRINK(250)
      WRITE(5,322)
 322  FORMAT(' RECURSIVE REDUCTION BEING PERFORMED')
      N1=NI-1
      DO 350 I=1,N1
      IF(DEFVAL(I).LE.0)GOTO 350
      J=DEFVAL(I)
      IF (DEFD(I).EQ.0) GO TO 348
 310  IF(VAL(J).EQ.I) GOTO 320
      J1=J
      J=ALT(J)
      IF(J.EQ.PHI) GOTO 350
      GOTO 310
 320  IF(ALT(J).EQ.PHI) GOTO 325
C     INCORRECT SYNTAX GRAPH
      WRITE(5,311)NAME(1,I),NAME(2,I),NAME(3,I)
 311  FORMAT(' **ERROR-LEFT RECURSIVE NOT LAST',3A4)
C     HAVE FOUND LEFT RECURSIVE AND IT IS LAST
      DIMENSION K(50)
 325  K(1)=DEFVAL(I)
      DEP=1
      VAL(J)=-9999
      J=SUC(J)
      ALT(J1)=PHI
      CTL=1
 330  T1=K(DEP)
      IF(SUC(T1).NE.SIGMA) GOTO 340
      IF(SHRINK(I).EQ.1)          GOTO 335
      T1=K(DEP)
      SUC(T1)=J
 332  T1=K(DEP)
      K(DEP)=ALT(T1)
 334  IF(K(DEP).GT.0) GOTO 330
      IF(CTL.EQ.1.AND.K(DEP).EQ.SIGMA) WRITE(5,333)NAME(1,I),
     X   NAME(2,I),NAME(3,I)
 333  FORMAT(' **ERROR-FACTORING WITH LEFT RECURSION',1X,3A4)
      DEP=DEP-1
      IF(DEP.EQ.0) GOTO 345
      T1=K(DEP)
      K(DEP)=ALT(T1)
      GOTO 334
C     SHRINK PRODUCTION
 335  VAL(NXT)=-3
      DEF(NXT)=0
      ALT(NXT)=-DEP
      SUC(NXT)=J
      T1=K(DEP)
      SUC(T1)=NXT
      NXT=NXT+1
      GOTO 332
C     NOW FIX RECURSIVE PART
 340  DEP=DEP+1
      T1=K(DEP-1)
      K(DEP)=SUC(T1)
      GOTO 330
 345  IF(CTL.EQ.2) GOTO 350
      CTL=2
      K(1)=J
      DEP=1
      J1=J
 346  IF(ALT(J1).EQ.PHI) GOTO 347
      J1=ALT(J1)
      GOTO 346
 347  ALT(J1)=SIGMA
      GO TO 330
 348  WRITE(5,344)NAME(1,I),NAME(2,I),NAME(3,I)
 344  FORMAT(1X,3A4,' NOT DEFINED')
      GOTO 350
 350  CONTINUE
      RETURN
      END
C
C
C     RD5 PRODUCES JUMP REDUCTIONS IF AND ONLY IF
C        PRIMITIVES AT THE BEGINNING OF ALTERNATIVE
C        DEFINITIONS ARE AT THE BEGINNING OF THE
C        ALTERNATIVES AND IN DECREASING ORDER
C
      SUBROUTINE RD5
      IMPLICIT INTEGER(A-Z)
      DATA PHI/-1/,SIGMA/0/
      COMMON NI,NXT,VAL(650),DEF(650),ALT(650),
     X   SUC(650),ACTION(650),FAIL(650),
     X   AN(2,750),IAN,
     X   NAME(3,250),DEFD(250),DEFVAL(250),SHRINK(250)
      COMMON /NEWCOM/ NEW(650)
      WRITE(5,511)
 511  FORMAT(' JUMP VECTORS BEING DETECTED')
      NXT1=NXT-1
      DO 510 I=1,NXT1
 510  NEW(I)=I
      N1=NI-1
      DO 550 I=1,N1
      IF(DEFVAL(I).LE.0)GOTO 550
      J=DEFVAL(I)
      IF(DEF(J).GE.0) GOTO 550
C     HAVE AT LEAST ONE PRIMITIVE
      KK=1
 520  T1=ALT(J)
      IF(ALT(J).LE.SIGMA.OR.DEF(T1).GE.0.OR.
     X   DEF(T1)+1.NE.DEF(J))  GOTO 525
      KK=KK+1
      J=ALT(J)
      GOTO 520
C     KK IS NUMBER OF JUMP POINTS POSSIBLE
 525  CONTINUE
      IF(KK.LE.2) GOTO 550
C     MAKE JUMP NODE
      J=DEFVAL(I)
      NEW(J)=NXT
      DEFVAL(I)=NXT
      VAL(NXT)=-2
      DEF(NXT)=0
      ALT(NXT)=DEF(J)
      SUC(NXT)=DEF(J)-KK+1
      NXT=NXT+1
      WRITE(5,533) KK,NAME(1,I),NAME(2,I),NAME(3,I)
 533  FORMAT(I6,' WAY JUMP FOR ',3A4)
      DO 535 L=1,KK
      VAL(NXT)=VAL(J)
      DEF(NXT)=DEF(J)
      ALT(NXT)=NXT+1
      IF(L.EQ.KK) ALT(NXT)=ALT(J)
      SUC(NXT)=SUC(J)
      ACTION(NXT)=ACTION(J)
      FAIL(NXT)=FAIL(J)
      VAL(J)=-9999
      J=ALT(J)
      NXT=NXT+1
 535  CONTINUE
 550  CONTINUE
      NXT1=NXT-1
      DO 540 I=1,NXT1
      T1=DEF(I)
      IF (DEF(I).GT.0) DEF(I)=NEW(T1)
 540  CONTINUE
      RETURN
      END
      SUBROUTINE CARD
C     THIS ROUTINE READS A CARD AND CHECKS FOR
C        DEBUG CALLS
      IMPLICIT INTEGER(A-Z)
      COMMON /INP/C(20)
 5    READ(20,11,ERR=900,END=950)C
 11   FORMAT(20A4)
      DATA COUNT/0/
      COUNT=COUNT+1
      RETURN
 900  WRITE(5,911)C
 911  FORMAT(' READ ERROR'/4(5A4/))
      STOP
 950  WRITE(5,955)C
 955  FORMAT(' END OF FILE'/4(5A10/))
      STOP
      RETURN
      END
C
C
      SUBROUTINE CTL
      DATA CON/'*CON'/,TRE/'*TRE'/
      COMMON /SCN/S(3),NP
      IF (S(1).EQ.CON)GOTO10
      IF (S(1).EQ.TRE)GOTO20
      DATA QUIT /'*QUI'/
      IF(S(1).EQ.QUIT) STOP
      DATA REDUC/'*RED'/,BLKDT/'*BLK'/
      IF (S(1).EQ.REDUC)  GOTO 30
      IF (S(1).EQ.BLKDT)  GOTO 40
      DATA RED1/'*RD1'/,RED3/'*RD3'/
      IF(S(1).EQ.RED1) GOTO 50
      IF(S(1).EQ.RED3) GOTO 60
      DATA RED5/'*RD5'/,FIXIT/'*FIX'/
      IF(S(1).EQ.RED5) GOTO 70
      IF(S(1).EQ.FIXIT) GOTO 80
      DATA META/'*MET'/,ASM/'*ASM'/
      IF (S(1).EQ.META) GOTO 85
      IF(S(1).EQ.ASM) GOTO 90
      DATA DBUG/'*DBG'/
      IF(S(1).EQ.DBUG) GOTO 95
      DATA COM/'*COM'/
      IF (S(1).EQ.COM) GOTO 75
      RETURN
 10   CALL PTTBL
      RETURN
 20   CALL PTTRE
      RETURN
 30   CALL REDUCE
      RETURN
 40   CALL BLKDTA
      RETURN
 50   CALL RD1
      RETURN
 60   CALL RD3
      RETURN
 70   CALL RD5
      RETURN
 75   CALL FTCCMN
      RETURN
 80   CALL RD1
      CALL RD3
      CALL RD5
      CALL REDUCE
      CALL BLKDTA
      CALL PTTBL
      CALL PTTRE
      CALL FTCCMN
      RETURN
 85   CALL ASSTAB
      RETURN
 90   CALL RD1
      CALL RD3
      CALL RD5
      CALL REDUCE
      CALL ASSTAB
      CALL PTTBL
      CALL PTTRE
      CALL FTCCMN
      RETURN
 95   CALL DBGTAB
      RETURN
      END
      SUBROUTINE FINAL
      WRITE(5,22) COUNT
 22   FORMAT(' LAST LINE READ WAS-',I5)
      RETURN
      END
      SUBROUTINE ERROR(A)
C     THIS ROUTINE PRINTS OUT AN ERROR MESSAGE
C        AND GIVES A CHANCE TO INPUT DEBUG COMMANDS
      DIMENSION A(2)
      WRITE(5,11)A
 11   FORMAT(' ** ERROR -- ',2A4)
      CALL FINAL
      STOP
      END
      SUBROUTINE PTTBL
C     THIS ROUTINE PRINTS OUT THE DEFINITION TABLE
      IMPLICIT INTEGER(A-Z)
      COMMON /SCN/S(3),NP
      COMMON /INP/C(20)
      COMMON NI,NXT,VAL(650),DEF(650),ALT(650),
     X   SUC(650),ACTION(650),FAIL(650),
     X   AN(2,750),IAN,
     X   NAME(3,250),DEFD(250),DEFVAL(250),SHRINK(250)
      J=NI-1
      WRITE(6,11)
 11   FORMAT(' NODE DEFVAL DEFD SRNK NAME')
      DO 10 I=1,J
 10   WRITE(6,22) I,DEFVAL(I),DEFD(I),SHRINK(I),
     X   (NAME(K,I),K=1,NP)
 22   FORMAT(1X,I4,I7,2I5,1X,3A4)
      RETURN
      END
      SUBROUTINE PTTRE
      IMPLICIT INTEGER(A-Z)
C     THIS ROUTINE PRINTS OUT THE SYNTAX TREE
      COMMON /SCN/S(3),NP
      COMMON NI,NXT,VAL(650),DEF(650),ALT(650),
     X   SUC(650),ACTION(650),FAIL(650),
     X   AN(2,750),IAN,
     X   NAME(3,250),DEFD(250),DEFVAL(250),SHRINK(250)
      J=NXT-1
      WRITE(6,11)
 11   FORMAT(' NODE  DEF  ALT  SUC ACTION   FAIL     VALUE')
      DO 10 I=1,J
      K=VAL(I)
      T1=ACTION(I)
      T2=FAIL(I)
      IF(DEFD(K).LE.0.OR.VAL(I).LT.0) GOTO 5
      WRITE(6,22)I,DEF(I),ALT(I),SUC(I),
     X   AN(1,T1),AN(2,T1),AN(1,T2),
     X   AN(2,T2),VAL(I),
     X   (NAME(L,K),L=1,NP)
      GOTO 10
 5    WRITE(6,22)I,DEF(I),ALT(I),SUC(I),
     X   AN(1,T1),AN(2,T1),AN(1,T2),
     X   AN(2,T2),VAL(I)
 22   FORMAT(1X,I4,3I5,1X,2A4,1X,2A4,1X,'(',I4,')',2X,3A4)
 10   CONTINUE
      RETURN
      END
      SUBROUTINE REDUCE
      IMPLICIT INTEGER(A-Z)
      COMMON NI,NXT,VAL(650),DEF(650),ALT(650),
     X   SUC(650),ACTION(650),FAIL(650),
     X   AN(2,750),IAN,
     X   NAME(3,250),DEFD(250),DEFVAL(250),SHRINK(250)
      COMMON/NEWCOM/ NEW(650)
      WRITE(5,22)
 22   FORMAT(' SYNTAX TABLES BEING TIGHTENED')
      K=1
      J=NXT-1
      DO 10 I=1,J
      IF(VAL(I).LE.-9999) GOTO 10
      NEW(I)=K
      IF (I.EQ.K) GOTO 8
      VAL(K)=VAL(I)
      DEF(K)=DEF(I)
      ALT(K)=ALT(I)
      SUC(K)=SUC(I)
      ACTION(K)=ACTION(I)
      FAIL(K)=FAIL(I)
 8    K=K+1
 10   CONTINUE
      J=K-1
      DO 20 I=1,J
      T1=DEF(I)
      IF(DEF(I).GT.0) DEF(I)=NEW(T1)
      T1=ALT(I)
      IF(ALT(I).GT.0) ALT(I)=NEW(T1)
      T1=SUC(I)
      IF(SUC(I).GT.0) SUC(I)=NEW(T1)
 20   CONTINUE
      NXT=K
      J=NI-1
      DO 30 I=1,J
      IF(DEFD(I).EQ.0)WRITE(5,11)(NAME(K,I),K=1,NP)
 11   FORMAT(' ** UNDEFINED CONSTRUCT -- ',3A4)
      T1=DEFVAL(I)
      IF(DEFVAL(I).GT.0) DEFVAL(I)=NEW(T1)
 30   CONTINUE
      RETURN
      END
      SUBROUTINE BLKDTA
      IMPLICIT INTEGER (A-Z)
      COMMON NI,NXT,VAL(650),DEF(650),ALT(650),
     X   SUC(650),ACTION(650),FAIL(650),
     X   AN(2,750),IAN,
     X   NAME(3,250),DEFD(250),DEFVAL(250),SHRINK(250)
      WRITE(5,1111)
 1111 FORMAT(' BLOCK DATA PROGRAM OUTPUT ON FILE 10')
      COMMON/IOCOM/IOSZE
      WRITE(5,1122)IOSZE
1122  FORMAT('  FIRST RECORD =',I4)
      J=NXT-1
      J1=J-1
      WRITE(10,11) J,J,J,J,J,J,J
 11   FORMAT(
     X   6X,'BLOCK DATA'/
     X   6X,'IMPLICIT INTEGER(A-Z)'/
     X   6X,'COMMON/COMDEF/DEF(',I4,')'/
     X   6X,'COMMON/COMALT/ALT(',I4,')'/
     X   6X,'COMMON/COMSUC/SUC(',I4,')'/
     X   6X,'COMMON/COMACT/ACTION(',I4,')'/
     X   6X,'COMMON/COMFAI/FAIL(',I4,')'/
     X   6X,'COMMON/COMVAL/VAL(',I4,')'/
     X   6X,'COMMON/COMCTL/NUMPRO'/
     X   6X,'DATA NUMPRO/',I4,'/'/
     X   6X,'DATA DEF/')
      WRITE(10,22) (DEF(K),K=1,J1)
 22   FORMAT((5X,'X',1X,11(I4,',')))
      WRITE(10,33) DEF(J)
 33   FORMAT(5X,'X',I4,'/')
      WRITE(10,44)
 44   FORMAT(6X,'DATA ALT/')
      WRITE(10,22) (ALT(K),K=1,J1)
      WRITE(10,33) ALT(J)
      WRITE(10,55)
 55   FORMAT(6X,'DATA SUC/')
      WRITE(10,22) (SUC(K),K=1,J1)
      WRITE(10,33) SUC(J)
      WRITE(10,122)
 122  FORMAT(6X,'DATA VAL/')
      WRITE(10,22) (VAL(K),K=1,J1)
      WRITE(10,33) VAL(J)
      WRITE(10,77)
 77   FORMAT(6X,'DATA ACTION/')
      DATA QU/''''/,QC/''','/
      DIMENSION T3(650)
      DO 80 K=1,J
      T1=ACTION(K)
 80   T3(K)=AN(1,T1)
      WRITE(10,88)(QU,T3(K),QC,K=1,J1)
      WRITE(10,99)T3(J)
 88   FORMAT((5X,'X',1X,8(A1,A4,A2)))
 99   FORMAT(5X,'X',1X,'''',A4,'''/')
      WRITE(10,111)
 111  FORMAT(6X,'DATA FAIL/')
      DO 90 K=1,J
      T1=FAIL(K)
 90   T3(K)=AN(1,T1)
      WRITE(10,88)(QU,T3(K),QC,K=1,J1)
      WRITE(10,99)T3(J)
      WRITE(10,66)
 66   FORMAT(6X,'END')
      RETURN
      END
      SUBROUTINE MESS
      COMMON/INP/C(20)
      WRITE(5,11)C,C
 11   FORMAT(' ** NAME GT 12 CHARS ON:'/2(4X,10A4/),16(5(1X,O12)/))
      RETURN
      END
      SUBROUTINE BREAK(IN,OUT,NUM)
      IMPLICIT INTEGER(A-Z)
      DIMENSION OUT(5)
      V=IN
      MINUS=0
      IF (IN.GE.0) GOTO 10
      MINUS="100
      V=V.AND."377777777777
 10   CONTINUE
      V=V/2**(1+7*(5-NUM))
      DO 20 J=1,NUM
      OUT(NUM-J+1)=V.AND."177
      V=V/2**7
 20   CONTINUE
      OUT(1)=OUT(1).OR.MINUS
      RETURN
      END
      SUBROUTINE PACK(IN,OUT,NUM)
      IMPLICIT INTEGER(A-Z)
      DIMENSION IN(5),BLANKS(5)
      DATA BLANKS /"1004020100,"4020100,"20100,"100,0/
      T=IN(1)
      IN(1)=T.AND."77
      OUT=0
      DO 10 J=1,NUM
 10   OUT=(OUT*2**7).OR.IN(J)
      OUT=OUT*2**(1+7*(5-NUM)).OR.BLANKS(NUM)
      IN(1)=T
      IF(T.GE."100)OUT=OUT.OR."400000000000
      RETURN
      END
      SUBROUTINE SCAN
      IMPLICIT INTEGER(A-Z)
      COMMON /SCN/S(3),NP
      COMMON/INP/C(20)
      DIMENSION COLS(80),CHARS(12)
      DATA BLANK/"40/,COL/81/
      IF(COL.LT.73)GOTO 20
 5    CALL CARD
 11   FORMAT(20A4)
      DO 10 I=1,20
 10   CALL BREAK(C(I),COLS(1+4*(I-1)),4)
      COL=1
      COLS(73)=BLANK
 20   CONTINUE
C       SKIP LEADING BLANKS
      IF (COLS(COL).NE.BLANK) GOTO 25
      COL=COL+1
      GOTO 20
 25   IF (COL.GE.73) GOTO 5
C       LEADING BLANKS REMOVED
      START=COL
      DO 30 COL=START,73
      IF (COLS(COL).EQ.BLANK) GOTO 35
 30   CONTINUE
 35   END=COL-1
      DO 40 I=1,12
      CHARS(I)=BLANK
 40   CONTINUE
      IF (END-START+1.LE.12) GOTO 50
      WRITE (5,22) C
 22   FORMAT(' *** NAME GT 12 CHARS ***',/1X,20A4)
      END=START+11
 50   DO 60 I=START,END
 60   CHARS(I-START+1)=COLS(I)
      DO 70 I=1,NP
 70   CALL PACK(CHARS(1+4*(I-1)),S(I),4)
      RETURN
      END   
      FUNCTION AND(I,J)
      INTEGER AND
      AND=I.AND.J
      RETURN
      END
      FUNCTION OR(I,J)
      INTEGER OR
      OR=I.OR.J
      RETURN
      END
      SUBROUTINE ASSTAB
      RETURN
      END
      SUBROUTINE DBGTAB
      RETURN
   D
      SUBROUTINE FIXNAM (NAME,LN,OUT,SPLITN,N)
C     THIS ROUTINE TAKES A NAME LN WORDS LONG
C        AND PACKS ITS ALPHAMERIC CHARACTERS
C        INTO THE OUTPUT STRING OUT.  SPLITN
C        INDICATES THE NUMBER OF CHARACTERS
C        PLACED IN OUT.  SPLITN<N+1. IF SPLITN
C        WOULD HAVE BEEN >N, THE FIRST N-2
C        AND LAST TWO CHARACTERS ARE USED.
      IMPLICIT INTEGER(A-Z)
      DIMENSION NAME(1),OUT(1)
      DIMENSION SPLIT(12)
      DIMENSION SPLI(12)
C     DATA C1/2ZC1/,Z40/2Z40/
      DATA C1/"101/,Z40/"040/
      DO 10 I=1,LN
 10   CALL BREAK(NAME(I),SPLI(1+4*(I-1)),4)
      SPLITN=0
      DO 20 I=1,12
      SPLIT(I)=Z40
      K=SPLI(I)
      IF (K.LT.C1) GOTO 20
      SPLITN=SPLITN+1
      SPLIT(SPLITN)=K
 20   CONTINUE
      IF(SPLITN.LE.N) GOTO 30
      SPLIT(N-1)=SPLIT(SPLITN-1)
      SPLIT(N)=SPLIT(SPLITN)
      SPLITN=N
 30   NN=(N+3)/4
      DO 40 I=1,NN
      CALL PACK(SPLIT(1+4*(I-1)),OUT(I),4)
 40   CONTINUE
      RETURN
      END
      SUBROUTINE FTCCMN
      IMPLICIT INTEGER(A-Z)
      COMMON NI,NXT,VAL(650),DEF(650),ALT(650),
     X   SUC(650),ACTION(650),FAIL(650),
     X   AN(2,750),IAN,
     X   NAME(3,250),DEFD(250),DEFVAL(250),SHRINK(250)
      DIMENSION NAM(4,250)
      DIMENSION STR(2)
      WRITE(5,511)
 511  FORMAT(' FORTRAN COMMON BLOCK ON FILE 12')
      J=0
      N1=NI-1
      DO 520 I=1,N1
      CALL FIXNAM(NAME(1,I),3,STR,K,6)
      IF (K.EQ.0) GOTO 520
C     TEMPORARILY DO NOT PUT OUT PRODUCTIONS
      IF (DEFVAL(I).GT.0) GOTO 520
C     END OF TEMPORARY CODE
      J=J+1
      DATA TV /'TV$'/,ZV /'ZV$'/,COMMA/','/
      NAM(1,J)=TV
      IF (DEFVAL(I).GT.0) NAM(1,J)=ZV
      NAM(2,J)=STR(1)
      NAM(3,J)=-DEFVAL(I)
 520  CONTINUE
      J1=J-1
      WRITE(12,522)(NAM(1,K),NAM(2,K),COMMA,K=1,J1),NAM(1,J),
     C      NAM(2,J)
 522  FORMAT(6X,'COMMON/Z23TV/'/100(5X,'C',1X,9(2A3,A1)/))
      WRITE(12,533)(NAM(1,K),NAM(2,K),NAM(3,K),COMMA,K=1,J1),
     C      NAM(1,J),NAM(2,J),NAM(3,J)
 533  FORMAT(6X,'DATA'/100(5X,'C',1X,5(2A3,'/',I4,'/',A1)/))
      N1=NI-1
      DATA SLASH/'/'/
      J=0
      DO 550 I=1,N1
      IF(DEFVAL(I).GT.0) GOTO 550
      J=J+1
      NAM(1,J)=NAME(1,I)
      NAM(2,J)=NAME(2,I)
      NAM(3,J)=NAME(3,I)
      NAM(4,J)=-DEFVAL(I)
 550  CONTINUE
      J1=J-1
      L=4*J
      DATA QUO/''''/
      WRITE(12,555)  L,(    NAM(1,K),NAM(2,K),NAM(3,K),NAM(4,K),
     X                         COMMA,K=1,J1),
     X        NAM(1,J),NAM(2,J),NAM(3,J),NAM(4,J),SLASH
 555  FORMAT(6X,'DIMENSION PRIMS(',I4,')'/6X,'DATA NPRIMS/'/
     X           100(6X,2(3('''',A4,''','),I3,A1)/))
      RETURN
      END
  
R&M