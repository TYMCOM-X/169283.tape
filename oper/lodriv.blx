!FILENAME:	LODRIV.BLI
!DATE:		1 MAR 73	MGM

%3.2%	GLOBAL BIND LODRV=1;	!MODULE VERSION NUMBER








!		UTILITY ROUTINES FOR BLISS
!	------------------------------------------



! IO ROUTINES
!-------------

%3.1%	GLOBAL ROUTINE OUTPUT(DEV,CHUNK)=
    ! OUTPUT A CHUNK (ALLWORD OR CHAR) ON 'DEV', WHERE
    !    DEV=0    TTY
    !        1    BINARY DEVICE(HIGH SEGMENT
    !        2    LISTING DEVICE
  
    IF .DEV EQL 0 THEN TTYLIST(.CHUNK) ELSE
    BEGIN MACHOP IDPB=#136;
    IF (DEVBUF[.DEV,2]_.DEVBUF[.DEV,2]-1) LEQ 0 THEN FORCE(.DEV);
    3<0,36>_.CHUNK; IDPB(3,DEVBUF[.DEV,1])
    END;

%3.1%	GLOBAL ROUTINE OCHAR(CHAR)=
    ! OUTPUT ONE CHARACTER ON THE LISTING DEVICE
    (IF NOT .LSTFLG THEN OUTPUT(2,.CHAR);1);

%3.1%	GLOBAL ROUTINE OUTREL(ALLWORD)=
    ! OUTPUT ONE ALLWORD ON THE HIGH-SEG BINARY FILE
    ( IF NOT .BINFLG THEN OUTPUT(1,.ALLWORD);1);

%2.25%GLOBAL ROUTINE OUTPSTRING(PTR)=
%2.25%	!OUTPUT THE ASCIZ STRING STARTING AT ADDRESS .PTR
%2.25%	!TO THE LISTING DEVICE
%2.25%
%2.25%	IF NOT .LSTFLG THEN
%2.25%	BEGIN
%2.25%	  REGISTER BP,	!BYTE POINTER TO OUTPUT STRING
%2.25%		   CHAR;	!HOLDS CHAR TO BE OUTPUT
%2.25%
%2.25%	  BP_((.PTR)-1)<0,7>;	!INIT BYTE POINTER
%2.25%
%2.25%	  !OUTPUT ASCIZ STRING UNTIL NULL CHAR
%2.25%
%2.25%	  UNTIL (CHAR_SCANI(BP)) EQL 0
%2.25%	    DO OUTPUT(2,.CHAR);
%2.25%
%2.25%	END;



%3.1%	GLOBAL ROUTINE OUTSTR(STR,N)=
    IF NOT .LSTFLG THEN
    BEGIN LOCAL P; MACHOP ILDB=#134;
    ! OUTPUT A (SHORT) STRING, N CHARS L.J., ON LISTING DEVICE
    P_STR<7*.N,7>;
    INCR I FROM 1 TO .N DO OUTPUT(2,ILDB(3,P));
    .N
    END;

%3.1%	GLOBAL ROUTINE OUTSTN(I)=
    IF NOT .LSTFLG THEN
    BEGIN LOCAL P,N,C; MACHOP ILDB=#134;
    ! OUTPUT A NAME FROM THE ST, INDEX OF ENTRY IS 'I'.
    P_ST[.I,1]<1,7>; N_0;
    WHILE (C_ILDB(3,P)) NEQ #177 AND .N LSS 10 DO (OUTPUT(2,.C);N_.N+1);
    .N
    END;

%3.1%	GLOBAL ROUTINE OUTBLANK(N)=
    IF NOT .LSTFLG THEN
    BEGIN LOCAL DUMDUM;
    ! OUTPUT 'N' BLANKS ON THE LISTING DEVICE
    INCR I FROM 1 TO .N DO OUTPUT(2," ")
    END;

%3.1%	GLOBAL ROUTINE OUTOCT(ALLWORD,DIGITS)=
    IF NOT .LSTFLG THEN
    BEGIN LOCAL DUMDUM;
    ! OUTPUT AN OCTAL NUMBER OF SPECIFIED NO. OF DIGITS
    DECR I FROM (.DIGITS-1) TO 0 DO OUTPUT(2,"0"+.ALLWORD<3*.I,3>);
    END;

%3.1%	GLOBAL ROUTINE OUTMOC(ALLWORD)=
    IF NOT .LSTFLG THEN
    BEGIN LOCAL T; T_0;
    ! OUTPUT MINIMAL LENGTH OCTAL CONSTANT
    DECR I FROM 11 TO 1 DO
        IF .ALLWORD<3*.I,3> NEQ 0 THEN BREAK(T_.I);
    DECR I FROM .T TO 0 DO OUTPUT(2,"0"+.ALLWORD<3*.I,3>);
    .T+1
    END;

%3.1%	GLOBAL ROUTINE OUTCONOC(A)=
!OUTPUT-CONCISE-OCTAL.  CALLED FOR 18BIT CONSTANTS.  PUTS THEM IN
!NEGATIVE FORMAT IF .A<17,1>=1.
IF .A<17,1> THEN (OCHAR("-"); OUTMOC(-(.A OR LEFTM)) + 1)
ELSE OUTMOC(.A);


%3.1%	GLOBAL ROUTINE NEWLINE=
    IF NOT .LSTFLG THEN
    BEGIN
    ! WRITE NEW LINE SYMBOL, HANDLE REQ'D PAGINATION.
    OCHAR(#15); OCHAR(#12); IF .TTYLST THEN (OCHAR(#15); OCHAR(#15));
     IF (NLINES_.NLINES+1) GTR 56 THEN (PAGE(); NLINES_0);
    IF .TTYLST THEN FORCE(2);
    END;



! ERROR IO ROUTINES
!-------------------


%3.1%	GLOBAL ROUTINE EOCHAR(CHAR)=
    BEGIN
    ! ERROR OUTPUT (ONE CHARACTER). OUTPUT GOES TO THE LISTING
    ! DEVICE, IF THERE IS ONE, AND TO THE TTY -- IF: 1) TTY IS
    ! NOT THE LISTING DEVICE ALREADY, 2) ERROR MESSAGES TO TTY
    ! HAVE NOT BEEN SPECIFICALLY SUPRESSED.

    IF NOT .LSTFLG THEN OUTPUT(2,.CHAR);
    IF NOT (.ERRBIT OR .TTYLST OR .CCLCTL<2,1>) THEN OUTPUT(0,.CHAR);
    1
    END;


%2.25%GLOBAL ROUTINE EOUTPSTRING(PTR)=
%2.25%	!OUTPUT THE ASCIZ STRING STARTING AT ADDRESS .PTR
%2.25%
%2.25%	BEGIN
%2.25%	  REGISTER BP,	!BYTE POINTER TO OUTPUT STRING
%2.25%		   CHAR;	!HOLDS CHAR TO BE OUTPUT
%2.25%
%2.25%	  BP_((.PTR)-1)<0,7>;	!INIT BYTE POINTER
%2.25%
%2.25%	  !OUTPUT ASCIZ STRING UNTIL NULL CHAR
%2.25%
%2.25%	  UNTIL (CHAR_SCANI(BP)) EQL 0
%2.25%	    DO EOCHAR(.CHAR);
%2.25%
%2.25%	END;
%3.1%	GLOBAL ROUTINE EOUTSTR(STR,N)=
    BEGIN LOCAL P; MACHOP ILDB=#134;
    ! OUTPUT (SHORT) STRING ON ERROR DEVICE(S)
    P_STR<7*.N,7>;
    INCR I FROM 1 TO .N DO EOCHAR(ILDB(3,P));
    END;



%3.1%	GLOBAL ROUTINE EOSTN(I)=
    BEGIN LOCAL P,N,C; MACHOP ILDB=#134;
    !OUTPUT A NAME FROM THE ST. INDEX OF ENTRY 'I' ON ERROR DEVICES
    P_ST[.I,1]<1,7>; N_0;
    WHILE (C_ILDB(3,P)) NEQ #177 AND .N LSS 10 DO (EOCHAR(2,.C);N_.N+1);
    .N
    END;


ROUTINE EOUTBLANK(N)=
    BEGIN LOCAL DUMDUM;
    ! OUTPUT SPECIFIED NO. BLANKS ON ERROR DEVICE(S)
    INCR I FROM 1 TO .N DO EOCHAR(" ");
    END;

ROUTINE EOUTOCT(ALLWORD,DIGITS)=
    BEGIN LOCAL DUMDUM;
    ! OUTPUT OCTAL NO. ON ERROR DEVICE(S), SPECIFIED LENGTH
    DECR I FROM (.DIGITS-1) TO 0 DO EOCHAR("0"+.ALLWORD<3*.I,3>);
    END;

%3.1%	GLOBAL ROUTINE EOUTDEC(N)=
    BEGIN LOCAL R;
    ! OUTPUT DECIMAL VALUE TO THE ERROR DEVICE(S)
    IF .N LSS 0 THEN (EOCHAR("-"); N_-.N);
    IF .N EQL 0 THEN RETURN(EOCHAR("0"));
    R_.N MOD 10;
    IF (N_.N/10) NEQ 0 THEN EOUTDEC(.N);
    EOCHAR(.R+"0");
    END;

%3.1%	GLOBAL ROUTINE ENEWLINE=
    BEGIN
    ! OUTPUT NEWLINE ON THE ERROR DEVICE(S). CHECK PAGINATION
    EOCHAR(#12); EOCHAR(#15); EOCHAR(#15);
    IF NOT .LSTFLG THEN
        IF (NLINES_.NLINES+1) GTR 56 THEN (PAGE(); NLINES_0);
    END;

%3.1%	GLOBAL ROUTINE EMESSAGE(N)=
    BEGIN LOCAL DUMDUM;
    ! WRITE OUT A LIST OF N ONE-FULLWORD STRINGS ON THE ERROR
    ! DEVICE(S). THE STRINGS ARE ASSUMED BELOW N ON THE
    ! STACK, AND HENCE THE CALL LOOKS LIKE:
    !
    !       EMESSAGE( -STR-,-STR-, ... ,-STR-, N )
    !                <------ N OF 'EM ------>
    !
    !
    DECR I FROM .N TO 1 DO EOUTSTR(@(N-.I),5);
    END;

%3.1%	GLOBAL ROUTINE FORCELINE(TOG)=
    BEGIN REGISTER P,C; MACHOP ILDB=#134;  EXTERNAL BXA;
    ! THIS ROUTINE FORCES OUT THE CURRENT INPUT BUFFER LINE
    ! IF IT IS VALID (IE, IT HASN'T BEEN PRINTED ALREADY.
    ! THE VALUE OF TOG SPECIFIES WHETHER THE LINE IS WRITTEN
    ! TO BOTH THE LISTING AND ERROR DEVICES. TOG=1 => ALSO
    ! TO THE ERROR DEVICE.
    IF .VALIDBUF THEN
	BEGIN
	IF .FFSEEN THEN
	  BEGIN
	    FFSEEN_-1;
	    SOSPGC_.SOSPGC+1;
	    PAGE();
	    NLINES_FFSEEN_0
	  END;
	P_@@(BXA+#16)^(-1);
%2.25%		OCHAR(";");	!MAKE IT A COMMENT FOR MACRO-10
	IF .TOG
	    THEN (EOUTSTR(.P,5); EOCHAR(#11); EOUTOCT(.LINCNT^(-4),4);EOUTBLANK(3))
	    ELSE (OUTSTR(.P,5); OCHAR(#11); OUTOCT(.LINCNT^(-4),4);OUTBLANK(3));
	P_(BUFF-1)<1,7>;
        WHILE ( C_ILDB(3,P) ) NEQ #177 DO
	    IF .C GEQ " "  OR  .C EQL #11 THEN
		IF .TOG THEN EOCHAR(.C) ELSE OCHAR(.C);
        IF .TOG THEN ENEWLINE() ELSE NEWLINE();
	VALIDBUF_0;
        END;
    END;


%3.1%	GLOBAL ROUTINE IDERROR(NUM,STE)=
  BEGIN
%2.25%    FORCELINE(1); EOUTSTR(";WARN",5); EOCHAR("#"); EOUTOCT(.NUM,3);
    EOUTBLANK(6); EOUTSTR("::",2); WARNINGFOUND_.WARNINGFOUND+1;
    EOSTN(.STE); ENEWLINE();
  END;


ROUTINE ERROUT(TYPE,NUM,POSN)=
    BEGIN LOCAL DUMDUM;
    ! OUTPUT ERROR MESS, OR WARNING MESS, WITH POINTER, ETC.
    FORCELINE(1);
%2.25%    EOUTSTR(.TYPE,5); EOCHAR("#"); EOUTOCT(.NUM,3);
    IF .POSN<LEFTHALF> EQL .LINCNT
	THEN EOUTBLANK(8)
	ELSE (EOUTSTR(" L:",3);EOUTOCT(.POSN<22,14>,4);EOCHAR(" "));
    INCR I FROM 1 TO (.POSN<0,7>-1) DO EOCHAR(".");
    EOCHAR("*"); ENEWLINE();
    END;

%3.1%	GLOBAL ROUTINE ERROR(POSN,NUM)=
    IF NOT .ERRLEVEL THEN
%V2H%	  !ZERO LABIND SO WE WON'T ATTEMPT TO LABEL AN ERRONEOUS EXPRESSION.
%2.25%%V2H%	    (ERROUT("ERR  ",.NUM,.POSN);ERRORFOUND_.ERRORFOUND+1; LABIND_0; CODETOG_0);






%3.1%	GLOBAL ROUTINE WARNEM(POSN,NUM)=
%2.25%    (ERROUT(";WARN",.NUM,.POSN); WARNINGFOUND_.WARNINGFOUND+1;0);




! LOGICAL (?) IO ROUTINES
!-------------------------

%3.1%	GLOBAL ROUTINE READALINE=
    BEGIN LOCAL L1;
    ! READ THE NEXT INPUT LINE INTO 'BUFF', PRINTING THE PREVIOUS
    ! LINE IF THIS HAS NOT ALREADY BEEN DONE (EG., BY AN ERROR
    ! MESSAGE. A LINE NUMBER IS ASSIGNED TO THE INPUT LINE AND
    ! A RECORD OF THIS IS PLACED IN THE CODE STRING.
    FORCELINE(0); VALIDBUF_1; LINCNT_.LINCNT+16;
    IF .CT[.CT[.CODEPTR,1]<PREVF>,1]<LEFTHALF> NEQ 0
	THEN BEGIN
	     CT[L1_GETSPACE(1),1]_.LINCNT;
	     PUSHBOT(.CODEPTR,.L1);
             END;
    IF READTEXT() THEN RECOVER (.LINCNT^18,ERILTL);	!IF 1 INPUT LINE IS LONGER THAN 135 CHARS
    IF .FINFLG THEN ( BUFF_'END);'; BUFF+1_'$;%"'''; BUFF+2_#067777777777 );
    IF .BUFF 
	THEN (PBUFF_BUFF<1,7>; NCBUFF_5+.LINCNT^18)
	ELSE (PBUFF_(BUFF-1)<1,7>; NCBUFF_0+.LINCNT^18);
    END;







!END OF LODRIV.BLI
    