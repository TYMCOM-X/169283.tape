
^^OPERATOR'S PROCEDURES\\
.TITLE ^^MPBOPR\\
.SPACING 1
.BLANK 5
.CENTER
^^MPBOPR\\
.BLANK 1
.CENTER
^^M-P-B OPERATOR'S MANUAL\\
.BLANK 15
.LEFT MARGIN 20
.NOFILL
.NOJUSTIFY
^DATE:##20-^JAN-72
^FILE:##^^MPBOPR.RNO\\
^EDITION:#1
.BLANK 15
.FILL
.JUSTIFY
.LEFT MARGIN 8
.RIGHT MARGIN 55
^THIS DOCUMENT REFLECTS THE SOFTWARE AS OF ^VERSION 4 OF ^^OPSER\\, VERSION 10 OF
^^CDRSTK\\, VERSION 6 OF ^^BATCON\\, AND VERSION 3 OF ^^SPOOL\\.
.BLANK 1
^THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY ^DIGITAL
^EQUIPMENT ^CORPORATION.
.LEFT MARGIN 0
.RIGHT MARGIN 60
.PAGE

.CENTER
^^CONTENTS\\
.LEFT MARGIN 5
.SKIP 2
.NOFILL
.NOJUSTIFY
.TAB STOPS 8,16,50
			^^PAGE\\
.SKIP 1
^^CHAPTER 1	OPSER\\	4
	1.1	^^OPSER C\\OMMANDS	5
.SKIP 1
^^CHAPTER 2	CDRSTK\\	44
	2.1	^^CDRSTK C\\OMMANDS	45
	2.2	^^CDRSTK S\\WITCHES	60
	2.3	^^$STPAUSE E\\XAMPLES	61
	2.4	^OUTPUT ^EXAMPLE	62
	2.5	^^CDRSTK E\\RROR ^MESSAGES	63
	2.5.1	^RECOVERABLE ^ERROR ^MESSAGES	63
	2.5.2	^ADVISORY ^MESSAGES	64
.SKIP 1
^^CHAPTER 3	BATCON\\	67
	3.1	^^BATCON C\\OMMANDS	68
	3.2	^^BATCON E\\RROR ^MESSAGES	97
.SKIP 1
^^CHAPTER 4	QUEUE\\	99
	4.1	^^QUEUE S\\WITCHES	101
	4.1.1	^QUEUE ^OPERATION ^SWITCHES	102
	4.1.2	^ONCE ^ONLY ^SWITCHES	103
	4.1.3	^FILE ^CONTROL ^SWITCHES	105
	4.2	^CARD ^PUNCH ^QUEUE	106
	4.3	^LINE ^PRINTER ^QUEUE	108
	4.4	^PAPER ^TAPE ^PUNCH ^QUEUE	109
	4.5	^INPUT ^QUEUE ^SWITCHES	110
	4.6	^^QUEUE E\\XAMPLES	111
	4.7	^^QUEUE E\\RROR ^MESSAGES	113
.SKIP 1
^^CHAPTER 5	SPOOLERS\\	116
	5.1	^^SPOOLER C\\OMMANDS	117
	5.2	^LINE ^PRINTER ^COMMANDS	140
	5.3	^LINE ^PRINTER ^OUTPUT ^FORMAT	142
	5.4	^PAPER ^TAPE ^PUNCH ^OUTPUT ^FORMAT	143
	5.5	^CARD ^PUNCH ^OUTPUT ^FORMAT	144
	5.6	^PLOTTER ^OUTPUT ^FORMAT	145
	5.7	^^SPOOLER\\ ^ERROR ^MESSAGES	146
	5.7.1	^RECOVERABLE ^ERROR ^MESSAGES	146
	5.7.2	^ADVISORY ^MESSAGES	147
.SKIP 1
^^INDEX\\		150
.SUBTITLE ^INTRODUCTION
.PARAGRAPH 0
.FILL
.JUSTIFY
.PAGE
.INDENT 43
.BREAK
.SKIP 10
.PARAGRAPH
^^OPSER\\, THE ^^DEC\\SYSTEM-10 OPERATOR SERVICE PROGRAM, FACILITATES MULTIPLE
JOB CONTROL FROM A SINGLE OPERATOR CONSOLE BY ALLOWING THE OPERATOR TO
RUN SEVERAL SUBJOBS FROM A SINGLE CONSOLE. ^^OPSER\\ ACTS IN THE CAPACITY
OF A SUBJOB SUPERVISOR THROUGH WHICH MONITOR LEVEL AND SYSTEM PROGRAM
LEVEL COMMANDS MAY BE PASSED EITHER TO ALL OF THE SUBJOBS OR
INDIVIDUALLY SELECTED SUBJOBS AND OUTPUT FROM THESE VARIOUS SUBJOBS
MAY BE RETRIEVED BY THE SUBJOB SUPERVISOR. ^SYSTEMS PROGRAMS WHICH
FORMERLY REQUIRED A DEVOTED CONSOLE EACH
CAN NOW BE RUN AS SUBJOBS OF ^^OPSER\\.
.SKIP 1
.PARAGRAPH
^THIS DOCUMENT IS INTENDED TO FAMILIARIZE THE ^^DEC\\SYSTEM-10 OPERATOR WITH
THE OPERATOR COMMANDS FOR ^^OPSER\\ AND THE VARIOUS OPERATOR COMMANDS AND
SWITCHES FOR THOSE SYSTEM PROGRAMS WHICH ARE MOST SUITABLE FOR RUNNING
AS SUBJOBS OF ^^OPSER\\ (E.G. ^^BATCON, CDRSTK,\\ AND ^^QUEUE\\).
^ITS MAIN
PURPOSE IS TO SERVE AS BOTH A GUIDE AND A NOTEBOOK FOR THE OPERATOR TO
ASSIST HIM IN RUNNING ^^DEC\\SYSTEM-10 ^MULTIPROGRAMMING ^BATCH JOBS.
.INDEX ^^OPSER\\
.INDEX ^^BATCON
.INDEX CDRSTK
.INDEX QUEUE\\
.SUBTITLE ^^OPSER\\
.PAGE
.INDENT 45
^^CHAPTER#1\\
.INDENT 47
^^-OPSER-\\
.SKIP 10
^^1.0##OPSER - DEC\\SYSTEM-10 OPERATOR ^SERVICE
.SKIP 3
.PARAGRAPH
^^OPSER\\ IS THE SYSTEMS PROGRAM WHICH GIVES THE OPERATOR THE CAPABILITY
OF RUNNING A NUMBER OF SYSTEM PROGRAMS SIMULTANEOUSLY FROM A SINGLE
CONSOLE BY RUNNING "SUBJOBS" ON PSEUDO-TELETYPES. ^ALL PSEUDO-TELETYPES
^^(PTY)\\ INITIALIZATION AND ^I/^O DETERMINATION ARE PERFORMED
BY ^^OPSER\\.
^THE OPERATOR NEED PROVIDE ONLY THE SUBJOB NAME, EITHER ^^OPSER\\ PROVIDED
SUBJOB NUMBER OR AN OPERATOR ASSIGNED NAME.
.SKIP 1
.PARAGRAPH
^TO START ^^OPSER\\ RUNNING, THE OPERATOR TYPES:
.SKIP 1
.INDENT 20
_.^^R OPSER\\
.SKIP 1
TO WHICH ^^OPSER\\ RESPONDS:
.INDENT 20
.SKIP 1
*
.SKIP 1
^^OPSER\\ IS NOW READY TO RECEIVE COMMANDS FROM THE OPERATOR'S CONSOLE.
.SKIP 2
.INDENT 10
^^WARNING--NEVER TYPE _^C TO OPSER\\
.SKIP 1
.PARAGRAPH
^^OPSER\\ COMMANDS MAY BE ENTERED AT ANY TIME THAT
^^OPSER\\ IS RUNNING.
^EACH COMMAND MUST BE PRECEDED BY A COLON (:) AND TYPED TO
SUFFICIENT LENGTH
TO MAKE IT UNIQUE (E.G. ":^H" WILL RESULT IN THE OUTPUT
OF THE HELP TEXT
AS WILL ":^^HE", :"HEL",\\ AND ":^^HELP"\\).
.INDEX ^^OPSER
.INDEX ^OPERATOR ^SERVICE
.INDEX ^^PTY\\
.PAGE
.SKIP 2
.PARAGRAPH
^^OPSER\\'S RESPONSE TO OPERATOR COMMANDS IS NORMALLY AN ASTERISK (*)
UNTIL ^^OPSER\\ IS "ACTIVE" (I.E. A SUBJOB HAS BEEN LOGGED IN AND IS RUNNING A PROGRAM).
^^OPSER\\ RESPONDS WITH AN EXCLAMATION POINT (!) WHEN IT IS IN AN ACTIVE MODE.
^WHENEVER NO SUBJOBS WILL PROGRESS WITHOUT OPERATOR TYPE IN, ^^OPSER\\ RESPONDS
WITH AN ASTERISK. 
.SKIP 2
.PARAGRAPH
^THE OPERATOR MAY COMMUNICATE WITH THE VARIOUS SUBJOBS UNDER ^^OPSER\\. ^TO
SEND A COMMAND TO A PARTICULAR SUBJOB, THE SUBJOB NUMBER (OR ITS DEFINED
NAME) IS INPUT, FOLLOWED BY A DASH (-), FOLLOWED BY THE COMMAND TO BE
SENT. ^IF NO SUBJOB IS SPECIFIED, THE LAST ACTIVE SUBJOB IS ASSUMED.
.SKIP 1
^FOR EXAMPLE:
.SKIP 1
.INDENT 15
^^2-R PIP<CR>\\
.SKIP 1
WILL TYPE ^^R PIP\\ TO SUBJOB _#2.
.SKIP 2
.PARAGRAPH
^IF THE OPERATOR DESIRES TO SEND SEVERAL LINES TO A SINGLE SUBJOB AT ONE
TIME, A DELIMITER PARAMETER OPTION IS AVAILABLE. ^TO SEND A MULTIPLE
LINE COMMAND TO A SUBJOB, THE SUBJOB NUMBER (OR DEFINED NAME) IS TYPED,
FOLLOWED BY A DOUBLE DASH (--) AND ANY ALPHANUMERIC WHICH
WILL SERVE AS A DELIMETER, FOLLOWED BY THE COMMAND
LINES, A TRAILING DELIMETER, AND A CARRIAGE RETURN.
.SKIP 1
^FOR EXAMPLE:
.SKIP 1
.INDENT 15
^^3--_&LOGIN<CR>
.INDENT 15
1,2<CR>
.INDENT 15
FAILSA<CR>
.INDENT 15
_&<CR>\\
.SKIP 2
WILL PERFORM THE ENTIRE ^^LOGIN\\ PROCEDURE FOR SUBJOB _#3.  ^THIS IS
ALSO USEFUL WHEN NO CARRIAGE RETURN <^C^R> IS TO BE SENT. ^FOR EXAMPLE,
TO INSERT TEXT IN ^^TECO:
.SKIP 1
.INDENT 15
4--/I FOBA$/<CR>\\
.SKIP 1
^^1.1##OPSER#C\\OMMANDS
.SKIP 1
^THE VARIOUS ^^OPSER\\ COMMANDS ARE DESCRIBED ON THE FOLLOWING PAGES.
.SUBTITLE ^^OPSER C\\OMMANDS
.PAGE

.LEFT MARGIN 0
.;:AUTO
.INDENT 54
^^:AUTO\\
.NOJUSTIFY
.FILL
.SKIP 3
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
^^:AUTO\\/HH:MM FILSPEC	^PROCESSES THE SPECIFIED FILE AS AN
AUTOMATIC STARTUP FILE.  ^THIS IS THE NORMAL
WAY THAT THE STANDARD SUBJOBS ARE STARTED BY THE
OPERATOR.  ^THE TIME ARGUMENT (/HH:MM) IS OPTIONAL; WHEN IT IS
USED, IT SPECIFIES THE TIME AND DATE WHEN THE ^^AUTO\\ FILE IS
TO BE RUN.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:\\
.SKIP 1
^^*:AUTO DSK:A.ATO<CR>\\
.SKIP 3
*:^^WH ALL<CR>\\
.LEFT MARGIN 5
.TAB STOPS 13,21,37,45,48,53
.NOFILL
.NOJUSTIFY
^^M1	6	1,2	OPROMO	SL	SW	00:00:02
M2	8	1,2	OPROMO	TI	SW	00:00:01
C	10	1,2	CDRSTK	SL	SW	00:00:13
B	13	1,2	BATCON	HB	SW	00:00:31
L	14	1,2	LPTSPL	HB	SW	00:03:08
PT	16	1,2	PTPSPL	HB	SW	00:00:00
CP	17	1,2	CDPSPL	HB	SW	00:00:00
PL	18	1,2	PLTSPL	HB	SW\\	00:00:00
.INDENT -5
.BLANK 4
------------------------------------------------------------
.RIGHT MARGIN 60
.SKIP 2
^^NOTES:\\
.BLANK 1
.LEFT MARGIN 9
.FILL
.JUSTIFY
.INDENT -4
1.##^ALL MESSAGES FROM ^^OPSER\\ ARE PRECEDED
BY THE SUBJOB NUMBER OR NAME.
.BLANK 1
.INDENT -4
2.##^IF A TIME IS SPECIFIED AND IT HAS ELAPSED, THE ^^AUTO\\ FILE
IS RUN IMMEDIATELY.
.BLANK 1
.INDENT -4
3.##^ONLY ONE ^^AUTO\\ FILE CAN BE PENDING AT ONE TIME.
.LEFT MARGIN 5
.NOFILL
.NOJUSTIFY
.INDEX ^^:AUTO\\
.PAGE
.;:CLOSE
.INDENT 49
^^:CLOSE\\
.SKIP 3
.LEFT MARGIN 25
.TAB STOPS 25
.NOJUSTIFY
.FILL
.INDENT -20
^^:CLOSE\\	^CLOSES ^^OPSER'\\S DISK LOG FILE WITHOUT
OPENING A NEW ONE. ^THE DISK LOG FILE
CONTAINS A LOG OF ALL ^^OPSER\\'S 
^I/^O ACTIVITY.
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^EXAMPLES:\\
.SKIP 2
^^*:CLOSE<CR>\\
.SKIP 1
^^*:CLOS<CR>\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^:CLOSE\\
.PAGE
.;:CURRENT
.INDENT 47
^^:CURRENT\\
.SKIP 3
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20

^^:CURRENT\\	^OUTPUTS THE NUMBER OF THE CURRENT
SUBJOB.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*:CURRENT<CR>
.BREAK
CURRENT SUBJOB#=#1\\
.BREAK
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^:CURRENT\\
.PAGE

.;:DAYTIME
.INDENT 47
^^:DAYTIME\\
.INDEX ^^:DAYTIME\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^:DAYTIME\\	^GIVES THE CURRENT DATE AND TIME.
.SKIP 4
.LEFT MARGIN 5

.INDENT -5
------------------------------------------------------------
.SKIP 2
^^EXAMPLES:
.SKIP 2
_!:DAYTIME
.BREAK
15:44:51(2)
.BREAK
.INDENT 9
27-OCT-71 15:44:51
.INDENT 9
_.
.BREAK
_!
.SKIP 2
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.PAGE
.;:DEFINE
.INDENT 48
^^:DEFINE\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^:DEFINE\\ XX=N	^ASSOCIATES SOME SYMBOL "XX" WITH
A PARTICULAR SUBJOB NUMBER "N".
.SKIP 2
.NOJUSTIFY
.FILL
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
:DEFINE FIRST=1<CR>
.SKIP 1
:DE THIRD=3<CR>
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
NOTES:\\
.SKIP 1
.LEFT MARGIN 9
.INDENT -4
1.##^THE SYMBOL "^B" HAS SPECIAL MEANING
AND IS RESERVED FOR THE SUBJOB
RUNNING ^^BATCON\\.
.INDEX ^^:DEFINE\\
.PAGE
.LEFT MARGIN 5
.;:DEVICE
.INDENT 47
^^:DEVICE\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^:DEVICE\\#DEV:LOG:N	^CAUSES THE OPERATOR SERVICE TO
TEMPORARILY EXIT TO THE MONITOR
TO ALLOW DEVICE ASSIGNMENT FOR
SUBJOB#N, FOLLOWED BY ^^CONT\\,
TO RETURN TO ^^OPSER\\. ^^REENTER\\
MUST BE TYPED IF THE DEVICE
ASSIGNMENT IS ABORTED.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*:DEVICE DSK:SYS<CR>
.BREAK
TYPE##"ASSIGN DSK:SYS<CR>CONTINUE<CR>"
.SKIP 1
_.ASSIGN DSK:SYS<CR>
.BREAK
DSK ASSIGNED
.SKIP 1
_.CONT<CR>\\
.SKIP 2
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^:DEVICE\\
.PAGE
.LEFT MARGIN 5
.;:ERROR
.INDENT 48
^^:ERROR\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^:ERROR\\#N	^IGNORES ALL NON-ERROR MESSAGES FROM SUBJOB#N. ^MESSAGE
REPORTING IS RESUMED WHEN THE ^^:REVIVE\\ COMMAND IS ISSUED.
.SKIP 4
.LEFT MARGIN 0
----------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:\\
.BLANK 2
*:^^ERROR\\#1
.LEFT MARGIN 0
.BLANK 2
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.BLANK 2
.INDEX ^^:ERROR\\
.PAGE
.;:EXIT
.INDENT 49
^^:EXIT\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^:EXIT\\	^CAUSES THE OPERATOR SERVICE TO EXIT TO THE
MONITOR UNLESS SOME SUBJOB IS STILL LOGGED
IN UNDER ^^OPSER\\. ^THIS SHOULD BE USED RATHER
THAN _^^C, SINCE ^^EXIT\\ WILL NOT RETURN THE
JOB TO MONITOR MODE IF THERE ARE ANY ACTIVE
SUBJOBS.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 1
*:EX<CR>
.SKIP 1
EXIT
.SKIP 1
_.
.SKIP 3
:EX<CR>\\
.BREAK
.NOFILL
.NOJUSTIFY
^^?SUBJOB OPSER IS RUNNING A JOB
?SUBJOB STACK IS RUNNING A JOB
?SUBJOB B IS RUNNING A JOB
TYPE ":KJOB ALL" TO LOG ALL OFF\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.NOJUSTIFY
.FILL
.BLANK 1
.LEFT MARGIN 9
.;:FREE
.INDENT -4
1.##^^OPSER\\ WILL NOT ^^EXIT\\ UNTIL THERE
ARE NO ACTIVE SUBJOBS.
.INDEX ^^:EXIT\\
.PAGE
.LEFT MARGIN 5
.INDENT 46
^^:FREE
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^:FREE\\	^CAUSES THE OUTPUT OF THE FIRST FREE
SUBJOB NUMBER.
.LEFT MARGIN 0
.SKIP 4
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*:FREE<CR>
FIRST FREE = 0
*:FRE<CR>
FIRST FREE = 0
*:FR<CR>
FIRST FREE = 0
*:F<CR>
FIRST FREE = 0\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^:FREE\\
.PAGE
.INDENT 49
^^:HELP\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^:HELP\\	^OUTPUTS A LIST OF THESE INTERACTIVE
OPERATOR COMMANDS WITH DEFINITIONS
OF EACH COMMAND.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.NOFILL
.NOJUSTIFY
.LEFT MARGIN 5
.RIGHT MARGIN 65
.TAB STOPS 20
.SKIP 2
*:HE<CR>
.SKIP 2
:FREE	TYPE NUMBER OF FIRST FREE SUBJOB
:SYSTAT XX	RUN SYSTAT OVER FIRST FREE SUBJOB
	WITH OPTIONAL ARGUMENTS "XX"
:DEFINE XXX=N	DEFINE MNEMONIC "XXX" EQUIVALENT TO "N"
:EXIT	EXIT TO MONITOR IF NO JOBS ARE RUNNING
:WHAT N	TYPE STATUS OF SUBJOB N
:KJOB N	RUN LOGOUT WITH "F" OPTION OVER SUBJOB
:KILL N	SAME AS :KJOB
:STOP N	PUT SUBJOB N IN MONITOR MODE
:MSGLVL 0	TYPE OUT SHORT :WHAT COMMAND
:MSGLVL 1	TYPE OUT LONG :WHAT COMMAND
:TTYTST	TEST OUT CONSOLE
:HELP	TYPE THIS TEXT
:RESOURCES	TYPE SYSTEM RESOURCES
:SILENCE N	IGNORE ALL OUTPUT FROM
	SUBJOB N
:ERROR N	IGNORE ALL NON-ERROR MESSAGES
	FROM SUBJOB N. RESET BY :REVIVE.
:REVIVE N	RESUME NORMAL ECHOING OF OUTPUT FROM N
:DAYTIME	GET TODAY'S DATE AND CURRENT TIME
:QUEUE <LINE>	SEND LINE TO SYSTEM QUEUE MANAGER
:JCONT NN	TELL MONITOR TO CONTINUE A STOPPED JOB
:LOGIN P,PN	SEND THE LOGIN LINE OVER THE FIRST FREE
	SUBJOB; IF NO PROJECT-PROGRAMMER NUMBER
	IS TYPED, ASSUME OPSER'S PROJECT-
	PROGRAMMER NUMBER.
:SLOGIN P,PN	SAME AS :LOGIN EXCEPT SUPPRESS ALL
	THE LOGIN CHATTER.
:CURRENT	TYPE NUMBER OF CURRENT SUBJOB
:SEND <LINE>	SIMULATES MONITOR SEND COMMAND.
:KSYS HHMM	STOP TIME SHARING AT HHMM
:SET DATE MM DD YY	SET TODAY'S DATE
:SET DAYTIME HHMM	SET CURRENT TIME
:SET OPR TTYN:	SET TTYN AS OPR
:SET CORMAX N	SET CORMAX LIMIT
:SET CORMIN N	SET CORMIN LIMIT
:SET RUN ARGS	DECLARES WHICH CPUS ARE TO RUN IN
	A MULTI-PROCESSING SYSTEM.
:SET SCHEDULE N	SET STATES
:SET TTY ARGS	DEFINE TTY CHARACTERISTICS
:DEVICE NAM:LOG:N	REASSIGN DEVICE "NAM", LOGICAL NAME "LOG",
	TO SUBJOB N
:AUTO FILSPEC	PROCESS AUTO CCL FILE; COMMANDS ARE NOT
	PROCESSED FROM CONSOLE DURING AUTO EXECUTION
.SKIP 1
:TLOG FILSPEC	OPEN LOG
:CLOSE	CLOSE IT
.SKIP 2
"ALL" MAY BE SUBSTITUTED FOR "N" IN ANY COMMAND
THAT COMMAND WILL THEN BE EXECUTED FOR ALL ACTIVE SUBJOBS\\
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.INDEX ^^:HELP\\
.RIGHT MARGIN 60
.NOJUSTIFY
.FILL
.PAGE
.;:JCONT
.INDENT 47
^^:JCONT\\
.BLANK 3
.LEFT MARGIN 25
.TAB STOPS 25
.INDENT -20
^^:JCONT\\ NN	^TELLS THE MONITOR TO CONTINUE A JOB
THAT HAD BEEN STOPPED.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:JCONT 22
.BREAK
_!
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:JCONT\\
.PAGE
.;:KILL
.INDENT 47
^^:KILL\\
.BLANK 3
.LEFT MARGIN 25
.TAB STOPS 25
.INDENT -20
^^:KILL\\#N	^KILLS THE SPECIFIED SUBJOB, SAVING ALL FILES. ^^OPSER\\
PERFORMS A ^^KJOB/F\\ COMMAND WHEN ^^KILL\\ IS TYPED.
.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^EXAMPLES:\\
.BLANK 2
.BLANK 1
^^_!:KILL ALL<CR>
.BREAK
*:EXIT\\
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.BLANK 1
^THIS COMMAND IS IDENTICAL TO THE :^^KJOB\\ COMMAND.
.INDEX ^^:KILL\\
.PAGE
.;:KJOB
.INDENT 49
^^:KJOB\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^:KJOB\\	^KILLS THE SPECIFIED SUBJOB SAVING
.INDENT -20
^^:K THIRD\\	ALL FILES. ^^OPSER\\ DOES A ^^KJOB/F\\
.INDENT -20
^^:K ALL\\	COMMAND WHEN THIS COMMAND IS TYPED.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
.SKIP 3
_!:K#ALL<CR>
.BREAK
*:EXIT\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^:KJOB\\
.PAGE
.NOJUSTIFY
.FILL
.;:KSYS
.INDENT 46
^^:KSYS\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^:KSYS\\#HH:MM	^STOPS TIMESHARING AT THE TIME
SPECIFIED BY HHMM.
.BREAK
.INDENT -20
^^:KSYS\\ +HHMM	^STOPS TIMESHARING AFTER THE NUMBER
OF HOURS AND/OR MINUTES SPECIFIED BY +HHMM.
.BREAK
.INDENT -20
^^:KSYS\\	^IF NO ARGUMENT IS  SPECIFIED, A
PREVIOUS ^^:KSYS\\ IS CANCELLED.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:KSYS 22:06
.BREAK
_!
.BREAK
_!^^:KSYS\\ +0030
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.BLANK 1
^IF THE +HHMM ARGUMENT IS USED, AT LEAST 5 MINUTES (0005) MUST
BE SPECIFIED. ^IF FEWER THAN 5 MINUTES ARE SPECIFIED, ^^OPSER\\
SETS THE TIME LIMIT TO 5 MINUTES.
.INDEX ^^:KSYS\\
.PAGE
.;:LOGIN
.INDENT 48
^^:LOGIN\\
.SKIP 3
.NOJUSTIFY
.FILL
.LEFT MARGIN 25
.INDENT -20
^^:LOGIN\\ NN,MMM	^LOGS A NEW SUBJOB IN. ^IF NN,MMM
IS ABSENT, ^^OPSER\\'S PROJECT PROGRAMMER
NUMBER IS USED AS THE DEFAULT.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*:LOG 11,225
_!12:22(1)_
.INDENT 12
JOB 11 5S0115 SYS #2 TTY43
.SKIP 2
_!######1222####15-OCT-71\\
.INDENT 12
.SKIP 2
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:
.INDEX ^^:LOGIN\\
.PAGE
.;:MSGLVL
.INDENT 46
^^:MSGLVL\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^:MSGLVL#0\\	^CAUSES THE RESPONSE TO THE :^^WHAT\\ COMMAND
TO INCLUDE THE ^^JOBSTS\\ BITS. ^THESE BITS ARE:
.BLANK 1
^L###LOGGED-IN
.BREAK
^M###MONITOR MODE
.BREAK
^I#UT REQUIRED
.BREAK
^O###OUTPUT READY
.BREAK
^A###THE ^^JACCT\\ BIT IS SET

.BLANK 1
.INDENT -20
^^:MSGLVL#1\\	^CAUSES THE RESPONSE TO THE ^^:WHAT\\ COMMAND
TO BE SHORTENED SO THAT IT WILL NOT INCLUDE THE ^^JOBSTS\\ BITS.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:MSGLVL 0
.BREAK
_!:^^WHAT ALL\\
.BLANK 1
.TAB STOPS 9,13,20,28,31,35,45,47,49
.LEFT MARGIN 5
.NOFILL
.NOJUSTIFY
^^M1	6	1,2	OPROMO	SL	SW	00:00:02	L
M2	8	1,2	OPROMO	TI	SW	00:00:01	L	I
C	10	1,2	CDRSTK	SL	SW	00:00:13	L		A
B	13	1,2	BATCON	HB	SW	00:00:31	L
L	14	1,2	LPTSPL	RN	SW	00:03:10	L		A
PT	16	1,2	PTPSPL	HB	SW	00:00:00	L
CP	17	1,2	CDPSPL	HB	SW	00:00:00	L
PL	18	1,2	PLTSPL	HB	SW	00:00:00	L
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:MSGLVL\\
.PAGE
.;:QUEUE
.INDENT 48
^^:QUEUE\\
.SKIP 3
.LEFT MARGIN 25
.TAB STOPS 25
.NOJUSTIFY
.FILL
.INDENT -20
^^:QUEUE\\ LINE	^SENDS THE TYPED-IN LINE TO THE SYSTEM
QUEUE MANAGER.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*:QUEUE FOO,DOO
11:31(1)_
.SKIP 3
*:QUE#DSK:FOO.LST=/LIST\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^:QUEUE\\
.PAGE
.;:RESOURCES
.INDENT 45
^^:RESOURCES\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^:RESOURCES	O\\UTPUTS A LIST OF THE AVAILABLE
SYSTEM RESOURCES.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*:RES
12:21(1)_
.INDENT 7
DSKA,DSKB,PRIV,CDR,PTR,DTA1,2,3,5,6,7,MTA0,1,PTP
.SKIP 2
.INDENT 19
.SKIP 3
.INDENT 0
*:RESOURCES
11:29(1)_
.INDENT 7
DSKA,DSKB,PRIV,CDR,PTR,DTA0,4,6,7,PTP\\
.INDENT 19
.SKIP 2
_.
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^:RESOURCES\\
.PAGE
.;:REVIVE
.INDENT 48
^^:REVIVE\\
.BLANK 3
.LEFT MARGIN 25
.NOJUSTIFY
.FILL
.INDENT -20
^^:REVIVE\\ N	^RESUMES THE NORMAL ECHOING OF
OUTPUT FROM SUBJOB N THAT WAS STOPPED
BY A ^^:SILENCE\\ COMMAND.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
:REVIVE B
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:REVIVE\\
.PAGE
.;:SEND
.INDENT 50
^^:SEND\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^:SEND\\ <LINE>	^SIMULATES THE MONITOR COMMAND ^^SEND\\.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:SEND TTY0 OPSER RUNNING
.BREAK
_!
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:SEND\\
.PAGE
.;:SET CORMAX
.INDENT 44
^^:SET CORMAX\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^:SET CORMAX\\ N	^SETS THE ^^CORMAX\\ LIMIT TO THE
AMOUNT SPECIFIED BY N. N IS A DECIMAL NUMBER REPRESENTING ^K OF CORE. ^THE
MINIMUM VALUE OF N IS 10 UNLESS CHANGED AT ^^MONGEN\\ OR ^^ONCE\\-ONLY TIME.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:SET CORMAX 25
.BREAK
_!
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:SET CORMAX\\
.PAGE
.;:SET CORMIN
.INDENT 44
^^:SET CORMIN\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^:SET#CORMIN\\#N	^SETS THE ^^CORMIN\\ LIMIT TO THE AMOUNT SPECIFIED
BY N. N IS A DECIMAL NUMBER REPRESENTING ^K OF CORE.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:SET CORMIN 25
.BREAK
_!
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:SET CORMIN\\
.PAGE
.;:SET DATE
.INDENT 46
^^:SET DATE\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^:SET DATE\\ MMDDYY	^SETS THE CURRENT DATE IN THE FORM MONTH-DAY-YEAR.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:SET DATE 103171
.BREAK
_!
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:SET DATE\\
.PAGE
.;:SET DAYTIME
.INDENT 43
^^:SET DAYTIME\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^:SET DAYTIME\\ HHMM	^SETS THE CURRENT TIME.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:SET DAYTIME 2205
.BREAK
_!
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:SET DAYTIME\\
.PAGE
.;:SET OPR
.INDENT 47
^^:SET OPR\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^:SET OPR TTY\\N	^SETS THE TERMINAL DESIGNATED BY ^^TTY\\N
AS ^^OPR\\.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:SET OPR TTY0
.BREAK
_!
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:SET OPR\\
.PAGE
.;:SET RUN
.INDENT 46
^^:SET RUN
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
:SET RUN \\ARG	^ALLOWS THE OPERATOR TO DECLARE WHICH ^^CPU\\S ARE TO BE
RUNNING IN A MULTI-PROCESSING SYSTEM AND WHICH ARE NOT.  ^THE ARGUMENT
CAN BE:
.BREAK
^^CPU\\N#-#DECLARES THAT ^^CPU\\N IS TO BE
.BREAK
	#######RUN
.BREAK
^^NO CPU\\N#-#DECLARES THAT ^^CPU\\N IS NOT
.BREAK
	##########BE BE RUN
.BREAK
^^ALL\\#-#DECLARES THAT ALL ^^CPU\\S ARE TO
.BREAK
	######BE RUN (DEFAULT)
.BLANK 5
.LEFT MARGIN 5
.INDENT -5
-------------------------------------------------------------
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:SET RUN NO CPU1
.BLANK 2
.INDENT -5
-------------------------------------------------------------
.BLANK 2
NOTES:\\
.INDEX ^^:SET RUN\\
.PAGE
.;:SET SCHEDULE
.INDENT 42
^^:SET SCHEDULE\\
.BLANK 3
.LEFT MARGIN 25
.NOJUSTIFY
.FILL
.INDENT -20
^^:SET SCHEDULE\\ N	^CHANGES THE SCHEDULED USE OF THE SYSTEM,
DEPENDING ON N. N IS OCTAL AND IS STORED IN ^R^H OF ^^STATES\\
WORD IN ^^COMMON\\.
.BLANK 1
.LEFT MARGIN 32
.TAB STOPS 32
.INDENT -7
N=0	REGULAR TIMESHARING.
.INDENT -7
N=1	NO FURTHER ^^LOGIN\\S ALLOWED EXCEPT FROM ^^CTY\\.
.INDENT -7
N=2	NO FURTHER ^^LOGIN\\S FROM REMOTE TERMINALS, AND DO
NOT ANSWER DATA SETS.
.INDENT -7
N=4	BATCH ONLY.
.INDENT -7
N=100	DEVICE MOUNTS CAN BE DONE WITHOUT OPERATOR
INTERVENTION.
.INDENT -7
N=200	UNSPOOLING ALLOWED.
.INDENT -7
N=400	NO OPERATOR COVERAGE.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:SET SCHED 1
.BREAK
_!
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:SET SCHEDULE\\
.PAGE
.;:SET TTY ARG
.INDENT 43
^^:SET TTY\\ ARG
.BLANK 3
.LEFT MARGIN 25
.TAB STOPS 25
.INDENT -20
^^:SET#TTY\\#ARG	^DEFINES THE CHARACTERISTICS OF A
TERMINAL.  ^THE ARGUMENT CAN BE ONE OF
THE FOLLOWING: ^^TAB, NOTAB, FORM, NO FORM,
LC, NO LC, WIDTH\\ N, ^^CRLF, NO CRLF,
SLAVE, NO ECHO, ECHO, FILL\\ N, ^^NO FILL\\.
^REFER TO ^^DEC\\SYSTEM-10\\ ^OPERATING ^SYSTEM ^COMMANDS
(^^DEC\\-10-^^MRDB-D)\\ FOR MORE INFORMATION ABOUT
^^SET TTY\\.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!:SET TTY NO TAB
.BREAK
_!
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:SET TTY\\
.PAGE
.;:SILENCE
.INDENT 46
^^:SILENCE\\
.BLANK 3
.TAB STOPS 25
.NOJUSTIFY
.FILL
^^:SILENCE\\ N	^IGNORES ALL OUTPUT FOR SUBJOB N.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
:SILENCE B
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:SILENCE\\
.PAGE
.;:SLOGIN
.INDENT 46
^^:SLOGIN\\
.BLANK 3
.LEFT MARGIN 25
.TAB STOPS 25
.INDENT -20
^^:SLOGIN\\ P,PN	^PERFORMS THE SAME ACTIONS AS THE ^^:LOGIN\\ COMMAND,
EXCEPT THAT THE RESPONSE IS SUPPRESSED.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
*:^^SLOGIN\\
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.INDEX ^^:SLOGIN\\
.PAGE
.;:STOP
.INDENT 49
^^:STOP\\
.SKIP 3
.LEFT MARGIN 25
.NOJUSTIFY
.FILL
.INDENT -20
^^:STOP\\
.INDENT -20
^^:STOP\\ N	^SETS THE SPECIFIED SUBJOB TO 
.INDENT -20
^^:STO THIRD\\	MONITOR COMMAND MODE. ^THIS COMMAND IS THE
EQUIVALENT TO INPUTTING TWO CONTROL 
^C'S TO THE SPECIFIED SUBJOB.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
:STO ALL
.SKIP 3
_!
.SKIP 3
_!:STO STACK\\
.SKIP 1
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.SKIP 1
.LEFT MARGIN 9
.INDENT -4
1.##^^WARNING\\ - ^NEVER TYPE _^^C TO ^^OPSER\\
.INDEX ^^:STOP\\
.PAGE
.LEFT MARGIN 5
.;:SYSTAT
.INDENT 48
^^:SYSTAT\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^:SYSTAT\\ ARG	^RUNS ^^SYSTAT\\ OVER THE FIRST FREE SUBJOB.
^THE ARGUMENT CAN BE ONE OR MORE OF THE FOLLOWING:
.BLANK 1
.NOFILL
.NOJUSTIFY
^B##^BUSY DEVICE STATUS
^D##^DORMANT SEGMENT STATUS
^E##^NON-DISK ERROR REPORT
^F##^FILE STRUCTURE STATUS
^H##^HELP MESSAGE
^J##^JOB STATUS
^L##^OUTPUT TO ^^LPT\\
^N##^NON-JOB STATUS (ALL BUT ^J)
^P##^DISK PERFORMANCE
^R##^REMOTE STATION STATUS
^S##^SHORT JOB STATUS
^T##^DATASET STATUS
^X##^READ ^^DSK:CRASH.XPN\\
.BLANK 1
.NOJUSTIFY
.FILL
NNN PRINTS JUST JOB NNN (. DOES THIS JOB).
[P,PN] PRINTS JUST JOBS WITH THAT PROJECT-PROGRAMMER NUMBER.
_#NNN PRINTS JUST JOBS FROM TERMINAL NNN.
^ALSO, ^^C=CTY, P\\NN=^^PTY\\NN,^TNN=^^TTY\\NN,.=THIS ^^TTY\\.
.BLANK 4
.FILL
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^EXAMPLES:
.BLANK 2
*:^^SYSTAT\\
.BLANK 2
.RIGHT MARGIN 65
.NOFILL
.TAB STOPS 11,21,29,38,46,58
^^SYSTAT V464
.BLANK 2
STATUS OF##5S0220E##SYSTEM _#2 AT 03:12:55 P.M. ON 12-APR-71
.BLANK 1
UPTIME 2:27:55, 70% NULL TIME = 57% IDLE + 13% LOST
22 JOBS IN USE OUT OF 37.  22 LOGGED IN, 2 DETACHED
.BLANK 1
.PAGE
JOB	 WHO     LINE_#    WHAT   SIZE(K)  STATE   RUN TIME
.BLANK 1
#1	[OPR]	P1	OMOUNT	6	TI	###23
#2	10,110	11	TECO	2+3	TI	#1:49
#3	[OPR]	P2	CDRSTK	2	_^C#SW	####4
#4	[OPR]	P3	BATCON	4+4	SL#SW	###42
#5	[OPR]	P4	LPTSPL	2+3	SL SW	 1:15
#6	[OPR]	P6	CHKPNT	2	SL SW	    3
#7	**,**	DET	DAEMON	7+SPY	SL SW	    1
#8	10,133	110	PIP	1+4	_^C SW	    1
#9	10,34	24	BASIC	6+7	TI	 5:20
10	[OPR]	P0	OMOUNT	6	SL SW	   22
11	[OPR]	12	SYSDPY	3+SPY	TI	20:49
12	12,47	32	S	5+6	TI SW	   36
13	[OPR]	CTY	OPSER	1+2	TI	   28
14	[OPR]	 2	QUEUE	3+6	_^C SW	 2:18
15	 2,44	 0	DIRECT	1+2	TI SW	    8
16	**,**	DET	P	1+4	_^C SW	 1:00 _#
17	10,1	26	QUEUE	3+6	TI SW	    1
18	11,176	 1	DIRECT	1+2	_^C SW	   47
19	31,554	27	TECO	2+3	TI	    2
20	[SELF]	25	SYSTAT	4+SPY	RN	    0
21	10,770	30	TECO	2+3	TI	    1
22	 4,77777	31	PIP	1+4	TI SW	    1
_# MEANS NON-SYSTEM HI-SEG
PNN CORRESPONDS TO TTY42+NN
.BLANK 2
HIGH SEGMENTS:
.TAB STOPS 13,21,29,37
PROGRAM	DEVICE	OWNER	HIGH(K)	USERS
.BLANK 1
OPSER	DSKB	SYS	2	1
DIRECT	DSKB	SYS	2 SW	2
BATCON	DSKB	SYS	4 SW	1
LPTSPL	DSKB	SYS	3 SW	1
QUEUE	DSKB	SYS	6 SW	1
TECO	DSKB	SYS	3	3
PIP	DSKA	SYS	4 SW	1
BASIC	DSKB	SYS	7	1
(PRIV)		JOB 12	6 SW	1
(PRIV)		JOB 17	6 SW	1
P	DSKC	11,131	4 SW	1
(PRIV)		JOB 22	4 SW	1
.BLANK 1
SWAPPING SPACE USED = 90/297 = 30%
VIRT. CORE USED = 116/297 = 39%
SWAPPING RATIO = 116/41 = 2.8
VIRT. CORE SAVED BY SHARING = 8/(8+116) = 6%
.PAGE
.BLANK 1
BUSY DEVICES:
.TAB STOPS 13,21,28
DEVICE	JOB	WHY	LOGICAL
.BLANK 1
PTY0	13	INIT
PTY1	13	INIT
PTY2	13	INIT
PTY3	13	INIT
PTY4	13	INIT
PTY6	13	INIT
CDR1	8	AS
LPT1	0	AS
DTA0	9	AS
DTA1	10	AS
DTA2	1	AS
DTA3	12	AS
DTA4	15	AS
DTA5	18	AS+INIT
DTA6	2	AS
DTA7	18	AS
MTA0	14	AS+INIT
23 DISK DDBS
.BLANK 1
SYSTEM FILE STRUCTURES:
NAME	FREE	MOUNT
DSKA	4271	23
DSKB	23785	23
DSKC	11076	23
.BLANK 1
REMOTE STATIONS
NUMBER STATUS
.BLANK 1
1	CENTRAL
2	DOWN
.BLANK 1
DATASET CONTROL
TTY_#	STATUS
.BLANK 1
14	RANG\\
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^:SYSTAT\\
.PAGE
.;:TLOG
.INDENT 49
^^:TLOG\\
.SKIP 3
.LEFT MARGIN 25
.TAB STOPS 25
.INDENT -20
^^:TLOG\\ FILSPEC	^CREATES A DISK LOG FILE WITH THE
SPECIFIED NAME.  ^THIS LOG FILE WILL
RECEIVE ALL MESSAGES TYPED OR
RECEIVED FROM THE CONSOLE.
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*:TLOG DSK:OUTPUT
.SKIP 2
*:TLOG DSK:OUTPUT
.BREAK
?FILE EXISTS ALREADY, SUPERCEDE ? (Y OR N) Y
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^:TLOG\\
.PAGE
.;:TTYTST
.INDENT 48
^^:TTYTST\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^:TTYTST\\	^TESTS THIS CONSOLE BY OUTPUTTING A
STANDARD TEST PATTERN.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLE:
.SKIP 2
*:TTYTST
#!"#$%&'()*+,-./123456789:<=>?
@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_\\
.SKIP 2
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^:TTYTST
.PAGE
.;:WHAT
.INDENT 50
^^:WHAT\\
.SKIP 3
^^:WHAT\\ N	^CAUSES THE STATUS OF THE SPECIFIED
^^:WHAT\\ XX	SUBJOB TO BE OUTPUT.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
.LEFT MARGIN 5
_!:WH#ALL
.LEFT MARGIN 5
.TAB STOPS 13,21,37,45,48,53
.NOFILL
.NOJUSTIFY
^^M1	6	1,2	OPROMO	SL#SW	00:00:01
M2	7	1,2	OPROMO	SL#SW	00:00:01
C	8	1,2	CDRSTK	SL#SW	00:00:09
B	9	1,2	BATCON	HB#SW	00:00:15
L	10	1,2	LPTSPL	DI		00:01:51
PT	14	1,2	PTPSPL	HB#SW	00:00:00
CP	16	1,2	CDPSPL	HB#SW	00:00:00
PL	17	1,2	PLTSPL	HB#SW	00:00:00
!
.SKIP 2
.LEFT MARGIN 0
.RIGHT MARGIN 60
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.FILL
.JUSTIFY
^^NOTES:\\
.SKIP 1
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##^THE MNEMONIC ^^"ALL"\\ MAY BE SUBSTITUTED
FOR THE SUBJOB NAME/NUMBER IN ANY INTER-
ACTIVE ^^OPSER\\ COMMAND WHICH USES THAT
ARGUMENT.  ^ALL ACTIVE SUBJOBS ARE IMPLIED
BY THIS ARGUMENT.
.INDEX ^^:WHAT\\
.SUBTITLE ^^CDRSTK\\
.PAGE
.LEFT MARGIN 0
.INDENT 50
^^CHAPTER#2\\
.INDENT 51
^^-CDRSTK-\\
.SKIP 10
.LEFT MARGIN 5
^^2.0##CDRSTK - DEC\\SYSTEM-10 ^CARD ^READER ^INPUT ^STACKER
.SKIP 3
.PARAGRAPH
.FILL
.JUSTIFY
^^CDRSTK\\ IS THE ^^DEC\\SYSTEM-10 SYSTEMS PROGRAM WHICH READS ANY
SEQUENTIAL INPUT STREAM AND ENTERS JOBS INTO THE ^^BATCON\\
INPUT QUEUE.  ^NORMALLY THE INPUT STREAM IS FROM A CARD READER,
BUT ANY DEVICE SUPPORTING ^^ASCII\\ CAN BE HANDLED.  ^^CDRSTK\\ ANALYZES
THE INPUT STREAM FOR CARD READER STACKER CONTROL CARDS (COLUMN 1
=$)
AND PROCESSES THEM.  ^THE REMAINING CARDS ARE COPIED TO
VARIOUS FILES FOR
PROCESSING BY THE USER JOB.  ^^CDRSTK\\ CREATES THE JOB'S
^^LOG\\ FILE AND ENTERS A REPORT OF PROCESSING INTO THIS
FILE.  ^OTHER INFORMATION MAY
BE ENTERED INTO THIS FILE EITHER VIA USER CONTROL CARDS OR VIA OPERATOR
INTERVENTION.
.SKIP 1
.PARAGRAPH
^^CDRSTK\\ MAY BE RUN EITHER AS A TIME-SHARING JOB OR AS A SUBJOB OF
^^OPSER\\. ^TO START ^^CDRSTK\\ RUNNING AS A TIME-SHARING JOB, THE
OPERATOR TYPES:
.SKIP 1
.INDENT 20
^^.R CDRSTK\\
.SKIP 1
TO WHICH ^^CDRSTK\\ RESPONDS WITH
.SKIP 1
.INDENT 20
*
.SKIP 1
.PARAGRAPH
^TO START ^^CDRSTK\\ RUNNING AS AN ^^OPSER\\ SUBJOB, THE OPERATOR WOULD
TYPE TO AN ALREADY EXISTING SUBJOB.
.SKIP 1
.INDENT 20
E.G. ^^1-R CDRSTK\\
.SKIP 1
TO WHICH ^^OPSER\\ RESPONDS WITH:
.SKIP 1
.INDENT 20
^^!HH:MM#(1)#<CR>\\
.SKIP 1
^FOLLOWED BY THE ^^CDRSTK\\ RESPONSE (*) TABBED IN ON THE NEXT LINE.
^AT THIS POINT, ^^CDRSTK\\ IS READY TO  RECEIVE COMMANDS FROM THE
OPERATOR'S CONSOLE.
.SKIP 1
.PARAGRAPH
^^CDRSTK\\ COMMANDS MAY BE ENTERED AT ANY TIME THAT ^^CDRSTK\\
IS RUNNING.  ^^CDRSTK\\ COMMANDS MUST BE TYPED TO SUFFICIENT LENGTH
TO BE UNIQUE (I.E. "^H" WILL RESULT IN OUTPUT OF THE "HELP" TEXT
AS
WILL ^^"HE", "HEL",\\ AND ^^"HELP")\\.  ^^CDRSTK\\ RESPONDS TO ALL
COMMANDS WITH EITHER AN ASTERISK (*) INDICATING THAT IT IS WAITING 
FOR OPERATOR INPUT, OR AN EXCLAMATION POINT (!) INDICATING THAT IT IS
PRESENTLY PROCESSING A JOB.
.SKIP 1
^^2.1##CDRSTK#C\\OMMANDS
.SKIP 1
^THE VARIOUS ^^CDRSTK\\ COMMANDS ARE DESCRIBED ON THE FOLLOWING PAGES:
.NOFILL
.NOJUSTIFY
.INDEX ^^CDRSTK\\
.INDEX ^^BATCON\\
.INDEX ^^LOG\\
.INDEX *
.INDEX !
.SUBTITLE ^^CDRSTK C\\OMMANDS
.PAGE
.LEFT MARGIN 5
.;EXIT
.INDENT 51
^^EXIT\\
.SKIP 3
.TAB STOPS 25
^^EXIT	E\\XITS FROM ^^CDRSTK\\ TO ^MONITOR MODE
.SKIP 4
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^EXAMPLES:\\
.SKIP 2
^^*EXIT\\
.SKIP 2
^^EXIT\\
.SKIP 2
_.
.SKIP 4
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.INDEX ^^EXIT\\
.PAGE
.LEFT MARGIN 5
.;GO
.INDENT 52
^^GO\\
.SKIP 4
.NOJUSTIFY
.FILL
.LEFT MARGIN 25
.INDENT -20
^^GO\\	^CONTINUES ^^CDRSTK\\ OPERATIONS AFTER THE OPERATOR
HAS TYPED ^^"STOP"\\ OR A USER MESSAGE HAS BEEN
OUTPUT TO THE OPERATOR
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:\\
.SKIP 2
.NOFILL
.NOJUSTIFY
^^*START
$STPAUS INTERTALK EXAMPLE
NAME-JOBAAL
DECK _#1
CARD _#4
*GO\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^GO\\
.INDEX ^^STOP\\
.PAGE
.;HELP
.INDENT 50
^^HELP\\
.SKIP 3
.FILL
.INDEX ^^HELP\\
.LEFT MARGIN 25
.INDENT -20
^^HELP\\	^TYPES THE LIST OF ^^CDRSTK\\ INTERACTIVE COMMANDS
TO THE OPERATOR WITH A BRIEF DESCRIPTION
OF EACH.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:\\
.SKIP 2
.TAB STOPS 18,20
.NOFILL
.NOJUSTIFY
.RIGHT MARGIN 65
^^*HELP
.BLANK 2
COMMAND	DESCRIPTION
.BREAK
-------	-----------
.BLANK 1
EXIT	GO TO MONITOR MODE.
GO	CONTINUE AFTER STOP COMMAND.
HELP	TYPE OUT THIS TEXT.
KILL	KILL THE CURRENT JOB NOW.
MCORE	RESET MAXIMUM CORE ALLOWED TO THIS JOB.
MSGLVL	OUTPUT CARD IMAGES TO OPERATOR.
	FORMAT:
	MSGLVL ABC
	A=0 SHORT MESSAGES TO OPERATOR.
		1 LONG MESSAGES TO OPERATOR.
	B=0 NO ERROR CARDS.
		1 FIRST FATAL MESSAGE OF JOB.
		2 EACH ERROR CARD.
	C=0 NO $CARDS.
		1 EACH $JOB CARD.
		2 EACH $CARD.
		3 EACH CARD.
PAUSE	PAUSE AT EOF.
RESET	RESTART CDRSTK.
START	START CDRSTK PROCESSING.
	FORMAT:	START
	DEVICE:[PROJ,PROG]FILE.EXT/SWITCH/SWITCH
.BLANK 1
.TAB STOPS 18,30
	SWITCH	USAGE
	------	-----
	026	READ IN 026 MODE.
	ASCII	READ IN ASCII MODE.
	D029	READ IN D029 MODE.
	HELP	TYPE THIS TEXT.
	IMAGE	READ IN IMAGE MODE.
	MULTIF	INPUT MULTIPLE FILES FROM CDR.
	SINGLE	INPUT ONE FILE--ASK FOR INPUT.
	SUPPRE	SUPPRESS TRAILING BLANKS ON
		INPUT CARDS.
STOP	TYPE JOBNAME, DECK NUMBER, AND CARD NUMBER.
TELL	COMMENT FROM OPERATOR TO LOG FILE.
WHAT	PRINT JOB STATUS.
ZZZ	SLEEP INTERVAL - MULTIFILE MODE.\\
.RIGHT MARGIN 60
.BLANK 2
--------------------------------------------------------
.BLANK 2
^^NOTES:\\
.PAGE

.;KILL
.INDENT 49
^^KILL\\
.SKIP 3
.TAB STOPS 25
^^KILL\\	^ABORTS THE PRESENT JOB.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
\\
.SKIP 2
^^*START
$STPAUS INTERTALK EXAMPLE
NAME-JOBAAF
DECK _#1
CARD _#4
*KILL\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^KILL\\
.INDEX ^^$STPAUSE\\
.PAGE
.;MCORE
.INDENT 48
^^MCORE\\
.SKIP 3
.FILL
.LEFT MARGIN 25
.INDENT -20
^^MCORE\\ NN	^RESETS THE MAXIMUM CORE ALLOWANCE FOR THE
PRESENT JOB.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
^^*MCO 33
*
.SKIP 2
*MCORE 99
.SKIP 1
.NOFILL
?OVER SYS MAXIMUM, TYPE "C" TO CONT
 OR A NEW ARG\\
*33
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.BLANK 1
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##^IF THE OPERATOR SUPPLIED ARGUMENT (NN)
EXCEEDS THE INSTALLATION SUPPLIED MAXIMUM,
^^CDRSTK\\ WILL REQUEST A NEW ARGUMENT FROM
THE OPERATOR.
.INDEX ^^MCORE\\
.PAGE
.;MSGLVL
.INDENT 46
^^MSGLVL\\
.SKIP 3
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
^^MSGLVL\\ ABC	^GIVES TO THE OPERATOR THE
ABILITY TO DETERMINE THE EXTENT OF
^^CDRSTK\\ MESSAGE OUTPUT.  ^THE
COMMAND ARGUMENT IS SOME FORM OF
THE FOLLOWING:
.TAB STOPS 27
.NOFILL
.SKIP 2
A=0#OUTPUT SHORT MESSAGES TO THE
	##OPERATOR
	1#OUTPUT LONG MESSAGES TO THE
	##OPERATOR
B=0#SUPPRESS ERROR CARD OUTPUT
	1#OUTPUT FIRST FATAL MESSAGE OF
	##JOB
	2#OUTPUT EACH ERROR CARD
C=0#OUTPUT NO $ CARDS
	1#OUTPUT EACH $^^JOB\\ CARD
	2#OUTPUT EACH $ CARD
	3#OUTPUT ALL CARDS
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
^^*MSGLVL 123
*\\
.SKIP 2
*^^MSG 0
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^MSGLVL\\
.PAGE
.;PAUSE
.INDENT 48
^^PAUSE\\
.SKIP 3
.FILL
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
^^PAUSE	P\\AUSES ^^CDRSTK\\ AT THE NEXT END-OF-FILE
WAITING FOR THE OPERATOR TO RESTART IT.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
^^!PAUSE\\
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^PAUSE\\
.PAGE

.;RESET
.INDENT 48
^^RESET\\
.SKIP 3
^^RESET\\	^STARTS ^^CDRSTK\\ OVER AGAIN.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*RESET
*RES
*RE
*R\\
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.SKIP 1
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##^ANY ABBREVIATION OF THE ORIGINAL COMMAND,
AS LONG AS IT IS UNIQUE IS AN ACCEPTABLE
COMMAND. (I.E. ^^RESET\\ MAY BE EXPRESSED AS
^R, ^R^E, AND ^R^E^S)
.INDEX ^^RESET\\
.PAGE
.LEFT MARGIN 5
.;START
.INDENT 49
^^START\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^START\\ DEV:FILE.EXT[PROJ,PROG]/SWITCH/SWITCH
.BREAK
.BLANK 1
^STARTS ^^CDRSTK\\ PROCESSING NOW.
^THE DEFAULT INPUT DEVICE FOR ^^"START"\\
IS THE ^C^D^R.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 1
*STAR
.SKIP 3
*START CDR:
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
NOTES:
.INDEX START\\
.PAGE

.;STOP
.INDENT 50
^^STOP\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^STOP	S\\TOPS PROCESSING NOW AND TYPES OUT THE PRESENT
JOB NAME, DECK NUMBER, AND CARD NUMBER.
^^CDRSTK\\ THEN WAITS FOR THE OPERATOR TO INPUT
^^"GO"\\ TO CONTINUE.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:
.SKIP 2
*STOP
NAME-JOBAAE
DECK _#1
CARD _#4
*GO
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
NOTES:
.INDEX ^^STOP\\
.PAGE
.;TELL
.INDENT 50
^^TELL\\
.SKIP 3
.FILL
.LEFT MARGIN 25
.INDENT -20
^^TELL	G\\IVES THE OPERATOR THE ABILITY TO
INPUT A MESSAGE TO THE PRESENT JOB.  ^THIS 
MESSAGE WILL BE PUT INTO THE JOB'S ^^LOG\\ FILE.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:
.SKIP 2
*TELL
TYPE
*THIS IS A MESSAGE
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
NOTES:
.SKIP 1
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##^^CDRSTK\\ RESPONDS WITH THE MESSAGE ^^"TYPE"\\
WHEN IT IS READY FOR MESSAGE INPUT.
.INDEX ^^TELL\\
.PAGE

.LEFT MARGIN 5
.;WHAT
.INDENT 50
^^WHAT\\
.SKIP 3
.TAB STOPS 25,30
.LEFT MARGIN 25
.INDENT -20
^^WHAT	P\\RINTS THE PRESENT JOB STATUS IN THE FORM
.NOFILL
	^^JOBNAME
	DECK _#
	CARD _#\\
AND THEN CONTINUE WITH THE JOB.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
WHAT
NAME-JOBAAE
DECK _#2
CARD _#17
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^WHAT\\
.PAGE
.;ZZZ
.INDENT 50
^^ZZZ\\
.SKIP 3
.FILL
.LEFT MARGIN 25
.INDENT -20
^^ZZZ\\ NN	^CHANGES THE ^C^D^R INTER-JOB SLEEP
INTERVAL (^^MULTI-FILE-MODE\\)
TO THE SPECIFIED ARGUMENT VALUE.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:
.SKIP 2
*ZZ 3
*
.SKIP 2
*Z 3\\
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^Z^Z^Z
.PAGE
.LEFT MARGIN 0
.INDENT 43
^^CDRSTK#SWITCHES\\
.SKIP 5
.LEFT MARGIN 5
^^2.2##CDRSTK#S\\WITCHES
.SKIP 2
.FILL
.JUSTIFY
^VARIOUS SWITCHES ARE PROVIDED BY ^^CDRSTK\\ TO GIVE THE
OPERATOR CONTROL
OVER READ-IN MODES. ^THESE SWITCHES MAY APPEAR ALONE OR AFTER THE 
FILE SPECIFICATION OF THE ^^"START"\\ COMMAND. ^THEY ARE ALWAYS
PRECEEDED BY A SLASH "/" AND THE FIRST LETTER IS UNIQUE. ^THE VARIOUS
OPERATOR SWITCHES ARE AS FOLLOWS:
.SKIP 2
^^/ASCII\\##READ THE INPUT DECK IN ^^ASCII\\ MODE
.SKIP 1
^^/HELP\\###OUTPUT THE ^^"HELP"\\ TEXT AND RE-ASK FOR OPERATOR TYPE-IN.
.SKIP 1
^^/IMAGE\\##READ THE INPUT DECK IN IMAGE MODE
.SKIP 1
^^/MULTIF\\
.INDEX ^^/MULTIF\\
#INPUT MULTIPLE FILES. ^IN ^^MULTI\\ MODE WITH THE ^C^D^R
AS THE
INPUT DEVICE, IF NO CARDS ARE IN THE ^^CDR\\ WHEN THE NEXT
FILE IS REQUESTED, ^^CDRSTK\\ WILL RELEASE THE CARD READER,
SLEEP FOR FIVE (5) SECONDS, AND RE ^^INIT\\ THE ^^CDR\\.
.SKIP 1
^^/SINGLE CDRSTK\\ WILL INPUT JUST ONE FILE AND WHEN DONE, WILL OUTPUT
^^"READY"\\ TO THE OPERATOR'S CONSOLE.
.INDEX ^^CDRSTK\\#^SWITCHES
.INDEX ^^/ASCII\\
.INDEX ^^/HELP\\
.INDEX ^^/IMAGE\\
.INDEX ^^/SINGLE\\
.SUBTITLE ^^CDRSTK\\
.PAGE
.INDENT 35
^^$STPAUSE#EXAMPLES\\
.SKIP 5
^^2.3##$STPAUSE#E\\XAMPLES
.SKIP 2
^INFORMATION MAY BE OUTPUT FROM THE USER JOB TO THE OPERATOR'S CONSOLE
VIA THE ^^$STPAUSE\\ CONTROL CARD. ^THE CONTENTS OF THIS CARD, FOLLOWED BY
THE JOB NAME, DECK NUMBER, AND CARD NUMBER WILL BE OUTPUT TO THE 
OPERATOR'S CONSOLE. ^^CDRSTK\\ WILL THEN WAIT FOR THE OPERATOR TO INPUT
A COMMAND BEFORE PROCEEDING.
.SKIP 3
.NOFILL
.NOJUSTIFY
^EXAMPLES:
.SKIP 2
^^$STPAUS INTERTALK EXAMPLE
NAME-TEST
DECK_#2
CARD_#10
*GO
.SKIP 3
_!STOP
$STPAU THIS IS A TEST MESSAGE
NAME-TEST1
DECK_#2
CARD_#44\\
.INDEX ^^$STPAUSE\\
.INDEX ^^GO\\
.PAGE
.INDENT 40
^^OUTPUT EXAMPLE\\
.SKIP 5
^^2.4##OUTPUT#E\\XAMPLES
.SKIP 2
.PARAGRAPH
.FILL
.JUSTIFY
^THE FOLLOWING OUTPUT EXAMPLE SHOWS A ^^CDRSTK\\ GENERATED CONTROL
FILE (FILE. ^^CTL\\). ^THE FOLLOWING ^^CDRSTK\\ CONTROL CARDS COMPRISED
THE INPUT DECK WHICH GENERATED THE CONTROL FILE:
.NOFILL
.NOJUSTIFY
.SKIP 2
^CONTROL ^CARDS
.SKIP 2
.TAB STOPS 12
	^^$JOB\\ NAME,[NN,MMM]
	^^$PASSWORD ABCDEF\\
	^^$F4 TESTY\\
.SKIP 2
.TAB STOPS 18
	^^FORTRAN
	DECK\\
.SKIP 2
.TAB STOPS 12
	^^$EOD
	$DATA\\
.SKIP 2
.TAB STOPS 18
	^^DATA
	DECK\\
.SKIP 2
.TAB STOPS 12
	^^END-OF-FILE\\ CARD
.SKIP 2
^CONTROL ^FILE ^OUTPUT:\\
.SKIP 1
	^^JOBNAM.CTL
.NOFILL
.NOJUSTIFY
	$JOB\\NAME,[NN,MMM]
	$^^F4 TEST\\
.RIGHT MARGIN 62
.TAB STOPS 12,36,44
.SKIP 2
	_.^^COMP /C TESTY.F4/LIST
	$^^EOD
	$DATA
	_.SET CDR QAA.CDR\\	;CREATED BY ^^CDRSTK
	_.EXEC /MAP:MAP /REL TESTY.REL
\\
.INDEX ^OUTPUT
.INDEX ^^$JOB\\
.INDEX ^^$PASSWORD\\
.INDEX ^^$F4\\
.INDEX ^^$EOD\\
.INDEX ^^$DATA\\
.INDEX ^^EOT\\

.PAGE
.RIGHT MARGIN 60
.BLANK 3
2.5##^^CDRSTK E\\RROR ^MESSAGES
.INDEX ^^CDRSTK E\\RROR ^MESSAGES
.BLANK 1
.FILL
.JUSTIFY
^THE FOLLOWING MESSAGES ARE TYPED BY ^^CDRSTK \\AT THE TERMINAL THAT IS
CONTROLLING ^^CDRSTK\\.
.BLANK 3
2.5.1##^RECOVERABLE ^ERROR ^MESSAGES#-#^THE FOLLOWING MESSAGES ARE
TYPED BY ^^CDRSTK\\ TO NOTIFY THE OPERATOR THAT HE HAS TYPED 
COMMANDS INCORRECTLY, OR THAT THERE IS A RECOVERABLE ERROR. ^THE CORRECTIVE
ACTION IS NORMALLY PRINTED WITH THE MESSAGE.
.BLANK 1
?^^ARGUMENT ERROR\\
.BREAK
^THE ARGUMENT OF THE LAST COMMAND TYPED IS EITHER EXCESSIVE OR IN THE WRONG
FORMAT. ^RETYPE THE COMMAND.
.BLANK 1
?^^CANNOT FIND FILE\\
.BREAK
^THE FILENAME SPECIFIED IN THE ^^START\\ COMMAND IS INCORRECT EITHER
BY ITSELF OR FOR THAT PARTICULAR PROJECT-PROGRAMMER NUMBER. ^RETYPE THE
^^START\\ COMMAND WITH THE CORRECT FILENAME.
.BLANK 1
?^^CARD READER ERROR, FIX AND TYPE "CONT"\\
.BREAK
^THE CARD READER HAS EXPERIENCED A MOTION ERROR. ^PUT THE LAST CARD 
READ BACK INTO THE INPUT HOPPER, READY THE CARD READER, AND TYPE ^^CONT.\\
.BLANK 1
?^^COMMAND ERROR\\
.BREAK
^THE PRECEDING ^^START\\ COMMAND WAS IN ERROR. ^RETYPE THE COMMAND.
.BLANK 1
?^^COMMAND ERROR, TYPE "H" FOR HELP.\\
.BREAK
^AN ILLEGAL INTERACTIVE COMMAND WAS TYPED. ^EITHER TYPE THE CORRECT
COMMAND OR TYPE ^H FOR HELP.
.BLANK 1
?^^ILLEGAL SWITCH, TYPE "/^H" FOR HELP\\
.BREAK
^A SWITCH WAS TYPED THAT WAS NOT IN THE PROPER FORMAT. ^EITHER RETYPE
THE SWITCH OR TYPE /^H FOR HELP.
.BLANK 1
?^^MISSING EOJ CARD, TYPE "A" TO APPEND\\
.BREAK
^^AN EOJ, "F" TO FLUSH THIS CARD\\
.BREAK
^THE PRECEDING DECK DID NOT HAVE AN END-OF-FILE CARD AND ^^CDRSTK\\
DETECTED A NEW $^^JOB\\ OR $^^SEQUENCE\\ CARD. ^EITHER TYPE ^A TO APPEND
THE END-OF-FILE CARD OR TYPE ^F TO FLUSH THE LAST CARD READ.
.BLANK 1
?^^NO ACTIVE JOB\\
.BREAK
^^CDRSTK\\ RESPONSE TO ^^WHAT, KILL\\, AND ^^TELL\\ COMMANDS WHEN THERE
IS NO JOB CURRENTLY RUNNING.
.BLANK 1
?^^NUMERIC ARGUMENT NEEDED\\
.BREAK
^THE ARGUMENT FOR THE LAST COMMAND TYPED WAS EITHER ILLEGAL OR IN THE WRONG 
FORMAT. ^RETYPE THE COMMAND WITH A PROPER ARGUMENT.
.BLANK 1
?^^OVER SYSTEM MAX., TYPE "C" TO CONT\\
.BREAK
^^OR A NEW ARGUMENT\\
.BREAK
^THE AMOUNT OF CORE REQUESTED IN AN ^^MCORE\\ COMMAND EXCEEDED THE SYSTEM
MAXIMUM. ^EITHER TYPE ^C TO CONTINUE ^^CDRSTK\\ OR TYPE ANOTHER CORE SIZE.
.BLANK 1
?^^TYPE KILL FIRST, ANOTHER JOB IS RUNNING\\
.BREAK
^A ^^START\\ COMMAND WAS TYPED WHEN ANOTHER JOB
WAS RUNNING. ^EITHER WAIT FOR THE ASTERISK(*) THAT SIGNALS THAT ^^CDRSTK\\
IS READY FOR ANOTHER JOB, OR KILL THE PRESENT JOB.
.BLANK 3
2.5.2##^ADVISORY ^MESSAGES#-#^^CDRSTK\\ TYPES THE FOLLOWING MESSAGES
TO NOTIFY THE OPERATOR THAT THE JOB CANNOT RUN. ^NO OPERATOR ACTIONS
ARE REQUIRED TO CORRECT THE ERROR.
.BLANK 1
?^^ACCT.SYS NOT FOUND
.BREAK
CDRSTK\\ EXITS AND RETURNS CONTROL TO THE MONITOR. ^NOTIFY THE SYSTEM PROGRAMMER.
.BLANK 1
^^?AUXACC.SYS NOT FOUND
.BREAK
CDRSTK\\ EXITS AND RETURNS CONTROL TO THE MONITOR. ^NOTIFY THE SYSTEM PROGRAMMER.
.BLANK 1
?^^BAD FORMAT -- AUXACC.SYS
.BREAK
CDRSTK\\ EXITS AND RETURNS CONTROL TO THE MONITOR. ^NOTIFY THE SYSTEM PROGRAMMER.
.BLANK 1
^^?ENTER FAILURE FOR DATA OR LANGUAGE FILE\\
.BREAK
^THIS MESSAGE IS FOLLOWED BY THE REASON FOR THE ERROR, WHICH IS TAKEN
FROM THE LIST OF MESSAGES BELOW, FOLLOWED BY EITHER A $LANGUAGE OR $^^DATA\\
CARD.
.BLANK 1
?^^ENTRY FAILED\\
.BREAK
^THIS MESSAGE IS FOLLOWED BY THE REASON FOR THE FAILURE, WHICH IS TAKEN
FROM THE LIST OF MESSAGES BELOW, FOLLOWED BY A $^^JOB\\ CARD.
.BLANK 1
^THE ABOVE TWO ERRORS ARE FOLLOWED BY A MESSAGE TAKEN FROM THE FOLLOWING LIST.
.PAGE
.BLANK 1
.NOFILL
.NOJUSTIFY
.LEFT MARGIN 10
^^ALREADY EXISTING FILENAME
BLOCK NOT FREE ON ALLOCATED POSITION
CAN'T DELETE A NON-EMPTY DIRECTORY
CAN'T SUPERCEDE AN EXISTING DIRECTORY
DEVICE NOT AVAILABLE
DEVICE OR DATA ERROR
FILE BEING MODIFIED
FILE NOT FOUND
ILLEGAL SEQUENCE OF UUOS
ILLEGAL UUO
INCORRECT PROJECT PROGRAMMER PAIR
NESTING TOO DEEP ON SFD
NO LEGAL STRUCTURE FOR THIS JOB
NO ROOM OR QUOTA EXCEEDED
NO SUCH DEVICE
NOT A SAVED FILE
NOT ENOUGH TABLE SPACE
PARTIAL ALLOCATION ONLY
PROTECTION FAILURE
SEARCH LIST EMPTY
SUBDIRECTORY NOT FOUND
WRITE LOCK ERROR\\
.BLANK 1

.FILL
.JUSTIFY
.LEFT MARGIN 5
.BLANK 1
^^?IMPROPER USER NAME, JOB FLUSHED\\
.BREAK
^THE NAME SPECIFIED ON THE $^^JOB\\ CARD DOES NOT MATCH THE NAME IN THE
SYSTEM ACCOUNTING FILES. ^THE NAME REQUIREMENT IS AN INSTALLATION
OPTION, THUS THIS MESSAGE MAY NEVER APPEAR.
.BLANK 1
^^?INTERLOCK FAILURE\\
.BREAK
^THIS IS A SYSTEM FAILURE, ^^CDRSTK\\ WAS UNABLE TO RELEASE THE INTERLOCK
AFTER CREATING A ^^UFD\\.
.BLANK 1
^^?INVALID PROJ, PROG PAIR SPECIFIED\\
.JUSTIFY
^THIS MESSAGE IS FOLLOWED BY THE CARD IMAGE OF THE $^^JOB\\ CARD BEING
PROCESSED.  ^THE JOB IS FLUSHED AND ^^CDRSTK\\ CONTINUES.
.BLANK 1
?^^LOG FILE OUTPUT FAILURE\\
\\
.BREAK
^THIS MESSAGE IS FOLLOWED BY THE CARD IMAGE OF THE CARD BEING PROCESSED.
.BLANK 1
^^?NO AUXACC.SYS ENTRY\\
.BREAK
^THERE IS NO ENTRY IN ^^AUXACC.SYS\\ FOR THE SPECIFIED PROJECT-PROGRAMMER
NUMBER. ^THE JOB IS ABORTED, THE CARDS FLUSHED, AND ^^CDRSTK\\ CONTINUES.
.PAGE
.BLANK 1
^^?NO ENTRY IN AUXACC.SYS\\
.BREAK
^THERE IS NO ^^AUXACC.SYS\\ ENTRY FOR THE SPECIFIED PROJECT. ^THE JOB
IS ABORTED, THE CARDS ARE FLUSHED THROUGH THE CARD READER, AND
^^CDRSTK \\CONTINUES.
.BLANK 1
^^?NOT AN AUTHORIZED BATCH USER, JOB FLUSHED\\
.BREAK
^THE USER HAS NOT BEEN AUTHORIZED BY THE SYSTEM MANAGER TO USE THE ^BATCH
SYSTEM. ^THE JOB IS ABORTED AND ^^CDRSTK\\ CONTINUES.
.BLANK 1
^^?OUTPUT DEVICE INIT FAILED\\
.BREAK
^THIS MESSAGE IS FOLLOWED BY THE CARD IMAGE OF THE CARD BEING PROCESSED.
^THE ^^CDRSTK\\ PROGRAM COULD NOT ^^INIT\\ A LOG OR CONTROL FILE FOR
THE USER. ^THE JOB IS ABORTED AND ^^CDRSTK\\ CONTINUES.
.BLANK 1
^^?PASSWORD IN ERROR\\
.BREAK
^THE JOB IS FLUSHED AND ^^CDRSTK\\ CONTINUES.
^THE PASSWORD ON THE $^^PASSWORD\\ CARD WAS INCORRECT.
.SUBTITLE ^^BATCON\\
.PAGE

.INDENT 45
^^CHAPTER#3\\
.INDENT 48
^^BATCON
.SKIP 10
^^3.0##BATCON - DEC\\SYSTEM-10#^BATCH#^CONTROLLER
.SKIP 2
.PARAGRAPH
.FILL
.JUSTIFY
^^BATCON\\ IS THE ^^DEC\\SYSTEM-10 SYSTEMS PROGRAM WHICH READS ENTRIES
FROM THE INPUT QUEUE, AND INITIATES AND CONTROLS JOBS IN A
BATCH MODE. ^THE INPUT QUEUE FOR ^^BATCON\\ IS ON DEVICE ^^DSK.\\
^^BATCON\\ SCHEDULES JOBS BASED ON PARAMETERS PERTAINING TO A PARTICULAR
JOB AND SERVICES ANY ERROR PROCESSING AS REQUESTED. 
^^BATCON\\ MAKES ENTRIES INTO EACH JOB'S ^^LOG\\ AND ENTERS VARIOUS
REPORTS ABOUT THE JOB RUNNING UNDER ITS CONTROL.
.SKIP 1
.INDENT 5
^^BATCON\\ IS STARTED BY EITHER
.SKIP 1
.INDENT 10
^^.R BATCON\\
.SKIP 1
FOR A TIME-SHARING JOB OR AS A SUBJOB OF ^^OPSER.\\ ^WHEN RUN AS
A SUBJOB OF ^^OPSER, BATCON\\ IS RUN AS SUBJOB "^B" IT IS STARTED
MANUALLY BY THE OPERATOR OR VIA ^^OPSER'S "AUTO"\\ COMMAND.
.SKIP 1
^^BATCON\\ COMMANDS MAY BE ENTERED AT ANY TIME THAT ^^BATCON\\ IS
RUNNING. ^THEY MAY BE ABBREVIATED AND WILL BE ACCEPTED
AS LONG AS THE ABBREVIATION IS UNIQUE.
.SKIP 1
^^BATCON\\ COMMANDS ARE OF THE FOLLOWING FORMAT:
.SKIP 1
.INDENT 10
^^B SUBJOB - COMMAND ARGUMENTS\\
.SKIP 1
^B IN COLUMN 1 IS OPTIONAL IF RUNNING ^^BATCON\\ IN ONE'S OWN AREA.
^IT IS MANDATORY IF RUNNING UNDER ^^OPSER\\.
.SKIP 1
^THE SUBJOB IS A DECIMAL NUMBER FROM 1 TO 14. ^IF THE SUBJOB
ARGUMENT IS ABSENT, THE LAST SUBJOB NUMBER TYPED IN WILL BE
ASSUMED. ^IF ^^"ALL"\\ IS USED, THE COMMAND WILL APPLY TO ALL
SUBJOBS PRESENTLY BEING PROCESSED.
.SKIP 1
^^BATCON\\ RESPONDS TO ALL COMMANDS WITH EITHER AN ASTERISK (*)
INDICATING THAT IT IS WAITING FOR OPERATOR INPUT, OR AN
EXCLAMATION POINT (!) INDICATING THAT IT IS PRESENTLY
PROCESSING A JOB.
.SKIP 3
^^3.1##BATCON#C\\OMMANDS
.SKIP 1
^THE VARIOUS ^^BATCON\\ COMMANDS ARE DESCRIBED ON THE FOLLOWING
PAGES.
.NOFILL
.NOJUSTIFY
.LEFT MARGIN 5
.INDEX ^^BATCON\\
.INDEX *
.INDEX !
.SUBTITLE ^^BATCON C\\OMMANDS
.PAGE
.;-$
.INDENT 52
-$
.SKIP 4
.TAB STOPS 25
.NOJUSTIFY
.FILL
.LEFT MARGIN 25
.INDENT -20
^BN-ALTMODE	^ACTS AS A RESPONSE TO ^^PLEASE\\
COMMAND WHEN IN A WAIT STATE.
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^EXAMPLES:\\
.BLANK 1
_!^B3-$
.BLANK 1
_!
.SKIP 4
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.INDEX -$
.INDEX -<^^ALTMODE\\>
.PAGE
.;-CORE
.INDENT 49
^^-CORE\\
.SKIP 4
.LEFT MARGIN 25
.INDENT -20
^^B - CORE\\ N	^CAUSES ^^BATCON\\ TO LIMIT THE
TOTAL CORE USAGE FOR ALL ^^BATCON\\ JOBS TO
N;N IS A DECIMAL ARGUMENT IN ^K OF CORE.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*B-CORE 3\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-CORE\\
.PAGE

.;-CURRENT
.INDENT 47
^^-CURRENT\\
.BLANK 3
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
^^B#-#CURRENT\\	^CAUSES ^^BATCON\\ TO TYPEOUT THE
CURRENT DEFAULT SUBJOB NUMBER, FOLLOWED
BY THE MAXIMUM NUMBER OF JOB STREAMS,
FOLLOWED BY THE NUMBER OF STREAMS IN
USE. ^IT ALSO TYPES OTHER OPERATION-SETTABLE PARAMETERS.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.BLANK 2
.LEFT MARGIN 5
^^EXAMPLES:\\
.NOFILL
.BLANK 2
*^^B-CURR
ALL OF 14,NO STREAMS IN USE
*B1-STA
_!B-CURR
1 OF 14,NO STREAMS IN USE
_!B-MJOB 4
_!B-CURR
1 OF 4,NO STREAMS IN USE
_!
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.BLANK 2
^^NOTES:\\
.INDEX ^^-CURRENT\\
.PAGE
..;-DSOFF
.INDENT 49
^^-DSOFF\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^B-DSOFF\\	^TURNS OFF ^^B-DSON\\. ^COMPLEMENT
OF THE COMMAND ^^B-DSON\\.
.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^EXAMPLES:
.BLANK 1
^^!B-DSOFF\\
.BLANK 1
_!
.BLANK 4
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.BLANK 1
^NOT YET IMPLEMENTED.
.INDEX ^^-DSOFF\\
.PAGE
.;-DSON
.INDENT 50
^^-DSON\\
.BLANK 3
.FILL
.LEFT MARGIN 25
.INDENT -20
^^B-DSON\\ DEV:	^CAUSES ^^BATCON\\ TO TURN ON THE
DISPLAY ON DEVICE DEV:. ^THE DISPLAY
WILL BE A ^^SYSDPY\\-LIKE DISPLAY
AND WILL CONTAIN ALL THE INFORMATION
OBTAINED THROUGH THE ^^WHAT\\ COMMAND.
^CURRENTLY IT DOES NOT TAKE DEV:
AND GIVES A CONTINUOUS DISPLAY OF ^^WHAT.
.BLANK 4
.LEFT MARGIN 0
------------------------------------------------------------
.SKIP 2
.INDENT 5
^^EXAMPLES:\\
.BLANK 1
.INDENT 5
_!^^B-DSON TTY13:\\
.BLANK 1
.INDENT 5
_!
.BLANK 2
------------------------------------------------------------
.SKIP 2
.INDENT 5
^^NOTES\\:
.BLANK 1
.INDENT 5
^NOT YET IMPLEMENTED.
.INDEX ^^-DSON\\
.LEFT MARGIN 5
.PAGE


.;-EXAMINE
.INDENT 46
^^-EXAMINE\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^BN - ^^EXAMINE\\ M	^EXAMINES THE NEXT M LINES OF THE CONTROL
FILE OF SUBJOB N WHERE M IS A DECIMAL
NUMBER.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:
.SKIP 2
* -EXA 4
.SKIP 2
SUBJOB# 6
_.EXEC /MAP:MAP /REL TESTL.REL
_\
_!
.SKIP 1
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-EXAMINE\\
.PAGE
.;-EXIT
.INDENT 49
^^-EXIT\\
.SKIP 3
.FILL
.LEFT MARGIN 25
.INDENT -20
^^B-EXIT	E\\XITS TO MONITOR LEVEL IF NO ACTIVE JOBS
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^EXAMPLES:\\
.SKIP 2
^^*EXIT\\
.SKIP 2
^^EXIT\\
.SKIP 2
_.
.SKIP 2
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.INDEX ^^-EXIT\\
.PAGE


.;GO
.INDENT 51
-^G^O
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^BN - ^^GO\\	^CONTINUES ^^BATCON\\ PROCESSING OF THE
SPECIFIED SUBJOB.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:
.SKIP 2
_!6-GO\\
_!
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX -^G^O
.PAGE

.;-HELP
.INDENT 49
-^^HELP\\
.SKIP 1
.FILL
.LEFT MARGIN 25
.INDENT -20
^^B - HELP	D\\IRECTS THE ^^B\\ATCH ^CONTROLLER TO OUTPUT
A LIST OF THE ^^BATCON\\ COMMANDS AND THEIR
DEFINITIONS TO THE OPERATOR'S CONSOLE.
.SKIP 3
.TAB STOPS 26
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.NOFILL
.NOJUSTIFY

.SKIP 1
*^^EXAMPLES:
.SKIP 1
*-HELP
.SKIP 1
BN-ALTMODE	OPERATOR RESPONSE WHEN JOB
.BREAK
	WAITING.
B-CORE N	LIMIT TOTAL CORE FOR BATCH TO N K.
B-CURRENT	TYPEOUT CURRENT DEFAULT,MAX
.BREAK
	STREAMS,INUSE STREAMS
B-DSON	TURN THE DISPLAY ON
B-DSOFF	TURN DISPLAY OFF
BN-EXAMINE N	EXAMINE NEXT N LINES OF CONTROL
.BREAK
	FILE
B-EXIT	EXITS TO MONITOR LEVEL IF NO
.BREAK
	ACTIVE JOBS
BN-GO	CONTINUE JOB N
B-HELP	TYPEOUT THIS MESSAGE
BN-KILL FLUSH	ABORT JOB WITHOUT ANY OUTPUT
########ERROR	ABORT JOB WITH ERROR PROCESSING
########NERROR	ABORT JOB WITHOUT ERROR PROCESSING
B-MCORE N	LIMIT EACH JOB N K CORE.
B-MJOB N	NUMBER OF JOB STREAMS
BN-MONJOB	FIND MONITOR JOB_# FOR N
B-MSGLEVEL 0	TYPEOUT JOB INFORMATION ONLY
B-MSGLEVEL 1	TYPEOUT JOB INFORMATION AND LAST
.BREAK
	LINE INPUT AND OUTPUT.  ^RESET FLAG
.BREAK
	"SWAP NOW" AND SEND , (COMMA) WITH
.BREAK
	LOGIN COMMAND.
B-MSGLEVEL 2	SEND / (SLASH) INSTEAD OF
.BREAK
	SEND  , (COMMA) WITH THE LOGIN
	COMMAND
B-MSGLEVEL 3	SET FLAG TO "SWAP NOW"
B-MTIME N	LIMIT EACH JOB TO N SECONDS OF CPU
.BREAK
	TIME.
BN-OPERATOR<LINE>	SEND LINE TO SUBJOB N.#USED FOR
.BREAK
	OPERATOR-JOB COMMUNICATION
B-PAUSE	STOP BATCON,START COMMAND GETS IT
.BREAK
	STARTED AGAIN
B-RESET	RESET STOPS SCHEDULING BUT
.BREAK
	COMPLETES CURRENT JOBS
	START COMMAND MUST BE ISSUED TO
.BREAK
	GET BATCON TO START
BN-REVIVE	RESUME TYPEOUT OF IO FROM SUBJOB N
BN-REQUEUE HH:MM	REQUEUE THE JOB AFTER HH:MM FROM
.BREAK
	NOW
BN-SILENCE	IGNORE ALL IO FROM SUBJOB N
B-START	START SCHEDULING
BN-STOP	STOP JOB N
BN-TELL#FOO	ENTER FOO AS COMMENT IN LOG FILE
B-TIME#N	LIMIT TOTAL BATCH CPU TIME TO N
.BREAK
	SECONDS.
BN-WHAT	TYPEOUT STATUS OF JOB N
B-ZZZZZZ N	CHANGE SLEEP TIME TO N
.FILL
.JUSTIFY
.INDENT 5
DEFAULTS: COMMANDS THAT REQUIRE N DEFAULT TO PREVIOUS SUBJOB
VALUE TYPED IN IF SUBJOB VALUE IN CURRENT TYPEIN IS MISSING.
IF ALL IS SPECIFIED, ALL SUBJOBS ARE IMPLIED.\\
^^MONITOR COMMAND REENTER ALLOWS FOR ERROR RECOVERY.\\
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.INDEX -^^HELP\\
.PAGE

.NOJUSTIFY
.FILL
.LEFT MARGIN 5
.;-KILL
.INDENT 49
-^^KILL\\
.SKIP 3
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
^BN - ^^KILL ARG\\	^ABORTS THE SPECIFIED JOB.
.SKIP 1
^^FLUSH\\ - ABORT THE JOB WITHOUT ANY
OUTPUT.
.BREAK
^^ERROR\\ - ABORT THE JOB AND PROVIDE
USER ERROR PROCESSING.
.BREAK
^^NERROR\\ - ABORT THE JOB AND DO NOT
PROVIDE USER ERROR PROCESSING.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.NOFILL
.BLANK 1
^^!B3-KILL FLUSH\\
.BLANK 1
_!
.SKIP 2
.INDENT -5
-----------------------------------------------------------
.BLANK 2
^^NOTES:\\
.INDEX ^^-KILL\\
.PAGE

.;-MCORE
.INDENT 48
^^-MCORE\\
.SKIP 3
^^B - MCORE\\ M	^LIMITS EACH JOB TO M ^K OF CORE.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*-MCORE 44\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-MCORE\\
.PAGE

.;-MJOB
.INDENT 49
-^^MJOB\\
.SKIP 3
.FILL
.LEFT MARGIN 25
.INDENT -20
^^B - MJOB\\ M	^ALLOWS THE OPERATOR TO SPECIFY
THE TOTAL NUMBER OF JOB STREAMS.
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
.NOFILL
^^EXAMPLES:
.SKIP 2
*-MJOB 3
.SKIP 2
*-MJ 5\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-MJOB\\
.PAGE
.LEFT MARGIN 5
.;-MONJOB
.INDENT 48
^^-MONJOB\\
.BLANK 3
.FILL
.LEFT MARGIN 25
.INDENT -20
^^B\N-MONJOB\\	^FINDS THE MONITOR JOB NUMBER
FOR SUBJOB N.
.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
.NOFILL
^^EXAMPLES\\:
.BLANK 2
_!^^B-MON
1#####14
_!B-MONJ
B-CURR
1#####14
_!ALL OF 14,1 STREAMS IN USE
_!.
_!
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES\\:
.INDEX ^^-MONJOB\\
.PAGE
.;-MSGLEVEL
.INDENT 46
^^-MSGLEVEL\\
.LEFT MARGIN 25
.BLANK 3
.INDENT -20
.NOJUSTIFY
.NOFILL
^^B-MSGLEVEL\\ 0	^TYPES ONLY JOB INFORMATION.
.BLANK 1
.INDENT -20
^^B-MSGLEVEL\\ 1	^TYPES JOB INFORMATION AND THE LAST
LINES INPUT AND OUTPUT.  ^RESETS
THE "SWAP-NOW" FLAG OFF AND SENDS A
COMMA (,) WITH THE ^^LOGIN\\ COMMAND.
.BLANK 1
.INDENT -20
^^B-MSGLEVEL 2\\	^SENDS A SLASH (/) INSTEAD OF A
COMMA WITH THE ^^LOGIN\\ COMMAND.
.BLANK 1
.INDENT -20
^^B-MSGLEVEL 3\\	^SETS THE "SWAP-NOW" FLAG ON.
.LEFT MARGIN 5
.BLANK 4
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^EXAMPLES:
.BLANK 2
^^B-MSGLEVEL#2\\
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.INDEX ^^-MSGLEVEL\\
.PAGE

.;-MTIME
.INDENT 48
^^-MTIME\\
.FILL
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^B - MTIME\\ M	^LIMITS EACH JOB TO THE SPECIFIED
^^CPU\\ TIME LIMIT IN SECONDS.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*-MTIME 4\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-MTIME\\
.PAGE
.;-OPERATOR
.INDENT 46
^^-OPERATOR\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^B\N-OPERATOR\\<LINE>	^SENDS THE SPECIFIED LINE TO
SUBJOB N. ^THIS COMMAND IS USED IN
CONJUNCTION WITH THE COMMAND _.^^OPERATOR\\
IN THE CONTROL FILE FOR JOB-OPERATOR
COMMUNICATION.
.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^EXAMPLES\\:
.BLANK 1
^^!B3-OPERATOR CONTINUE\\
.BLANK 1
_!
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES\\:
.INDEX ^^-OPERATOR\\
.PAGE

.;-PAUSE
.INDENT 48
^^-PAUSE\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^B-PAUSE	S\\TOPS ^^BATCON\\ PROCESSING.  ^A ^^START\\
COMMAND MUST BE ISSUED TO RESTART ^^BATCON\\.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
_!-PAUSE\\
.SKIP 1
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-PAUSE\\
.PAGE

..;-REQUEUE
.INDENT 46
^^-REQUEUE\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^BN - ^^REQUEUE\\ HH:MM	^CAUSES ^^BATCON\\ TO PUT
SPECIFIED JOB (N) BACK INTO THE
INPUT QUEUE FOR RERUNNING. ^THE
ARGUMENT M IS A TIME SPECIFICATION
OF THE FORMAT:
.SKIP 1
.INDENT 5
^^HH:MM\\
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
_!3-REQUEUE 2:20\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-REQUEUE\\
.PAGE
.;-RESET
.INDENT 48
-^^RESET\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^B-RESET\\	^CAUSES ^^BATCON\\ TO STOP SCHEDULING.
^WHEN NO JOBS ARE BEING PROCESSED BY ^^BATCON\\,
CONTROL IS TRANSFERRED BACK TO THE OPERATOR
INPUT WAIT STATUS. ^THE ^^"START"\\ COMMAND MUST
FOLLOW THIS COMMAND FOR ^^BATCON\\ TO RUN AGAIN.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*-RESET\\
.SKIP 1
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.BLANK 1
.LEFT MARGIN 9
.INDENT -4
1.##^ASTERISK "*" OUTPUT TO THE OPERATOR'S CONSOLE
INDICATES THAT ^^BATCON\\ IS IN OPERATOR WAIT
STATUS AND WILL NOT PROCEED UNTIL SOME OPERATOR
COMMAND HAS BEEN INPUT.
.LEFT MARGIN 5
.FILL
.INDEX ^^-RESET\\
.PAGE

.;-REVIVE
.FILL
.INDENT 47
-^^REVIVE\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^B\N-REVIVE	\\^RESUMES TYPEOUT OF TELETYPE ACTIVITY FROM SUBJOB
N ON THE CONTROLLING TERMINAL. ^THIS COMMAND IS THE COMPLEMENT OF
^^B\N-SILENCE\\ WHICH IS THE DEFAULT. ^THE COMMAND IS USEFUL FOR CHECKING THE
PROGRAM OF A BATCH JOB.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.BLANK 1
^^!B3-REVIVE\\
.BLANK 1
_!
.SKIP 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.BLANK 1
.LEFT MARGIN 9
.INDENT -4
1.##^DEFAULT IS ^BN-^^SILENCE\\.
.BLANK 1
.INDENT -4
2.##^ALL THE LOG FILE INFORMATION COMES OUT ON THE CONTROLLING
TERMINAL FOR THAT SUBJOB.
.LEFT MARGIN 25
.INDEX ^^-REVIVE\\
.PAGE
.;-SILENCE
.LEFT MARGIN 5
.INDENT 47
^^-SILENCE\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^B\N-SILENCE\\	^DOES NOT OUTPUT TELETYPE ACTIVITY ON THE CONTROLLING
TERMINAL FROM SUBJOB N. ^THIS COMMAND IS THE COMPLEMENT OF ^^B\N-REVIVE.\\
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^EXAMPLES:
.BLANK 1
^^!B3-SILENCE\\
.BLANK 1
_!
.SKIP 2
.INDENT -5
------------------------------------------------------------
.SKIP 2
.INDEX ^^-SILENCE\\
^^NOTES:\\
.BLANK 1
^THIS IS THE DEFAULT.
.PAGE
.;-START
.LEFT MARGIN 5
.INDENT 48
^^-START\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^B-START	D\\IRECTS ^^BATCON\\ TO INITIATE ITS
SCHEDULING OF JOBS FOR PROCESSING.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:
.SKIP 2
*-STA\\
_!
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-START\\
.PAGE
.;-STOP
.INDENT 47
^^-STOP\\
.SKIP 3
^^B\N - STOP	S\\TOPS THE SPECIFIED SUBJOB.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
_!6-STOP\\
_!
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-STOP\\
.PAGE
.;-TELL
.INDENT 47
^^-TELL\\
.SKIP 3
.FILL
.LEFT MARGIN 25
.INDENT -20
^BN-^^TELL T\\EXT	^ENTERS THE TEXT AFTER ^^TELL\\ AS A
COMMENT LINE INTO THE ^^LOG\\ FILE OF THE
SPECIFIED SUBJOB (N).
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
_!5-TELL THIS IS A COMMENT FROM THE OPERATOR\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.SKIP 1

.LEFT MARGIN 9
.INDENT -4
1.##"^^ALL"\\ MAY BE SUBSTITUTED FOR THE SUBJOB
NUMBER IN ANY OF THE COMMANDS WHICH ALLOW A
NUMERIC ARGUMENT.
.INDEX ^^-TELL\\
.PAGE
.;-TIME
.INDENT 46
^^-TIME\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^^B - TIME\\ M	^CAUSES ^^BATCON\\ TO LIMIT TOTAL
SIMULTANEOUS ^^BATCON CPU\\ TIME TO
THE SPECIFIED TIME (M) IN SECONDS.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
*-TIME 4\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-TIME\\
.PAGE
.;-WHAT
.INDENT 47
^^-WHAT\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
^BN - ^^WHAT\\	^OUTPUT THE STATUS OF SUBJOB N ON THE
^^BATCON\\ CONTROL TERMINAL.  ^THE STATUS
LINE IS FOLLOWED BY THE LAST LINE INPUT
TO THE SUBJOB AND THE LAST LINE OUTPUT
FROM THE SUBJOB.
.SKIP 4
.RIGHT MARGIN 70
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:
.SKIP 2
.TAB STOPS 16,24,40,46,58
.NOFILL
_!-WHA
6	21	JOBAKK##MAIN####TI#SW	00:00:02	11,225
	EXEC#/MAP:MAP#/REL#REL#TESTL.REL
.BLANK 1
	MAP	 STORAGE MAP	15-17 13-NOV-70\\
_!
.RIGHT MARGIN 60
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX ^^-WHAT\\
.PAGE
.;ZZZ
.INDENT 48
^^-ZZZ\\
.SKIP 3
.TAB STOPS 25
.FILL
.LEFT MARGIN 25
.INDENT -20
^^B-ZZZZZZ\\ M	^CAUSES ^^BATCON\\ TO SLEEP FOR M SECONDS WHEN
IDLE. (M IS A DECIMAL NUMBER)
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:
.SKIP 2
*-ZZZ 3\\
*
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.INDEX -^^ZZZZZZ\\

.SUBTITLE ^^BATCON\\
.PAGE
.LEFT MARGIN 5
.FILL
.JUSTIFY
3.2##^^BATCON E\\RROR ^MESSAGES
.INDEX ^^BATCON\\ ^ERROR ^MESSAGES
.BLANK 1
^THE MESSAGES LISTED BELOW ARE OUTPUT BY ^^BATCON\\ AT THE TERMINAL
THAT IS CONTROLLING ^^BATCON.\\
.BLANK 1
?^^BATCON UNABLE TO KJOB\\
.BREAK
^THE OPERATOR SHOULD ATTACH TO THIS JOB AND ^^KILL\\ IT,
THEN HE CAN CONTINUE ^^BATCON\\.
.BLANK 1
^^?CAN'T LOGIN, JOB REQUEUED\\
.BREAK
^THE MONITOR ASSIGNED A JOB NUMBER, BUT LOGIN WAS NOT COMPLETED.  ^THE JOB
WILL BE TRIED AGAIN AT A LATER TIME.
.BLANK 1
?^^COMMAND ERROR\\
.BREAK
^THE COMMAND THAT WAS TYPED BY THE OPERATOR IS INCORRECT.
.BLANK 1
^^?CORE UUO FAILURE\\
.BREAK
^WHILE TRYING TO CHANGE THE NUMBER OF JOB STREAMS, ^^BATCON\\ COULD
NOT EXPAND CORE.
.BLANK 1
^^?CTL LOOKUP FAILURE\\
.BREAK
^WHILE PERFORMING AN ^^EXAMINE \\COMMAND, ^^BATCON \\FAILED TO FIND THE
CONTROL FILE ON THE SPECIFIED FILE STRUCTURE.
.BLANK 1
^^?ENTER ERROR _#15, JOB ABORTED\\
.BREAK
^THE JOB CANNOT WRITE ON THE FILE STRUCTURE AND IS THEREFORE ABORTED.
.BLANK 1
^^?ENTER ERROR _#3, JOB REQUEUED\\
.BREAK
^THE JOB IS REQUEUED.
.BLANK 1
^^?ERROR IN PTY GETTAB\\
.BREAK
^^BATCON\\ COULD NOT FIND THE EXACT NUMBER OF ^^PTY\\'S IN THE MONITOR.
.BLANK 1
^^?JOB CANNOT BE REQUEUED\\
.BREAK
^THIS JOB CANNOT BE REQUEUED.
.BLANK 1
^^?JOBMAX EXCEEDS 14\\
.BREAK
^^BATCON\\ HAS BEEN ASSEMBLED FOR MORE THAN 14 JOB STREAMS.  ^REASSEMBLE
^^BATCON\\ FOR 14 JOB STREAMS OR LESS.
.PAGE
.BLANK 1
^^?JOB NOT ACTIVE\\
.BREAK
^THE ^^BATCON\\ SUBJOB REFERRED TO IN AN OPERATOR TYPEIN IS NOT ACTIVE.
.BLANK 1
^^?MJOB EXCEEDS 14\\
.BREAK
^THE ^^MJOB\\ COMMAND MUST HAVE ARGUMENTS IN THE RANGE 1 THROUGH 14.
.BLANK 1
^^?NO READ PRIVS.#JOB ABORTED\\
.BREAK
^THE USER TRIED TO RUN A JOB WHOSE CONTROL FILE IS IN ANOTHER
USER'S DIRECTORY.  ^BECAUSE THE USER DID NOT HAVE READ PRIVILEGES FOR
THAT DIRECTORY, THE JOB IS ABORTED.
.BLANK 1
^^?NO WRITE PRIVS.#LOG FILE IN USERS AREA\\
.BREAK
^THE USER ATTEMPTED TO CREATE A LOG FILE IN ANOTHER USER'S DIRECTORY
FOR WHICH HE DID NOT HAVE WRITE PRIVILEGES.  ^THE LOG FILE IS WRITTEN
INSTEAD IN THE USER'S OWN DIRECTORY.
.BLANK 1
^^?OPEN FAILURE ON THIS STR.#JOB ABORTED\\
.BREAK
^A NON-EXISTENT FILE STRUCTURE WAS SPECIFIED FOR THE JOB.  ^THE JOB
IS ABORTED.
.BLANK 1
^^?SUBJOB _# MUST BE SPECIFIED\\
.BREAK
^THE OPERATOR MUST SPECIFY A PARTICULAR SUBJOB WHEN TYPING CERTAIN COMMANDS.
.BLANK 1
^^?SYSTEM NOT AVAILABLE\\
.BREAK
^THE MONITOR DID NOT ASSIGN A JOB NUMBER FOR THIS JOB.  ^THE JOB IS
REQUEUED, BUT SCHEDULING OF NEW JOBS IS STOPPED.

.SUBTITLE ^^QUEUE\\
.PAGE
.LEFT MARGIN 5
.INDENT 45
^^CHAPTER#4\\
.INDENT 45
^^QUEUE\\
.SKIP 10
^^4.0##QUEUE - DEC\\SYSTEM-10 ^QUEUE ^MANAGER
.SKIP 2
.PARAGRAPH
.FILL
.JUSTIFY
^^QUEUE\\ IS THE ^^DEC\\SYSTEM-10 SYSTEMS PROGRAM WHICH ALLOWS THE USER
TO MAKE, SCHEDULE, LIST, MODIFY, AND DELETE QUEUE ENTRIES IN THE VARIOUS
SYSTEM QUEUES - THE INPUT QUEUE FOR THE ^^BATCON\\ SYSTEM, AND THE OUTPUT
SPOOLING QUEUES FOR THE LINE PRINTER, THE CARD PUNCH, THE PAPER-TAPE-PUNCH, AND
THE PLOTTER.
.SKIP 1
.TAB STOPS 10,12
.NOFILL
.NOJUSTIFY
	^^QUEUE\\ MAY BE INVOKED IN ANY ONE OF THE FOUR WAYS.
.SKIP 1
	A.	^THE ^^QUEUE\\ COMMAND TO THE MONITOR FOLLOWED BY
		^^<CR> <LF>\\.
	B.	^BY TYPING ^^.R QUEUE\\ WHEN IN MONITOR MODE.
		^^QUEUE\\ RESPONDS TO THIS WITH AN ASTERISK (*).
	C.	^BY USE OF THE ^^OPSER\\ COMMAND ^^:QUEUE.\\
	D.	^BY RUNNING ^^QUEUE\\ AS A SUBJOB OF ^^OPSER\\.
.SKIP 1
^THE ^^QUEUE\\ COMMAND IS OF THE FORMAT:
.SKIP 1
	^^QUEUE\\ QUEUE NAME: JOBNAME = INPUT SPECIFICATIONS
.FILL
.JUSTIFY
.SKIP 1
^THE FOLLOWING FIVE COMMANDS CAN BE SUBSTITUTED FOR THE VARIOUS
FORMATS OF THE ^^QUEUE\\ COMMANDS:
.BLANK 1
.LEFT MARGIN 9
.INDENT -4
A.##^^CPUNCH\\
.INDEX ^^CPUNCH\\
JOBNAME=LIST OF INPUT SPECIFICATIONS
EQUIVALENT TO ^^QUEUE CDP\\: JOBNAME=LIST.
.BLANK 1
.INDENT -4
B.##^^PLOT\\
.INDEX ^^PLOT\\
JOBNAME=LIST OF INPUT SPECIFICATIONS EQUIVALENT
TO ^^QUEUE PLT\\: JOBNAME=LIST
.BLANK 1
.INDENT -4
C.##^^PRINT\\
.INDEX ^^PRINT\\
JOBNAME=LIST OF INPUT SPECIFICATIONS EQUIVALENT
TO ^^QUEUE LPT\\: JOBNAME=LIST
.BLANK 1
.INDENT -4
D.##^^SUBMIT\\
.INDEX ^^SUBMIT\\
JOBNAME=CONTROL FILE NAME, LOG FILE NAME EQUIVALENT
TO ^^QUEUE INP\\: JOBNAME=CONTROL FILE, LOG FILE.
.BLANK 1
.INDENT -4
E.##^^TPUNCH\\
.INDEX ^^TPUNCH\\
JOBNAME=LIST OF INPUT SPECIFICATIONS EQUIVALENT TO
^^QUEUE PTP\\: JOBNAME=LIST.
.BLANK 1
.LEFT MARGIN 5
^QUEUE NAME IS ONE OF THE FOLLOWING:
.SKIP 1
^^INP: - I\\NPUT QUEUE;
	^^LPT:\\ - ^LINE PRINTER QUEUE;
	^^CDP:\\ - ^CARD PUNCH QUEUE;
	^^PTP:\\ - ^PAPER TAPE PUNCH QUEUE;
^^PLT:\\ - ^PLOTTER QUEUE
.SKIP 1
^THE DEFAULT QUEUE - NAME IS ^^LPT\\.
.SKIP 1
.FILL
.JUSTIFY
	JOBNAME - IS THE NAME OF THE JOB BEING ENTERED INTO THE QUEUE.
	INPUT SPECIFICATIONS ARE FILE SPECIFICATIONS FOR THE DISK FILES
	TO BE PROCESSED AND VARIOUS SWITCHES AND KEYWORD PARAMETERS
	TO AID IN CONSTRUCTING THE QUEUE ENTRY.
.INDEX ^^INP\\
.INDEX ^^LPT\\
.INDEX ^^CDP\\
.INDEX ^^PTP\\
.INDEX ^^PLT\\
.SKIP 1
.FILL
.JUSTIFY
^THE FILES CAN BE ON ANY FILE STRUCTURE THAT THE QUEUE PROCESSOR HAS ACCESS
TO; THE DEFAULT IS ^^DSK:\\. ^THE FILES CAN BE IN ANY DIRECTORY THAT THE
USER HAS READ ACCESS TO; THE DEFAULT IS THE USER'S DIRECTORY. ^THE
FILENAME IS OPTIONAL, AND THE EXTENSION MAY BE OMITTED BECAUSE EACH QUEUE
HAS A DEFAULT EXTENSION FOR THE FILES TO BE PROCESSED. ^THESE DEFAULT
EXTENSIONS ARE:
.SKIP 1
.TAB STOPS 15
.NOFILL
.NOJUSTIFY
	^^.CTL\\ - INPUT QUEUE
	^^.LPT\\ - LINE PRINTER QUEUE
	^^.CDP\\ - CARD-PUNCH QUEUE
	^^.PTP\\ - PAPER-TAPE PUNCH
	^^.PLT\\ - PLOTTER QUEUE
.SKIP 1
.TAB STOPS 15,36
^THE WILDCARD CONSTRUCTION(*) MAY BE USED IN THE FILE SPECIFICATIONS.
.SKIP 1
	E.G. FILENAME.*	^ALL FILES WITH THIS NAME
		AND ANY EXTENSION.
.SKIP 1
	^^*.EXT\\	^ALL FILES WITH THIS
		EXTENSION.
.SKIP 1
	*.*	^ALL FILES
.SKIP 2
.FILL
.JUSTIFY
.BREAK
^THE FORMAT FOR QUEUE LISTINGS IS THE SAME AS THAT SHOWN ABOVE
EXCEPT THAT THE QUEUE ENTRY IS PLACED ON THE INPUT SIDE OF THE EQUAL SIGN
(AFTER THE EQUAL SIGN) AND THE LISTING FILE DESIGNATION IS ON THE OUTPUT
SIDE (BEFORE THE EQUAL SIGN). ^THE DEFAULT FOR THE LISTING FILE DESIGNATION
IS ^^LPT\\.
.INDEX ^^QUEUE\\
.INDEX ^^.CTL\\
.INDEX ^^.LST\\
.INDEX ^^.CDP\\
.INDEX ^^.PTP\\
.INDEX ^^.PLT\\
.SUBTITLE ^^QUEUE S\\WITCHES
.PAGE
.INDENT 46
^^SWITCHES\\
.SKIP 4
^^4.1##QUEUE#S\\WITCHES
.SKIP 2
^THREE CATEGORIES OF SWITCHES ARE PROVIDED.  ^THE FIRST CLASS OF
SWITCHES
ARE THOSE WHICH DEFINE THE OPERATION, THE SECOND ARE THOSE WHICH MAY
APPEAR ONLY ONCE AS THEY AFFECT THE ENTIRE REQUEST. ^THE THIRD CLASS
ARE THOSE SPECIFIC TO EACH FILE. ^IN GENERAL, SWITCHES THAT APPLY TO ONE
FILE BECOME THE DEFAULT FOR ALL SUCCEEDING FILES IF THEY ARE SPECIFIED
PRECEDING THE FILE NAME.
.INDEX ^QUEUE ^SWITCHES
.INDEX ^OPERATION ^SWITCHES
.INDEX ^ONCE ^ONLY ^SWITCHES
.INDEX ^FILE ^CONTROL ^SWITCHES\
.PAGE
.INDENT 30

^^QUEUE-OPERATION SWITCHES\\
.SKIP 4
^^4.1.1##Q\\UEUE ^OPERATION ^SWITCHES
.SKIP 2
^ONLY ONE OF THE FOLLOWING SWITCHES, THE ^QUEUE ^OPERATION ^SWITCHES,
CAN BE PLACED IN A COMMAND STRING SINCE EACH DEFINES A PARTICULAR
TYPE OF QUEUE REQUEST. ^THESE SWITCHES AND THEIR INDIVIDUAL MEANINGS
ARE AS FOLLOWS:
.LEFT MARGIN 30
.TAB STOPS 30
.SKIP 2
.INDENT -20
^SWITCH	^MEANING
.SKIP 2
.NOJUSTIFY
.FILL
.INDENT -20
^^/CREATE\\	^MAKE AN ENTRY IN THE SPECIFIED QUEUE.
.INDENT -20
^^/DEFER\\	^MAKE A NEW ENTRY IN THE SPECIFIED QUEUE,
BUT DEFER CREATION UNTIL ^^LOGOUT.\\
.INDENT -20
^^/F\\
.INDEX /^F
	^SAME AS ^^/LIST\\ EXCEPT THAT THE QUEUES ARE
NOT UPDATED. ^THIS IS FASTER, BUT MAY NOT
GIVE AN UP-TO-DATE LISTING OF THE QUEUES.
.INDENT -20
^^/HELP\\	^OUTPUT A MESSAGE GIVING THE COMMAND
STRING FORMAT FOLLOWED BY A BRIEF
DESCRIPTION OF THE VARIOUS USER SWITCHES
AND THEIR USAGE.
.INDENT -20
^^/KILL\\	^REMOVE THE SPECIFIED ENTRY FROM THE
SPECIFIED QUEUE.
.INDENT -20
^^/LIST\\	^LIST THE ENTRIES IN THE QUEUE. ^THE
DEFAULT ENTRIES ARE ALL ENTRIES
FOR ALL USERS.
.INDENT -20
^^/MODIFY\\	^ALTER THE SPECIFIED PARAMETERS
IN THE SPECIFIED JOBS.  ^THIS SWITCH
REQUIRES THAT THE USER/OPERATOR HAVE
ACCESS RIGHTS TO THE JOB.
.INDENT -20
^^/ZDEFER\\	^CREATE A NEW ENTRY IN A QUEUE--DEFER IT
UNTIL ^^LOGOUT\\. ^THE DEFERRED FILE IS
ZEROED FIRST SO THAT ALL PREVIOUS ^^/DEFER\\
REQUESTS FROM THE CURRENT JOB ARE
DELETED.
.SKIP 2
.INDENT -20
^^NOTE:\\	^THE DEFAULT OPERATION IS /^^CREATE\\.
.INDEX ^QUEUE OPERATION ^SWITCHES
.INDEX ^^/CREATE\\
.INDEX ^^/DEFER\\
.INDEX ^^/HELP\\
.INDEX ^^/KILL\\
.INDEX ^^/LIST\\
.INDEX ^^/MODIFY\\
.INDEX ^^/ZDEFER\\
.PAGE
.LEFT MARGIN 5

.INDENT 36
^^ONCE-ONLY-SWITCHES\\
.SKIP 4
^^4.1.2##O\\NCE ^ONLY ^SWITCHES
.SKIP 2
.FILL
.JUSTIFY
^THE FOLLOWING SWITCHES MAY APPEAR ONLY ONCE IN A COMMAND STRING. ^THESE
SWITCHES AFFECT THE ENTIRE REQUEST, GENERALLY IN TERMS OF SCHEDULING.
^THESE SWITCHES AND THEIR INDIVIDUAL MEANINGS ARE AS FOLLOWS:
.SKIP 2
.NOJUSTIFY
.FILL
.LEFT MARGIN 30
.TAB STOPS 30
.INDENT -20
^SWITCH	^MEANING
.SKIP 2
.INDENT -20
^^/AFTER:\\TT	^THE SPECIFIED REQUEST CANNOT BE
PROCESSED UNTIL AFTER THE SPECIFIED
TIME (TT).
.INDENT -20
/^^CHARGE:\\A
.INDEX ^^/CHARGE:\\A
	^THE RUN IS CHARGED TO THE SPECIFIED
ACCOUNT (INSTALLATION OPTION).
.INDENT -20
^^/DEADLINE:\\TT	^THE REQUEST MUST BE PROCESSED
BEFORE THE SPECIFIED TIME (TT).
.INDENT -20
^^/FORMS:\\A	^OUTPUT IS PLACED ON THE NAMED 
FORMS (A). (^OUTPUT ^QUEUE ^ONLY)
.INDENT -20
^^/LIMIT:\\N	^OUTPUT IS LIMITED TO THE SPECIFIED
NUMBER OF PAGES, CARDS, OR
WHATEVER THE OUTPUT MEDIUM.
(^OUTPUT ^QUEUE ^ONLY)
.INDENT -20
^^/LOG\\
.INDEX ^^/LOG\\
	^DEFINE THE FILE IN WHICH THE SPOOLERS
WILL LOG THEIR PROGRESS.
.INDENT -20
^^/NULL\\
.INDEX ^^/NULL\\
	^ACCEPT THE REQUEST EVEN IF THERE IS
NOTHING IN THE REQUEST. ^NO ERROR
MESSAGE IS GIVEN.
.INDENT -20
^^/OUTPUT\\:N
.INDEX ^^/OUTPUT\\:N
	^CAUSE JOB TO TERMINATE WITH A /^Z:N TO
^^KJOB\\(N=0-4)
.LEFT MARGIN 34
.INDENT -4
0#=#SUPPRESS ALL NORMAL QUEUING DONE AT
LOGOUT TIME.
.INDENT -4
1#=#QUEUE LOG FILE ONLY
.INDENT -4
2#=#QUEUE LOG FILE AND SPOOLED OUTPUT
(*.^^LPT\\,ETC.)
.INDENT -4
3#=#QUEUE LOG FILE, SPOOLED OUTPUT, AND
*.^^LST\\
.INDENT -4
4#=#QUEUE LOG FILE, SPOOLED OUTPUT,
*.^^LST\\, AND REQUESTS DEFERRED TO
LOGOUT.
.LEFT MARGIN 30
.FILL
.INDENT -20
^^/PRIORITY:\\N	^THE REQUEST IS GIVEN THE SPECIFIED
EXTERNAL PRIORITY (N=0 TO 62).
^THE DEFAULT IS 10.
.INDENT -20
/^^PROTECT:\\NNN
.INDEX /^^PROTECT:\\NNN
	^THE JOB IS GIVEN THE PROTECTION
SPECIFIED BY NNN (OCTAL).
.INDENT -20
^^/SEQ\\:N
.INDEX ^^/SEQ\\:N
	^SPECIFY A SEQUENCE NUMBER TO HELP
IDENTIFY A REQUEST TO BE MODIFIED OR
DELETED.
.INDENT -20
^^/UNPRESERVED\\
.INDEX ^^/UNPRESERVED\\
	^MATCH ONLY FILES FOR WHICH THE FIRST
DIGIT OF THE FILE'S PROTECTION CODE IS 0
(NOT PRESERVED AT ^^KJOB\\). ^THIS AVOIDS
REDUNDANT FILE PRINTING.
.SKIP 2
.INDENT -20
^^NOTE:\\	TT IS EITHER IN THE FORM ^^HHMM (HOURS
MINUTES,\\ TIME OF DAY) OR ^^+HHMM\\(A
TIME LATER THAN THE TIME OF INPUT OF
THE QUEUE COMMAND).  ^THE DEFAULT
CONDITIONS ARE THAT NO TIME
CONSTRAINTS OR PRIORITIES ARE
ASSUMED AND THAT NORMAL FORMS ARE
USED.
.INDEX ^ONCE ^ONLY ^SWITCHES
.INDEX ^^/AFTER\\
.INDEX ^^/DEADLINE\\
.INDEX ^^/FORMS\\
.INDEX ^^/LIMIT\\
.INDEX ^^/PRIORITY\\
.PAGE
.LEFT MARGIN 5
.INDENT 34
^^FILE-CONTROL-SWITCHES\\
.SKIP 4
^^4.1.3##F\\ILE ^CONTROL ^SWITCHES
.SKIP 2
.TAB STOPS 10,26,30
.FILL
.JUSTIFY
^THE FOLLOWING SWITCHES AFFECT THE INDIVIDUAL FILES IN A REQUEST.
IN ORDER TO CHANGE THE DEFAULTS FOR THE REST OF THE FILES, THE SWITCH
MUST APPEAR BEFORE A FILE NAME.
.SKIP 2
.NOFILL
.NOJUSTIFY
	^SWITCH	^MEANING
.SKIP 2
	^^/COPIES:\\N	^REPEAT THE OUTPUT THE SPECIFIED
		NUMBER OF TIMES.
		(N MUST BE LESS THAN 64)
	^^/DISPOSE:DELETE\\	^DELETE THE SPECIFIED FILE
		AFTER SPOOLING.
	^^/DISPOSE:PRESERVE\\	^SAVE THE SPECIFIED FILE
		AFTER SPOOLING.
.INDEX ^^/DISPOSE:RENAME\\
	^^/DISPOSE:RENAME\\	^RENAME THE FILE IN THE QUEUE
		DIRECTORY AND DELETE IT AFTER
		SPOOLING.
	^^/FILE:ASCII\\	^THE FILE FORMAT IS IN ^^ASCII\\ TEXT.
	/^^FILE:COBOL\\	^THE FILE FORMAT IS IN ^^COBOL
		SIXBIT.\\
.INDEX /^^FILE:COBOL\\
	^^/FILE:ELEVEN\\	^THE FILE FORMAT IS ^^MACX11\\ 
		BINARY (^^PDP-11\\ ^ASSEMBLER
		FOR THE ^^PDP-10\\).
.INDEX /^^FILE:ELEVEN\\
	^^/FILE:FORTRAN\\	^THE FILE FORMAT IS IN ^^FORTRAN
		ASCII\\ TEXT.
	/^^HEADER:\\0 OR 1	^IF 0, THE BLOCK HEADERS AT THE
		BEGINNING OF A FILE ARE NOT
		PRINTED. ^IF 1 (DEFAULT), THE
		BLOCK HEADERS ARE PRINTED.
.INDEX /^^HEADER\\:0 OR 1
	/^^NEW\\	^ACCEPT REQUEST EVEN IF FILE DOES
		NOT YET EXIST. ^DEFAULT FILE IS
		LOG FILE OF ^BATCH INPUT QUEUE.
.INDEX /^^NEW\\
	/^^NOTE:\\A	^THE TEXT SIGNIFIED BY A IS PRINTED
		IN THE OUTPUT.
.INDEX /^^NOTE\\:A
	^^/OKNONE\\	^DON'T GIVE AN ERROR MESSAGE IF NO
		FILE MATCHES THE WILDCARD
		SPECIFICATION (DEFAULT
		AT ^^KJOB\\ TIME).
.INDEX /^^OKNONE\\
	^^/PHYSICAL\\	^SUPPRESS LOGICAL DEVICE
		ASSIGNMENTS FOR THE FILE.
.INDEX /^^PHYSICAL\\
	^^/REMOVE\\	^REMOVE THE FILE FROM THE QUEUE.
		(^CAN ONLY BE USED IN A
		^^/MODIFY\\ REQUEST.)
	/^^START:\\N	^START ON THE NTH LINE.
.INDEX /^^START\\:N
	^^/STRS\\	^WHEN NO WILDCARD IS SPECIFIED,
		SEARCH FOR THIS FILE ON ALL
		STRUCTURES IN THE JOB'S SEARCH
		LIST.  ^THE DEFAULT IS TO FIND
		JUST THE FIRST OCCURRENCE.
.INDEX /^^STRS\\
.SKIP 2
	^^NOTES:\\	1.  ^ONLY ONE OF THE FILE FORMATS
		^^ASCII\\, ^^COBOL AND ^FORTRAN\\ MAY BE
		USED FOR A FILE. ^THE DEFAULTS
		ARE ^^FORTRAN\\ FOR FILES WITH
		EXTENSIONS ^^.DAT\\ AND ^^ASCII\\
		FOR ALL OTHERS.
.BLANK 1
		2.  ^ONLY ONE OF THE ^^/DISPOSE\\
		SWITCHES, ^^DELETE, PRESERVE,\\ AND
		^^RENAME\\ CAN BE USED FOR A FILE.
		^THE DEFAULTS ARE ^^RENAME\\ FOR
		UNPRESERVED FILES WITH EXTENSIONS
		^^.CRF, .LST,\\ AND ^^.TMP\\ AND ^^PRESERVE\\
		FOR ALL OTHER FILES.
.INDEX ^FILE ^CONTROL ^SWITCHES
.INDEX ^^/COPIES\\
.INDEX ^^/DISPOSE:DELETE\\
.INDEX ^^/DISPOSE:PRESERVE\\
.INDEX ^^DISPOSE:RENAME\\
.INDEX ^^/FILE:ASCII\\
.INDEX ^^/FILE:FORTRAN\\
.INDEX ^^/REMOVE\\
.BLANK 5
.INDENT 29
^^DEVICE DEPENDENT SWITCHES\\
.INDENT 39
^^CARD-PUNCH QUEUE\\
.TAB STOPS 10,25,29
.SKIP 2
^^4.2##C\\ARD ^PUNCH ^QUEUE
.SKIP 3
	^SWITCH	^MEANING
.SKIP 2
	^^/PAPER:\\X	^SAME AS /^^PUNCH:\\X
	^^/PUNCH:026\\	^PUNCH FILES IN 026 HOLLERITH CODE.
	^^/PUNCH:ASCII\\	^PUNCH FILES IN ^^ASCII\\ CARD CODE.
	^^/PUNCH:BINARY\\	^PUNCH FILES IN BINARY CARD FORMAT.
	^^/PUNCH:D029	\\^PUNCH FILES IN OLD ^^DEC029\\ CARD
		CODE.
	^^/PUNCH:IMAGE\\	^PUNCH FILE IN IMAGE MODE.
.SKIP 2
.TAB STOPS 10,15
	^^NOTES:\\	1.	^ONLY ONE OF THE ABOVE SWITCHES MAY BE
			SPECIFIED FOR A FILE. ^THE DEFAULTS ARE
			THAT THE FILE IS PUNCHED IN ^^ASCII\\ CARD
			CODE OR BINARY CARD CODE IF THE FILE HAS
			AN EXTENSION OF ^^.REL, .SAV, .SHR, .HGH,\\
			OR ^^.LOW.\\
.SKIP 1
		2.	^EACH FILE PUNCHED WILL BE PRECEDED BY
			A ^^$DECK\\#CARD GIVING THE FILENAME.
.SKIP 1
		3.	^IF ^^/BINARY\\ OR ^^/IMAGE\\ IS SPECIFIED, THE
			^^/FILE:ASCII\\ AND ^^/FILE:FORTRAN\\ SWITCHES
			DESCRIBED ABOVE MAY NOT BE USED.
.INDEX ^^/PAPER\\
.INDEX ^^/PUNCH:026\\
.INDEX ^^/PUNCH:ASCII\\
.INDEX ^^/PUNCH:BINARY\\
.INDEX ^^/PUNCH:D029\\
.INDEX ^^/PUNCH:IMAGE\\
.INDEX ^DEVICE ^DEPENDENT ^SWITCHES
.INDEX ^CARD-^PUNCH ^QUEUE
.PAGE
.INDENT 36
^^LINE-PRINTER QUEUE\\
.TAB STOPS 10,26
.SKIP 2
^^4.3##L\\INE ^PRINTER ^QUEUE
.SKIP 3
	^SWITCH	^MEANING
.SKIP 2
	^^/OKBINARY\\	^PRINT FILES WHOSE EXTENSIONS
		INCLUDE BINARY INFORMATION.
		^NORMALLY FILES WITH
		EXTENSIONS ^^.SAV, .SHR, .LOW,
		.REL,\\ AND ^^.HGH\\ WILL NOT
		BE IN PRINT QUEUES.
.INDEX /^^OKBINARY\\
	^^/PAPER\\:X	^SAME AS ^^/PRINT:\\X
	^^/PRINT:ARROW\\	^CONVERT CONTROL CHARACTERS (EXCEPT
		011-015 AND 020-024)
		TO UP-ARROW FORMAT FOR OUTPUT.
.INDEX /^^PRINT:ARROW\\
	^^/PRINT:ASCII\\	^SEND THE FILE TO THE LINE-PRINTER
		WITH NO CHANGES.
	/^^PRINT:OCTAL	P\\ERFORM AN OCTAL DUMP OF THE FILE.
.INDEX /^^PRINT:OCTAL\\
	^^/PRINT:SUPPRESS\\	^SUPPRESS ALL CARRIAGE-CONTROL
		CHARACTERS EXCEPT FOR ^^ASCII\\
		CODE CHARACTERS ^L^F AND ^C^R;
		THIS SWITCH IMPLIES THE USE OF THE
		^^/PRINT:ARROW\\. ^EQUIVALENT
		TO OPERATOR COMMAND TO SPOOLER
		^^(SUPPRESS\\).
	^^/REPORT\\:CODE	^PRINT THE REPORT SPECIFIED
		BY THE CODE FROM A ^^COBOL\\
		REPORT FILE. ^THE CODE CAN BE UP
		TO 12 CHARACTERS IN LENGTH.
.INDEX /^^REPORT\\:CODE
	^^/SPACING:SINGLE\\	^SINGLE SPACE THE PRINTED OUTPUT.
	^^/SPACING:DOUBLE\\	^DOUBLE SPACE THE PRINTED OUTPUT.
	^^/SPACING:TRIPLE\\	^TRIPLE SPACE THE PRINTED OUTPUT.
.SKIP 2
	^^NOTE:\\	^THE DEFAULT CONDITIONS ARE THAT
		THE LINES OUTPUT TO THE PRINTER
		ARE WITH NO CHANGES
		(I.E. ^^/PRINT:ASCII\\)
		AND THE LINES ARE SINGLE SPACED
		(I.E. ^^SPACING:SINGLE\\).
.INDEX ^^/PAPER\\
.INDEX ^^/PRINT:ASCII\\
.INDEX ^^/PRINT:ASCII\\
.INDEX ^^/PRINT:SUPPRESS\\
.INDEX ^^/SPACING:SINGLE\\
.INDEX ^^/SPACING:DOUBLE\\
.INDEX ^^/SPACING:TRIPLE\\
.INDEX ^LINE-^PRINTER ^QUEUE
.PAGE
.INDENT 29
^^PAPER-TAPE PUNCH QUEUE\\
.SKIP 2
^^4.4##P\\APER ^TAPE ^PUNCH ^QUEUE
.SKIP 3
.TAB STOPS 10,25
	^SWITCH	^MEANING
	^^/PAPER:\\X	^SAME AS ^^/TAPE:\\X
	^^/TAPE:ASCII\\	^PUNCH THE TAPE IN ^^ASCII\\ MODE.
	^^/TAPE:BINARY\\	^PUNCH THE TAPE IN BINARY MODE.
	^^/TAPE:IBINARY\\	^PUNCH THE TAPE IN IMAGE BINARY
		MODE.
	^^/TAPE:IMAGE\\	^PUNCH THE TAPE IN IMAGE MODE.
.SKIP 1
	^^NOTE:\\	^THE DEFAULT CONDITION IS THAT THE
		TAPE IS PUNCHED IN ^^ASCII\\ MODE
		(I.E. ^^TAPE:ASCII\\).
.INDEX ^PAPER-TAPE ^PUNCH ^QUEUE
.INDEX ^^/PAPER\\
.INDEX ^^/TAPE:ASCII\\
.INDEX ^^/TAPE:BINARY\\
.INDEX ^^/TAPE:IBINARY\\
.INDEX ^^/TAPE:IMAGE\\
.PAGE
.INDENT 33
^^INPUT QUEUE SWITCHES\\
.SKIP 2
^^4.5##I\\NPUT ^QUEUE ^SWITCHES
.SKIP 3
.TAB STOPS 10,24,27
	^SWITCH	^MEANING
.SKIP 2
	^^/CARDS:\\N	^THIS SWITCH SETS THE MAXIMUM LIMIT
		OF CARDS THAT CAN BE PUNCHED
		( N IS A DECIMAL ARGUMENT)
	^^/CORE:\\N	^THIS SWITCH SETS THE MAXIMUM CORE
		MEMORY THAT THE JOB CAN USE.
		( N IS DECIMAL ^K OF CORE)
	^^/DEPEND:\\N	^SPECIFIES THE INITIAL VALUE
		OF THE DEPENDENCY COUNT IN DECIMAL.
		^WHEN USED WITH ^^/MODIFY\\, THIS
		SWITCH CHANGES THE DEPENDENCY COUNT
		OF ANOTHER JOB. ^IF N IS A SIGNED
		NUMBER (+ OR -), THAT NUMBER IS
		ADDED TO OR SUBTRACTED FROM THE
		DEPENDENT JOB'S COUNT. ^IF N IS NOT
		A SIGNED NUMBER, THE DEPENDENT JOB'S
		COUNT IS CHANGED TO N.
	^^/FEET\\:N	^THIS SPECIFIES THE MAXIMUM NUMBER
		OF FEET OF PAPER TAPE THAT THE JOB
		CAN PUNCH.  (N IS A DECIMAL ARG.)
	^^/PAGE:\\N	^THIS SPECIFIES THE MAXIMUM NUMBER
		OF PAGES OF OUTPUT THAT THE JOB CAN
		PRINT.  (N IS A DECIMAL ARGUMENT)
	^^/PHYSICAL\\	^SUPPRESS LOGICAL DEVICE
		ASSIGNMENTS FOR THIS FILE.
.INDEX /^^PHYSICAL\\
	/^^RESTART:\\0 OR 1 	^IF 0 (DEFAULT), JOB CANNOT BE
		REQUEUED AND RESTARTED BY THE
		OPERATOR AFTER A SYSTEM CRASH.
		^A MESSAGE IS SENT TO THE JOB'S
		LOG FILE.
.INDEX /^^RESTART\\:0 OR 1
	^^/START\\:N	(CONTROL FILE ONLY) ^START
		PROCESSING AT THE NTH LINE.
.INDEX /^^START\\:N
	^^/STRS\\	^WHEN NO WILDCARD IS SPECIFIED,
		SEARCH FOR THIS FILE ON ALL
		STRUCTURES IN THE JOB'S SEARCH
		LIST. ^THE DEFAULT IS TO FIND
		JUST THE FIRST OCCURRENCE.
.INDEX /^^STRS\\
	^^/TIME\\:HHMMSS	^THIS SPECIFIES THE CENTRAL PROCESSOR
		TIME LIMIT FOR THE JOB.  (ARGUMENT
		IS IN THE FORM "HOUR-MIN-SEC")
	^^/TPLOT:\\N	^THIS SPECIFIES THE MAXIMUM AMOUNT OF
		PLOTTING TIME ALLOWED FOR THE JOB.
		( N IS IN DECIMAL MINUTES)
	^^/UNIQUE\\:0 OR 1	^IF 0, ANY NUMBER OF ^BATCH JOBS
		UNDER THIS PROJECT-PROGRAMMER
		NUMBER CAN RUN AT THE SAME TIME.
		^IF 1 (DEFAULT), ONLY ONE ^BATCH JOB
		CAN RUN AT ANY ONE TIME.
.SKIP 2
	^^NOTES:\\	1.  ^ONLY TWO FILE CAN BE SPECIFIED
		IN AN INPUT QUEUE REQUEST, THE
		CONTROL FILE AND THE LOG FILE.
.SKIP 1
		2.  ^DEFAULTS ARE THAT NO CARDS
		ARE PUNCHED, NO PAPER TAPE IS
		PUNCHED, NO PLOTTING IS DONE.
		^THERE IS NO DEPENDENCY.
		^THE MAXIMUM AMOUNT OF CORE IS 25^K.
		^THE NUMBER OF PAGES PRINTED IS
		LIMITED TO 100, AND THE CENTRAL
		PROCESSOR TIME LIMIT IS ONE MINUTE.
.INDEX ^INPUT ^QUEUE ^SWITCHES
.INDEX ^^/CARDS\\
.INDEX ^^/CORE\\
.INDEX ^^/DEPEND\\
.INDEX ^^/FEET\\
.INDEX ^^/PAGE\\
.INDEX ^^/PERMANENT\\
.INDEX ^^/TIME\\
.INDEX ^^/TPLOT\\
.INDEX ^^/UNIQUE\\
.BLANK 5
.INDENT 48
^^EXAMPLES\\
.SKIP 3
^^4.6##QUEUE#E\\XAMPLES
.SKIP 2
.TAB STOPS 42
^^.QUEUE FILEA, FILEB <CR><LF>\\	^ENTER FILES
	^^FILEA.LST\\ AND
	^^FILEB.LST\\ INTO THE
	LINE-PRINTER
	QUEUE.
.SKIP 1
^^.QUEUE INP:=TEST<CR><LF>\\	^ENTER FILE
	^^TEST.CTL\\
	INTO THE ^^BATCON\\
	INPUT QUEUE.
.SKIP 1
^^.QUEUE DSK:A.FIL=/LIST<CR><LF>\\	^PLACE A QUEUE
	LISTING OF ALL
	JOBS OF THE
	LOGGED IN USER
	INTO ^^A.FIL\\
	IN THE USER'S 
	DISK AREA.
.BLANK 1
^^.QUEUE INP:TEST=/KILL	\\^REMOVE THE ENTRY
	CORRESPONDING TO
	^^TEST.CTL\\ FROM THE
	^^BATCON\\ INPUT
	QUEUE.
.BLANK 1
^^.QUEUE INP:TEST1=/MODIFY/TIME:200
	\\^ALTER THE TIME
	PARAMETER OF
	THE ENTRY
	CORRESPONDING
	TO ^^TEST1.CTL\\
	IN THE ^^BATCON\\
	INPUT QUEUE.

.SKIP 2
^^NOTES:\\
.SKIP 1
.FILL
.JUSTIFY
.LEFT MARGIN 9
.INDENT -4
1.##^THE ABOVE EXAMPLES ARE OF THE ^^QUEUE\\ COMMAND TO
THE MONITOR. ^WHEN INVOKING THE ^^QUEUE\\ PROGRAM
AFTER INPUTTING ^^R QUEUE\\ TO THE MONITOR OR
WHEN RUNNING QUEUE AS A SUBJOB OF ^^OPSER,
"QUEUE"\\ IS NOT INCLUDED IN THE COMMAND STRING.
.INDEX ^QUEUE ^EXAMPLES
.SUBTITLE ^^QUEUE\\
.PAGE

.FILL
.JUSTIFY
.LEFT MARGIN 5
.BLANK 3
4.7##^^QUEUE\\ ^ERROR ^MESSAGES
.INDEX ^^QUEUE\\ ^ERROR ^MESSAGES
.BLANK 2
^LISTED BELOW ARE THE MESSAGES TYPED BY ^^QUEUE\\ ON THE TERMINAL THAT
IS CONTROLLING ^^QUEUE\\.
.BLANK 1
^^?CANNOT DO OUTPUT TO DEVICE\\ DEV
.BREAK
^OUTPUT WAS ATTEMPTED TO A DEVICE THAT CAN ONLY DO INPUT OR TO A DEVICE
DESIGNATED BY A LOGICAL NAME.
.BLANK 1
^^%CAN'T RENAME -- FILE PRESERVED\\
.BREAK
^AN ATTEMPT WAS MADE TO CHANGE THE PROTECTION OF A PRESERVED FILE.
.BLANK 1
^^?COMMA REQUIRED IN DIRECTORY\\
.BREAK
^A PROJECT-PROGRAMMER NUMBER WAS SPECIFIED WITHOUT THE SEPARATING COMMA.
.BLANK 1
^^?DEVICE WILDCARD ILLEGAL\\
.BREAK
^NEITHER AN ASTERISK NOR A QUESTION MARK (*#OR#?) CAN BE USED
WHEN SPECIFYING A DEVICE.
.BLANK 1
^^?DOUBLE DEVICE ILLEGAL\\
.BREAK
^^QUEUE\\ FOUND TWO DEVICES IN A ROW WITHOUT AN INTERVENING FILENAME,
E.G., ^^Q LPT: PTP:\\
.BLANK 1
^^?DOUBLE DIRECTORY ILLEGAL\\
.BREAK
^TWO PROJECT-PROGRAMMER NUMBERS IN A ROW CANNOT BE SPECIFIED.
.BLANK 1
^^?DOUBLE EXTENSION ILLEGAL\\
.BREAK
^TWO EXTENSIONS CANNOT APPEAR WITHOUT AN INTERVENING FILENAME.
.BLANK 1
^^?DOUBLE FILENAME ILLEGAL\\
.BREAK
^^QUEUE\\ FOUND TWO FILENAMES IN A ROW, E.G., ^^Q TEST1 TEST2\\
.BLANK 1
?FEATURE ^^NOT SUPPORTED\\
.BREAK
^THE NAMED FEATURED HAS NOT YET BEEN IMPLEMENTED.
.BLANK 1
^^?FILENAME REQUIRED FOR INPUT QUEUE\\
.BREAK
^A FILE CANNOT BE ENTERED INTO THE ^^BATCON\\ INPUT QUEUE WITHOUT A FILENAME.
.PAGE


.BLANK 1
^^?FILE SWITCHES ILLEGAL IN OUTPUT FILE\\
.BREAK
^SWITCHES CANNOT APPEAR ON THE LEFT SIDE OF THE EQUAL SIGN, I.E.,
IN THE OUTPUT SPECIFICATION.
.BLANK 1
^^?ILLEGAL COMMAND SYNTAX CHARACTER\\ X
.BREAK
^THE CHARACTER X WAS USED INCORRECTLY IN THE COMMAND STRING.
.BLANK 1
^^?ILLEGAL QUEUE DEVICE\\
.BREAK
^THE QUEUE NAME SPECIFIED CANNOT BE USED WITH THE GIVEN SWITCH.
.BLANK 1
^^?ILLEGAL QUEUE NAME\\ XXX
.BREAK
^THE QUEUE XXX IS NOT ONE OF THE SYSTEM QUEUES, OR THE QUEUE SPECIFIED
IS A LOGICAL NAME.
.BLANK 1
^^?ILLEGAL TO CREATE REQUEST FOR SOMEONE ELSE\\
.BREAK
^ONLY THE OPERATER WHEN LOGGED IN UNDER [1,2] CAN REQUEST QUEUING FOR
OTHER USERS.
.BLANK 1
^^?INPUT DEVICE NOT A DISK\\
.BREAK
^THE INPUT SPECIFICATIONS MUST BE DISK FILES.
.BLANK 1
^^?INSUFFICIENT CORE FOR QUEUE\\
.BREAK
^THERE IS NOT ENOUGH CORE IN THE SYSTEM TO MAKE AN OUTPUT QUEUE ENTRY
AT THE TIME OF THE ^^KJOB\\ COMMAND.
.BLANK 1
^^?LISTING ENTER FAILURE\\ N
.BREAK
^THE ^^ENTER UUO\\ TO WRITE THE FILE FAILED; N IS A DISK ERROR CODE
FROM 1 THROUGH 16.
.BLANK 1
^^?LISTING OPEN FAILURE ON DEVICE\\ DEV
.BREAK
^THE ^^OPEN UUO\\ FAILED ON THE SPECIFIED DEVICE.
.BLANK 1
^^?LOGIN PLEASE TO USE SWITCH CREATE\\
.BREAK
^THE USER MUST BE LOGGED IN TO MAKE A NEW ENTRY IN A QUEUE.
.BLANK 1
^^?MORE THAN ONE OUTPUT FILE ILLEGAL\\
.BREAK
^ONLY ONE OUTPUT QUEUE-NAME CAN BE SPECIFIED IN THE COMMAND STRING.
.PAGE


.BLANK 1
^^?NO MODIFIER ALLOWED IN SWITCH\\ SWITCH
.BREAK
^THE SPECIFIED SWITCH CANNOT HAVE A VALUE.
.BLANK 1
^^%NON-EXISTENT FILE\\ FILE.EXT [P,PN]
.BREAK
^THE FILE SPECIFIED FOR INPUT COULD NOT BE FOUND.
.BLANK 1
^^?NOT YET SUPPORTED COMMAND CODE\\ SWITCH
.BREAK
^A SWITCH WAS SPECIFIED THAT HAS NOT BEEN IMPLEMENTED.
.BLANK 1
^^?NULL DEVICE ILLEGAL\\
.BREAK
^A COLON WAS FOUND WITHOUT A PRECEDING DEVICE NAME IN A COMMAND STRING.
.BLANK 1
^^?RIGHT BRACKET REQUIRED IN DIRECTORY\\
.BREAK
^THE PROJECT-PROGRAMMER NUMBER MUST BE ENCLOSED IN SQUARE BRACKETS.
.BLANK 1
?SWITCH ^^SWITCH ILLEGAL\\
.BREAK
^THE SPECIFIED SWITCH CANNOT BE USED WITH THE GIVEN QUEUE NAME.
.BLANK 1
^^?SWITCH VALUE TOO LARGE\\ X
.BREAK
^THE VALUE GIVEN FOR THE SWITCH EXCEEDED THE MAXIMUM VALUE.
.BLANK 1
^^?UNKNOWN SWITCH\\ SWITCH
.BREAK
^THE SPECIFIED SWITCH WAS MISTYPED.
.BLANK 1
^^?UNKNOWN SWITCH VALUE\\ N
.BREAK
^THE ARGUMENT SPECIFIED WITH A SWITCH WAS MISTYPED.
.BLANK 1
^^%WARNING INPUT REQUEST USES ONLY TWO ENTRIES\\
.BREAK
^ONLY TWO FILES CAN BE SPECIFIED IN THE INPUT QUEUE REQUEST, THE CONTROL
FILE AND THE LOG FILE.
.BLANK 1
.INDENT 38
^^NAME\\
.BREAK
^^?WILDCARD ILLEGAL IN INPUT QUEUE FILE DIRECTORY\\
.BREAK
.INDENT 38
^^EXTENSION\\
.BREAK
^NEITHER ASTERISKS NOR QUESTION MARKS CAN BE USED WHEN SPECIFYING THE
INPUT QUEUE.
.BLANK 1
.INDENT 28
^^NAME\\
.BREAK
^^?WILDCARD ILLEGAL IN OUTPUT DIRECTORY\\
.BREAK
.INDENT 28
^^EXTENSION\\
.BREAK
^NEITHER ASTERISKS NOR QUESTION MARKS CAN BE USED IN THE OUTPUT QUEUE
SPECIFICATION.
.SUBTITLE ^^SPOOLERS\\
.PAGE

.LEFT MARGIN 5
.INDENT 45
^^CHAPTER#5\\
.INDENT 47
^^SPOOLERS\\
.SKIP 10
^^5.0##DEC\\SYSTEM-10 ^OUTPUT ^SPOOLERS
.SKIP 3
.FILL
.JUSTIFY
.PARAGRAPH
^THE ^^DEC\\SYSTEM-10 OUTPUT SPOOLERS READ THE SYSTEM QUEUE FILE AND
DIRECT OUTPUT TO THE PROPER OUTPUT DEVICE.  ^SPOOLERS ARE WRITTEN
FOR THE LINE PRINTER, CARD PUNCH, PAPER TAPE PUNCH, AND
PLOTTER.  ^FILE SELECTION IS DONE USING THE OPERATOR'S
INTERACTIVE COMMANDS AND DEFAULTS ARE USED UNLESS EXPLICITLY
OVERRIDDEN BY THE OPERATOR.
.SKIP 2
.PARAGRAPH
^EACH OUTPUT SPOOLER IS A UNIQUE SYSTEMS PROGRAM AND IS 
NAMED AFTER THE DEVICE IT SPOOLS TO.  ^THE VARIOUS SPOOLER
NAMES AND DEVICES ARE:
.LEFT MARGIN 10
.SKIP 2
.NOFILL
.NOJUSTIFY
.TAB STOPS 18
^^LPTSPL\\	^LINE ^PRINTER ^SPOOLER
.SKIP 1
^^CDPSPL\\	^CARD ^PUNCH ^SPOOLER
.SKIP 1
^^PTPSPL\\	^PAPER ^TAPE ^SPOOLER
.SKIP 1
^^PLTSPL\\	^PLOTTER ^SPOOLER
.LEFT MARGIN 5
.SKIP 2
.FILL
.JUSTIFY
.PARAGRAPH
^STARTING ONE OF THE SPOOLERS IS SIMILAR TO STARTING ANY OF THE
OTHER SYSTEM PROGRAMS DESCRIBED IN THIS DOCUMENT.  ^THE SPOOLERS
MAY BE RUN AS INDIVIDUAL JOBS.
.SKIP 1
.LEFT MARGIN 10
.NOFILL
.NOJUSTIFY
E.G. ^^.R LPTSPL\\
.SKIP 1
.LEFT MARGIN 5
TO WHICH ^^LPTSPL\\ RESPONDS
.LEFT MARGIN 10
.SKIP 1
*
.SKIP 1
.LEFT MARGIN 5
^THE SPOOLERS MAY ALSO BE RUN AS SUBJOBS OF ^^OPSER\\
.SKIP 1
.LEFT MARGIN 10
E.G. !1-^^R LPTSPL\\
.SKIP 1
.LEFT MARGIN 5
.FILL
.JUSTIFY
.PARAGRAPH
^FILE SELECTION IS DONE USING THE OPERATOR'S INTERACTIVE
COMMANDS.  ^THESE COMMANDS MAY BE ENTERED AT ANY TIME THAT
THE SPOOLER IS RUNNING.  ^ONLY ENOUGH CHARACTERS NECESSARY
TO MAKE THE COMMAND UNIQUE NEED BE INPUT, ALTHOUGH
MORE WILL BE CHECKED IF INPUT.
.NOFILL
.NOJUSTIFY
.LEFT MARGIN 10
.SKIP 1
E.G. ^^"H"="HE"="HEL"="HELP"\\
.LEFT MARGIN 5
.SKIP 1
.FILL
.JUSTIFY
^SINCE ^^"HELP"\\ IS THE ONLY COMMAND BEGINNING WITH THE LETTER
"^H", "^H" IS AS UNIQUE AS IF THE COMMAND INPUT WERE
^^"HELP"\\.
.SKIP 1
^^5.1##SPOOLER#C\\OMMANDS
.SKIP 1
^THE VARIOUS INTERACTIVE COMMANDS COMMON TO
ALL OF THE SPOOLERS ARE DESCRIBED ON THE FOLLOWING PAGES.
.SUBTITLE ^^SPOOLER C\\OMMANDS
.INDEX ^^SPOOLERS\\
.INDEX ^^LPTSPL\\
.INDEX ^^CDPSPL\\
.INDEX ^^PTPSPL\\
.INDEX ^^PLTSPL\\
.PAGE
.LEFT MARGIN 5

.TAB STOPS 25
.NOJUSTIFY
.FILL
.;BACKSPACE
.INDENT 45
^^BACKSPACE\\
.SKIP 3
.LEFT MARGIN 25
.INDENT -20
.INDEX ^^BACKSPACE\\
^^BACKSPACE\\ N	^BACKSPACE THE FILE N PAGES (CARDS FOR ^^CDP\\
AND FEET FOR ^^PTP\\) AND CONTINUE FROM
THERE.  (N IS A DECIMAL ARGUMENT)
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:\\
.NOFILL
.SKIP 2
_!^^BACK 20\\
_!
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.BLANK 1
.TAB STOPS 25
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##^^BACKSPACE\\ WITH AN ARGUMENT GREATER THAN
THE NUMBER OF REMAINING PAGES, FEET, OR
BUFFERS WILL RETURN TO THE BEGINNING OF
THE FILE.
.LEFT MARGIN 5
.PAGE
.;CHKPNT
.INDENT 48
^^CHKPNT\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^CHKPNT\\	^FORCES THE SPOOLER TO RECORD ITS CURRENT STATUS ON
THE DISK. ^IF THE SPOOLER SHOULD BE KILLED AND THEN RESTARTED, IT
WILL RESUME PROCESSING FROM THE LAST CHECKPOINT.
.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^EXAMPLES\\:
.BLANK 2
^^CHKPNT\\
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.BLANK 1
^EACH SPOOLER NORMALLY RECORDS A CHECKPOINT EVERY FIVE MINUTES SO
THAT IT CAN BE RESTARTED AT THE LAST CHECKPOINT IF IT SHOULD STOP
ABNORMALLY.
.INDEX ^^CHKPNT\\
.PAGE
.;CURRENT
.INDENT 47
^^CURRENT\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^CURRENT\\	^LISTS THE CURRENT VALUES FOR ^^MSGLVL, MLIMIT,\\
AND ^^ZZZ\\.

.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
.NOFILL
^^EXAMPLES:
.BLANK 2
_!CURRENT
CURRENT DEFAULTS: MLMIT:10000 MSGLVL:500 ZZZ:5\\
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES\\:
.INDEX ^^CURRENT\\
.PAGE
.;EXIT
.INDENT 50
^^EXIT\\
.BLANK 3
.FILL
.LEFT MARGIN 25
.INDENT -20
^^EXIT\\	^RETURN TO MONITOR COMMAND
LEVEL.
.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^EXAMPLES:
.BLANK 2
_!EXIT
.BREAK
_.
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
NOTES:\\
.INDEX ^^EXIT\\
.PAGE
.;FORMS
.INDENT 50
^^FORMS\\
.BLANK 3
.LEFT MARGIN 25
.INDENT -20
^^FORMS#\\<TYPE>	^DESCRIBES THE TYPE OF FORM THAT THE OPERATOR HAS
MOUNTED. ^THE FORM-TYPE IS SPECIFIED BY <TYPE>, WHICH IS A NAME
CONTAINING 6 OR FEWER CHARACTERS.
.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^EXAMPLES:\\
.BLANK 2
^^FORMS:##N\\ARROW
.BREAK
^^FORMS:##\\_#435
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.BLANK 1
^THE ^^FORM\\ COMMAND ALLOWS THE OPERATOR TO CHANGE FORMS WITHOUT
BEING ASKED BY THE USER VIA THE ^^/FORMS\\ SWITCH TO ^^QUEUE\\.
.INDEX ^^FORMS\\
.PAGE
.;FORWARD
.INDENT 47
^^FORWARD\\
.SKIP 3
.TAB STOPS 25
.FILL
.LEFT MARGIN 25
.INDENT -20
^^FORWARD\\ N	^SKIP OVER N PAGES (CARDS FOR ^^CDP\\
AND FEET FOR ^^PTP\\ AND CONTINUE
FROM THERE. (N IS A DECIMAL ARGUMENT)
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
_!^^FOR 20\\
_!
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.SKIP 1
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##^^FORWARD\\ N WHERE N IS GREATER THAN THE
NUMBER OF REMAINING PAGES, CARDS, OR
FEET WILL SKIP TO THE NEXT FILE IN THE
REQUEST.
.INDEX ^^FORWARD\\
.LEFT MARGIN 5
.PAGE
.;GO
.INDENT 52
^^GO\\
.SKIP 3
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
^^GO\\	^DIRECTS THE SELECTED SPOOLER TO CONTINUE
OUTPUT AFTER A "^^STOP\\" COMMAND.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
*^^GO\\
_!
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.SKIP 1
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##^WHENEVER A * IS OUTPUT BY A SPOOLER, A
^^"GO"\\ IS REQUIRED TO CONTINUE.
.SKIP 1
.INDENT -4
2.##^A "!" INDICATES THAT INTERVENTION
IS NOT REQUIRED.
.INDEX ^^GO\\ FOR ^SPOOLERS
.LEFT MARGIN 5
.PAGE
.;HELP
.INDENT 50
^^HELP\\
.SKIP 3
.TAB STOPS 25
^^HELP	O\\UTPUTS THE ^^HELP\\ TEXT.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:\\
.SKIP 2
.LEFT MARGIN 18
.TAB STOPS 18
.INDENT -13
^^*HELP\\
.INDEX ^^*HELP\\ FOR ^SPOOLERS
.SKIP 2
.INDENT -13
^^COMMAND	ACTION
.FILL
.INDENT -13
^^ALIGN FILE	PRINT FILE ON THE LINE PRINTER. AT END OF FILE
START AGAIN.
.INDENT -13
BACKSPACE#N	BACK SPACE THE FILE N PAGES.
.INDENT -13
CHKPNT	^THIS COMMAND CAUSES THE SPOOLER TO RECORD ITS CURRENT
STATUS ON THE DISK. ^IF THE SPOOLER SHOULD BE KILLED IT WILL
RESUME FROM THIS POINT.
.INDENT -13
CURRENT	GIVE THE CURRENT VALUE OF MSGLVL, MLIMIT AND ZZZ.
.INDENT -13
EXIT	RETURN TO MONITOR COMMAND LEVEL.
.INDENT -13
FORMS#<TYPE>	MOUNT<TYPE> FORMS.
.INDENT -13
FORWARD#N	FORWARD SPACE THE FILE N PAGES.
.INDENT -13
GO	CONTINUE FROM A PAUSE OR STOP.
.INDENT -13
HELP	WHAT YOU ARE GETTING NOW.
.INDENT -13
KILL	KILL THIS USER AND GO ON TO NEXT JOB.
.INDENT -13
LIMIT#N	RESET THE OUTPUT LIMIT FOR THIS JOB TO N PAGES.
.INDENT -13
LOCK	PAUSE AT END OF EVERY JOB. ^THERE ARE TWO SWITCHES:
.BREAK
	/SET#-#PAUSE AFTER EACH JOB.
.BREAK
	/CLEAR#-#PROCEED AUTOMATICALLY.
.INDENT -13
MLIMIT#N	DO NOT RUN ANY JOB WHICH OUTPUT MORE THAN N PAGES.  THIS
HAS NO EFFECT ON THE CURRENT JOB.
.INDENT -13
MSGLVL#ABC	SELECT WHICH MESSAGES ARE TYPED AS FOLLOWS:
.BREAK
A=0 OR 1 PRINT ALL NON-ERROR MESSAGES.
.BREAK
A=2 OR 3 PRINT ALL NON-ERROR MESSAGES EXCEPT STOP.
.BREAK
A=4 OR 5 PRINT ALL NON-ERROR MESSAGES EXCEPT START AND STOP.
.BREAK
A=6 OR 7 PRINT NO NON-ERROR MESSAGES AND SHORT WHAT.
.BREAK
B=0 TO 9 PRINT FULL LENGTH MESSAGES.
.BREAK
C=0 OR 1 PRINT ALL ERROR MESSAGES.
.BREAK
C=4 OR 5 PRINT ONLY SYSTEM ERROR MESSAGES.
.BREAK
C=9######PRINT NO ERROR MESSAGES.
.BREAK
NOTE:##IF MSGLVL 999 IS USED NO MESSAGES WILL BE TYPED.
.BLANK 1
.INDENT -13
PAUSE	STOP AFTER CURRENT JOB.
.INDENT -13
REQUEUE	STOP THE CURRENT JOB AND PLACE IT BACK IN THE QUEUE. THERE ARE
6 SWITCHES.
/AFTER:NN WILL HOLD THE JOB FOR NN MIN.
/BACK:NN WILL START N PAGES BACK.
/FORWARD:NN WILL START NN PAGES FORWARD.
/CURRENT WILL RESTART AT THE CURRENT LOCATION AND /TOP WILL RESTART AT
THE BEGINNING. /HOLD WILL REQUEUE THE JOB WITH A LARGE AFTER PARAMETER
AND THE QUEUE /MODIFY COMMAND WILL FREE IT.
.INDENT -13
RESET	RELEASE THE OUTPUT DEVICE AND RETURN TO INITIAL STATE.
.INDENT -13
START DEV:	START THE SPOOLER. SEND OUTPUT TO  THE DEVICE SPECIFIED.
THE DEFAULT DEVICE IS LPT:
.INDENT -13
STOP	STOP NOW.
.INDENT -13
SUPPRESS	FORCE THE OUTPUT LISTING TO BE SINGLE SPACED.
.INDENT -13
TELL	PLACE A COMMENT LINE IN USERS LOG FILE.
.INDENT -13
WHAT	PRINT THE STATUS OF THE SPOOLER.
.INDENT -13
ZZZ#N	SET THE SLEEP TIME TO N SECONDS
.BLANK 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.INDEX ^^HELP\\
^^NOTES:\\
.PAGE
.NOJUSTIFY
.FILL
.;KILL

.INDENT 50
^^KILL\\
.SKIP 2
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
^^KILL	D\\IRECTS THE SPOOLER TO STOP THE CURRENT
OUTPUT JOB.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
_!^^KILL\\
^^JOB LOOP FINISHED AT 10:24:17\\
_!
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.SKIP 2
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##^THE FOLLOWING SWITCH MAY BE USED AS AN
ARGUMENT AFTER THE "^^KILL"\\ COMMAND.
.SKIP 1
/^^FLUSH\\##^DELETE ALL OUTPUT AND PURGE
THE JOB FROM
.BREAK
########THE SYSTEM.
.INDEX ^^KILL\\
.PAGE
.LEFT MARGIN 0
.;LIMIT
.INDENT 50
^^LIMIT\\
.BLANK 3
.TAB STOPS 25
.LEFT MARGIN 25
.NOJUSTIFY
.FILL
.INDENT -20
^^LIMIT\\ N	^CHANGES THE OUTPUT LIMIT FOR THIS
JOB ONLY.  ^SETS THE NEW LIMIT TO N
DECIMAL UNITS.
.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
.NOFILL
^^EXAMPLES:
.BLANK 2
_! LIMIT 500\\
_!
.BLANK 2
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.INDEX ^^LIMIT\\
.PAGE
.;LOCK
.INDENT 49
^^LOCK\\
.BLANK 2
.LEFT MARGIN 25
.NOJUSTIFY
.FILL
.INDENT -20
^^LOCK\\	^CAUSES A PAUSE AT THE END OF EVERY JOB.
.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^EXAMPLES\\:
.BLANK 2
^^LOCK#/SET\\
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
^^NOTES:\\
.BLANK 1
^TWO SWITCHES ARE AVAILABLE:
.BREAK
/^^SET\\####^CAUSES THE SPOOLER TO PAUSE AFTER EACH JOB AND TYPE AN ASTERISK.
.BREAK
/^^CLEAR\\##^REMOVES THE EFFECT OF THE ^^/SET\\ SWITCH SO THAT
.BREAK
#THE SPOOLER PROCEEDS AUTOMATICALLY.
.INDEX ^^LOCK\\
.PAGE
.;MLIMIT
.INDENT 45
^^MLIMIT\\
.BLANK 3
.TAB STOPS 25
.NOJUSTIFY
.FILL
.LEFT MARGIN 25
.INDENT -20
^^MLIMIT\\ N	^DO NOT RUN ANY JOB BIGGER THAN N UNITS.
.BLANK 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.BLANK 2
.NOFILL
^^EXAMPLES:\\
.BLANK 2
_!^^MLIMIT 3000
_!
.BLANK 2
.INDENT -5
------------------------------------------------------------
.BLANK 2
NOTES:
.BLANK 1
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##T\\HIS IS USED ONLY IN SELECTING FUTURE JOBS
AND HAS NO EFFECT ON THE CURRENT JOB.
.INDEX ^^MLIMIT\\
.LEFT MARGIN 5
.PAGE
.;MSGLVL
.INDENT 48
^^MSGLVL\\ 
.SKIP 3
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
^^MSGLVL\\ ABC	^OUTPUT TO THE OPERATOR ONLY THOSE MESSAGES
WITH HIGHER PRIORITY THAN SPECIFIED BY
"ABC" WHERE EACH RUNS FROM 0-9.
.LEFT MARGIN 18
^A=0#OR#1##PRINT ALL NON-ERROR MESSAGES
.BREAK
^A=2#OR#3##PRINT ALL NON-ERROR EXCEPT ^^EOF\\
.BREAK
^A=4#OR#5##PRINT ALL NON-ERROR EXCEPT ^^START\\
.INDENT 10
AND ^^STOP\\
.BREAK
^A=6#OR#7##PRINT NO ^^START\\ OR ^^STOP\\ MESSAGES
.INDENT 10
AND SHORT ^^WHAT\\
.BREAK
.BREAK
^B=0#TO#9##PRINT FULL MESSAGES
.BREAK
^C=0#OR#1##PRINT ALL ERROR MESSAGES
.BREAK
^C=2#OR#3##PRINT ALL BUT USER MESSAGES
.BREAK
^C=4#OR#5##PRINT NO SPOOLER ERROR MESSAGES
.BREAK
^C=9#######PRINT NO ERROR MESSAGES
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
.NOFILL
_!^^MSG 333\\
_!
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.SKIP 1
^THE ARGUMENTS ARE DETERMINED AS FOLLOWS:
.SKIP 1
.LEFT MARGIN 8
.FILL
.INDENT -3
A--THE AMOUNT OF "CHATTINESS".  ^THAT IS, WHICH
OF THE NORMAL MESSAGES ARE OUTPUT.
.SKIP 1
.INDENT -3
B--IS THE LENGTH PARAMETER AND REFLECTS
HOW LONG THE FINAL MESSAGE IS.
.SKIP 1
.INDENT -3
C--IS THE SEVERITY OF ERROR WHICH WILL
BE REPORTED TO THE OPERATOR.
.INDEX ^^MSGLVL\\ FOR ^SPOOLERS
.PAGE
.LEFT MARGIN 5
.;PAUSE
.INDENT 49
^^PAUSE\\
.SKIP 3
.FILL
.LEFT MARGIN 25
.INDENT -20
^^PAUSE	D\\IRECTS THE SPECIFIED SPOOLER TO STOP AT
THE END OF THE CURRENT OUTPUT JOB.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
_!^^PAUSE
JOB RUNOFF FINISHED AT 12:04:16
*RESET##########;GIVE LPT TO FIELD SERV
*START MTA0:####;PUT OUTPUT ON TAPE
_!\\
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.SKIP 1
^IF THE ^^PAUSE\\ COMMAND IS GIVEN WHILE THE SPOOLER
IS IDLE, IT WILL BE TREATED AS A ^^STOP\\ COMMAND.
.INDEX ^^PAUSE\\ FOR ^SPOOLERS
.PAGE
.;REQUEUE
.LEFT MARGIN 5
.INDENT 47
^^REQUEUE\\
.SKIP 3
.LEFT MARGIN 25
.TAB STOPS 25
.FILL
.INDENT -20
^^REQUEUE	R\\ETURNS THE PRESENT JOB TO THE SCHEDULER.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
_!^^STOP
*REQUEUE /TOP /HOLD
*GO\\
_!
.SKIP 2
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^NOTES:\\
.SKIP 1
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##^THE FOLLOWING SWITCHES MAY BE USED AS ARGUMENTS
AFTER THE ^^REQUEUE\\ COMMAND.
.SKIP 1
A.##^^/AFTER:\\T#####^HOLD THIS JOB UNTIL AFTER
.BREAK
#################TIME "T" (T SIGNIFIES TIME
#################IN MINUTES).
.SKIP 1
B.##^^/HOLD\\########^PLACE THIS JOB IN A HOLD STATUS.
.SKIP 1
C.##^^/CURRENT\\#####^CONTINUE FROM CURRENT LOCATION.
.SKIP 1
D.##^^/TOP\\#########^CONTINUE FROM START.
.SKIP 1
E.##^^/BACK:\\N######^START "N" DECIMAL UNITS BACK.
.SKIP 1
F.##^^/FORWARD\\:N###^START "N" UNITS FORWARD.
.INDEX ^^REQUEUE\\
.PAGE
.;RESET
.LEFT MARGIN 5
.INDENT 49
^^RESET\\
.SKIP 3
.TAB STOPS 25
.FILL
.LEFT MARGIN 25
.INDENT -20
^^RESET	C\\AUSES THE SPOOLER TO BE PLACED BACK IN ITS
ORIGINAL STATUS.  ^FROM THIS POINT, THE
SPOOLER REQUIRES A "^^START\\" COMMAND
TO RESUME PROCESSING.
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
_!^^STOP
*RESET
*START DSK:SPOOL.LPT
_!
.SKIP 2
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.BLANK 1
.LEFT MARGIN 9
.INDENT -4
1.##^^RESET\\ IS THE SAME AS TYPING
.SKIP 1
############.^^R LPTSPL\\
.SKIP 1
TO THE MONITOR WITH 2 EXCEPTIONS.
.BLANK 1
A.##THE LAST ^Z^Z IS RETAINED.
.BLANK 1
B.##THE LAST ^^MSGLVL\\ IS RETAINED.
.INDEX ^^RESET\\ FOR ^SPOOLERS
.PAGE
.LEFT MARGIN 5
.;START
.INDENT 50
^^START\\
.NOJUSTIFY
.FILL
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
.SKIP 3
^^START\\#DEV:FILE.EXT	^BEGINS PROCESSING AND DIRECTS ALL
OUTPUT TO THE SPECIFIED DEVICE.
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
_.^^R LPTSPL
*START
_!\\
.SKIP 2
^^*START MTA6:\\
_!
.SKIP 2
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.SKIP 1
.FILL
.LEFT MARGIN 9
.INDENT -4
1.##^THE DEFAULT OUTPUT DEVICE IS THE FIRST
THREE LETTERS OF THE SPOOLER NAME.
.SKIP 1
.INDENT -4
2.##^THERE IS NO DEFAULT FILENAME OR EXTENSION.
.SKIP 1
.INDENT -4
3.##^^START\\ ALSO TYPES A ^G^O SO PARAMETERS
SHOULD BE SET BEFORE TYPING ^^START\\
.NOFILL
##E.G.#####^^.R PLTSPL
###########*ZZZ 60
###########*MSGLVL 444
###########*START\\
###########_!
.INDEX ^^START\\ FOR ^SPOOLERS
.LEFT MARGIN 5
.PAGE
.;STOP
.INDENT 51
^^STOP\\
.SKIP 3
.TAB STOPS 25
.FILL
.LEFT MARGIN 25
.INDENT -20
^^STOP	D\\IRECTS THE SPOOLER TO STOP NOW AND
WAIT FOR THE NEXT INPUT.
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
_!^^STOP
*TELL RAN OUT OF BLUE CARDS
*TELL PUT GREEN IN PUNCH
*GO\\
_!
.SKIP 2
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.INDEX ^^STOP\\ FOR ^SPOOLERS
.PAGE
.;TELL
.INDENT 51
^^TELL\\
.SKIP 3
.LEFT MARGIN 25
.NOJUSTIFY
.FILL
.INDENT -20
^^TELL	S\\ENDS A COMMENT TO THE USER LOG FILE.
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^EXAMPLES:\\
.SKIP 2
^^!TELL MESSAGE FROM THE OPERATOR\\
.BREAK
_!
.SKIP 2
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.INDEX ^^TELL\\ FOR ^SPOOLERS
.PAGE
.;WHAT
.INDENT 51
^^WHAT\\
.BLANK 3
.TAB STOPS 25
.FILL
.LEFT MARGIN 25
.INDENT -20
^^WHAT	D\\IRECTS THE SPOOLER TO OUTPUT ITS PRESENT
STATUS TO THE OPERATOR'S CONSOLE.
.SKIP 4
.LEFT MARGIN 0
------------------------------------------------------------
.LEFT MARGIN 5
.SKIP 2
^^EXAMPLES:\\
.SKIP 2
.NOFILL
_!^^L-WHAT
_!13:38:53(L)
.LEFT MARGIN 5
JOB: TOPT10,SEQ: 2496,NAME: A FRANTZ,PPN: [10,504],
FILE:MONI0:TOPT10.MAP[10,504],LIMIT: 20,LEFT:20,DISP: 1
.BREAK
ARROW MODE
.SKIP 2
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.FILL
.BLANK 1
.LEFT MARGIN 9
.INDENT -4
1.##^DATA IS ONLY PRINTED IF NON-STANDARD AND
NON-ZERO.  ^^COPIES\\ IS NOT PRINTED IF ONLY
1 COPY IS REQUESTED.
.SKIP 1
.INDENT -4
2.##^LIMIT IS IN PROPER UNITS (PAGES, FEET, CARDS)
.SKIP 1
.INDENT -4
3.##^LEFT IS LIMIT LESS AMOUNT PRINTED.
.INDEX ^^WHAT\\ FOR ^SPOOLERS
.PAGE
.LEFT MARGIN 5
.;ZZZ
.INDENT 52
^Z^Z^Z
.BLANK 3
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
^^ZZZ\\ N	^SETS THE SPOOLER SLEEP INTERVAL TO "N"
DECIMAL SECONDS.
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
_!^Z 5
_!
.SKIP 2
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.BLANK 1
1.##^Z 0 SETS THE DEFAULT VALUE FOR THE DEVICE.
.INDEX ^^ZZZ\\ FOR ^SPOOLERS
.SUBTITLE ^^LPTSPL D\\EPENDENT ^COMMANDS
.PAGE
.INDENT 29
^DEVICE ^DEPENDENT ^COMMANDS
.SKIP 2
^^5.2##L\\INE ^PRINTER ^COMMANDS
.SKIP 2
.;SUPPRESS
.INDENT 46
^^SUPPRESS\\
.SKIP 3
.TAB STOPS 25
^^SUPPRESS	S\\INGLE SPACE THE ^L^P^T OUTPUT.
.SKIP 4
.INDENT -5
------------------------------------------------------------
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
_!^^SUP /JOB\\
_!
.SKIP 2
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.SKIP 1
.LEFT MARGIN 9
.FILL
.INDENT -4
1.##^THE FOLLOWING SWITCHES MAY BE USED AS ARGUMENTS
AFTER THE ^^"SUPPRESS"\\ COMMAND.
.SKIP 1
.LEFT MARGIN 13
.INDENT -4
A.##^^/FILE##"SUPPRESS"\\ HAS EFFECT FOR THIS FILE
FILE ONLY.
.SKIP 1
.INDENT -4
B.##^^/JOB\\###^^"SUPPRESS"\\ HAS EFFECT FOR THE
WHOLE JOB.
.SKIP 1
.INDENT -4
C.##^^/OFF###"SUPPRESS"\\ IS TURNED OFF.
.SKIP 1
.LEFT MARGIN 9
.INDENT -4
2.##^^SUPPRESS\\ MAY BE REQUESTED BY USER AND THE OPERATOR
SHOULD ONLY TURN IT OFF IF HE TURNED IT ON.
.SKIP 1
.INDENT -4
3.##^TYPE ^^"WHAT"\\ TO SEE IF ^^SUPPRESS\\ IS ON OR OFF.
.INDEX ^^SUPPRESS\\
.INDEX ^^/FILE\\
.INDEX ^^/JOB\\
.INDEX ^^/OFF\\
.INDEX ^^WHAT\\
.PAGE
.LEFT MARGIN 5
.;ALIGN
.INDENT 49
^^ALIGN\\
.SKIP 3
.TAB STOPS 25
.LEFT MARGIN 25
.INDENT -20
^^ALIGN\\ FILESPEC	^TYPE THE SPECIFIED FILE ON THE ^L^P^T.
^AT END OF FILE, REPEAT OUTPUT UNTIL
THE OPERATOR INTERVENES WITH ^^"STOP"\\.
.SKIP 4
.LEFT MARGIN 5
.INDENT -5
------------------------------------------------------------
.SKIP 2
.NOFILL
^^EXAMPLES:\\
.SKIP 2
.TAB STOPS 11
*^^ALIGN DSK:WIDE[40,31]
*STOP
*\\
.SKIP 2
.INDENT -5
------------------------------------------------------------
.SKIP 2
^^NOTES:\\
.SKIP 1
.LEFT MARGIN 9
.FILL
.INDENT -4
1.##^THE DEFAULT FILE SPEC IS ^^SYS:.ALP\\
.SKIP 1
.INDENT -4
2.##^ALIGN MAY BE TYPED ANYTIME A "*" HAS
BEEN OUTPUT TO THE OPERATOR'S CONSOLE.
.INDEX ^^ALIGN\\
.SUBTITLE ^OUTPUT ^FORMATS
.LEFT MARGIN 5
.PAGE
.INDENT 40
^OUTPUT ^FORMATS
.SKIP 2
^^5.3##L\\INE ^PRINTER ^OUTPUT ^FORMAT
.SKIP 4
.FILL
.JUSTIFY
.PARAGRAPH
^EACH JOB HAS BOTH A LEADER AND A TRAILER.  ^THESE
RECORDS CONSIST OF SEVERAL (INSTALLATION PARAMETER) LINES
CONTAINING THE FOLLOWING INFORMATION:
.SKIP 2
.NOFILL
.NOJUSTIFY
.LEFT MARGIN 10
^TYPE OF ^HEADER
^USER ^NAME
^USER ^PPN
^JOB ^NAME
^DATE AND ^TIME THE ^REQUEST WAS MADE
^DATE AND ^TIME THE ^FILE WAS CREATED
^MONITOR ^NAME
.SKIP 1
.LEFT MARGIN 5
.FILL
.JUSTIFY
^FOR EACH FILE IN THE JOB, THERE IS A BLOCK LETTER FILENAME.
.SKIP 2
.FILL
.JUSTIFY
^THE LEADER AND TRAILER WILL LOOK DIFFERENT TO FACILITATE
HANDLING OF LISTINGS.
.SKIP 2
.PARAGRAPH
^A FILE THAT HAS BEEN TERMINATED WITH A "^^REQUEUE"\\ COMMAND WILL
HAVE A TRAILER WHICH INDICATES THAT THERE IS MORE TO COME.
^WHEN THE JOB IS RESTARTED, THE SPOOLER WILL GENERATE A LEADER
INDICATING THAT THE OUTPUT FOLLOWING IS THE NEXT PART OF THE FILE.
.INDEX ^OUTPUT ^FORMATS
.INDEX ^^LPTSPL O\\UTPUT
.INDEX ^^REQUEUE\\
.PAGE
.SKIP 2
^^5.4##P\\APER ^TAPE ^PUNCH ^OUTPUT ^FORMAT

.SKIP 4
.PARAGRAPH
^THE PAPER TAPE OUTPUT WILL HAVE THE PROGRAMMER'S NAME AND
THE FILENAME.EXT PUNCHED IN BLOCK LETTERS FOLLOWED BY 10 SETS
OF TEN 177'S AND TEN 000'S AND THEN ABOUT 50 BLANK FRAMES
BEFORE THE FILE. ^IT WILL END WITH THE STRING
^^"*END*\\ OF FILE.EXT" PRECEDED BY
THE END OF FILE MARK.
.INDEX ^PAPER-^TAPE-^PUNCH ^OUTPUT
.PAGE
.SKIP 2
^^5.5##C\\ARD ^PUNCH ^OUTPUT ^FORMAT
.SKIP 4
.PARAGRAPH
^THE LEADER CARD WILL BE PRECEEDED BY FIVE (5) PICTURE CARDS
WITH THE ^JOB NAME AND COLUMNS 1,2,79, AND 80 FULLY LACED.
^THE LEADER CARD WILL CONTAIN THE SAME INFORMATION AS THE
^^LPT\\ LEADER.  ^THE TRAILER CONSISTS OF "^^*END*"\\ AND
THE SAME INFORMATION AS THE ^^LPT\\ TRAILER.
.INDEX ^CARD ^PUNCH ^OUTPUT
.PAGE
.SKIP 2
^^5.6##P\\LOTTER ^OUTPUT ^FORMAT
.SKIP 4
.PARAGRAPH
^THERE ARE NO LEADERS OR TRAILERS FOR THIS DEVICE.
.INDEX ^PLOTTER ^OUTPUT
.SUBTITLE ^^SPOOLERS\\
.PAGE
.FILL
.JUSTIFY
.LEFT MARGIN 5
.BLANK 3
5.7##^SPOOLER ^ERROR ^MESSAGES
.INDEX ^^SPOOLER\\ ^ERROR ^MESSAGES
.BLANK 2
^THE MESSAGES LISTED BELOW ARE TYPED BY THE SPOOLERS WHEN AN ERROR
IS DETECTED.
.BLANK 3
5.7.1##^RECOVERABLE ^ERROR ^MESSAGES#-#^THE ERRORS DESCRIBED
BELOW CAN NORMALLY BE CORRECTED BY THE OPERATOR.
.BLANK 1
?^^BAD DECIMAL NUMBER\\
.BREAK
^THE ARGUMENT FOR THE ^^ZZZ\\ COMMAND WAS NOT A DECIMAL NUMBER. ^RETYPE
THE COMMAND WITH A LEGAL ARGUMENT.
.BLANK 1
?^^BAD FILE SYNTAX NEAR\\ FILENAME
.BREAK
^THE FILE SPECIFICATION WAS INVALID BECAUSE AN UNEXPECTED CHARACTER
WAS DETECTED. ^RETYPE THE
COMMAND WITH THE CORRECT FILE SPECIFICATION.
.BLANK 1
?^^BAD SWITCH\\
.BREAK
^THE SWITCH USED IN THE PREVIOUS COMMAND WAS EITHER ILLEGAL OR NOT IN THE
PROPER FORMAT. ^RETYPE THE COMMAND WITH THE CORRECT SWITCH.
.BLANK 1
?^^DEVICE DOES NOT EXIST\\
.BREAK
^REFERENCE WAS MADE TO A DEVICE THAT THE SPOOLERS DO NOT RECOGNIZE.
^USE A DEVICE THAT IS KNOWN TO THE SPOOLERS.
.BLANK 1
?^^DEVICE IS BUSY--WAITING\\
.BREAK
^THE JOB CANNOT BE SPOOLED TO THE REQUESTED DEVICE BECAUSE THE DEVICE
IS BEING USED.
.BLANK 1
%^^DEVICE\\ XXX ^^IS NOT READY\\
.BREAK
^AN OUTPUT DEVICE HAS GONE OFF-LINE. EITHER
PUT THE DEVICE ON-LINE OR USE ANOTHER DEVICE.
.BLANK 1
^^MOUNT TYPE\\ FORM-TYPE ^^FORMS THEN TYPE GO\\
.BREAK
^THIS MESSAGE IS THE RESPONSE TO A /^^FORMS\\ SWITCH IN A ^^QUEUE\\
COMMAND. ^MOUNT THE SPECIFIED FORMS IN THE LINE-PRINTER
AND TYPE ^^GO\\.
.BLANK 1
?^^NO FILES ACTIVE\\
.BREAK
^THE SPOOLER RESPONDS WITH THIS MESSAGE IF ^^WHAT, TELL, \O\R KILL\\ COMMANDS
ARE TYPED WHEN NO JOBS ARE RUNNING.
.BLANK 1
?^^NUMBER CANNOT BE ZERO\\
.BREAK
^THE PROJECT-PROGRAMMER NUMBER WAS SPECIFIED AS 0. ^RETYPE THE COMMAND
WITH THE CORRECT PROJECT-PROGRAMMER NUMBER.
.BLANK 1
?^^OUTPUT FORMS LIMIT EXCEEDED FOR FILE\\ FILENAME
.BREAK
^THE FORMS LIMIT  WAS EXCEEDED FOR THE SPECIFIED FILE.
^THE /^^PAGES\\ SWITCH IN THE ^^QUEUE\\ COMMAND SHOULD BE USED TO OVERRIDE THE
DEFAULT LIMIT.
.BLANK 1
?^^PLEASE TYPE STOP OR PAUSE\\
.BREAK
^A ^^START\\ COMMAND WAS TYPED WHILE A JOB WAS ACTIVE. ^EITHER
TYPE ^^STOP\\ OR ^^PAUSE\\ TO END THE ACTIVE JOB OR WAIT UNTIL THE
JOB HAS FINISHED.
.BLANK 1
?^^SPOOL IS NOT STARTED\\
.BREAK
^A COMMAND THAT REQUIRED THE SPOOLER TO BE RUNNING
 WAS TYPED TO A SPOOLER THAT HAS NOT BEEN STARTED. ^START
THE SPOOLER BEFORE TYPING ANY COMMANDS.
.BLANK 1
?^^SPOOLER IS IDLE\\
.BREAK
^IN ANSWER TO THE REQUEST ON THE STATUS OF THE SPOOLER, THIS MESSAGE
IS TYPED.
.BLANK 1
?^^TYPE A RESET FIRST\\
.BREAK
^A ^^START\\ COMMAND WAS TYPED TO A SPOOLER THAT HAD BEEN STARTED. ^TYPE
^^RESET\\ TO STOP THE SPOOLER, THEN RETYPE THE COMMAND.
.BLANK 1
?ARGUMENT ^^IS INVALID 0 USED\\
.BREAK
^AN INVALID ARGUMENT WAS SPECIFIED FOR A COMMAND REQUIRING A NUMERIC
ARGUMENT. ^THE SPOOLER USES AN ARGUMENT OF 0 AND CONTINUES.
.BLANK 1
?COMMAND ^^IS AN UNKNOWN COMMAND\\
.BREAK
^AN UNRECOGNIZABLE COMMAND WAS TYPED TO THE SPOOLER. ^CHECK THAT
THE COMMAND IS VALID FOR THE SPOOLER OR THAT THE COMMAND WAS SPELLED
CORRECTLY. ^TYPE THE CORRECT COMMAND.
.BLANK 3
5.7.2##^ADVISORY ^MESSAGES#-#^THE FOLLOWING MESSAGES ARE TO INFORM THE
OPERATOR THAT AN ERROR OCCUREED. ^THE OPERATOR CANNOT TAKE CORRECTIVE
ACTION.
.BLANK 1
?^^CAN'T CREATE FILE\\
.BREAK
^THE SPOOLER CANNOT WRITE ON THE OUTPUT DEVICE.
.BLANK 1
?^^CAN'T FIND THAT FILE\\
.BREAK
^THE SPOOLER IS UNABLE TO ^^LOOKUP\\ THE FILE.
.BLANK 1
?^^CAN'T INIT\\ DEVICE
.BREAK
^THE SPOOLER IS UNABLE TO ^^INIT\\ THE DEVICE REQUESTED.
.BLANK 1
?^^CAN'T INIT STR FOR\\ NAME/DIRECTORY
.BREAK
^THERE WAS AN ^^OPEN\\ FAILURE ON THE SPECIFIED DEVICE.
.BLANK 1
?^^CODE TO LARGE IN\\ FILENAME ^^FEATURE NOT IMPLEMENTED\\
.BREAK
^THE OUTPUT FORMAT SPECIFIED HAS NOT YET BEEN IMPLEMENTED.
.BLANK 1
?^^DISK INPUT DATA READ I/O ERROR (\N), RECOVERY ATTEMPTED\\
.BREAK
^THERE WAS AN ERROR ON THE DISK WHEN THE SPOOLER ATTEMPTED TO
READ THE FILE; N IS THE FILE STATUS.
.BLANK 1
?^^DISK QUOTA EXCEEDED FOR FILE\\ STRUCTURE/FILENAME
.BREAK
^AN ^^ENTER\\ ERROR OCCURRED BECAUSE THERE WAS NO ROOM FOR THE FILE.
.BLANK 1
?^^DSK IS A LOGICAL NAME\\
.BREAK
^^DSK\\ SHOULD NOT BE USED AS A LOGICAL NAME.
.BLANK 1
^^FILE\\ STRUCTURE/FILENAME ^^PROTECTED AND WILL NOT BE DELETED\\
.BREAK
^THE ^^QUEUE\\ COMMAND SPECIFIED THAT THE FILE SHOULD BE DELETED AFTER
SPOOLING, HOWEVER THE FILE IS PROTECTED AND CANNOT BE DELETED.
.BLANK 1
?^^INVALID DIRECTORY\\
.BREAK
^THE PROJECT-PROGRAMMER NUMBER USED ON THE JOB WAS INVALID.
.BLANK 1
?^^I/O ERROR ON OUTPUT DEVICE#-#STATUS:\\NN
.BREAK
^THERE WAS AN ERROR ON OUTPUT TO THE SPECIFIED DEVICE. ^AN ERROR
CODE IS SPECIFIED BY NN.
.BLANK 1
?^^I/O ERROR ON UFD OR RIB OF\\ STRUCTURE/FILENAME
.BREAK
^AN ^^I/O\\ ERROR OCCURRED ON THE OVERHEAD BLOCK OF THE NAMED FILE
STRUCTURE.
.BLANK 1
?^^I/O ERROR WRITING LOG FILE - STATUS:\\NN
.BREAK
^AN ^^I/O\\ ERROR OCCURRED WHEN THE LOG FILE WAS BEING WRITTEN; NN
INDICATES AN ERROR CODE.
.BLANK 1
?^^LEVEL D VERSION WILL NOT RUN UNDER LEVEL C\\
.BLANK 1
[^^LPT IS NOT A LOGICAL NAME FOR A LINE PRINTER\\]
.BREAK
^^LPT\\ WAS ASSIGNED AS THE LOGICAL NAME FOR A DEVICE OTHER THAN THE 
LINE PRINTER. ^THIS IS ONLY A WARNING THAT THE DEFAULTS FOR THE
^^START\\ COMMAND MAY CAUSE UNEXPECTED RESULTS.
.BLANK 1
?^^NOT ENOUGH CORE TO READ QUEUE REQUEST\\
.BREAK
^THE SPOOLER WAS UNABLE TO EXPAND CORE.
.BLANK 1
[^^PTP IS NOT A LOGICAL NAME FOR A PAPER TAPE PUNCH\\]
.BREAK
^^PTP\\ WAS ASSIGNED AS THE LOGICAL NAME OF A DEVICE OTHER
THAN THE PAPER-TAPE PUNCH.
.BLANK 1
?^^REQUEST ABORTED BECAUSE OF I/O ERROR\\
.BREAK
^EITHER AN ERROR IN THE DATA OR A DEVICE ERROR WAS DETECTED.
.BLANK 1
?^^SYSTEM FAILURE FOR\\ FILENAME/DIRECTORY
.BREAK
^THE DIRECTORY FOR THE SPECIFIED FILE COULD NOT BE READ.
.BLANK 1
?^^WRITE LOCK ERROR FOR FILE\\ STRUCTURE/FILENAME
.BREAK
^A WRITE LOCK ERROR OCCURRED ON THE FILE STRUCURE CONTAINING THE
SPECIFIED FILE.
.BLANK 1
%<DEVICE> ^^IS BEING SPOOLED\\
.BREAK
^AN ATTEMPT WAS MADE TO ^^ASSIGN\\ A DEVICE THAT IS BEING SPOOLED.
.BLANK 1
%<DEVICE> ^^IS A LOGICAL NAME\\
.BREAK
^THE LOGICAL NAME SPECIFIES A DIFFERENT TYPE OF DEVICE THAN
THE GENERIC NAME SPECIFIES.
.BLANK 1
?FILENAME/DIRECTORY ^^FILE BEING MODIFIED\\
.BREAK
^THE SPECIFIED FILE CANNOT BE READ OR WRITTEN BECAUSE IT IS CURRENTLY
BEING MODIFIED.
.BLANK 1
?FILENAME/DIRECTORY ^^FILE PROTECTED\\
.BREAK
^THE SPECIFIED FILE CANNOT BE READ OR WRITTEN BECAUSE OF ITS PROTECTION.
.BLANK 1
?FILE/DIRECTORY ^^NO FREE CORE IN MONITOR\\
.BREAK
^THE SPECIFIED FILE REQUIRED ADDITIONAL CORE, BUT NONE WAS AVAILABLE.
.BLANK 1
?FILENAME/DIRECTORY ^^NO UFD ON THAT FILE STRUCTURE\\
.BREAK
^THE DIRECTORY FOR THE SPECIFIED FILE CANNOT BE FOUND ON THE SPECIFIED
FILE STRUCTURE.
.BLANK 1
?FILENAME/DIRECTORY ^^FILE NOT FOUND\\
.BREAK
^THE SPECIFIED FILE COULD NOT BE FOUND, PERHAPS BECAUSE NO BLOCKS
WERE FREE, THERE IS NO SUCH DEVICE, OR AN ILLEGAL SEQUENCE OF ^^UUO\\'S
OCCURRED.


.LEFT MARGIN 0
.SUBTITLE ^INDEX
.PAGE
.PRINT INDEX
 @CaZ