TITLE   RPSPRM - GARY GERE
SUBTTL  RPS PRIMATIVE ROUTINES

; BIT ASSIGNMENTS
DEFINE BITA(A)<IRP A<BIT'A=BITB
BITB=BITB_-1>>
BITB==400000000000
        BITA<0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35>

;AC ASSIGNMENTS
R0==0
R1==1   ;SIMPL ARGUMENT RETURN REGISTER
R2==2
R3==3
R4==4
R5==5
R6==6
R7==7
R10==10
R11==11
R12==12
R13==13
R14==14
R15==15
R16==16
R17==17 ;JSP/JRST REGISTER

IFE 0,<
; THESE DEF'S FOR TESTING PROGRAM
OPDEF CRERMT [SKIPA [5]]
OPDEF IDLRMT [SKIPA]
OPDEF VALRMT [SKIPA]
OPDEF ZAPRMT [SKIPA]
>

; THIS MACRO IS USED TO SET THE GLOBAL ERROR FLAG 'GERFLG'
; IT CHEATS AND CHEATS BUT I THINK YOU CAN FIGURE IT OUT
DEFINE ERROR(NUM) <
        MOVEM   R0,SVNM#        ;SAVE R0
        MOVE    R0,[NUM]        ;RO HAS NUMBER
        MOVEM   R0,GERFLG       ;SET GLOBAL ERROR FLAG
        MOVE    R0,SVNM         ;RESTORE NUMBER
>

        EXTERNAL        JOBFF,JOBJDA,JOBHCU,GERFLG
        EXTERNAL        DEVCHAN,DEVNAME,OPENDEV,DEVNUM

; PROCEDURE: GETCHAN
; ARG:1 - THE UFI FOR THIS OPERATION
; ARG:2 - THE POINTER TO THE PASSWORD STRING
; ARG:3 - -1 IF INPUT, 1 IF OUTPUT
; THIS ROUTINE WILL SET DEVNAM(ARG:1) TO -1 AND DEVCHAN(ARG:1)
; TO THE CHANNEL FROM CRERMP
        ENTRY   GETCHAN

GETCHAN:MOVEM   R17,CHANT1#             ;SAVE R17
        SETOM   DEVCHAN(R1)             ;RESET DEVCHAN
        SETZM   RWE(R1)                 ;RESET ERROR CONDITION BRANCH
        JUMPG   R3,SETOUT               ;SET OUTPUT

; HERE TO SET UP FOR INPUT

        HRLZ    R5,000002               ;BIT 16: INPUT
        ADDI    R5,LPSTR                ;LAST PASSWORD STRING PUT HERE

; NOW SET UP PASSWORD STRING IN CORE, COPY FROM (R2)

        MOVE    R6,[POINT 7,LPSTR]      ;POINTER TO LPSTR
        ILDB    R7,R2                   ;GET CHARACTER
        JUMPE   R7,.+3                  ;JUMP TO CRERMT
        IDPB    R7,R6                   ;SAVE CHARACTER
        JRST    .-3                     ;LOOP - DE - LOOP
        IDPB    R7,R6                   ;SAVE E.O.LIT
        JRST    SETUP                   ;GET PORT

; HERE TO SET UP FOR OUTPUT

SETOUT: SETZ    R5,                     ;OUTPUT HAS NO BITS

; HERE TO GET CHANNEL [ WE HOPE ]

SETUP:  CRERMT  R5,                     ;GET CHANNEL

; HERE ON ERROR [NOSKIP]

        JRST    [SETZB R0,R1             ;FALSE RETURN
                SETZM DEVNAME(R1)
                SETZM DEVCHAN(R1)
                JRST @CHANT1]           ;RETURN

; HERE ON SUCCESS [SKIP]

        SETOM   DEVNAME(R1)             ;-1 SAYS WE HAVE A PORT
        HLRZM   R5,DEVNUM(R1)           ;SAVE 620 CPU NUMBER
        HRRZM   R5,DEVCHAN(R1)          ;SAVE CHANNEL NUMBER
        HLLZ    R6,[SIXBIT /RMT/]       ;PREPARE TO CREATE PORT NAME
        ADDI    R5,'0'                  ;CONVERT PORT TO NUMBER
        DPB     R5,[POINT 6,R6,<4*6>-1] ;POINTS TO 6-BIT BYTE 3
        MOVEM   R6,GETNAME(R1)          ;SAVE THIS CHANNEL'S NAME

; FIND FREE CHANNEL, R10 WILL HAVE IT
        JSP     R17,GETCHN              ;GET CHANNEL IN (R10)
        HRLM    R10,DEVCHAN(R1)         ;SAVE INIT CHANNEL

;TRY AND OPEN THE DEVICE.

        MOVEM   R6,@%OPNDEV(R10)        ;SAVE DEV NAME IN PROPER BLOCK
        XCT     %OPEN(R10)              ;EXECUTE OPEN
        JRST    [OUTSTR [ASCIZ /
CANNOT INIT DEVICE RMT: ON FREE CHANNEL **SYSTEM ERROR** !!!
/]
                MOVE R10,DEVCHAN(R1)
                ZAPRMT R10,
                JRST .+1
                SETZB R0,R1
                SETZM DEVCHAN(R1)
                SETZM DEVNAME(R1)
                JRST @CHANT1]           ;RETURN !!!

; DEVICE IS OPENED ON CHANNEL ... RETURN
        SETOB   R0,R1                   ;TRUE [-1] RETURN
        JRST    @CHANT1                 ;RETURN * * *

        BLOCK   20
GETNAME:BLOCK   10                      ;BLOCK FOR TEMP NAME
LPSTR:  BLOCK   20                      ;ASCII NAME FOR PASSWORD

; BLOCKS FOR IO
DEFINE OPBLK(A)<IRP A<OPNB'A: EXP 14
OPNN'A: SIXBIT  /DEVICE/
        XWD     OBUF'A,IBUF'A>>

        OPBLK<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE OPNPTR(A)<IRP A<OPEN A,OPNB'A>>

%OPEN:  OPNPTR<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE RLBLK(A)<IRP A<RELEASE A,>>

%RELEASE: RLBLK<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE INI(A)<IRP A<IN A,>>

%IN:    INI<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE OUTO(A)<IRP A<OUT A,>>

%OUT:   OUTO<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE INBLK(A)<IRP A<INPUT A,>>

%INPUT: INBLK<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE OUTBLK(A)<IRP A<OUTPUT A,>>

%OUTPUT: OUTBLK<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE GETYLK(A)<IRP A<GETSTS A,R11>>

%GETSTS: GETYLK<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE OPNBLK(A)<IRP A<EXP OPNN'A>>

%OPNDEV: OPNBLK<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE OPBUFF(A)<IRP A<OBUF'A: BLOCK 3
IBUF'A: BLOCK 3>>

        OPBUFF<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE OPBPTR(A)<IRP A<EXP OBUF'A>>

%OBUF:  OPBPTR<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

DEFINE OPCPTR(A)<IRP A<EXP IBUF'A>>

%IBUF:  OPCPTR<0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17>

; PROCEDURE: GETCHN
; GET'S A CHANNEL NUMBER, R10 WILL HAVE IT
; FOR USE WHEN FINDING AN INIT CHANNEL
GETCHN: MOVEI   R10,1                   ;DON'T USE CHANNEL 1
        CAMLE   R10,JOBHCU              ;IS CHAN<=JOBHCU ?
        JRST    [CAILE  R10,17          ;<= 17 ?
                JRST [OUTSTR [ASCIZ /
NO FREE IO CHANNELS LEFT **SYSTEM ERROR**
CONTACT YOUR LOCAL TYMSHARE REPRESENTATIVE AND GIVE HIM
ALL OF YOUR TERMINAL OUTPUT FOR THIS SESSION.
/]
                     HALT]
                JRST @R17]              ;RETURN
        SKIPE   JOBJDA(R10)             ;SKIP IF CHANNEL OPEN
        AOJA    R10,.-3                 ;LOOP
        JRST    @R17                    ;GOT CHANNEL - RETURN

; PROCEDURE: VALCHAN
; ARG:1 - UFI FOR THIS PROCESS
; ARG:2 - STRING FOR PASSWORD
; ARG:3 - -1 FOR INPUT  1 FOR OUTPUT  VALIDATION
; THIS PROCEDURE WILL DO ALL OF THE GOOD THINGS THAT ARE EXPECTED
; OF IT AND IT WILL THEN RETURN TRUE [-1] IF VALIDATION
; WAS OKAY ELSE FALSE [0] IF IT WAS NOT OKAY
        ENTRY   VALCHAN
VALCHAN:MOVEM   R17,VALCT1#             ;SAVE RET LOC.
; LOOP ON TELEPONE CONNECTION ESTABLISHED BIT [BIT 24]
; IF TELEPHONE CONNECTION ESTABLISHED BIT SET OKAY
; IF ZAPPED BIT SET THEN FOO - BAR
        JUMPG   R3,VALOUT               ;VALIDTE OUTPUT PORT
        HLRZ    R10,DEVCHAN(R1)         ;GET CHANNEL
        XCT     %INPUT(R10)             ;DO INPUT ON THIS CHANNEL,HOPE.
; CHEK STATUS BIT
        XCT     %GETSTS(R10)            ;(R11) WILL HAVE STATUS BIT
        TRNE    R11,BIT18             ;NOSKIP IF PORT ZAPPED
        JRST    [SETZB R0,R1
                XCT %RELEASE(R10)       ;RELEASE CHAN IS STILL ACT.
                JRST @VALCT1]           ;NO SUCH LUCK
; NOW, BIT 22 SHOULD BE ON
; IF NOT, SAY SOMETHING
        TRNN    R11,BIT22             ;NOSKIP IF NO EOT RECEIVED
        JRST    [OUTSTR [ASCIZ /
PASSWORD CARD SHOULD BE FOLLOWED BY EOT CARD. GARBAGE OR MISSING
BLOCKS MAY APPEAR IN FIRST READ COMMAND.
/]
                JRST .+1]
        XCT     %OPEN(R10)              ;RE-OPEN THE DEVICE
        HALT
        MOVE    R5,GETNAME(R1)          ;SET FILE NAME IN DEVNAME 
        MOVEM   R5,DEVNAME(R1)          ;AS SO
        SETOB   R0,R1                   ;TRUE RETURN
        JRST    @VALCT1                 ;SUCCESSFUL RETURN * * *

; HERE TO VALIDATE OUTPUT PORT
VALOUT: MOVEI   R5,LPSTR
        HLL     R5,DEVCHAN(R1)          ;R5:== CHAN,,PSWR
        HLRZ    R10,DEVCHAN(R1)         ;(R10)=*CHANNEL
        MOVE    R6,[POINT 7,LPSTR]
        ILDB    R7,R2
        JUMPE   R7,.+3
        IDPB    R7,R6
        JRST    .-3
        IDPB    R7,R6                   ;STRING NOW COPIED.

; VALIDATE THE PORT

        VALRMT  R5,

; HERE ON ERROR RETURN

        JRST    [SETZB R0,R1
                XCT %RELEASE(R10)
                JRST @VALCT1]           ;RETURN

; HERE ON SUCCESSFUL RETURN

        XCT     %OPEN(R10)              ;RE-OPEN THE DEVICE
        HALT
        MOVE    R5,GETNAME(R1)
        MOVEM   R5,DEVNAME(R1)          ;SET NAME POINTER UP PROPER
        SETOB   R0,R1
        JRST    @VALCT1                 ;RETURN

; PROCEDURE: RPSRWE
; ARG:1 IS THE UFI
; ARG:2 IS THE LOCATION TO BRANCH TO ON E.O.F
; ON ANY ERROR, A JRST @RWE(UFI) WILL BE EXECUTED
        ENTRY   RPSRWE
RPSRWE: MOVEM   R17,RPSRT1#             ;SAVE R17
        MOVEM   R2,RWE(R1)              ; SAVE THE RETURN LOCATION
        JRST    @RPSRT1                 ; RETURN * * *

        BLOCK   20
RWE:    BLOCK   17                      ; HERE IS WHERE TO GO

; PROCEDURE: RRPS
; ARG:1 IS THE UFI
; RETURNS WITH AN 8-BIT CHARACTER FROM THE INDICATED CHANNEL
; E.O.F RETURNS THROUGH RPSRWE ROUTINE BRANCH
        ENTRY   RRPS
RRPS:   MOVEM   R17,RRPST1#             ;SAVE RETURN LOCATION
        HLRZ    R10,DEVCHAN(R1)         ;GET INIT CHANNEL
        MOVE    R2,%IBUF(R10)
        SOSG    2(R2)                   ;ANYTHING LEFT IN ME BUFFER?
        XCT     %IN(R10)                ;DO THE INPUT
        JRST    RRPS1                   ;OKAY - WE GOT THE INPUT
; SOME ERROR HAS OCCURED ON THE CHANNEL [620 MAYBE?]
        XCT     %GETSTS(R10)            ;GET STATUS OF I/O CHANNEL
        TRNE    R11,BIT24               ;NOSKIP IF ZAP PORT
        JRST    [OUTSTR [ASCIZ /
PORT ZAPPED... I-O STOPPED
/]
                SETZM DEVCHAN(R1)
                SETZM DEVNAME(R1)
                XCT %RELEASE(R10)       ;RELEASE THE DEVICE
                ERROR 100               ;ERROR 100
                JRST @RWE(R1)]          ;RETURN
        TRNE    R11,BIT19               ;NOSKIP IF 620 DOWN
        JRST    [OUTSTR [ASCIZ /
620 ERROR... I-O STOPPED, PORT ZAPPED
/]
                HRRZ R11,DEVCHAN(R1)
                ZAPRMT R11,
                JRST .+1
                SETZM DEVCHAN(R1)
                SETZM DEVNAME(R1)
                XCT %RELEASE(R10)
                ERROR 101               ;ERROR 101
                JRST @RWE(R1)]          ;RETURN
        TRNE    R11,BIT22               ;HOW ABOUT E.O.T FROM THE DEVICE ?
        JRST    [XCT %OPEN(R10)
                HALT
                HRRZ R10,DEVCHAN(R1)
                IDLRMT R10,             ;FORCE TO IDLE STATE
                JRST .+1
                ERROR 0                 ;ERROR 0 -- NO ERROR, E.O.F
                JRST @RWE(R1)]          ;RETURN
; AN UNEXPECTED ERROR HAS ENTERED OUR HUMBLE ABODE
; TELL THE LUSER OFF
        OUTSTR  [ASCIZ /
UNEXEPECTED ERROR... I-O STOPPED, PORT ZAPPED
/]
        HRRZ R11,DEVCHAN(R1)
        ZAPRMT  R11,
        JRST    .+1
        SETZM   DEVCHAN(R1)
        SETZM   DEVNAME(R1)
        ERROR   102                     ;ERROR 102
        JRST    @RWE(R1)                ;ZAP HE STRIKES AGAIN...

; WE SEEM TO HAVE DATA ... RETURN
RRPS1:  MOVE    R2,%IBUF(R10)
        ILDB    R1,1(R2)                ; GET THE CHARACTER IN RETURN REGISTER
        JRST    @RRPST1                 ;RETURN

; PROCEDURE: STROUT
; ARG:1 IS STRING LOC TO TYPE
; RETURNS ADDRESS OF STRING TYPES
        ENTRY   STROUT
STROUT: OUTSTR  (R1)                    ;TYPE STRING
        JRST    @17                     ;RETURN

; PROCEDURE: GETAPR
; RETURNS THE APR SERIAL NUMBER OF THE MACHINE WE ARE RUNNING ON
; AS VALUE
        ENTRY   GETAPR
GETAPR: MOVE    R1,[20,,10]             ;APR GETTAB
        GETTAB  R1,                     ;GET TABLE
        SETZ    R1,                     ;FAILED!! RETURN ZERO
        JRST    @17                     ;RETURN


; PROCEDURE: ZAPRPS
; ARG:1 IS THE UFI
; ZAP THAT PORT, RESET ALL POINTERS
        ENTRY   ZAPRPS
ZAPRPS: MOVEM   R17,ZAPRT1#             ;SAVE RETURN LOCATION
        SETZM OPENDEV(R1)               ;OPENDEV POINTS TO NOTHING
        HRRE    R11,DEVCHAN(R1)         ;(R11) = INIT CHANNEL OR -1
        HLRE    R10,DEVCHAN(R1)         ;(R10) = CHANNEL OR -1
        SKIPN   R11                     ;(R11)=-1 IF NOT INITED
        XCT     %RELEASE(R11)           ;RELEASE THE CHANNEL
        SKIPN   R10                     ;(R10)=-1 IF ACT DEV
        ZAPRMT  R10,                    ;ZAP THE CHANNEL
        JRST    .+1                     ;HERE FOR NO-OP
        SETZM   DEVNAME(R1)             ;RESET DEVICE NAME
        SETZM   DEVCHAN(R1)             ;RESET CHANNEL ALLOCATION
        JRST    @ZAPRT1                 ;RETURN

 END
 