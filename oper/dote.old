MODULE DOTE(DOLLAR,ENTRIES=($DGETR,$DGRIT),
        FSAVE,TIMING,TIMER=EXTERNAL(SIX12))=
BEGIN

REQUIRE DDEFS.BLI[7,107355];
REQUIRE DVDEFS.BLI[7,107355];
REQUIRE GDEFS.BLI[7,107355];
REQUIRE SDEFS.BLI[7,107355];
REQUIRE UDEFS.BLI[7,107355];

BIND QP3I = 1536;

MAP U$DYNARY DBASE$;
MAP G$ DGAM$;
MAP DL$ DLIST$;
MAP DR$ DREGS$;
MAP DF$I DFLAG$;
MAP U$DYNARY DPOOL$;
MAP U$DYNARY DEFER$;
MAP U$DYNARY DRACK$;
UNDECLARE $DGETR;

GLOBAL ROUTINE $DGETR(RIB,I)=
   BEGIN
   %GET A REPORT BLOCK TO REGISTER .I
   PARAMETERS ARE:
        RIB..POINTER TO SYMBOL TABLE ENTRY FOR RB
        I .. INDEX OF DEST DREGS$

   THIS CODE IS LIFTED MOSTLY FROM $DGRB AND $DARB

   /JS......................10/14/74
   %

   LOCAL RBD;
   MAP S$ RBD;
   MAP S$ RIB;

   %GET DEPORT DEFINITION%
   RBD _ $SGSTE(.RIB[S$RPDSTP]);

   IF .RBD[S$DBT] NEQ SV$LC THEN
        BEGIN
        %NOT ALLOCATED..SO ALLOCATE IT%
        RBD[S$DBT]_SV$LC;
        RBD[S$DB]_DBV$RBBASE;
        RBD[S$DFO]_.DBASE$[DBV$RBBASE];
        RBD[S$DAL]_1;
        $SFGCH(.RBD);
        DBASE$[DBV$RBBASE]_.DBASE$[DBV$RBBASE]+.DXRBSIZE$;
        DEFER$[.DXDFRCT$]_.RIB[S$STPX];
        DXDFRCT$_.DXDFRCT$+1;

        %CHECK FOR DEFER OVERFLOW HERE%

        END;

    DREGS$[DR$BASE  ,.I]_.RBD[S$DB];
    DREGS$[DR$OFFSET,.I]_.RBD[S$DFO];
    DREGS$[DR$DDTYPE,.I]_DDV$1WD;
    DREGS$[DR$STP1  ,.I]_.RBD[S$STP1];
    $SFRNCH(.RBD);

    END;


UNDECLARE $DGRIT;

GLOBAL ROUTINE $DGRIT(STP,RX,I)=
   BEGIN
   %GET REPORT ITEM TO A REGISTER
   (AND GENERATE THE CODE TO GET IT THERE)
   PARAMETERS ARE:
        STP .. SYMBOL TABLE POINTER TO A REPORT INCARNATION
        RX .. REPORT ITEM SUBFIELD FROM GAMMA CODE ITEM
        I .. INDEX OF DESTINATION REGISTER

   /JS..............10/14/74
   %

   LOCAL HOLD;
   LOCAL RIB;
   MAP S$ RIB;

   %GET REPORT BLOCK TO A REGISTER%
   RIB_$SGSTE(.STP);
   $DGETR(.RIB, 0); %RCB NOW RESIDES IN REGISTER 0%
   HOLD_.DFLAG$;
   DFLAG$_0;

   %NOW SET FLAG FOR WHICH ITEM%

   SELECT .RX OF NSET

GV$PAGENO:      DFLAG$[0,2]_1;
GV$PAGESIZ:     DFLAG$[0,3]_1;
GV$LINENO:     DFLAG$[0,4]_1;
GV$TOPMARG:    DFLAG$[0,5]_1;
GV$BOTMARG:    DFLAG$[0,6]_1;
GV$FOOTSIZ:    DFLAG$[0,7]_1;
GV$PAGEDIV:    DFLAG$[0,1]_1;
GV$TOP:        DFLAG$[0,#10]_1;
GV$HEADSIZ:      DFLAG$[0,#11];
        TESN;


   IF .DXFOUR$ EQL 0 THEN
        DXFOUR$_1
   ELSE 
        BEGIN
        DXFOUR$_0;
        DFLAG$[0,#17]_1;
        END;
   %NOW GENERATE THE LOAD%
   $DPCP(DTPV$GETRI);

   %NOW SET THE RESULT%
   DREGS$[DR$BASE,.I]_0; %BASELESS%
   DREGS$[DR$STP1,.I]_.RIB[S$STP1];
   IF .DXFOUR$ EQL 0 THEN
        DREGS$[DR$OFFSET,.I]_5
   ELSE
        DREGS$[DR$OFFSET,.I]_4;

   IF (.RX NEQ GV$PAGEDIV) AND (.RX NEQ GV$TOP) THEN
        BEGIN
        DREGS$[DR$QP,.I]_QP3I;
        DREGS$[DR$DDTYPE,.I]_DDV$1WD;
        DFLAG$_.HOLD;
        IF (.I EQL 1) OR (.I EQL 2) THEN
           DFLAG$[DFV$OPND,.I]_1;
        DREGS$[DR$STP1,.I]_.RIB[S$STP1];
        END
   ELSE
        BEGIN
        %A REPORT ITEM STRING..PAGE.DIVIDER OR @TOP%
        DREGS$[DR$QP,.I]_1; %NOT MUCH ELSE WE CAN DO%
        DREGS$[DR$DDTYPE,.I]_DDV$RIST;
        DFLAG$_.HOLD;
        END;

   $SFRNCH(.RIB);

   END;


%*******************%
END ELUDOM
