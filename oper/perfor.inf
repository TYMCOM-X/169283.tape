
PROPOSED METHOD FOR IMPLEMENTING 'PERFORM' ON THE TYMCOM-X
SYSTEMS USING THE PERFORM CHAINING METHOD.

I.      SYS:PERFOR

THE PROGRAM SYS:PERFOR WILL HAVE TWO ENTRY POINTS, (A) THE NORMAL ENTRY
POINT AS CALLED FROM THE EXECUTIVE 'PERFORM' COMMAND, AND (B) THE
RPG ENTRY POINT.

        ENTRY POINT A: CALLED FROM THE EXECUTIVE, PERFORM WILL REQUEST
'FILE NAME: ' AND WAIT FOR A PERFORM FILE NAME.  IT WILL THEN CREATE
TWO FILES, A='A##PER.TMP' B='B##PER.TMP'.  FILE A WILL CONTAIN A
COPY OF THE 'PERFORM FILE' AS GIVEN BY THE USER.  FILE B WILL CONTAIN
THE CURSOR POSITION (AS READ BY THE IOCS 'CP' FUNCTION) OF THE LAST
POSITION READ FROM FILE A. PERFORM WILL THEN GO TO ENTRY POINT B.

        ENTRY POINT B: CALLED FROM ANY PROGRAM REQUESTING PERFORM TO
EXECUTE THE NEXT PERFORM COMMAND.  IF FILES A AND B ARE NOT ON THE
DISK, PERFORM WILL EXIT TO THE EXECUTIVE.  THIS WILL HAPPEN
(A) IF PERFORM DELETE'S THEM, OR (B) IF PERFORM HAS NOT BEEN CALLED
PREVIOUSLY AND THUS THERE IS NO PERFORM FILE IN EXECUTION.

IF FILES A AND B ARE ON THE DISK, PERFORM WILL READ THE NEXT COMMAND
FROM FILE A STARTING AT THE CURSOR POSITION SPECIFIED IN FILE B
AND THE RESET FILE B TO READ CP(FILE A).  AND EOF FROM FILE A WILL
CAUSE PERFORM TO DELETE FILES A AND B AND EXIT TO THE EXECUTIVE.
OTHERWISE, PERFORM WILL EXECUTE THE COMMAND READ FROM FILE A.

II.     END CUSTOMER PROGRAM CHANGES

        FORTRAN AND COBOL PROGRAMS (FCP'S) WILL EXIT AS THEY NOW DO ON 
AN ERROR RETURN TO THE EXECUTIVE.  IF, HOWEVER, THE FCP WANTS TO 
CONTINUE THE PERFORM CHAIN OF COMMANDS, IT MUST CALL THE SUBROUTINE
'EXITPE' (WHICH WILL BE ADDED TO BOTH FORTRNA AND COBOL LIBRARYS).
THIS SUBROUTINE WILL DO THE SAME AS CALLING EXIT EXCEPT THAT INSTEAD
OF EXITING TO THE EXECUTIVE IT WILL DO A RUN UUO ON SYS:PERFOR AT
THE RPG STARTING ADDRESS.  THIS WILL OBVIOUSLY BE SLOW AND AS SUCH
ONLY THOSE PROGRAMS WHICH ARE EXPECTED TO BE CALLED BY PERFORM SHOULD
CALL EXITPE.

        ANY OTHER LANGUAGE (SIMPL, BASIC, MACRO, FAIL, BLISS, SAIL,
ALGOL, LISP, CAL, ETC.) MUST DO THEIR OWN RUN UUO ON SYS:PERFOR IF
THEY WISH TO CONTINUE THE PERFORM CHAIN OF COMMANDS.

III.    INTERNAL (TO TYMSHARE) PROGRAM CHANGES

        RPG WILL BE CHANGED TO ACCEPT A 'PERFORM' CALL SO THAT PERFORM
CAN GIVE COMMANDS TO RPG.  RPG WILL, WHEN CALLED BY PERFORM, PUT
'PERFOR!' ON THE LAST COMMAND FILE IT BUILDS SO THAT PERFORM
WILL BE CALLED.

        ALL PROGRAMS CALLABLE FROM RPG-TYPE COMMANDS WILL BE MODIFIED, 
IF NOT ALREADY SO, TO ACCEPT THE PROGRAM CHAINING SYNTAX OF 'PROGRAM!'
TO MEAN 'RUN SYS:PROGRAM'.
