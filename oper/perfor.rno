.PAPER SIZE 54, 71
.NUMBER 1
.SPACING 1

.BLANK
.PARAGRAPH 5
^THIS MEMO DETAILS THE CURRENTLY PROPOSED
METHODS FOR IMPLEMENTING THE NAVY'S "^^PERFORM\\" COMMAND
ON THE ^^TYMCOM-X\\ SYSTEMS.
.SKIP
.CENTER
^^METHOD 1: AUXILARY CIRCUITS\\
.PARAGRAPH 5
^THE SIMPLEST, AND BY FAR THE EASIEST TO IMPLEMENT, WOULD
BE TO USE AUXILARY CIRCUITS.  ^^PERFORM\\ WOULD 
OPEN AN AUXILARY CIRCUIT TO THE SAME MACHINE UNDER THE SAME
USER NAME AND COPY THE TEXT OF THE "^^PERFORM FILE\\"
OVER THE AUXILARY CIRCUIT (SOUNDS LIKE COMMANDS FILES,
DOESN'T IT?).
^SOMETHING SIMILAR TO ^^DEC\\'S "^^BATCH\\"
MIGHT BE IMPLEMENTED TO TELL ^^PERFORM\\
WHETHER OR NOT THE NEXT SERIES OF COMMANDS ARE GOING TO A
PROGRAM OR THE EXECUTIVE (SO ^^PERFORM\\ CAN SEND
APPROPRIATE ALT-MODE/ESCAPE/CONTROL-C'S ACROSS
THE CIRCUIT).
.PARAGRAPH 5
^GOOD POINTS: 
(A) THE "^^PERFORM\\" PROGRAM WILL BE SMALL
(AS FAR AS CORE IS CONCERNED), (B) NO OTHER PROGRAMS NEED BE
MODIFIED, (C) ^^ANY\\ INPUT WHICH IS VALID FROM THE TERMINAL
DURING A SESSION WOULD BE VALID IN A "^^PERFORM FILE\\", (D) EITHER
DIRECT TERMINAL OUTPUT OR "^^TOUT\\" FILES COULD BE AVAILABLE,
(E) IT WILL BILL A FORTUNE BECAUSE OF 'PLANNED' AUXILARY CIRCUIT
BILLING PROCEDURES, (F) SPEED OF IMPLEMENTATION,
(G) IT WILL KEEP THE CUSTOMER HAPPY,
(H) IT CAN BE DONE.
.PARAGRAPH 5
^BAD POINTS:
(A) ^AUXILARY CIRCUITS ARE COMING; HOWEVER, THE MONITOR MAY BE
AVAILABLE ONLY ON ^^KI-10\\ TYPE PROCESSOR MACHINES (WHICH SHOULD
BE NO PROBLEM SINCE ^^ALL\\ 10'S WILL BE ^^KI'\\S EVENTUALLY),
(B) IT USES A VERY VALUABLE AND LIMITED 
SYSTEM RESOURCE (SEE POINT (E) IN GOOD POINTS).
.SKIP
.CENTER
^^METHOD 2: PROGRAM KLUDGING (^^PERFORM\\)
.PARAGRAPH 5
^THE NEXT, AND PROBABLY ONE OF THE MOST DIFFICULT TO IMPLEMENT
BECAUSE IT REQUIRES BOTH THE USER AND ^^PERFORM\\ TO DO SPECIAL
THINGS, IS THE OLD AND FAMILIAR "^^PROGRAM KLUDGE\\" METHOD.
^IN THIS METHOD, ^^PERFORM\\ WOULD HAVE TWO ENTRY POINTS,
THE NORMAL "^^R\\" OR "^^RUN\\" COMMAND ENTRY POINT,
AND THE ^^RPG\\ ENTRY POINT.  IF ^^PERFORM\\ IS CALLED AT THE
NORMAL ENTRY POINT, IT WILL TAKE A "^^PERFORM FILE\\"
NAME, AND BUILD TWO TEMPORARY FILES ^A AND ^B.  ^TEMPORARY FILE ^A
CONTAINS THE TEXT OF THE ^^PERFORM FILE\\ AND TEMPORARY FILE ^B
CONTAINS THE CURSOR POSITION OF THE LAST POSITION READ
FROM FILE ^A.
^WHEN ^^PERFORM\\ IS CALLED AT THE ^^RPG\\
STARTING ADDRESS, IF TEMPORARY FILES A AND B ARE
PRESENT ON THE ^^DSK:\\ ^^PERFORM\\ WILL READ THE NEXT COMMAND
FROM FILE ^A AT THE POSITION STORED IN FILE ^B, UPDATING THE
POSITION IN FILE ^B AFTER THE COMMAND IS READ.  ^^EOF\\
WILL CAUSE ^^PERFORM\\ TO RETURN TO THE EXECUTIVE.
^ALL PROGRAMS WHICH ARE ^^RPG\\ CALLABLE WILL BE MODIFIED (IF NOT
ALREADY SO) TO ACCEPT THE COMMAND STRING "^^PROGRAM!"
WHICH MEANS "^^RUN PROGRAM \\PROGRAM^^ OUT OF SYS: WITH A STARTING
INCREMENT OF ONE"\\.
^THIS IS THE CURRENT ^^RPG\\ COMMAND STANDARD FOR PASSING
CONTROL FROM ONE PROGRAM TO ANOTHER.
^ALSO, ALL ^^RPG\\ CALLABLE PROGRAMS WILL EXIT TO THE MONITOR
UPON EOF FROM THE ^^TMPCOR\\ OR ^^DSK:\ FILE.
^USER PROGRAMS WHICH ARE RUN VIA ^R OR ^^RUN\\ MUST EITHER (A) IF
THEY ARE WRITTEN IN ^^FORTRAN\\ OR ^^COBOL\\
CALL THE SPECIAL EXIT ROUTINE "^^EXITP\\" (WHICH WILL BE INCLUDED
IN THE SYSTEM LIBRARY), OR (B) IF THEY ARE WRITTEN IN ^^SIMPL,
MACRO, BLISS, \\ETC. THEY MUST CHECK FOR THE 
TWO TEMPORARY FILES AND IF THEY ARE PRESENT MUST RUN ^^SYS:PERFOR\\
WITH A STARTING INCREMENT OF ONE.
^IN ADDITION, ALL PROGRAMS, UPON AN 'ERROR' EXIT, MUST DELETE THE
^^PERFORM\\ TEMPORARY FILES (SEE NOTE (D) UNDER BAD POINTS BELOW).
.PARAGRAPH 5
^GOOD POINTS: (A) IT DOES NOT USE A LIMITED SYSTEM RESOURCE,
(B) IT WILL COST LESS TO RUN, (C) IT WILL KEEP THE CUSTOMER
SATISFIED FOR A WHILE.
.PARAGRAPH 5
^BAD POINTS: (A) IT PLACES RESTRICTIONS ON WHAT CAN BE DONE
AND IT ALSO REQUIRES THE END USER TO DO SPECIAL THINGS
WITH ANY PROGRAM HE RUNS, (B) ANY PROGRAM NOT PREPARED TO RUN
UNDER ^^PERFORM\\ CONTROL WILL BREAK THE CHAIN-OF-COMMANDS
UPON EXIT, (C) 
REQUIRES CHANGING EXISTING PROGRAMS TO RUN WITH ^^PERFORM\\
(I.E.,^^ LISTER, DIRIT, RPG,\\ ETC), (D)
IF AN ALTMODE/ESCAPE/CONTROL-C IS TYPED DURING EXECUTION OF
A ^^PERFORM\\ CHAIN, THE TEMPORARY FILES ^A AND ^B WILL
STILL BE LEFT ON THE ^^DSK:\\ AND WHEN ANY PROGRAM IS RUN
WHICH HAS ^^PERFORM\\ HOOKS, THE ^^PERFORM\\ CHAIN
WILL BE RESTARTED WHEN THAT PROGRAM EXITS (I.E., THE PROGRAM
SEES THAT THE ^^PERFORM\\ TEMPORARY FILES ARE ON THE ^^DSK:\\
AND DECIDES ^^PERFORM\\ SHOULD BE CALLED), (E)
ALL COMPILERS MUST BE CHANGED TO HANDLE THE '^^RPG\\' STARTING
INCREMENT TRICK, OR, WHERE POSSIBLE, THE USER SHOULD HAVE,
AS THE FIRST PART OF THE PROGRAM, A SET OF INSTRUCTIONS WHICH
WILL EITHER IGNORE OR SET A FLAG FOR THE RPG STARTING TRICK, (F)
IT WILL RUN SLOW, (G)
^^PERFORM\\ WILL BE RELATIVELY LARGE (2-4K), (H)
SPEED OF IMPLEMENTATION, (I)
ONLY A LIMITED SET OF COMMANDS ARE ACCEPTABLE, (J)
ANY NEW COMMANDS WILL REQUIRE MODIFYING MORE PROGRAMS (UNLESS THEY
SATISFY ALL OF THE RULES FOR BEING ^^PERFORM\\ CALLABLE) AS
WELL AS MODIFYING ^^PERFORM\\.
.SKIP
.CENTER
^^METHOD 3: STAND-ALONE PROGRAM\\
.PARAGRAPH 5
^THIS SOLUTION IS APPLICABLE ONLY TOWARDS THE CASE WHICH
PROMPTED THE QUESTIONING OF THE POSSIBLE EXISTANCE OF
THE ^^PERFORM\\ VERB.
^IN THE NAVY'S CASE, THEY USE ^^PERFORM\\ INCORRECTLY
MOST OF THE TIME (I.E., ONE LINE ^^PERFORM\\ FILES WHICH DO
"EXECUTE" COMMANDS).  ^THE ONLY REAL ^^PERFORM\\ FILE
WHICH DID ANYTHING USEFUL WAS ONE WHICH SORTED A FILE SEVERAL TIMES
AND DID REPORTS IN BETWEEN SORTS.  ^THIS PARTICULAR CASE COULD
BE DONE FROM WITHIN A ^^COBOL\\ PROGRAM WITHOUT THE
NEED OF THE REPORT PROGRAM USED IN THE ^^PERFORM\\ COMMAND FILE.
^THE SORT AND REPORT GENERATION COULD HAVE BEEN DONE FROM
WITHIN ONE ^^COBOL\\ PROGRAM.  ^THIS SOLUTION IS UNIQUE FOR
EACH CASE.
.PARAGRAPH 5
^GOOD POINTS: IT'S THE BEST SOLUTION, BUT, AS USUAL
WITH BEST SOLUTIONS, NOT NECESSARILY THE MOST 
ECONOMICAL ONE.
.PARAGRAPH 5
^BAD POINTS: ^THE PROGRAMMER IS NEEDED FOR EACH NEW CASE
WHICH COMES UP. (SEE ALSO GOOD POINTS ABOVE).
