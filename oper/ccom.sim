!  CCS ROUTINES COMMON TO EDIT AND DEBUG MODES.
!  IOCSU AND PFU MUST PRECEDE.

!  MACHINE DEPENDENT MACROS

! IF INCREASE TOTAL DGMAX, MUST EXPAND PWR10 TABLE!
DEF I.DGMAX AS 5     !MAX NO. INTEGER & DECIMAL LINE KEY DIGITS (4 BITS
DEF D.DGMAX AS 3     !PER - MUST FIT IN WORD ALONG WITH SIGN BIT)
DEF LBL.DGMAX AS 5   !MAX NO. DIGITS IN FORTRAN LABEL

DEF LWUPDIF AS OCT 40     !LWR CASE CHAR MINUS UPR CASE OF SAME
DEF LESSTR(X,Y) AS (X) SHR 1 < (Y) SHR 1  !STRING COMPARISON
DEF ND.STR AS '[[[[['    !STRING LIT > WD OF ALPHA CHARS
DEF EOLITWD AS 0         !WORD OF EOLITS
DEF TABCH AS OCT 11      !HANDLED IN MACHINE DEPENDENT MANNER
DEF NSPCH(CHAR) AS ($ #CHAR#TABCH)
DEF SPCH(CHAR) AS NOT NSPCH(CHAR)


GLOBAL OPNERR:, CFNEOF:

GLOBAL %CCOM
GLOBAL %PRMPT, %NXNSP, %BACKSP, %OFFSET, CHRLST
DEF NXCHAR AS CHRLST _ NCHV LPTR
GLOBAL %GETSTR, %SETREC, %GETCOM
GLOBAL %OUTKEY, %PRMPTKEY, %WKEY, %PLNKEY, %OUTNUM
GLOBAL %WDSTOR, %CMDREC, %WDREC
GLOBAL %CERR, %CPERR, %ABERR, %EXERR, %LNGCHK, %CFNCLS, %PCMDL
GLOBAL FIXUP		!LABEL USED IN FIXUP AFTER ALT MODE OR
			!UNRECOVERABLE ERROR

GLOBAL %CSCAN.INIT, %FCR, %FFID, %FPWD, %FLOPT
GLOBAL %FRNG, %FADR, %FLST

GLOBAL %PRGCHK, %OKAY, %INLIST
GLOBAL %I.NXLNUM, %NXLNUM
GLOBAL %XLKLN, %BCD, %INTKEY
GLOBAL %ALPH

GLOBAL %UNPKTK, %LIST.EXU, %QUIT


!  MACHINE/IMPLEMENTATION DEPENDENT I/O DATA

GLOBAL FREEPTR                !PTR TO BEGINNING OF FREE BUFFER
GLOBAL IMGPTR

! USED IN COMMAND PROCESSING (NOT SAVED BETWEEN COMMANDS):

GLOBAL OUTFN
GLOBAL OUTCNT    !ORIGINALLY MAX NO. OF OUTPUT CHARS; DEC'D. SET TO
                !VERY LARGE NO. IF NO LIMIT
GLOBAL LPTR                   !INPUT LINE STRING POINTER
GLOBAL EL(4), ELID(4), ELP    !COMMAND LINE ELEMENTS, ELEMENT IDS
DEF SELLIM AS GLBSZ
GLOBAL SEL(-1:SELLIM)         !SUBELEMENTS (LINE LIST & RANGE)
DEF LTBL(X) AS SEL((X)-2)    !LINE LIST NOS. & COUNTS
GLOBAL SELP                   !SEL PTR
GLOBAL LSTCNT	!NO. LINES SPECIFIED IN LINE LIST
GLOBAL LSTOPT   !K.LIST OPTIONS
GLOBAL LNUM

!  PROMPT PARAMETERS

GLOBAL PRMNUM                 !PROMPT IDENTIFYING NO.
DEF K.PFE AS 1
DEF K.PAT AS (K.PFE+1)
DEF K.PLK AS (K.PAT+1)
DEF K.PQM AS (K.PLK+1)
DEF PRMCNT AS K.PQM
GLOBAL PRMKEY                 !LINE KEY TO PRINT IF PRMNUM=K.PLK

!  COMMAND WORDS

DEF K.BRK  AS 1
DEF K.CHK  AS 2
DEF K.CLR  AS 3
DEF K.CONT AS 4
DEF K.COPY AS 5
DEF K.DEB  AS 6
DEF K.DEL  AS 7
DEF K.DISP AS 8
DEF K.DO   AS 9
DEF K.DUMP AS 10
DEF K.EDIT AS 11
DEF K.ENT  AS 12
DEF K.GO   AS 13
DEF K.INIT AS 14
DEF K.LIST AS 15
DEF K.MOD  AS 16
DEF K.MOVE AS 17
DEF K.NEXT AS 18
DEF K.NO   AS 19
DEF K.OPEN AS 20
DEF K.OVLY AS 21
DEF K.PRNT AS 22
DEF K.QUIT AS 23
DEF K.REN  AS 24
DEF K.RUN  AS 25
DEF K.SRCH AS 26
DEF K.SET  AS 27
DEF K.TRC  AS 28
DEF CWDCNT AS K.TRC
DEF K.LINE AS 29
DEF K.NBRK AS 30
DEF K.NTRC AS 31
DEF K.LOPT(N) AS (K.NTRC+N)
DEF K.LBRK AS K.LOPT(1)
DEF K.LDEB AS K.LOPT(2)
DEF K.LIND AS (1 SHL 3)
DEF K.LSTA AS K.LOPT(4)
DEF K.LTRC AS K.LOPT(5)
DEF K.LUNN AS (1 SHL 6)
DEF K.LVER AS K.LOPT(7)
DEF LWDCNT AS 7
DEF CMDCNT AS K.LVER   !FOR CASE STATEMENT

GLOBAL TABLE CWD(CWDCNT+1)["BREAK","CHECK","CLEAR",&
  "CONTINUE","COPY","DEBUG","DELETE","DISPLAY","DO","DUMP","EDIT","ENTER","GO",&
  "INITIALIZE","LIST","MODIFY",&
  "MOVE","NEXT","NO","OPEN","OVERLAY","PRINT","QUIT","RENUMBER",&
  "RUN","SEARCH","SET","TRACE",ND.STR]

DEF CLMAX AS 10     !COMMAND WORD LENGTH MAX

! CMD ARRAY USED ONLY IN GENERATION OF COMMAND MODELS
! NULL ENTRIES: AFTER GETCOM, PF.CNUM WILL NEVER HAVE CORRESPONDING VALUE
GLOBAL TABLE CMD(CWDCNT+1:CMDCNT) ["","NO BREAK", "NO TRACE", "LIST BREAK",&
  "LIST DEBUG", "",  "LIST STATUS", "LIST TRACE", "", "LIST VERSION"]

GLOBAL TABLE LWD(LWDCNT+1) ["BREAK", "DEBUG", "INDENTED", "STATUS", "TRACE", &
  "UNNUMBERED", "VERSION", ND.STR]
DEF LLMAX AS 10

! IF LTYP(LWD INDEX)=0, LWD IS INFO TYPE ELSE IS LIST OPTION TYPE
GLOBAL TABLE LTYP(LWDCNT) [0, 0, 1, 0, 0, &
  1, 0]

! IF CMN(PF.CNUM)=0, EDIT STATE COMMAND
DEF DBIT AS 1   !DEBUG STATE
DEF CBIT AS 2   !EITHER STATE
DEF IBIT AS 4   !EITHER STATE BUT HANDLED INDEPENDENTLY BY EACH

! LINE UP CMN ENTRIES WITH CWD, CMD ENTRIES FOR EASE OF READING
GLOBAL TABLE CMN(CMDCNT) [DBIT, 0, 0, &
  DBIT, 0, DBIT, 0, DBIT, CBIT, 0, 0, 0, DBIT, &
  0, CBIT, 0, &
  0, DBIT, 0, 0, 0, DBIT, IBIT, 0, &
  0, 0, DBIT, DBIT, &
  0, DBIT, DBIT, DBIT, &
  DBIT, CBIT, CBIT, DBIT, &
  CBIT, CBIT]

! PREPOSITIONAL WORDS - NO EL.ID/EL ENTRY FOR THESE

DEF K.AS   AS 1
DEF K.FRM  AS 2
DEF K.TO   AS 3
DEF PWDCNT AS K.TO
GLOBAL TABLE PWD(PWDCNT+1)["AS","FROM","TO",ND.STR]
DEF PLMAX AS 4               !MAX LENGTH OF PREP WD

!  COMMAND LINE ELEMENT IDENTIFIERS

DEF FID.ID AS 1              !FILE IDENTIFIER INDEX
DEF LST.ID AS 2              !LINE LIST
DEF ADR.ID AS 3              !LINE ADDRESS
DEF RNG.ID AS 4              !LINE RANGE
DEF LKY.ID AS 5              !LINE KEY
DEF FOR.ID AS 6              !FORTRAN ELEMENT (STMT, LABEL, VAR)
DEF INT.ID AS 7              !POSITIVE INTEGER

!  ERROR MESSAGES TO USER OF CCS

GLOBAL TABLE LNLONG       ['LINE TOO LONG']
GLOBAL TABLE BDLRNG       ['ILLEGAL LINE RANGE']
GLOBAL TABLE NOCORE  ['NOT ENOUGH CORE']
GLOBAL TABLE NOTIMP       ['NOT IMPLEMENTED']

!FILE OPEN ERRORS
GLOBAL TABLE FILERR(IFDERR:FBSERR) ['ILLEGAL FILE IDENTIFIER', &
 '$NEW/OLD FILE MESSAGE NOT CONFIRMED', &
 'FILE NOT FOUND', 'INVALID USER NAME', &
 'PROTECTION VIOLATION ATTEMPT', 'FILE BUSY']


!  OF GENERAL INTEREST:

DEF UPALPH(X) AS ($A<=X<=$Z)
DEF LWALPH(X) AS ($A+LWUPDIF <= X <= $Z+LWUPDIF)
DEF XLWUP(X) AS X _ X-LWUPDIF   !TRANSFORM X FROM LWR TO UPR CASE
DEF NUM(X) AS ($0<=X<=$9)

DEF DGMAX AS (I.DGMAX+D.DGMAX) !MAX. TOTAL LINE KEY DIGITS
TABLE PWR10(0:DGMAX) [1,10,100,1000,10000,100000,1000000,10000000, &
   100000000]
DEF LKY.MAX AS (PWR10(DGMAX)-1)        !MAX. LINE KEY VALUE

DEF SGNBIT AS (1 ROTR 1)
DEF BIGNUM AS BNOT SGNBIT
DEF BPW AS BITS.PER.WORD
DEF BPC AS (BPW/CPW)

DEF YES AS 1
DEF NO  AS 0


FIND JOBVER

%CCOM (NCOM:)

DEF INWDSZ AS (CLMAX+CPW-1)/CPW
LOCAL INWD(0:INWDSZ-1)       !MUST HOLD CLMAX CHARS
LOCAL TABSP	!LINE INDENTATION FOR LISTING
LOCAL PTR, CNT, TEMP, I

TABLE BDCMND       ['NO SUCH COMMAND']
TABLE AMBGCM       ['AMBIGUOUS ABBREVIATION, TYPE MORE CHARACTERS']
TABLE LSTLNG       ['LINE LIST TOO LONG']
TABLE NOPROG       ['NO PROGRAM']

!  COMMAND MODELS

LOCAL CMDL(CMDCNT)
CMDL(K.LINE) _ '<LINE NUMBER> <STATEMENT>'
CMDL(K.ENT) _ '[ <LINE RANGE> ] [ FROM <FILE> ]'
CMDL(K.CLR) _ CMDL(K.QUIT) _ CMDL(K.CHK) _ CMDL(K.INIT) _ &
  CMDL(K.CONT) _ CMDL(K.DUMP) _ CMDL(K.LDEB) _ CMDL(K.LSTA) _ &
    CMDL(K.LVER) _ CMDL(K.RUN) _ ''
CMDL(K.DEB) _ CMDL(K.GO) _ '[ <LINE> ]'
CMDL(K.DO) _ CMDL(K.OPEN) _ '<FILE>'
CMDL(K.MOD) _ CMDL(K.EDIT) _ CMDL(K.DEL)_ CMDL(K.BRK) _ CMDL(K.TRC) _ &
  CMDL(K.OVLY) _ '<LINES>'
CMDL(K.NBRK) _ CMDL(K.NTRC) _ CMDL(K.LBRK) _ CMDL(K.LTRC) _ '[ <LINES> ]'
CMDL(K.LIST) _ '<INFO OPTION>$ OR: [ <LINES> ] [ <LIST OPTIONS> ] [ TO <FILE> ]'
CMDL(K.COPY) _ CMDL(K.MOVE) _ '<LINES> TO <LINE RANGE>'
CMDL(K.REN) _ '[ <LINE> [ :<LINE> ] ] [ AS <LINE RANGE> ]'
CMDL(K.DISP) _ CMDL(K.PRNT) _ '<VARIABLES>'
CMDL(K.SET) _ '<VARIABLE> = <VARIABLE OR CONSTANT> [ ;<ETC> ]'
CMDL(K.SRCH) _ '[ <FILES> ]'

LOCAL ALT:

FREEPTR _ CHPT(FREE,-1); IMGPTR _ CHPT(IMAGE,-1)
SETRWE(CFN,CFNEOF)
SETPRMPT(%PRMPT); TAB.OFF(%OFFSET)
ALTLOC _ ALT

RETURN

ALT:    OFFALT; CLOBUF; CLIBUF; PUT(CARRET)
        IF CFN#TEL THEN [MSG('ABORTED$'); CFNCLS]
        GO ^FIXUP

%PCMDL

MSG("$SHOULD BE:$"); PRINT(IF PF.CNUM<=CWDCNT THEN CWD(PF.CNUM) ELSE CMD(PF.CNUM))
PUT($ ); MSG(CMDL(PF.CNUM)); RETURN

END PCMDL


%GETCOM
! GET COMMAND LINE.  EXECUTE COMMANDS COMMON TO BOTH STATES OF CCS, ELSE:
!  SET PF.CNUM IF OK ELSE ERROR EXIT.

LOCAL %CSCAN, %CEXU
LOCAL SAVE
LOCAL ERRA:, CONT:

PRMNUM _ K.PFE
LOOP DO

LOOP[GETSTR(CFN); WHILE NXNSP =CARRET]
LSTOPT _ 0
BACKSP; IF NOT ALPH(CHRLST) THEN PF.CNUM _ K.LINE ELSE DO
  WDSTOR(CLMAX,ERRA); PF.CNUM _ CMDREC(CWD,ERRA); NXNSP; BACKSP
  EIF PF.CNUM = K.NO THEN DO
    IF NOT ALPH(CHRLST) THEN GO ERRA; WDSTOR(CLMAX,ERRA)
    EIF I _ CMDREC(CWD,ERRA)=K.BRK THEN PF.CNUM _ K.NBRK
    ORIF I=K.TRC THEN PF.CNUM _ K.NTRC
    ELSE GO ERRA
  END
  FIF PF.CNUM=K.LIST THEN PF.CNUM _ FLOPT(CONT)
END
CONT:	WHILE CMN(PF.CNUM) BAND CBIT; CSCAN; CEXU; INC PF.INTNO

END
RETURN

ERRA:  CERR(BDCMND)


%CSCAN

LOCAL %GETOPT
LOCAL EROUT:, CRCHK:, NXT:

	CSCAN.INIT
	DO PF.CNUM OF CMDCNT

K.DO:	FFID(OCT 435544.000000)   !.CMD

K.LSTA:  K.LVER:	  NULL

K.LIST:	IF NOT FLST THEN DO
	  IF FLOPT(NXT)#K.LIST THEN GO CRCHK
	END ELSE IF LSTOPT THEN CPERR(%PCMDL)  !LINES MUST BE 1ST
	GETOPT
NXT:	FPWD(K.TO,CRCHK); FFID(0)
	GETOPT

	END

CRCHK:	IF NOT FCR THEN CPERR(%PCMDL); RETURN


%GETOPT

WHILE FLOPT(RETURN)=K.LIST THEN NULL; CPERR(%PCMDL)

END GETOPT

END CSCAN


%CEXU

LOCAL INFN, ERR:

	DO PF.CNUM OF CMDCNT

K.LSTA:  CERR(NOTIMP)

K.DO:   OFFALT
	IF TELCHK THEN INFN _ TEL ELSE DO
	  LOOP DO
	    INFN _ OPEN(EL(1),INPUT+DIRECT+CHARACTER,ERR); WHILE 0
ERR:	    IF ERRNUM#FNFERR OR EXTQ(FIDP)=YES THEN GO OPNERR
	    EXTQ(FIDP) _ YES; EXTARG(FIDP) _ 0
	  END
	END
        CLOSE(CFN<==INFN); SETRWE(CFN,CFNEOF)

K.LIST:	LIST.EXU

K.LVER:	OUTNUM(HW(@JOBVER),8); PUT($.); OUTNUM(HW(@JOBVER,1),8); PUT(CARRET)
	END
	RETURN

END CEXU

END GETCOM


%GETSTR (FN)

LOCAL ERREC, INLA:

INLA:    ERREC _ INLA; RETURN LPTR _ GETLINE(FN)

%%SETREC

	ERREC _ NCOM; RETURN

CFNEOF:  OFFALT; LNGCHK; CFNCLS; FN _ TEL; ONALT.C; GO ^ERREC

%CPERR (%MSGPROC)

ONALT.C
CLIBUF; MSGPROC
GO BELOW

%%CERR (N)

!  FN IS LAST FILE GETSTR READ FROM.
!  HANDLES RECOVERABLE TEL INPUT ERRORS AND CFN INPUT ERRORS WHICH
!  DO NOT ABORT CFN INPUT IF FN  WAS INFN (EG, LOAD OR COPY).
!  IF FN WAS COMMAND FILE NOT TEL (EG, ENTER) ABORTS CFN INPUT AND
!  OMITS FIXUP.

         ONALT.C
         CLIBUF; MSG(N)
BELOW:   PUT(CARRET); IF FN=TEL THEN GO ^ERREC
         PRINT(FREE)
         IF FN#CFN THEN GO ^ERREC
         OFFALT; CFNCLS; GO NCOM

END CPERR


%EXERR (N)

LOCAL HERE:

!  HANDLES FATAL ERRORS THAT RESULT IN EXIT.

  OFFALT; FIXUP _ HERE

%%ABERR (N)

!  HANDLES UNRECOVERABLE ERRORS.  CFN INPUT ABORTED.
!  DOES SAME FIXUP AS ALT MODE.

       ONALT.C
       CLIBUF; MSG(N); PUT(CARRET); IF FN#TEL THEN PRINT(FREE)
       OFFALT; CFNCLS; GO ^FIXUP

!SAME AS QUIT COMMAND:
HERE:	PF.CLOSE; CLOSE.ALL; ONALT; EXIT

END EXERR

END GETSTR


%LNGCHK
IF ERRNUM=LNGERR THEN CERR(LNLONG); RETURN
END LNGCHK


%CFNCLS
CLOSE(CFN <== TEL); RETURN
END CFNCLS


%PRMPT

! PROMPTS AS SPECIFIED BY PRMNUM

         DO PRMNUM OF PRMCNT
K.PFE:     OUTFN _ TEL; OUTNUM(PF.INTNO,10); PUT($:)
K.PAT:     PUT($@)
K.PLK:     OUTFN _ TEL; PRMPTKEY
K.PQM:     PUT($?)
         END
	 PUT($ )
         RETURN

END PRMPT


%OFFSET
!  STATEMENT TAB ORIGIN MUST BE PAST LINE NO. ( & ENTER, IF ANY)

LOCAL PTR, OFF, CHAR

OFF _ 0
IF PRMNUM=K.PFE THEN DO
  PTR _ IMGPTR; WHILE SPCH(CHAR_NCHV PTR) OR ALPH(CHAR) THEN INC OFF
  IF CHAR=EOLIT OR (CHAR#$. AND NOT($0<=CHAR<=$9)) THEN RETURN 0; INC OFF
  WHILE $0<=CHAR _ NCHV PTR<=$9 OR CHAR=$. THEN INC OFF
  IF CHAR=EOLIT OR SPCH(CHAR) THEN INC OFF
END
RETURN OFF

END OFFSET


%NXNSP

! STORES IN CHRLST & RETURNS NEXT NON-BLANK

WHILE SPCH(NXCHAR) THEN NULL; RETURN CHRLST

END NXNSP


%BACKSP

PCHV LPTR; RETURN

END BACKSP


%WDSTOR (LMAX, LAB:)

!  NEXT CHAR IS ALPHABETIC.  STORES CHARS UP TO NEXT NON-ALPHA
!  IN INWD ARRAY; LPTR UPON RETURN IS BEFORE WD TERMINATOR.
!  GOES TO LAB IF NO. OF ALPHA CHARS EXCEEDS LMAX.
!  CONVERTS LOWER CASE ALPHA TO UPPER CASE.

       MOVE INWDSZ FROM ALL EOLITWD TO INWD
       PTR _ CHPT(INWD,CNT _ -1)
       WHILE INC CNT<=LMAX THEN DO
         IF NOT UPALPH(NXCHAR) THEN DO
           IF LWALPH(CHRLST) THEN XLWUP(CHRLST) ELSE [BACKSP; RETURN]
         END
         NCHV PTR _ CHRLST
       END
       GO LAB

END WDSTOR


%CMDREC (WD(), LAB:)

! WORD RECOGNITION

!  WORD IS AT ADDR INWD, NO. OF CHARS IS IN CNT.
!  IF RECOGNIZES WORD AS WD(I), RETURNS I.
!  ALLOWS SHORTEST UNIQUE ABBREVIATION.
!  GOES TO LAB IF NO MATCH.
!  IF COMMAND LOOKUP (CWD ARRAY), MAY BE AMBIGUITY, IN WHICH CASE
!  ERR EXIT IS TAKEN.

LOCAL %COMPARE
LOCAL W, SAVE, TEMP

       [W;CNT] _ CNT DIVMOD CPW
       PTR _ 0
       WHILE INWD(0) # ^WD(INC PTR) THEN DO
         IF LESSTR(INWD(0),^WD(PTR)) THEN GO NXT
       END
! INWD(0) <= ^WD(PTR)
NXT:   DO COMPARE OF -1:1
-1:      GO LAB                !<, NO MATCH
1:       INC PTR; GO NXT       !>, ONLY 1ST WD MATCH, CONTINUE
0:       SAVE _ PTR; INC PTR   !=, MATCH
         DO COMPARE OF -1:1    !AMBIGUITY CHECK
 -1: 1:    RETURN SAVE         !<, NO AMBIGUITY
  0:       CERR(AMBGCM)
         END
       END

%COMPARE

! COMPARES INWD TO COMMAND AT WD(PTR), UP TO END OF INWD.
! RETURNS -1, 0 OR 1, IF <, = OR >, RESPECTIVELY.

LOCAL J

       I _ TEMP _ -1
       WHILE INC I<W THEN DO
CA:      J _ ^(WD(PTR)+I) BAND TEMP
         IF INWD(I)#J THEN DO
           RETURN IF LESSTR(INWD(I),J) THEN -1 ELSE 1
         END
       END
       IF TEMP=-1 THEN [TEMP _ TEMP SHL (BPW-BPC*CNT); GO CA]
       RETURN 0

END COMPARE

END CMDREC


%WDREC (WD(), LAB:)

!  SIMILAR TO CMDREC BUT ALLOWS NO ABBREVIATION.

PTR _ 0
LOOP DO
  IF I _ ^WD(INC PTR) =^ND.STR THEN GO LAB
  WHILE INWD(0)#I
END
I _ 0
WHILE INC I <= (CNT-1)/CPW THEN DO  !REMAINING WDS OF STRING
  IF INWD(I)#^(WD(PTR)+I) THEN GO LAB
END
RETURN PTR

END WDREC


DEF ELW(X,Y) AS [EL(INC ELP)_(Y); EL.ID(ELP)_(X)]
LOCAL FIDP
LOCAL FIDTBL(0:2*WPF-1)


%CSCAN.INIT

MOVE 4 FROM ALL 0 TO ELID+1; SELP _ ELP _ 0
FIDP _ FIDTBL-WPF; RETURN

END CSCAN.INIT


%FCR

TEMP _ [NXNSP=CARRET]; BACKSP; RETURN TEMP

END FCR


%FFID (EXTDEF)

!  SCANS FOR FILE IDENTIFIER (FID) TERMINATED BY BLANK OR CR.
!  CALLED WHEN NO ALTERNATIVE TO FID, SO TAKES ERROR EXIT IF FAILS.
!  STORES FID INFO WITH SETFID; IF OK, STORES FID.ID & ARG TO BE 
!  USED IN OPEN CALL.

LOCAL EROUT:

         IF NXNSP=CARRET THEN CPERR(%PCMDL)
         BACKSP; SETFID(FIDP +_ WPF, @LPTR, EXTDEF, EROUT)
         ELW(FID.ID,-FIDP); RETURN

EROUT:   ABERR(FILERR(IFDERR))

END FFID


%FPWD (K.PWD,LAB:)

!  SCANS FOR PREP. WD SPECIFIED BY K.PWD (INCL. ABBREVIATIONS).
!  IF SUCCESSFUL, RETURNS K.PWD ELSE RESETS LPTR & GOES TO LAB.
!  SPECIAL CASE: IF K.PWD IS EOLIT, RETURNS INDEX TO PREP. WD FOUND;
!  IF WD IS NONE OF THE PREP. WDS, GOES TO LAB.

LOCAL OUT:

         TEMP _ LPTR
         IF NOT ALPH(NXNSP) THEN GO OUT
         BACKSP; WDSTOR(PLMAX,OUT)
         IF I _ WDREC(PWD,OUT)=KPWD OR KPWD=0 THEN RETURN I
OUT:     LPTR _ TEMP; GO LAB

END FPWD


%FLOPT (LAB:)

LOCAL X
LOCAL OUT:

	TEMP _ LPTR
	IF NOT ALPH(NXNSP) THEN GO OUT
	BACKSP; WDSTOR(LLMAX,OUT)
	IF LTYP(X _ CMDREC(LWD,OUT))=0 THEN PF.CNUM _ K.LOPT(X) ELSE LSTOPT BOR_ 1 SHL X
	RETURN PF.CNUM
OUT:	LPTR _ TEMP; GO LAB

END FLOPT


%FRNG

!  SCANS FOR CONSTRUCTION SPECIFIED AT ENTRY POINT.
!
!  RNG      LKEY:LKEY  OR  LKEY(LKEY)LKEY  OR  LKEY(LKEY)  OR  LKEY
!           (LKEY FORM IS 0 TO I.DGMAX DIGITS, OPTIONAL 0 TO D.DGMAX
!           DECIMAL DIGITS WITH >0 DIGITS IN ALL)
!  ADR      LKEY  OR  $  OR  .  OR  #INT  OR  ADR+INT  OR  ADR-INT
!  LST      ADR[:ADR],...,ADR[:ADR]  OR  ALL
!
!  IF SUCCESSFUL, STORES APPROPRIATE EL.ID AND, IN EL ARRAY,
!     ADR OF WD BEFORE 1ST WD OF SUBELEMENT LIST
!                    (SEE %FRL)
!
!  RETURNS 1, WITH LPTR BEFORE CONSTRUCTION TERMINATOR.
!  IF NOT SUCCESSFUL, RESETS LPTR AND RETURNS 0.
!
!  LOW-ORDER BITS OF LFGS REPRESENT STATES AS FOLLOWS:
!
!            RNG     ADR
!    LST      :       (
!  + OR -     $       )
!     #     DIGIT     .
!
!  THUS:

DEF DOTB  AS 1
DEF DGTB  AS (1 SHL 1)
DEF NUMB  AS (1 SHL 2)
DEF RGTB  AS (1 SHL 3)
DEF DLRB  AS (1 SHL 4)
DEF SGNB  AS (1 SHL 5)
DEF LFTB  AS (1 SHL 6)
DEF CLNB  AS (1 SHL 7)
DEF LSTB  AS (1 SHL 8)
DEF ADRB  AS (1 SHL 9)
DEF RNGB  AS (1 SHL 10)

LOCAL %FRL
LOCAL LFGS

         LFGS _ RNGB; I _ FRL
         ELW(IF PF.CNUM=K.LINE AND LFGS BAND (CLNB+RGTB)=0 THEN LKY.ID &
           ELSE RNG.ID, I)
         RETURN YES


%%FADR

         LFGS _ ADRB; ELW(ADR.ID,FRL); RETURN YES


%%FLST

         LFGS _ LSTB
         ELW(LST.ID,FRL); RETURN YES


LAB:    RETURN NO


%FRL

!    TERMINATES ON ANY SYMBOL NOT : ( + - $ ) # DIGIT .
!    STORES SUBELEMENTS IN SEL ARRAY (1 PER WD) & RETURNS ADR OF
!    WD BEFORE 1ST WD OF LIST.  SUBELEMENTS INCLUDE ANY SPECIAL
!    SYMBOL & (NEGATIVE OF) ANY NUMBER READ (LKEY STORED AS INTEGER).
!    LIST TERMINATED BY 0.
!    SPECIAL CASE FOR LSTB: 'ALL' INDICATES ALL LINES, RETURNS 0

LOCAL %SVNUM, %SELW
LOCAL LVAL, TEMP

! EXTRACTION OF TYPE BIT:
DEF TYPB AS (LFGS BAND (RNGB+ADRB+LSTB))

! CHECK FOR ILLEGAL STATES:
DEF NG(X) AS IF LFGS BAND (X) THEN GO OUT

DEF PARENS AS (LFTB+RGTB)

         TEMP _ LPTR
         IF NXNSP=CARRET THEN GO OUT
         PTR _ SELP
         CNT _ I.DGMAX; LVAL _ 0    !LVAL RESET IN SVNUM

       LOOP DO
         EIF NUM(CHRLST) THEN DO
           NG(DLRB)
           LVAL _ LVAL*10+CHRLST-$0
! DON'T DEC CNT IF LEADING INTEGER ZERO
           IF NOT(LVAL=0=LFGS BAND DOTB) THEN IF DEC CNT<0 THEN GO OUT
           LFGS BOR_ DGTB
         END

         ORIF CHRLST=$. THEN DO
           NG(SGNB+DLRB+NUMB+DOTB)
           LFGS BOR_ DOTB
           CNT _ D.DGMAX
         END

         ELSE DO
           EIF CHRLST=$: THEN DO
             NG(ADRB+CLNB+PARENS)
             SVNUM; LFGS _ TYPB BOR CLNB
           END

           ORIF CHRLST=$( THEN DO
             NG(ADRB+LSTB+CLNB+PARENS)
             SVNUM; LFGS _ TYPB BOR LFTB
           END

           ORIF CHRLST=$) THEN DO
             IF LFGS BAND PARENS#LFTB THEN GO OUT
             SVNUM; LFGS _ TYPB BOR RGTB
           END

           ORIF CHRLST=$+ OR CHRLST=$- THEN DO
             NG(RNGB+SGNB)
             SVNUM; LFGS _ TYPB BOR (LFGS BAND CBOR SGNB
           END

           ORIF CHRLST=$$ OR CHRLST=$# THEN DO
             NG(BNOT(ADRB+LSTB+CLNB))
             LFGS BOR_ IF CHRLST=$$ THEN DLRB ELSE NUMB
           END

           ORIF CHRLST=$, THEN DO
             NG(RNGB+ADRB) 
             SVNUM; LFGS _ TYPB
           END

           ELSE GO ENDCH

           SELW(CHRLST); CNT _ I.DGMAX

         END

         NXCHAR
       END

ENDCH:   IF LFGS BAND PARENS=LFTB THEN GO OUT
         SVNUM; SELW(0); BACKSP; RETURN @SEL(PTR)

OUT:     LPTR _ TEMP
        IF (LFGS<==0) BAND LSTB=0 THEN GO LAB
        NXNSP; BACKSP; WDSTOR(3,OUT)  !LEAVES LPTR BEFORE TERM
        IF INWD(0)=^'ALL' THEN RETURN 0; GO OUT


%SELW (X)

!  SUBELEMENT WRITE WITH OVERFLOW CHECK

IF INC SELP>SELLIM THEN CERR(LSTLNG)
SEL(SELP) _ X; RETURN

END SELW


%SVNUM

!  CALLED AT : ( ) + - , (BEFORE SETTING STATE BIT) AND AT
!  TERMINATOR, TO STORE NEGATIVE OF LKEY/INTEGER PRECEDING, IF ANY.  
!  %FRL ACCUMULATED NUMBER IN LVAL, WITH LKEY DOT IGNORED
!  AND NO. OF DIGITS PAST DOT = 3-CNT.
!  MAY BE $ OR CURRENT LINE DOT OR NO LKEY AFTER );  IN ANY OTHER
!  CASE, ABSENCE OF DIGIT IS ILLEGAL.
!  0 ILLEGAL EXCEPT AFTER SIGN.

         IF LFGS BAND DLRB THEN RETURN  !PREVIOUSLY DISALLOWED $DIGIT
         IF LFGS BAND DGTB=0 THEN DO
           IF LFGS BAND RGTB THEN RETURN
           IF LFGS BAND DOTB AND TYPB#RNGB THEN [SELW($.); RETURN]
           GO OUT
         END
         IF LVAL=0 AND LFGS BAND SGNB=0 THEN GO OUT
         SELW ((LVAL<==0) * (IF LFGS BAND (SGNB+NUMB) THEN 1 ELSE &
           IF LFGS BAND DOTB THEN PWR10(CNT) ELSE PWR10(DDGMAX))*-1)
         RETURN

END SVNUM

END FRL

END FRNG


DEF RNGMX AS 10  !MAX NO. OF SUBRANGES IN LINE LIST

LOCAL J, WD()


%PRGCHK
IF PF.NLINES=0 THEN CERR(NOPROG); RETURN
END PRGCHK


%OKAY
IF CFN=TEL THEN MSG("OK$"); RETURN
END OKAY


%INLIST (I)

!  IF NO PROGRAM, ERROR.
!  I IS INDEX INTO EL.ID & EL ARRAYS FOR LINE LIST INFO.
! EL.ID(I) IS LST.ID OR 0: IF LST.ID, EL(I) IS
!  ADDRESS OF WD BEFORE 1ST WD OF SUBELEMENT LIST; IF 0, OR
!  IF EL.ID(I) IS 0, INDICATES DEFAULT LIST OF #1:$.
!  CALCULATES AND STORES LIST PARAMETERS AS FOLLOWS:
!    LSTCNT    TOTAL NO. OF LINES SPECIFIED
!    LTBL(1)   LINE NO. OF 1ST LINE OF 1ST SUBRANGE (LIST CONSTRUCTION
!              IS SUBRANGES SEPARATED BY COMMAS)
!    LTBL(2)   NO. OF LINES IN THIS SUBRANGE (>=0)
!    LTBL(3)   LINE NO. OF 2ND SUBRANGE (IF ANY)
!    ETC.
!  RETURNS NO. OF SUBRANGES READ.

LOCAL %NXADR
LOCAL MTCHFG, SAVE, CNT
LOCAL TERM

         PRGCHK
         IF EL.ID(I)=0 OR EL(I)=0 THEN DO     !ALL LINES
           LSTCNT _ LTBL(2) _ PF.NLINES; LTBL(1) _ CNT _ 1
         END ELSE DO
           WD _ EL(I)
           CNT _ LSTCNT _ PTR _ I _ 0
           LOOP DO
             IF INC CNT>RNGMX THEN CERR(LSTLNG)
             SAVE _ 0; LTBL(INC I) _ NXADR
             IF TERM=$: THEN DO
               IF LTBL(INC I) _ NXADR-LTBL(I)+1 <0 THEN CERR(BDLRNG)
             END ELSE LTBL(INC I) _ MTCHFG
             LSTCNT +_ LTBL(I)
             WHILE TERM=$,
           END
         END

         I.NXLNUM; RETURN CNT

%NXADR

!  RETURNS LINE NO. CORRESPONDING TO NEXT LINE ADDRESS (BEGINNING
!  AT INC PTR). LEAVES PTR AT : , OR 0, WITH WD(PTR) IN TERM.
!  NOTE: IF NEGATIVE SUBELEMENT, IS INTEGER REPRESENTING LINE KEY OR 
!  DISPLACEMENT.

LOCAL NX1:, LKEY

         MTCHFG _ YES; LKEY _ 0
         EIF WD(INC PTR)<0 THEN DO
           XLKLN(LKEY_-WD(PTR),NX1)    !STORES RESULT IN LNUM
           GO NX2
NX1:       MTCHFG _ NO   !IS 1+GREATEST LINE NO. WITH SMALLER KEY
         END
         ORIF WD(PTR)=$. THEN LNUM_PF.DOT
         ORIF WD(PTR)=$$ THEN LNUM _ PF.NLINES
         ELSE !IS $#! IF LNUM_-WD(INC PTR)>PF.NLINES THEN CERR(BDLRNG)

NX2:     IF TEMP_[WD(INC PTR)=$-] OR WD(PTR)=$+ THEN DO
           IF MTCHFG=NO THEN CERR(BDLRNG)
           INC PTR; LNUM +_ IF TEMP THEN WD(PTR) ELSE -WD(PTR)
           IF NOT(1<=LNUM<=PF.NLINES) THEN CERR(BDLRNG)
           INC PTR
         END ELSE DO     !NO DISPLACEMENT
           IF SAVE#0 AND MTCHFG=NO THEN DEC LNUM
         END

         IF LKEY=0 THEN LKEY _ INTKEY(LNUM)
         IF SAVE=0 THEN SAVE _ LKEY ELSE IF SAVE>LKEY THEN CERR(BDLRNG)
         TERM _ WD(PTR); RETURN LNUM

END NXADR

END INLIST


%I.NXLNUM

!  INITIALIZES %NXLNUM TO RETURN 1ST LINE NO. IN LTBL
!  CALLED BEFORE %INLIST RETURN.

LOCAL CNT, PTR

CNT _ -1; PTR _ 1; RETURN

%%NXLNUM

!  RETURNS (AND STORES IN LNUM) NEXT LINE NO. SPECIFIED IN LTBL.
!  BEWARE OF OVERCALLING (MAX. OF LSTCNT CALLS AFTER I.NXNLUM)!!

IF INC CNT = LTBL(PTR+1) THEN DO
  WHILE LTBL(1+PTR+_2)=0 THEN NULL; CNT _ 0
END
RETURN LNUM _ LTBL(PTR)+CNT

END I.NXLNUM


%OUTKEY (DEST, IFS, DFS)

! WRITES PRMKEY (LINE KEY IN DICTIONARY FORM) PLUS A BLANK, ON OUTFN IF
! DEST IS 0 ELSE AT CHAR PTR DEST.  DECS OUTCNT WITH EACH WRITE.  
!  PRMPTKEY CALLED FROM %PRMPT; PRMKEY SET BEFORE %GETSTR CALL.
! IFS IS INTEGER FIELD SIZE (BLANKS IN PLACE OF LEADING ZEROES); DFS
! IS DECIMAL FIELD SIZE (BLANKS IN PLACE OF TRAILING ZEROES).
! IFS=DFS=0 SUPPRESSES THESE ZEROES.
! RETURNS DEST (IS ADVANCED CHAR PTR IF NOT 0).

LOCAL %OUT
LOCAL FLG, KEY, TEMP, BFG

         PRMKEY _ PF.KEYD(LNUM); BFG _ 1; GO BELOW

%%WKEY (I)

	PRMKEY _ PF.KEYD(I)

%%PRMPTKEY

	DEST _ IFS _ DFS _ BFG _ 0
BELOW:   FLG _ NO; KEY _ PRMKEY SHL (BPW-(CNT_DGMAX)*4)
         WHILE DEC CNT>=D.DGMAX THEN DO      !PRINT INTEGER DIGITS
           [TEMP;KEY] _ [0;KEY] DSHL 4
           IF TEMP THEN FLG _ YES  !SUPPRESS LEADING ZEROES
           IF FLG THEN OUT(TEMP+$0) ELSE IF CNT-D.DGMAX<IFS THEN OUT($ )
         END
         IF KEY THEN DO  !PRINT DEC. DIGITS
           OUT($.)
           WHILE KEY THEN DO
             [TEMP;KEY] _ [0;KEY] DSHL 4; OUT(TEMP+$0); DEC DFS
           END
         END ELSE IF DFS THEN INC DFS !NO DEC. PART - BLANK DOT POSITION
         REPEAT DFS OUT($ )
         IF BFG THEN OUT($ ); RETURN DEST

%OUT (X)
  IF DEST THEN NCHV DEST _ X ELSE W(OUTFN,X); DEC OUTCNT; RETURN
END OUT


%PLNKEY

! MACHINE DEPENDENT.  SPECIAL FILE OUTPUT FOR SAVE AND FAST.
! CONVERTS PF.KEYD(LNUM) TO CHARS RIGHT-JUSTIFIED WITH LEADING $0'S,
! WITH TRAILING 0'S SUPPRESSED.
! STORES RESULT AT PLN & CALLS PLNW TO WRITE KEY.

LOCAL I, PLN(0:1)
DEF NXRDG AS ((KEY<==KEY SHR 4) BAND OCT 17)

         PLN(0) _ PLN(1) _ ^'00000'; TEMP _ CHPT(PLN+2)
         KEY _ PF.KEYD(LNUM); I _ 0
         WHILE KEY BAND OCT 17=0 THEN DO
           KEY _ KEY SHR 4
           IF INC I=DDGMAX THEN GO INT
         END
         REPEAT DDGMAX-I PCHV TEMP _ NXRDG+$0   !OUT DEC. PART
         PCHV TEMP _ $.
INT:     REPEAT IDGMAX PCHV TEMP _ NXRDG+$0
         I _ 1
         IF PLN(0)=^'00000' THEN PLN(0) _ PLN(1) ELSE INC I
         PLNW(OUTFN,PLN,I); RETURN

END PLNKEY


END OUTKEY


%XLKLN (ILKEY,LAB:)

!  TRANSFORMS ILKEY (LINE KEY IN INTEGER FORM) TO ORDINAL LINE
!  NO., STORING RESULT IN LNUM.  IF EXACT MATCH, RETURNS; IF NOT,
!  RESULT IS 1+GREATEST LINE NO. WITH SMALLER LKEY & GOES TO LAB
!  RATHER THAN RETURN.

         LNUM _ 0; TEMP _ BCD(ILKEY)
         WHILE INC LNUM<=PF.NLINES THEN DO
           IF TEMP <= PF.KEYD(LNUM) THEN DO
             IF TEMP=PF.KEYD(LNUM) THEN RETURN; GO LAB
           END
         END
         GO LAB

END XLKLN


%BCD (ILKEY)

!  TRANSFORMS ILKEY (LINE KEY IN INTEGER FORM) TO BCD (DICTIONARY)
!  FORM
!  AND RETURNS RESULT.

LOCAL TEMP, I

         TEMP _ 0; CNT _ -4
         WHILE ILKEY THEN DO
           [ILKEY;I] _ ILKEY DIVMOD 10
           TEMP BOR_ (I SHL CNT +_ 4)
         END
         RETURN TEMP

END BCD


%INTKEY (LNUM)

LOCAL TEMP, I

!  TRANSFORMS LINE KEY CORRESPONDING TO LNUM FROM BCD (DICTIONARY
!  FORM) TO INTEGER FORM AND RETURNS RESULT.

         TEMP _ (I_PF.KEYD(LNUM)) BAND HEX F; CNT _ 0
         WHILE I _ I SHR 4 > 0 THEN DO
           TEMP _ TEMP + (I BAND HEX F) * PWR10(INC CNT)
         END
         RETURN TEMP

END INTKEY


%OUTNUM (N, RAD)

! CONVERTS N TO BASE RAD AND WRITES IT ON OUTFN

LOCAL BUF(12)

IF N < 0 THEN [W(OUTFN,$-); N - _]
LOOP [FOR I _ 1 TO 12; [N; BUF(I)] _ N DIVMOD RAD; WHILE N # 0]
LOOP [W(OUTFN,BUF(I)+$0); WHILE DEC I > 0]
RETURN

END OUTNUM


%ALPH (X)
! NOT MACRO SO X CAN HAVE SIDE EFFECT (I.E., NCHV)
RETURN [UPALPH(X) OR LWALPH(X)]
END ALPH


%UNPKTK (DEST, LAB:)

!  WRITES TEXT OF LINE LNUM ON OUTFN IF DEST IS 0 ELSE AT
!  CHAR PTR DEST.  DECS OUTCNT WITH EACH WRITE;
!  GOES TO LAB IF <0 (LINE TOO LONG).
!  RETURNS DEST (IS ADVANCED CHAR PTR IF NOT 0)
!  EXTRACTS LABEL; DOESN'T INDENT COMMENTS.

LOCAL FIRST, LAST, PP, I

         PP _ PF.RDLIN(LNUM)
	 FIRST _ NCHV PP
	 IF LSTOPT BAND K.LIND THEN DO
	   !IN THIS CASE, OUTCNT IS BIGNUM, SO DON'T BOTHER TO DEC
	   I _ LBL.DGMAX
	   WHILE SPCH(FIRST) OR FIRST=LNFEED THEN FIRST _ NCHV PP
           IF TEMP _ FIRST#$* THEN DO
  	     IF $0<=TEMP<=$9 THEN DO
	        W(OUTFN,TEMP)
	       LOOP DO
	         WHILE SPCH(TEMP _ NCHV PP) OR TEMP=LNFEED THEN NULL
	         WHILE DEC I>0; WHILE $0<=TEMP<=$9; W(OUTFN,TEMP)
	       END
	     END
	     REPEAT I+1 W(OUTFN,$ )
	     !TEMP IS FIRST CHAR OF STATEMENT
           END
	 END ELSE TEMP _ FIRST
         LAST _ 0
         WHILE TEMP # EOLIT THEN DO
           IF DEST THEN NCHV DEST _ TEMP ELSE DO
             IF LAST=LNFEED THEN DO
               REPEAT TABSP-(IF FIRST=$* THEN LBL.DGMAX+1 ELSE 0) DO
	         W(OUTFN,$ ); DEC OUTCNT
   	       END
             END
             LAST _ W(OUTFN,TEMP)
           END
           IF DEC OUTCNT<0 THEN DO
             IF DEST THEN [CHV DEST_EOLIT; PCHV DEST_CARRET]
             GO LAB
           END
	   TEMP _ NCHV PP
         END
         IF DEST THEN REPEAT 3 NCHV DEST _ EOLIT   !FILL LAST WORD
         RETURN DEST

END UNPKTK


%LIST.EXU

LOCAL %LIST.PAR
LOCAL LNERRA:, HERE:, COPFX:
LOCAL I,J

         IF EL.ID(1)=FID.ID THEN DO
           ELID(1) <=> ELID(2)      !MOVE FID INFO; ZERO LIST ID
           EL(2) _ EL(1)            !FOR %INLIST
         END
           INLIST(1)
             OFFALT
             IF OUTFN _ IF ELID(2)=0 THEN TEL ELSE &
              OPEN(EL(2),OUTMSG+SEQUEN+CHARACTER,OPNERR,2)#TEL THEN OKAY
             FIXUP _ COPFX
             ONALT
             [I;J] _ DOUBLE LIST.PAR
	     IF OUTFN=TEL AND LSTOPT THEN PUT(CARRET)
             REPEAT LSTCNT DO
               NXLNUM
               OUTCNT _ IF LSTOPT BAND K.LIND THEN BIGNUM ELSE LLEN
               IF LSTOPT BAND K.LUNN=0 THEN OUTKEY(0,I,J)
               UNPKTK(0,LNERRA)
             END
             OFFALT
             CLOSE(OUTFN)
             IF OUTFN=TEL THEN [PF.DOT _ LNUM; IF LSTOPT THEN PUT(CARRET)]
	     RETURN


OPNERR:  IF ERRNUM=CORERR THEN EXERR(NOCORE)
         IF ERRNUM>FNFERR THEN DO
           PRINT('CANNOT OPEN '); WFID(FIDP); PUT(CARRET)
         END
         ABERR(FILERR(ERRNUM))

LNERRA:  OFFALT; PF.DOT _ LNUM; ONALT   !ERROR LINE = DOT
         IF OUTFN#TEL THEN UNPKTK(IF LSTOPT BAND K.LUNN=0 THEN &
           OUTKEY(FREEPTR,I,J) ELSE FREEPTR, HERE)
HERE:    ABERR(LNLONG)

COPFX:  IF OUTFN#TEL THEN [CLOSE(OUTFN); DELETE(-FIDP)]
         GO NCOM


%LIST.PAR

!  DETERMINES LINE KEY FIELD SIZE BY
!  EXAMINING KEYS OF ALL LINES SPECIFIED IN LTBL AND RETURNS DOUBLE
!  ARITHMETIC EXPRESSION SPECIFYING MAX. NO. OF INTEGER DIGITS
!  AND MAX. NO. OF DECIMAL DIGITS IN EXAMINED KEYS.
!  ALSO SETS TABSP (LIST INDENTATION FOR UNPKTK).
!  RETURNS ZEROES IF COMMAND IS NOT LIST INDENTED.
!  ASSUMES I.NXLNUM PREV. CALLED, AND CALLS AGAIN BEFORE RETURN.

         I _ J _ TABSP _ 0
         IF LSTOPT BAND K.LIND AND LSTCNT#0 THEN DO
         EIF LSTOPT BAND K.LUNN THEN TABSP _ LBL.DGMAX+1
         ELSE DO
             TEMP _ 0; REPEAT LSTCNT TEMP BOR_ PF.KEYD(NXLNUM)
             I.NXLNUM
             WHILE J<D.DGMAX AND TEMP BAND HEX F=0 THEN DO
               TEMP _ TEMP SHR 4; INC J   !J=NO. OF TRAILING DECIMAL 0'S
             END
             WHILE TEMP THEN DO
               TEMP _ TEMP SHR 4; INC I    !I=TOTAL NO. DIGITS
             END
             I _ 0 MAX I-J_(D.DGMAX-J)   !ALLOWS FOR LEADING DECIMAL 0'S
             TABSP _ I+J+LBL.DGMAX+2      !2 FOR BLANKS
             IF J>0 THEN INC TABSP      !ADD 1 FOR ., IF ANY
           END
         END
         RETURN [I;J]

END LIST.PAR

END LIST.EXU

%QUIT

INC PF.INTNO; PF.CLOSE; CLOSE.ALL
Q: EXIT; GO Q

END QUIT

END CCOM
 J %S