!CIDAR - CHANGE ID AND NAME AND ADRESSES.  16 JAN 73  (BARB)

GLOBAL %CID, G:
G:  IOCS(1); CID; EXIT
\\->G

DEF UNTIL(X) AS WHILE NOT X THEN NULL
DEF TABCHAR AS ($I-OCT 100)
DEF FORM.FEED AS ($L-OCT 100)

LOCAL %DOUT, %CK.LIST, %DOL.IN, %RJ.DOL, %ERMS, %BMP.DOWN
LOCAL %GET.FILE.NAME, %WDB, %RDB

%GET.FILE.NAME
LOCAL P
  P _ GET.LINE(TEL); LOOP WHILE NCHV P#CARRET
  CHV P _ EOLIT; RETURN
END GET.FILE.NAME

%DOL.IN(N, NUTS:, DP)
  LOCAL SGN, DPNT, I, R, C, DCNT, V

  I _ SGN _ DCNT _ R _ C _ 0
  EIF V _ NCHV N = $- THEN SGN _ I
  ORIF V = $+ THEN NULL
  ELSE PCHV N
  DPNT _ 0
  WHILE V _ NCHV N # CARRET THEN DO
    INC I
    EIF V = $. THEN [DPNT _ I; INC DCNT]
    ORIF NOT $0 <= V <= $9 THEN GO NUTS
    ELSE [C _ V-$0; R _ C + R*10]
  END
  IF DCNT>1 OR I_(IF DPNT = 0 THEN 0 ELSE I-DPNT)>DP THEN GO NUTS
  REPEAT DP-I  R _ R*10
  IF SGN # 0 THEN R _ -R
  RETURN R
END DOL.IN

%CK.LIST(PTR, TBL(), CNT)
LOCAL I,P1,C1,C2,FD,F,P2
  I _ -1; FD _ 0
  WHILE INC I # CNT THEN DO
    P1 _ CHPT(TBL(I),-1); P2 _ PTR
    WHILE C2 _ NCHV P2 # CARRET THEN DO
      IF C1 _ NCHV P1 = CARRET THEN GO NOFD
      IF C2#C1 THEN GO NOFD
    END
    INC FD; F _ I
NOFD: NULL
  END
  IF FD=1 THEN RETURN INC F ELSE RETURN 0
END CK.LIST

%RDB(FN, NWDS, BUF())
LOCAL I
  FOR I _ 1 TO NWDS BUF(I-1) _ R(FN)
! RB(FN, NWDS, BUF)
  RETURN
END RDB

%WDB(FN, NWDS, BUF())
LOCAL I
  FOR I _ 1 TO NWDS W(FN, BUF(I-1))
! WB(FN, NWDS, BUF)
  RETURN
END WDB

%DOUT(N)
  LOCAL H, L, S, D, C
C _  H _ L _ 0;  S _ [N<0];  N_ ABS N
  WHILE N>0 THEN DO
    [ N; D] _ N DIVMOD 10; INC C
    [ H; L] _ [ H; L] DSHL 4;  L BOR _ D
  END
  PUT($ );  IF S#0 THEN PUT($-)
  WHILE DEC C >= 0 THEN DO
    PUT( L BAND HEX F + $0);  [ H; L] _ [ H; L] DSHR 4
  END
  RETURN
END DOUT

LOCAL %FORM.LINES, %SET.LINE, %LJLIT, %RJINT, %WRITE.LINE, %PUTCH
%FORM.LINES

  DEF CPL AS 132
  LOCAL B( 0: CPL),  P, C, HPTR
  LOCAL %TRIM

  %SET.LINE
    MOVE CPL+2 FROM ALL $  TO B;  HPTR _ 0;  RETURN
  END SET.LINE

  %PUTCH( L, T)
    IF 0<=T<=CPL THEN [B(T) _ L; HPTR _ HPTR MAX T]
    RETURN
  END PUTCH

  %LJLIT( L(), T)
    P _ CHPT( L, -1);  DEC T;  T _ T MAX 0
    WHILE C_NCHV P # EOLIT AND INC T<=CPL THEN B(T) _ C
    HPTR _ HPTR MAX T;  RETURN
  END LJLIT

  %TRIM
    B(0) _ 1;  HPTR _ HPTR MIN CPL;  WHILE NOT TABCHAR#B(HPTR)#$  THEN DEC HPTR
    RETURN
  END TRIM

  %WRITE.LINE(FILE)
    TRIM;  FOR P_1 TO HPTR W( FILE, B(P));  RETURN
  END WRITE.LINE

  %RJINT( N, T)
    LOCAL S

    S _ [N<0];  N _ABS N;  HPTR _ HPTR MAX T
    LOOP DO
      WHILE 1<=T<=CPL
      [ N; B(T)] _ N DIVMOD 10;  B(T) +_ $0;  DEC T
      WHILE N>0
    END
    IF S#0 AND 1<=T<=CPL THEN B(T) _ $-
    RETURN
  END RJINT
END FORM.LINES


%RJ.DOL(N, L,DP)
LOCAL H,S,D,C
  C _ H _ 0; S _ [N<0]; H _ ABS N
  IF S # 0 THEN PUTCH($-,L)
  REPEAT DP DO
        [H; D] _ H DIVMOD 10; PUTCH(D+$0, DEC L)
  END
  PUTCH($., DEC L)
  WHILE H>0 THEN DO
        [H;D] _ H DIVMOD 10
        PUTCH(D+$0, DEC L)
  END
  RETURN
END RJ.DOL

DEF TYP.CR AS MSG("$")


LOCAL %BINSRCH, %SRCH, %YNQ


%YNQ(LIT)
TABLE YNQT(0:2)['YES','NO','QUIT']
LOCAL P,T
A:  MSG(LIT); T _ CK.LIST(P _ GETLINE(TEL), YNQT, 3)
  IF T=0 THEN [MSG('TYPE YES OR NO.'); GO A] 
  RETURN T
END YNQ
FIND %LOG

%SRCH(TARGET, A(), N)
LOCAL I
  I _ -1
  WHILE INC I < N THEN DO
  IF A(I)=TARGET THEN RETURN INC I
  END
  RETURN 0
END  SRCH

%BINSRCH(TARGET, B(), N, SZ)
 LOCAL C,M,STEP
  DEF A(I) AS B(SZ*I)
  IF TARGET>A(N) THEN RETURN [N+1; 0]
  C _ IF N<4 THEN 1 ELSE LOG(N)-1
  [STEP; M] _ [0; HEX 80.00.00.00.1] DSHL C; DEC M
  REPEAT C DO
    IF M<N AND TARGET > A(M) THEN  M _ M+STEP ELSE M_ M-STEP
    STEP _ STEP SHR 1
  END
  IF A(M) < TARGET OR M=0 THEN INC M
  RETURN [M; [A(M)=TARGET]]
END BINSRCH

LOCAL %SIC

%SIC(P, BADC:)
  LOCAL N,C
  N _ 0
  WHILE C _ NCHV P # CARRET THEN DO
    IF C=EOLIT THEN RETURN N
    IF -1<C_C-$0<=9 THEN N _ N*10+C ELSE GO BADC
  END
  RETURN N
END SIC

%BMP.DOWN(F(), T())
LOCAL J,K,X
  K _ T-F; J_0; X_F(0)
  WHILE DEC K>=0 THEN X<=> F(INC J)
RETURN
END BMP.DOWN



%CID

LOCAL %RD.NAM, %CKID, %LST, %RDID, %CHGID, %GNAM, %CKIDN
LOCAL %WRID, %MOVUP, %PID, %MOV.CHARS, %MOV.DWN

DEF MONE AS -1
DEF ZERO AS 0
DEF SZ2 AS 2
DEF NAD.MAX AS 2000
LOCAL  JNADR, NAD(NAD.MAX*2), ADREOF, NAFN, EOF.ADR, BUF(128*10)
LOCAL PTYP,P,P1,P2,P3,C, NID, NOUT, NPTR, SLOT, FND, YN, CNT, LSTG
LOCAL NEOF, SLCP, KILL:, CPNID

MSG('$CIDAR - CHANGE ID/ADRESS.  VERS 1.0$')
MSG('LEGAL ID COMMANDS ARE C556710, A345210, V223110, 221110, L, Q$')
IF NEOF _ RDNAM(NAD, BUF, 2) = 0 THEN &
  [ERMS('$$CODE MUST BE CHANGED TO HOLD MORE ID NUMBERS.'); EXIT]

ALT.LOC _ KILL

NXID: NID_ CKID; [SLOT; FND] _ DOUBLE BINSRCH(NID, NAD, JNADR, SZ2)
      SLCP_NAD(SLOT*SZ2+1); LSTG_0
  DO PTYP OF 1:4
1:  IF FND=0 THEN [ERMS('ID NOT IN NAME.ADR FILE.$'); GO NXID]
      CNT _ RDID; PID(CNT)
      EIF YN _ YNQ('OK TO VOID? ')=1 THEN [WRID(ZERO, SLCP,0); &
        MOV.UP(@NAD(SLOT*SZ2), @NAD(JNADR*SZ2+SZ2))]
      FIF YN#2 THEN MSG('TYPE Y OR N')
2:  IF FND=0 THEN [ERMS('ID NOT FOUND'); GO NXID]
      CHGID

3:  IF FND=1 THEN [ERMS('ID ALREADY IN NAME.ADR FILE. USE CHANGE OPTION'); GO NXID]
    CPNID _ WRID(NID, MONE, GNAM); MOVDWN

4:  IF FND#1 THEN [ERMS('CANT FIND ID IN NAME.ADR FILE.'); GO NXID]
    CNT _ RDID; PID(CNT)
    C _ GNAM
    EIF CNT#C THEN[ WRID(ZERO, SLCP,0); NAD(SLOT*SZ2+1)_WRID(NID, MONE, C)]
        ELSE WRID(NID, SLCP, C)
  END
    GO NXID


KILL:  ERMS('ABORTED.$'); GO NXID
!READS NAME & ADDRESS FILE AND STORES ID,CP IN ARRAY NAD
!USES BUFFER STARTING AT N

LOCAL %CK.I
LOCAL J2,J1
%RD.NAM(NAD(), N(), Z)
  LOCAL NOPN:, NEOF:,IFN, B.MAX, I, BTOT, SLOT, FND,J, SFN, P3,EFT
  LOCAL C:
  NAFN _ OPEN ('NAME.ADR', UPDATE+DIRECT+WORD, NOPN); SET.RWE(NAFN,NEOF)
  B.MAX _ 128*Z; MOVE NAD.MAX*SZ2 FROM ALL 0 TO NAD

  J _ BTOT _ EFT _ 0; I _ -1; RDB(NAFN, B.MAX, N)
A:  UNTIL(N(CK.I)=-1)
    IF N(CK.I)=-1 THEN [JNADR _ J; RETURN BTOT+I]
    [SLOT; FND] _ DOUBLE BINSRCH( N(I), NAD, J, SZ2)
    IF FND>0 THEN GO A ! [MSG('$DUPLICATE ID IN NAME FILE.'); DOUT(N(I));  
!       GO A]
    J1_SLOT*SZ2-1; J2_J*SZ2+2
    IF SLOT<=J THEN REPEAT SZ2 BMP.DOWN(@NAD(INC J1), @NAD(INC J2))
    NAD(SLOT*SZ2) _ N(I); NAD(SLOT*SZ2+1) _ BTOT+I; INC J
    IF J>=NAD.MAX THEN RETURN 0; GO A

%CK.I
    IF INC I # B.MAX THEN RETURN I
  IF EFT=1 THEN GO C; BTOT _ BTOT+B.MAX; RDB(NAFN, B.MAX, N); RETURN I_ 0
NEOF:  IF ERRNUM =10 THEN [B.MAX _ SIZE(NAFN)-BTOT; INC EFT; RETURN I_0]
       MSG('CANT READ FILE NAME.ADR$'); EXIT
NOPN:  MSG('CANT OPEN NAME/ADR FILE.$'); EXIT
END CK.I
C: JNADR _ J; RETURN BTOT+I
END RD.NAM

%ERMS(LIT)
  MSG("\G"); CLIBUF; MSG(LIT); RETURN
END ERMS

%CKID
  LOCAL C, P4, D:, C1
  C1_0
A:  IF C1=0 THEN MSG('$ID: ') ELSE MSG('$TYPE NEW ID: ')
    P4 _ P _ GETLINE(TEL); NCHV P4
  EIF C _CHV P4 =$Q AND GLCNT=2 THEN [CLOSE.ALL; MSG('EOJ'); EXIT]
  ORIF GLCNT=2 AND C=$L AND C1=0 THEN [LST; GO A]
  ORIF C=$V THEN PTYP_1
  ORIF C=$C THEN PTYP_2
  ORIF C=$A THEN PTYP_3
  ORIF C>=$0 AND C<=$9 THEN [PTYP_4; PCHV P4]
  ELSE GO D
  [ C; C1] _ SIC(P4,D) DIVMOD 100; IF C#0 THEN RETURN C1*10000+C
D: ERMS('ILLEGAL ID #$'); GO A
%%CKIDN
C1_1; GO A
END CKID

%LST
LOCAL NOPN:, J, C, I, BFR(0:12), ER:
A:  MSG('OUTPUT FILE: '); GET.FILE.NAME
  NOUT _ OPEN(IMAGE, CHARACTER+OUTPUT+SEQUEN, NOPN, 1)
  FOR J_1 TO JNADR DO
  IF NAD(J*2) > 100000 THEN DO
  SETLINE; RJINT(NAD((SLOT_J)*SZ2),7)
    PUTCH(CARRET,22); WRITELINE(NOUT)
    C _ RDID; FOR I _ 1 TO C DO
        MOVE 12 FROM ALL 0 TO BFR; P2 _CHPT(BFR,-1)
        P1 _ CHPT(@BUF(1+I*12-12),-1); MOV.CHARS(CARRET, 84,ER)
     SETLINE; LJLIT(BFR,1); WRITE.LINE(NOUT)
    END
    END ELSE [DOUT(NAD(J*2)); MSG('$')]
  END
 CLOSE(NOUT); RETURN
ER:  ERMS('MISSING CARRET IN NAME/ADR LINE.'); EXIT
NOPN:  ERMS('CANT OPEN OUTPUT FILE'); GO A
END LST


%PID(CNT)
LOCAL I
  SETLINE; RJINT(NAD(SLOT*SZ2),7); PUTCH(CARRET,10); WRITELINE(TEL)
  FOR I _ 1 TO CNT DO
    SETLINE; LJLIT(@BUF(I*12-11),1); WRITELINE(TEL)
  END
RETURN
END PID

%MOVUP(F(), T(), SZ)
 LOCAL J, I
 J _(T-F)
  FOR I _ 1 TO J BY 2 [F(I-1) _ F(I+1); F(I) _ F(I+2)]
  DEC JNADR; RETURN
END MOVUP

%WRID(ID, CP, C)
LOCAL CPP, ER:, CT, I
OFF.ALT; SET.RWE(NAFN,ER); CPP _ CP
  IF CP=-1 THEN CPP_ NEOF
  SETCP(NAFN, CPP)
  W(NAFN, ID); WDB(NAFN, CT_C*12, BUF)
  IF CP=-1 THEN [NEOF_ NEOF+CT+2; FOR I_1 TO 256 W(NAFN, MONE)]
ON.ALT; RETURN CPP
ER:  ERMS('SETCP ERR. IN WRID'); EXIT
END WRID

%GNAM
MOVE 84 FROM ALL 0 TO BUF
N:  MSG('TYPE NAME/ADR. TYPE Q WHEN THRU$')
  C_0
A:  P_GETLINE(TEL); IF GLCNT=2 AND NCHV P=$Q THEN GO B
    MOVE 12 FROM IMAGE TO @BUF(C*12)
  IF INC C >5 THEN [ERMS('SORRY. YOU CANT HAVE MORE THAN 5 LINES.'); GO N]
  GO A
B:   IF YN_YNQ('NAME/ADR CORRECT? ') = 1 THEN RETURN C
    IF YN=2 THEN [MSG('RETYPE THE WHOLE NAME/ADR.$'); C_0; GO A]
    MSG('TYPE Y OR N'); GO B
END GNAM

%CHGID
LOCAL SVSL,N
CPNID _ NAD(SLOT*SZ2+1); SVSL _ SLOT; PID(RDID)
A:  N _ CKIDN
  IF PTYP#4 THEN [ERMS('ILLEGAL ID$'); GO A]

  [SLOT; FND] _ DOUBLE BINSRCH(N, NAD, JNADR, SZ2)
  IF FND=1 THEN [ERMS('NEW ID ALREADY IN NAME.ADR FILE.'); RETURN 0]
  MOV.UP(@NAD(SVSL*SZ2), @NAD(JNADR*SZ2+SZ2))
  [SLOT; FND] _ DOUBLE BINSRCH(N, NAD, JNADR, SZ2)
  NID_N; MOV.DWN; WRID(N, CPNID,0)
RETURN
END CHGID

%RDID
LOCAL J, EOF:, C

  SETRWE(NAFN, EOF)
  SETCP(NAFN, NAD(SLOT*SZ2+1)); C _ 0; RDB(NAFN, 128, BUF)
A: FOR J _ 1 BY 12 TO 86 DO
  IF BUF(J)=-1 THEN RETURN C; INC C
 END
EOF:  IF ERRNUM #10 THEN [ERMS('ERROR READING NAME.ADR.'); CLOSE.ALL; EXIT]
  GO A
END RDID

%MOV.CHARS(CHAR,CNT,CAR.XIT:)
LOCAL I,C
  I _ 0
  WHILE C _ NCHV P1 # CHAR THEN DO
    IF INC I <= CNT THEN NCHV P2 _ C
    IF C=CARRET THEN GO CAR.XIT
  END
  NCHV P2 _ CARRET; RETURN
END MOV.CHARS

%MOV.DWN
  LOCAL L1, J2
  J1 _ SLOT*SZ2-1; J2_JNADR*SZ2+SZ2; INC JNADR
  REPEAT SZ2 BMP.DOWN(@NAD(INC J1), @NAD(INC J2))
  NAD(J1 _SLOT*SZ2) _ NID; NAD(INC J1) _ CPNID
RETURN
END MOV.DWN

END CID
