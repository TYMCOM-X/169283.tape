COMPIL(LUP,<%UUOLNK,%ALLOC,SAVE,RESTR,INSET>
	   ,<CORGET,STCLER,%RECOV,%UACS,GOGTAB,%UPDL,CONFIG,%ALLCHR>
	   ,<INITIALIZATION ROUTINES, UUO HANDLER, UTILITY ROUTINES>)
IFE ALWAYS,<
INTERNAL %ALLOC
EXTERNAL	ALLPDP,ERRSPC,SETLET,DPYSW,INILNK
EXTERNAL	%ERGO,SPLNEK,UUO0,%OCTRET
EXTERNAL	X11,X22,X44,CORINC,%STDLS,%RENSW,%SPL,KTLNK
>;IFE ALWAYS
NOLOW <			;PUT IN UPPER SEGMENT AND ALL THAT FOLLOWS....
UP <
	USE	DSPCH		;A PC FOR VECTOR JRSTS
	USE
	BLOCK =180		;SPACE FOR THE JRSTS.
>;UP
SUBTTL	 %ALLOC -- Main Allocation Routine
HERE (%ALLOC)
	MOVEI	C,MINPDS		;ABOUT 64 WORDS
	PUSHJ	P,CORGET		;THIS USUALLY INITS THE USER TABLE
	 ERR	 <NO CORE FOR ALLOCATION>
	PUSHJ	P,PDPMAK		;A PUSH-DOWN POINTER
	MOVE	P,B			;DITCH THE ALLOC PDL
	MOVEM	B,PDL(USER)		;STORE TEMPORARILY
	PUSH	P,16			;THE RETURN ADDRESS
	ADD	P,X22			;ONE DUMMY ENTRY TO TERMINATE
	SETZM	-1(P)			;0 TERMINATES IT
	MOVE	T,SPLNEK		;LIST OF BLOCKS
	MOVEM	T,%SPL			;LINK BUILT-IN BLOCK EXPLICITLY
	MOVEI	T,%SPL			;ALLOCATE IT FIRST
%AL1:	MOVEI	T1,$SPREQ(T)		;FIRST REQUEST
%AL2:	SKIPN	Q2,(T1)			;OP WORD
	 JRST	 NXTELT			;NO MORE THIS BLOCK
	MOVE	Q1,T1			;SAVE ADDRESS OF REQUEST
	TLNN	Q2,STDSPC		;A BUILT-IN RESADR/TEXT?
	 AOJA	 T1,DRCT		; NO, GET IT HERE
	LDB	Q1,[POINT 6,Q2,17]	;THE INDEX
	LSH	Q1,1			;2-WORD ENTRIES ALL
	ADDI	Q1,%STDLST		;HERE'S WHERE THEY LIVE
	HLL	Q2,(Q1)			;USE STANDARD BITS FROM HERE ON
	TLZ	Q2,MINSZ		;NEVER USED FOR MIN WHEN BY INDEX
DRCT:	HRRZ	Q3,1(Q1)		;ADDRESS OF RESULT
	TLZE	Q2,USRTB		;RESULT IN THE USER TABLE?
	ADD	Q3,GOGTAB		;YES
	MOVEI	A,-1(P)			;FOR SEARCH DOWN STACK
	JRST	%AL4			;GO SEARCH
%AL3:	CAIN	Q3,(TEMP)		;SAME ADDR?
	 JRST	 %AL5			;YES, UPDATE
	SUBI	A,2			;BACK UP ONE
%AL4:	SKIPE	TEMP,(A)		;NEXT SAVED OP WORD
	 JRST	 %AL3			;TRY THIS ONE
	MOVEI	A,1(P)			;BACK TO THE TOP
	ADD	P,X22			;NEW ENTRY
	SETZM	(A)
	SETZM	1(A)			;VIRGIN ENTRY
%AL5:	HLL	Q3,Q2		;NEW BITS,,RESADR
	HRRES	Q2		;NEW SIZE
	MOVE	TEMP,1(A)	;OLD TEX,,SIZ
	MOVE	LPSA,(A)	;OLD BITS,,ADR
	JUMPL	Q2,AOJBAK	;NO ACTION ON NEGATIVE SIZE
	TLNE	Q3,MINSZ	;BEGIN THE HAIRY CASE STUDY
	 JRST	 INMIN		;MIN ON IN NEW
	TLZN	LPSA,MINSZ	;NMIN, OMIN? -- OMIN_FALSE
	 JRST	 ADDIT		;NMINOMIN, ADD
	JUMPN	Q2,%AL6		;NMIN OMIN, NSIZ?
	TLOA	Q3,MINSZ	;NMIN OMINNSIZ, NMIN_TRUE, NSIZ+OSIZ=OSIZ
%AL6:	HLLZS	TEMP	;NMINOMINNSIZ, OSIZ_FALSE,NSIZ+OSIZ=NSIZ,NMIN_FALSE
	JRST	ADDIT		;NMIN OMIN, EITHER NSIZ OR OSIZ
INMIN:	TRNE	TEMP,-1		;OSIZ?
	TLZA	Q3,MINSZ	;NMINOSIZ, OSIZ unchg, NMIN_FALSE
	TLZA	LPSA,MINSZ	;NMINOSIZ, OSIZ_NSIZ, NMIN_TRUE
	MOVEI	Q2,0		;NMINOSIZ again, OSIZ unchg over add
ADDIT:	OR	Q3,LPSA		;COLLECT BITS
	ADD	Q2,TEMP		;AND SIZE
	TLNN	Q2,-1		;ANY TEXT ADDR?
	HLL	Q2,1(Q1)	;NO, GET FROM OLD IF ANY
	MOVEM	Q3,(A)		;PUT NEW AWAY
	MOVEM	Q2,1(A)
AOJBAK:	AOJA	T1,%AL2		;NEXT ELEMENT THIS BLOCK
NXTELT:	SKIPN	T,(T)		;NEXT BLOCK IN ALLOC LIST?
	 JRST	 NOELT		;NO MORE.
LEP <
	SKIPL	$ITNO(T)	;LEAP REQUESTED?
	JRST	%AL1		;NO.
	MOVE	B,GOGTAB	;WILL PLAY WITH USER TABLE
	SETOM	HASMSK(B)	;SOMEONE WANTS LEAP.
>;LEP
	JRST 	%AL1		;CONTINUE DOWN ALLOC BLOCKS.
NOELT:
	MOVE	TEMP,PDL(USER)
	PUSH	P,4(TEMP)
	PUSH	P,5(TEMP)	;MAKE SURE P-REQUEST ON TOP
	SETZM	4(TEMP)		;AND THAT IT DOESN'T HAPPEN TWICE
	SETZM	%ALLCHR		;NO QUESTIONS YET
	SKIPN	%RENSW		;WAS THERE A REENTER?
	 JRST	 NONTR		; NO
	TERPRI
	PRINT	<ALLOC? >
	TTCALL	0,B		;ASK LEADING QUESTION AND GET ANSWER
	TERPRI
	CAIN	B,"Y"		;YES?
	SETOM	%ALLCHR		;YES
	CAIN	B,"N"		;NO, BUT LET ME SEE IT?
	AOS	%ALLCHR		;RIGHT
	SETZM	%OCTRET		;WHEN ON, NO MORE ASKING
NONTR:
ALOC:	SKIPN	T,-1(P)		;WERE THERE ANY ENTRIES?
	 JRST	 DONEE		; MAYBE, BUT NONE LEFT
	MOVS	A,(P)		;SIZE, TEXT
	TRNE	A,-1
	SKIPL	%ALLCHR		;IF TEXT ADDR AND WANTS TO DO IT,
	 JRST	 NOASK		; MUST ASK QUESTIONS
	OUTSTR	(A)		;PRINT IT
	PRINT	<= >
	PUSHJ	P,DECIN
	HRL	A,C		;REPLACE REQUESTED SIZE BY OVERRIDE
NOASK:	HLRZ	C,A		;IN CASE NOBODY ELSE DID
	JUMPE	C,PRIN		;DON'T ALLOCATE 0 AREAS
	HRRZ	TEMP,T		;DEST ADDR
	CAIE	TEMP,PDL(USER)	;THE ONE AND ONLY?
	 JRST	 NOEXP		; NO
	HRRZ	B,PDL(USER)	;GET PREV INITIAL CORGET ADDRESS
	CAIGE	C,MINPDS	;MUST BE BIGGER
	 MOVEI	 C,MINPDS	; SO MAKE IT BIGGER
	HRL	A,C		;KEEP EVERYBODY UP TO DATE
	ADDI	B,1		;CORGET ADDR
	CAIG	C,MINPDS
	 JRST	 PDPRET		;NO PROBLEM
	SUBI	C,MINPDS	;AMOUNT TO INCREASE BY
	HRLZ	TEMP,C		;UPDATE P RIGHT NOW
	SUB	P,TEMP		;SIZE FIELD ONLY
	PUSHJ	P,CORINC	;INCREMENT TO PROPER SIZE
	 ERR	 <DRYROT -- NO CORE FOR SYSTEMPDL>
	ADDI	C,MINPDS	;TOTAL SIZE
	JRST	PDPRET
NOEXP:	PUSHJ	P,CORGET	;GET A BLOCK
	 ERR	 <NO CORE AT ALLOCATION>
PDPRET:	TLNN	T,WNTADR	;WANT THE ADDRESS STORED?
	 JRST	 .+3
	MOVEM	B,(T)		;YES, STORE IT
	ADDI	T,1
	TLNN	T,WNTEND
	 JRST	 NOND
	MOVE	D,C		;SIZE
	ADD	D,B		;END ADDR
	MOVEM	D,(T)
	ADDI	T,1
NOND:	PUSHJ	P,PDPMAK
	TLNE	T,WNTPDP
	MOVEM	B,(T)		;WANTS PDP
PRIN:	SKIPN	%ALLCHR		;ARE WE BLABBING?
	 JRST	 SUBJMP		;NOPE
	OUTSTR	(A)
	PRINT	<: >
	HLRZ	C,A		;SIZE AGAIN
	DECPNT	C		;TOTAL ALLOC FOR THIS ONE
	TERPRI
SUBJMP:	SUB	P,X22		;SO MUCH FOR THAT ONE	
	JRST	ALOC		;GET THE NEXT
DONEE:	SKIPN	%ALLCHR		;BLABBING?
	 JRST	 .+3		; NO
	TERPRITERPRI
	SUB	P,X44		;RETURN ADDRESS (DUMMY AND SYSPDL ENTRIES)
	SETZM	%RENSW		;DON'T ASK EACH TIME
	MOVE	SP,SPDL(USER)	;STRING STACK POINTER
	MOVE	B,ST(USER)	;STRING SPACE BEGINNING
	MOVN	C,-1(B)		;SIZE
	SUBI	C,3		;MINUS OVERHEAD
	MOVEM	C,STMAX(USER)	;SIZE OF STRING SPACE DATA
	HRLI	B,(<POINT 7,0>)
	MOVEM	B,TOPBYTE(USER)	;NEXT FREE BYTE
	IMUL	C,[-5]		;NUMBER OF FREE CHARS
	ADDI	C,=15		;LEAVE SOME SLOP FOR INSET, ETC.
	MOVEM	C,REMCHR(USER)
	SKIPE	CONFIG		;COMPILER?
	 SETOM	 SGLIGN(USER)	; YES, STRNGC AND FRIENDS MUST ALIGN STRINGS
	HRROI	TEMP,KTLNK
	POP	TEMP,KNTLNK(USER)
	POP	TEMP,SGROUT(USER)
	POP	TEMP,SETLNK(USER)
	POP	TEMP,SPLNK(USER)
	POP	TEMP,STRLNK(USER);TRANSFER LISTS TO USER TABLE
	PUSHJ	P,STCLER	;CLEAR OUT ALL STRINGS
	MOVEI	TEMP,7		;INITIAL DIGS SETTING
	MOVEM	TEMP,DIGS(USER) ;FOR FLOATING POINT OUTPUT
	MOVEI	TEMP,CHANS(USER);IF CHNL HAS A VALID CHANNEL #,
	HRLI	TEMP,CHNL	; @CDBLOC(USER) REFERS TO ITS
	MOVEM	TEMP,CDBLOC(USER);CDB ADDR IN THE CHANS TABLE
	SETZM	%ERGO		;NO AUTOMATIC CONTINUE FROM ERR.
NOEXPO <
	MOVNI	TEMP,1		;FIND OUT IF ON A DPY
	TTCALL	6,TEMP
	MOVEM	TEMP,DPYSW	;NEG IF DPY
>;NOEXPO
IFNDEF JOBVER,<EXTERNAL JOBVER>
	MOVEI	LPSA,SPLNEK	;For each element of the space
CHKVRS:	SKIPN	LPSA,(LPSA)	; list, if there is a non-zero 
	POPJ	P,		; version request, use it (lh is
	SKIPN	TEMP,$VRNO(LPSA); SAIL version, rh is user version).
	 JRST	 CHKVRS		;But if there was a previous non-zero
	HLL	TEMP,JOBVER	; request, and if it is not the
	EXCH	TEMP,JOBVER	; same as this one, complain first.
	TRNE	TEMP,-1
	CAMN	TEMP,JOBVER
	 JRST	 CHKVRS
	ERR	<VERSION NUMBER MISMATCH>,1
	 JRST	 CHKVRS
PDPMAK:	MOVNS	C
	SUBI	B,1		;PDP
	HRL	B,C
	POPJ	P,
>;NOLOW
DECIN:
OCTIN:	AOS	(P)
	SKIPE	%OCTRET		;IMMEDIATE RETURN?
	 POPJ	 P,		; YES
	SETZB	C,D
OCTIN1:	TTCALL	0,B
	CAIN	B,177		;RUBOUT?
	 JRST	 RUB		;AYE, THERE'S THE RUB
	CAIN	B,"U"-100	;^U?
	 JRST	 CTRLU		;INDEED
	CAIN	B,175		;ALTMODE?
	 JRST	 SETRET
	CAIN	B,12		;LINE FEED?
	 JRST	 EPOP		;YES
	CAIL	B,"0"
	CAILE	B,"9"		;I KNOW IT'S CALLED OCTIN,
	 JRST	 OCTIN1		; BUT INPUT IS IN DECIMAL!!
	SETOM	D		;FOUND SOMETHING LIKE A NUMBER
	IMULI	C,=10		;GOOD OLD NUMBER CONVERSION
	ADDI	C,-"0"(B)
	JRST	OCTIN1		;THIS IS A LOOP
SETRET:	SETOM	%OCTRET		;WILL RETURN IMMEDIATELY HENCEFORTH
	TERPRI
EPOP:	SKIPE	D		;FIND ANYTHING?
	SOS	(P)		;YES
CPOPJ:	POPJ	P,
RUB:
CTRLU:	TTCALL	3,[BYTE (7) "^","U",15,12] ;WON'T THE USER BE
	JRST	OCTIN		;START OVER
SUBTTL	%UUOLNK -- UUO Handler (Dispatch Vector Just Below)
NOLOW <			;INCLUDE IN UPPER SEGMENT.....
^%UUOLNK:
^UUOCON:MOVEM	17,%UACS+17		;NOTICE UUO0 IS ABOVE HERE
	MOVEI	17,%UACS
	BLT	17,%UACS+16
	MOVE	P,[XWD -LUPDL,%UPDL]	;SET UP SPECIAL UUO PDL
	MOVE	A,JOBUUO		;GET THE INSTRUCTION
	LDB	B,[POINT 9,A,8]		;GET UUO NUMBER.
	TRNE	B,-117			;CHECK IN RANGE
	JRST	UUOTBL			;ILLUUO
	XCT	UUOTBL(B)		;GO DO RIGHT THING.
	MOVSI	17,%UACS
	BLT	17,17			;RELOAD ACCUMULATORS.
	JRST	2,@UUO0
^^UUOTBL:PUSHJ	P,ILLUUO	;0
	PUSHJ	P,PDLOQ 	;1
	PUSHJ	P,FLOAQ 	;2
	PUSHJ	P,FIXQ   	;3
	PUSHJ	P,IOERRR  	;4
	PUSHJ	P,ERRR		;5
	PUSHJ	P,PSIX		;6 -- SIXBIT PRINT.
	PUSHJ	P,ARERRR	;7 -- ARRAY ERROR
	PUSHJ	P,ILLUUO	;10
	PUSHJ	P,DECPNQ	;11
	PUSHJ	P,OCTPNQ	;12
	PUSHJ	P,FLTPNQ	;13
	PUSHJ	P,ILLUUO	;14
	PUSHJ	P,ILLUUO	;15
FLTPNQ:	TERPRI	(<WELL ONE FLOATING PT NUMBER IS 1.0>)
	JRST	GODD
SUBTTL	 ILLUUO, PDLOV, ERR UUO Handlers
ILLUUO:	SKIPA	A,[10B12+[ASCIZ /ILLEGAL UUO  /]]
PDLOQ:	MOVEI	A,[ASCIZ /PDL OVERFLOW/]
ERRR:  ERSEEN__10000
	SKIPL	CONFIG		;COMPILER ??
	 JRST	 NOCOM
	TLNE	FF,ERSEEN	;IF SYNTAX ERRORS HAVE OCCURED, ONLY
	JRST	[TLNE A,40	;HALT IF THIS IS AN UNRECOV. ERROR.
		 POPJ P,	;JUST CONTINUE....
		TTCALL 3,(A)	;PRINT THE OFFENDING MESSAGE
		 TERPRI <CANNOT CONTINUE ANY FARTHER>
		 SETZM %RECOV	;NOT A CHANCE
		 JRST WATNOW]
NOCOM:
NOEXPO <
	PUSHJ	P,PPRESET	;TURN ON PP 0, RESET POSITION
>;NOEXPO
	TTCALL	3,(A)		;PRINT MESSAGE
	LDB	B,[POINT 4,A,12] ;DISPATCH INDEX
	ROT	B,-1		;LOW ORDER BIT TO SIGN BIT
	MOVEM	B,%RECOV		;MARK %RECOVERABLE (OR NOT)
	PUSHJ	P,@URTBL(B)		;CALL ERROR ROUTINE
	MOVEI	A,0			;INFO FOR MYERR
	SKIPE	ERRSPC			;SPECIAL ERROR ROUTINE??
	PUSHJ	P,@ERRSPC		;YES -- GO DO IT.
LINDUN:	TERPRI
	PRINT	<CALLED FROM >
	HRRZ	A,UUO0
	SUBI	A,1
	PUSHJ	P,OCTPNQ+1
	SKIPGE	CONFIG			;RUNTIMES OR GAG
	 JRST	NOLSCL
	PRINT	 <  LAST SAIL CALL AT >
	MOVE	A,GOGTAB
	HRRZ	A,UUO1(A)
	SOS	A
	PUSHJ	P,OCTPNQ+1
NOLSCL:	TERPRI
	MOVE	A,GOGTAB
	HRRZ	B,TOPBYTE(A)
	CAML	B,STTOP(A);HAVE WE GONE OFF THE DEEP END?
	 JRST	 [PRINT <ALL BETS ARE OFF, FOLKS!
STRING SPACE EXHAUSTED UNEXPECTEDLY. WILL RESTART NOW>
		  JRST  @JOBREN]
	SKIPE	%ERGO
	JRST	GOTRY		;AUTOMATIC CONTINUE SET
WATNOW:	MOVEI	A,"?"		;PRINT ? FOR IRRECOVERABLE ERRORS,
	SKIPGE	%RECOV		;  FOR %RECOVERABLE ONES.
EXPO <
	MOVEI	A,"^"		;SOMETHING PRINTABLE
>;EXPO
NOEXPO <
	MOVEI	A,""		;FOR %RECOVERABLE ONES
>;NOEXPO
	TTCALL	1,A		;PRINT IT
NOEXPO <
	SKIPGE	DPYSW		;ON A DPY?
	DPYOUT	7,DPYMBK	; FLASHING INSTRUCTIONS
>;NOEXPO
	TTCALL	0,B		;GET RESPONSE CHAR
	CAIL	B,"a"		;lower case?
	SUBI	B,40		;YES, CONVERT TO UPPER
NOEXPO <
	SKIPGE	DPYSW
	DPYOUT	7,[00]		;TURN OFF ALL THAT FLASHING
>;NOEXPO
	CAIN	B,"E"		;RE-EDIT?
	 JRST	 EDIT		; YES
	CAIN	B,"T"		;USE TV?
	 JRST	 TVEDIT		; YES
	TTCALL	11,		;CLEAR INPUT BUFFER
	CAIN	B,12		;CONTINUE AUTOMATISCH?
	SETOM	%ERGO		;YES
	CAILE	B,15		;TRY TO CONTINUE?
	JRST	NOCR
	CAIE	B,""		;CONTINUE ANYWAY OR
GOTRY:	SKIPGE	%RECOV		;CAN WE CONTINUE?
	POPJ	P,		;YES
	TERPRI	<CAN'T CONTINUE>
	JRST	WATNOW
NOCR:	CAIN	B,"S"
	 JRST	 STRTIT		;RESTART
	CAIN	B,"X"		;EXIT?
	JRST	[
	MOVSI	17,%UACS
	BLT	17,17
	CALL6	EXIT]
NOXIT:	CAIE	B,"D"
	JRST	BADRSP		;DOESN'T KNOW WHAT HE WANTS
GODD:	SKIPN	JOBDDT		;IS DDT IN CORE
	 JRST	 NODDT		;NOPE
	MOVSI	17,%UACS
	BLT	17,17
	JRST	@JOBDDT
NODDT:	TERPRI	<NO DDT>
	JRST	WATNOW
BADRSP:	SKIPE	A,ERRSPC	;IS THERE A COMPILER ROUTINE?
	SKIPN	A,-1(A)		;YES, IS THERE AN FTDEBUGGER?
	 JRST	 RELYBD		;NO OR NO
	CAIE	B,"L"		;WANT TO LOOK AT STACK?
	 JRST	 RELYBD		;NO, ALL THAT WORK FOR LITTLE
	TERPRI	<YOU ARE IN THE COMPILER DEBUGGER>
	PUSHJ	P,(A)		;GO DEBUG
	JRST	WATNOW
RELYBD:	PRINT	<REPLY [CR] TO CONTINUE,
[LF] TO CONTINUE AUTOMATICALLY,
"D" FOR DDT, "E" TO EDIT,
"X" TO EXIT, "S" TO RESTART>
	JUMPE	A,CRL
	PRINT	<,
"L" TO LOOK AT THE STACK>
CRL:	TERPRI
	JRST	WATNOW
IOERRR:	TERPRI	
	TTCALL	3,(A)
	TLNE	A,740		;ANY AC AT ALL?
	 PUSHJ	 P,SIXPRT	;YES, ASSUME 14-15, SIXBIT IN LPSA
	TERPRI
	CALLI			;AVOID CLOSING FILES
	CALL	[SIXBIT/EXIT/]	;FAIL WON'T LET ME USE CALL6
STRTIT:	HRRZ	A,JOBSA
	JRST	(A)
ARERRR:
NOEXPO <
	PUSH	P,PPRETR	;IN LINE CALL
PPRESET:
	SKIPL	DPYSW		;ON A DPY?
	POPJ	P,		;NO, DON'T BOTHER
	OPDEF	PPIOT [702B8]
	PPIOT	1,400000
	DPYPOS	(-200)		;RESET X POS
	DPYSIZ	(3,5)		;RESET GLITCHES
PPRETR:	POPJ	P,.+1
>;NOEXPO
	PRINT	<INVALID INDEX NO. >
	LDB	A,[POINT 4,JOBUUO,12]
	PUSHJ	P,DECPNQ+1
	PRINT	< FOR ARRAY >
	SETZM	%RECOV		;NON-RECOVERABLE ERROR!
	PUSHJ	P,PRASC
	JRST	LINDUN
SUBTTL	  Special Printing Routines For Error Handler
^^URTBL:UPOPJ			; 0- 1 -- NO ACTION
	.PRSM			; 2- 3 -- PRINT SYMBOL PTD TO BY LPSA (SAIL)
	PRASC			; 4- 5 -- PRINT SYMBOL PTD TO BY UUO INSTR
	ACPRT			; 6- 7 -- PRNT VAL OF AC IN INSTR PRECDNG UUO
	UUOPRT			;10-11 -- PRINT THE UUO
	AC1PRT			;12-13 -- PRINT AC FIELD ASSUMING RETURN FROM
	SIXPRT			;14-15 --PRINT LPSA AS SIXBIT
UUOPRT: HLRZ	A,40		;LH
	PUSHJ	P,OCTPNQ+1	;TYPE IT
	HRRZ	A,40		;RH
	JRST	OCTPNQ+1	;IT TOO
	$PNAME __ 1
PRASC:	SKIPA	A,JOBUUO	;STRING DESCRITPOR
.PRSM:	HRRI	A,$PNAME(LPSA)	;STRING DESCRIPTOR
	HRRZ	B,(A)		;#CHARACTERS
	MOVE	A,1(A)		;STRING BP
	MOVEI	D,0		;NO ADJUSTMENT
	JRST	PRSL1		;WON'T WORK FOR ZERO LENGTH STRINS
PRSL:	ILDB	C,A		;CHARACTER
	ADDI	C,(D)		;ADJUSTMENT
	TTCALL	1,C		;TYPE IT
PRSL1:	SOJGE	B,PRSL
UPOPJ:	POPJ	P,
AC1PRT:	MOVE	A,GOGTAB	;GET USER TABLE PTR
	SKIPA	A,UUO1(A)	;SOMEONE STORED RIGHT THING HERE
ACPRT:	HRRZ	A,UUO0
	LDB	A,[POINT 4,-2(A),12] ;AC # FROM PREV INSTR
	ADDI	A,%UACS
	JRST	DECPNQ		;PRINT IT IN DECIMAL
SIXPRT:	SKIPA	A,[POINT 6,LPSA];GET FROM HERE
PSIX:	HRLI	A,(<POINT 6,0>) ;UUO ADDR IS ADDR OF SIXBIT
	MOVEI	D,40		;ADJUSTMENT
	MOVEI	B,6		;PRINT 6 CHARS
	JRST	PRSL1
SUBTTL	  Code to Handle Linkage to Editors
TVEDIT:	TDZA	13,13		;FLAG AS TV
EDIT:	MOVNI	13,1
	PUSH	P,13
	SETZB	13,14		;PREPARE FOR PROVIDING
	SETZB	15,16		;STOPGAP WITH FILE NAME,
	SETZB	11,12		; PAGE AND LINE NUMBERS, SEQUENTIAL LINE #
	TTCALL	0,B		;SEE IF FILE NAME SPECIFIED
	CAIE	B,15		;CR?
	 JRST	 GTNAM		; NO, NAME SPECIFIED
AUTO:	TTCALL	0,B		;SNARF UP LINE FEED AFTER CR
	MOVEI	A,1
	SKIPE	ERRSPC
	 PUSHJ	 P,@ERRSPC	;SPECIAL FOR COMPILER....
	JRST	GTIT		;GET QQSVED.RPG
GTNAM:	CAIE	B," "		;DELETE LEADING BLANKS
	 JRST	 MKNAMM
	TTCALL	0,B
	JRST	GTNAM
MKNAMM:	CAIN	B,15		;GO BACK ON CR
	 JRST	 AUTO
	MOVE	C,[POINT 6,13] ;COLLECT FILE NAME HERE
MKNLP:	CAIE	B," "		;DONE?
	CAIN	B,15
	 JRST	 GTIT1		; YES
	SUBI	B,40
	CAIN	B,"."-40
	SKIPA	C,[POINT 6,14] ;ADJUST TO GET EXTENSION
	IDPB	B,C		;CHAR OF FILENAME
	TTCALL	0,B
	JRST	MKNLP
GTIT1:	CAIN	B,15
	TTCALL	0,B
GTIT:	POP	P,A		;TV/SOS FLAG
	EXCH	13,14		;EXT IN REG PRECEDING NAME?
NOEXPO <
	MOVEI	P,2
	LOAD6	(2,<SYS>)	;ASSUME GET TO EDITOR VIA RPG
	LOAD6	(4,<DMP>)
	MOVEI	6,0
	MOVEI	5,777777	;TELLS RPG: "EDIT"
	LOAD6	(3,<RPG>)
	JUMPE	14,SWAPIT
	MOVEI	5,1		;START AT RPG LOC IN EDITOR
	LOAD6	(3,<SOS>)	;NOW ASSUME SOS
	JUMPL	A,SWAPIT	;YES
	LOAD6	(3,<TV>)	;NO, TV
	MOVE	15,12		;GET SEQUENTIAL LINE NUMBER
SWAPIT:	CALL6	(P,SWAP)	;SEE YOU AROUND
>;NOEXPO
EXPO <
	JUMPN	14,EDITG	;IF FILE, FIRE UP SOS
	MOVE	P,[XWD -1,[SIXBIT /SYS/
			   SIXBIT /COMPIL/
			  0  0  0  0 ]]
	CALL6	(P,RUN)		;GO RUN IT.
	JRST	4,0
EDITG:	PUSHJ	P,RPGDSK ;SET UP FOR FILE
	MOVE	2,14 	;GET THE FILE
	PUSHJ	P,SXCON
	MOVEI	1,"."
	SKIPN	2,13     ;EXTENSION
	JRST	NOEXT
	PUSHJ	P,OUT1
	HLLZS	2	;EXTENSION.
	PUSHJ	P,SXCON
NOEXT:	SKIPN	11		;PROJ,PROG #
	JRST	NOPPN
	MOVEI	1,"["
	PUSHJ	P,OUT1
	HLRZ	1,11
	PUSHJ	P,OCTO	;OUTPUT OCTAL
	MOVEI	1,","
	PUSHJ	P,OUT1
	HRRZ	1,11
	PUSHJ	P,OCTO
	MOVEI	1,"]"
	PUSHJ	P,OUT1
NOPPN:	PUSHJ	P,CRLF
	JUMPE	15,GOED10	;IF NO LINE NUMBER, DO NOT DO THIS.
	MOVEI	1,"P"
	PUSHJ	P,OUT1
	MOVE	2,15		;LINE NUMBER
	TRZ	2,1	;FOR SURE?
ASCO:	MOVEI	1,0
	LSHC	1,7
	PUSHJ	P,OUT1
	JUMPN	2,ASCO
	MOVEI	1,"/"
	PUSHJ	P,OUT1
	MOVE	1,16	;PAGE NUMBER
	PUSHJ	P,OUTDEC
	PUSHJ	P,CRLF
GOED10:	MOVE	1,PPMAX+2 ;SIZE
	ADDI	1,4
	IDIVI	1,5	  ;TO WORDS
	MOVNS	1
	HRLS	1
	HRR	1,PPMAX	  ;BUFFER START
	ADDI	1,1
	MOVEM	1,PPMAX+2
	MOVSI	1,'EDT'
	EXCH	1,PPMAX+1
	MOVE	2,[XWD 3,PPMAX+1]
	CALLI	2,44	;WRITE IT
	JRST	DSKIT
EDT10R:	MOVE	P,[XWD 1,[SIXBIT /SYS/
			  SIXBIT /SOS/
			  0000]]
	CALL6	(P,RUN)
	JRST	4,.
DSKIT:	SETSTS	1,16	;DO NOT LOSE BUFFERS
	MOVEM	1,PPMAX+1
	CALLI	2,30	;JOB NUMBER
	MOVSI	1,'EDT'	;TO FILE NAME
	MOVEI	4,3
DGLP:	IDIVI	2,=10
	IORI	1,20(3)
	ROT	1,-6	
	SOJG	4,DGLP
	MOVSI	2,'TMP'
	SETZB	3,4
	ENTER	1,1
	CALLI	12		;FATAL
	SETSTS	1,0
	CLOSE	1,0		;FINISH
	JRST	EDT10R
RPGDSK:	CALLI
	INIT	1,0
	SIXBIT	/DSK/
	XWD	PPMAX,0
	CALLI	12
	OUTBUF	1,0
	OUTPUT	1,0
	SETZM	PPMAX+2
	MOVEI	1," "
OUT1:	AOS	PPMAX+2
	IDPB	1,PPMAX+1
	POPJ	P,
SXCON:	MOVEI	1,0
	LSHC	1,6
	ADDI	1,40
	PUSHJ	P,OUT1
	JUMPN	2,SXCON
	POPJ	P,
OCTO:	IDIVI	1,10
	HRLM	2,(P)
	SKIPE	1
	PUSHJ	P,OCTO
	HLRZ	1,(P)
	ADDI	1,"0"
	JRST	OUT1
OUTDEC:	IDIVI	1,=10
	HRLM	2,(P)
	SKIPE	1
	PUSHJ	P,OUTDEC
	HLRZ	1,(P)
	ADDI	1,"0"
	JRST	OUT1
CRLF:	MOVEI	1,15
	PUSHJ	P,OUT1
	MOVEI	1,12
	JRST	OUT1
>;EXPO
SUBTTL	 DECPNT, OCTPNT, FIX, FLOAT UUOs
OCTPNQ: HRRZ	A,(A)
	MOVEI	C,10	;KEEP RADIX IN C.
	JRST	PNT
DECPNQ:	MOVE	A,(A)
	MOVEI	C,=10
	JUMPGE	A,PNT	; GREATER 0.
	PRINT	<->
	MOVMS	A		; FOO1 _ ABS(FOO1);
PNT:	IDIV	A,C	;FAMOUS DEC RECURSIVE NUMBER PRINTER.
	IORI	B,"0"
	HRLM	B,(P)
	SKIPE	A
	PUSHJ	P,PNT
	HLRZ	B,(P)
	TTCALL	1,B
	POPJ	P,
FIXQ:	TRNN	A,777760	;IN AC?
	ADDI	A,%UACS		;YES
	MOVE	B,(A)		;GET ARGUMENT
	MULI	B,400	;THIS ALGORITHM STOLEN FROM F4.
	TSC	B,B
	EXCH	B,C
	ASH	B,-243(C)
	JRST	FXFLT		;STORE IN RIGHT PLACE.
	POPJ	P,
FLOAQ:	TRNN	A,777760	;IN AC?
	ADDI	A,%UACS		;YES
	MOVE	B,(A)		;GET ARGUMENT
	IDIVI	B,1B18
	SKIPE	B
	TLC	B,254000
	TLC	C,233000
	FAD	B,C
FXFLT:
	LDB	A,[POINT 4,A,12] ;RESULT REGISTER
	MOVEM	B,%UACS(A)	;STORE RESULT
	POPJ	P,
SUBTTL	 DSPLIN, etc.for Disp. Text Line on Error (Compiler)
NOEXPO <
^DSPCLR:
	SKIPGE	DPYSW
	DPYCLR
	POPJ	P,
>;NOEXPO
NOEXPO <
^^DPYMBK:	DPYMSG
	DPYSVV-DPYMSG+1		;DPYOUT HEADER BLOCK
DPYMSG:	0
	AIVECT	(=100,=400)	;MOVE TO RIGHTOF RAID SCREEN
	ASCID	/REPLY [CR] TO CONTINUE,
/
	RIVECT	(=612,0)	;GET OUT THERE AGAIN
	ASCID 	([LF] TO CONTINUE AUTOMATICALLY,
(
	RIVECT	(=612,0)
	ASCID	("D" FOR DDT, "E" TO EDIT, "T" TO TVEDIT,
(
	RIVECT	(=612,0)
	ASCID	("X" TO EXIT, "S" TO RESTART,
(
DPYSVV:	DPYJMP	DPYMSG
>;NOEXPO
SUBTTL	SAVE, RESTR, INSET -- General Utility Routines
^SAVE:	MOVE	USER,GOGTAB	;USER RE-ENTRANT TABLE
	HRRZI	TEMP,RACS(USER)	;XWD FF,SAVEADDR
	BLT	TEMP,RACS+CHNL(USER) ;SAVE FF THRU CHNL
	MOVE	TEMP,-1(P)	;RETURN ADDR FROM I/O CALL
	MOVEM	TEMP,UUO1(USER)	;STORE RETURN
	POPJ	RESTR:	MOVSI	TEMP,RACS(USER)	;XWD SAVEADDR,FF
	BLT	TEMP,CHNL	;RESTORE
	SUB	P,LPSA		;ADJUST STACK
	JRST	@UUO1(USER)	;RETURN
^INSET:	MOVE	USER,GOGTAB	;MAKE SURE
	HLL	TEMP,TOPBYTE(USER)
	HRRI	TEMP,[BYTE (7) 0,4,3,2,1,0]
	ILDB	TEMP,TEMP	;ADJUSTMENT NEEDED.
	ADDM	TEMP,REMCHR(USER)	;UPDATE REMCHR.
	SKIPL	TEMP,TOPBYTE(USER)
	ADDI	TEMP,1
	HRLI	TEMP,440700	;POINT 7, WORD
	MOVEM	TEMP,TOPBYTE(USER)	;AND SAVE
	POPJ	P,
>;NOLOW
ENDCOM(LUP)
                                                                                                                                                                                                                                                                                                                                                                                           J@]5