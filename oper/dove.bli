MODULE DOVE(DOLLAR,ENTRIES=($DEOF,$DSETK,$DFTCH,$DUSTF,$DRSET,$DTFLG,$DERR),
        FSAVE,TIMING,TIMER=EXTERNAL(SIX12))=
BEGIN

REQUIRE DDEFS.BLI[7,107355];
REQUIRE DVDEFS.BLI[7,107355];
REQUIRE GDEFS.BLI[7,107355];
REQUIRE RDEFS.BLI[7,107355];
REQUIRE SDEFS.BLI[7,107355];
REQUIRE UDEFS.BLI[7,107355];


MAP U$DYNARY DBASE$;
MAP G$ DGAM$;
MAP DL$ DLIST$;
MAP DR$ DREGS$;
MAP DF$I DFLAG$;
MAP U$DYNARY DPOOL$;
MAP U$DYNARY DEFER$;
MAP U$DYNARY DRACK$;


UNDECLARE $DSETK;

GLOBAL ROUTINE $DSETK(TYPE,STP,VAL)=
   BEGIN
   %GENERATE ONE EACH CALL TO $RSETK .. THE SETKEY ROUTINE
   FOR RELATIONS
   OR A CALL TO THE RELATION ERROR HANDLER $RERR

   PARAMETERS ARE..
        TYPE .. GV$SETKEY OR GV$ERROR
        STP..AN STP TO A RELATION INCARNATION
        VAL..NUMBER OF KEYS TO SET
             OR ERROR NUMBER FOR $RERR CALL

   CODE IS STRAIGHT FORWARD

   /JS.............................10/2/74
   %

   LOCAL RIB;
   MAP S$ RIB;

   RIB _ $SGSTE(.STP); %GET RELATION INNCARNATION%
   $DGRCB(.RIB,1);
   $DGSAD(.DREGS$[DR$BASE,1],.DREGS$[DR$OFFSET,1],3);
   $SFRNCH(.RIB);
   $DGSYL(.VAL,4);
   IF .TYPE EQL GV$SETKEY THEN
        $DRNCL(RTRV$RSETK,2)
   ELSE IF .TYPE EQL GV$ERROR THEN
        BEGIN
        $DGSYL(0,5) ; %A ZERO AS THIRD PARAM..1/31/75%
        $DRNCL(RTRV$RERR,3); %NEW THIRD PARAM TO $RERR%
        END;
   END;

UNDECLARE $DEOF;

GLOBAL ROUTINE $DEOF(TYPE,STP,DEST)=
   BEGIN
   %PROCESS A GV$BREOF OR A GV$BRNEOF
   FOR EITHER A SOURCE OR A RELATION

   PARAMETERS ARE :
        TYPE = GV$BREOF OR GV$BRNEOF
        STP = STP TO A SOURCE INCARNATION OR RELATION INCARNATION
        DEST = LABEL STP FOR DESTINATION

   OTHERWISE, ULTRASIMPLE...

   /JS........................10/2/74
   %

   LOCAL P;
   MAP S$ P;

   $DFRCA();

   %GET INCARNATION,WHATEVERE IT IS%
   $DGLBL(.DEST,2); %GET DEST IN ANY CASE%

    P_$SGSTE(.STP);

    IF .P[S$TYPE] EQL SV$RELINC THEN
        BEGIN
        %A RELATION !!%
        $DGRCB(.P,1); %RCB TO R1%
        $DSETLIT(3,#400);
        $DSETLIT(4,#700); %NOT MODULAR..BUT USEFUL%
        IF .TYPE EQL GV$BREOF THEN
          DFLAG$[0,#17]_0
        ELSE IF .TYPE EQL GV$BRNEOF THEN
          DFLAG$[0,#17]_1;
        $DPCP(DTPV$REOF);
        END
   ELSE IF .P[S$TYPE] EQL SV$SRCINC THEN
        BEGIN

        %PROCESS SOURCE INC%
        $DGSCB(.P,1); %SCB TO R1%
        IF .TYPE EQL GV$BREOF THEN
           DFLAG$[0,#17]_0
        ELSE IF .TYPE EQL GV$BRNEOF THEN
           DFLAG$[0,#17]_1;
        $DPCP(DTPV$SEOF);

        END;

   $SFRNCH(.P);
   END;




UNDECLARE $DFTCH;

GLOBAL ROUTINE $DFTCH(TYPE) =
   BEGIN
   %PROCESS AN ORDINARY FETCH LIST
   OR AN ORDINARY STUFF LIST..

   TYPE = GV$FETCH(FOR $RFTCH) OR GV$STUFF(LIKESO)

   RECALL...
      OPND1 = RCB STP POINTER
      OPND2..OPNDN = FI STP'S


   /JS................................10/2/74
   NOW...$DFTCH ALSO PROCESSES GV$STUFFALL
   ONLY ONE OPERAND NOW, BUT WE USE THE FISTP CHAIN
   TO FIND ALL THE MODIFIED FIELDS AND STUFF
   ONLY THOSE THAT HAVE BEEN MODIFIED

   /JS................................................2/28/75
    %

   LOCAL X,P,F;
   MAP S$ P;
   MAP G$OPND F;
   LOCAL STP;

   $DFRCA(); %SAFETY!!%
   $DFRCL();
   F_.DGAM$+1;


   IF .TYPE EQL GV$STUFFALL THEN
        BEGIN
        %NEW SUPER STUFF..STUFF ONLY THOSE THINGS THAT NEED IT%
        P_$SGSTE(.F[1,G$OPVAL]); %GET RI%
        $DGRCB(.P,1); %AND ALLOCATE IT%
        $DGSAD(.DREGS$[DR$BASE,1],.DREGS$[DR$OFFSET,1],3);
        STP_.P[S$FISTP]; %TO FIRST INSTANCE%
        $SFRNCH(.P);

        WHILE .STP NEQ SV$NULL DO
           BEGIN
           P_$SGSTE(.STP); %GET I-TH FIELD INCARNATION%
           X_.STP; %SAVE STP%
           STP_.P[S$FISTP];
           IF .P[S$VALCHGF] THEN
                BEGIN
                %THIS FIELD MUST BE STUFFED%
                $DGSYL(.P[S$RSBO],4);
                $SFRNCH(.P);
                $DGFIE(.X,1); %GET FIELD %
                $DGSAD(.DREGS$[DR$BASE,1],.DREGS$[DR$OFFSET,1],5);
                $DRNCL(RTRV$RSTFF,3);
                END
            ELSE
                $SFRNCH(.P);
            END;
        RETURN;
        END;  %OF SUPER STUFF%

   P_$SGSTE(.F[1,G$OPVAL]); %GET RCB%
   $DGRCB(.P,1);
   $DGSAD(.DREGS$[DR$BASE,1],.DREGS$[DR$OFFSET,1],3);
   $SFRNCH(.P);

   %NOW GET THE FI'S, ONE ATA TIME AND SPIN OFF A CALL TO $RFTCH%

   INCR I FROM 2 TO .DGAM$[G$LENGTH]-2 DO
        BEGIN
        X_.F[.I,G$OPVAL]; %GET STP OF I-TH ENTRY%
        P_$SGSTE(.X); %GET FII ENTRY%
        $DGSYL(.P[S$RSBO],4);
        %GET INDEX VALUE TO STACK%
        $SFRNCH(.P); %BYE TO FI%
        $DGFIE(.X,1);
        $DGSAD(.DREGS$[DR$BASE,1],.DREGS$[DR$OFFSET,1],5);
        IF .TYPE EQL GV$FETCH THEN
           $DRNCL(RTRV$RFTCH,3)
        ELSE IF .TYPE EQL GV$STUFF THEN
           $DRNCL(RTRV$RSTFF,3);
        END; %AND THAT IS THAT%

   END;

UNDECLARE $DUSTF;

GLOBAL ROUTINE $DUSTF =
   BEGIN
   %NOW .. STUFF USING...
   WORKKS VERY MUCH LIKE $DFTCH EXCEPT
   GAMMA FILE ITEM HAS ENTRIIES IN PAIRS, NOT SINGLES

   ODD FIELD STP'S POINT TO VALUE FIELD
   EVEN FIELD STP'S ARE USED FOR INDEX VALUE

   /JS................10/3/74
   %

   LOCAL X,P,F;
   MAP S$ P;
   MAP G$OPND F;

   $DFRCA(); %SAFETY!!%

   F_.DGAM$+1;

   P_$SGSTE(.F[1,G$OPVAL]); %GET RCB%
   $DGRCB(.P,1); %TO REGISTER 1%
   $DGSAD(.DREGS$[DR$BASE,1],.DREGS$[DR$OFFSET,1],3);
   $SFRNCH(.P);

   %NOW, GO DOWN THE GAMMA FILE ITEM TWO ATA TIME GETTING FI STP'S%
   INCR I FROM 2 TO .DGAM$[G$LENGTH]-2 BY 2 DO
        BEGIN
        %GET DESTINATION FIELD'S INDEX VALUE%
        X_.F[.I,G$OPVAL];
        P_$SGSTE(.X);
        $DGSYL(.P[S$RSBO],4);
        $SFRNCH(.P); %FREE INDEX FIELD%
        X_.F[.I+1,G$OPVAL];
        IF .F[.I+1,G$OPTYP] EQL GV$STP THEN
          $DGFIE(.X,1)
        ELSE IF .F[.I+1,G$OPTYP] EQL GV$LIT THEN
          $DGLIE(.X,-1)  %YES A LITERAL TOOO..12/12/74%
        ELSE IF .F[.I+1,G$OPTYP] EQL GV$NP THEN
          $DGTMP(.X,1); %WE FORCED IT THERE%
        $DGSAD(.DREGS$[DR$BASE,1],.DREGS$[DR$OFFSET,1],5);
        $DRNCL(RTRV$RSTFF,3);
        END;

    END;
UNDECLARE $DRSET;

GLOBAL ROUTINE $DRSET(STP)=
   BEGIN
   %PROCESS A GV$RESET
   PARAMETER IS STP TO RELATION INCARNATION

   GENERAL FLOW IS:
        (1)THE THE ENTRY FOR THE RELINC
        (2)IF THE S$SORTN FIELD IS ZERO, RETURN
        (3)GET THE RELINC TO DREGS$[1] VIA $DGRCB
        (4)GET THE RELDEF ENTRY
        (5)SET DREGS$[1] TO THE ADDRESS OF THE FIRST SORT FLD-1
        (6)SET DREGS$[2] TO THE LEFT HALF MASK OF #577777
        (7)SET DREGS$[3] TO S$SORTN
        (8)FREE THE RELDEF
        (9)IF ONLY 1 SORT ITEM SET DFLAG$[0,#17](FLAG 17) TO 1
        (10)EMIT A DTPV$RESET
        (11)FREE THE RELINC
        (12)EXIT

    /JS............................10/8/74
   %

   LOCAL RIB,RDB;
   MAP S$ RIB;
   MAP S$ RDB;

   $DFRCA(); %SAFETY%
   RIB_$SGSTE(.STP);
   IF .RIB[S$SORTN] LEQ 0 THEN
        BEGIN
        $SFRNCH(.RIB);
        RETURN;
        END;

   $DGRCB(.RIB,1);
   RDB_$SGSTE(.RIB[S$RESTP]);

   DREGS$[DR$OFFSET,1]_.DREGS$[DR$OFFSET,1]+5+.RDB[S$FIELDN];
   $SFRNCH(.RDB);

   $DGSYL(#577777777777,2);
   $DSETLIT(3,.RIB[S$SORTN]);

   DFLAG$_0;
   IF .RIB[S$SORTN] EQL 1 THEN DFLAG$[0,#17]_1;

   $DPCP(DTPV$RESET);

   $SFRNCH(.RIB);

   END;

UNDECLARE $DTFLG;

GLOBAL ROUTINE $DTFLG(STP,RSTP)=
   BEGIN
   %PROCESS ONE GV$TEST REQUEST
   IN FACT..TEST ONE OF THE CHANGED FLAGS
   IN THE RCB OWNED BY RSTP (WHICH ONE IS INDICATED BY STP)

   PARAMETERS ARE..

        STP .. SYMBOL TABLE POINTER TO A FIELD INCARNATION
           (IN FACT THE NAME OF THE ONE WHOSE CHANGED FLAG WE
           WISH TO TEST)

        RSTP = SYMBOL TABLE POINTER TO A RELATION INCARNATION
           THAT CONTAINS STP 

   AGAIN .. STRAIGHT FORWARD
   /JS.............................11/12/74
   (HAPPY BIRTHDAY TO ME)
   %

   LOCAL ISTP,N,RIB,RDB,FI;

   MAP S$ RIB;
   MAP S$ RDB;
   MAP S$ FI;

   %FIRST, FOR SAFETY'S SAKE..%
   $DFRCA();
   $DFRCL();

   %NOW GET THE RELATION INCARNATION ENTRY%
   RIB_$SGSTE(.RSTP);
   %AND THE RELATION DEFINITION ENTRY%
   RDB_$SGSTE(.RIB[S$RESTP]);
   N_.RDB[S$FIELDN]; %N HAS NUMBER OF FIELDS IN RELATION%
   $SFRNCH(.RDB); %GOODBYE, DEFINITION ENTRY%

   ISTP_.RIB[S$SORTC]; %START DOWN THE S$SORTC CHAIN%
  
   WHILE .ISTP NEQ .STP DO
        BEGIN
        %THIS IS WHERE WE SWING FROM LIMB TO LIMB ON THE SORTC CHAIN
        LOOKING FOR A MATCH TO .STP%
        N_.N+1;
        FI_$SGSTE(.ISTP);
        ISTP_.FI[S$SORTC]; %NEXT LIMB%
        $SFRNCH(.FI); %AND LET GO OF PREVIOUS LIMB%
        END;

   $DGRCB(.RIB,1);
   %THAT GOT THE RCB TO R1%
   %NOW GET THE CORRECT OFFSET%
   DREGS$[DR$OFFSET,1]_.DREGS$[DR$OFFSET,1]+.N+6;
   $SFRNCH(.RIB); %AU REVOIR, RELATION INCARNATION%

   $DSETLIT(2,#200000);
   $DPCP(DTPV$TCHNG); %THE EVIL DEED%

   %NOW MARK THE LOGICAL AC AS BUSY, WITH WHAT , AND HOW BUSY%
   DXLOGAC$_.DGAM$[G$ID];
   DXLOGCT$_.DGAM$[G$UCNT];

   END;
UNDECLARE $DERR;

GLOBAL ROUTINE $DERR(TYPE,STP,VAL)=
   BEGIN
   %SPECIAL FOR PROCESSING GV$ERROR
   WHICH HAS CHANGED GREATLY FROM ITS
   ORIGINAL DEFINITION

   3/8/75................/JS
   NOW..PROCESSES ERRORS FROM COMPUTED REPORT ITEMS, REPORT LINE LIMIT,
   AND SOURCE LINE LIMIT

   PARAMETERS ARE:

        TYPE...G$OPTYP OF FIRST OPERAND IN GAMMA FILE TOKEN
        STP....G$OPVAL OF FIRST OPERAND...STP TO INCARNATION WHICH
                IS BEING OFFENDED
        VAL....VALUE OF SECOND OPERAND..IF = 2 AND TYPE#GV$STP THEN
                REPORT ITEM, GV$RLLIM, OR GV$SLLIM

   TODAY IS 3/29/75....../JS
   %

   LOCAL P,Q;
   MAP G$OPND Q;
   MAP S$ P;

   IF .TYPE EQL GV$STP THEN $DSETK(GV$ERROR,.STP,.VAL)
   ELSE IF .VAL EQL GV$POSVALERR THEN
        BEGIN
        %FIRST CLEAR THE DECKS..%
        $DFRCA();
        $DFRCL();

        %NOW GET THE NAME OF WHATEVER IT IS%
        Q_.DGAM$+1;
        P_$SGSTE(.STP);
        $DGLIE($DNAME(.P[S$STP1]),4);
        %NAME LIT IS IN R4%
        $DGSYL(.DREGS$[DR$QP,4],5); %LENGTH IS IN R5%
        $DGSAD(.DREGS$[DR$BASE,4],.DREGS$[DR$OFFSET,4],4); %ADCON%
        $SFRNCH(.P); %FREE POOR OLD P%

        IF .TYPE EQL GV$RIP THEN
           $DGSYL((SELECT .Q[1,G$RITYP] OF NSET
GV$PAGENO:      2;   %THESE NUMBERS REFLECT ENTRIES INTO THE MESS PLIT IN $TATTL%
GV$PAGESIZ:     3;
GV$LINENO:      4;
GV$TOPMARG:    5;
GV$BOTMARG:     6;
GV$FOOTSIZ:     7;
GV$HEADSIZ:     8;
            TESN),3)   %ERROR NUMBER TO R3%
        ELSE IF .TYPE EQL GV$RLLIM THEN
           $DGSYL(9,3)
        ELSE IF .TYPE EQL GV$SLLIM THEN
           $DGSYL(10,3);

        $DRNCL(RTRV$TATTL,3);
        END

   ELSE
     0;

    END;

%*******************%
END ELUDOM
 