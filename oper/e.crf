E - SIMPL VERS 2.00 20-JUL 1973 19:50



     1	00010	!  IOCS DEFS OF INTEREST TO USER
     2	00020	
     3	00030	!  FILE DESCRIPTORS PASSED TO %OPEN
     4	00040	
     5	00050	!MAINTAIN ORDER OF FILE TYPES (SEE %OPEN1)
     6	00060	
     7	00070	DEF INPUT AS 0
     8	00080	DEF UPDATE AS 1
     9	00090	DEF OUTPUT AS 2
    10	00100	DEF OUTMSG AS 3
    11	00110	
    12	00120	!FILE TYPE MODIFIERS
    13	00130	
    14	00140	DEF NEW AS OCT 100
    15	00150	DEF OLD AS OCT 200
    16	00160	
    17	00170	!FILE MODES
    18	00180	
    19	00190	DEF SEQUEN AS 0
    20	00200	DEF DIRECT AS OCT 10
    21	00210	
    22	00220	!FILE ORGANIZATIONS
    23	00230	
    24	00240	DEF WORD AS 0
    25	00250	DEF CHARACTER AS OCT 20
    26	00260	DEF PACK AS OCT 40
    27	00270	
    28	00280	!  FILE NUMBERS  (FNMIN IS MIN CHANNEL WHICH WILL BE USED)
    29	00290	
    30	00300	DEF FNMIN AS 1            !MIN AND MAX FILE NUMBERS
    31	00310	DEF FNMAX AS 15           !AVAILABLE, EXCLUDING TEL
    32	00320	DEF TEL AS (FNMIN-1)        !FILE NO. INDICATING TERMINAL 
    33	00330	
    34	00340	!  ERROR NUMBERS (ERRNUM VALUES)
    35	00350	
    36	00360	DEF TMFERR AS 1     !TOO MANY FILES OPEN (OPEN)
    37	00370	DEF FMDERR AS 2     !BAD FILE MODE OR TYPE FOR ATTEMPTED OPERATION
    38	00380	                    !(OPEN SEQUEN UPDATE, SETCP OR ERASE SEQUEN,
    39	00390	                    !WRITE OR ERASE INPUT, READ SEQUEN OUTPUT)
    40	00400	DEF IFDERR AS 3     !ILLEGAL FILE IDENTIFIER (SETFID, OPEN, DELETE, RENAME)
    41	00410	DEF CNFERR AS 4     !NEW/OLD FILE MESSAGE NOT CONFIRMED (OPEN OUTMSG)
    42	00420	                    !OR TYPE MODIFIER CONFLICT - FILE NOT NEW/OLD (OPEN OUTPUT OR UPDATE)
    43	00430	
    44	00440	!ORDER OF FOLLOWING 5 NOS. SHALL BE MAINTAINED. (ALL BUT LAST MAY
    45	00450	!OCCUR DURING OPEN, DELETE, OR RENAME)
    46	00460	
    47	00470	DEF FNFERR AS 5     !FILE NOT FOUND
    48	00480	DEF IUSERR AS 6     !INVALID USER NAME (BAD PPN)
    49	00490	DEF PRTERR AS 7     !PROTECTION VIOLATION ATTEMPT
    50	00500	DEF FBSERR AS 8     !FILE BUSY
    51	00510	DEF AEFERR AS 9     !NEW NAME BELONGS TO ALREADY EXISTING FILE  (RENAME)
    52	00520	
    53	00530	DEF EOFERR AS 10    !END OF FILE (R, RB, GETLINE)
    54	00540	DEF LNGERR AS 11    !LINE TOO LONG (GETLINE FROM FILE)
    55	00550	DEF TELERR AS 12    !ILLEGAL OPERATION ON TEL (OPEN, DELETE, RENAME,
    56	00560	                    !CP, SIZE)
    57	00570	DEF ARGERR AS 13    !BAD ARGUMENT VALUE - SUCH AS:
    58	00580	                    !NEGATIVE CURSOR POSITION (SETCP, ERASE),
    59	00590	                    !NEG. COUNT (RB, WB)
    60	00600	DEF CORERR AS 14    !OUT OF CORE (OPEN, BLOCK, RELEASE)
    61	00610	
    62	00620	FIND CFN, %SETCFN, %EXU
    63	00630	FIND %IOCS,%OPEN,%SETFID,%WFID,%CLOSE,%BUF.DUMP
    64	00640	FIND %CLOSE.ALL, %PLNCHK, %PLNW, %SET.TAB
    65	00650	FIND %SET.TERM, %SET.PRMPT, %TAB.OFF, %R, %GETLINE
    66	00660	FIND %W, %WX, %ERASE, %SETCP, %CP, %SIZE
    67	00670	FIND %WB, %RB
    68	00680	FIND %BLOCK, %RELEASE
    69	00690	FIND %DELETE,%RENAME
    70	00700	FIND %CLIBUF, %CLOBUF, %TTYLEN, %GET, %PUT, %PUTX, %PUTC
    71	00710	FIND %PRINT, %PRINTC, %MSG, %SETRWE
    72	00720	FIND %OFFALT, %ONALT, %ONALT.C, ALTLOC, ERRNUM
    73	00730	
    74	00740	FIND FIDP()
    75	00750	DEF LOCWPF AS 4
    76	00760	DEF MAXARG AS 27
    77	00770	DEF MINARG AS 5
    78	00780	DEF WPF AS (LOCWPF+1+MINARG)
    79	00790	DEF MAXWPF AS (LOCWPF+1+MAXARG)
    80	00800	! EXTENDED ARGUMENT BLOCK:
    81	00810	DEF ARGCNT(TBL) AS TBL(LOCWPF)
    82	00820	DEF PPNARG(TBL) AS TBL(LOCWPF+1)
    83	00830	DEF NAMARG(TBL) AS TBL(LOCWPF+2)
    84	00840	DEF EXTARG(TBL) AS TBL(LOCWPF+3)
    85	00850	DEF PRVARG(TBL) AS TBL(LOCWPF+4)
    86	00860	DEF FILSIZ(TBL) AS TBL(LOCWPF+5)
    87	00870	DEF EXTQ(TBL) AS TBL(0)
    88	00880	DEF USRNAM(TBL) AS TBL(1)
    89	00890	DEF DEVNAM(TBL) AS TBL(3)
    90	00900	
    91	00910	!  GETLINE 
    92	00920	
    93	00930	DEF LLEN AS 256                !MAX. LINE LENGTH
    94	00940	DEF GLBCMX AS (LLEN+1)         !MAX. CHAR CAPACITY
    95	00950	DEF CPW AS CHARS.PER.WORD
    96	00960	DEF GLBSZ AS (GLBCMX+CPW-1)/CPW   !SIZE IN WORDS
    97	00970	FIND FREE(0:GLBSZ-1)         !GETLINE INTERNAL BUFFER (AVAILABLE
    98	00980	                             !BETWEEN GETLINE CALLS)
    99	00990	FIND IMAGE(0:GLBSZ-1)        !GETLINE IMAGE LINE BUFFER
   100	01000	FIND GLCNT                   !GETLINE CHAR COUNT
   101	!THE FOLLOWING MACRO COMPUTES A GENERAL BYT POINTER SO THAT NCHV ON
   102	!THE PDP-10 WILL DO ILDB'S FOR ANY BYTE SIZE
   103	DEF BYPT(Y,P1,S) AS [6,6,6,18]*[IF P1>=0 THEN 36-S*(P1 MOD(36/S)-1)&
   104		ELSE 36-S*(36/S-(-P1)MOD(36/S)+1),S,0,&
   105		IF P1>=0 THEN Y+P1/(36/S) ELSE Y+(P1+1)/(36/S)-1]
   106	DEF NBYV AS NCHV
   107	DEF BYV AS CHV
   108	LOCAL START:,ERR1:,ERR2:,ERR3:,TOT,%NOCHANGE
   109	LOCAL I,J,K,L,M,N,COST
   110	FIND  WD(0:31),F
   111	FIND  CMD,FIRST,LAST,%FAST,%LIST,%CENTOUT,%X,ITEM,LITEM,FITEM
   112	FIND  %RDREC,%WREC,Q,%ITEMOUT,SYSNO
   113	LOCAL ALTMOD:
   114	
   115	DEF B AS CHROUT($ )  !BLANK TO TEL OR FILE  (SEE CH.OUT)
   116	DEF C AS CHROUT(CARRET)
   117	
   118	
   119	START: IOCS(2); ALTLOC _ ALTMOD; OFFALT
   120	\\->START
   121	F _ OPEN('PPRACT.DAT',DIRECT+UPDATE+WORD,ERR1)
   122	
   123	FIND TOKEN(0),%INIT.TTY,%GET.NUM,%NUM.OUT,%SIX.OUT,%OCT.OUT,%OCTWD.OUT
   124	FIND %CHR.OUT,%OUT,%GETTOKEN,%CHOOSE,%LISTABLE,%MAKESIXBIT
   125	GLOBAL CHOUT,P,NUMBER, PROMPT:
   126	GLOBAL TABLE CMDS(1:5)['QUIT','FAST','LIST','HELP','EDIT']
   127	
   128	INIT.TTY(ERR3)
   129	MOVE 72/CHARS.PER.WORD FROM ALL 0 TO TOKEN
   130	 
   131	CH.OUT _ OPEN("TEL",SEQUEN+OUTPUT+CHARACTER,ERR2,2)
   132	FIRST _ LAST _ 31000    !INIT TO DEFAULT VALUES
   133	FITEM _ 1; LITEM _ 36
   134	PROMPT: MSG('$:')
   135	P _ GETLINE(TEL)
   136	GETTOKEN(0)   !ALPHA COMMAND
   137	IF CMD _ CHOOSE(5,CMDS) = 0 THEN DO
   138	 MSG('TYPE HELP')
   139	 GO PROMPT
   140	END
   141	
   142	DO CMD OF 1:5
   143	1: CLOSE.ALL; EXIT   !QUIT COMMAND
   144	
   145	2: 3: IF NCHV(P) = EOLIT THEN GO PREV  ELSE PCHV(P)    !NO PARAMETERS MEANS PREVIOUS FIRST & LAST
   146	GETNUM  !GET DECIMAL NUMBER FROM TTY IN FREE FORM
   147	IF NUMBER <37 THEN FITEM_NUMBER ELSE IF NUMBER > 30999 THEN &
   148	  FIRST _ NUMBER ELSE [NUMOUT(NUMBER); MSG(' NOT A REQ # OR ITEM #'); GO PROMPT]
   149	IF NCHV(P) = EOLIT THEN [LAST _ FIRST; LITEM _ FITEM] ELSE DO
   150	 PCHV(P)
   151	 GETNUM
   152	IF NUMBER < 37 THEN LITEM _ NUMBER ELSE IF NUMBER > 30999 THEN &
   153	  LAST _ NUMBER ELSE [NUMOUT(NUMBER); MSG(' NOT A REQ # OR ITEM #'); GO PROMPT]
   154	END
   155	
   156	PREV: FOR K _ FIRST TO LAST IF CMD = 2 THEN FAST(K) ELSE LIST(K)
   157	
   158	
   159	4: MSG('COMMANDS ARE: '); LISTABLE(5,CMDS)
   160	
   161	5: IF NCHV(P)=EOLIT THEN MSG('ITEM?? ') ELSE PCHV(P)
   162	GETNUM
   163	IF NOT 0<NUMBER<37 THEN [ MSG('ITEM MUST BE >0 AND <37$'); GO PROMPT]
   164	ITEM _ NUMBER
   165	IF WD(0) # LAST THEN RDREC(LAST)
   166	DO ITEM OF 1:36
   167	1: OUT('DATE/TIME '); SIXOUT(@WD(1),12); B
   168	   GETTOKEN(2)
   169	   NOCHANGE
   170	   MAKESIXBIT(TOKEN,@WD(1),12)
   171	
   172	2: OUT('USERNAME '); SIXOUT(@WD(3),12); B
   173	   GETTOKEN(2)
   174	   NOCHANGE
   175	   MAKESIXBIT(TOKEN,@WD(3),12)   !USERNAME
   176	
   177	3: OUT('PPN ');  OCTWDOUT(WD(5))   !PPN
   178	   MSG(' DO NOT CHANGE')
   179	
   180	4: OUT('PROJ CODE '); SIXOUT(@WD(6),18)   !PROJECT CODE
   181	   GETTOKEN(2)
   182	   NOCHANGE
   183	   MAKESIXBIT(TOKEN,@WD(6),18)
   184	
   185	5: CH(TOKEN) _ $Z    !INIT TOKEN TO SOMETHING ILLEGAL
   186	   WHILE CH(TOKEN)#$I AND CH(TOKEN)#$C AND CH(TOKEN)#EOLIT THEN DO
   187	IF WD(9)=0 THEN OUT('INHOUSE ') ELSE IF WD(9)=1 THEN &
   188	         OUT('CUSTOMER ') ELSE OUT('TYPE I OR C ')
   189	   GETTOKEN(0)
   190	   IF CH(TOKEN) = $I THEN WD(9)_0 ELSE IF CH(TOKEN) = $C THEN &
   191	    WD(9)_1 ELSE WD(9) _ 2
   192	                                                                 END
   193	
   194	7: OUT('JOB TYPES '); NUMOUT(WD(OCT 14)); B
   195	   GETNUM
   196	   NOCHANGE
   197	   WD(OCT 14) _ NUMBER
   198	
   199	8: 13: 18: 23: 28: OUT('TYPE '); NUMOUT(HW(@WD(X),0)); B
   200	         GETNUM
   201	       NOCHANGE
   202	   IF HW(@WD(X),0) _ NUMBER = 1 THEN DO
   203	        [18,18]*[L,M] _ WD(X+1)
   204	        ITEMOUT(ITEM+2)
   205	        OUT('PARTS ')
   206	        NUMOUT(L)
   207	        C
   208	        ITEMOUT(ITEM+3)
   209	        OUT('DECOLLATED ')
   210	        NUMOUT(M)
   211	        C
   212	                                      END
   213	   IF HW(@WD(X),0) = 5 THEN DO
   214	        ITEMOUT(ITEM+2)
   215	        OUT('TAPE CHARGE ')
   216	        CENTOUT(WD(X+1))
   217	        C
   218	                                         END
   219	
   220	9: 14: 19: 24: 29: OUT('VOL. '); NUMOUT(HW(@WD(X),1)); B
   221	      GETNUM
   222	   NOCHANGE
   223	  HW(@WD(X),1) _ NUMBER
   224	
   225	10: 15: 20: 25: 30: IF HW(@WD(X-1),0) = 1 THEN &
   226	     [OUT('PARTS '); NUMOUT(HW(@WD(X),0))] ELSE &
   227	     [OUT('OTHER CHRG '); CENTOUT(WD(X))]
   228	     B
   229	     GETNUM
   230	    NOCHANGE
   231	     IF HW(@WD(X-1),0) = 1 THEN &
   232	      HW(@WD(X),0) _ NUMBER ELSE WD(X) _ NUMBER
   233	
   234	11: 16: 21: 26: 31: IF HW(@WD(X-1),0)#1 THEN DO
   235	        OUT('EDIT ')
   236	        NUMOUT(ITEM)
   237	        OUT(' IS A VALID COMMAND ONLY IF ITEM$')
   238	        ITEMOUT(ITEM-3)
   239	        OUT('TYPE IS 1$')
   240	        GO PROMPT
   241	                                             END
   242	OUT('DECOLLATED '); NUMOUT(HW(@WD(X),1)); B
   243	       GETNUM
   244	    NOCHANGE
   245	  HW(@WD(X),1) _ NUMBER
   246	
   247	12: 17: 22: 27: 32: OUT('COST '); CENTOUT(WD(X)); B
   248	     GETNUM
   249	    NOCHANGE
   250	  WD(X) _ NUMBER
   251	
   252	33: OUT('POSTAGE '); CENTOUT(WD(OCT 34)); B
   253	    GETNUM
   254	    NOCHANGE
   255	    WD(OCT 34) _ NUMBER
   256	
   257	34: OUT('TOTAL '); CENTOUT(WD(OCT 35)); B
   258	    GETNUM
   259	    NOCHANGE
   260	    WD(OCT 35) _ NUMBER
   261	
   262	35: OUT('COMPLETED '); SIXOUT(@WD(OCT 36),6); B
   263	    GETTOKEN(2)
   264	    NOCHANGE
   265	    MAKESIXBIT(TOKEN,@WD(OCT 36),6)
   266	36: OUT('PTR '); NUMOUT(WD(OCT 37)); B
   267	    GETNUM
   268	    NOCHANGE
   269	    WD(OCT 37) _ NUMBER
   270	END
   271	!COST CKING, TOT RECALCING, & OTHER VERIFYING SHOULD GO HERE
   272	J _ OCT 12 + 3 * WD(OCT 14)   !WORD NUMBER OF LAST JOB TYPE
   273	FOR I _ OCT 15 TO J BY 3 DO
   274	  [18,18]*[L,M] _ WD(I)  !BREAK INTO TWO HALF WORDS, TYPE & VOL
   275	  [18,18]*[K,N] _ WD(I+1)  !PARTS AND DECOLLATION SOMETIMES
   276	  EIF NOT (0 < L < 8) THEN DO
   277	                          ITEMOUT(5*I/3-13)
   278	                          OUT('TYPE ')
   279	                          NUMOUT(L)
   280	                          OUT(' ILLEGAL$')
   281	                          END
   282	    ORIF M = 0 THEN DO
   283	        ITEMOUT(5*I/3-12)   !ITEM # OF VOL. FOR THIS JOB TYPE
   284	        OUT('VOL. SHOULD NOT BE ZERO$')
   285	                     END
   286	ELSE DO L OF 1:7
   287	   1: IF NOT 0<K<5 THEN DO
   288	        ITEMOUT(5*I/3-11)
   289	        OUT('PARTS SHOULD NOT BE ')
   290	        NUMOUT(K)
   291	        C
   292	                            END
   293	      COST _ M * (K+1)*5 + N*500      !PRINTING
   294	   2: COST _ (M+1) / 2                   !RD CARDS
   295	   3: COST _ M * 2                       !PUNCH CARDS
   296	   4: COST _ M * 100                     !TAPE TO DISK (PER FILE)
   297	   5: COST _ M * 100 + WD(I+1)           !DISK TO TAPE + TAPE CHRG
   298	   6: 7: COST _ WD(I+1)                      !OTHER OR TAPE CONVERSION
   299	   END
   300	 IF COST # WD(I+2) THEN DO
   301	        ITEMOUT(5*(I+2)/3-13)
   302	        OUT('COST ')
   303	        CENTOUT(COST)
   304	        C
   305	        WD(I+2) _ COST
   306	                        END
   307	END
   308	TOT _ 0
   309	FOR I _ OCT 17 TO J + 2 BY 3  TOT + _ WD(I)
   310	IF TOT + _ WD(OCT 34) < 500 THEN TOT _ 500 !ADD POSTAGE & CK FOR $5 MIN
   311	IF TOT  # WD(OCT 35) THEN DO
   312	         ITEMOUT(34)
   313	         OUT('TOTAL ')
   314	         CENTOUT(TOT)
   315	         WD(OCT 35) _ TOT
   316	                                              END
   317	WREC(LAST)
   318	END
   319	GO PROMPT
   320	ERR1:  OUT('ERR1 ERRNUM = '); NUMOUT(ERRNUM); GO PROMPT
   321	ERR2: OUT('ERR2 ERRNUM ='); NUMOUT(ERRNUM); GO PROMPT
   322	ERR3:  MSG('WHAT??'); GO PROMPT
   323	
   324	ALTMOD: MSG('$USE Q TO QUIT$CONTROL O TO INTERRUPT OUTPUT'); GO PROMPT
   325	
   326	%NOCHANGE
   327	IF CH(TOKEN) = EOLIT THEN GO PROMPT
   328	RETURN
   329	END NOCHANGE

E
SYMBOL CROSS REFERENCE

AEFERR	    51#
ALTLOC	    72#	   119
ALTMOD	   113#	   119	   324#
ARGCNT	    81#
ARGERR	    57#
B	   115#	   167	   172	   194	   199	   220	   228	   242	   247	   252	   257	   262	   266
BLOCK	    68
BUFDUM	    63
BYPT	   103#
BYV	   107#
C	   116#	   207	   211	   217	   291	   304
CENTOU	   111	   216	   225	   247	   252	   257	   303	   314
CFN	    62#
CHARAC	    25#	   131
CHOOSE	   124	   137
CHOUT	   125#	   131
CHROUT	   124	   167	   172	   194	   199	   207	   211	   217	   220	   228	   242	   247	   252	   257
	   262	   266	   291	   304
CLIBUF	    70
CLOBUF	    70
CLOSE	    63
CLOSEA	    64	   143
CMD	   111#	   137	   142	   156
CMDS	   126#	   137	   159
CNFERR	    41#
CORERR	    60#
COST	   109#	   293	   294	   295	   296	   297	   298	   300	   303	   305
CP	    66
CPW	    95#	    96
DELETE	    69
DEVNAM	    89#
DIRECT	    20#	   121
EOFERR	    53#
ERASE	    66
ERR1	   108#	   121	   320#
ERR2	   108#	   131	   321#
ERR3	   108#	   128	   322#
ERRNUM	    72#	   320	   321
EXTARG	    84#
EXTQ	    87#
EXU	    62
F	   110#	   121
FAST	   111	   156
FBSERR	    50#
FIDP	    74#
FILSIZ	    86#
FIRST	   111#	   132	   147	   149	   156
FITEM	   111#	   133	   147	   149
FMDERR	    37#
FNFERR	    47#
FNMAX	    31#
FNMIN	    30#	    32
FREE	    97#
E
SYMBOL CROSS REFERENCE

GET	    70
GETLIN	    65	   135
GETNUM	   123	   146	   151	   162	   195	   200	   221	   229	   243	   248	   253	   258	   267
GETTOK	   124	   136	   168	   173	   181	   189	   263
GLBCMX	    94#	    96
GLBSZ	    96#	    97	    99
GLCNT	   100#
I	   109#	   273	   274	   275	   277	   283	   288	   297	   298	   300	   301	   305	   309
IFDERR	    40#
IMAGE	    99#
INITTT	   123	   128
INPUT	     7#
IOCS	    63	   119
ITEM	   111#	   164	   166	   204	   208	   214	   236	   238
ITEMOU	   112	   204	   208	   214	   238	   277	   283	   288	   301	   312
IUSERR	    48#
J	   109#	   272	   273	   309
K	   109#	   156	   275	   287	   290	   293
L	   109#	   203	   206	   274	   276	   279	   286
LAST	   111#	   132	   149	   152	   156	   165	   317
LIST	   111	   156
LISTAB	   124	   159
LITEM	   111#	   133	   149	   152
LLEN	    93#	    94
LNGERR	    54#
LOCWPF	    75#	    78	    79	    81	    82	    83	    84	    85	    86
M	   109#	   203	   210	   274	   282	   293	   294	   295	   296	   297
MAKESI	   124	   170	   175	   183	   265
MAXARG	    76#	    79
MAXWPF	    79#
MINARG	    77#	    78
MSG	    71	   134	   138	   147	   152	   159	   161	   163	   178	   322	   324
N	   109#	   275	   293
NAMARG	    83#
NBYV	   106#
NEW	    14#
NOCHAN	   108	   169	   174	   182	   196	   201	   222	   230	   244	   249	   254	   259	   264	   268
	   326#
NUMBER	   125#	   147	   152	   163	   164	   197	   202	   223	   231	   245	   250	   255	   260	   269
NUMOUT	   123	   147	   152	   194	   199	   206	   210	   220	   225	   236	   242	   266	   279	   290
	   320	   321
OCTOUT	   123
OCTWDO	   123	   177
OFFALT	    72	   119
OLD	    15#
ONALT	    72
ONALTC	    72
OPEN	    63	   121	   131
OUT	   124	   167	   172	   177	   180	   187	   194	   199	   205	   209	   215	   220	   225	   235
	   237	   239	   242	   247	   252	   257	   262	   266	   278	   280	   284	   289	   302	   313
	   320	   321
OUTMSG	    10#
OUTPUT	     9#	   131
E
SYMBOL CROSS REFERENCE

P	   125#	   135	   145	   149	   150	   161
PACK	    26#
PLNCHK	    64
PLNW	    64
PPNARG	    82#
PREV	   145	   156#
PRINT	    71
PRINTC	    71
PROMPT	   125	   134#	   139	   147	   152	   163	   240	   319	   320	   321	   322	   324	   327
PRTERR	    49#
PRVARG	    85#
PUT	    70
PUTC	    70
PUTX	    70
Q	   112#
R	    65
RB	    67
RDREC	   112	   165
RELEAS	    68
RENAME	    69
SEQUEN	    19#	   131
SETCFN	    62
SETCP	    66
SETFID	    63
SETPRM	    65
SETRWE	    71
SETTAB	    64
SETTER	    65
SIXOUT	   123	   167	   172	   180	   262
SIZE	    66
START	   108#	   119#
SYSNO	   112#
TABOFF	    65
TEL	    32#	   135
TELERR	    55#
TMFERR	    36#
TOKEN	   123#	   129	   170	   175	   183	   185	   186	   190	   265	   327
TOT	   108#	   308	   309	   310	   311	   314	   315
TTYLEN	    70
UPDATE	     8#	   121
USRNAM	    88#
W	    66
WB	    67
WD	   110#	   165	   167	   170	   172	   175	   177	   180	   183	   187	   190	   194	   197	   199
	   202	   203	   213	   216	   220	   223	   225	   231	   234	   242	   245	   247	   250	   252
	   255	   257	   260	   262	   265	   266	   269	   272	   274	   275	   297	   298	   300	   305
	   309	   310	   311	   315
WFID	    63
WORD	    24#	   121
WPF	    78#
WREC	   112	   317
WX	    66
X	   111	   199	   202	   203	   213	   216	   220	   223	   225	   231	   234	   242	   245	   247
E
SYMBOL CROSS REFERENCE

	   250    