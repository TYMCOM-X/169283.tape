(DECLARE (SPECIAL FILENAME FUNLIST PAGELINE STIME)
	 (SPECIAL BASE *NOPOINT))

(DE ADDTOFUNLIST (NAME TYPE)
  (SETQ FUNLIST
        (MERGE (ATTACHKEY (LIST NAME TYPE (CONS FILENAME PAGELINE)))
	       FUNLIST)))


(DE ATTACHKEY (LIST) (CONS (MKKEY LIST) LIST))

(DE CURCOL NIL (*DIF (ADD1 (LINELENGTH NIL)) (CHRCT)))

(DEFPROP INDEX
 (LAMBDA (FILES)
	 (PROG (EXPR FILENAME FUNLIST INDEV OUTDEV OUTFILE PAGELINE STIME)
	       (SETQ INDEV (QUOTE DSK:))
	       (SETQ OUTDEV (QUOTE DSK:))
	  OLOOP(COND ((NULL FILES) (PRINTINDEX OUTDEV OUTFILE FUNLIST)
				   (RETURN NIL)))
	       (COND ((ISINPUT (CAR FILES)) (GO IN))
		     ((ISOUTPUT (CAR FILES)) (GO OUT)))
	       (INC (EVAL (LIST (QUOTE INPUT) INDEV (CAR FILES))) NIL)
	       (SETQ FILENAME (CAR FILES))
	       (SETQ STIME (TIME))
	  ILOOP(SETQ EXPR (ERRSET (NEWREAD)))
	       (COND ((EQ EXPR (QUOTE $EOF$)) (GO ELOOP)))
	       (PROCESSEXPR (CAR EXPR))
	       (GO ILOOP)
	  ELOOP(INC NIL T)
	       (SETQ FILES (CDR FILES))
	       (GO OLOOP)
	  IN   (SETQ INDEV (CAR FILES))
	       (GO ELOOP)
	  OUT  (PRINTINDEX OUTDEV OUTFILE FUNLIST)
	       (SETQ OUTFILE (COND ((NULL (CDAR FILES)) (CAAR FILES))
				   (T (CADAR FILES))))
	       (COND ((NOT (NULL (CDAR FILES))) (SETQ OUTDEV (CAAR FILES))))
	       (GO ELOOP)))
	 FEXPR)

(DE INDEXDE (EXPR) (ADDTOFUNLIST (CADR EXPR) (QUOTE EXPR)))

(DE INDEXDECLARE (EXPR) (MAPC (FUNCTION PROCESSEXPR) (CDR EXPR)))

(DE INDEXDEFPROP (EXPR)
  (COND ((GET (CADDDR EXPR) (QUOTE INDTYPE))
	 (ADDTOFUNLIST (CADR EXPR) (CADDDR EXPR)))))

(DE INDEXDEFUN (EXPR)
  (PROG (LEN)
	(SETQ LEN (LENGTH EXPR))
	(COND ((EQUAL LEN 4) (ADDTOFUNLIST (CADR EXPR) (QUOTE EXPR))
			     (RETURN NIL)))
	(ADDTOFUNLIST (CADR EXPR) (CADDR EXPR))))

(DE INDEXDF (EXPR) (ADDTOFUNLIST (CADR EXPR) (QUOTE FEXPR)))

(DE INDEXDFUNC (EXPR) (ADDTOFUNLIST (CAADR EXPR) (QUOTE EXPR)))

(DE INDEXDM (EXPR) (ADDTOFUNLIST (CADR EXPR) (QUOTE MACRO)))

(DE INDEXLAP (EXPR)
  (COND ((GET (CADDR EXPR) (QUOTE INDTYPE))
	 (ADDTOFUNLIST (CADR EXPR) (CADDR EXPR)))))

(DE INDEXSETQ (EXPR) (ADDTOFUNLIST (CADR EXPR) (QUOTE VALUE)))

(DE INDEXSPECIAL (EXPR)
  (PROG (VARS)
	(SETQ VARS (CDR EXPR))
   LOOP (COND ((NULL VARS) (RETURN NIL)))
	(ADDTOFUNLIST (CAR VARS) (QUOTE SPECIAL))
	(SETQ VARS (CDR VARS))
	(GO LOOP)))

(DE ISAREA (EXPR) (AND (NOT (ATOM EXPR))
			 (NOT (ATOM (CDR EXPR)))
			 (NOT (ISDEV (CAR EXPR)))))		
(DE ISDEV (EXPR) (AND (ATOM EXPR)
		 (EQ (CAR (LAST (EXPLODE EXPR))) (QUOTE :))))

(DE ISFILE (EXPR) (OR (AND (ATOM EXPR) (NOT (ISDEV EXPR)))
		      (AND (NOT (ATOM EXPR)) (ATOM (CDR EXPR)))))

(DE ISINPUT (EXPR) (OR (ISDEV EXPR) (ISAREA EXPR)))

(DE ISOUTPUT (EXPR) (AND (NOT (ATOM EXPR))
			 (OR (AND (NULL (CDR EXPR)) (ISFILE (CAR EXPR)))
			     (AND (NOT (ATOM (CDR EXPR)))
				  (ISDEV (CAR EXPR))))))

(DE ISLESS (L1 L2)
    (COND ((LESSP (CAR L1) (CAR L2)) T)
	  ((LESSP (CAR L2) (CAR L1)) NIL)
	  (T (ISLESSL (CDR L1) (CDR L2)))))

(DE ISLESSL (L1 L2) (COND ((NULL L1) T) ((NULL L2) NIL) (T (ISLESS L1 L2))))	

(DE LINEF (N)
       (PROG NIL
	LOOP (COND ((ZEROP N) (RETURN NIL)))
	     (TERPRI)
	     (SETQ N (SUB1 N))
	     (GO LOOP)))
 
(DE MERGE (ELEM LIST)
    (PROG (TEM)
	  (SETQ TEM LIST)
     LOOP (COND ((NULL TEM) (RETURN (LIST ELEM))))
	  (COND ((ISLESS (CAR ELEM) (CAAR TEM))
		 (RPLACA (RPLACD TEM (CONS (CAR TEM) (CDR TEM))) ELEM)
		 (RETURN LIST)))
	  (COND ((NULL (CDR TEM)) (NCONC TEM (LIST ELEM)) (RETURN LIST)))
	  (SETQ TEM (CDR TEM))
	  (GO LOOP)))

(DE MKKEY (ITEM)
    (PROG (PNAME KEY)
	  (SETQ PNAME (GET (CAR ITEM) (QUOTE PNAME)))
     LOOP (COND ((NULL PNAME) (RETURN (REVERSE KEY))))
	  (SETQ KEY (CONS (EXAMINE (MAKNUM (CAR PNAME) (QUOTE FIXNUM))) KEY))
	  (SETQ PNAME (CDR PNAME))
	  (GO LOOP)))

(DE NEWREAD NIL
  (PROG NIL
  LOOP (COND ((MEMQ (NEXTTYI) (QUOTE (11 12 14 15 40))) (TYI) (GO LOOP)))
	      (SETQ PAGELINE (PGLINE))
	      (RETURN (READ))))

(DEFSYM (QUOTE TYI) 1027)

(DEFSYM (QUOTE OLDCH) 1112)

(LAP NEXTTYI SUBR)
	(PUSHJ P TYI)
	(MOVEM 1 OLDCH)
	(JRST 0 FIX1A)
	NIL

(DE PRINL (L) (MAPC (FUNCTION PRINS) L)) 
 
(DE PRINS (EXP) (PROG2 (PRIN1 EXP) (PRINC (ASCII 40))))

(DE PRINTHEADING NIL
  (PROG NIL
	(PRIN1 (QUOTE NAME))
	(TABTO 30)
	(PRIN1 (QUOTE TYPE))
	(TABTO 50)
	(PRIN1 (QUOTE FILE))
	(TABTO 70)
	(PRIN1 (QUOTE PAGE))
	(TABTO 100)
	(PRIN1 (QUOTE LINE))
	(LINEF 3)))

(DE PRINTENTRY (DATUM)
  (PROG NIL
	(PRIN1 (CAR DATUM))
	(TABTO 30)
	(PRIN1 (CADR DATUM))
	(TABTO 50)
	(COND ((ATOM (CAR (CADDR DATUM))) (PRIN1 (CAR (CADDR DATUM))))
	      (T (PRIN1 (CAR (CAR (CADDR DATUM))))
		 (PRINC (ASCII 56))
		 (PRIN1 (CDR (CDR (CADDR DATUM))))))
	(TABTO 70)
	(PRIN1 (CADR (CADDR DATUM)))
	(TABTO 100)
	(PRIN1 (CDDR (CADDR DATUM)))
	(LINEF 1)))

(DE PRINTINDEX (DEV FILE DATA)
  (PROG (*NOPOINT BASE DATUM COUNT)
	(SETQ COUNT 0)
	(COND ((NULL DATA) (RETURN NIL)))
	(COND ((NOT (NULL FILE))
	      (OUTC (EVAL (LIST (QUOTE OUTPUT) DEV FILE)) NIL)))
	(SETQ BASE (PLUS 5 5))
	(SETQ *NOPOINT T)
	(PRINTHEADING)
   LOOP	(COND ((NULL DATA) (GO EXIT)))
	(PRINTENTRY (CDAR DATA))
	(SETQ DATA (CDR DATA))
	(SETQ COUNT (ADD1 COUNT))
	(GO LOOP)
   EXIT	(OUTC NIL T)
	(PRINT COUNT)
	(PRINL (QUOTE (ENTRIES IN INDEX)))
	(PRINS (ADD1 (QUOTIENT (*DIF (TIME) STIME) 1000.)))
	(PRINS (QUOTE SECONDS))))

(DE PRINTN (CHAR NUM)
       (PROG (NO)
	     (SETQ NO 1)
	LOOP (COND ((LESSP NUM NO) (RETURN NUM)))
	     (PRINC CHAR)
	     (SETQ NO (ADD1 NO))
	     (GO LOOP)))

(DE PROCESSEXPR (EXPR)
  (PROG (PROP)
	(COND ((ATOM EXPR) (RETURN NIL)))
	(SETQ PROP (GETL (CAR EXPR) (QUOTE (INDFUN))))
	(COND ((NULL PROP) (RETURN NIL)))
	((CADR PROP) EXPR)))

(DE TABTO (COLUMN)
  (COND ((GREATERP (CURCOL) COLUMN) (LINEF 1))
	(T (PRINTN (ASCII 11) (LSH (*DIF COLUMN (CURCOL)) -3))
	   (PRINTN (ASCII 40) (*DIF COLUMN (CURCOL))))))

(DEFPROP DE INDEXDE INDFUN)

(DEFPROP DECLARE INDEXDECLARE INDFUN)

(DEFPROP DEFPROP INDEXDEFPROP INDFUN)

(DEFPROP DEFUN INDEXDEFUN INDFUN)

(DEFPROP DF INDEXDF INDFUN)

(DEFPROP DFUNC INDEXDFUNC INDFUN)

(DEFPROP DM INDEXDM INDFUN)

(DEFPROP LAP INDEXLAP INDFUN)

(DEFPROP SETQ INDEXSETQ INDFUN)

(DEFPROP SPECIAL INDEXSPECIAL INDFUN)

(DEFPROP EXPR T INDTYPE)

(DEFPROP FEXPR T INDTYPE)

(DEFPROP SUBR T INDTYPE)

(DEFPROP FSUBR T INDTYPE)

(DEFPROP LSUBR T INDTYPE)

(DEFPROP MACRO T INDTYPE)

(DEFPROP SPECIAL T INDTYPE)

(DEFPROP VALUE T INDTYPE)

(DE INDLAB NIL
 (INDEX (DSK: (MATHLA . IND)) (MLB,WD)
	(MACROS . L2) (BHAND1 . HL)
	(BSIMP1 . L) (BRATS1 . L)
	(DIF8 . L) (ILT2 . L)
	(FACT6 . L) (SOL6 . L) MATRIX
	(INT2 . L) (CELT6 . L) (LDE7 . L)
	PREFIX DISP (MLAB37 . L) (TOP9 . L)))

(DECLARE (SPECIAL LOC CONLIST GEN REMOB)
	 (SPECIAL BPORG KLIST BASE *NOPOINT)
	 (SPECIAL %FUNCTIONLIST% PAGEWIDTH)
	 (DEFPROP DEFSYM T *SUBR))

(DE CLEARCOUNTS ()
    (PROG (FUNS)
	  (SETQ FUNS %FUNCTIONLIST%)
     LOOP (COND ((NULL FUNS) (RETURN NIL)))
	  (PUTPROP (CAR FUNS) 0 (QUOTE %EXECUTIONCOUNT%))
	  (SETQ FUNS (CDR FUNS))
	  (GO LOOP)))

(DEFPROP LAP
	 (LAMBDA (SL)
		 (PROG (LOC CONLIST GEN REMOB L CNT)
		       (SETQ GEN (GENSYM))
		       (SETQ CONLIST (LIST NIL))
		       (SETQ LOC BPORG)
		       (SETQ CNT (ADD1 (MAKNUM 0 (QUOTE FIXNUM))))
		       (RPLACD (CDDR CNT) NIL)
		       (PUTPROP (CAR SL) CNT (QUOTE %EXECUTIONCOUNT%))
		       (SETQ %FUNCTIONLIST% (CONS (CAR SL) %FUNCTIONLIST%))
		       (DEPOSIT LOC
				(GWD (LIST 350000
					   0
					   (MAKNUM (CDDR CNT)
						   (QUOTE FIXNUM)))))
		       (SETQ LOC (ADD1 LOC))
		  A    (COND ((NULL (SETQ L (READ))) (GO END))
			     ((ATOM L) (DEFSYM L LOC) (GO A))
			     ((AND (EQ (CAR L) 0)
				   (EQ (LENGTH L) 3)
				   (NOT (ATOM (CADDR L)))
				   (EQ (CAADDR L) (QUOTE SPECIAL)))
			      (RPLACA (CADDR L) (QUOTE QUOTE))))
		       (DEPOSIT LOC (GWD L))
		       (SETQ LOC (ADD1 LOC))
		       (GO A)
		  END  (DEFSYM GEN LOC)
		  EN1  (COND ((NULL (SETQ CONLIST (CDR CONLIST)))
			      (EVAL (CONS (QUOTE REMOB) REMOB))
			      (PUTPROP (CAR SL) (NUMVAL BPORG) (CADR SL))
			      (RETURN (LIST (CAR SL) (SETQ BPORG LOC)))))
		       (SETQ KLIST (CONS (CONS (CAR CONLIST) LOC) KLIST))
		       (DEPOSIT LOC (GWD (CAR CONLIST)))
		       (SETQ LOC (ADD1 LOC))
		       (GO EN1)))
	 FEXPR)

(DE MAXCOUNT (FUNS)
    (PROG (FNCNT MAX)
	  (SETQ MAX 0)
     LOOP (COND ((NULL FUNS) (RETURN MAX)))
	  (SETQ FNCNT (GET (CAR FUNS) (QUOTE %EXECUTIONCOUNT%)))
	  (COND ((GREATERP FNCNT MAX) (SETQ MAX FNCNT)))
	  (SETQ FUNS (CDR FUNS))
	  (GO LOOP)))

(DE MAXWIDTH (FUNS)
    (PROG (FNWTH MAX)
	  (SETQ MAX 0)
     LOOP (COND ((NULL FUNS) (RETURN MAX)))
	  (SETQ FNWTH (FLATSIZE (CAR FUNS)))
	  (COND ((GREATERP FNWTH MAX) (SETQ MAX FNWTH)))
	  (SETQ FUNS (CDR FUNS))
	  (GO LOOP)))

(DE PRINTSPACES (N)
    (PROG NIL
     LOOP (COND ((ZEROP N) (RETURN NIL)))
	  (PRINC (QUOTE / ))
	  (SETQ N (SUB1 N))
	  (GO LOOP)))

(DE PRINTTABS (N)
    (PROG NIL
     LOOP (COND ((ZEROP N) (RETURN NIL)))
	  (PRINC (QUOTE /	))
	  (SETQ N (SUB1 N))
	  (GO LOOP)))

(DF SHOWCOUNTS (FILE)
    (PROG (CLASSES FUNS FUNCNT INTERVAL MAXCNT MAXWTH BASE *NOPOINT)
	  (COND ((NOT (NULL FILE))
		 (EVAL (CONS (QUOTE OUTPUT)
			     (COND ((NULL (CDR FILE))
				    (CONS (QUOTE DSK:) FILE))
				   (T FILE))))
		 (OUTC T NIL)))
	  (LINELENGTH PAGEWIDTH)
	  (SETQ FUNS (REVERSE %FUNCTIONLIST%))
	  (SETQ MAXCNT (MAXCOUNT FUNS))
	  (SETQ MAXWTH (TIMES 10 (ADD1 (QUOTIENT (MAXWIDTH FUNS) 10))))
	  (SETQ CLASSES (SUB1 (QUOTIENT (DIFFERENCE PAGEWIDTH MAXWTH) 10)))
	  (SETQ INTERVAL (ADD1 (QUOTIENT MAXCNT CLASSES)))
     LOOP (COND ((NULL FUNS) (OUTC NIL T) (RETURN NIL)))
	  (TERPRI)
	  (PRINC (CAR FUNS))
	  (PRINTSPACES (DIFFERENCE MAXWTH (FLATSIZE (CAR FUNS))))
	  (SETQ FUNCNT (GET (CAR FUNS) (QUOTE %EXECUTIONCOUNT%)))
	  (COND ((ZEROP FUNCNT) (GO ELOOP)))
	  (PRINTTABS (ADD1 (QUOTIENT FUNCNT INTERVAL)))
	  (PRINC FUNCNT)
     ELOOP(SETQ FUNS (CDR FUNS))
	  (GO LOOP)))

(SETQ PAGEWIDTH 120)

(SETQ %FUNCTIONLIST% NIL)

	I HAVE A COUPLE OF LITTLE HACKS WHICH MIGHT INTEREST YOU.
THE PROGRAM INDEX[IND,WD] MAKES AN INDEX OF A SET OF LISP PROGRAMS.
THE FILE INDLAB[MLB,WD] IS AN EXAMPLE OF ITS COMMAND FORMAT.
	THE FILE DAVTIM[LAP,WD] CONTAINS ROUTINES FOR YOUR LAP, WHICH
ADD ONE INSTRUCTION TO EACH ROUTINE AS IT IS ASSEMBLED WHICH KEEPS COUNT
OF THE NUMBER OF TIMES IT IS CALLED.  THE RESULTS CAN BE SEEN BY CALLING
THE FUNCTION  SHOWCOUNTS(file).
					WHIT

07-MAR-72  0546		IND,WD
	I notice that you have an MLISP copy of CMP48O.  Though this contains
no radical changes from the current CMP48L it does have bugs in it, so beware.
The bugs you found have not been corrected in any copy.  
					Whit

07-MAR-72  0528		IND,WD
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         