MAIN  	BLISS 4.0-4.0 	5-DEC-74  	20:58:27 	DRELD.BLI		Page 1

BMODULEDRELDDOLLARFSAVEENTRIE$DRELDTIMINGTIMEREXTERNSIX12C	     	 MODULE DRELD(DOLLAR,FSAVE,ENTRIES=($DRELD),TIMING,TIMER=EXTERNAL(SIX12))=
BC	     	 
BBEGINC	     	 BEGIN
BC	     	 
BC	     	 % THIS MODULE IS USED TO MAKE AN ASSEMBLY LANGUAGE LISTING
BC	     	 IT MUST BE CALLED BY THE MODULE FOOL.
BC	     	 /RAF......................15-NOV-74.
BC	     	 %
BC	     	 
BREQUIRSREGBREGFREGVREG.ENT.0.EXT.0.ENT.1.EXT.1.ENT.2.EXT.2.ENT.3.EXT.3.ENT.4.EXT.4.ENT.5.EXT.5DBJDEFSC	     	 REQUIRE JDEFS.BLI[7,107355];
BSWITCHNOLISTC	     	 SWITCHES NOLIST;
BUNDECLFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBWDEFSC	     	 REQUIRE WDEFS.BLI[7,107355];
BSWITCHNOLISTC	     	 SWITCHES NOLIST;
BUNDECLFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBKDEFSC	     	 REQUIRE KDEFS.BLI[7,107355];
BSWITCHNOLISTC	     	 SWITCHES NOLIST;
BUNDECLFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBRDEFSC	     	 REQUIRE RDEFS.BLI[7,107355];
BSWITCHNOLISTC	     	 SWITCHES NOLIST;
BUNDECLFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBCDEFSC	     	 REQUIRE CDEFS.BLI[7,107355];
BSWITCHNOLISTC	     	 SWITCHES NOLIST;
BUNDECLFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBDDEFSC	     	 REQUIRE DDEFS.BLI[7,107355];
BSWITCHNOLISTC	     	 SWITCHES NOLIST;
BUNDECLFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBUDEFSC	     	 REQUIRE UDEFS.BLI[7,107355];
BSWITCHNOLISTC	     	 SWITCHES NOLIST;
BUNDECLFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBSDEFSC	     	 REQUIRE SDEFS.BLI[7,107355];
BSWITCHNOLISTC	     	 SWITCHES NOLIST;
BUNDECLFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB$DRELD$DRELDC	     	 UNDECLARE $DRELD;
BC	     	 
BBINDMOVEMOVEC	     	 BIND   MOVE = #200,
BMOVEIMOVEIC	     	        MOVEI = #201,
BJUMPEC	     	        JUMPE = #322,
BJUMPNC	     	        JUMPN = #326,
BJRSTJRSTC	     	        JRST = #254,
BPUSHPUSHC	     	        PUSH = #261,
BPUSHJPUSHJC	     	        PUSHJ = #260,
BSUBC	     	        SUB = #274,
BHRRZIC	     	        HRRZI = #551,
BHLRC	     	        HLR = #544,
BHRLMC	     	        HRLM = #506,
BHLLZSC	     	        HLLZS = #513,
BHRRMC	     	        HRRM = #542,
BSETZC	     	        SETZ = #400,
BPOPJPOPJC	     	        POPJ = #263,
BHRRZC	     	        HRRZ = #550,
BPOPPOPC	     	        POP = #262,
BMOVNC	     	        MOVN = #210,
BMOVNIC	     	        MOVNI = #211,
BCAIGC	     	        CAIG = #307,
BCAILC	     	        CAIL = #301,
BCAMGC	     	        CAMG = #317,
BCAMLC	     	        CAML = #311,
BCAILEC	     	        CAILE = #303,
BCAIGEC	     	        CAIGE = #305,
BCAMLEC	     	        CAMLE = #313,
BCAMGEC	     	        CAMGE = #315,
BCAIEC	     	        CAIE = #302,
BCAMEC	     	        CAME = #312,
BCAINC	     	        CAIN = #306,
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:05:05 	DRELD.BLI		Page 1-1

BCAMNC	     	        CAMN = #316,
BMOVEMMOVEMC	     	        MOVEM = #202,
BLANDC	     	        LAND = #404,
BANDIC	     	        ANDI = #405,
BIORIC	     	        IORI = #435,
BIORC	     	        IOR = #434,
BIMULC	     	        IMUL = #220,
BIMULIC	     	        IMULI = #221,
BSKIPLC	     	        SKIPL = #331,
BLADDC	     	        LADD = #270,
BADDIC	     	        ADDI = #271,
BIDIVC	     	        IDIV = #230,
BIDIVIC	     	        IDIVI = #231,
BDMOVMC	     	        DMOVM = #124,
BSKIPGC	     	        SKIPG = #337,
BSETZMC	     	        SETZM = #402,
BBLTBLTC	     	        BLT = #251,
BHRLIC	     	        HRLI = #505,
BHRRIC	     	        HRRI = #541,
BDMOVEC	     	        DMOVE = #120,
BTRNEC	     	        TRNE = #602,
BSKIPGEC	     	        SKIPGE = #335,
BTRNNC	     	        TRNN = #606,
BSETOC	     	        SETO = #474,
BAOJC	     	        AOJ = #340,
BSOJC	     	        SOJ = #360,
BTLZC	     	        TLZ = #621,
BJUMPGEC	     	        JUMPGE = #325,
BSUBIC	     	        SUBI = #275,
BMULC	     	        MUL = #224,
BMULIC	     	        MULI = #225,
BTLOC	     	        TLO = #661,
BLDIVC	     	        LDIV = #234,
BDIVIC	     	        DIVI = #235,
BSKIPLEC	     	        SKIPLE = #333,
BSKIPEC	     	        SKIPE = #332,
BSKIPNC	     	        SKIPN = #336,
BMOVMC	     	        MOVM = #214,
BTRCC	     	        TRC = #640,
BHLRZC	     	        HLRZ = #554,
BSOJGC	     	        SOJG = #367,
BANDMC	     	        ANDM = #406,
BHRLC	     	        HRL = #504,
BLDBLDBC	     	        LDB = #135,
BHRLZIC	     	        HRLZI = #515,
BIORMC	     	        IORM = #436,
BTDNEC	     	        TDNE = #612;
BC	     	 
BC	     	 % HPOX PRINTS HALF A WORD IN OCTAL WITH LEADING ZEROS. %
BC	     	 
BROUTINHPOXARGC	     	 ROUTINE HPOX(ARG)=
BBEGINLOCALTC	     	   BEGIN LOCAL T;
BC	     	 
BTARGC	     	         T_ARG<18,3>;    % CREATE A STRING POINTER %
BINCRIFROMTOIDOC	     	         INCR I FROM 1 TO 6 DO
B$UOCHRSCANITC	     	           $UOCHR(SCANI(T)+"0");
BENDC	     	   END;
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:05:09 	DRELD.BLI		Page 1-2

BC	     	 
BROUTINDBSYMPOTPTRC	     	 ROUTINE SYMPOTS(PTR)=   %PRINT SYMBOL TABLE ENTRIES%
BBEGINLOCALS$SPSPXC	     	     BEGIN LOCAL S$ SP,X;
BC	     	 
BSP$SGSTEPTRC	     	         SP_$SGSTE(.PTR);      % GET SYMBOL TABLE ENTRY. %
BSELECTSPS$TYPEOFC	     	         SELECT .SP[S$TYPE] OF
BNSETC	     	           NSET
BC	     	 
BSV$NAM$UAPSCSPS$NAMESPS$NCHAC	     	           SV$NAME:      $UAPSC((SP[S$NAME])[1]<36,7>,.SP[S$NCHAR]);
BC	     	 
BSV$LAB$UAPSCSPS$NAMESPS$NCHAC	     	           SV$LABEL:     $UAPSC((SP[S$NAME])[1]<36,7>,.SP[S$NCHAR]);
BC	     	 
BSV$RW$UAPSCSPS$NAMESPS$NCHAC	     	           SV$RW:        $UAPSC((SP[S$NAME])[1]<36,7>,.SP[S$NCHAR]);
BC	     	 
BSV$STL$UAPSCSPS$NAMESPS$NCHAC	     	           SV$STLIT:     $UAPSC((SP[S$NAME])[1]<36,7>,.SP[S$NCHAR]);
BC	     	 
BSV$LABBEGINXSPS$STP1C	     	           SV$LABINC:    BEGIN X_.SP[S$STP1];
B$SFRNCSPSP$SGSTEXC	     	                           $SFRNCH(.SP); SP_$SGSTE(.X);
B$UAPSCSPS$NAMESPS$NCHAC	     	                           $UAPSC((SP[S$NAME])[1]<36,7>,.SP[S$NCHAR]);
BENDC	     	                         END;
BC	     	 
BSV$SYSBEGINC	     	           SV$SYSADCON:  BEGIN
B$UAPSZSELECTSPS$AVBOFC	     	                           $UAPSZ( SELECT .SP[S$AVB] OF     % SELCET A BASE TO PRINT %
BNSETC	     	                                 NSET
BC	     	 
BDBV$PR$USPTRPLITASCIZC	     	                        DBV$PROCBASE:       $USPTR('PROCBASE');
BDBV$PR$USPTRPLITASCIZC	     	                             DBV$PROGBASE:       $USPTR('PROGBASE');
BDBV$FI$USPTRPLITASCIZC	     	                             DBV$FIBASE:         $USPTR('FIBASE');
BDBV$DD$USPTRPLITASCIZC	     	                             DBV$DDBASE:         $USPTR('DDBASE');
BDBV$RS$USPTRPLITASCIZC	     	                             DBV$RSBBASE:        $USPTR('RSBBASE');
BDBV$RB$USPTRPLITASCIZC	     	                             DBV$RBBASE:         $USPTR('RBBASE');
BDBV$SC$USPTRPLITASCIZC	     	                             DBV$SCBBASE:        $USPTR('SCBBASE');
BDBV$LI$USPTRPLITASCIZC	     	                             DBV$LITBASE:        $USPTR('LITBASE');
BDBV$LN$USPTRPLITASCIZC	     	                             DBV$LNEBASE:        $USPTR('LNEBASE');
BDBV$TE$USPTRPLITASCIZC	     	                             DBV$TEMPBASE:       $USPTR('TEMPBASE');
BDBV$ST$USPTRPLITASCIZC	     	                             DBV$STEMPBASE:      $USPTR('STEMPBASE');
BDBV$RC$USPTRPLITASCIZC	     	                             DBV$RCBBASE:        $USPTR('RCBBASE');
BOTHERW$USPTRPLITASCIZC	     	                             OTHERWISE:  $USPTR('BASELESS BASE');
BC	     	 
BTESNC	     	                                 TESN);
BC	     	 
B$UOCHR$UAPOCSPS$AVFOC	     	                           $UOCHR("+"); $UAPOC(.SP[S$AVFO]);
BENDC	     	                         END;
BC	     	 
BSV$SYSBEGIN$UOCHRC	     	           SV$SYSLIT:    BEGIN $UOCHR("[");
B$UAPOCSPS$NAMEC	     	                           $UAPOC(.((SP[S$NAME])[1])<18,18>);   % TYPE NAME %
B$UOCHR$UOCHRC	     	                           $UOCHR(","); $UOCHR(",");        % SEPERATE LEFT FROM RIGHT %
B$UAPOCSPS$NAMEC	     	                           $UAPOC(.((SP[S$NAME])[1])< 0,18>);     % TYPE NAME %
B$UOCHRC	     	                           $UOCHR("]");
BENDC	     	                         END;
BC	     	 
BSV$LIEIFSPS$DDTYEQLSV$SINTHENC	     	           SV$LIE:       IF .SP [S$DDTYPE] EQL SV$SINGD THEN      % IS IT A NUMBER? %
BBEGIN$DIVOT$UAPSZ$USPTRPLITASCIZC	     	                           BEGIN $DIVOT('^D');
B$UAPDCSPS$NAMEC	     	                             $UAPDC(.(SP[S$NAME])[1]);
BENDC	     	                           END
BELSEIFSPS$DDTYEQLSV$SLIC	     	                             ELSE IF .SP[S$DDTYPE] EQL SV$SLIT   % NO IT'S A NAME %
BTHEN$UAPSCSPS$NAMESPS$NCHAC	     	                               THEN $UAPSC((SP[S$NAME])[1]<36,7>,.SP[S$NCHAR]);    % TYPE NAME %
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:05:49 	DRELD.BLI		Page 1-3

BC	     	 
BSV$SWLBEGINC	     	           SV$SWLIT:     BEGIN
B$DIVOT$UAPSZ$USPTRPLITASCIZC	     	                            $DIVOT('^D');
B$UAPDCSPS$NAMEC	     	                            $UAPDC(.(SP[S$NAME])[1]);
BENDC	     	                         END;
BC	     	 
BTESNC	     	         TESN;
B$SFRNCSPC	     	     $SFRNCH(.SP);             % FREEZE NO CHANGE %
BC	     	 
BENDC	     	     END;
BC	     	 
BGLOBALDBROUTIN$DRELDDBASEC	     	 GLOBAL ROUTINE $DRELD(DBASE)=  %FORMAT & RELOCATE DELTA FILES%
BBEGINC	     	 BEGIN
BC	     	 
BLOCALPFCBC	     	 LOCAL PFCB;
BLOCALKFCB$OUTFOUTFC	     	 LOCAL KFCB$ OUTF;       % OUTPUT FILE %
BLOCALPDB$PDBPDBC	     	 LOCAL PDB$ PDB;         % PROCDURE DEFINITION BLOCK %
BLOCALS$SSC	     	 LOCAL S$ S;
BLOCALUDYNARSTPSPSTPSPC	     	 LOCAL UDYNARY$ STPSP;
BLOCALUDYNARPROGSPPROGSPBREGSCLCTKPBUFDV$MAXCBPROGSIC	     	 LOCAL UDYNARY$ PROGSP,BREGS[13],CLC[13],TKP,BUF[DV$MAXDREC],CB,PROGSIZE;
BLOCALJRL$BITSBITSC	     	 LOCAL JRL$ BITS;
BLOCALS$PPC	     	 LOCAL S$ P;
BMAPUDYNARDBASEDBASEDBASEC	     	 MAP UDYNARY$ DBASE;
BMAPD$TKPTKPC	     	 MAP D$ TKP;
BC	     	 
BC	     	 
BFUNCTIFLASHLOHIC	     	 FUNCTION FLASH(LO,HI)=
BBEGINC	     	    BEGIN
BC	     	    %FLASH PRINTS OUT IN A NICE FORMAT
BC	     	    A SECTION OF PROGSP
BC	     	 
BC	     	    /JS...................7/4/74
BC	     	    %
BC	     	 
BINCRIFROMILOTOHIDOC	     	     INCR I FROM .LO TO .HI DO
BBEGINC	     	         BEGIN
BHPOXI$DIVOT$UAPSZ$USPTRPLITASCIZC	     	         HPOX(.I<0,18>); $DIVOT('  ');             % PRINT ADDRESS IN OCTAL %
BHPOXPROGSPIC	     	         HPOX(.PROGSP[.I]<18,18>);                 % PRINT LEFT HALF OF PROGSP %
BIFBITSJ$RLLEITHEN$DIVOT$UAPSZ$USPTRPLITASCIZC	     	         IF .BITS[J$RLLEFT,.I] THEN $DIVOT(''' ')      % WAS IT RELOCATED? %
BELSE$DIVOT$UAPSZ$USPTRPLITASCIZC	     	             ELSE $DIVOT('  ');                    % NO NOT RELOCATED %
BHPOXPROGSPIC	     	         HPOX(.PROGSP[.I]<0,18>);                  % PRINT RIGHT HALF OF PROGSP %
BIFBITSJ$RLRIITHEN$DIVOT$UAPSZ$USPTRPLITASCIZC	     	         IF .BITS[J$RLRIGHT,.I] THEN $DIVOT(''' ')     % WAS IT RELOCATED? %
BELSE$DIVOT$UAPSZ$USPTRPLITASCIZC	     	             ELSE $DIVOT('  ');                    % NO NOT RELOCATED %
BIFSTPSPINEQC	     	         IF .STPSP[.I]<18,18> NEQ 0                % IS THERE A SYMBOL TABLE POINTER (RIGHT)? %
BTHENSYMPOTSTPSPIC	     	            THEN SYMPOTS(.STPSP[.I]<18,18>);       % YES PRINT THE ENTRY %
BIFSTPSPINEQC	     	         IF .STPSP[.I]< 0,18> NEQ 0                % SYMBOL TABLE POINTER (LEFT)? %
BTHENC	     	           THEN                                    % YES PRINT IT %
BBEGINIFSTPSPINEQTHEN$UOCHRC	     	             BEGIN IF .STPSP[.I]<18,18> NEQ 0 THEN $UOCHR(",");
BSYMPOTSTPSPIC	     	                 SYMPOTS(.STPSP[.I]< 0,18>);
BENDC	     	             END;
B$UOUTLC	     	         $UOUTL();                     % PRINT STUFF TO THE TERMINAL %
BENDC	     	         END;
BC	     	 
BENDC	     	     END;
BC	     	 
BC	     	 
BTKPDBBUFC	     	 TKP_BUF<0,0>;                          % SET UP BUFFER ADDRESS %
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:06:09 	DRELD.BLI		Page 1-4

B$CSTARCV$DELC	     	 $CSTART(CV$DELTAIN);                   % OPEN DELTA FILE %
BC	     	 
BPROGSICLCDBASEC	     	    PROGSIZE_CLC[0]_DBASE[0]_0;        % ZERO STUFF %
BC	     	 
BC	     	    % SET UP BASE REGISTERS %
BC	     	    %************************************%
BINCRIFROMTOIDOC	     	     INCR I FROM 1 TO 12 DO
BBEGINC	     	         BEGIN
BPROGSIPROGSIDBASEIC	     	         PROGSIZE_.PROGSIZE+.DBASE[.I];
BCLCIBREGSIDBASEICLCIC	     	         CLC[.I]_ BREGS[.I]_.DBASE[.I-1]+.CLC[.I-1];
BENDC	     	         END;
BC	     	 
BC	     	      %*********************************%
BC	     	 
BSTPSP$CGTZMPROGSIC	     	     STPSP_$CGTZM(.PROGSIZE);         % GET STPSP SPACE %
BBITS$CGTZMPROGSIC	     	     BITS_$CGTZM((.PROGSIZE+17)/18); %GET SPACE FOR RELOCATION TABLE%
BPDBPROGSP$CGTZMPROGSIC	     	     PDB_PROGSP_$CGTZM(.PROGSIZE);  % GET PROGSP SPACE %
BC	     	 
BDOBEGINC	     	     DO BEGIN
B$CINDBUFC	     	         $CIND(BUF<0,0>);      % READ A TOKEN FROM A DELTA FILE %
BC	     	 
BSELECTTKPD$TYPEOFC	     	    SELECT .TKP[D$TYPE] OF             % RELOCATE ACCORDING TO TYPE %
BNSETC	     	        NSET
BC	     	 
BC	     	          % STORE A SINGLE CONSTANT %
BC	     	 
BDV$CNSBEGINPROGSPCLCCBTKPD$WD2C	     	        DV$CNST:    BEGIN PROGSP[.CLC[.CB]]_.TKP[D$WD2];
BCLCCBCLCCBC	     	                        CLC[.CB]_.CLC[.CB]+1      % INCREMENT CURRENT LOCATION COUNTER %
BENDC	     	                    END;
BC	     	 
BC	     	          % RELOCATE BOTH ADDRESSES %
BC	     	 
BDV$DREBEGINTKPD$WD3LTKPD$WD3LC	     	        DV$DRELB:   BEGIN TKP[D$WD3L]_.TKP[D$WD3L] +
BIFTKPD$LRRNEQC	     	                      (IF .TKP[D$LRR] NEQ 0
BTHENBREGSTKPD$LRRELSEC	     	                        THEN .BREGS[.TKP[D$LRR]] ELSE 0);      % RELOCATE LEFT? %
BTKPD$WD3RTKPD$WD3RC	     	                      TKP[D$WD3R]_.TKP[D$WD3R] +
BIFTKPD$RRRNEQC	     	                        (IF .TKP[D$RRR] NEQ 0
BTHENBREGSTKPD$RRRELSEC	     	                          THEN .BREGS[.TKP[D$RRR]] ELSE 0);    % RELOCATE RIGHT? %
BPROGSPCLCCBTKPD$WD3C	     	                      PROGSP[.CLC[.CB]]_.TKP[D$WD3];           % STORE WORD %
BSTPSPCLCCBTKPD$WD2LC	     	                      STPSP[.CLC[.CB]]<18,18>_.TKP[D$WD2L];    % SYMBOL TABLE LEFT? %
BSTPSPCLCCBTKPD$WD2RC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$WD2R];    %SYMBOL TABLE RIGHT? %
BBITSJ$RLLECLCCBIFTKPD$LRRNEQC	     	                      BITS[J$RLLEFT,.CLC[.CB]]_(IF .TKP[D$LRR] NEQ 0
BTHENELSEC	     	                         THEN 1 ELSE 0);                       % RELOCATED LEFT? %
BBITSJ$RLRICLCCBIFTKPD$RRRNEQC	     	                      BITS[J$RLRIGHT,.CLC[.CB]]_(IF .TKP[D$RRR] NEQ 0
BTHENELSEC	     	                         THEN 1 ELSE 0);                      % RELOCATED RIGHT? %
BCLCCBCLCCBC	     	                      CLC[.CB]_.CLC[.CB]+1
BENDC	     	                    END;
BC	     	 
BC	     	          % RELOCATE LEFT HALF %
BC	     	 
BDV$DREBEGINTKPD$WD2LTKPD$WD2LC	     	        DV$DRELL:   BEGIN TKP[D$WD2L]_.TKP[D$WD2L] +
BIFTKPD$LRRNEQC	     	                      (IF .TKP[D$LRR] NEQ 0
BTHENBREGSTKPD$LRRELSEC	     	                        THEN .BREGS[.TKP[D$LRR]] ELSE 0);      % RELOCATE LEFT %
BPROGSPCLCCBTKPD$WD2C	     	                      PROGSP[.CLC[.CB]]_.TKP[D$WD2];
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % SYMBOL TABLE LEFT %
BBITSJ$RLLECLCCBIFTKPD$LRRNEQC	     	                      BITS[J$RLLEFT,.CLC[.CB]]_(IF .TKP[D$LRR] NEQ 0
BTHENELSEC	     	                         THEN 1 ELSE 0);                      % RELOCATED LEFT? %
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:06:32 	DRELD.BLI		Page 1-5

BCLCCBCLCCBC	     	                      CLC[.CB]_.CLC[.CB]+1;
BENDC	     	                    END;
BC	     	 
BC	     	          % RELOCATE RIGHT HALF %
BC	     	 
BDV$DREBEGINTKPD$WD2RTKPD$WD2RC	     	        DV$DRELR:   BEGIN TKP[D$WD2R]_.TKP[D$WD2R] +
BIFTKPD$RRRNEQC	     	                      (IF .TKP[D$RRR] NEQ 0
BTHENBREGSTKPD$RRRELSEC	     	                        THEN .BREGS[.TKP[D$RRR]] ELSE 0);      % RELOCATE RIGHT %
BPROGSPCLCCBTKPD$WD2C	     	                      PROGSP[.CLC[.CB]]_.TKP[D$WD2];
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % SYMBOL TABLE ? %
BBITSJ$RLRICLCCBIFTKPD$RRRNEQC	     	                      BITS[J$RLRIGHT,.CLC[.CB]]_(IF .TKP[D$RRR] NEQ 0
BTHENELSEC	     	                          THEN 1 ELSE 0);                     % RELOCATED RIGHT? %
BCLCCBCLCCBC	     	                      CLC[.CB]_.CLC[.CB]+1;
BENDC	     	                    END;
BC	     	 
BC	     	          % TERMINATE DELTA CODE %
BC	     	 
BDV$ENDC	     	        DV$END:     0;
BC	     	 
BC	     	          % IMMEDIATE INSTRUCTION %
BC	     	 
BDV$IIBEGINPROGSPCLCCBTKPD$WD2C	     	        DV$II:       BEGIN PROGSP[.CLC[.CB]]_.TKP[D$WD2];
BCLCCBCLCCBC	     	                        CLC[.CB]_.CLC[.CB]+1
BENDC	     	                    END;
BC	     	 
BC	     	          % INCREMENT LOCATION COUNTER %
BC	     	 
BDV$INCIFTKPD$LRRNEQC	     	        DV$INCR:    IF .TKP[D$LRR] NEQ 0
BTHENCLCTKPD$LRRCLCTKPD$LRRC	     	                      THEN CLC[.TKP[D$LRR]]_.CLC[.TKP[D$LRR]]+
BTKPD$OPNDC	     	                        .TKP[D$OPND];
BC	     	 
BC	     	          % RELOCATE INSTRUCTION OPERAND ADDRESS %
BC	     	 
BDV$IREBEGINTKPD$WD2RTKPD$WD2RC	     	        DV$IREL:    BEGIN TKP[D$WD2R]_.TKP[D$WD2R] +
BIFTKPD$RRRNEQC	     	                      (IF .TKP[D$RRR] NEQ 0
BTHENBREGSTKPD$RRRELSEC	     	                        THEN .BREGS[.TKP[D$RRR]] ELSE 0);      % RIGHT? %
BPROGSPCLCCBTKPD$WD2C	     	                      PROGSP[.CLC[.CB]]_.TKP[D$WD2];          % STORE. %
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % SYMBOL TABLE ? %
BBITSJ$RLRICLCCBIFTKPD$RRRNEQC	     	                      BITS[J$RLRIGHT,.CLC[.CB]]_(IF .TKP[D$RRR] NEQ 0
BTHENELSEC	     	                          THEN 1 ELSE 0);                      % RELOCATED RIGHT? %
BCLCCBCLCCBC	     	                      CLC[.CB]_.CLC[.CB]+1;
BENDC	     	                    END;
BC	     	 
BC	     	          % RELOCATE INSTRUCTION VIA SYMBOL TABLE POINTER %
BC	     	 
BDV$ISTBEGINP$SGSTETKPD$WD2RC	     	        DV$ISTP:    BEGIN P_$SGSTE(.TKP[D$WD2R]);
BTKPD$WD2RPS$DFOC	     	                      TKP[D$WD2R]_.P[S$DFO] +
BIFPS$DBNEQC	     	                        (IF .P[S$DB] NEQ 0
BTHENBREGSPS$DBELSEC	     	                          THEN .BREGS[.P[S$DB]] ELSE 0);
BBITSJ$RLRICLCCBIFPS$DBNEQC	     	                      BITS[J$RLRIGHT,.CLC[.CB]]_(IF .P[S$DB] NEQ 0
BTHENELSEC	     	                          THEN 1 ELSE 0);                   % RELOCATED RIGHT? %
B$SFRNCPC	     	                        $SFRNCH(.P);                        %FREEZE NO CHANGE %
BPROGSPCLCCBTKPD$WD2C	     	                      PROGSP[.CLC[.CB]]_.TKP[D$WD2];
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % SYMBOL TABLE ? %
BCLCCBCLCCBC	     	                      CLC[.CB]_.CLC[.CB]+1;
BENDC	     	                    END;
BC	     	 
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:07:07 	DRELD.BLI		Page 1-6

BC	     	          % STORE SINGLE WORD NUMERIC LITERAL %
BC	     	 
BDV$LITBEGINPROGSPCLCCBTKPD$WD2C	     	        DV$LIT1:    BEGIN PROGSP[.CLC[.CB]]_.TKP[D$WD2];
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % SYMBOL TABLE ? %
BCLCCBCLCCBC	     	                        CLC[.CB]_.CLC[.CB]+1
BENDC	     	                    END;
BC	     	 
BC	     	          % STORE DOUBLE WORD NUMERIC LITERAL %
BC	     	 
BDV$LITBEGINPROGSPCLCCBTKPD$WD2C	     	        DV$LIT2:    BEGIN PROGSP[.CLC[.CB]]_.TKP[D$WD2];
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % SYMBOL STUFF ? %
BCLCCBCLCCBC	     	                        CLC[.CB]_.CLC[.CB]+1;
BPROGSPCLCCBTKPD$WD3C	     	                        PROGSP[.CLC[.CB]]_.TKP[D$WD3];
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % SYMBOL WORD 2 %
BCLCCBCLCCBC	     	                        CLC[.CB]_.CLC[.CB]+1
BENDC	     	                    END;
BC	     	 
BC	     	          % STORE THREE WORD NUMERIC LITERAL %
BC	     	 
BDV$LITBEGINPROGSPCLCCBTKPD$WD2C	     	        DV$LIT3:    BEGIN PROGSP[.CLC[.CB]]_.TKP[D$WD2];
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % WORD 1 %
BCLCCBCLCCBC	     	                      CLC[.CB]_.CLC[.CB]+1;
BPROGSPCLCCBTKPD$WD3C	     	                      PROGSP[.CLC[.CB]]_.TKP[D$WD3];
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % WORD 2 %
BCLCCBCLCCBC	     	                      CLC[.CB]_.CLC[.CB]+1;
BPROGSPCLCCBTKPD$WD3C	     	                      PROGSP[.CLC[.CB]]_.(TKP[D$WD3])[1];
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % WORD 3 %
BCLCCBCLCCBC	     	                      CLC[.CB]_.CLC[.CB]+1;
BENDC	     	                    END;
BC	     	 
BC	     	          % STORE STRING OF ANSI CHATACTERS %
BC	     	 
BDV$LITBEGININCRIFROMTOITKPD$LENGDOC	     	        DV$LITS:    BEGIN INCR I FROM 0 TO .TKP[D$LENGTH]-3 DO
BPROGSPCLCCBITKPD$WD2IC	     	                      PROGSP[.CLC[.CB]+.I]_.(TKP[D$WD2])[.I];  % STORE WORD %
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % SYMBOL TABLE STUFF %
BCLCCBCLCCBTKPD$LENGC	     	                      CLC[.CB]_.CLC[.CB]+.TKP[D$LENGTH]-2;
BENDC	     	                    END;
BC	     	 
BC	     	          % STORE A NAME STRING %
BC	     	 
BDV$LITBEGININCRIFROMTOITKPD$LENGDOC	     	        DV$LITN:    BEGIN INCR I FROM 0 TO .TKP[D$LENGTH]-3 DO
BPROGSPCLCCBITKPD$WD2IC	     	                      PROGSP[.CLC[.CB]+.I-1]_.(TKP[D$WD2])[.I]; %STORE WORD %
BSTPSPCLCCBTKPD$OPNDC	     	                      STPSP[.CLC[.CB]]< 0,18>_.TKP[D$OPND];    % SYMBOL TABLE STUFF %
BCLCCBCLCCBTKPD$LENGC	     	                      CLC[.CB]_.CLC[.CB]+.TKP[D$LENGTH]-2;
BENDC	     	                    END;
BC	     	 
BC	     	          % PURPOSE AND USAGE (NOTE) %
BC	     	 
BDV$NOTIFTKPD$LRREQLTHENSTPSPTKPD$WD2RC	     	        DV$NOTE:    IF .TKP[D$LRR] EQL 1 THEN STPSP[.TKP[D$WD2R]+
BBREGSDBV$PRTKPD$OPNDC	     	                        .BREGS[DBV$PROGBASE]]<18,18>_.TKP[D$OPND];
BC	     	 
BC	     	          % SET RELOCATION REGISTER %
BC	     	 
BDV$SETCLCTKPD$LRRBREGSTKPD$LRRTKPD$OPNDC	     	        DV$SET:     CLC[.TKP[D$LRR]]_.BREGS[.TKP[D$LRR]]+.TKP[D$OPND];
BC	     	 
BC	     	          % SET RELOCATION REGISTER FOR LIBRARY LINKAGE %
BC	     	 
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:07:53 	DRELD.BLI		Page 1-7

BDV$SETC	     	        DV$SETL:    0;
BC	     	 
BC	     	          % USE SPECIFIED LOCATION COUNTER %
BC	     	 
BDV$USECBTKPD$LRRC	     	        DV$USE:     CB_.TKP[D$LRR];
BC	     	 
BTESNC	     	        TESN;
BC	     	 
BENDUNTILTKPD$TYPEEQLDV$EOFC	     	     END UNTIL .TKP[D$TYPE] EQL DV$EOF;
B$CSTOPCV$DELC	     	    $CSTOP(CV$DELTAIN);                % CLOSE DELTA FILE %
BC	     	 
BOUTF$KCRFCBEGINLOCALKFCB$FCBFCBKFIDT$FIDTFIDTFCB$CGTZMKV$FCBFIDT$CGTZMKV$DFIFIDTK$DEVISIXBITFIDTK$ARGCKV$DARFIDTK$USERFIDTK$NAMEWNAME$FIDTK$FWEXSIXBITFCBK$FIDPFIDTFCBK$MODPFCBK$DRCTKV$OUTIF$KOFCBFCB$KSQLNNEQFCBTHEN$KOPFLFCBELSEFCBENDC	     	    OUTF_$KCRFCB(.WNAME$, SIXBIT 'LST',0,KV$OUTPUT,$KSQLN,0);      % OPEN FILE %
BPFCB$UOUTIOUTFC	     	    PFCB_$UOUTI(.OUTF);                % ARRANGE FOR OUTPUT TO GO TO A FILE %
BC	     	 
BC	     	 
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$PR$UOUTLC	     	     $DIVOT('PROCBASE = '); $UAPOC(.BREGS[DBV$PROCBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$PR$UOUTLC	     	     $DIVOT('PROGBASE = '); $UAPOC(.BREGS[DBV$PROGBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$FI$UOUTLC	     	     $DIVOT('FIBASE = '); $UAPOC(.BREGS[DBV$FIBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$DD$UOUTLC	     	     $DIVOT('DDBASE = '); $UAPOC(.BREGS[DBV$DDBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$RS$UOUTLC	     	     $DIVOT('RSBBASE = '); $UAPOC(.BREGS[DBV$RSBBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$RC$UOUTLC	     	     $DIVOT('RCBBASE = '); $UAPOC(.BREGS[DBV$RCBBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$RB$UOUTLC	     	     $DIVOT('RBBASE = '); $UAPOC(.BREGS[DBV$RBBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$SC$UOUTLC	     	     $DIVOT('SCBBASE = '); $UAPOC(.BREGS[DBV$SCBBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$LI$UOUTLC	     	     $DIVOT('LITBASE = '); $UAPOC(.BREGS[DBV$LITBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$LN$UOUTLC	     	     $DIVOT('LNEBASE = '); $UAPOC(.BREGS[DBV$LNEBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$TE$UOUTLC	     	     $DIVOT('TEMPBASE = '); $UAPOC(.BREGS[DBV$TEMPBASE]); $UOUTL();
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCBREGSDBV$ST$UOUTLC	     	     $DIVOT('STEMPBASE = '); $UAPOC(.BREGS[DBV$STEMPBASE]); $UOUTL();
BC	     	 
B$DIVOT$UAPSZ$USPTRPLITASCIZ$UAPOCPROGSI$UOUTLC	     	     $DIVOT('?M?JPROGSIZE = '); $UAPOC(.PROGSIZE); $UOUTL();
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('?M?JDBV$PROGBASE'));
BC	     	 
BC	     	          % DUMP PROGBASE %
BC	     	 
BINCRIFROMIBREGSDBV$PRTOBREGSDBV$FIDOC	     	     INCR I FROM .BREGS[DBV$PROGBASE] TO .BREGS[DBV$FIBASE]-1 DO
BBEGINHPOXI$DIVOT$UAPSZ$USPTRPLITASCIZC	     	       BEGIN HPOX(.I< 0,18>); $DIVOT('  ');    % ADDRESS FIRST %
BHPOXPROGSPIC	     	         HPOX(.PROGSP[.I]<18,18>);            % LEFT HALF %
BIFBITSJ$RLLEITHEN$DIVOT$UAPSZ$USPTRPLITASCIZC	     	         IF .BITS[J$RLLEFT,.I] THEN $DIVOT(''' ')  % RELOCATED LEFT? %
BELSE$DIVOT$UAPSZ$USPTRPLITASCIZC	     	             ELSE $DIVOT('  ');               % NOT RELOCATED %
BHPOXPROGSPIC	     	         HPOX(.PROGSP[.I]< 0,18>);            % RIGHT HALF %
BIFBITSJ$RLRIITHEN$DIVOT$UAPSZ$USPTRPLITASCIZC	     	         IF .BITS[J$RLRIGHT,.I] THEN $DIVOT(''' ')   % RELOCATED RIGHT? %
BELSE$DIVOT$UAPSZ$USPTRPLITASCIZC	     	             ELSE $DIVOT('  ');                   % NOT RELOCATED %
BIFSTPSPINEQC	     	         IF .STPSP[.I]<18,18> NEQ 0    % SYMBOL TABLE POINTERS? %
BTHENC	     	           THEN
BBEGINC	     	             BEGIN
BS$SGSTESTPSPIC	     	                S_$SGSTE(.STPSP[.I]<18,18>);   % YES %
BCBSS$STP1C	     	                CB_.S[S$STP1];
B$SFRNCSC	     	                $SFRNCH(.S);
BS$SGSTECBC	     	                S_$SGSTE(.CB);
BIFSS$NCHALEQC	     	                IF .S[S$NCHAR] LEQ 9
BTHENC	     	                   THEN
B$UAPSCSS$NAMESS$NCHAC	     	                      $UAPSC((S[S$NAME])[1]<36,7>,.S[S$NCHAR]) % TYPE NAME %
BELSEC	     	                   ELSE
B$UAPSCSS$NAMEC	     	                      $UAPSC((S[S$NAME])[1]<36,7>,9);        % TYPE NAME %
B$UOCHRC	     	                $UOCHR(":");
BINCRCBFROMCBSS$NCHATODOC	     	                INCR CB FROM .S[S$NCHAR] TO 10 DO
B$UOCHRC	     	                   $UOCHR(" ");                   % ADD EXTRA BLANKS TO KEEP THINGS IN LINE %
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:08:23 	DRELD.BLI		Page 1-8

B$SFRNCSC	     	                $SFRNCH(.S);
BENDC	     	             END
BELSE$DIVOT$UAPSZ$USPTRPLITASCIZC	     	           ELSE $DIVOT('            ');         %NO POINTER %
BC	     	 
B$UAPSZSELECTPROGSPIOFC	     	        $UAPSZ( SELECT .PROGSP[.I]<27,9> OF    % SELECT INSTRUCTION %
BNSETC	     	            NSET
BC	     	 
BMOVE$USPTRPLITASCIZC	     	            MOVE:       $USPTR('MOVE    ');
BMOVEI$USPTRPLITASCIZC	     	            MOVEI:      $USPTR('MOVEI   ');
BJUMPE$USPTRPLITASCIZC	     	            JUMPE:      $USPTR('JUMPE   ');
BJUMPN$USPTRPLITASCIZC	     	            JUMPN:      $USPTR('JUMPN   ');
BJRST$USPTRPLITASCIZC	     	            JRST:       $USPTR('JRST    ');
BPUSH$USPTRPLITASCIZC	     	            PUSH:       $USPTR('PUSH    ');
BPUSHJ$USPTRPLITASCIZC	     	            PUSHJ:      $USPTR('PUSHJ   ');
BSUB$USPTRPLITASCIZC	     	            SUB:        $USPTR('SUB     ');
BHRRZI$USPTRPLITASCIZC	     	            HRRZI:      $USPTR('HRRZI   ');
BHLR$USPTRPLITASCIZC	     	            HLR:        $USPTR('HLR     ');
BHRLM$USPTRPLITASCIZC	     	            HRLM:       $USPTR('HRLM    ');
BHLLZS$USPTRPLITASCIZC	     	            HLLZS:      $USPTR('HLLZS   ');
BHRRM$USPTRPLITASCIZC	     	            HRRM:       $USPTR('HRRM    ');
BSETZ$USPTRPLITASCIZC	     	            SETZ:       $USPTR('SETZ    ');
BPOPJ$USPTRPLITASCIZC	     	            POPJ:       $USPTR('POPJ    ');
BHRRZ$USPTRPLITASCIZC	     	            HRRZ:       $USPTR('HRRZ    ');
BPOP$USPTRPLITASCIZC	     	            POP:        $USPTR('POP     ');
BMOVN$USPTRPLITASCIZC	     	            MOVN:       $USPTR('MOVN    ');
BMOVNI$USPTRPLITASCIZC	     	            MOVNI:      $USPTR('MOVNI   ');
BCAIG$USPTRPLITASCIZC	     	            CAIG:       $USPTR('CAIG    ');
BCAIL$USPTRPLITASCIZC	     	            CAIL:       $USPTR('CAIL    ');
BCAMG$USPTRPLITASCIZC	     	            CAMG:       $USPTR('CAMG    ');
BCAML$USPTRPLITASCIZC	     	            CAML:       $USPTR('CAML    ');
BCAILE$USPTRPLITASCIZC	     	            CAILE:      $USPTR('CAILE   ');
BCAIGE$USPTRPLITASCIZC	     	            CAIGE:      $USPTR('CAIGE   ');
BCAMLE$USPTRPLITASCIZC	     	            CAMLE:      $USPTR('CAMLE   ');
BCAMGE$USPTRPLITASCIZC	     	            CAMGE:      $USPTR('CAMGE   ');
BCAIE$USPTRPLITASCIZC	     	            CAIE:       $USPTR('CAIE    ');
BCAME$USPTRPLITASCIZC	     	            CAME:       $USPTR('CAME    ');
BCAIN$USPTRPLITASCIZC	     	            CAIN:       $USPTR('CAIN    ');
BCAMN$USPTRPLITASCIZC	     	            CAMN:       $USPTR('CAMN    ');
BMOVEM$USPTRPLITASCIZC	     	            MOVEM:      $USPTR('MOVEM   ');
BLAND$USPTRPLITASCIZC	     	            LAND:       $USPTR('AND     ');
BANDI$USPTRPLITASCIZC	     	            ANDI:       $USPTR('ANDI    ');
BIORI$USPTRPLITASCIZC	     	            IORI:       $USPTR('IORI    ');
BIOR$USPTRPLITASCIZC	     	            IOR:        $USPTR('IOR     ');
BIMUL$USPTRPLITASCIZC	     	            IMUL:       $USPTR('IMUL    ');
BIMULI$USPTRPLITASCIZC	     	            IMULI:      $USPTR('IMULI   ');
BSKIPL$USPTRPLITASCIZC	     	            SKIPL:      $USPTR('SKIPL   ');
BLADD$USPTRPLITASCIZC	     	            LADD:       $USPTR('ADD     ');
BADDI$USPTRPLITASCIZC	     	            ADDI:       $USPTR('ADDI    ');
BIDIV$USPTRPLITASCIZC	     	            IDIV:       $USPTR('IDIV    ');
BIDIVI$USPTRPLITASCIZC	     	            IDIVI:      $USPTR('IDIVI   ');
BDMOVM$USPTRPLITASCIZC	     	            DMOVM:      $USPTR('DMOVM   ');
BSKIPG$USPTRPLITASCIZC	     	            SKIPG:      $USPTR('SKIPG   ');
BSETZM$USPTRPLITASCIZC	     	            SETZM:      $USPTR('SETZM   ');
BBLT$USPTRPLITASCIZC	     	            BLT:        $USPTR('BLT     ');
BHRLI$USPTRPLITASCIZC	     	            HRLI:       $USPTR('HRLI    ');
BHRRI$USPTRPLITASCIZC	     	            HRRI:       $USPTR('HRRI    ');
BDMOVE$USPTRPLITASCIZC	     	            DMOVE:      $USPTR('DMOVE   ');
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:08:38 	DRELD.BLI		Page 1-9

BTRNE$USPTRPLITASCIZC	     	            TRNE:       $USPTR('TRNE    ');
BSKIPGE$USPTRPLITASCIZC	     	            SKIPGE:     $USPTR('SKIPGE  ');
BTRNN$USPTRPLITASCIZC	     	            TRNN:       $USPTR('TRNN    ');
BSETO$USPTRPLITASCIZC	     	            SETO:       $USPTR('SETO    ');
BAOJ$USPTRPLITASCIZC	     	            AOJ:        $USPTR('AOJ     ');
BSOJ$USPTRPLITASCIZC	     	            SOJ:        $USPTR('SOJ     ');
BTLZ$USPTRPLITASCIZC	     	            TLZ:        $USPTR('TLZ     ');
BJUMPGE$USPTRPLITASCIZC	     	            JUMPGE:     $USPTR('JUMPGE  ');
BSUBI$USPTRPLITASCIZC	     	            SUBI:       $USPTR('SUBI    ');
BMUL$USPTRPLITASCIZC	     	            MUL:        $USPTR('MUL     ');
BMULI$USPTRPLITASCIZC	     	            MULI:       $USPTR('MULI    ');
BTLO$USPTRPLITASCIZC	     	            TLO:        $USPTR('TLO     ');
BLDIV$USPTRPLITASCIZC	     	            LDIV:       $USPTR('DIV     ');
BDIVI$USPTRPLITASCIZC	     	            DIVI:       $USPTR('DIVI    ');
BSKIPLE$USPTRPLITASCIZC	     	            SKIPLE:     $USPTR('SKIPLE  ');
BSKIPE$USPTRPLITASCIZC	     	            SKIPE:      $USPTR('SKIPE   ');
BSKIPN$USPTRPLITASCIZC	     	            SKIPN:      $USPTR('SKIPN   ');
BMOVM$USPTRPLITASCIZC	     	            MOVM:       $USPTR('MOVM    ');
BTRC$USPTRPLITASCIZC	     	            TRC:        $USPTR('TRC     ');
BHLRZ$USPTRPLITASCIZC	     	            HLRZ:       $USPTR('HLRZ    ');
BSOJG$USPTRPLITASCIZC	     	            SOJG:       $USPTR('SOJG    ');
BANDM$USPTRPLITASCIZC	     	            ANDM:       $USPTR('ANDM    ');
BHRL$USPTRPLITASCIZC	     	            HRL:        $USPTR('HRL     ');
BLDB$USPTRPLITASCIZC	     	            LDB:        $USPTR('LDB     ');
BHRLZI$USPTRPLITASCIZC	     	            HRLZI:      $USPTR('HRLZI   ');
BIORM$USPTRPLITASCIZC	     	            IORM:       $USPTR('IORM    ');
BTDNE$USPTRPLITASCIZC	     	            TDNE:       $USPTR('TDNE    ');
BC	     	 
BTESNC	     	         TESN);
B$UAPOCPROGSPIC	     	         $UAPOC(.PROGSP[.I]<23,4>);        %TYPE REGISTER %
B$UOCHRC	     	         $UOCHR(",");
BIFPROGSPIANDPROGSPIEQLPUSHJC	     	         IF (.PROGSP[.I]<22, 1> AND (.PROGSP[.I]<27, 9> EQL PUSHJ)
BANDPROGSPILSSBREGSDBV$PRC	     	          AND (.PROGSP[.I]< 0,18> LSS (.BREGS[DBV$PROGBASE])))
BTHENC	     	             THEN
BBEGINC	     	                BEGIN
BCBPROGSPPROGSPIC	     	                   CB_PROGSP[(.PROGSP[.I]< 0,18>-1)]<36, 6>;
B$UAPSZ$USPTRPLITASCIZC	     	                   $UAPSZ($USPTR('@('));
BINCRJFROMTOJDOC	     	                   INCR J FROM 0 TO 5 DO
B$UOCHRSCANICBC	     	                      $UOCHR(SCANI(CB)+#40);
B$UOCHRC	     	                   $UOCHR(")");
BENDC	     	                END
BELSEC	     	             ELSE
BBEGINC	     	                BEGIN
BC	     	 
BIFPROGSPITHEN$UOCHRC	     	         IF .PROGSP[.I]<22,1> THEN $UOCHR("@");     % INDIRECT? %
BIFSTPSPINEQC	     	         IF .STPSP[.I]< 0,18> NEQ 0             % SYMBOL TABLE STUFF? %
BTHENC	     	           THEN
BBEGINS$SGSTESTPSPIC	     	             BEGIN S_$SGSTE(.STPSP[.I]< 0,18>);
BIFSS$TYPEEQLSV$LIEANDSS$DDTYEQLSV$SINC	     	                 IF (.S[S$TYPE] EQL SV$LIE AND .S[S$DDTYPE] EQL SV$SINGD)
BORSS$TYPEEQLSV$SYSC	     	                 OR (.S[S$TYPE] EQL SV$SYSADCON)
BTHENC	     	                   THEN
BBEGIN$UOCHRC	     	                     BEGIN $UOCHR("[");
BSYMPOTSTPSPIC	     	                         SYMPOTS(.STPSP[.I]< 0,18>);   % SYMBOL ? %
B$UOCHRC	     	                         $UOCHR("]");
BENDC	     	                     END
BELSEC	     	                   ELSE
BSYMPOTSTPSPIC	     	                       SYMPOTS(.STPSP[.I]< 0,18>);     % SYMBOL ? %
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:09:16 	DRELD.BLI		Page 1-10

B$SFRNCSC	     	                   $SFRNCH(.S);
BENDC	     	             END
BELSEC	     	         ELSE
BIFPROGSPIEQLANDPROGSPINEQPUSHC	     	           IF .PROGSP[.I]<27,2> EQL 1 AND .PROGSP[.I]<27,9> NEQ PUSH
BTHENC	     	             THEN
BBEGIN$DIVOT$UAPSZ$USPTRPLITASCIZC	     	               BEGIN $DIVOT('^D');
B$UAPDCPROGSPIC	     	                 $UAPDC(.PROGSP[.I]< 0,18>);
BENDC	     	               END
BELSEC	     	         ELSE
B$UAPOCPROGSPIC	     	           $UAPOC(.PROGSP[.I]< 0,18>);
BIFPROGSPINEQC	     	    IF .PROGSP[.I]<18, 4> NEQ 0
BTHENC	     	       THEN
BBEGINC	     	         BEGIN
B$UOCHRC	     	            $UOCHR("(");
B$UAPOCPROGSPIC	     	            $UAPOC(.PROGSP[.I]<18, 4>);
B$UOCHRC	     	            $UOCHR(")");
BENDC	     	          END
BENDC	     	         END;
B$UOUTLC	     	         $UOUTL();
BENDC	     	    END;
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$PROCBASE'));
BC	     	 
BCBPDBPD$PARC	     	     CB_6+.PDB[PD$PARCT];    %CALCULATE WHERE SIXBIT WORDS START%
BINCRIFROMIBREGSDBV$PRTOBREGSDBV$PRDOC	     	     INCR I FROM .BREGS[DBV$PROCBASE] TO .BREGS[DBV$PROGBASE]-1 DO
BBEGINHPOXI$DIVOT$UAPSZ$USPTRPLITASCIZC	     	       BEGIN HPOX(.I< 0,18>); $DIVOT('  ');        % TYPE ADDRESS %
BHPOXPROGSPIC	     	         HPOX(.PROGSP[.I]<18,18>);               % TYPE LEFT HALF %
BIFBITSJ$RLLEITHEN$DIVOT$UAPSZ$USPTRPLITASCIZC	     	         IF .BITS[J$RLLEFT,.I] THEN $DIVOT(''' ')    % RELOCATED LEFT? %
BELSE$DIVOT$UAPSZ$USPTRPLITASCIZC	     	             ELSE $DIVOT('  ');                  % NOT RELOCATED %
BHPOXPROGSPIC	     	         HPOX(.PROGSP[.I]< 0,18>);               % TYPE RIGHT HALF %
BIFBITSJ$RLRIITHEN$UOCHRC	     	         IF .BITS[J$RLRIGHT,.I] THEN $UOCHR("''");    % RELOCATED RIGHT? %
BIFIEQLCBTHENC	     	         IF .I EQL .CB THEN
BBEGIN$DIVOT$UAPSZ$USPTRPLITASCIZC	     	           BEGIN $DIVOT('  ');
BCBPROGSPIC	     	             CB_PROGSP[.I]<36,6>;
BINCRJFROMTOJDOC	     	             INCR J FROM 0 TO 5 DO
B$UOCHRSCANICBC	     	               $UOCHR(SCANI(CB)+#40);
BCBIC	     	             CB_.I+2;
BENDC	     	           END;
BIFSTPSPINEQTHENSYMPOTSTPSPIC	     	         IF .STPSP[.I]< 0,18> NEQ 0 THEN SYMPOTS(.STPSP[.I]< 0,18>);
B$UOUTLC	     	         $UOUTL();
BENDC	     	       END;
BC	     	 
BC	     	    % TYPE THE REST OF THE BASES %
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$FIBASE'));
BFLASHBREGSDBV$FIBREGSDBV$DDC	     	    FLASH(.BREGS[DBV$FIBASE],.BREGS[DBV$DDBASE]-1);
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$DDBASE'));
BFLASHBREGSDBV$DDBREGSDBV$RSC	     	     FLASH(.BREGS[DBV$DDBASE],.BREGS[DBV$RSBBASE]-1);
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$RSBBASE'));
BFLASHBREGSDBV$RSBREGSDBV$RCC	     	     FLASH(.BREGS[DBV$RSBBASE],.BREGS[DBV$RCBBASE]-1);
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$RCBBASE'));
BFLASHBREGSDBV$RCBREGSDBV$RBC	     	     FLASH(.BREGS[DBV$RCBBASE],.BREGS[DBV$RBBASE]-1);
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$RBBASE'));
DRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:09:39 	DRELD.BLI		Page 1-11

BFLASHBREGSDBV$RBBREGSDBV$SCC	     	     FLASH(.BREGS[DBV$RBBASE],.BREGS[DBV$SCBBASE]-1);
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$SCBBASE'));
BFLASHBREGSDBV$SCBREGSDBV$LIC	     	     FLASH(.BREGS[DBV$SCBBASE],.BREGS[DBV$LITBASE]-1);
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$LITBASE'));
BFLASHBREGSDBV$LIBREGSDBV$LNC	     	     FLASH(.BREGS[DBV$LITBASE],.BREGS[DBV$LNEBASE]-1);
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$LNEBASE'));
BFLASHBREGSDBV$LNBREGSDBV$TEC	     	     FLASH(.BREGS[DBV$LNEBASE],.BREGS[DBV$TEMPBASE]-1);
BC	     	 
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$TEMPBASE'));
BFLASHBREGSDBV$TEBREGSDBV$STC	     	     FLASH(.BREGS[DBV$TEMPBASE],.BREGS[DBV$STEMPBASE]-1);
B$UMESS$USPTRPLITASCIZC	     	     $UMESS($USPTR('DBV$STEMPBASE'));
BFLASHBREGSDBV$STPROGSIC	     	     FLASH(.BREGS[DBV$STEMPBASE],.PROGSIZE-1);
BC	     	 
B$UOUTIPFCBC	     	     $UOUTI(.PFCB);              % OUTPUT BACK TO WHERE EVER IT WAS BEFORE %
B$KFREEIFOUTFK$EXISEQLOUTFK$FCBTHEN$KLOSEOUTFK$FCBELSE$KNOFLC	     	     $KFREEFCB(OUTF);            % CLOSE OUTPUT FILE %
B$CFREEPROGSPC	     	     $CFREEM(.PROGSP);           % FREE PROGSP MEMORY %
B$CFREESTPSPC	     	     $CFREEM(.STPSP);            % FREE STPSP MEMORY %
B$CFREEBITSC	     	     $CFREEM(.BITS);             % FREE BITS MEMORY %
BC	     	 
BC	     	 
BENDC	     	     END;
BC	     	 
BENDDBELUDOMC	     	 END ELUDOM
BENDDBDRELD  	BLISS 4.0-4.0 	5-DEC-74  	21:09:39 	DRELD.BLID


Module length: 2034+591

[BLSNED No errors detected]

    @a1