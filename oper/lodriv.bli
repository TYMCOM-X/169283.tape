




%%
%              ----------LODRIV.BLI----------
               5 MAY 72-A
%
%%








!               UTILITY ROUTINES FOR BLISS
!       ------------------------------------------



! IO ROUTINES
!-------------

ROUTINE OUTPUT(DEV,CHUNK)=
    ! OUTPUT A CHUNK (ALLWORD OR CHAR) ON 'DEV', WHERE
    !    DEV=0    TTY
    !        1    BINARY DEVICE(HIGH SEGMENT
    !        2    LISTING DEVICE
    ! IF LINEFEED SENT TO LISTING DEVICE, CHECK PAGINATION.
  
    IF .DEV EQL 0 THEN TTYLIST(.CHUNK) ELSE
    BEGIN MACHOP IDPB=#136;
    IF .XREFOPEN GTR 0 THEN XFINISH(#104);
    IF (DEVBUF[.DEV,2]_.DEVBUF[.DEV,2]-1) LEQ 0 THEN FORCE(.DEV);
    3<0,36>_.CHUNK; IDPB(3,DEVBUF[.DEV,1]);
    IF .DEV EQL 2 THEN IF .CHUNK EQL #12 THEN IF .XREFOPEN EQL 0 THEN
      IF (NLINES_.NLINES+1) GTR 56 THEN (PAGE(); NLINES_0);
    END;

ROUTINE OCHAR(CHAR)=
    ! OUTPUT ONE CHARACTER ON THE LISTING DEVICE
    (IF NOT .LSTFLG THEN IF .CHAR NEQ 0 AND .CHAR NEQ #177 THEN OUTPUT(2,.CHAR);1);

ROUTINE OUTREL(ALLWORD)=
    ! OUTPUT ONE ALLWORD ON THE HIGH-SEG BINARY FILE
    ( IF NOT .BINFLG THEN OUTPUT(1,.ALLWORD);1);

ROUTINE OUTSTR(STR,N)=
    IF NOT .LSTFLG THEN
    BEGIN REGISTER P;
    ! OUTPUT A (SHORT) STRING, N CHARS L.J., ON LISTING DEVICE
    P_STR<7*.N,7>;
    DECR I FROM .N TO 1 DO OCHAR(SCANI(P));
    .N
    END;

ROUTINE OUTMSG(MSG)=
  ! OUTPUT LONG ASCIZ STRING ON LISTING DEVICE
  IF NOT .LSTFLG THEN
    BEGIN REGISTER P,C;
      P_(.MSG)<36,7>;
      WHILE (C_SCANI(P)) NEQ 0 AND .C NEQ #177 DO OCHAR(.C);
    END;

ROUTINE OUTSTN(I)=
    IF NOT .LSTFLG THEN
    BEGIN LOCAL P,N,C; MACHOP ILDB=#134;
    ! OUTPUT A NAME FROM THE ST, INDEX OF ENTRY IS 'I'.
    P_ST[.I,1]<1,7>; N_0;
    WHILE (C_ILDB(3,P)) NEQ #177 AND .N LSS 10 DO (OUTPUT(2,.C);N_.N+1);
    .N
    END;

ROUTINE OUTBLANK(N)=
    IF NOT .LSTFLG THEN
    BEGIN LOCAL DUMDUM;
    ! OUTPUT 'N' BLANKS ON THE LISTING DEVICE
    INCR I FROM 1 TO .N DO OUTPUT(2," ")
    END;

ROUTINE OUTOCT(ALLWORD,DIGITS)=
    IF NOT .LSTFLG THEN
    BEGIN LOCAL DUMDUM;
    ! OUTPUT AN OCTAL NUMBER OF SPECIFIED NO. OF DIGITS
    DECR I FROM (.DIGITS-1) TO 0 DO OUTPUT(2,"0"+.ALLWORD<3*.I,3>);
    END;

ROUTINE OUTMOC(ALLWORD)=
    IF NOT .LSTFLG THEN
    BEGIN LOCAL T; T_0;
    ! OUTPUT MINIMAL LENGTH OCTAL CONSTANT
    DECR I FROM 11 TO 1 DO
        IF .ALLWORD<3*.I,3> NEQ 0 THEN BREAK(T_.I);
    DECR I FROM .T TO 0 DO OUTPUT(2,"0"+.ALLWORD<3*.I,3>);
    .T+1
    END;

ROUTINE OUTCONOC(A)=
!OUTPUT-CONCISE-OCTAL.  CALLED FOR 18BIT CONSTANTS.  PUTS THEM IN
!NEGATIVE FORMAT IF .A<17,1>=1.
IF .A<17,1> THEN (OCHAR("-"); OUTMOC(-(.A OR LEFTM)) + 1)
ELSE OUTMOC(.A);


ROUTINE NEWLINE=
    IF NOT .LSTFLG THEN
    BEGIN
    ! WRITE NEW LINE SYMBOL.
    OMSG('?M?J');
    IF .TTYLST THEN FORCE(2);
    END;

ROUTINE OUTDEC(N)=
  ! OUTPUT DECIMAL NUMBER TO LISTING DEVICE
  BEGIN LOCAL R;
    IF .N LSS 0 THEN (OCHAR("-"); N_-.N);
    R_.N MOD 10; N_.N/10;
    IF .N GTR 0 THEN OUTDEC(.N);
    OCHAR(.R+"0");
  END;

ROUTINE OUTDCN(N,W)=
  ! OUTPUT DECIMAL NUMBER RIGHT-JUSTIFIED IN FIELD OF WIDTH LOG(W)+1
  BEGIN
    WHILE .N LSS .W DO (OCHAR(" "); W_.W/10);
    OUTDEC(.N);
  END;


! ERROR IO ROUTINES
!-------------------


ROUTINE EOCHAR(CHAR)=
    BEGIN
    ! ERROR OUTPUT (ONE CHARACTER). OUTPUT GOES TO THE LISTING
    ! DEVICE, IF THERE IS ONE, AND TO THE TTY -- IF: 1) TTY IS
    ! NOT THE LISTING DEVICE ALREADY, 2) ERROR MESSAGES TO TTY
    ! HAVE NOT BEEN SPECIFICALLY SUPRESSED.

    IF .CHAR NEQ 0 AND .CHAR NEQ #177 THEN
      BEGIN
        IF NOT .LSTFLG THEN OUTPUT(2,.CHAR);
        IF NOT (.ERRBIT OR .TTYLST OR .CCLCTL<2,1>) THEN OUTPUT(0,.CHAR);
    END;
    1
    END;


ROUTINE ERRMES(NUM)=
!OUTPUT ERROR MESSAGE FROM BLISS.ERR CORRESPONDING TO MESSAGE NUMBER
  BEGIN
    BIND ERRFIL=6; OWN BUFH[3],BUF[131];
    MACHOP CALLI=#47, OPEN=#50, IN=#56, INBUF=#64, USETI=#74, LOOKUP=#76;
    MACRO SKIP(OP)=(REGISTER QQQ; QQQ_1; OP; QQQ_0; .QQQ)$;

    ROUTINE READ=
      BEGIN
        IF (BUFH[2]_.BUFH[2]-1) LEQ 0 THEN
          IF SKIP(IN(ERRFIL)) THEN RETURN -1;
        SCANI(BUFH[1])
      END;

    IF NOT .ERROPNFLG THEN
      BEGIN REGISTER BLK[4];
        BLK[0]_0; BLK[1]_SIXBIT'DSK'; BLK[2]_BUFH<0,0>;
        IF NOT SKIP(OPEN(ERRFIL,BLK)) THEN RETURN;
        BLK[0]_SIXBIT'BLISS'; BLK[1]_SIXBIT'ERR'; BLK[2]_0;
        BLK[3]_-#25; IF NOT SKIP(CALLI(BLK[3],#41)) THEN RETURN;
        IF NOT SKIP(LOOKUP(ERRFIL,BLK)) THEN RETURN;
        BLK_.JOBFF; JOBFF_BUF<0,0>; INBUF(ERRFIL,1); JOBFF_.BLK;
      END;
    USETI(ERRFIL,.NUM/#400+1);
    IF SKIP(IN(ERRFIL)) THEN RETURN;
    BEGIN REGISTER T;
      T_.BUF[.NUM/2 MOD #200 +3]<IF NOT .NUM THEN 18,18>;
      IF .T EQL 0 THEN RETURN;
      USETI(ERRFIL,.T<10,8>);
      BUFH[2]_0;
      DECR I FROM .T<0,10> TO 1 DO IF READ() LSS 0 THEN RETURN;
      WHILE (T_READ()) GTR 0 DO EOCHAR(.T)
    END
  END;


ROUTINE EOUTSTR(STR,N)=
    BEGIN LOCAL P; MACHOP ILDB=#134;
    ! OUTPUT (SHORT) STRING ON ERROR DEVICE(S)
    P_STR<7*.N,7>;
    INCR I FROM 1 TO .N DO EOCHAR(ILDB(3,P));
    END;

ROUTINE EOUTMSG(MSG)=
  ! OUTPUT LONG ASCIZ STRING ON ERROR DEVICE(S)
  BEGIN REGISTER P,C;
    P_(.MSG)<36,7>;
    WHILE (C_SCANI(P)) NEQ 0 AND .C NEQ #177 DO EOCHAR(.C);
  END;

ROUTINE EOSTN(I)=
    BEGIN LOCAL P,N,C; MACHOP ILDB=#134;
    !OUTPUT A NAME FROM THE ST. INDEX OF ENTRY 'I' ON ERROR DEVICES
    P_ST[.I,1]<1,7>; N_0;
    WHILE (C_ILDB(3,P)) NEQ #177 AND .N LSS 10 DO (EOCHAR(2,.C);N_.N+1);
    .N
    END;


ROUTINE EOUTBLANK(N)=
    BEGIN LOCAL DUMDUM;
    ! OUTPUT SPECIFIED NO. BLANKS ON ERROR DEVICE(S)
    INCR I FROM 1 TO .N DO EOCHAR(" ");
    END;

ROUTINE EOUTOCT(ALLWORD,DIGITS)=
    BEGIN LOCAL DUMDUM;
    ! OUTPUT OCTAL NO. ON ERROR DEVICE(S), SPECIFIED LENGTH
    DECR I FROM (.DIGITS-1) TO 0 DO EOCHAR("0"+.ALLWORD<3*.I,3>);
    END;

ROUTINE EOUTDEC(N)=
    BEGIN LOCAL R;
    ! OUTPUT DECIMAL VALUE TO THE ERROR DEVICE(S)
    IF .N LSS 0 THEN (EOCHAR("-"); N_-.N);
    R_.N MOD 10;
    IF (N_.N/10) NEQ 0 THEN EOUTDEC(.N);
    EOCHAR(.R+"0");
    END;

ROUTINE EOUTDCN(N,W)=
  ! OUTPUT DECIMAL NUMBER RIGHT-JUSTIFIED IN FIELD OF WIDTH LOG(W)+1
  BEGIN
    WHILE .N LSS .W DO (EOCHAR(" "); W_.W/10);
    EOUTDEC(.N);
  END;

ROUTINE ENEWLINE=
    BEGIN
    ! OUTPUT NEWLINE ON THE ERROR DEVICE(S).
    EOMSG('?M?J');
    END;

ROUTINE FORCELINE(TOG)=
    BEGIN REGISTER P,C; MACHOP ILDB=#134;  EXTERNAL BXA;
    ! THIS ROUTINE FORCES OUT THE CURRENT INPUT BUFFER LINE
    ! IF IT IS VALID (IE, IT HASN'T BEEN PRINTED ALREADY.
    ! THE VALUE OF TOG SPECIFIES WHETHER THE LINE IS WRITTEN
    ! TO BOTH THE LISTING AND ERROR DEVICES. TOG=1 => ALSO
    ! TO THE ERROR DEVICE.
    IF .VALIDBUF THEN
        BEGIN
        IF .FFSEEN THEN
          BEGIN
            FFSEEN_-1;
            SOSPGC_.SOSPGC+1;
            FILPAGE_.FILPAGE+1; NEWPAGE_1;
            PAGE();
            NLINES_FFSEEN_0
          END;
        P_@@(BXA+#16)^(-1);
        IF .TOG NEQ 0 THEN
          BEGIN
            C_0;
            IF .NEWFILE NEQ 0 THEN (NEWFILE_0; EOMSG('FILE ');
              EOUTMSG(FILNAME); EOCHAR(" "); C_1);
            IF .NEWPAGE NEQ 0 THEN (NEWPAGE_0; EOMSG('PAGE ');
              EOUTDEC(.FILPAGE); EOCHAR(" "); C_1);
            IF .P EQL 0 AND .LINCNT^(-4) NEQ .FILLINE THEN
              (EOMSG('LINE '); EOUTDEC(.FILLINE); C_1);
            IF .C NEQ 0 THEN ENEWLINE();
          END;
        IF .XREFLG NEQ 0 THEN XFINISH(IF .TOG NEQ 0 OR .LSTFLG THEN #106 ELSE #103);
        IF .TOG NEQ 0 OR .XREFLG EQL 0 THEN
          (IF .TOG NEQ 0 THEN EOUTDCN ELSE OUTDCN)(.LINCNT^(-4),100000);
        IF .TOG NEQ 0 THEN
            (EOCHAR(#11); IF .P NEQ 0 THEN (EOUTSTR(.P,5); EOCHAR(#11)))
          ELSE
            (OCHAR(#11); IF .P NEQ 0 THEN (OUTSTR(.P,5); OCHAR(#11)));
        P_(BUFF-1)<1,7>;
        WHILE ( C_ILDB(3,P) ) NEQ #177 DO
            IF .C GEQ " "  OR  .C EQL #11 THEN
                IF .TOG THEN EOCHAR(.C) ELSE OCHAR(.C);
        IF .TOG THEN ENEWLINE() ELSE NEWLINE();
        VALIDBUF_0;
        END;
    END;


ROUTINE IDERROR(NUM,STE)=
  BEGIN
    ERRORFOUND_.ERRORFOUND+1; JOBERR_.JOBERR+1; FORCELINE(1);
    IF .NUM EQL 0 THEN (EOMSG('UNDECLARED: '); EOSTN(.STE); ENEWLINE())
      ELSE BEGIN
        EOCHAR("#"); EOUTOCT(.NUM,3); EOMSG(': ');
        EOSTN(.STE); ENEWLINE(); ERRMES(.NUM);
      END
  END;


ROUTINE ERROUT(NUM,POSN)=
    BEGIN LOCAL DUMDUM; EXTERNAL BXA;
    ! OUTPUT ERROR MESS, OR WARNING MESS, WITH POINTER, ETC.
    FORCELINE(1);
    IF @@(BXA+#16) NEQ 0 THEN EOCHAR(#11);
    EOUTBLANK(.POSN<0,7>+8); EOMSG('^?M?J');
    IF .POSN<LEFTHALF> NEQ .LINCNT THEN
      (EOMSG('IN LINE '); EOUTDEC(.POSN<22,14>); EOCHAR(" "));
    EOCHAR("#"); EOUTOCT(.NUM,3); EOCHAR(" "); ERRMES(.NUM);
    END;

ROUTINE ERROR(POSN,NUM)=
    IF NOT .ERRLEVEL THEN
%V2H%     !ZERO LABIND SO WE WON'T ATTEMPT TO LABEL AN ERRONEOUS EXPRESSION.
%V2H%       (ERRORFOUND_.ERRORFOUND+1; JOBERR_.JOBERR+1;
            ERROUT(.NUM,.POSN); LABIND_0; CODETOG_0);






ROUTINE WARNEM(POSN,NUM)=
    (ERRORFOUND_.ERRORFOUND+1; JOBERR_.JOBERR+1; ERROUT(.NUM,.POSN));



! LOGICAL (?) IO ROUTINES
!-------------------------

ROUTINE READALINE=
    BEGIN LOCAL L1;
    ! READ THE NEXT INPUT LINE INTO 'BUFF', PRINTING THE PREVIOUS
    ! LINE IF THIS HAS NOT ALREADY BEEN DONE (EG., BY AN ERROR
    ! MESSAGE. A LINE NUMBER IS ASSIGNED TO THE INPUT LINE AND
    ! A RECORD OF THIS IS PLACED IN THE CODE STRING.
    FORCELINE(0); VALIDBUF_1;
    FILLINE_.FILLINE+1; LINCNT_.LINCNT+16;
    IF .CT[.CT[.CODEPTR,1]<PREVF>,1]<LEFTHALF> NEQ 0
        THEN BEGIN
             CT[L1_GETSPACE(1),1]_.LINCNT;
             PUSHBOT(.CODEPTR,.L1);
             END;
    IF READTEXT() THEN RECOVER (.LINCNT^18,ERILTL);     !IF 1 INPUT LINE IS LONGER THAN 135 CHARS
    IF .FINFLG THEN ( BUFF_'END);'; BUFF+1_'$;%"'''; BUFF+2_#067777777777 );
    IF .BUFF 
        THEN (PBUFF_BUFF<1,7>; NCBUFF_5+.LINCNT^18)
        ELSE (PBUFF_(BUFF-1)<1,7>; NCBUFF_0+.LINCNT^18);
    END;








!END OF LODRIV.BLI
   