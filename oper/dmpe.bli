!FILENAME:	DUMPER.BLI
!AUTHOR:	FRANK INFANTE
!DATE:		10 AUG 72

GLOBAL BIND DMPEV=1;

GLOBAL ROUTINE DUMPER=	!DUMPS TABLES OR TABLE ENTRIES ON COMMAND
BEGIN
BIND READY=PLIT('DUMPER READY',0),
	ASTER=PLIT('?M?J:',0);
GLOBAL LSTFLG;
EXTERNAL PUTMSG,RDOCT,READSYMBOL,PUTOCTAL,TTCHAR,WRIT;
FORWARD DUMPOUT,NODEDUMP;
LOCAL SAVEC;
BIND HELPMSG = PLIT('?M?J
COMMANDS ARE:
?M?JDASH(-) IS REQUIRED IF PARAMETER FOLLOWS
?M?J
Q(UIT) - QUIT RETURN TO CALLER
?M?J
DI(SPLAY) - <DIGIT>,<OCTAL STRING>	DISPLAY THE DIGIT NUMBER OF WORDS  LOCATED AT THE OCTAL LOCATION SPECIFIED
?M?J
	- TREE(+)		DISPLAY THE SOURCE PROGRAM TREE
?M?J			IF THE + APPEARS AFTER TREE THEN DISPLAY THE SUBFIELDS OF THE TREE AS WELL
?M?J
	- SYMBOLS	DISPLAY THE ENTIRE SYMBOL TABLE
?M?J
	- CONSTANTS	DISPLAY THE CONSTANT TABLE
?M?J
	- LABELS	DISPLAY THE LABEL TABLE

?M?J',0);
BIND HELP1MSG=PLIT('?M?J
DT(REE)	-<INTEGER>(,<INTEGER>) DISPLAY THE TREE NODE FOR THE SOURCE STATEMENTS
?M?J				HAVING THE SEQUENCE NUMBER OR RANGE OF NUMBERS REQUESTED
?M?J
DS(YM)	-<IDENTIFIER>	DISPLAY THE NODE FOR THE SYMBOL SPECIFIED
?M?J
DL(AB)	-<INTEGER>	DISPLAY THE LABEL TABLE NODE FOR THE LABEL SPECIFIED
?M?J
DC(ON)	-<CONSTANT>	DISPLAY THE TABLE NODE FOR THE CONSTANT
?M?J
P(RINT)/T(YPE)/B(OTH)	-	DISPLAY OUTPUT ON LISTING DEVICE,TTY,OR BOTH
?M?J
SI(ZE)	-TREE/SYMBOLS/CONSTANTS/LABELS/EXPRESSIONS/ALL
?M?J
			CALCULATE AND LIST THE SIZES OF THE VARIOUS
?M?J			TABLES .ALL MEANS GIVE TOTAL TABLE SPACE USED
?M?J
HELP	-		DUMPS THIS COMMAND SUMMARY
?M?J
',0);
MACRO P(X)=PLIT('X',0)$;
BIND STATID= PLIT(
P(ASSIGNMENT),
P(ASSIGN),
P(CALL),
P(CONTINUE),
P(DO),
P(ENTRY),
P(COMNSUB),
P(GOTO),
P(GOTO(ASSIGNED)),
P(GOTO(COMPUTED)),
P(IF(ARITHMETIC)),
P(IF(LOGICAL)),
P(RETURN),
P(STOP),
P(READ),
P(WRITE),
P(DECODE),
P(ENCODE),
P(REREAD),
P(FIND),
P(CLOSE),
P(INPUT),
P(OUTPUT),
P(BACKSPACE),
P(BACKFILE),
P(REWIND),
P(SKIPFILE),
P(SKIPRECORD),
P(UNLOAD),
P(RELEASE),
P(ENDFILE),
P(END),
P(PAUSE),	!END OF STATEMENT PLIT
P(OPEN),
P(STATEFUNCTION),
P(FORMAT),
P(BLT),
P(OVERLAY));
MACRO SKIPTOEND=UNTIL .C EQL #15 DO TTCHAR()$,
	SKIPTOMINUS = UNTIL .C EQL "-" DO TTCHAR();TTCHAR()$,
	ALL = -1$;
MACRO DSYM(WHAT)=(
			(SKIPTOMINUS; DUMPOUT(READSYMBOL(),IDSIZ)))$;
MACRO DCON(WHAT)=(IF WHAT EQL ALL THEN BEGIN END
			ELSE(SKIPTOMINUS; DUMPOUT(READSYMBOL(),CONSIZ)))$;
MACRO DLAB(WHAT)=(IF WHAT EQL ALL THEN BEGIN END
			ELSE(SKIPTOMINUS; DUMPOUT(ZGETLAB(),SNSIZ)))$;

MACRO WHATTABLE(X) =
	(IF DIGIT(C)
	THEN(LOCAL SIZ; SIZ_ .C-#60;UNTIL .C EQL "," DO (TTCHAR(); SIZ _ .SIZ*10+.C-#60);
		 DUMPOUT(RDOCT(),.SIZ))
	ELSE IF .C EQL "T" THEN DTREE(X)
		ELSE IF .C EQL "S" THEN DSYM(X)
		  ELSE IF .C EQL "L" THEN DLAB(X)
		    ELSE IF .C EQL "C" THEN DCON(X)
	)$;

ROUTINE SCANTREE(ISN)=
BEGIN
LOCAL BASE TRPT; TRPT_.SORCPTR<LEFT>;
	WHILE 1 DO
	(IF .TRPT EQL 0 THEN(PUTMSG(PLIT('ISN NOT FOUND',0)); RETURN 0);
	 IF .TRPT[SRCISN] EQL .ISN
	 THEN RETURN .TRPT ELSE TRPT_.TRPT[CLINK]
	);
END;
ROUTINE DUSTAT(TREEPT)=
BEGIN	!DUMP THE SUBFIELDS OF THE STATENT ID

MAP BASE TREEPT;

SELECT .TREEPT[SRCID] OF NSET
!ASSIGNMENT
ASGNID:	BEGIN
		NODEDUMP(.TREEPT[LHEXP]);
		NODEDUMP(.TREEPT[RHEXP]);
	EXITSELECT
		END;
DOID: BEGIN
		PUTMSG(PLIT('DOLBL',0));
		DUMPOUT(.TREEPT[DOLBL],SNSIZ); PUTMSG(PLIT('DOSYM',0));
		DUMPOUT(.TREEPT[DOSYM],IDSIZ);
		PUTMSG(PLIT('DOM1',0));NODEDUMP(.TREEPT[DOM1]);
		PUTMSG(PLIT('DOM2',0));NODEDUMP(.TREEPT[DOM2]);
		PUTMSG(PLIT('DOM3',0));NODEDUMP(.TREEPT[DOM3]);
		EXITSELECT
	END;
GOTOID: BEGIN
		PUTMSG(PLIT('LABEL',0));NODEDUMP(.TREEPT[GOTOLBL]);
		EXITSELECT
	 END;
AGOID:	BEGIN
		PUTMSG(PLIT('LABEL',0));NODEDUMP(.TREEPT[AGOTOLBL]);
		EXITSELECT
	END;
CGOID:	BEGIN
		PUTMSG(PLIT('LABEL',0));NODEDUMP(.TREEPT[CGOTOLBL]);
		EXITSELECT
	END;
IFAID:	BEGIN
		PUTMSG(PLIT('IF EXPRESSION',0));
		NODEDUMP(.TREEPT[AIFEXPR]);
		EXITSELECT
	END;
IFLID:	BEGIN
		PUTMSG(PLIT('IF EXPRESSION',0));
		NODEDUMP(.TREEPT[LIFEXPR]);
		PUTMSG(PLIT('TRUE BRANCH',0));
		DUSTAT(.TREEPT[LIFSTATE]);
		EXITSELECT
	END;
CALLID:	BEGIN
		LOCAL BASE LISTPT;
		PUTMSG(PLIT('CALLLIST',0));
		LISTPT_.TREEPT[CALLIST];
		INCR I FROM 0 TO .LISTPT[CLINK] DO
		NODEDUMP(@(.LISTPT+1)[.I]);
		EXITSELECT
	END;
OTHERWISE:	EXITSELECT
	TESN;
END;
ROUTINE NODEDUMP(PLACE)=
BEGIN MAP BASE PLACE;
IF .PLACE[OPRCLS] EQL DATAOPR
	THEN(DUMPOUT(.PLACE,IDSIZ);RETURN)
	ELSE
	 (DUMPOUT(.PLACE,EXSIZ);
	  IF .PLACE[ARG1PTR] NEQ 0 THEN NODEDUMP(.PLACE[ARG1PTR]);
	  IF .PLACE[ARG2PTR] NEQ 0 THEN NODEDUMP(.PLACE[ARG2PTR])
	 );
END;
ROUTINE GETINT=
BEGIN
LOCAL VALUE; VALUE _ 0;
DO(	VALUE _ .VALUE*10; VALUE _ .VALUE -#60+.C;TTCHAR())
 WHILE DIGIT(C);
RETURN .VALUE
END;
ROUTINE DUMPOUT(ADDRESS,SIZE)=
BEGIN
WRIT(#15);WRIT(#12);
INCR I FROM .ADDRESS TO .ADDRESS+.SIZE-1 DO
(
	PUTOCTAL(.I);WRIT("/");WRIT(#11);
	PUTOCTAL(.(@I)<LEFT>);WRIT(","); WRIT(",");
	PUTOCTAL(.(@I)<RIGHT>);
	WRIT(#15);WRIT(#12)
);
END;
ROUTINE DTREE(WHAT)=
BEGIN
LOCAL TREEPT,PLUS;
MAP BASE TREEPT;
UNTIL NOT ALPHA(C) DO TTCHAR();
IF .C EQL "+" THEN PLUS _ -1 ELSE PLUS _ 0;
IF .WHAT EQL ALL THEN (TREEPT<LEFT> _ .SORCPTR<RIGHT>; TREEPT<RIGHT>_.SORCPTR<LEFT>)
ELSE  (	
	UNTIL DIGIT(C) DO TTCHAR();
	IF (TREEPT<RIGHT>_ SCANTREE(GETINT())) EQL 0 THEN RETURN;
	IF .C EQL "," 
	THEN (TTCHAR();TREEPT<LEFT> _ SCANTREE(GETINT()))
	ELSE TREEPT<LEFT> _ .TREEPT<RIGHT>;
	);
WHILE 1 DO
BEGIN
	PUTMSG(.STATID[.TREEPT[SRCID]]);
	DUMPOUT(.TREEPT<RIGHT>,6);	!6 WORDS MAX PER TREE NODE
	IF .PLUS NEQ 0 THEN DUSTAT(.TREEPT<RIGHT>);
	IF .TREEPT<LEFT> EQL .TREEPT<RIGHT> THEN EXITLOOP
	  ELSE TREEPT<RIGHT> _ .TREEPT[CLINK];
END;
END;! OF DTREE
!DUMPER MAIN PROGRAM
!
PUTMSG(READY);
WHILE 1 DO
BEGIN
  PUTMSG(ASTER);DO TTCHAR() UNTIL .C GTR " ";
  SELECT .C OF NSET
	"D": (LOCAL HOWMUCH;
		IF TTCHAR() EQL "I"
		THEN(SKIPTOMINUS;HOWMUCH_ALL)
		ELSE HOWMUCH_0;
		WHATTABLE(.HOWMUCH);
		EXITSELECT
	     );
	"Q":(SKIPTOEND; RETURN C_.SAVEC);

	"P":(LSTFLG_1;SKIPTOEND;EXITSELECT);

	"T": (LSTFLG_0; SKIPTOEND;EXITSELECT);

	"B": (LSTFLG_-1;SKIPTOEND;EXITSELECT);

	"H": (SKIPTOEND;PUTMSG(HELPMSG);PUTMSG(HELP1MSG);EXITSELECT);

	OTHERWISE: EXITSELECT
	TESN;
END	!END OF WHILE 1 DO
END;	!OF DUMPER
