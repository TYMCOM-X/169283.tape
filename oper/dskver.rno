
.;MR/MK 10/25/70
.TITLE ^^DSKVER\\	20-OCT-70	100-110-006-01
.SKIP 5
.SPACING 1
.CENTER
^^DSKVER\\--^LEVEL#^C#^DISK ^VERFICATION ^PROGRAM
.CENTER
100-110-006-01
.SKIP 1
.INDENT 29
^AUTHOR: ^R. ^DHAR
.INDENT 31
^DATE: 24 ^SEPTEMBER 1970
.INDENT 22
^REVISION ^DATE: 20 ^OCTOBER 1970
.INDENT 29
^PROGRAM ^VERSION: 001
.SKIP 10
.PARAGRAPH 5
^THIS MEMO CONTAINS REVISIONS AND IMPROVEMENTS THAT WERE SUGGESTED IN
RESPONSE TO MY FIRST MEMO (100-110-004-00) REGARDING THE ^^DSKVER\\
PROGRAM. ^THE MEMO ESSENTIALLY CONTAINS  INFORMATION DISTRIBUTED
IN
(100-110-004-00) PLUS AN INTRODUCTION DESCRIBING HOE ^^DSKVER\\ MIGHT
BE USEFUL TO ^SYSTEM ^MANAGERS.
.SUBTITLE ^DISK ^VERFICATION AND GARBAGE-COLLECTION FOR 4-SERIES ^MONITORS
.PAGE
.CENTER
^^I.#INTRODUCTION\\
.BLANK 1
.PARAGRAPH 5
^THE ^^DSKVER\\ PROGRAM IS A DISK DAMAGE ASSESSMENT PROGRAM FOR USE
UNDER 4-SERIES MONITORS (^LEVEL#^C#^^DSKVER\\). ^THE PROGRAM IS USED TO
ASSESS THE STATE OF THE FILE STRUCTURE ON THE DISK. ^OCCASSIONALLY DISKS
GET "GARBARGED" WITH USE, RESULTING IN WASTE OF DISK STORAGE RESOURCES,
AS WELL AS GIVING ERRORS TO USERS WHO ACCESS THE DEVICE (E.G.,#"^INCORRECT
 ^RETRIEVAL ^INFORMATION" AND/OR "^NON-RECOVERABLE ^^DSK\\ ^READ ^ERROR"
MESSAGES). ^THE ^^DSKVER\\ PROGRAM WAS WRITTEN TO ALLOW THE INSTALLATION
MANAGER TO VERIFY THE INTEGRITY OF ALL FILES ON HIS DISK(S), AND TO
CORRECT ANY PROBLEMS IN THE FILE STRUCTURE(S). ^INSTALLATION MANAGERS
MAY RUN ^^DSKVER\\ AT REGULAR INTERVALS TO ASSESS THE STATE OF THEIR
DISK(S) AND THERE BY KEEP DISK STORAGE "GARBAGE" FREE.
.BLANK 1
.PARAGRAPH 0
^THE ^^DSKVER\\ PROGRAM PINPOINTS THE FOLLOWING PROBLEMS ON THE DISK:
.LEFT MARGIN 7
.INDENT -4
(^A)^LOST #BLOCKS#-#^^DSKVER\\ FINDS ALL THE LOST BLOCKS, I.E., BLOCKS
NOT IN USE BUT MARKED USED IN DISK ^^SAT\\(*) TABLES. ^THIS IS NOT A
DAMAGING SITUATION BUT IS A WASTE OF DISK RESOURCES.
.FOOTBOTE 3
.LEFT MARGIN 0
.BLANK 2
(*) ^^SAT\\ STANDS FOR ^STORAGE ^ALLOCATION ^TABLE
.!
.INDENT -4
(^B) ^FREE#BLOCK#-#^^DSKVER\\ FINDS BLOCKS THAT ARE USED BUT MARKED
FREE IN ^^SAT\\ TABLES. ^THIS IS DANGEROUS SITUATION AS THE MONITOR
WILL ALLOCATE SOME OR ALL OF THE FREE BLOCKS TO NEW USER FILES WHICH
WILL THEN WRITE DATA ON TOP OF EXISTING FILES AND DESTROY THEM.
.INDENT -4
(^C) ^MULTIPLY-REFERENCED#BLOCKS#-#^THE ^^DSKVER\\ PROGRAM ALSO FINDS
ANY MULTIPLY-REFERENCED BLOCKS. ^THESE ARE BLOCKS ON THE DISK THAT ARE
SHOWN AS BELONGING TO MORE THAN ONE FILE.
.LEFT MARGIN 0
.BLANK 1
.PARAGRAPH 5
^THE ^^DSKVER\\ PROGRAM HAS OPTIONS TO PERMIT THE SYSTEM ADMINSTRATOR
TO CORRECT BOTH ITS FREE BLOCK AS WELL AS LOST BLOCK PROBLEMS. ^THIS
IS ACCOMPLISHED BY GENERATION NEW ^^SAT\\ TABLES FROM A COMPLETE SCAN
OF THE CONTENTS OF THE DISK'S FILE STRUCTURE AND REPLACING THE ^^SAT\\'S
ON THE DISK WITH THE ^^DSKVER\\ GENERATED ^^SAT\\'S, ^SEE THE DESCRIPTION
OF /^S SWITCH.
.PARAGRAPH
^THE ^^DSKVER\\ PROGRAM CAN ALSO CORRECT THE MULTIPLY-REFERENCED BLOCK
PROBLEM BY DELETING THE DAMAGED FILE FROM ITS ^^UFD\\ WITHOUT RECLAIMING
THE DISK SPACE. ^SEE THE DESCRIPTION OF /^D SWITCH.
.PARAGRAPH
^ANOTHER ^^DSKVER++ OPTION RUNS A CHECKSUM CHECK ON THE ENTIRE FILE
STRUCTURE ON THE DISK. ^CHECKSUMS ARE COMPUTED FROM THE CONTENTS OF
THE DISK FOR EACH BLOCK OF EACH FILE AND ARE CHECKED AGAINST THE
CHECKSUMS STORED IN THE ^^RIB\\. ^BLOCKS THAT FAIL TO CHECK AGAINST
THE ^^RIB\\'S ARE PRINTED OUT ON THE LOGICAL DEVICE ^^DEVICE ^^LPT\\
. ^SEE THE DESCRIPTION OF /^X SWITCH.
.PARAGRAPH
^IT IS ALSO NECESSARY TO PERMIT AN INSTALLATION TO MARK OFF KNOWN BAD
BLOCKS BEFORE REPLACING THE ^^SAT\\ BLOCKS ON THE DISK. ^THE /^M SWITCH
PROVIDES THIS OPTION.
.PARAGRAPH
^ANOTHER FUNCTION OF THE ^^DSKVER\\ PROGRAM IS TO PROVIDE A TOOL WITH
WHICH SYSTEMS PROGRAMMERS CAN EXAMINE PARTICULAR BLOCKS ON THE DISK
IN THEIR ATTEMPTS TO LEARN THE CAUSES OF ANY DISK "GARBAGING" THAT
MAY HAVE OCCURRED. ^FOR THIS PURPOSE, ^^DSKVER\\ HAS /^T SWITCH THAT
ALLOWS THE USER TO PRINT OUT THE CONTENTS OF ANY LOGICAL BLOCK ON THE DISK.
^THE CONTENTS CAN BE PRINTED IN FOUR FORMATS.
.PARAGRAPH
^FINALLY, /^C, /^V ARE TWO ^^DSKVER\\ SWITHCES THAT PROVIDE GENERAL 
INFORMATION ABOUT THE DEVICE. ^LOCATION OF ^^MFD\\, RELATIVE ADDRESS OF
^^SAT\\ BLOCKS, ETC., ARE TYPED OUT ON THE USER CONSOLE.
.BLANK 5
.CENTER
^^II.#COMMAND#DESCRIPTIONS\\
.BLANK 2
.PARAGRAPH 5
^BEFORE ANY OTHER COMMANDS MAY BE TYPED THE PARTICULAR DEVICE TO BE
VERIFIED MUST BE SPECIFIED.  ^THIS IS DONE BY SIMPLE TYPING THE DEVICE
NAME FOLLOWED BY A COLON AND A CARRIAGE RETURN. ^EXAMPLES:
.LEFT MARGIN 20
^^DPA0\\:
^^DSK\\:
.BLANK 1
.LEFT MARGIN 0
.PARAGRAPH
^NOW ^^DSKVER\\ WILL ACCEPT ANY OF THE FOLLOWING COMMANDS:
.BLANK 1
.LEFT MARGIN 5
.INDENT -5
.NOFILL
(^A)	/^C ^COMMAND
.FILL
.BLANK 1
/^C ^COMMAND TYPES OUT DEVICE CHARACTERISTICS IN A NINE-WORD GROUP.
^THE CONTENTS OF THESE NINE WORDS (FROM THE ^^DSKCHR UUO\\) ARE AS FOLLOWS:
.TEST PAGE 19
.TAB STOPS 5,15
.NOFILL
^WORD 1 ^PHYSICAL ^DISK UNIT NAME
.BLANK 1
^WORD 2 0 AN ^LEVEL ^C
.BLANK 1
^WORD 3 ^NUMBER OF BLOCKS LEFT FOR ALL USERS
.BLANK 1
^WORD 4 ^NUMBER OF BLOCKS LEFT FOR ALL USERS
.BLANK 1
^WORD 5 ^PHYSICAL DISK UNIT NAME
.BLANK 1
^WORD 6 ^BITS 0-8 NUMBER OF BLOCKS/CYLINDER
	^BITS 9-17 NUMBER/TRACK
	^BITS 18-35 NUMBER OF BLOCKS/CYLINDER
.BLANK 1
^WORD 7 ^HIGHEST BLOCK _# ON THE UNIT
.BLANK 1
^WORD 8 0 IN ^LEVEL ^C
.BLANK 1
^WORD 9 ^^LH\\= 0 OR 1; ^^RH\\ - 0 IN ^LEVEL #^C
.BLANK 1
.INDENT -5
(^B) /^V ^COMMAND
.FILL
/^V ^COMMAND TYPES OUT THE FOLLOWING INFORMATION ABOUT THE DEVICE 
(OBTAINED FROM THE "VITAL STATISTICS" BLOCK):
.NOFILL
.BLANK 1
^LOCATION OF ^^MFD\\ ON THE DEVICE
.BLANK 1
^RELATIVE ADDRESS OF THE ^^SAT\\ BLOCKS
.BLANK 1
^BLOCKS PER ^^SAT\\ BLOCK
.BLANK 1
^HIGHEST BLOCK NUMBER ON THE DEVICE
.BLANK 1
^NUMBER OF ^^SAT\\ BLOCKS ON THE DEVICE
^.BLANK 1
^SWAPPING SPACE SIZE AND THE START OF THE SWAPPING SPACE.
.BLANK 1
.INDENT -5
(^C) /^T##^^NN##COMMAND\\
.FILL
/^T COMMAND ALLOWS THE USER TO PRINTOUT ON THE LOGICAL DEVICE  ^^LPT\\
THE CONTENTS OF THE LOGICAL BLOCK NUMBER ^^NN\\. ^THE CONTENTS
CAN BE PRINTED IN ANY OF THE FOLLOWING FOUR FORMATS:
.LEFT MARGIN 24
.NOFILL
^^H = HALF WORD\\
^^A = ASCII\\
^^R = RIB\\
^^U = UFD\\
.TAB STOPS 5,15,30
.LEFT MARGIN 5
^EXAMPLE:	*/^T#7340
.BLANK 1
	^^WHAT FORMAT\\?
.BLANK 1
	^U
	*	^THE CONTENTS OF LOGICAL BLOCK 7340 WILL BE PRINTED
	ON ^^LPT\\ IN ^^UFD\\ FORMAT.
.BLANK 1
.INDENT -5
(^D) /^D ^^FILENAM.EXT\\ [^P,^P] ^^COMMAND\\
.FILL
/^D COMMAND ALLOWS THE USER TO DELETE THE ^FILENAME.^EXT FROM ITS
^^UFD\\ WITHOUT RECLAIMING THE DISK BLOCKS. ^THIS COMMAND IS USEFUL
IN CORRECTING THE MULTIPLY-REFERENCED BLOCK PROBLEM.
.PARAGRAPH
^WHEN THE FILENAME IS A PAIR OF OCTAL NUMBERS, THAT IS, A ^^UFD\\
. USE _# TO INDICATE THIS SPECIAL CASE AND TYPE ALL LEADING ZEROES.
.BLANK 1
^EXAMPLES:
.NOFILL
.BLANK 1
*/^D ^^FOO.REL\\[10,24]
=/^D_#000010000024.^^UFD\\[1,1]
.BLANK 1
.INDENT -5
(^E) /^S ^COMMAND
.FILL
/^S COMMAND BUILDS ^^USRAT\\ TABLES IN CORE FROM THE CONTENTS
OF THE FILE STRUCTURE ON THE SPECIFAED DEVICE. ^WHEN THIS HAS BEEN
ACCOMPLISHED. ^^DSKVER\\ TYPES
.INDENT 10
^^USRSAT'S DONA\\
.PARAGRAPH
^THE USER MAY THEN REQUEST ANY OF THE FOLLOWING OPTIONS:
LEFT MARGIN 15
.TAB STOPS 10,15,20
.INDENT -5
^P	TO PRINT OUT THE ^^USRSAT\\'S ON DEVICE ^^LPT\\
.INDENT -5
^D	TO PRINT OUT THE DIFFERENCES BETWEEN ^^USRAT\\'S AND EXISTING
^^SAT'S. ^THIS LISTING SHOWS:
.NOFILL
.BLANK 1
(1)	^FREE BLOCKS - REALLY USED BUT SHOWN AS FREE IN ^^SAT\\.
(2)	^LOST BLOCKS - REALLY FREE BUT SHOWN AS USED IN ^^SAT\\.
(3)	^MULTIPLY-REFERENCED BLOCKS - USED BY MORE THAN ONE FILE.
.BLANK 1
.FILL
.INDENT -5
^F	TO FIX UP THE ^^SAT\\ TABLES ON THE DISK BY REPLACING THE
^^SAT\\'S WITH THE ^^USRSAT\\'S
.INDENT -5
^R	TO RETURN TO COMMAND LEVEL
.TAB STOPS 15,30
.LEFT MARGIN 5
.NOFILL
.BLANK 1
^EXAMPLE:	*/^S
	^^USRSAT\\'^S ^^DONE\\
	^D	;AT THIS POINT FREE AND LOST
		BLOCKS ARE PRINTED ON ^^LPT\\
	^^NO MULTIPLE BLOCKS
	:
.BLANK 1
.INDENT -5
(^F) ?^X ^^COMMAND\\
^THE RESPONSE TO /^X COMMAND IS EITHER A TYPEOUT ON ^^TTY\\
.INDENT 10
^^NO CHECKSUM ERRORS\\
.FILL
OR A PRINTOUT ON DEVICE ^^LPT\\ IF CHECKSUM ERRORS ARE DETECTED. ^THE
LINE PRINTER PRINTOUT HAS THE FOLLOWING INFORMATION LISTED IN THIS
ORDER:
.NOFILL
.BLANK 1
^FILENAME. ^EXT [^P,^P], ^BLOCK_# THAT GIVES BAD CHECKSUM<CR><^^LF\\>
^BLOCK_# OF THE ^^RIB\\ WHERE ^BAD ^BLOCK_# IS LISTED<CR><^^LF\\>
CHECKSUM ASIT APPEARS IN ^^RIB\\ COMPUTED CHECKSUM
.BLANK 1
.INDENT -5
(NG) /^M##^^NN\\##^COMMAND
.FILL
/^M COMMAND MARKS THE LOGICAL BLOCK ^^NN\\ AS ALLOCATED IN THE 
^^USRSAT\\'S (^^SAT\\'S BUILT FROM THE CONTENTS OF THE DEVICE).
^THE ^^USRSAT\\'S ARE BUILT IN CORE AND MUST BE TRANSFERRED TO THE
DEVICE. ^THIS IS ACCOMPLISHED WITH THE ^F OPTION OF THE /^S COMMAND. ^THE FOLLOWING
EXPAMLE ILLUSTRATES THIS POINT:
.PARAGRAPH
^EXAMPLE: ^SUPPOSE BLOCKS 1045 AND 3260 ARE TO BE MARKED USED ON TH 
DEVICE ^^DPA\\0 THEN PROCEED AS FOLLOWS:
.NOFILL
.TAB STOPS 5,20
.BLANK 1
*^^DPA\\0:	^SPECIFY WHICH DEVICE
.BLANK 1
*/^M	^MARKS 1045 USED IN CORE
.BLANK 1
*/^N 3260	^MARKS 3260 USED IN CORE
*/^S	BUILD ^^USRAT\\'S FROM DISK AND
	MAINTAIN 1045, 3260 AS USED
^^USRSAT'S DONE\\
^F	^NOW 1045,3260 ARE MARKED USED ON DISK
.BLANK 1
.INDENT -5
(^H) /^H ^^COMMAND\\
^PRINTS A HELP MESSAGE SUMMARIZING THE COMMANDS
.BLANK 1
.INDENT -5
(^I) /^G COMMAND\\
.FILL
^GO ASK FOR A NEW DEVICE. ^THIS PUTS ^^DSKVER\\ BACK INTO ITS INITIAL
STATE WAITING FOR A DEVICE SPECIFICATION..BLANK 5
.CENTER
.LEFT MARGIN 0
^^III##ERROR MESSAGE\\
.BLANK 2
.PARAGRAPH 5
^ALL THE ERROR MESSAGES ARE KEPT SHORT AND TO THE POINT, AND ARE
DESIGNED TO BE SELF-EXPLANATORY, ^THIS IS ILLUSTRATED IN THE
FOLLOWING LIST:
.NOFILL
.BLANK 1
^COMMAND ^ERROR. ^TYPE IN /^H <CR> ^FOR HELP?
^TYPE IN ^DEVICE NAME FIRST
^LOGIN UNDER PROJ 1
^NO SUNCH DEVICE
^DEVICE NOT AVAILABLE
^VITAL ^STATISTICS ^BLOCK NOT FOUND
^TERMINSTE ^DEVICE NAME WITH COLON
^DEVICE NAME ERROR
^ADDRESS NOT IN OCTAL
^BLOCK ^ADDRESS ERROR
^NO SUCH FILE
^^UFD\\ ^NOT ^FOUND
^FILE NAME ERROR
^EXT. NAME ERROR
^TYPE FIELENAME EXT. ETC. ETC.
.FILL
.LEFT MARGIN 0
.BLANK 1
^THERE IS A CLASS OF ERROR MESSAGES THAT ARE TYPED OUT WHEN AN 
INPUT/OUTPUT ERROR OCCURS ON A GIVEN ^I/^O CHANNEL. ^FOR THESE MESSAGES
TO BE MEANINGFUL THE FOLLOWING IS THE LIST OF ^I/^O CHANNELS USED IN
^^DSKVER\\:
.LEFT MARGIN 5
.TAB STOPS 5,15
.NOFILL
^I/^O ^CHANNEL ^PURPOSE

^^MFD\\ ^READ ^^MFD\\

^^UFD\\ ^READ ^^UFD\\

^^DSK\\ ^^USETI/O DSK\\

^^SAT\\ ^READ ^^SAT\\ FILE

^^LPT\\ ^OUTPUT ^^LPT\\

^^PUFD\\	^DELETE AN ENTRY IN ^^UFD\\
.BLANK 5
.LEFT MARGIN 0
.CENTER
^^IV. ##HARDWARE REQUIREMENTS\\
.BLANK 2
.PARAGRAPH 5
^^DSKVER\\ RUNS ON ^^PDP\\-10 IN 8^K CORE. ^REQUIRED PERIPHERALS INCLUDE
DISK DEVICE THAT NEEDS VERIFICATION, ^^TTY\\ AND A LOGICAL DEVICE ^^LPT\\>
