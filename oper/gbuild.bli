MODULE GBUILD(STACK,DOLLAR,FSAVE,TIMING,TIMER=EXTERNAL(SIX12)) =
  BEGIN
  REQUIRE CDEFS.BLI[7,107355];
  REQUIRE TDEFS.BLI[7,107355];
  REQUIRE UDEFS.BLI[7,107355];

  BIND TKNSTUFFSIZE = 230;

  BIND TKNSTUFF = PLIT(
         TKNINFO NAMES
         TV$LT      ,'LT      ','$GROP ',
         TV$LE      ,'LE      ','$GROP ',
         TV$EQ      ,'EQ      ','$GROP ',
         TV$NE      ,'NE      ','$GROP ',
         TV$DELETE  ,'DELETE  ','$GDEL ',
         TV$INSERT  ,'INSERT  ','$GINSR',
         TV$ALTER   ,'ALTER   ','$GALTR',
         TV$BEGIN   ,'BEGIN   ','$GBEGN',
         TV$END     ,'END     ','$GEND ',
         TV$PROCDR  ,'PROCDR  ','$GPROC',
         TV$ALL     ,'ALL     ','$GALL ',
         TV$USING   ,'USING   ','$GUSG ',
         TV$TRUNC   ,'TRUNC   ','$GTOKN',
         TV$NAME    ,'NAME    ','$GNAME',
         TV$STRING  ,'STRING  ','$GTOKN',
         TV$INTLIT  ,'INTLIT  ','$GTOKN',
         TV$DECLIT  ,'DECLIT  ','$GTOKN',
         TV$CCLIT   ,'CCLIT   ','$GTOKN',
         TV$BLANK   ,'BLANK   ','$GTOKN',
         TV$8BGDEL  ,'8BGDEL  ','$GBDEL',
         TV$8BGALT  ,'8BGALT  ','$GBALT',
         TV$8USNGL  ,'8USNGL  ','$GUSGL',
         TV$8USNGS  ,'8USNGS  ','$GUSGS',
         TV$8LABEL  ,'8LABEL  ','$GLABL',
         TV$9CR     ,'9CR     ','$GTOKN',
         TV$GE      ,'GE      ','$GROP ',
         TV$GT      ,'GT      ','$GROP ',
         TV$8BGADD  ,'8BGADD  ','$GBASG',
         TV$8BGSUB  ,'8BGSUB  ','$GBASG',
         TV$8BGASS  ,'8BGASS  ','$GBASG',
         TV$ADD     ,'ADD     ','$GADD ',
         TV$SUBTRA ,'SUBTRA  ','$GSUB ',
         TV$LET     ,'LET     ','$GLET ',
         TV$8BGIF   ,'8BGIF   ','$GBIF ',
         TV$IF      ,'IF      ','$GIF  ',
         TV$THEN    ,'THEN    ','$GTHEN',
         TV$ELSE    ,'ELSE    ','$GELSE',
         TV$8NDIF   ,'8NDIF   ','$GEIF ',
         TV$PLUS    ,'PLUS    ','$GAOP ',
         TV$MINUS   ,'MINUS   ','$GAOP ',
         TV$STAR    ,'STAR    ','$GAOP ',
         TV$SLASH   ,'SLASH   ','$GAOP ',
         TV$8UMINUS ,'8UMINUS ','$GUOP ',
         TV$NOT     ,'NOT     ','$GUOP ',
         TV$8EXT    ,'8EXT    ','$GEXT ',
         TV$AND     ,'AND     ','$GBOOL',
         TV$OR      ,'OR      ','$GBOOL',
         TV$8BGIN   ,'8BGIN   ','$GBIN ',
         TV$IN      ,'IN      ','$GIN  ',
         TV$CHANGD  ,'CHANGD  ','$GCHGD',
         TV$ILLEGL  ,'ILLEGL  ','$GILGL',
         TV$8BGWLDO ,'8BGWLDO ','$GBWDO',
         TV$8WLDO   ,'8WLDO   ','$GWLDO',
         TV$8NDWLDO ,'8NDWLDO ','$GEWDO',
         TV$8BGDOWL ,'8BGDOWL ','$GBDOW',
         TV$8DOWL   ,'8DOWL   ','$GDOWL',
         TV$8NDDOWL ,'8NDDOWL ','$GEDOW',
         TV$8BGACC  ,'8BGACC  ','$GBACC',
         TV$ACCEPT  ,'ACCEPT  ','$GACC ',
         TV$8BGSEL  ,'8BGSEL  ','$GBSEL',
         TV$SELECT  ,'SELECT  ','$GSEL ',
         TV$8NDSEL ,'8NDSEL  ','$GESEL',
         TV$8BGFORE,'8BGFORE ','$GBFE ',
         TV$8NDFORE ,'8NDFORE ','$GEFE ',
         TV$SOURCE  ,'SOURCE  ','$GSRCE',
         TV$8BGCOND ,'8BGCOND ','$GBCND',
         TV$CONDIT  ,'CONDIT  ','$GCOND',
         TV$8NDILST ,'8NDILST ','$GEINL',
         TV$LINE    ,'LINE    ','$GLINE',
         TV$REPORT  ,'REPORT  ','$GRP  ',
         TV$SORTED  ,'SORTED  ','$GSORT',
         TV$EACH    ,'EACH    ','$GEACH',
         TV$REPRTHD ,'REPRTHD ','$GRPHD',
         TV$PAGEHD  ,'PAGEHD  ','$GPGHD',
         TV$PAGEFT  ,'PAGEFT  ','$GPGFT',
         TV$REPRTFT ,'REPRTFT ','$GRPFT',
         TV$GROUPHD ,'GROUPHD ','$GGPHD',
         TV$GROUPFT ,'GROUPFT ','$GGPFT',
         TV$8NDRPC  ,'8NDRPC  ','$GERPC',
         TV$8BGFRCE ,'8BGFRCE ','$GBFRC',
         TV$FORCE   ,'FORCE   ','$GFRCE',
         TV$FINISH  ,'FINISH  ','$GFIN ',
         TV$REPEAT  ,'REPEAT  ','$GRPET',
         TV$VIA     ,'VIA     ','$GVIA ',
         TV$8QUAL    ,'8QUAL    ','$GQUAL',
         TV$8BGWHR  ,'8BGWHR  ','$GBWHR',
         TV$WHERE   ,'WHERE   ','$GWHR ',
         TV$OF      ,'OF      ','$GOF  ',
         TV$AS      ,'AS      ','$GAS  ',
         TV$B       ,'B       ','$GBLNK',
         TV$9COL    ,'9COL    ','$GFORM',
         TV$9TAB    ,'9TAB    ','$GFORM',
         TV$TO      ,'TO      ','$GFORM',
         TV$SKIP    ,'SKIP    ','$GFORM',
         TV$8STRPT  ,'8STRPT  ','$GSTRP',
         TV$9PAGEN  ,'9PAGEN  ','$GRITM',
         TV$9PAGEDV ,'9PAGEDV ','$GRITM',
         TV$9PAGESZ ,'9PAGESZ ','$GRITM',
         TV$8BGPRNT ,'8BGPRNT ','$GBRPT',
         TV$8NDOLST ,'8NDOLST ','$GEOL ',
         TV$PRINT   ,'PRINT   ','$GPRNT',
         TV$8BGTYPE ,'8BGTYPE ','$GBTYP',
         TV$8BGABT  ,'8BGABT  ','$GBABR',
         TV$ABORT   ,'ABORT   ','$GABRT',
         TV$TYPE    ,'TYPE    ','$GTYPE',
         TV$COUNT   ,'COUNT   ','$GCNT ',
         TV$SUM     ,'SUM     ','$GSUM ',
         TV$AVG     ,'AVG     ','$GAVG ',
         TV$MIN     ,'MIN     ','$GMIN ',
         TV$MAX     ,'MAX     ','$GMAX ',
         TV$9DATE   ,'9DATE   ','$GDATE',
         TV$8DATE3  ,'8DATE3   ','$GDAT3',
         TV$TRIM    ,'TRIM    ','$GTRIM',
         TV$9CTIME   ,'9CTIME   ','$GCTIM',
         TV$9TIME    ,'9TIME    ','$GTIME',
         TV$9TYMDY  ,'9TYMDY  ','$GTYMD',
         TV$8BGVRF  ,'8BGVRF  ','$GBVRF',
         TV$VERIFY  ,'VERIFY  ','$GVRF ',
         TV$8HIVAL   ,'8HIVAL   ','$GHVAL',
         TV$8LOVAL   ,'8LOVAL   ','$GLVAL',
         TV$NOTHNG  ,'NOTHNG  ','$GNTHG',
         TV$9TOP    ,'9TOP    ','$GTOKN',
         TV$9FF     ,'9FF     ','$GTOKN',
         TV$FOR     ,'FOR     ','$GTOKN',
         TV$9NULL   ,'9NULL   ','$GTOKN',
         TV$KEY     ,'KEY     ','$GTOKN',
         TV$8PIC    ,'8PIC    ','$GTOKN',
         TV$8BGRPET ,'8BGREPT ','$GTOKN',
         TV$8VLST   ,'8VLST   ','$GTOKN',
         TV$ROUND   ,'ROUND   ','$GTOKN',
         TV$ASCEND  ,'ASCEND  ','$GTOKN',
         TV$DESCEN  ,'DESCEN  ','$GTOKN',
         TV$8BGFIN  ,'8BGFIN  ','$GTOKN',
         TV$9LINEN  ,'9LINEN  ','$GRITM',
         TV$9TOPMAR ,'9TOPMAR ','$GRITM',
         TV$FIELD   ,'FIELD   ','$GOHOH',
         TV$RELATN  ,'RELATN  ','$GOHOH',
         TV$CALL    ,'CALL    ','$GOHOH',
         TV$SINGLE  ,'SINGLE  ','$GOHOH',
         TV$BITS    ,'BITS    ','$GOHOH',
         TV$INIT    ,'INIT    ','$GOHOH',
         TV$DONE    ,'DONE    ','$GOHOH',
         TV$FROM    ,'FROM    ','$GOHOH',
         TV$POSITN  ,'POSITN  ','$GOHOH',
         TV$FIXED   ,'FIXED   ','$GOHOH',
         TV$INVALD  ,'INVALD  ','$GOHOH',
         TV$TERMIN  ,'TERMIN  ','$GOHOH',
         TV$CNTRLD  ,'CNTRLD  ','$GOHOH',
         TV$ERRORS  ,'ERRORS  ','$GOHOH',
         TV$PROCDRS ,'PROCDRS ','$GOHOH',
         TV$GROUP   ,'GROUP   ','$GOHOH',
         TV$MODIFY  ,'MODIFY  ','$GOHOH',
         TV$DO      ,'DO      ','$GOHOH',
         TV$CREATE  ,'CREATE  ','$GOHOH',
         TV$JOIN    ,'JOIN    ','$GOHOH',
         TV$DEFINE  ,'DEFINE  ','$GOHOH',
         TV$DOUBLE  ,'DOUBLE  ','$GOHOH',
         TV$WITH    ,'WITH    ','$GOHOH',
         TV$NULLWD  ,'NULLWD  ','$GOHOH',
         TV$SAME    ,'SAME    ','$GOHOH',
         TV$THOSE   ,'THOSE   ','$GOHOH',
         TV$FORM    ,'FORM    ','$GOHOH',
         TV$NO      ,'NO      ','$GOHOH',
         TV$BACKUP  ,'BACKUP  ','$GOHOH',
         TV$HEADNGS ,'HEADNGS ','$GOHOH',
         TV$SCHEMA  ,'SCHEMA  ','$GOHOH',
         TV$PARMTR  ,'PARMTR  ','$GOHOH',
         TV$WRITE   ,'WRITE   ','$GOHOH',
         TV$RELEASE ,'RELEASE ','$GOHOH',
         TV$MOVE    ,'MOVE    ','$GOHOH',
         TV$WHILE   ,'WHILE   ','$GOHOH',
         TV$TRANSF  ,'TRANSF  ','$GOHOH',
         TV$RETURN  ,'RETURN  ','$GOHOH',
         TV$RELATNS ,'RELATNS ','$GOHOH',
         TV$FLOAT   ,'FLOAT   ','$GOHOH',
         TV$VALUE   ,'VALUE   ','$GOHOH',
         TV$INTO    ,'INTO    ','$GOHOH',
         TV$ON      ,'ON      ','$GOHOH',
         TV$FREE    ,'FREE    ','$GOHOH',
         TV$CHANGE  ,'CHANGE  ','$GOHOH',
         TV$TOTALS  ,'TOTALS  ','$GOHOH',
         TV$EDIT    ,'EDIT    ','$GOHOH',
         TV$FULL    ,'FULL    ','$GOHOH',
         TV$RUN     ,'RUN     ','$GOHOH',
         TV$FORMAT  ,'FORMAT  ','$GOHOH',
         TV$INPUT   ,'INPUT   ','$GOHOH',
         TV$BINARY  ,'BINARY  ','$GOHOH',
         TV$APPEND  ,'APPEND  ','$GOHOH',
         TV$DIRECTY ,'DIRECTY ','$GOHOH',
         TV$IS      ,'IS      ','$GOHOH',
         TV$DATA    ,'DATA    ','$GOHOH',
         TV$BY      ,'BY      ','$GOHOH',
         TV$GIVING  ,'GIVING  ','$GOHOH',
         TV$PROMPT  ,'PROMPT  ','$GOHOH',
         TV$SEPAR   ,'SEPAR   ','$GOHOH',
         TV$REPORTS ,'REPORTS ','$GOHOH',
         TV$PROMPTD ,'PROMPTD ','$GOHOH',
         TV$CHECK   ,'CHECK   ','$GOHOH',
         TV$ENTER   ,'ENTER   ','$GOHOH',
         TV$LIST    ,'LIST    ','$GOHOH',
         TV$RESTORE ,'RESTORE ','$GOHOH',
         TV$EXCL    ,'EXCL    ','$GOHOH',
         TV$AMP     ,'AMP     ','$GOHOH',
         TV$PERIOD  ,'PERIOD  ','$GOHOH',
         TV$QMARK   ,'QMARK   ','$GOHOH',
         TV$RBRACK  ,'RBRACK  ','$GOHOH',
         TV$LCURL   ,'LCURL   ','$GOHOH',
         TV$EOF     ,'EOF     ','$GOHOH',
         TV$DBLQT   ,'DBLQT   ','$GOHOH',
         TV$SINQT   ,'SINQT   ','$GOHOH',
         TV$AT      ,'AT      ','$GOHOH',
         TV$CARET   ,'CARET   ','$GOHOH',
         TV$VBAR    ,'VBAR    ','$GOHOH',
         TV$CR      ,'CR      ','$GOHOH',
         TV$DOLLAR  ,'DOLLAR  ','$GOHOH',
         TV$LPAREN  ,'LPAREN  ','$GOHOH',
         TV$COMMA   ,'COMMA   ','$GOHOH',
         TV$COLON   ,'COLON   ','$GOHOH',
         TV$LBRACK  ,'LBRACK  ','$GOHOH',
         TV$UNDER   ,'UNDER   ','$GOHOH',
         TV$RCURL   ,'RCURL   ','$GOHOH',
         TV$PERCENT ,'PERCENT ','$GOHOH',
         TV$RPAREN  ,'RPAREN  ','$GOHOH',
         TV$SEMCOL  ,'SEMCOL  ','$GOHOH',
         TV$BSLASH  ,'BSLASH  ','$GOHOH',
         TV$ACCGR   ,'ACCGR   ','$GOHOH',
         TV$NULL    ,'NULL    ','$GOHOH',
         TV$9BOTTM  ,'9BOTTM  ','$GRITM',
         TV$9FOOTSZ ,'9FOOTSZ ','$GRITM',
         TV$8BGINS  ,'8BGINS  ','$GBINS');
  GLOBAL JVECTOR[(TKNSTUFFSIZE+1) * 5];

  BIND
    TKNVALUE = 0,
    LLINK    = 1,
    RLINK    = 2,
    JVDISP   = 3;
  STRUCTURE BTREE[FIELD] = CASE .FIELD OF
      SET
    (@.BTREE)<27,9>;    %TOKEN VALUE %
    (@.BTREE)<18,9>;    % LEFT LINK   %
    (@.BTREE)<9,9>;     % RIGHT LINK   %
    (@.BTREE)<0,9>;     % JVECTOR DISP %
      TES;

  GLOBAL BTREE GROOT$;
  GLOBAL BTREE GNEXT$;

  GLOBAL BTREE NODE;
  LOCAL JVSTART;

  BIND NULLPTR = 0;

  LOCAL LOWER, UPPER, I, J;

  BIND
    LOWBOUND = 0,
    UPRBOUND = 1;
  STRUCTURE PAIR[FIELD] = CASE .FIELD OF
      SET
    (@.PAIR)<18,18>;    % LOWER BOUND %
    (@.PAIR)<0,18>;     % UPPER BOUND %
      TES;

  LOCAL PAIR HEAD;
  LOCAL TOP;
  LOCAL STACK[15];
  LOCAL CFILECB$ OUTF, CLINE$ OL;

% THIS ROUTINE CREATES A NEW NODE IN THE BINARY TREE %
  ROUTINE INSERT(J) =
    BEGIN
    LOCAL I;

   %*
    $UAPSZ($USPTR('INSERT '));
    $UAPSC(JVECTOR[.J*5+1]<36,7>,8);
    $UOUTL(0);
   *%
    GNEXT$[TKNVALUE] _ .JVECTOR[.J*5];
    GNEXT$[LLINK] _ GNEXT$[RLINK] _ NULLPTR;
    GNEXT$[JVDISP] _ .J;
   %**
    $UAPDC(.GNEXT$[TKNVALUE]);
    $UAPSZ($USPTR(','));
    $UAPDC(.GNEXT$[LLINK]);
    $UAPSZ($USPTR(','));
    $UAPDC(.GNEXT$[RLINK]);
    $UAPSZ($USPTR(','));
    $UAPDC(.GNEXT$[JVDISP]);
    $UOUTL(0);
   **%
    I _ .GNEXT$;
    GNEXT$ _ .GNEXT$ + 1;

    .I
    END;

% THIS ROUTINE DETERMINES IF A NODE EXISTS, FOR THE SPECIFIED VALUE, AND
  IF NOT IT REQUESTS THAT ONE BE CREATED.
%
  ROUTINE FIND(PTR) =
    BEGIN
    LOCAL I, J;

    I _ .PTR * 5;
   %***
    $UAPSZ($USPTR('FIND  '));
    $UAPSC(JVECTOR[.I+1]<36,7>,8);
    $UOUTL(0);
   ***%
    NODE _ .GROOT$;
    WHILE .JVECTOR[.I] NEQ .NODE[TKNVALUE]
      DO
        BEGIN
       %***
        $UAPSZ($USPTR('NODE:  '));
                $UAPDC(.NODE[TKNVALUE]);
                $UAPSZ($USPTR(','));
                $UAPDC(.NODE[LLINK]);
                $UAPSZ($USPTR(','));
                $UAPDC(.NODE[RLINK]);
                $UAPSZ($USPTR(','));
                $UAPDC(.NODE[JVDISP]);
                $UOUTL(0);
       ***%
        IF .JVECTOR[.I] LSS .NODE[TKNVALUE]
          THEN
            IF .NODE[LLINK] NEQ NULLPTR
              THEN
                NODE _ .NODE[LLINK] + .GROOT$
              ELSE
                BEGIN
                J _ INSERT(.PTR);
                NODE[LLINK] _ .J - .GROOT$;
                NODE _ .J;
               %*****
                $UAPDC(.NODE[TKNVALUE]);
                $UAPSZ($USPTR(','));
                $UAPDC(.NODE[LLINK]);
                $UAPSZ($USPTR(','));
                $UAPDC(.NODE[RLINK]);
                $UAPSZ($USPTR(','));
                $UAPDC(.NODE[JVDISP]);
                $UOUTL(0);
               *****%
                END
          ELSE
            IF .NODE[RLINK] NEQ NULLPTR
              THEN
                NODE _ .NODE[RLINK] + .GROOT$
              ELSE
                BEGIN
                J _ INSERT(.PTR);
                NODE[RLINK] _ .J - .GROOT$;
                NODE _ .J;
               %**
                $UAPDC(.NODE[TKNVALUE]);
                $UAPSZ($USPTR(','));
                $UAPDC(.NODE[LLINK]);
                $UAPSZ($USPTR(','));
                $UAPDC(.NODE[RLINK]);
                $UAPSZ($USPTR(','));
                $UAPDC(.NODE[JVDISP]);
                $UOUTL(0);
               **%
                END;
        END;
    END;

%***
  START OF PROCESSING
***%

  $CRESET();
  GROOT$ _ GNEXT$ _ JVSTART _ $CGTZM(TKNSTUFFSIZE+1);
  $UZERO(TKNSTUFFSIZE*5,JVECTOR);
%
   COPY AND SORT THE TABLE OF TOKEN MNEMONICS AND ASSOCIATED SEMANTIC
   ROUTINE NAMES.
%
  $UMOVE(5,TKNINFO,JVECTOR);
  $UOUTM($USPTR('MOVE TKNINFO TO JVECTOR'),0);
  INCR A FROM 1 TO TKNSTUFFSIZE - 1
    DO
      BEGIN
      I _ 0;
      J _.A * 5;
      WHILE .TKNINFO[.J] GTR .JVECTOR[.I] AND .JVECTOR[.I] NEQ 0
        DO
          I _ .I + 5;
      DECR B FROM .A * 5 TO .I
        DO 
          $UMOVE(1, JVECTOR[.B], JVECTOR[.B +5]);
      $UMOVE(5, TKNINFO[.J], JVECTOR[.I]);
      END;
  $UOUTM($USPTR('MOVE COMPLETED'),0);
%*****
  INCR I FROM 0 TO (TKNSTUFFSIZE - 1) * 5 BY 5
    DO
      BEGIN
      $UAPDC(.JVECTOR[.I]);
      $UAPSZ($USPTR(','));
      $UAPSC(JVECTOR[.I+1]<36,7>,8);
      $UAPSZ($USPTR(','));
      $UAPSC(JVECTOR[.I+3]<36,7>,6);
      $UOUTL(0);
      END;
*****%
  I _ TKNSTUFFSIZE/2;
  INSERT(.I);
  J _ (TKNSTUFFSIZE - .I)/2 + .I;
  INSERT(.J);
  GROOT$[RLINK] _ 1;
  TOP _ HEAD _ STACK;
  HEAD[LOWBOUND] _ .J;
  HEAD[UPRBOUND] _ TKNSTUFFSIZE;
  HEAD _ .HEAD + 1;
  HEAD[LOWBOUND] _ .I;
  HEAD[UPRBOUND] _ .J;
  LOWER _ -1;
  UPPER _ .I;

%  BUILD THE TREE  %
  $UOUTM($USPTR('START BUILDING THE TREE'),0);
  WHILE .TOP - 1 LEQ .HEAD
    DO
      BEGIN
      I _ (.LOWER + .UPPER)/2;
      FIND(.I);
      IF .UPPER - .I GTR 1
        THEN  % STACK (I,UPPER)  %
          BEGIN
          HEAD _ .HEAD + 1;
          HEAD[LOWBOUND] _ .I;
          HEAD[UPRBOUND] _ .UPPER;
          END;
      IF .I - .LOWER LSS 2
        THEN  %  POP (LOW,UPR)  %
          BEGIN
          LOWER _ .HEAD[LOWBOUND];
          UPPER _ .HEAD[UPRBOUND];
          HEAD _ .HEAD - 1;
          END
        ELSE
          UPPER _ .I;
      END;
  $UOUTM($USPTR('TREE FINISHED'),0);

%  TRANSFORM THE TREE INTO IT'S BLISS EQUIVALENT  %
  OUTF _ $UFILEOPEN(SIXBIT 'BTTREE', SIXBIT 'BLI', 0,
                    CV$OUTPUT + CV$SEQUEN + CV$LINE, 2);
  $UAPSZ($USPTR('MODULE BTTREE(DOLLAR,ENTRIES=($GBTRE),FSAVE,TIMING,TIMER=EXTERNAL(SIX12)) ='));
  $UOUTL(.OUTF);
  $UOUTM($USPTR('  BEGIN'),.OUTF);
  $UOUTM($USPTR('  REQUIRE GDEFS.BLI[7,107355];'),.OUTF);
                                                 %EXTERNAL DECLARATIONS
                                                  FOR ROUTINE NAMES AND
                                                  MACRO AND STRUCTURE
                                                  FOR BINARY TREE.
                                                 %
  $UOUTM($USPTR('  UNDECLARE GTREE$, $GBTRE;'),.OUTF);
  $UOUTM($USPTR('  BIND STREE = PLIT(GTREE$ GLOBALLY NAMES'),.OUTF);
  INCR X FROM .GROOT$ TO .GNEXT$ - 1 BY 1
    DO
      BEGIN
      NODE _ .X;
      $UAPSZ($USPTR('    GM$TN('));
      $UAPN(.NODE[TKNVALUE],10,1);              % TOKEN VALUE     %
      $UAPSZ($USPTR(','''));
      I _ .NODE[JVDISP] * 5;
      $UAPSC(JVECTOR[.I + 1]<36,7>,5);          % TOKEN MNEMONIC  %
        % NOTE:
           THIS BYTE POINTER ACTUALLY POINTS TO THE LEFT OF THE BYTE
           THAT IS TO BE MOVED.
        %
      $UAPSZ($USPTR(''','''));
      $UAPSC(JVECTOR[.I+2]<36,7>,2);
      $UAPSZ($USPTR(''','));
      $UAPN(.NODE[LLINK],10,1);
      $UAPSZ($USPTR(','));
      $UAPN(.NODE[RLINK],10,1);                 % RIGHT LINK INDEX %
      $UAPSZ($USPTR(','));
      $UAPSC(JVECTOR[.I + 3]<36,7>,6);          % ROUTINE NAME     %
      $UAPSZ($USPTR('),'));
      $UOUTL(.OUTF);
      END;
  $UAPN(0,10,1);
  $UOUTM($USPTR('    );'),.OUTF);
  $UOUTM($USPTR('  GLOBAL ROUTINE $GBTRE = 0;'),.OUTF);
  $UOUTM($USPTR('  END'),.OUTF);
  $UOUTM($USPTR('ELUDOM'),.OUTF);
  $CLOSE(OUTF);
  END
ELUDOM
   