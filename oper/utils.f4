C ************************************************************
C *
C *
C *
C *
C *
C *            THIS REPRESENTS THE
C *            UTILITY ROUTINES
C *            OF THE ADVANCED GRAPHICS
C *            PROGRAMMING PACKAGE..
C *
C *            COPYRIGHT.......
C *
C *            TEKTRONIX INC.
C *            BOX 500
C *            BEAVERTON, OREGON
C *
C *            RELEASE 2
C *            VERSION 1
C *            MODIFICATION 1
C *
C *
C *      FILE 5 OF PRODUCT 062-1439-02
C *
C *
C *
C **************************************************************
C ROUTINE---BA-0670.05-01   MNMX0
       SUBROUTINE MNMX0(I,J,NC,NN)
C------************************************************************
C------*** INTEGER MIN AND MAX ROUTINE                          ***
C------************************************************************
C------BRIAN DIEHM
C------
       INTEGER NN(NC)
       I=NN(1)
       J=I
       DO 1 K=1,NC
       L=NN(K)
       IF (L.LT.I) I=L
       IF (L.GT.J) J=L
1      CONTINUE
       RETURN
       END
C ROUTINE---BA-0680.05-01   MNMX1
       SUBROUTINE MNMX1(X,Y,N,Z)
C------***********************************************************
C------*** REAL MIN AND MAX ROUTINE                            ***
C------***********************************************************
C------BRIAN DIEHM
C------
       DIMENSION Z(N)
       X=Z(1)
       Y=X
       DO 1 J=1,N
       W=Z(J)
       IF (W.LT.X) X=W
       IF (W.GT.Y) Y=W
1      CONTINUE
       RETURN
       END
C ROUTINE---BA-0690.05-01   MNMX3
       SUBROUTINE MNMX3(XMIN,XMAX,X,I,J)
C------***********************************************************
C------*** DOUBLE REAL MIN AND MAX ROUTINE                     ***
C------***********************************************************
C------BRIAN DIEHM
C------
       INTEGER I,J,K
       REAL X(J),XMAX,XMIN
       XMIN=X(I)
       XMAX=XMIN
       IF((J-I).LE.0)RETURN
       K1=I+1
       DO1K=K1,J
       IF(X(K).LT.XMIN)XMIN=X(K)
       IF(X(K).GT.XMAX)XMAX=X(K)
1      CONTINUE
       RETURN
       END
C ROUTINE---BA-0700.05-01   NUMBX
       SUBROUTINE NUMBX (X,Y,Z,N,I)
C------************************************************************
C------*** CARTESIAN X-AXIS LABELLING ROUTINE                   ***
C------************************************************************
C------BRIAN DIEHM
C------
       DIMENSION Z(N)
       FACTR=50.
       IF (N.NE.6) FACTR=0.
       XX=X+FACTR
       CALL NUMBR (XX,Y,Z,N,I,'H')
       RETURN
       END
C ROUTINE---BA-0710.05-01   NUMBY
       SUBROUTINE NUMBY (X,Y,Z,N,I)
C------************************************************************
C------*** CARTESIAN Y-AXIS LABELLING ROUTINE                   ***
C------************************************************************
C------BRIAN DIEHM
C------
       DIMENSION Z(N)
       FACTR=50.
       IF (N.NE.6) FACTR=0.
       YY=Y+FACTR
       CALL NUMBR (X,YY,Z,N,I,'V')
       RETURN
       END
C ROUTINE---BA-0720.05-01   NUMBR
       SUBROUTINE NUMBR (X,Y,A,NLAB,ITYPE,IAXES)
C------************************************************************
C------*** GENERALIZED NUMBERING ROUTINE                        ***
C------************************************************************
C------BRIAN DIEHM
C------
       DIMENSION A(NLAB), IAX(2), IARAY(9)
       COMMON/TKTRNX/KBAUDR,KERROR,KGRAFL,KHOMEY,KKMODE,
     & KHORSZ,KVERSZ,KITALC,KSIZEF,KLMRGN,KRMRGN,
     & KTBLSZ,KHORZT(10),KVERTT(10),
     & KBEAMX,KBEAMY,KMOVEF,KPCHAR(4),KDASHT,
     & KMINSX,KMINSY,KMAXSX,KMAXSY,TMINVX,TMINVY,TMAXVX,TMAXVY,
     & TREALX,TREALY,TIMAGX,TIMAGY,TRCOSF,TRSINF,TRSCAL
       DATA IAX/'H','V'/
       DATA IIOUT/5/
       CALL PLTSM (0.,0.,70)
       CALL PLTSM (0.,0.,999)
       CALL PLTSM (0.,0.,21)
C------
C------GO TO HORIZONTAL OR VERTICAL SECTION
C------
       IF (IAXES.EQ.IAX(2)) GO TO 100
       IF (IAXES.EQ.IAX(1)) GO TO 200
99     RETURN
C------
C------VERTICAL AXIS SECTION
C------
100    XX=X-150.
       IF (KHORSZ.EQ.12) XX=X-128.
       DO 102 II=1,NLAB
       YY=FLOAT(II-1)*100.+Y-7.
       IF (KVERSZ.EQ.19) YY=YY+2.
       CALL PLTSM (XX,YY,3)
       IF (ITYPE.NE.0) GO TO 101
       NN=IFIX(A(II))
       CALL ANMODE
       WRITE (IIOUT,1) NN
       GO TO 102
101    CALL G9 (IARAY,A(II))
       CALL ANMODE
       WRITE (IIOUT,2) IARAY
102    CONTINUE
       GO TO 99
C******MACHINE DEPENDENT FORMAT
1      FORMAT ($,1H+,I9,2H -)
C******MACHINE DEPENDENT FORMAT
2      FORMAT ($,1H+,9A1,2H -)
C******MACHINE DEPENDENT FORMAT
3      FORMAT ($,1H+,I9)
C******MACHINE DEPENDENT FORMAT
4      FORMAT ($,1H+,9A1)
C------
C------HORIZONTAL AXIS SECTION
C------
200    DO 202 II=1,NLAB
       XX=FLOAT(II-1)*100.-100.+X
       IF (KHORSZ.EQ.12) XX=XX+20.
       YY=Y-50.
       IF (II/2*2.EQ.II) YY=YY-25.
       CALL PLTSM (XX,YY,3)
       IF (ITYPE.NE.0) GO TO 201
       NN=IFIX(A(II))
       CALL ANMODE
       WRITE (IIOUT,3) NN
       GO TO 202
201    CALL G9 (IARAY,A(II))
       CALL ANMODE
       WRITE (IIOUT,4) IARAY
202    CONTINUE
       END
C ROUTINE---BA-0730.05-01   G9
       SUBROUTINE G9(IOUT,X)
C------************************************************************
C------*** REAL NUMBER TO A-FORMAT ARRAY CONVERSION ROUTINE     ***
C------************************************************************
C------BRIAN DIEHM
C------
       INTEGER I,II,II2,IOUT(9),J,L
       INTEGER LB,LD,LE,LM,LP,LN(10)
       REAL X,XX
       DATA LB,LD,LE,LM,LP/' ','.','E','-','+'/
       DATA LN/'0','1','2','3','4','5','6','7','8','9'/
       DO1I=1,9
1      IOUT(I)=LB
       XX=ABS(X)*1.0000001
       IF(XX.LT..001)GOTO6
       IF(XX.GT.9999.)GOTO10
       I=9
       DO2II=1,9
       IF(XX.GE.1000.)GOTO3
       XX=XX*10.
2      I=I-1
3      IOUT(I)=LD
       IF(I.LE.8)IOUT(I+1)=LN(1)
       IF(I.LE.7)IOUT(I+2)=LN(1)
       I=9
       II2=4
4      J=INT(XX)
       DO5II=1,II2
       IF(IOUT(I).EQ.LD)I=I-1
       L=J-((J/10)*10)
       J=J/10
       IOUT(I)=LN(L+1)
5      I=I-1
13     IF(IOUT(I).EQ.LB)GOTO14
       I=I-1
       GOTO13
14     IF(X.LT.0.)IOUT(I)=LM
       RETURN
6      IF(X.NE.0.)GOTO7
       IOUT(7)=LN(1)
       IOUT(8)=LD
       IOUT(9)=LN(1)
       RETURN
7      DO8I=1,99
       XX=XX*10.
       IF(XX.GE.1.)GOTO9
8      CONTINUE
       I=99
9      I=-I
       GOTO12
10     DO11I=1,99
       XX=XX/10.
       IF(XX.LT.10.)GOTO12
11     CONTINUE
       I=99
12     IOUT(6)=LE
       IOUT(7)=LP
       IF(I.LT.0)IOUT(7)=LM
       I=IABS(I)
       L=I/10
       IOUT(8)=LN(L+1)
       L=I-(L*10)
       IOUT(9)=LN(L+1)
       IOUT(3)=LD
       XX=XX*100.
       I=5
       II2=3
       GOTO4
       END
C ROUTINE---BA-0740.05-01   AXES
       SUBROUTINE AXES(XMIN,XMAX,ISCAL,IYSUP,SIZE,
     & BMIN,AINC,AX,START,XEND,STOL,NUMB,BLAB,IX,IEXPO)
C------************************************************************
C------*** CARTESIAN AXIS ROUTINE                               ***
C------************************************************************
C------BRIAN DIEHM
C------
       INTEGER IEXPO,IS,ISCAL,ISUP,IX,IYSUP,J,L,NUMB
       REAL AINC,ALAB,AMAX,AMIN,AX,BLAB(10),BMIN,DELS,DELX,FF,
     & ORIGN,SIZE,START,STOL,X,XM(5),XMAX,XMIN,XML,Y,Z,XEND
       DATA XM,FF/1.,2.,2.5,5.,10.,.43429448/
       AMIN=AMIN1(XMIN,XMAX)
       AMAX=AMAX1(XMIN,XMAX)
       ISUP=IYSUP
1      IF(AMIN.NE.AMAX)GOTO3
       AMIN=AMIN-1.
       AMAX=AMAX+1.
3      IS=0
       IX=1
       IF(ISUP.EQ.1)GOTO4
       IF(AMAX.LT.0.)AMAX=0.
       IF(AMIN.GT.0.)AMIN=0.
4      IF(AMAX.LT.0.)IS=-1
       IF(AMIN.GT.0.)IS=1
       IF(IS.EQ.0)ISUP=0
       DELX=AMAX-AMIN
       DELS=SIZE/100.
       STOL=0.
       ORIGN=-50.
       AX=0.
       IF(IS)5,6,8
5      AX=DELS
       GOTO8
6      AX=INT(((SIZE*AMIN/(-DELX))/50.)+.5)*50
       IF((AX.EQ.0.).AND.(AMIN.LT.0.))AX=50.
       IF((AX.EQ.SIZE).AND.(AMAX.GT.0.))AX=AX-50.
       AX=AX/100.
       ORIGN=INT(AX+.1)
       STOL=AX-ORIGN
8      IF(IS.NE.0)DELS=DELS-.5
       NUMB=DELS-STOL+.1
       IF((AMIN.LT.0.).AND.(AMAX.GT.0.))GOTO11
       AINC=DELX/DELS
       ALAB=AMIN
       GOTO12
11     AINC=AMAX1(-AMIN/AX,AMAX/(DELS-AX))
       ALAB=-ORIGN*AINC
12     IF(ISCAL.EQ.0)GOTO20
       AINC=.9999*AINC
13     XM(3)=2.5
       IF((ABS(AMIN).GE.1.E5).OR.(ABS(AMAX).GE.1.E5))GOTO14
       IF((INT(AMIN).EQ.AMIN).AND.(INT(AMAX).EQ.AMAX).AND.
     & (AINC.GT..5))IX=0
       IF((IX.EQ.0).AND.(AINC.LT.5.))XM(3)=4.
14     Y=10.**IINT(FF*ALOG(AINC))
       AINC=AINC/Y
       DO15L=1,5
       IF(AINC.LE.XM(L))GOTO16
15     CONTINUE
16     AINC=XM(L)*Y
       IF(IS.NE.0)GOTO18
       ALAB=-ORIGN*AINC
       GOTO20
18     ALAB=IINT(ALAB/AINC)*AINC
       XML=ALAB+(DELS+.001)*AINC
       IF(((XML*IS).GT.0.).AND.((ALAB*IS).GT.0.))GOTO19
       ISUP=0
       GOTO3
19     IF(XML.GE.AMAX)GOTO20
       AINC=1.1*AINC
       GOTO13
20     BMIN=ALAB-STOL*AINC
       IF(IS.EQ.1)STOL=.5
       AX=AX*100.
       START=((IS+1)/2)*50
       XEND=DELS*100.+START
       STOL=STOL*100.
       NUMB=NUMB+1
       X=ABS(ALAB)
       Y=AMAX1(ABS(AMIN),ABS(AMAX))
       L=ORIGN+1
       DO22J=1,NUMB
       BLAB(J)=ALAB+(J-1)*AINC
       IF(L.EQ.J)BLAB(J)=0.
       IF(ABS(BLAB(J)).GT.X)X=ABS(BLAB(J))
       IF((ABS(BLAB(J)).LT.Y).AND.(BLAB(J).NE.0.))Y=ABS(BLAB(J))
22     CONTINUE
       IEXPO=MIN0(0,IINT(FF*ALOG(Y))+1)+MAX0(0,IINT(FF*ALOG(X))-3)
       Y=10.**IEXPO
       Z=AINC/Y
       DO23J=1,NUMB
23     BLAB(J)=BLAB(J)/Y
       IF((INT(BLAB(1)).EQ.BLAB(1)).AND.(INT(Z).EQ.Z))IX=0
       DO25J=1,NUMB
25     BLAB(J)=BLAB(J)*1.000001
       RETURN
       END
C ROUTINE---BA-0750.05-01   DAXES
       SUBROUTINE DAXES(XMIN,XMAX,ISCAL,IYSUP,SIZE,
     & BMIN,AINC,AX,NUMB,BLAB,IX,IEXPO)
C------************************************************************
C------*** DOUBLE CARTESIAN AXIS ROUTINE                        ***
C------************************************************************
C------BRIAN DIEHM
C------
       INTEGER IEXPO,IS,ISCAL,ISUP,IX,IYSUP,J,L,NUMB
       REAL AINC,ALAB,AMAX,AMIN,AX,BLAB(10),BMIN
       REAL DELS,DELX,FF,ORIGN,SIZE,X,XM(5)
       REAL XMAX,XMIN,XML,Y,Z
       DATA XM,FF/1.,2.,2.5,5.,10.,.43429448/
       AMIN=AMIN1(XMIN,XMAX)
       AMAX=AMAX1(XMIN,XMAX)
       ISUP=IYSUP
1      IF(AMIN.NE.AMAX)GOTO3
       AMIN=AMIN-1.
       AMAX=AMAX+1.
3      IS=0
       IX=1
       IF(ISUP.EQ.1)GOTO4
       IF(AMAX.LT.0.)AMAX=0.
       IF(AMIN.GT.0.)AMIN=0.
4      IF(AMAX.LT.0.)IS=-1
       IF(AMIN.GT.0.)IS=1
       IF(IS.EQ.0)ISUP=0
       DELX=AMAX-AMIN
       DELS=SIZE/100.
       ORIGN=-50.
       AX=0.
       IF(IS)5,6,8
5      AX=DELS
       GOTO8
6      AX=INT(((SIZE*AMIN/(-DELX))/100.)+.5)*100
       IF((AX.EQ.0.).AND.(AMIN.LT.0.))AX=100.
       IF((AX.EQ.SIZE).AND.(AMAX.GT.0.))AX=AX-100.
       AX=AX/100.
       ORIGN=INT(AX+.1)
8      NUMB=DELS+.1
       IF((AMIN.LT.0.).AND.(AMAX.GT.0.))GOTO11
       AINC=DELX/DELS
       ALAB=AMIN
       GOTO12
11     AINC=AMAX1(-AMIN/AX,AMAX/(DELS-AX))
       ALAB=-ORIGN*AINC
12     IF(ISCAL.EQ.0)GOTO20
       AINC=.9999*AINC
13     XM(3)=2.5
       IF((ABS(AMIN).GT.1.E5).OR.(ABS(AMAX).GT.1.E5))GOTO14
       IF((INT(AMIN).EQ.AMIN).AND.(INT(AMAX).EQ.AMAX).AND.
     & (AINC.GT..5))IX=0
       IF((IX.EQ.0).AND.(AINC.LT.5.))XM(3)=4.
14     Y=10.**IINT(FF*ALOG(AINC))
       AINC=AINC/Y
       DO15L=1,5
       IF(AINC.LE.XM(L))GOTO16
15     CONTINUE
16     AINC=XM(L)*Y
       IF(IS.NE.0)GOTO18
       ALAB=-ORIGN*AINC
       GOTO20
18     ALAB=IINT(ALAB/AINC)*AINC
       XML=ALAB+(DELS+.001)*AINC
       IF(((XML*IS).GT.0.).AND.((ALAB*IS).GT.0.))GOTO19
       ISUP=0
       GOTO3
19     IF(XML.GE.AMAX)GOTO20
       AINC=1.1*AINC
       GOTO13
20     BMIN=ALAB
       AX=AX*100.
       NUMB=NUMB+1
       X=ABS(ALAB)
       Y=AMAX1(ABS(AMIN),ABS(AMAX))
       L=ORIGN+1
       DO22J=1,NUMB
       BLAB(J)=ALAB+(J-1)*AINC
       IF(L.EQ.J)BLAB(J)=0.
       IF(ABS(BLAB(J)).GT.X)X=ABS(BLAB(J))
       IF((ABS(BLAB(J)).LT.Y).AND.(BLAB(J).NE.0.))Y=ABS(BLAB(J))
22     CONTINUE
       IEXPO=MIN0(0,IINT(FF*ALOG(Y))+1)+MAX0(0,IINT(FF*ALOG(X))-3)
       Y=10.**IEXPO
       Z=AINC/Y
       DO23J=1,NUMB
23     BLAB(J)=BLAB(J)/Y
       IF((INT(BLAB(1)).EQ.BLAB(1)).AND.(INT(Z).EQ.Z))IX=0
       DO25J=1,NUMB
25     BLAB(J)=BLAB(J)*1.000001
       RETURN
       END
C ROUTINE---BA-0760.05-01   LAXES
       SUBROUTINE LAXES (XMIN,XMAX,IBASE,MN,MX,F,IOVER,
     & ENT,RENT,FF,IINT)
C------************************************************************
C------*** LOG AXES ROUTINE                                     ***
C------************************************************************
C------BY BRIAN DIEHM
C------
C------LIMIT OF TEN CYCLES.  IF OVER TEN, THEN NUMBER OF CYCLES
C------LABELED REDUCED TO 10 OR LESS.  IF REDUCED, THEN THE
C------LOG GRID PATTERN SHOULD NOT BE USED, BUT A CARTESIAN ONE.
C------
       DATA IIOUT/5/
       ZMIN=AMIN1(XMIN,XMAX)
C------
C------IF ANY NEGATIVE DATA IS TO BE PLOTTED, TYPE ERROR
C------MESSAGE AND TERMINATE PROGRAM.
C------
       IF (ZMIN.GT.0.) GO TO 5
       WRITE (IIOUT,4)
       STOP
C******MACHINE DEPENDENT FORMAT
4      FORMAT ($,'+ALL LOG AXIS VALUES MUST BE GREATER THAN 0')
5      ZMAX=AMAX1(XMIN,XMAX)
C------
C------AFTER THE MAX AND MIN ARE DETERMINED, SET WHETHER NAT-
C------URAL OR BASE 10 LOG.
C------
       F=1.
       IF (IBASE.EQ.10) F=.43429448
C------
C------DETERMINE THE MAX AND MIN CYCLE NECESSARY
C------
       V=F*ALOG(ZMIN)
       MN=IFIX(V+.001)
       IF (MN.GT.(V+.001)) MN=MN-1
       V=F*ALOG(ZMAX)
       MX=IFIX(V-.001)
       IF (MX.LT.(V-.001)) MX=MX+1
C------
C------ALLOW NO MORE THAN 10 LABELS
C------
       IPOWR=0
       IOVER=MX-MN
       XOVER=FLOAT(IOVER)
1      IF (XOVER.LE.10.) GO TO 2
       IPOWR=IPOWR+1
       XOVER=XOVER/10.
       GO TO 1
C------
C------DETERMINE NUMBER OF LABELS
C------
2      IF (FLOAT(IFIX(XOVER)).EQ.XOVER) GO TO 3
       XOVER=XOVER+1.
3      IOVER=IFIX(XOVER)
C------
C------DETERMINE INTERVAL (IN TEKPOINTS) BETWEEN LABELS AND CYCLES
C------
       ENT=600./FLOAT(IOVER)
       RENT=600./FLOAT(IOVER*10**IPOWR)
C------
C------DETERMINE BASE E OR 10 FACTOR, READJUST UPPER CYCLE NUMBER,
C------AND THE AMOUNT BETWEEN LABELS.
C------
       FF=F*RENT
       MX=MN+IOVER*10**IPOWR
       IINT=10**IPOWR
       RETURN
       END
C ROUTINE---BA-0770.05-01   NAXES
       SUBROUTINE NAXES(XMIN,XMAX,ISCAL,IYSUP,SIZE,
     & BMIN,AINC,AX,STOL,NUMB,BLAB,IX,IEXPO)
C------************************************************************
C------*** POLAR AXIS ROUTINE                                   ***
C------************************************************************
C------BRIAN DIEHM
C------
       INTEGER IEXPO,IS,ISCAL,ISUP,IX,IYSUP,J,L,NUMB
       REAL AINC,ALAB,AMAX,AMIN,AX,BLAB(10),BMIN
       REAL DELS,DELX,FF,ORIGN,SIZE,STOL,X,XM(5)
       REAL XMAX,XMIN,XML,Y,Z
       DATA XM,FF/1.,2.,2.5,5.,10.,.43429448/
       AMIN=AMIN1(XMIN,XMAX)
       AMAX=AMAX1(XMIN,XMAX)
       ISUP=IYSUP
1      IF(AMIN.NE.AMAX)GOTO3
       AMIN=AMIN-1.
       AMAX=AMAX+1.
3      IS=0
       IX=1
       IF(ISUP.EQ.1)GOTO4
       IF(AMAX.LT.0.)AMAX=0.
       IF(AMIN.GT.0.)AMIN=0.
4      IF(AMAX.LT.0.)IS=-1
       IF(AMIN.GT.0.)IS=1
       IF(IS.EQ.0)ISUP=0
       DELX=AMAX-AMIN
       DELS=SIZE/100.
       STOL=0.
       ORIGN=-50.
       AX=0.
       IF(IS)5,6,8
5      AX=DELS
       GOTO8
6      AX=INT(((SIZE*AMIN/(-DELX))/50.)+.5)*50
       IF((AX.EQ.0.).AND.(AMIN.LT.0.))AX=50.
       IF((AX.EQ.SIZE).AND.(AMAX.GT.0.))AX=AX-50.
       AX=AX/100.
       ORIGN=INT(AX+.1)
       STOL=AX-ORIGN
8      NUMB=DELS-STOL+.1
       IF((AMIN.LT.0.).AND.(AMAX.GT.0.))GOTO11
       AINC=DELX/DELS
       ALAB=AMIN
       GOTO12
11     AINC=AMAX1(-AMIN/AX,AMAX/(DELS-AX))
       ALAB=-ORIGN*AINC
12     IF(ISCAL.EQ.0)GOTO20
       AINC=.9999*AINC
13     XM(3)=2.5
       IF((ABS(AMIN).GT.1.E5).OR.(ABS(AMAX).GT.1.E5))GOTO14
       IF((INT(AMIN).EQ.AMIN).AND.(INT(AMAX).EQ.AMAX).AND.
     & (AINC.GT..5))IX=0
       IF((IX.EQ.0).AND.(AINC.LT.5.))XM(3)=4.
14     Y=10.**IINT(FF*ALOG(AINC))
       AINC=AINC/Y
       DO15L=1,5
       IF(AINC.LE.XM(L))GOTO16
15     CONTINUE
16     AINC=XM(L)*Y
       IF(IS.NE.0)GOTO18
       ALAB=-ORIGN*AINC
       GOTO20
18     ALAB=IINT(ALAB/AINC)*AINC
       XML=ALAB+(DELS+.001)*AINC
       IF(((XML*IS).GT.0.).AND.((ALAB*IS).GT.0.))GOTO19
       ISUP=0
       GOTO3
19     IF(XML.GE.AMAX)GOTO20
       AINC=1.1*AINC
       GOTO13
20     BMIN=ALAB-STOL*AINC
       AX=AX*100.
       STOL=STOL*100.
       NUMB=NUMB+1
       X=ABS(ALAB)
       Y=AMAX1(ABS(AMIN),ABS(AMAX))
       L=ORIGN+1
       DO22J=1,NUMB
       BLAB(J)=ALAB+(J-1)*AINC
       IF(L.EQ.J)BLAB(J)=0.
       IF(ABS(BLAB(J)).GT.X)X=ABS(BLAB(J))
       IF((ABS(BLAB(J)).LT.Y).AND.(BLAB(J).NE.0.))Y=ABS(BLAB(J))
22     CONTINUE
       IEXPO=MIN0(0,IINT(FF*ALOG(Y))+1)+MAX0(0,IINT(FF*ALOG(X))-3)
       Y=10.**IEXPO
       Z=AINC/Y
       DO23J=1,NUMB
23     BLAB(J)=BLAB(J)/Y
       IF((INT(BLAB(1)).EQ.BLAB(1)).AND.(INT(Z).EQ.Z))IX=0
       DO25J=1,NUMB
25     BLAB(J)=BLAB(J)*1.000001
       RETURN
       END
C ROUTINE---BA-0780.05-01   GRID
       SUBROUTINE GRID
C------************************************************************
C------*** GRID OVERLAY ROUTINE                                 ***
C------************************************************************
C------BRIAN DIEHM
C------
       DIMENSION XY(100), IIM(12), IMM(3)
       DATA IIM /'J','F','M','A','M','J','J','A','S','O','N','D'/
       DATA IMM /'JAN','JUL','DEC'/
       DATA IIOUT/5/
C------
C------GET THE GRID DEFINITION ARGUMENTS
C------
       IXX=0
       IYY=0
       CALL PGRID (IXX,IYY,0)
C------
C------INITIALIZE PLOTTING ROUTINE
C------
900    CALL PLTSM (0.,0.,999)
       CALL PLTSM (0.,0.,21)
C------
C------CHECK WHETHER CARTESIAN, LOG, OR NO X-AXIS GRID REQUESTED
C------IF STANDARD CARTESIAN, SET UP TO PROPER VALUE
C------
     (IXX.LT.0) GO TO 4000
       IX=IXX
       IF (IX.EQ.0) IX=112
       IF (IX.LT.100) GO TO 100
C------
C------X-AXIS CARTESIAN SECTION
C------
       IX=IX-100
       XY(1)=0.
       SPACE=600./FLOAT(IX)
       IZ=IX+1
       IF (IZ.GT.100) IZ=100
       DO 1 I=2,IZ
1      XY(I)=XY(I-1)+SPACE
       IF (IZ.EQ.100) GO TO 1000
       XY(IX+2)=-1.
       GO TO 1000
C------
C------X-AXIS LOG SECTION
C------
100    NNN=1
       DO 2 I=1,IX
       DO 2 J=1,10
       Z=FLOAT(I)
       XY(NNN)=(ALOG10(FLOAT(J))+Z-1.)*600./FLOAT(IX)
       IF (NNN.GT.99) GO TO 1000
       NNN=NNN+1
2      CONTINUE
       XY(NNN)=-1
C------
C------HORIZONTAL LINES PLOTTING SECTION
C------
1000   DO 3 I=1,100
       IF (XY(I).LT.0.) GO TO 200
       CALL PLTSM (XY(I)+400.,150.,3)
3      CALL PLTSM (XY(I)+400.,750.,2)
C------
C------CHECK WHETHER CARTESIAN, LOG, OR NO Y-AXIS GRID REQUESTED
C------IF STANDARD CARTESIAN, SET UP TO PROPER VALUE
C------
200    IF (IYY.LT.0) GO TO 3000
       IY=IYY
       IF (IY.EQ.0) IY=112
       IF (IY.LT.100) GO TO 300
C------
C------Y-AXIS CARTESIAN SECTION
C------
       IY=IY-100
       XY(1)=0.
       SPACE=600./FLOAT(IY)
       IZ=IY+1
       IF (IZ.GT.100) IZ=100
       DO 4 I=2,IZ
4      XY(I)=XY(I-1)+SPACE
       IF (IZ.EQ.100) GO TO 2000
       XY(IY+2)=-1
       GO TO 2000
C------
C------Y-AXIS LOG SECTION
C------
300    NNN=1
       DO 5 I=1,IY
       DO 5 J=1,10
       Z=FLOAT(I)
       XY(NNN)=(ALOG10(FLOAT(J))+Z-1.)*600./FLOAT(IY)
       IF (NNN.GE.99) GO TO 2000
       NNN=NNN+1
5      CONTINUE
       XY(NNN)=-1
C------
C------VERTICAL LINES PLOTTING SECTION
C------
2000   DO 6 I=1,100
       IF (XY(I).LT.0.) GO TO 3000
       CALL PLTSM (400.,XY(I)+150.,3)
6      CALL PLTSM (1000.,XY(I)+150.,2)
C------
C------CLEAN UP AND RETURN SECTION
C------
3000   CALL PLTSM (0.,0.,999)
400    RETURN
4000   GO TO (4001,4002,4003,4004,4006,4005), IYY
C------
C------FULL POLAR GRID SECTION
C------
4001   CALL ARC (700.,150.,700.,150.,700.,450.,.001)
       CALL ARC (700.,250.,700.,250.,700.,450.,.001)
       CALL ARC (700.,350.,700.,350.,700.,450.,.001)
       CALL PLTSM (400.,150.,59)
       CALL PLTSM (1000.,750.,60)
       CALL ARC (700.,50.,700.,50.,700.,450.,.001)
       DO 5001 I=1,12
       XJ=FLOAT(I*15)
       XXX=SIND(XJ)*450.
       YYY=COSD(XJ)*450.
       IF ((I/2)*2.EQ.I) GO TO 5002
       XX2=SIND(XJ)*100.
       YY2=COSD(XJ)*100.
       CALL PLTSM (700.+XXX,450.+YYY,3)
       CALL PLTSM (700.+XX2,450.+YY2,2)
       CALL PLTSM (700.-XX2,450.-YY2,3)
       CALL PLTSM (700.-XXX,450.-YYY,2)
       GO TO 5001
5002   CALL PLTSM (700.+XXX,450.+YYY,3)
       CALL PLTSM (700.-XXX,450.-YYY,2)
5001   CONTINUE
       CALL PLTSM (0.,0.,59)
       CALL PLTSM (1023.,780.,60)
       IXX=101
       IYY=101
       GO TO 900
C------
C------FIRST QUADRANT POLAR GRID
C------
4002   CALL ARC (600.,150.,400.,350.,400.,150.,.001)
       CALL ARC (800.,150.,400.,550.,400.,150.,.001)
       CALL ARC (1000.,150.,400.,750.,400.,150.,.001)
       CALL PLTSM (400.,150.,59)
       CALL PLTSM (1000.,750.,60)
       CALL ARC (1200.,150.,400.,950.,400.,150.,.001)
       DO 5003 I=1,5
       XJ=FLOAT(I*15)
       XXX=SIND(XJ)*900.
       YYY=COSD(XJ)*900.
       IF ((I/2)*2.EQ.I) GO TO 5004
       XX2=SIND(XJ)*200.
       YY2=COSD(XJ)*200.
       CALL PLTSM (400.+XX2,150.+YY2,3)
       GO TO 5003
5004   CALL PLTSM (400.,150.,3)
5003   CALL PLTSM (400.+XXX,150.+YYY,2)
       CALL PLTSM (0.,0.,59)
       CALL PLTSM (1023.,780.,60)
       IXX=101
       IYY=101
       GO TO 900
C------
C------TIME SERIES OVERLAY 1 --- 1 YEAR 1 WEEK INCREMENTS
C------
4003   DO 5005 I=1,52
       X=FLOAT((I-1)*12)+168.
       Y=100.
       IF ((I.EQ.1).OR.(I.EQ.13).OR.(I.EQ.26)) Y=754.
       IF ((I.EQ.39).OR.(I.EQ.52)) Y=754.
       CALL PLTSM (X,Y,3)
5005   CALL PLTSM (X,90.,2)
       Y=100.
       DO 5006 I=1,14
       CALL PLTSM (168.,Y,3)
       CALL PLTSM (780.,Y,2)
5006   Y=Y+50.
       CALL PLTSM (145.,70.,3)
       CALL ANMODE
       II=1
       WRITE (IIOUT,5008) II
5008   FORMAT (1H+,$,I2)
       DO 5007 I=1,5
       X=FLOAT((I)*120)+146.
       CALL PLTSM (X,70.,3)
       CALL ANMODE
       II=I*10
5007   WRITE (IIOUT,5008) II
       CALL PLTSM (0.,0.,3)
       GO TO 400
C------
C------TIME SERIES OVERLAY 2 --- 1 YEAR 1 MONTH INCREMENTS
C------
4004   DO 5009 I=1,12
       X=FLOAT((I-1)*55)+175.
       CALL PLTSM (X,754.,3)
5009   CALL PLTSM (X,100.,2)
       Y=100.
       DO 5010 I=1,14
       CALL PLTSM (175.,Y,3)
       CALL PLTSM (780.,Y,2)
5010   Y=Y+50.
       CALL PLTSM (0.,0.,3)
       DO 5011 I=1,12
       X=FLOAT((I-1)*55)+168.
       CALL PLTSM (X,70.,3)
       CALL ANMODE
5011   WRITE (IIOUT,5012) IIM(I)
5012   FORMAT ($,1H+,A1)
       CALL PLTSM (0.,0.,3)
       GO TO 400
C------
C------TIME SERIES GRID 4 --- 5 YEARS 1 PERIOD INCREMENTS
C------
4005   DO 5013 I=1,65
       X=FLOAT((I-1)*10)+160.
       Y=100.
       IF ((I.EQ.1).OR.(I.EQ.14).OR.(I.EQ.27)) Y=754.
       IF ((I.EQ.40).OR.(I.EQ.53).OR.(I.EQ.65)) Y=754.
       YY=90.
       IF (Y.EQ.754.) YY=80.
       IF ((I.EQ.7).OR.(I.EQ.20).OR.(I.EQ.33)) YY=80.
       IF ((I.EQ.46).OR.(I.EQ.59)) YY=80.
       CALL PLTSM (X,Y,3)
5013   CALL PLTSM (X,YY,2)
       Y=100.
       DO 5014 I=1,14
       CALL PLTSM (160.,Y,3)
       CALL PLTSM (800.,Y,2)
5014   Y=Y+50.
       DO 5015 I=1,5
       X=FLOAT((I-1)*130)+146.
       CALL PLTSM (X,60.,3)
       CALL ANMODE
       II=1
       WRITE (IIOUT,5008) II
       X=FLOAT((I-1)*130)+186.
       CALL PLTSM (X,60.,3)
       CALL ANMODE
       II=7
5015   WRITE (IIOUT,5008)  II
       CALL PLTSM (776.,60.,3)
       CALL ANMODE
       II=13
       WRITE (IIOUT,5008) II
       CALL PLTSM (0.,0.,3)
       GO TO 400
C------
C------TIME SERIES GRID 3 --- 5 YEARS 1 MONTH INCREMENTS
C------
4006   DO 5016 I=1,60
       X=FLOAT((I-1)*10)+190.
       Y=100.
       IF ((I.EQ.1).OR.(I.EQ.13).OR.(I.EQ.25)) Y=754.
       IF ((I.EQ.37).OR.(I.EQ.49).OR.(I.EQ.60)) Y=754.
       YY=90.
       IF (Y.EQ.754.) YY=80.
       IF ((I.EQ.7).OR.(I.EQ.19).OR.(I.EQ.31)) YY=80.
       IF ((I.EQ.43).OR.(I.EQ.55)) YY=80.
       CALL PLTSM (X,Y,3)
5016   CALL PLTSM (X,YY,2)
       CALL PLTSM (0.,0.,3)
       Y=100.
       DO 5017 I=1,14
       CALL PLTSM (190.,Y,3)
       CALL PLTSM (780.,Y,2)
5017   Y=Y+50.
       DO 5018 I=1,5
       X=FLOAT((I-1)*120)+172.
       CALL PLTSM (X,60.,3)
       CALL ANMODE
       WRITE (IIOUT,5019) IMM(1)
       X=X+60.
       CALL PLTSM (X,60.,3)
       CALL ANMODE
5018   WRITE (IIOUT,5019) IMM(2)
       CALL PLTSM (762.,60.,3)
       CALL ANMODE
       WRITE (IIOUT,5019) IMM(3)
       CALL PLTSM (0.,0.,3)
       GO TO 400
C******MACHINE DEPENDENT FORMAT
5019   FORMAT ($,1H+,A3)
       END
C ROUTINE---BA-0790.05-01   PGRID
       SUBROUTINE PGRID (IXX,IYY,I)
C------************************************************************
C------*** GRID ARGUMENT SAVING ROUTINE                         ***
C------************************************************************
C------BRIAN DIEHM
C------
       IF (I.GT.0) GO TO 1
       IXX=IX
       IYY=IY
       GO TO 2
1      IX=IXX
       IY=IYY
2      RETURN
       END
C ROUTINE---BA-0800.05-01   HCOPY
C
C
       SUBROUTINE HCOPY
       CALL HDCOPY
       RETURN
       END
C ROUTINE---BA-0810.05-01   CHAR
C
C
       SUBROUTINE CHAR
       CALL ANMODE
       RETURN
       END
C ROUTINE---BA-0820.05-01   LETTER
       SUBROUTINE LETTER(N,X,Y,IA)
       DIMENSION IA(72)
       DATA NDEV/5/
C NDEV MUST BE EQUAL TO THE LOGICAL DEV# OF THE TERMINAL.
       DATA NCPWRD/5/
C NCPWRD MUST BE EQUAL TO THE MAX # OF CHARS THAT CAN BE
C STORED IN AN INTEGER VARIABLE.
1000   FORMAT(1H+,$,15A5)
C THE ABOVE FORMAT STATEMENT MUST SUBPRESS INITIAL LF TER-
C MINAL CR AND ALLOW FOR AT LEAST 72 FULLY PACKED A/N CHARS.
       IX=X
       IY=Y
       CALL MOVABS(IX,IY)
       CALL ANMODE
       J=(N+NCPWRD-1)/NCPWRD
       WRITE(NDEV,1000) (IA(I),I=1,J)
       RETURN
       END
C ROUTINE---BA-0830.05-01   ARC
       SUBROUTINE ARC(X1,Y1,X2,Y2,XC,YC,E)
       INTEGER N
       REAL P,R,B,F,X,C,Y,E
       REAL YC,X2,Y1,Y2,A,XC,X1
       DATA P/6.28318530/
       CALL PLTSM(0.,0.,21)
       A=A2TAN(Y1-YC,X1-XC)
       B=A2TAN(Y2-YC,X2-XC)
       IF(B.LE.A)B=B+P
       R=SQRT((X1-XC)**2+(Y1-YC)**2)+.5
       F=E
       CALLPLTSM(X1,Y1,3)
       IF((E.GT.1.).OR.(E.LE.0.))GOTO1
       IF((E*R).LT.1.)F=1./R
       C=ATAN(SQRT((1./(1.-F)**2)-1.))
       N=INT(P/(4.*C)+1.)*4
       GOTO2
1      N=INT(SQRT(R)+1.)*4
2      C=P/N
3      A=A+C
       IF(A.GT.B)A=B
       X=R*COS(A)+XC
       Y=R*SIN(A)+YC
       CALLPLTSM(X,Y,2)
       IF(A.LT.B)GOTO3
       CALLPLTSM(0.,0.,14)
       RETURN
       END
C ROUTINE---BA-0840.05-01   A2TAN
       FUNCTION A2TAN(Y,X)
C-AS-9040.20-03  02/28/70
       REAL P,X,Y
       DATA P/3.14159265/
       IF(X.NE.0.)GOTO1
       IF(Y.GT.0.)A2TAN=.5*P
       IF(Y.LT.0.)A2TAN=1.5*P
       IF(Y.EQ.0.)A2TAN=0.
       RETURN
1      IF(Y.NE.0.)GOTO2
       A2TAN=0.
       IF(X.LT.0.)A2TAN=P
       RETURN
2      A2TAN=ATAN(ABS(Y/X))
       IF((X.GT.0.).AND.(Y.GT.0.))RETURN
       IF((X.LT.0.).AND.(Y.GT.0.))A2TAN=P-A2TAN
       IF((X.LT.0.).AND.(Y.LT.0.))A2TAN=A2TAN+P
       IF((X.GT.0.).AND.(Y.LT.0.))A2TAN=2.*P-A2TAN
       RETURN
       END
C ROUTINE---BA-0850.05-01   TAXES
       SUBROUTINE TAXES(XMIN,XMAX,ISCAL,IYSUP,SIZE,
     & BMIN,AINC,AX,STOL,NUMB,BLAB,IX,IEXPO)
       INTEGER IEXPO,IS,ISCAL,ISUP,IX,IYSUP,J,L,NUMB
       REAL AINC,ALAB,AMAX,AMIN,AX,BLAB(10),BMIN
       REAL DELS,DELX,FF,ORIGN,SIZE,STOL,X,XM(5)
       REAL XMAX,XMIN,XML,Y,Z
       DATA XM,FF/1.,2.,2.5,5.,10.,.43429448/
       AMIN=AMIN1(XMIN,XMAX)
       AMAX=AMAX1(XMIN,XMAX)
       IEXPO=7
       IF((AMIN.LT..1).AND.(AMIN.GT.0.))AMIN=0.
       IF((AMIN.GT.(-.1)).AND.(AMIN.LT.0.))AMIN=-.1
       IF(AMIN.LT.(-9999.E6))AMIN=-9998.5E6
       IF(AMIN.GT.9999.E6)RETURN
       IF((AMAX.LT..1).AND.(AMAX.GT.0.))AMAX=.1
       IF((AMAX.GT.(-.1)).AND.(AMAX.LT.0.))AMAX=0.
       IF(AMAX.LT.(-9999.E6))RETURN
       IF(AMAX.GT.9999.E6)AMAX=9999.E6
       IF((AMAX-AMIN).LT..5)AMAX=AMIN+.5
       ISUP=IYSUP
3      IS=0
       IX=1
       IF(ISUP.EQ.1)GOTO4
       IF(AMAX.LT.0.)AMAX=0.
       IF(AMIN.GT.0.)AMIN=0.
4      IF(AMAX.LT.0.)IS=-1
       IF(AMIN.GT.0.)IS=1
       IF(IS.EQ.0)ISUP=0
       DELX=AMAX-AMIN
       DELS=SIZE/100.
       STOL=0.
       ORIGN=-50.
       AX=0.
       IF(IS)5,6,8
5      AX=DELS
       GOTO8
6      AX=INT(((SIZE*AMIN/(-DELX))/50.)+.5)*50
       IF((AX.EQ.0.).AND.(AMIN.LT.0.))AX=50.
       IF((AX.EQ.SIZE).AND.(AMAX.GT.0.))AX=AX-50.
       AX=AX/100.
       ORIGN=INT(AX+.1)
       STOL=AX-ORIGN
8      NUMB=DELS-STOL+.1
       IF((AMIN.LT.0.).AND.(AMAX.GT.0.))GOTO11
       AINC=DELX/DELS
       ALAB=AMIN
       GOTO12
11     AINC=AMAX1(-AMIN/AX,AMAX/(DELS-AX))
       ALAB=-ORIGN*AINC
12     IF(ISCAL.EQ.0)GOTO20
       AINC=.9999*AINC
13     XM(3)=2.5
       IF((ABS(AMIN).GT.1.E5).OR.(ABS(AMAX).GT.1.E5))GOTO14
       IF((INT(AMIN).EQ.AMIN).AND.(INT(AMAX).EQ.AMAX).AND.
     & (AINC.GT..5))IX=0
       IF((IX.EQ.0).AND.(AINC.LT.5.))XM(3)=4.
14     Y=10.**IINT(FF*ALOG(AINC))
       AINC=AINC/Y
       DO15L=1,5
       IF(AINC.LE.XM(L))GOTO16
15     CONTINUE
16     AINC=XM(L)*Y
       IF(IS.NE.0)GOTO18
       ALAB=-ORIGN*AINC
       GOTO20
18     ALAB=IINT(ALAB/AINC)*AINC
       XML=ALAB+(DELS+.001)*AINC
       IF(((XML*IS).GT.0.).AND.((ALAB*IS).GT.0.))GOTO19
       ISUP=0
       GOTO3
19     IF(XML.GE.AMAX)GOTO20
       AINC=1.1*AINC
       GOTO13
20     BMIN=ALAB-STOL*AINC
       AX=AX*100.
       STOL=STOL*100.
       NUMB=NUMB+1
       X=ABS(ALAB)
       Y=AMAX1(ABS(AMIN),ABS(AMAX))
       L=ORIGN+1
       DO22J=1,NUMB
       BLAB(J)=ALAB+(J-1)*AINC
       IF(L.EQ.J)BLAB(J)=0.
       IF(ABS(BLAB(J)).GT.X)X=ABS(BLAB(J))
       IF((ABS(BLAB(J)).LT.Y).AND.(BLAB(J).NE.0.))Y=ABS(BLAB(J))
22     CONTINUE
       IEXPO=MIN0(0,IINT(FF*ALOG(Y))+1)+MAX0(0,IINT(FF*ALOG(X))-3)
       IF((IEXPO.GT.6).OR.(IEXPO.LT.0))RETURN
       IF((IEXPO.EQ.1).OR.(IEXPO.EQ.2))IEXPO=3
       IF((IEXPO.EQ.4).OR.(IEXPO.EQ.5))IEXPO=6
       Y=10.**IEXPO
       Z=AINC/Y
       DO23J=1,NUMB
23     BLAB(J)=BLAB(J)/Y
       IF((INT(BLAB(1)).EQ.BLAB(1)).AND.(INT(Z).EQ.Z))IX=0
       DO25J=1,NUMB
25     BLAB(J)=BLAB(J)*1.000001
       RETURN
       END
C ROUTINE---BA-0870.05-01   SCALER
       SUBROUTINE SCALER(XOFF,YOFF,SCALX,SCALY)
C------SUBROUTINE TO PASS SCALE FACTORS TO STATUS ROUTINE
       DIMENSION SF(6)
       CALL PLTSM(0.,0.,21)
       SF(1)=XOFF
       SF(2)=YOFF
       SF(3)=SCALX
       SF(4)=SCALY
       SF(5)=0
       SF(6)=0
C------SET SCALE FLAG IN STAT AND PASS SCALE VALUES
       CALL STAT(1,1,1,1.)
       CALL STAT(3,8,1,SF)
       RETURN
       END
C ROUTINE---BA-0880.05-01   LNLN
       SUBROUTINE LNLN(STX,TICX,RLX,STY,TICY,RLY,IOPT)
C------SUBROUTINE TO DRAW A SCALED AND LABELED AXIS OR GRID
       DIMENSION ASV(4), IOPT(2)
       CALL PLTSM(0.,0.,21)
       CALL STAT(3,6,0,ASV)
C------GET SCALE VALUES FROM STAT
       IO3=ASV(1)
       IO4=ASV(2)
       IEX=(RLX*ASV(3))+IO3
       IEY=(RLY*ASV(4))+IO4
       IX0=(ABS(STX)*ASV(3))+IO3
       IY0=(ABS(STY)*ASV(4))+IO4
C------DETERMINE THE POSITION OF 0 ON THE Y AXIS  DRAW X AXIS
C------THROUGH THE 0 POSITION OF Y
       CALL PZRO(STY,RLY,IY0,IO4,IEY)
       CALL PLTSM(FLOAT(IO3),FLOAT(IY0),3)
       CALL PLTSM(FLOAT(IEX),FLOAT(IY0),2)
C------DETERMINE THE POSITION OF 0 ON THE X AXIS  DRAW Y AXIS
C------THROUGH THE 0 POSITION
       CALL PZRO(STX,RLX,IX0,IO3,IEX)
       CALL PLTSM(FLOAT(IX0),FLOAT(IO4),3)
       CALL PLTSM(FLOAT(IX0),FLOAT(IEY),2)
       RN=STY
       IT=ASV(4)*TICY
C------DRAW THE TICS OR GRID LINES ON THE Y AXIS
       DO 10 IY=IO4,IEY,IT
       CALL TIC(IY,IX0,IO3,IEX,IOPT(2),0,RN)
10     RN=RN+TICY
       RN=STX
       IT=ASV(3)*TICX
C------DRAW THE TICS OR GRID LINES ON THE X AXIS
       DO 20 IX=IO3,IEX,IT
       CALL TIC(IX,IY0,IO4,IEY,IOPT(1),1,RN)
20     RN=RN+TICX
       RETURN
       END
C ROUTINE---BA-0890.05-01   LNLG
       SUBROUTINE LNLG(STX,TICX,RLX,IDECY,IDC1Y,IOPT)
C------SUBROUTINE TO DRAW A LINEAR X LOG Y AXIS
       DIMENSION ASV(4), IOPT(2)
       CALL PLTSM(0.,0.,21)
C------GET SCALE VALUES FROM THE STATUS ROUTINE
       CALL STAT(3,6,0,ASV)
       IO3=ASV(1)
       IO4=ASV(2)
       IEX=(RLX*ASV(3))+IO3
       IX0=(ABS(STX)*ASV(3))+IO3
       IY=(IDECY*ASV(4))+IO4
C------FIND THE 0 POSITION ON THE X AXIS
C------DRAW THE X AXIS
       CALL PZRO(STX,RLX,IX0,IO3,IEX)
       CALL PLTSM(FLOAT(IO3),FLOAT(IO4),3)
       CALL PLTSM(FLOAT(IEX),FLOAT(IO4),2)
       RN=STX
       IT=ASV(3)*TICX
C------PUT TICS OR GRID LINES ON THE X AXIS
       DO 30 IX=IO3,IEX,IT
       CALL TIC(IX,IO4,IO4,IY,IOPT(1),1,RN)
30     RN=RN+TICX
       IF(IOPT(2)-1)10,10,20
C------SET TICS OR GRID LINES FOR LOGAXIS
20     IX0=IO3
C------DRAW A LOG Y AXIS THROUGH THE 0 POINT OF THE X AXIS
10     CALL YLOG(IDECY,IDC1Y,IY,IEX,IO4,ASV(4),IX0,IOPT(2))
       RETURN
       END
C ROUTINE---BA-0900.05-01   LGLN
       SUBROUTINE LGLN(IDECX,IDC1X,STY,TICY,RLY,IOPT)
       DIMENSION ASV(4), IOPT(2)
       CALL PLTSM(0.,0.,21)
C------GET SCALE VALUES FROM THE STATUS ROUTINE
       CALL STAT(3,6,0,ASV)
       IO3=ASV(1)
       IO4=ASV(2)
       IEY=(RLY*ASV(4))+IO4
       IY0=(ABS(STY)*ASV(4))+IO4
       IX=(IDECX*ASV(3))+IO3
C------DETERMINE THE 0 POSITION ON THE Y AXIS
       CALL PZRO(STY,RLY,IY0,IO4,IEY)
C------DRAW THE Y AXIS
       CALL PLTSM(FLOAT(IO4),FLOAT(IO3),3)
       CALL PLTSM(FLOAT(IO4),FLOAT(IEY),2)
       RN=STY
       IT=ASV(4)*TICY
C------PUT TICS OR GRID LINES ON THE Y AXIS
       DO 30 IY=IO4,IEY,IT
       CALL TIC(IY,IO3,IO3,IX,IOPT(2),0,RN)
30     RN=RN+TICY
       IF(IOPT(1)-1)10,10,20
C------DETERMINE IF GRID LINES OR TICS FOR LOGAXIS
20     IY0=IO4
C------DRAW X LOG AXIS
10     CALL XLOG(IDECX,IDC1X,IX,IEY,IO3,ASV(3),IY0,IOPT(1))
       RETURN
       END
C ROUTINE---BA-0910.05-01   LGLG
       SUBROUTINE LGLG(IDECX,IDC1X,IDECY,IDC1Y,IOPT)
       DIMENSION ASV(4), IOPT(2)
       CALL PLTSM(0.,0.,21)
C------GET SCALE VALUES FRON STATUS ROUTINE
       CALL STAT(3,6,0,ASV)
       IO3=ASV(1)
       IO4=ASV(2)
       IY=(IDECY*ASV(4))+IO4
       IX=(IDECX*ASV(3))+IO3
C------DRAW X AXIS
10     CALL XLOG(IDECX,IDC1X,IX,IY,IO3,ASV(3),IO4,IOPT(1))
C------DRAW Y AXIS
       CALL YLOG(IDECY,IDC1Y,IY,IX,IO4,ASV(4),IO3,IOPT(2))
       RETURN
       END
C------THE FOLLOWING SUBROUTINE ARE NOT INTENED FOR 
C------USE BY THE APPPLICATION PROGRAMMER
C------THESE ROUTINES ARE CALLED BY THE AXIS ROUTINES
C------
C------
C ROUTINE---BA-0920.05-01   YLOG
       SUBROUTINE YLOG(IDECY,IDC1Y,IY,IX,IO4,S4,IX0,IOPT)
C------SUBROUTINE TO GENERATE A VERTICAL LOG AXIS
       NN=IDC1Y*10
       LT=8
C------IF GRID IS CALLED CALCULATE LENGTH OF LINE
       IF(IOPT-1)30,30,40
40     LT=IX-IX0
C------DRAW VERTTICAL LINE FOR AXIS
30     CALL PLTSM(FLOAT(IX0),FLOAT(IO4),3)
       CALL PLTSM(FLOAT(IX0),FLOAT(IY),2)
C------LOOP TO DRAW AND LABEL TICS
       DO 20 I=1,IDECY
       DO 10 N=2,10
       Y=N
       NY=((ALT(Y)+I-1)*S4)+IO4
       CALL PLTSM(FLOAT(IX0+LT),FLOAT(NY),3)
10     CALL PLTSM(FLOAT(IX0-8),FLOAT(NY),2)
C------POSITION AND LABEL TIC OR GRID LINE
       CALL NUMB(FLOAT(IX0-135),FLOAT(NY),FLOAT(NN),0)
20     NN=NN*10
       RETURN
       END
C ROUTINE---BA-0930.05-01   XLOG
       SUBROUTINE XLOG(IDECX,IDC1X,IX,IY,IO3,S3,IY0,IOPT)
C------SUBROUTINE TO DRAW AND LABEL HORZ LOG10 AXIS
       NN=IDC1X*10
       LT=8
C------IF GRID IS CALLED CALCULATE LENGTH OF LINE
       IF(IOPT-1)30,30,40
40     LT=IY-IY0
C------DRAW HORZ. LINE
30     CALL PLTSM(FLOAT(IO3),FLOAT(IY0),3)
       CALL PLTSM(FLOAT(IX),FLOAT(IY0),2)
C------LOOP TO DRAW TICS OR GRID LINES
       DO 20 I=1,IDECX
       DO 10 N=2,10
       X=N
       NX=((ALT(X)+I-1)*S3)+IO3
       CALL PLTSM(FLOAT(NX),FLOAT(IY0+LT),3)
10     CALL PLTSM(FLOAT(NX),FLOAT(IY0-8),2)
C------POSITION AND LABEL 
       CALL NUMB(FLOAT(NX-117),FLOAT(IY0-35),FLOAT(NN),0)
20     NN=NN*10
       RETURN
       END
C ROUTINE---BA-0940.05-01   ALT
       FUNCTION ALT(A)
C------FUNCTION TO CALCULATE COMMON LOG
       ALT=ALOG(A)/ALOG(10.)
       RETURN
       END
C ROUTINE---BA-0950.05-01   STAT
       SUBROUTINE STAT(IF,ITO,IRW,ARR)
C------SUBROUTINE TO STORE STATUS AND SCALE VALUES
       DIMENSION STA(8),ARR(6)
       K=1
C------IF IRW=1 READ =0 WRITE
       IF(IRW)10,10,20
C------IF SCALE FLAG 0 GET DEFALT VALUES
10     IF(STA(1)-1)50,40,50
C------READ LOOP
40     DO 30 I=IF,ITO
       ARR(K)=STA(I)
30     K=K+1
       RETURN
C------WRITE LOOP
20     DO 60 I=IF,ITO
       STA(I)=ARR(K)
60     K=K+1
       RETURN
C------DEFALT VALUES
50     STA(1)=1
       STA(2)=1
       STA(3)=150
       STA(4)=150
       STA(5)=1
       STA(6)=1
       STA(7)=0
       STA(8)=0
       GO TO 40
       END
C ROUTINE---BA-0960.05-01   PZRO
       SUBROUTINE PZRO(S,E,IZ,IOF,IEN)
C------SUBROUTINE TO DETERMINE THE POSITION OF 0
       IF(S)10,20,20
C------0 AT OFFSET 
20     IZ=IOF
       RETURN
10     IF(S+E)30,30,40
C------  0 AT END OF LINE
30     IZ=IEN
40     RETURN
       END
C ROUTINE---BA-0970.05-01   TIC
       SUBROUTINE TIC(IAXP,IP0,IOF,IEND,IOPT,ID,RN)
C------SUBROUTINE TO DRAW A TIC OR GRID LINE AND LABEL
       LT=8
       IF(IOPT-1)10,10,20
C------IF GRID OPT CALCULATE LINE LENGTH
20     IP0=IOF
       LT=IEND-IOF
10     IF(ID)30,30,40
C------0=YTIC,1=XTIC
30     CALL PLTSM(FLOAT(IP0+LT),FLOAT(IAXP),3)
       CALL PLTSM(FLOAT(IP0-8),FLOAT(IAXP),2)
       CALL NUMB(FLOAT(IP0-126),FLOAT(IAXP),RN,1)
       GO TO 50
40     CALL PLTSM(FLOAT(IAXP),FLOAT(IP0+LT),3)
       CALL PLTSM(FLOAT(IAXP),FLOAT(IP0-8),2)
C------POSITION AND OUTPUT LABEL
       CALL NUMB(FLOAT(IAXP-105),FLOAT(IP0-35),RN,1)
50     RETURN
       END
C ROUTINE---BA-0980.05-01   NUMB
       SUBROUTINE NUMB(X,Y,RN,J)
       DATA IIOUT/5/
       IX=X
       IY=Y
       CALL MOVABS(IX,IY)
       CALL ANMODE
       IF(J.EQ.1)GOTO10
       N=RN
       WRITE (IIOUT,1) N
1      FORMAT('+',I8)
       RETURN
10     WRITE (IIOUT,2) RN
2      FORMAT('+',F8.2)
       RETURN
       END
C ROUTINE---BA-0990.05-01   PLTSM
       SUBROUTINE PLTSM(XX,YY,NN)
       COMMON /TKTRNX/ KBAUDR, KERROR, KGRAFL, KHOMEY, KKMODE,
     & KHORSZ, KVERSZ, KITALC, KSIZEF, KLMRGN, KRMRGN,
     & KTBLSZ, KHORZT(10), KVERTT(10),
     & KBEAMX, KBEAMY, KMOVEF, KPCHAR(4),KDASHT,
     & KMINSX, KMINSY, KMAXSX, KMAXSY, TMINVX, TMINVY, TMAXVX,
     & TMAXVY,
     & TREALX, TREALY, TIMAGX, TIMAGY, TRCOSF, TRSINF, TRSCAL
       DIMENSION SAVEA(60)
       DATA INF,XD,YD/1,0.,0./
       DATA IIOUT/5/
       X=XX
       Y=YY
       N=NN
C------DECODE INPUT COMMAND ***
       IF(N.EQ.2) GO TO 2
       IF(N.EQ.3) GO TO 3
       IF(N.EQ.12) GO TO 12
       IF(N.EQ.13) GO TO 13
       IF(N.EQ.14) GO TO 9999
       IF(N.EQ.15) GO TO 15
       IF(N.EQ.17) GO TO 17
       IF(N.EQ.18) GO TO 18
       IF(N.EQ.19) GO TO 19
       IF(N.EQ.21) GO TO 21
       IF(N.EQ.59) GO TO 59
       IF(N.EQ.60) GO TO 60
       IF(N.EQ.70) GO TO 70
       IF(N.EQ.999) GO TO 999
C------IF NOT ABOVE, INDICATE ERROR ***
       CALL SVSTAT(SAVEA)
       CALL MOVABS(0,10)
       CALL ANMODE
       WRITE (IIOUT,10) N
10     FORMAT('ERROR IN PLTSM CALL, N=',I4,'   PRESS CR TO CONTINUE')
       PAUSE
       CALL RESTAT(SAVEA)
       GO TO 9999
C------
C------DRAW ABSOLUTE ***
2      X=X-XD
       Y=Y-YD
       CALL CINF(INF,X,Y)
       CALL DRAWA(X,Y)
       GO TO 9999
C------
C------MOVE ABSOLUTE ***
3      X=X-XD
       Y=Y-YD
       CALL CINF(INF,X,Y)
       CALL MOVEA(X,Y)
       GO TO 9999
C------
C------DRAW RELATIVE ***
12     CALL CINF(INF,X,Y)
       CALL DRAWR(X,Y)
       GO TO 9999
C------
C------MOVE RELATIVE ***
13     CALL CINF(INF,X,Y)
       CALL MOVER(X,Y)
       GO TO 9999
C------
C------GO TO HOME ***
15     CALL HOME
       GO TO 9999
C------
C------CURSOR HAS BEEN MOVED RELATIVE ***
17     CALL CINF(INF,X,Y)
       KBEAMX=KBEAMX+INT(X)
       TREALX=TREALX+X
       TIMAGX=TIMAGX+X
       GO TO 180
C------
C------CURSOR HAS BEEN MOVED ABSOLUTE X, RELATIVE Y ***
18     CALL CINF(INF,X,Y)
       KBEAMX=INT(X)
       TREALX=X
       TIMAGX=X
180    KBEAMX=KBEAMY+INT(Y)
       TREALY=TREALY+Y
       TIMAGY=TIMAGY+Y
       GO TO 9999
C------
C------RETURN KERROR VALUE ACCORDING TO CURRENT BEAM POSITION ****
19     CALL PCLIPT(TIMAGX,TIMAGY)
       NN=KERROR
       GO TO 9999
C------
C------X,Y INPUT WILL BE IN RASTER UNITS ***
21     INF=0
       GO TO 9999
C------
C------DEFINE MINIMUM X,Y BOUNDS OF WINDOW ***
59     CALL CINF(INF,X,Y)
       TMINVX=X
       TMINVY=Y
       KMINSX=INT(X)
       KMINSY=INT(Y)
       KGRAFL=0
       GO TO 9999
C------
C------DEFINE MAXIMUM X,Y BOUNDS OF WINDOW ***
60     CALL CINF(INF,X,Y)
       TMAXVX=X
       TMAXVY=Y
       KMAXSX=INT(X)
       KMAXSY=INT(Y)
       KGRAFL=0
       GO TO 9999
C------
C------DEFINE OFFSET ***
70     XD=X
       YD=Y
       GO TO 9999
C------
C------RESET ***
999    INF=0
       XD=0.
       YD=0.
       CALL CINF (INF,0.,0.)
       TMINVX=0.
       TMINVY=0.
       KMINSX=0
       KMINSY=0
       KGRAFL=0
       CALL CINF (INF,1023.,780.)
       TMAXVX=1023.
       TMAXVY=780.
       KMAXSX=1023
       KMAXSY=780
       INF=1
9999   RETURN
       END
C ROUTINE---BA-1000.05-01   CINF
C
C
       SUBROUTINE CINF(INF,X,Y)
       IF(INF.EQ.0) GOTO 100
       X=FLOAT(KIN(X))
       Y=FLOAT(KIN(Y))
100    RETURN
       END
C ROUTINE---BA-1010.05-01   IINT
       FUNCTION IINT(X)
       IINT=X
       IF(IINT.GT.X)IINT=IINT-1
       RETURN
       END
  `wV