      SUBROUTINE ACAN
      COMMON NODPLC(800),YNL(2001),TSTORE(2001),TRACUR(1700),VN(401),
     1   VNIM1(401),IORDER(401),IUR(402),IUC(800),MATLOC(1800)
      COMMON/INDATA/NUMEL,NUNODS,NUMNOD,NOSTOP,JELCNT(20),LOCATE(21),
     1   ICURNT(21),JUNODE(401),NAME(200),LOCAL(200),MNAME(200)
      COMMON/PARAM/VALUE(200),SOURCE(150),SYMVAL(25,25)
      COMMON/MISCEL/NOGO,IGOOF,NOPRNT,IACCT,JOBNAM(16),IDI,IDO
      COMMON/STATUS/MODE,OMEGA,TIME,DELTA,DELOLD,ICALC
      COMMON/KNSTNT/TWOPI,XLOG2,XLOG10,RAD,BOLTZ,CHARGE,VT
      COMMON/POINTS/IUS,ILS,MIRROR,NSTOP,NUMVS,LASTUT,LASTLT
      COMMON/OUTDAT/ROUT(101,10),FREQ(101),IONUM,IONAM(10),IOPND(10),
     1   IONND(10),IOFLG(10),NUMOR(3),IOVAR(10,2),IACVAR(5)
      COMMON/ITER/GMIN,PERTOL,VNTOL,IPASS1,IFINAL,ITERNO,IFIND
      COMMON/AC/JACFLG,FSTART,FSTOP,IDFREQ,FINCR,INOISE,NOSPRT,
     1   NOSOUT,NOSIN
C
C
      DIMENSION PUTOUT(2,101,5)
      EQUIVALENCE (PUTOUT(1,1,1),ROUT(1,1))
      DIMENSION YPARTS(2,1),VNPART(2,1)
      COMPLEX CVAL,CYNL(1),CVN(1),CU(1),CUL(1)
      EQUIVALENCE (CYNL(1),YPARTS(1,1),YNL(1))
      EQUIVALENCE (CVN(1),VNPART(1,1),VN(1))
      EQUIVALENCE (CU(1),CYNL(402)),(CUL(1),CYNL(1202))
C
C
      LE=NSTOP-1
      ICALC=0
      FREQ1=FSTART
C
C  LOAD MATRIX
C
    1 OMEGA=TWOPI*FREQ1
      DO 2 I=1,NUMNOD
      VNPART(1,I)=0.0
      VNPART(2,I)=0.0
      YPARTS(1,I)=0.0
    2 YPARTS(2,I)=0.0
      DO 3 I=IUS,LASTUT
      YPARTS(1,I)=0.0
    3 YPARTS(2,I)=0.0
      DO 4 I=ILS,LASTLT
      YPARTS(1,I)=0.0
    4 YPARTS(2,I)=0.0
      CALL ACLOAD
      IF (IGOOF.EQ.1) GO TO 1000
      IF (LE) 100,75,10
C
C  DECOMPOSITION
C
   10 DO 50 L=1,LE
      KK=IORDER(L)
      RY=ABS(YPARTS(1,KK))
      XY=ABS(YPARTS(2,KK))
      IF ((RY+XY).GT.GMIN) GO TO 30
      YPARTS(1,KK)=GMIN
      YPARTS(2,KK)=0.0
      WRITE (6,21)
21    FORMAT (/1X,'*** WARNING ***  UNDERFLOW ENCOUNTERED'/)
   30 IS=IUR(L)
      IE=IUR(L+1)-1
      IF (IS.GT.IE) GO TO 50
      DO 40 IL=IS,IE
      CUL(IL)=CUL(IL)/CYNL(KK)
      IO=IUC(IL)
      IDIAG=IORDER(IO)
      CYNL(IDIAG)=CYNL(IDIAG)-CUL(IL)*CU(IL)
      DO 35 IU=IS,IE
      JO=IUC(IU)
      IF (IO-JO) 31,35,33
C
C  FIND (IO,JO) MATRIX TERM (UPPER TRIANGLE)
C
   31 J=IUR(IO+1)
      JE=IUR(IO)
   32 J=J-1
      IF (J.LT.JE) GO TO 1000
      IF (IUC(J).NE.JO) GO TO 32
      CU(J)=CU(J)-CUL(IL)*CU(IU)
      GO TO 35
C
C  FIND (IO,JO) MATRIX TERM (LOWER TRIANGLE)
C
   33 J=IUR(JO+1)
      JE=IUR(JO)
   34 J=J-1
      IF (J.LT.JE) GO TO 1000
      IF (IUC(J).NE.IO) GO TO 34
      CUL(J)=CUL(J)-CUL(IL)*CU(IU)
   35 CONTINUE
   40 CONTINUE
   50 CONTINUE
C
C  FORWARD SUBSTITUTION
C
      DO 70 J=1,LE
      JCS=IUR(J)
      JCE=IUR(J+1)-1
      IF (JCE.LT.JCS) GO TO 70
      JB=IORDER(J)
      DO 60 I=JCS,JCE
      II=IUC(I)
      IB=IORDER(II)
      CVN(IB)=CVN(IB)-CVN(JB)*CUL(I)
   60 CONTINUE
   70 CONTINUE
C
C  BACK SUBSTITUTION
C
   75 IO=IORDER(NSTOP)
      RY=ABS(YPARTS(1,IO))
      XY=ABS(YPARTS(2,IO))
      IF ((RY+XY).GT.GMIN) GO TO 78
      YPARTS(1,IO)=GMIN
      YPARTS(2,IO)=0.0
      WRITE (6,21)
   78 CVN(IO)=CVN(IO)/CYNL(IO)
      IF (LE.EQ.0) GO TO 100
      DO 90 I=1,LE
      IO=IORDER(NSTOP-I)
      JS=IUR(NSTOP-I)
      JE=IUR(NSTOP-I+1)-1
      IF (JE.LT.JS) GO TO 85
      DO 80 J=JS,JE
      JJ=IUC(J)
      JO=IORDER(JJ)
      CVN(IO)=CVN(IO)-CU(J)*CVN(JO)
   80 CONTINUE
   85 CVN(IO)=CVN(IO)/CYNL(IO)
   90 CONTINUE
C
C  SET SOURCE NODES TO THEIR VOLTAGE VALUE
C
  100 VNPART(1,1)=0.0
      VNPART(2,1)=0.0
      IF (NUMVS.EQ.0) GO TO 135
      DO 110 I=1,NUMVS
      IELNUM=MATLOC(NUMVS-I+1)
      LOC=LOCAL(IELNUM)
      NODE1=NODPLC(LOC)
      NODE2=NODPLC(LOC+1)
      SIGN=NODPLC(LOC+2)
      MNAM=MNAME(IELNUM)
      ISPOT=ICURNT(6)+2*(IELNUM-LOCATE(6))
      TRACUR(ISPOT)=VNPART(1,NODE1)
      TRACUR(ISPOT+1)=VNPART(2,NODE1)
      CVAL=SIGN*CMPLX(SOURCE(MNAM+1),SOURCE(MNAM+4))
      CVN(NODE1)=CVN(NODE2)+CVAL
  110 CONTINUE
C
C  STORE OUTPUT
C
  135 ICALC=ICALC+1
      FREQ(ICALC)=FREQ1
      IKNT=0
  140 IKNT=IKNT+1
      IF (IKNT.GT.NUMOR(3)) GO TO 160
      JKNT=IACVAR(IKNT)
      IF (IOFLG(JKNT).EQ.3) GO TO 140
      IPNOD=IOPND(JKNT)
      IF (IOFLG(JKNT).EQ.2) GO TO 150
      INNOD=IONND(JKNT)
      PUTOUT(1,ICALC,IKNT)=VNPART(1,IPNOD)-VNPART(1,INNOD)
      PUTOUT(2,ICALC,IKNT)=VNPART(2,IPNOD)-VNPART(2,INNOD)
      GO TO 140
  150 CALL ACCAL(IPNOD,CREAL,CIMAG)
      PUTOUT(1,ICALC,IKNT)=CREAL
      PUTOUT(2,ICALC,IKNT)=CIMAG
      GO TO 140
  160 IF (NOSOUT.NE.0) CALL NOISE
C
C  INCREMENT FREQUENCY
C
      IF (IDFREQ.GT.1) GO TO 180
      FREQ1=FREQ1+FINCR
      GO TO 190
  180 FREQ1=FREQ1*FINCR
  190 IF (ICALC-JACFLG) 1,1100,1100
C
C  FINISHED
C
 1000 NOGO=1
      WRITE (6,1001)
 1001 FORMAT (/1X,'  PROGRAM ERROR IN MATRIX INVERSION'/)
1100  RETURN
      E