MODULE DASH(DOLLAR,ENTRIES=($DELNE,$DPLBL,$DGOTO,$DCALL,$DGLBL),FSAVE,
                TIMING,TIMER=EXTERNAL(SIX12))=

BEGIN
REQUIRE DDEFS.BLI[7,107355];
REQUIRE DVDEFS.BLI[7,107355];
REQUIRE RDEFS.BLI[7,107355];
REQUIRE UDEFS.BLI[7,107355];
REQUIRE SDEFS.BLI[7,107355];
REQUIRE GDEFS.BLI[7,107355];

UNDECLARE $DELNE,$DPLBL;
UNDECLARE $DGOTO;
UNDECLARE $DCALL;

MAP U$DYNARY DPOOL$;
MAP U$DYNARY DBASE$;
MAP DR$ DREGS$;
MAP DF$I DFLAG$;

GLOBAL ROUTINE $DCALL(TYPE,STP)=
   BEGIN
   %$DCALL PROCESSES CALLS TO PAGE HEADER AND FOOTER ROUTINES,
    AS WELL AS THE OTHER KINDS OF CONTROLLED PRINTS, AND
    AS A BONUS GENERATES CALLS TO VERIFY CODE TO
    HANDLE "IF ILLEGAL" SITUATIONS

    TYPE .. EITHER GV$RESULT OR GV$NORSLT FOR LOGICAL RESULT
    STP....A SYMBOL TABLE POINTER TO THE LABEL STP TO BE PUSHJ'ED TO

    CODE IS STRAIGHT FORWARD

    /JS......................11/11/74
    %


    $DFRCA();
    $DFRCL(); %ONE MUST BE VERY CAREFUL%
    $DGLBL(.STP,1); %SET LABEL SYMBOL TABLE ENTRY%
    %FORCES ADDRESS FOR INDIRECT%
    DFLAG$_0;
    IF .DGAM$[G$LENGTH] EQL 5 THEN
        BEGIN
        %ONE PARAMETER%
        $DGOPD(3,2); %ASSUME FIELD INCARNATION ONLY..NO LITERALS%
        $DGSAD(.DREGS$[DR$BASE,2],.DREGS$[DR$OFFSET,2],3);
        $DGSYL(#1000001,2); %SUBTRACT ONE FROM STACK PTR%
        DFLAG$_0;
        DFLAG$[0,1]_1; %ONE PARAMETER%
        END;
    %NOW GENERATE THE PUSHJ,ETC%
    DFLAG$[0,#17]_1;  %SHOULD FORCE A DIRECT%
    $DPCP(DTPV$RCALL);
    IF .TYPE NEQ GV$RESULT THEN RETURN; %RETURN IF NO VALUE%

    DXLOGAC$_.DGAM$[G$ID]; %SET VALUE OF TUPLR%
    DXLOGCT$_.DGAM$[G$UCNT];
    %QUICK FIX%
    DXLOGCT$_1;
    END;

GLOBAL ROUTINE $DELNE(ARG)=
        BEGIN
%$DELNE EMITS ONE EACH LINE NUMBER ENTRY,WHERE A LINE NUMBER ENTRY
LOOKS LIKE THIS:
        WD0:    TFE NUMBER
        WD1:    TRACE INFO(RUN TIME)
        WD2:    ADDRESS OF NEXT LINE NUMBER.

THE ONE ARGUMENT IS THE TFE LINE NUMBER IN "ARG";
THE OUTPUT IS A SERIES OF CALLS TO THE $DEMIT PACKAGE

/JS             4/17/74
%
LOCAL T;
   IF DEBUG$LNE EQL 0 THEN RETURN;
   IF .ARG NEQ 0 THEN
        BEGIN
        %EMIT A CALL TO TRACE WITH THE LNE ADDRESS AS
        THE PARAMETER%
        $DEUCE(DBV$LITBASE);
        IF .DXCLNE$ EQL 0 THEN
                T_0
        ELSE
                T_.DBASE$[DBV$LNEBASE]+3;
        $DGSAD(DBV$LNEBASE,.T,3);
!       $DRNCL(RTRV$YTRCE,1);
        END;

   IF .DXCLNE$ EQL 0 THEN
        DXCLNE$_.ARG     %FIRST TIME THROUGH%
   ELSE
        BEGIN
        DBASE$[DBV$LNEBASE]_.DBASE$[DBV$LNEBASE]+3;
        $DEUCE(DBV$LNEBASE);
        $DEMIT(DV$CNST,0,0,0,.DXCLNE$);
        $DEMIT(DV$CNST,0,0,0,0);
        IF .ARG NEQ 0 THEN
           BEGIN    %NORMAL CASE%
           $DEMIT(DV$DRELR,0,DBV$LNEBASE,0,.DBASE$[DBV$LNEBASE]);
           DXCLNE$_.ARG;
           END
        ELSE %CLEANUP TIME%
           $DEMIT(DV$CNST,0,0,0,0);
        END;
        RETURN;
        END;



GLOBAL ROUTINE $DPLBL(STP)=
        BEGIN
%$DPLBL PROCESSES ONE EACH LABEL BY DIDDLING THE LABEL DESCRIPTION
ENTRY IN THE SYMBOL TABLE ENTRY POINTED TO BY
.STP

THE SINGLE ARGUMENT IS A SYMBOL TABLE POINTER RIPPED FROM THE
G$OPNDN ENTRY IN THE CURRENT GAMMA FILE ITEM

THE ROUTINE USES THE SYMBOL TABLE ROUTINES AND THE $DEMIT ROUTINE


/JS             4/17/74
%
        LOCAL P;
        MAP S$ P;
        P_$SGSTE(.STP);
        P[S$DBT]_SV$LC;
        P[S$DB]_DBV$PROGBASE;
        P[S$DFO]_.DBASE$[DBV$PROGBASE]; %PROGRAM COUNTER%
        P[S$DAL]_1;
        $SFRCH(.P);
        $DEMIT(DV$NOTE,1,DBV$PROGBASE,.STP,.DBASE$[DBV$PROGBASE]);
        %EMIT A NOTE THAT LABEL HAS BEEN ALLOCATED%
        RETURN;
        END;


UNDECLARE $DGLBL;

GLOBAL ROUTINE $DGLBL(STP,I)=
   BEGIN
    %$DGLBL GETS THE SDDRESS INFORMATION FOR THE
    LABEL INCARNATION WHOSE SYMBOL TABLE ENTRY IS 
    DENOTED BY "STP" TO SYMBOLIC REGISTER "I"


    THIS CODE USED TO BE IN $DGOTO, BUT CIRCUMSTANCES REQUIRED
    THAT IT BE MOVED HERE...

    /JS.............................6/22/74
    %

   LOCAL P;
   MAP S$ P;

   P_$SGSTE(.STP);

   IF .P[S$DBT] EQL SV$LC THEN
        BEGIN
        % LABEL IS ALREADY ALLOCATED%
        DREGS$[DR$BASE,.I]_.P[S$DB];
        DREGS$[DR$OFFSET,.I]_.P[S$DFO];
        DREGS$[DR$DDTYPE,.I]_DDV$1WD;
        END
   ELSE
        BEGIN
        DREGS$[DR$BASE,.I]_0;
        DREGS$[DR$OFFSET,.I]_.STP;
        DREGS$[DR$DDTYPE,.I]_DDV$STP;
        END;

    DREGS$[DR$STP1,.I]_.STP;

    $SFRCH(.P);

    END;

GLOBAL ROUTINE $DGOTO(TYPE,STP,TUPLE)=
   BEGIN
   % $DGOTO GENERATES ONE EACH BRANCH INSTRUCTION FOR THE FOLLOWING
    GAMMA CODE OPERATORS:
        GV$BRCHF;    GV$BRCHT;     GV$BRANCH.

   THE PARAMETERS ARE AS FOLLOWS:

        TYPE:  THE GAMMA FILE TOKEN TYPE

        STP:  A STANDARD SYMBOL TABLE POINTER THAT POINTS TO THE
                LABEL INCARNATION FOR THE DESTINATION

        TUPLE:  THE GAMMA FILE POINTER TO THE TUPLE WHOSE
                LOGICAL VALUE WE ARE TESTING, IF THIS IS A 
                CONDITIONAL BRANCH..ZERO OTHERWISE

   THE GENERAL FLOW IS  AS FOLLOWS...

        (1) THE LOGICAL TUPLE IS FORCED INTO THE LOGIC ACCUMULATOR
                (R3) IF NOT THERE ALREADY;

        (2) THE SYMBOL TABLE ENTRY ENTRY IS ACCESSED;
          IF THE LABEL INCARNATION HAS ALREADY BEEN
          ALLOCATED , DREG$[1] IS SET UP TO POINT AT
          THE RELATIVE ADDRESS, AND A DV$IREL WILL BE GENERATED;
          OTHERWISE, THE STP IS USED AND A DV$ISTP
          WILL BE GENERATED AND THE OOP WILL DO THE FIXUP.

        (3) THE SYMBOL TABLE ENTRY IS RELEASED AND $DPCP IS 
          CALLED TO GENERATE THE BRANCH.

        (N.B. (1) MAY BE BURIED IN (3) IF I SO DECIDE)

/JS..........4/30/74
   %
   $DGLBL(.STP,1);
   %NOW EMIT AN INSTRUCTION SEQUENCE%
   IF .TYPE EQL GV$BRANCH THEN
        $DPCP(DTPV$BRNCH)
   ELSE IF (.TYPE EQL GV$BRCHF) OR (.TYPE EQL GV$BRCHT) THEN
        BEGIN
        %FORCE LOGICAL AC HERE%
        $DGLOGOPD(1,2); %OPERAND 1 TO REGISTER 2%
        $DFRCL();
        IF .TYPE EQL GV$BRCHT THEN 
           $DPCP(DTPV$BRCHT)
        ELSE
           $DPCP(DTPV$BRCHF)
        END;

   END;



END ELUDOM
