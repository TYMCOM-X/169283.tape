      SUBROUTINE OUTPUT
C
C DECLARATION STATEMENTS
C
      INTEGER R,W
      REAL J,JS,K,KT,L,M,MLOCAL,MS,MU,MUZERO,N,NS,MAPBX,MAPBY
      REAL MAXAX
      COMMON /KEY/ KEY,KAXLE,KROAD
      COMMON /SAFB/ KSAFB,ONTIME,TMAX,RISET
      DIMENSION TMAX(3)
      COMMON /MAPB/ KMAPB,NOMAPB,MAPBX,MAPBY
      DIMENSION MAPBX(5),MAPBY(5)
      COMMON /PAGE/ NP
      COMMON /PAR/ AA1,AA2,AA4,AA5,AA6,AA7,AA8,A1,A2,ALPHA,C,CF,CS,
     1  DELTA,FA,J,JS,K,KT,MUZERO,PERCNT,         M,MS,WP,PJ,PX,PZ
     2 ,PM,W1,WS
      DIMENSION WS(3)
      COMMON/BLOCK1/R,W
      COMMON /BLOCK2/ XPRINT,XDOT,FX,SZERO,SLOPE,MLOCAL,XDD
      COMMON /BLOCK3/ ICOUNT,NOGEAR,GEARV,GRAT,NUMEB,EBX,EBY,EBPER,
     1  EMINUS
      DIMENSION GEARV(10),GRAT(10),EBX(5),EBY(5)
      COMMON /BLOCK5/ N,SLIP,XLAM,MU,SLO,TT,OMEGAD,L
      COMMON /BLOCK6/ TQ,XX,YY,NUM
      COMMON /BLOCK7/ NS,SF,P,POLD,T,PROP,RR
      COMMON /BLOCK8/ KPROP,MAXAX,EMPTY
      DIMENSION PRINT(7,8,45)
      DIMENSION Y(12),DERY(12),PRMT(5)
      DIMENSION PROP(3),MAXAX(3),EMPTY(3)
      DIMENSION SLOPE(3),MLOCAL(3),SZERO(3),FX(3)
      DIMENSION XX(150),YY(150),NUM(6),TQ(3,2),POLD(3),P(5)
      DIMENSION S(3),T(5),SD(3),CCF(3),XLAM(3),L(3)
      DIMENSION MU(3),N(3),OMEGAD(3),RR(3),SF(3),SLIP(3),SLO(3),TT(3),
     1  ZS(3),AC(3),NS(3)
      DIMENSION ALPHA(2),C(4),CF(2),CS(3),DELTA(2),FA(3),JS(3),K(2),
     1  KT(3),MS(3),MUZERO(3)
      DIMENSION TLOCK(5)
C
      DO 1 I=1,KAXLE
    1 TLOCK(I)=0.0
C INITIAL CALL TO OUTPUT
C READ TIME INCREMENT
C
      READ(R,1000) TINC
 1000 FORMAT(F14.2)
      WRITE(W,146) TINC
  146 FORMAT(/'0TIME INCREMENT TO BE PRINTED OUT IS',F5.2)
C
C INITIALIZE CONSTANTS
C
      RADIAN=57.295779
      CFACT=60./(3.1415926*2.0)
C
C INITIALIZE VARIABLES
C
      PAGE=NP
      DO 5 I=1,KAXLE
      POLD(I)=0.
    5 SLOPE(I)=CS(I)/NS(I)
      SLIP(2) = 0.0
      RR(2) = ALPHA(2)
      LINE = 0.
      STEP = 0.
C
C OPTION 6
C DO INITIALIZATIONS IN BRAKE SUBROUTINE
C
      IF(NUM(2).LT.0) CALL BINIT(KAXLE)
C
C RETURN TO MAIN AND BEGIN SIMULATION
C
      WRITE(W,100)
  100 FORMAT(/'0 *** BEGIN OUTPUT ***')
      RETURN
C
C ENTER OUTP, CALLED FROM HPCG
      ENTRY OUTP(X,Y,DERY,IHLF,NDIM,PRMT)
C
C
C CHECK IHLF  ...EXIT FROM HPCG IF HPCG HAS HALVED THE TIME STEP MORE
C THAN ONCE
C
      IF (IHLF .GT. 2) PRMT(5)=1.
C
C **  UPDATE NECESSARY VARIABLES
C
      XPRINT = X
      XDD = DERY(6)
      XDOT = Y(6)
      DO 10 I=1,KAXLE
      POLD(I)=P(I)
      SLOPE(I)= SLO(I)
      MLOCAL(I)=MU(I)
      SZERO(I)=SLIP(I)
   10 CONTINUE
C
C CALCULATE AC(I), I=1,KAXLE
C
      AC(1) = DERY(8)
      IF(KEY.EQ.2)GO TO 11
      AC(2) = (-AA1*DERY(12) + DERY(10))
      AC(3) = (AA2 *DERY(12) + DERY(10))
      IF (KEY .EQ. 0) AC(3)=0.
      GO TO 12
11    AC(2) = DERY(10)
      AC(3) = DERY(12)
12    CONTINUE
C
C RETURN IF Y(6) (VELOCITY) IS GREATER THAN OR EQUAL 0.0001
C AND IF STEP IS GREATER THAN X (TIME)
C OTHERWISE WRITE INTO NEXT LINE OF OUTPUT BUFFER
C
      IF(Y(6) .LT..0001)GO TO 15
      IF ((STEP - 0.0001) .GT. X) RETURN
   15 LINE=LINE+1
      STEP=STEP+TINC
      DO 20 I=1,7
   20 PRINT(I,1,LINE)=X
      PRINT(1,2,LINE) = Y(1)*12.
      PRINT(1,3,LINE) = Y(3)*RADIAN
      PRINT(1,4,LINE) = Y(5)
      PRINT(1,5,LINE) = Y(6)
      PRINT(1,6,LINE) = DERY(6)
      SUM=0.
      DO 30 I=1,3
      SUM=SUM+FX(I)
      IF (N(I) .EQ. 0.) N(I)=1.
      PRINT(2,I+1,LINE)=SLIP(I)
   30 PRINT(2,I+4,LINE)=FX(I)
      IF (SUM .EQ. 0.) SUM=1.
      DO 35 I=1,KAXLE
      PRINT(I+2,2,LINE) = TT(I)*12.
      PRINT(I+2,3,LINE) = MS(I)*AC(I) - WS(I) + N(I)
      PRINT(I+2,4,LINE)=SLIP(I)
      PRINT(I+2,5,LINE)=OMEGAD(I)
      PRINT(I+2,6,LINE)=FX(I)
      PRINT(I+2,7,LINE)=ABS(FX(I)/N(I))
      PRINT(I+2,8,LINE)=100.*(FX(I)/SUM)
   35 CONTINUE
      PRINT(6,2,LINE)=Y(1)*12.
      PRINT(6,3,LINE) = Y(2)*12.
      PRINT(6,4,LINE) = DERY(2)*12.
      PRINT(6,5,LINE)=Y(3)
      PRINT(6,6,LINE)=Y(4)
      PRINT(6,7,LINE)=DERY(4)
      CALL TABLE(1,NUMB,XX,YY,X,Q)
      PRINT(7,2,LINE)=Q
      DO 40 I=1,3
      PRINT(7,2*I+1,LINE)=P(I)
      PRINT(7,2*I+2,LINE) = T(I)*12.
   40 CONTINUE
C
C IF VELOCITY IS LESS THAN 0.0001 SET PRMT(5) = 1.0, DUMP OUTPUT BUFFER,
C AND CONTINUE SIMULATION
      IF (Y(6) .LE. 0.0) GO TO 45
C
C IF LINE = 45 DUMP OUTPUT BUFFER, OTHERWISE RETURN TO HPCG AND CONTINUE
C SIMULATION
      IF (LINE .LT. 45) RETURN
C
      GO TO 50
   45 PRMT(5)=1.
      IF(NUM(2).LT.0) CALL FINAL
      GO TO 50
      ENTRY OUTP1
      IF(NUM(2).LT.0) CALL FINAL
   50 PAG=PAGE
      JAXLE=KAXLE+4
      IPAG=0
      DO 1055 I=1,JAXLE
      IPAG=IPAG+1
      WRITE(W,200) PAG
  200 FORMAT('1',T52,'TRUCK BRAKING PERFORMANCE TEST'/T48,'TANDEM AXLE U
     1NIT PITCH PLANE VEHICLE'//T60,'PAGE NO.',F6.2//)
      GO TO (111,112,113,114,115,116,117),IPAG
  111 WRITE(W,300)
      GO TO 150
  112 WRITE(W,301)
      GO TO 151
  113 WRITE(W,302)
      WRITE(W,350)
      GO TO 152
  114 IF(KAXLE.EQ.2) GO TO 6000
      WRITE (W,303)
      GO TO 6001
 6000 WRITE (W,6002)
 6002 FORMAT('0',T58,'REAR AXLE (AXLE 2)'/)
      IPAG=IPAG+1
 6001 WRITE (W,350)
      WRITE (W,402) ((PRINT(4,JJ,KK),JJ=1,8),KK=1,LINE)
      GO TO 55
  115 WRITE (W,304)
      WRITE(W,350)
      GO TO 152
  116 WRITE(W,305)
      GO TO 151
  117 WRITE(W,306)
  152 WRITE (W,402) ((PRINT(IPAG,JJ,KK),JJ=1,8),KK=1,LINE)
      GO TO 55
  151 WRITE (W,401) ((PRINT(IPAG,JJ,KK),JJ=1,7),KK=1,LINE)
      GO TO 55
  150 WRITE (W,400) ((PRINT(IPAG,JJ,KK),JJ=1,6),KK=1,LINE)
   55 PAG=PAG+0.01
 1055 CONTINUE
      LINE = 0
      PAGE = PAGE+1.
C
C ** FORMATS
C
  300 FORMAT(T20,'TIME',T36,'BOUNCE',T56,'PITCH',T70,'LONGITUDINAL',T88,
     1  'LONGITUDINAL',T106,'LONGITUDINAL'/T20,'(SEC)',T37,'(IN)',T56,
     2  '(DEG)',T72,'POSITION',T90,'VELOCITY',T106,'ACCELERATION'/T74,
     3   '(FT)',T90,'(FT/SEC)',T106,'(FT/SEC**2)'/)
  301 FORMAT(T17,'TIME',T49,'SLIP',T98,'FX'/T17,'(SEC)',T30,'-----------
     1-----------------------------',4X,'-------------------------------
     2-------------'/T31,'AXLE 1',T48,'AXLE 2',T64,'AXLE 3',T80,'AXLE 1'
     3,T96,'AXLE 2',T112,'AXLE 3'/)
  302 FORMAT(T58,'FRONT AXLE (AXLE 1)'/)
  303 FORMAT(T55,'FRONT TANDEM AXLE (AXLE 2)'/)
  304 FORMAT(T56,'REAR TANDEM AXLE (AXLE 3)'/)
  350 FORMAT( T13,'TIME',T28,'TT',T38,'VERTICAL LOAD',T58,'WHEEL',T69,
     1  'WHEEL ANG.',T87,'FX',T100,'ABS(FX)/FZ',T115,'% BRAKING'/T13,
     2  '(SEC)',T25,'(IN*LBS)',T41,'ON AXLE',T58,'SLIP',T68,
     3  'ACCELERATION',T116,'ON AXLE'/T68,'(RAD/SEC**2)'/)
  305 FORMAT(T17,'TIME',T35,'Z',T49,'Z-DOT',T64,'Z-DDOT',T80,'THETA'
     1  ,T94,'THETA-DOT',T110,'THETA-DDOT'/T17,'(SEC)',
     2  T35,'IN',T49,'IN/SEC',T63,'IN/SEC**2',T81,'RAD',T95,'RAD/SEC',
     3  T110,'RAD/SEC**2'/)
  306 FORMAT(T61,'BRAKE SUMMARY'//T13,'TIME',T24,'PRESSURE',T49,'BRAKE 1
     1',T79,'BRAKE 2',T110,'BRAKE 3'/T13,'(SEC)',T24,'OUTPUT OF',T38,'
     2--------------------------',T68,'  --------------------------',T10
     30,'----------------------------'/T22,'TREADLE VALVE',T40,'PRESSURE
     4',3X,'ATTEMPTED TORQUE',T70,'PRESSURE',3X,'ATTEMPTED TORQUE',T100,
     5'PRESSURE',5X,'ATTEMPTED TORQUE'/)
  400 FORMAT(45(6X,6(8X,F10.3)/))
  401 FORMAT(45(5X,7(6X,F10.3)/))
  402 FORMAT(45(2X,8(5X,F10.3)/))
      RETURN
C
C ENTER TORQUE
C
      ENTRY TORQUE(X)
      NO=1
      NUMB=NUM(1)
      TIME=X-XPRINT
      DO 1250 I=1,KAXLE
      Z=XPRINT-TQ(I,1)
C
C TABLE LOOK-UP FOR PRESSURE
      CALL TABLE(1,NUMB,XX,YY,Z,Q)
C
C OPTION 2
C STATIC LOAD SENSING BRAKE PROPORTIONING
      Q=Q*PROP(I)
C
C PRESSURE EQUATION
      P(I)=(POLD(I)-Q)*EXP(-TIME/TQ(I,2))+Q
C
C OPTION 6
C BRAKE SUBROUTINE TO BE USED
C ONLY USE THIS LOOP TO CALCULATE P(I)
      IF(NUM(2).LT.0) GO TO 1250
C
      Z=P(I)
      NO=NO+25
      NUMC=NO+NUM(I+1)-1
C
C TABLE LOOK-UP FOR TORQUE
      CALL TABLE(NO,NUMC,XX,YY,Z,Q)
C
      T(I)=Q
 1250 CONTINUE
C
C OPTION 6
C CALL BRAKE SUBROUTINE TO CALCULATE TORQUE (ENTRY BCALCU)
C
      IF(NUM(2).GT.0) GO TO 11250
      CALL BCALCU(KAXLE,P,T)
      DO 9100 I=1,KAXLE
 9100 T(I)=T(I)/12.
11250 CONTINUE
      OMEGA = XDOT*(1.0 - SLIP(2))/RR(2)*CFACT
C
C OPTION 3
C ENGINE BRAKING AND/OR PROP SHAFT BRAKING AND/OR AUXILIARY RETARDERS
C
      IF(ICOUNT.EQ.0) GO TO 17002
      GEAR=1
      IJ=NOGEAR+1
      DO 8300 I=1,NOGEAR
      IJ=IJ-1
      IF(XDOT.GE.GEARV(IJ)) GO TO 8310
 8300 CONTINUE
 8310 GRATIO = GRAT(IJ)
      RPM = OMEGA*GRATIO
      CALL TABLE(1,NUMEB,EBX,EBY,RPM,TEB)
      IF(KEY.EQ.0) GO TO 8301
      T(2) = T(2) + EBPER*TEB
      T(3) = T(3)+EMINUS*TEB
      GO TO 17002
 8301 T(2) = T(2) + TEB
17002 CONTINUE
C
C OPTION 4
C MECHANICAL ACTUATION OF PARKING BRAKES
C
      IF(KMAPB.EQ.0) GO TO 9000
      CALL TABLE(1,NOMAPB,MAPBX,MAPBY,X,TMAPB)
      T(2) = T(2) + TMAPB
 9000 CONTINUE
C
C OPTION 5
C SPRING ACTUATION OF FOUNDATION BRAKES
C
      IF(KSAFB.EQ.0 .OR. X.LT.ONTIME) GO TO 9001
      EXPO = 1. - 2.71828**((ONTIME - X)/RISET)
      DO 9002 I=2,KAXLE
 9002 T(I) = T(I) + TMAX(I)*EXPO
 9001 CONTINUE
C
C RETURN TO FCT
C
      RETURN
      END
